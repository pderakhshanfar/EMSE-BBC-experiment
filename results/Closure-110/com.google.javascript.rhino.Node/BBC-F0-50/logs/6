* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 3053
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 174990014
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:41:09.172 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:41:11.227 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 17:41:36.884 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:42:17.133 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 605s and 529 generations, 246445 statements, best individual has fitness: 2707.0
* Minimizing test suite
[MASTER] 17:52:38.733 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 853
* Number of covered goals: 810
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 714
* Number of covered goals: 631
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 473
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 4536
* Number of covered goals: 2310
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 714
* Number of covered goals: 590
* Generated 804 tests with total length 11118
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:53:59.148 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6940166666666666% of time used, but only 38/804 tests minimized), falling back to using all assertions
[MASTER] 17:54:17.779 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 17:54:30.396 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 17:54:33.761 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_41_1629222873462/com/google/javascript/rhino/Node_41_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_41_1629222873462/com/google/javascript/rhino/Node_41_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:33.761 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:33.761 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:33.766 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 753
[MASTER] 17:54:33.768 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_41_1629222873462/com/google/javascript/rhino/Node_41_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:33 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_41_tmp__ESTest extends Node_41_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(0.0);
21:       assertEquals((-1), node0.getCharno());
22:       assertFalse(node0.isInc());
23:       assertFalse(node0.isSwitch());
24:       assertFalse(node0.isHook());
25:       assertFalse(node0.isFalse());
26:       assertFalse(node0.isBreak());
27:       assertFalse(node0.isNE());
28:       assertFalse(node0.isIn());
29:       assertFalse(node0.isThrow());
30:       assertFalse(node0.isEmpty());
31:       assertFalse(node0.isRegExp());
32:       assertFalse(node0.isWith());
33:       assertFalse(node0.isCatch());
34:       assertFalse(node0.isInstanceOf());
35:       assertFalse(node0.isIf());
36:       assertFalse(node0.isLabelName());
37:       assertFalse(node0.isArrayLit());
38:       assertFalse(node0.isThis());
39:       assertFalse(node0.isParamList());
40:       assertFalse(node0.isGetterDef());
41:       assertFalse(node0.isFor());
42:       assertFalse(node0.isScript());
43:       assertFalse(node0.isTry());
44:       assertFalse(node0.hasOneChild());
45:       assertFalse(node0.isCase());
46:       assertFalse(node0.isAdd());
47:       assertFalse(node0.isBlock());
48:       assertEquals(39, node0.getType());
49:       assertFalse(node0.isContinue());
50:       assertFalse(node0.isStringKey());
51:       assertFalse(node0.isCall());
52:       assertFalse(node0.isName());
53:       assertFalse(node0.hasMoreThanOneChild());
54:       assertEquals((-1), node0.getLineno());
55:       assertFalse(node0.isAssignAdd());
56:       assertEquals(0, node0.getChildCount());
57:       assertFalse(node0.isNull());
58:       assertFalse(node0.isOr());
59:       assertFalse(node0.isLabel());
60:       assertFalse(node0.isVar());
61:       assertFalse(node0.isDefaultCase());
62:       assertFalse(node0.isSetterDef());
63:       assertFalse(node0.isDo());
64:       assertFalse(node0.isNew());
65:       assertFalse(node0.isVoid());
66:       assertFalse(node0.isExprResult());
67:       assertFalse(node0.isTrue());
68:       assertFalse(node0.isFunction());
69:       assertFalse(node0.isNot());
70:       assertFalse(node0.isDebugger());
71:       assertFalse(node0.isGetElem());
72:       assertFalse(node0.isCast());
73:       assertFalse(node0.isAnd());
74:       assertFalse(node0.isDelProp());
75:       assertFalse(node0.isGetProp());
76:       assertFalse(node0.hasChildren());
77:       assertFalse(node0.isDec());
78:       assertFalse(node0.isTypeOf());
79:       assertFalse(node0.isReturn());
80:       assertFalse(node0.isAssign());
81:       assertEquals((-1), node0.getSourcePosition());
82:       assertFalse(node0.isComma());
83:       assertFalse(node0.isObjectLit());
84:       assertFalse(node0.isWhile());
85:       assertFalse(node0.isString());
86:       assertTrue(node0.isNumber());
87:       assertEquals(15, Node.NO_SIDE_EFFECTS);
88:       assertEquals(57, Node.LAST_PROP);
89:       assertEquals(54, Node.SLASH_V);
90:       assertEquals(49, Node.DIRECT_EVAL);
91:       assertEquals(1, Node.DECR_FLAG);
92:       assertEquals(12, Node.COLUMN_BITS);
93:       assertEquals(40, Node.ORIGINALNAME_PROP);
94:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
95:       assertEquals(2, Node.POST_FLAG);
96:       assertEquals(30, Node.VAR_ARGS_NAME);
97:       assertEquals(8, Node.FLAG_NO_THROWS);
98:       assertEquals(39, Node.EMPTY_BLOCK);
99:       assertEquals(47, Node.IS_DISPATCHER);
100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
101:       assertEquals(56, Node.CHANGE_TIME);
102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
103:       assertEquals(29, Node.JSDOC_INFO_PROP);
104:       assertEquals(37, Node.OPT_ARG_NAME);
105:       assertEquals(48, Node.DIRECTIVES);
106:       assertEquals(57, Node.REFLECTED_OBJECT);
107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
108:       assertEquals(55, Node.INFERRED_FUNCTION);
109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
110:       assertEquals(52, Node.LENGTH);
111:       assertEquals(43, Node.IS_CONSTANT_NAME);
112:       assertEquals(36, Node.QUOTED_PROP);
113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
114:       assertEquals(53, Node.INPUT_ID);
115:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
116:       assertEquals(4095, Node.COLUMN_MASK);
117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
118:       assertEquals(32, Node.INCRDECR_PROP);
119:       assertEquals(51, Node.STATIC_SOURCE_FILE);
120:       assertEquals(46, Node.IS_NAMESPACE);
121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
122:       assertEquals(50, Node.FREE_CALL);
123:       assertNotNull(node0);
124:       
125:       Node node1 = new Node(52, node0, 16, 132);
126:       assertFalse(node1.equals((Object)node0));
127:       assertEquals((-1), node0.getCharno());
128:       assertFalse(node0.isInc());
129:       assertFalse(node0.isSwitch());
130:       assertFalse(node0.isHook());
131:       assertFalse(node0.isFalse());
132:       assertFalse(node0.isBreak());
133:       assertFalse(node0.isNE());
134:       assertFalse(node0.isIn());
135:       assertFalse(node0.isThrow());
136:       assertFalse(node0.isEmpty());
137:       assertFalse(node0.isRegExp());
138:       assertFalse(node0.isWith());
139:       assertFalse(node0.isCatch());
140:       assertFalse(node0.isInstanceOf());
141:       assertFalse(node0.isIf());
142:       assertFalse(node0.isLabelName());
143:       assertFalse(node0.isArrayLit());
144:       assertFalse(node0.isThis());
145:       assertFalse(node0.isParamList());
146:       assertFalse(node0.isGetterDef());
147:       assertFalse(node0.isFor());
148:       assertFalse(node0.isScript());
149:       assertFalse(node0.isTry());
150:       assertFalse(node0.hasOneChild());
151:       assertFalse(node0.isCase());
152:       assertFalse(node0.isAdd());
153:       assertFalse(node0.isBlock());
154:       assertEquals(39, node0.getType());
155:       assertFalse(node0.isContinue());
156:       assertFalse(node0.isStringKey());
157:       assertFalse(node0.isCall());
158:       assertFalse(node0.isName());
159:       assertFalse(node0.hasMoreThanOneChild());
160:       assertEquals((-1), node0.getLineno());
161:       assertFalse(node0.isAssignAdd());
162:       assertEquals(0, node0.getChildCount());
163:       assertFalse(node0.isNull());
164:       assertFalse(node0.isOr());
165:       assertFalse(node0.isLabel());
166:       assertFalse(node0.isVar());
167:       assertFalse(node0.isDefaultCase());
168:       assertFalse(node0.isSetterDef());
169:       assertFalse(node0.isDo());
170:       assertFalse(node0.isNew());
171:       assertFalse(node0.isVoid());
172:       assertFalse(node0.isExprResult());
173:       assertFalse(node0.isTrue());
174:       assertFalse(node0.isFunction());
175:       assertFalse(node0.isNot());
176:       assertFalse(node0.isDebugger());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.isCast());
179:       assertFalse(node0.isAnd());
180:       assertFalse(node0.isDelProp());
181:       assertFalse(node0.isGetProp());
182:       assertFalse(node0.hasChildren());
183:       assertFalse(node0.isDec());
184:       assertFalse(node0.isTypeOf());
185:       assertFalse(node0.isReturn());
186:       assertFalse(node0.isAssign());
187:       assertEquals((-1), node0.getSourcePosition());
188:       assertFalse(node0.isComma());
189:       assertFalse(node0.isObjectLit());
190:       assertFalse(node0.isWhile());
191:       assertFalse(node0.isString());
192:       assertTrue(node0.isNumber());
193:       assertEquals(16, node1.getLineno());
194:       assertFalse(node1.isNew());
195:       assertFalse(node1.isStringKey());
196:       assertFalse(node1.isVar());
197:       assertFalse(node1.isBlock());
198:       assertFalse(node1.isDo());
199:       assertFalse(node1.isWhile());
200:       assertEquals(52, node1.getType());
201:       assertFalse(node1.isSetterDef());
202:       assertFalse(node1.isAdd());
203:       assertFalse(node1.isAssignAdd());
204:       assertFalse(node1.isLabel());
205:       assertFalse(node1.isParamList());
206:       assertFalse(node1.isLabelName());
207:       assertEquals(65668, node1.getSourcePosition());
208:       assertFalse(node1.isCast());
209:       assertFalse(node1.isContinue());
210:       assertFalse(node1.isVoid());
211:       assertFalse(node1.isDebugger());
212:       assertFalse(node1.isTrue());
213:       assertFalse(node1.isNot());
214:       assertFalse(node1.isDefaultCase());
215:       assertFalse(node1.isObjectLit());
216:       assertFalse(node1.isEmpty());
217:       assertFalse(node1.isOr());
218:       assertFalse(node1.isReturn());
219:       assertFalse(node1.isComma());
220:       assertFalse(node1.isNull());
221:       assertTrue(node1.isInstanceOf());
222:       assertTrue(node1.hasOneChild());
223:       assertFalse(node1.isAssign());
224:       assertFalse(node1.isDec());
225:       assertFalse(node1.isName());
226:       assertFalse(node1.isDelProp());
227:       assertFalse(node1.isTypeOf());
228:       assertFalse(node1.isBreak());
229:       assertFalse(node1.isGetElem());
230:       assertFalse(node1.isCall());
231:       assertFalse(node1.isExprResult());
232:       assertFalse(node1.isSwitch());
233:       assertFalse(node1.isHook());
234:       assertFalse(node1.isThrow());
235:       assertFalse(node1.isCase());
236:       assertFalse(node1.isString());
237:       assertFalse(node1.isGetProp());
238:       assertFalse(node1.isInc());
239:       assertFalse(node1.isAnd());
240:       assertFalse(node1.isFalse());
241:       assertFalse(node1.isArrayLit());
242:       assertFalse(node1.isTry());
243:       assertFalse(node1.isFunction());
244:       assertFalse(node1.isFor());
245:       assertFalse(node1.isNumber());
246:       assertFalse(node1.isGetterDef());
247:       assertFalse(node1.isScript());
248:       assertTrue(node1.hasChildren());
249:       assertEquals(1, node1.getChildCount());
250:       assertFalse(node1.isIn());
251:       assertFalse(node1.isThis());
252:       assertFalse(node1.isNE());
253:       assertFalse(node1.isWith());
254:       assertEquals(132, node1.getCharno());
255:       assertFalse(node1.isIf());
256:       assertFalse(node1.isRegExp());
257:       assertFalse(node1.hasMoreThanOneChild());
258:       assertFalse(node1.isCatch());
259:       assertEquals(15, Node.NO_SIDE_EFFECTS);
260:       assertEquals(57, Node.LAST_PROP);
261:       assertEquals(54, Node.SLASH_V);
262:       assertEquals(49, Node.DIRECT_EVAL);
263:       assertEquals(1, Node.DECR_FLAG);
264:       assertEquals(12, Node.COLUMN_BITS);
265:       assertEquals(40, Node.ORIGINALNAME_PROP);
266:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
267:       assertEquals(2, Node.POST_FLAG);
268:       assertEquals(30, Node.VAR_ARGS_NAME);
269:       assertEquals(8, Node.FLAG_NO_THROWS);
270:       assertEquals(39, Node.EMPTY_BLOCK);
271:       assertEquals(47, Node.IS_DISPATCHER);
272:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
273:       assertEquals(56, Node.CHANGE_TIME);
274:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
275:       assertEquals(29, Node.JSDOC_INFO_PROP);
276:       assertEquals(37, Node.OPT_ARG_NAME);
277:       assertEquals(48, Node.DIRECTIVES);
278:       assertEquals(57, Node.REFLECTED_OBJECT);
279:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
280:       assertEquals(55, Node.INFERRED_FUNCTION);
281:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
282:       assertEquals(52, Node.LENGTH);
283:       assertEquals(43, Node.IS_CONSTANT_NAME);
284:       assertEquals(36, Node.QUOTED_PROP);
285:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
286:       assertEquals(53, Node.INPUT_ID);
287:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
288:       assertEquals(4095, Node.COLUMN_MASK);
289:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
290:       assertEquals(32, Node.INCRDECR_PROP);
291:       assertEquals(51, Node.STATIC_SOURCE_FILE);
292:       assertEquals(46, Node.IS_NAMESPACE);
293:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
294:       assertEquals(50, Node.FREE_CALL);
295:       assertEquals(54, Node.SLASH_V);
296:       assertEquals(52, Node.LENGTH);
297:       assertEquals(57, Node.LAST_PROP);
298:       assertEquals(15, Node.NO_SIDE_EFFECTS);
299:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
300:       assertEquals(49, Node.DIRECT_EVAL);
301:       assertEquals(50, Node.FREE_CALL);
302:       assertEquals(46, Node.IS_NAMESPACE);
303:       assertEquals(51, Node.STATIC_SOURCE_FILE);
304:       assertEquals(57, Node.REFLECTED_OBJECT);
305:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
306:       assertEquals(2, Node.POST_FLAG);
307:       assertEquals(8, Node.FLAG_NO_THROWS);
308:       assertEquals(29, Node.JSDOC_INFO_PROP);
309:       assertEquals(39, Node.EMPTY_BLOCK);
310:       assertEquals(40, Node.ORIGINALNAME_PROP);
311:       assertEquals(30, Node.VAR_ARGS_NAME);
312:       assertEquals(47, Node.IS_DISPATCHER);
313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
314:       assertEquals(53, Node.INPUT_ID);
315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
316:       assertEquals(55, Node.INFERRED_FUNCTION);
317:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
318:       assertEquals(43, Node.IS_CONSTANT_NAME);
319:       assertEquals(56, Node.CHANGE_TIME);
320:       assertEquals(36, Node.QUOTED_PROP);
321:       assertEquals(37, Node.OPT_ARG_NAME);
322:       assertEquals(48, Node.DIRECTIVES);
323:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
324:       assertEquals(32, Node.INCRDECR_PROP);
325:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
326:       assertEquals(1, Node.DECR_FLAG);
327:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
328:       assertEquals(4095, Node.COLUMN_MASK);
329:       assertEquals(12, Node.COLUMN_BITS);
330:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
331:       assertNotNull(node1);
332:       
333:       boolean boolean0 = node1.isEquivalentTo(node0, false, false, true);
334:       assertFalse(node0.equals((Object)node1));
335:       assertFalse(node1.equals((Object)node0));
336:       assertEquals((-1), node0.getCharno());
337:       assertFalse(node0.isInc());
338:       assertFalse(node0.isSwitch());
339:       assertFalse(node0.isHook());
340:       assertFalse(node0.isFalse());
341:       assertFalse(node0.isBreak());
342:       assertFalse(node0.isNE());
343:       assertFalse(node0.isIn());
344:       assertFalse(node0.isThrow());
345:       assertFalse(node0.isEmpty());
346:       assertFalse(node0.isRegExp());
347:       assertFalse(node0.isWith());
348:       assertFalse(node0.isCatch());
349:       assertFalse(node0.isInstanceOf());
350:       assertFalse(node0.isIf());
351:       assertFalse(node0.isLabelName());
352:       assertFalse(node0.isArrayLit());
353:       assertFalse(node0.isThis());
354:       assertFalse(node0.isParamList());
355:       assertFalse(node0.isGetterDef());
356:       assertFalse(node0.isFor());
357:       assertFalse(node0.isScript());
358:       assertFalse(node0.isTry());
359:       assertFalse(node0.hasOneChild());
360:       assertFalse(node0.isCase());
361:       assertFalse(node0.isAdd());
362:       assertFalse(node0.isBlock());
363:       assertEquals(39, node0.getType());
364:       assertFalse(node0.isContinue());
365:       assertFalse(node0.isStringKey());
366:       assertFalse(node0.isCall());
367:       assertFalse(node0.isName());
368:       assertFalse(node0.hasMoreThanOneChild());
369:       assertEquals((-1), node0.getLineno());
370:       assertFalse(node0.isAssignAdd());
371:       assertEquals(0, node0.getChildCount());
372:       assertFalse(node0.isNull());
373:       assertFalse(node0.isOr());
374:       assertFalse(node0.isLabel());
375:       assertFalse(node0.isVar());
376:       assertFalse(node0.isDefaultCase());
377:       assertFalse(node0.isSetterDef());
378:       assertFalse(node0.isDo());
379:       assertFalse(node0.isNew());
380:       assertFalse(node0.isVoid());
381:       assertFalse(node0.isExprResult());
382:       assertFalse(node0.isTrue());
383:       assertFalse(node0.isFunction());
384:       assertFalse(node0.isNot());
385:       assertFalse(node0.isDebugger());
386:       assertFalse(node0.isGetElem());
387:       assertFalse(node0.isCast());
388:       assertFalse(node0.isAnd());
389:       assertFalse(node0.isDelProp());
390:       assertFalse(node0.isGetProp());
391:       assertFalse(node0.hasChildren());
392:       assertFalse(node0.isDec());
393:       assertFalse(node0.isTypeOf());
394:       assertFalse(node0.isReturn());
395:       assertFalse(node0.isAssign());
396:       assertEquals((-1), node0.getSourcePosition());
397:       assertFalse(node0.isComma());
398:       assertFalse(node0.isObjectLit());
399:       assertFalse(node0.isWhile());
400:       assertFalse(node0.isString());
401:       assertTrue(node0.isNumber());
402:       assertEquals(16, node1.getLineno());
403:       assertFalse(node1.isNew());
404:       assertFalse(node1.isStringKey());
405:       assertFalse(node1.isVar());
406:       assertFalse(node1.isBlock());
407:       assertFalse(node1.isDo());
408:       assertFalse(node1.isWhile());
409:       assertEquals(52, node1.getType());
410:       assertFalse(node1.isSetterDef());
411:       assertFalse(node1.isAdd());
412:       assertFalse(node1.isAssignAdd());
413:       assertFalse(node1.isLabel());
414:       assertFalse(node1.isParamList());
415:       assertFalse(node1.isLabelName());
416:       assertEquals(65668, node1.getSourcePosition());
417:       assertFalse(node1.isCast());
418:       assertFalse(node1.isContinue());
419:       assertFalse(node1.isVoid());
420:       assertFalse(node1.isDebugger());
421:       assertFalse(node1.isTrue());
422:       assertFalse(node1.isNot());
423:       assertFalse(node1.isDefaultCase());
424:       assertFalse(node1.isObjectLit());
425:       assertFalse(node1.isEmpty());
426:       assertFalse(node1.isOr());
427:       assertFalse(node1.isReturn());
428:       assertFalse(node1.isComma());
429:       assertFalse(node1.isNull());
430:       assertTrue(node1.isInstanceOf());
431:       assertTrue(node1.hasOneChild());
432:       assertFalse(node1.isAssign());
433:       assertFalse(node1.isDec());
434:       assertFalse(node1.isName());
435:       assertFalse(node1.isDelProp());
436:       assertFalse(node1.isTypeOf());
437:       assertFalse(node1.isBreak());
438:       assertFalse(node1.isGetElem());
439:       assertFalse(node1.isCall());
440:       assertFalse(node1.isExprResult());
441:       assertFalse(node1.isSwitch());
442:       assertFalse(node1.isHook());
443:       assertFalse(node1.isThrow());
444:       assertFalse(node1.isCase());
445:       assertFalse(node1.isString());
446:       assertFalse(node1.isGetProp());
447:       assertFalse(node1.isInc());
448:       assertFalse(node1.isAnd());
449:       assertFalse(node1.isFalse());
450:       assertFalse(node1.isArrayLit());
451:       assertFalse(node1.isTry());
452:       assertFalse(node1.isFunction());
453:       assertFalse(node1.isFor());
454:       assertFalse(node1.isNumber());
455:       assertFalse(node1.isGetterDef());
456:       assertFalse(node1.isScript());
457:       assertTrue(node1.hasChildren());
458:       assertEquals(1, node1.getChildCount());
459:       assertFalse(node1.isIn());
460:       assertFalse(node1.isThis());
461:       assertFalse(node1.isNE());
462:       assertFalse(node1.isWith());
463:       assertEquals(132, node1.getCharno());
464:       assertFalse(node1.isIf());
465:       assertFalse(node1.isRegExp());
466:       assertFalse(node1.hasMoreThanOneChild());
467:       assertFalse(node1.isCatch());
468:       assertFalse(boolean0);
469:       assertEquals(15, Node.NO_SIDE_EFFECTS);
470:       assertEquals(57, Node.LAST_PROP);
471:       assertEquals(54, Node.SLASH_V);
472:       assertEquals(49, Node.DIRECT_EVAL);
473:       assertEquals(1, Node.DECR_FLAG);
474:       assertEquals(12, Node.COLUMN_BITS);
475:       assertEquals(40, Node.ORIGINALNAME_PROP);
476:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
477:       assertEquals(2, Node.POST_FLAG);
478:       assertEquals(30, Node.VAR_ARGS_NAME);
479:       assertEquals(8, Node.FLAG_NO_THROWS);
480:       assertEquals(39, Node.EMPTY_BLOCK);
481:       assertEquals(47, Node.IS_DISPATCHER);
482:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
483:       assertEquals(56, Node.CHANGE_TIME);
484:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
485:       assertEquals(29, Node.JSDOC_INFO_PROP);
486:       assertEquals(37, Node.OPT_ARG_NAME);
487:       assertEquals(48, Node.DIRECTIVES);
488:       assertEquals(57, Node.REFLECTED_OBJECT);
489:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
490:       assertEquals(55, Node.INFERRED_FUNCTION);
491:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
492:       assertEquals(52, Node.LENGTH);
493:       assertEquals(43, Node.IS_CONSTANT_NAME);
494:       assertEquals(36, Node.QUOTED_PROP);
495:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
496:       assertEquals(53, Node.INPUT_ID);
497:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
498:       assertEquals(4095, Node.COLUMN_MASK);
499:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
500:       assertEquals(32, Node.INCRDECR_PROP);
501:       assertEquals(51, Node.STATIC_SOURCE_FILE);
502:       assertEquals(46, Node.IS_NAMESPACE);
503:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
504:       assertEquals(50, Node.FREE_CALL);
505:       assertEquals(54, Node.SLASH_V);
506:       assertEquals(52, Node.LENGTH);
507:       assertEquals(57, Node.LAST_PROP);
508:       assertEquals(15, Node.NO_SIDE_EFFECTS);
509:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
510:       assertEquals(49, Node.DIRECT_EVAL);
511:       assertEquals(50, Node.FREE_CALL);
512:       assertEquals(46, Node.IS_NAMESPACE);
513:       assertEquals(51, Node.STATIC_SOURCE_FILE);
514:       assertEquals(57, Node.REFLECTED_OBJECT);
515:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
516:       assertEquals(2, Node.POST_FLAG);
517:       assertEquals(8, Node.FLAG_NO_THROWS);
518:       assertEquals(29, Node.JSDOC_INFO_PROP);
519:       assertEquals(39, Node.EMPTY_BLOCK);
520:       assertEquals(40, Node.ORIGINALNAME_PROP);
521:       assertEquals(30, Node.VAR_ARGS_NAME);
522:       assertEquals(47, Node.IS_DISPATCHER);
523:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
524:       assertEquals(53, Node.INPUT_ID);
525:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
526:       assertEquals(55, Node.INFERRED_FUNCTION);
527:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
528:       assertEquals(43, Node.IS_CONSTANT_NAME);
529:       assertEquals(56, Node.CHANGE_TIME);
530:       assertEquals(36, Node.QUOTED_PROP);
531:       assertEquals(37, Node.OPT_ARG_NAME);
532:       assertEquals(48, Node.DIRECTIVES);
533:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
534:       assertEquals(32, Node.INCRDECR_PROP);
535:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
536:       assertEquals(1, Node.DECR_FLAG);
537:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
538:       assertEquals(4095, Node.COLUMN_MASK);
539:       assertEquals(12, Node.COLUMN_BITS);
540:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
541:       
542:       boolean boolean1 = node0.isDo();
543:       assertFalse(node0.equals((Object)node1));
544:       assertTrue(boolean1 == boolean0);
545:       assertEquals((-1), node0.getCharno());
546:       assertFalse(node0.isInc());
547:       assertFalse(node0.isSwitch());
548:       assertFalse(node0.isHook());
549:       assertFalse(node0.isFalse());
550:       assertFalse(node0.isBreak());
551:       assertFalse(node0.isNE());
552:       assertFalse(node0.isIn());
553:       assertFalse(node0.isThrow());
554:       assertFalse(node0.isEmpty());
555:       assertFalse(node0.isRegExp());
556:       assertFalse(node0.isWith());
557:       assertFalse(node0.isCatch());
558:       assertFalse(node0.isInstanceOf());
559:       assertFalse(node0.isIf());
560:       assertFalse(node0.isLabelName());
561:       assertFalse(node0.isArrayLit());
562:       assertFalse(node0.isThis());
563:       assertFalse(node0.isParamList());
564:       assertFalse(node0.isGetterDef());
565:       assertFalse(node0.isFor());
566:       assertFalse(node0.isScript());
567:       assertFalse(node0.isTry());
568:       assertFalse(node0.hasOneChild());
569:       assertFalse(node0.isCase());
570:       assertFalse(node0.isAdd());
571:       assertFalse(node0.isBlock());
572:       assertEquals(39, node0.getType());
573:       assertFalse(node0.isContinue());
574:       assertFalse(node0.isStringKey());
575:       assertFalse(node0.isCall());
576:       assertFalse(node0.isName());
577:       assertFalse(node0.hasMoreThanOneChild());
578:       assertEquals((-1), node0.getLineno());
579:       assertFalse(node0.isAssignAdd());
580:       assertEquals(0, node0.getChildCount());
581:       assertFalse(node0.isNull());
582:       assertFalse(node0.isOr());
583:       assertFalse(node0.isLabel());
584:       assertFalse(node0.isVar());
585:       assertFalse(node0.isDefaultCase());
586:       assertFalse(node0.isSetterDef());
587:       assertFalse(node0.isDo());
588:       assertFalse(node0.isNew());
589:       assertFalse(node0.isVoid());
590:       assertFalse(node0.isExprResult());
591:       assertFalse(node0.isTrue());
592:       assertFalse(node0.isFunction());
593:       assertFalse(node0.isNot());
594:       assertFalse(node0.isDebugger());
595:       assertFalse(node0.isGetElem());
596:       assertFalse(node0.isCast());
597:       assertFalse(node0.isAnd());
598:       assertFalse(node0.isDelProp());
599:       assertFalse(node0.isGetProp());
600:       assertFalse(node0.hasChildren());
601:       assertFalse(node0.isDec());
602:       assertFalse(node0.isTypeOf());
603:       assertFalse(node0.isReturn());
604:       assertFalse(node0.isAssign());
605:       assertEquals((-1), node0.getSourcePosition());
606:       assertFalse(node0.isComma());
607:       assertFalse(node0.isObjectLit());
608:       assertFalse(node0.isWhile());
609:       assertFalse(node0.isString());
610:       assertTrue(node0.isNumber());
611:       assertFalse(boolean1);
612:       assertEquals(15, Node.NO_SIDE_EFFECTS);
613:       assertEquals(57, Node.LAST_PROP);
614:       assertEquals(54, Node.SLASH_V);
615:       assertEquals(49, Node.DIRECT_EVAL);
616:       assertEquals(1, Node.DECR_FLAG);
617:       assertEquals(12, Node.COLUMN_BITS);
618:       assertEquals(40, Node.ORIGINALNAME_PROP);
619:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
620:       assertEquals(2, Node.POST_FLAG);
621:       assertEquals(30, Node.VAR_ARGS_NAME);
622:       assertEquals(8, Node.FLAG_NO_THROWS);
623:       assertEquals(39, Node.EMPTY_BLOCK);
624:       assertEquals(47, Node.IS_DISPATCHER);
625:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
626:       assertEquals(56, Node.CHANGE_TIME);
627:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
628:       assertEquals(29, Node.JSDOC_INFO_PROP);
629:       assertEquals(37, Node.OPT_ARG_NAME);
630:       assertEquals(48, Node.DIRECTIVES);
631:       assertEquals(57, Node.REFLECTED_OBJECT);
632:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
633:       assertEquals(55, Node.INFERRED_FUNCTION);
634:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
635:       assertEquals(52, Node.LENGTH);
636:       assertEquals(43, Node.IS_CONSTANT_NAME);
637:       assertEquals(36, Node.QUOTED_PROP);
638:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
639:       assertEquals(53, Node.INPUT_ID);
640:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
641:       assertEquals(4095, Node.COLUMN_MASK);
642:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
643:       assertEquals(32, Node.INCRDECR_PROP);
644:       assertEquals(51, Node.STATIC_SOURCE_FILE);
645:       assertEquals(46, Node.IS_NAMESPACE);
646:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
647:       assertEquals(50, Node.FREE_CALL);
648:       
649:       Iterable<Node> iterable0 = node0.children();
650:       assertFalse(node0.equals((Object)node1));
651:       assertEquals((-1), node0.getCharno());
652:       assertFalse(node0.isInc());
653:       assertFalse(node0.isSwitch());
654:       assertFalse(node0.isHook());
655:       assertFalse(node0.isFalse());
656:       assertFalse(node0.isBreak());
657:       assertFalse(node0.isNE());
658:       assertFalse(node0.isIn());
659:       assertFalse(node0.isThrow());
660:       assertFalse(node0.isEmpty());
661:       assertFalse(node0.isRegExp());
662:       assertFalse(node0.isWith());
663:       assertFalse(node0.isCatch());
664:       assertFalse(node0.isInstanceOf());
665:       assertFalse(node0.isIf());
666:       assertFalse(node0.isLabelName());
667:       assertFalse(node0.isArrayLit());
668:       assertFalse(node0.isThis());
669:       assertFalse(node0.isParamList());
670:       assertFalse(node0.isGetterDef());
671:       assertFalse(node0.isFor());
672:       assertFalse(node0.isScript());
673:       assertFalse(node0.isTry());
674:       assertFalse(node0.hasOneChild());
675:       assertFalse(node0.isCase());
676:       assertFalse(node0.isAdd());
677:       assertFalse(node0.isBlock());
678:       assertEquals(39, node0.getType());
679:       assertFalse(node0.isContinue());
680:       assertFalse(node0.isStringKey());
681:       assertFalse(node0.isCall());
682:       assertFalse(node0.isName());
683:       assertFalse(node0.hasMoreThanOneChild());
684:       assertEquals((-1), node0.getLineno());
685:       assertFalse(node0.isAssignAdd());
686:       assertEquals(0, node0.getChildCount());
687:       assertFalse(node0.isNull());
688:       assertFalse(node0.isOr());
689:       assertFalse(node0.isLabel());
690:       assertFalse(node0.isVar());
691:       assertFalse(node0.isDefaultCase());
692:       assertFalse(node0.isSetterDef());
693:       assertFalse(node0.isDo());
694:       assertFalse(node0.isNew());
695:       assertFalse(node0.isVoid());
696:       assertFalse(node0.isExprResult());
697:       assertFalse(node0.isTrue());
698:       assertFalse(node0.isFunction());
699:       assertFalse(node0.isNot());
700:       assertFalse(node0.isDebugger());
701:       assertFalse(node0.isGetElem());
702:       assertFalse(node0.isCast());
703:       assertFalse(node0.isAnd());
704:       assertFalse(node0.isDelProp());
705:       assertFalse(node0.isGetProp());
706:       assertFalse(node0.hasChildren());
707:       assertFalse(node0.isDec());
708:       assertFalse(node0.isTypeOf());
709:       assertFalse(node0.isReturn());
710:       assertFalse(node0.isAssign());
711:       assertEquals((-1), node0.getSourcePosition());
712:       assertFalse(node0.isComma());
713:       assertFalse(node0.isObjectLit());
714:       assertFalse(node0.isWhile());
715:       assertFalse(node0.isString());
716:       assertTrue(node0.isNumber());
717:       assertEquals(15, Node.NO_SIDE_EFFECTS);
718:       assertEquals(57, Node.LAST_PROP);
719:       assertEquals(54, Node.SLASH_V);
720:       assertEquals(49, Node.DIRECT_EVAL);
721:       assertEquals(1, Node.DECR_FLAG);
722:       assertEquals(12, Node.COLUMN_BITS);
723:       assertEquals(40, Node.ORIGINALNAME_PROP);
724:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
725:       assertEquals(2, Node.POST_FLAG);
726:       assertEquals(30, Node.VAR_ARGS_NAME);
727:       assertEquals(8, Node.FLAG_NO_THROWS);
728:       assertEquals(39, Node.EMPTY_BLOCK);
729:       assertEquals(47, Node.IS_DISPATCHER);
730:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
731:       assertEquals(56, Node.CHANGE_TIME);
732:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
733:       assertEquals(29, Node.JSDOC_INFO_PROP);
734:       assertEquals(37, Node.OPT_ARG_NAME);
735:       assertEquals(48, Node.DIRECTIVES);
736:       assertEquals(57, Node.REFLECTED_OBJECT);
737:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
738:       assertEquals(55, Node.INFERRED_FUNCTION);
739:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
740:       assertEquals(52, Node.LENGTH);
741:       assertEquals(43, Node.IS_CONSTANT_NAME);
742:       assertEquals(36, Node.QUOTED_PROP);
743:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
744:       assertEquals(53, Node.INPUT_ID);
745:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
746:       assertEquals(4095, Node.COLUMN_MASK);
747:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
748:       assertEquals(32, Node.INCRDECR_PROP);
749:       assertEquals(51, Node.STATIC_SOURCE_FILE);
750:       assertEquals(46, Node.IS_NAMESPACE);
751:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
752:       assertEquals(50, Node.FREE_CALL);
753:       assertFalse(iterable0.contains(node0));
754:       assertNotNull(iterable0);
755:       
756:       boolean boolean2 = node0.isHook();
757:       assertFalse(node0.equals((Object)node1));
758:       assertTrue(boolean2 == boolean0);
759:       assertTrue(boolean2 == boolean1);
760:       assertEquals((-1), node0.getCharno());
761:       assertFalse(node0.isInc());
762:       assertFalse(node0.isSwitch());
763:       assertFalse(node0.isHook());
764:       assertFalse(node0.isFalse());
765:       assertFalse(node0.isBreak());
766:       assertFalse(node0.isNE());
767:       assertFalse(node0.isIn());
768:       assertFalse(node0.isThrow());
769:       assertFalse(node0.isEmpty());
770:       assertFalse(node0.isRegExp());
771:       assertFalse(node0.isWith());
772:       assertFalse(node0.isCatch());
773:       assertFalse(node0.isInstanceOf());
774:       assertFalse(node0.isIf());
775:       assertFalse(node0.isLabelName());
776:       assertFalse(node0.isArrayLit());
777:       assertFalse(node0.isThis());
778:       assertFalse(node0.isParamList());
779:       assertFalse(node0.isGetterDef());
780:       assertFalse(node0.isFor());
781:       assertFalse(node0.isScript());
782:       assertFalse(node0.isTry());
783:       assertFalse(node0.hasOneChild());
784:       assertFalse(node0.isCase());
785:       assertFalse(node0.isAdd());
786:       assertFalse(node0.isBlock());
787:       assertEquals(39, node0.getType());
788:       assertFalse(node0.isContinue());
789:       assertFalse(node0.isStringKey());
790:       assertFalse(node0.isCall());
791:       assertFalse(node0.isName());
792:       assertFalse(node0.hasMoreThanOneChild());
793:       assertEquals((-1), node0.getLineno());
794:       assertFalse(node0.isAssignAdd());
795:       assertEquals(0, node0.getChildCount());
796:       assertFalse(node0.isNull());
797:       assertFalse(node0.isOr());
798:       assertFalse(node0.isLabel());
799:       assertFalse(node0.isVar());
800:       assertFalse(node0.isDefaultCase());
801:       assertFalse(node0.isSetterDef());
802:       assertFalse(node0.isDo());
803:       assertFalse(node0.isNew());
804:       assertFalse(node0.isVoid());
805:       assertFalse(node0.isExprResult());
806:       assertFalse(node0.isTrue());
807:       assertFalse(node0.isFunction());
808:       assertFalse(node0.isNot());
809:       assertFalse(node0.isDebugger());
810:       assertFalse(node0.isGetElem());
811:       assertFalse(node0.isCast());
812:       assertFalse(node0.isAnd());
813:       assertFalse(node0.isDelProp());
814:       assertFalse(node0.isGetProp());
815:       assertFalse(node0.hasChildren());
816:       assertFalse(node0.isDec());
817:       assertFalse(node0.isTypeOf());
818:       assertFalse(node0.isReturn());
819:       assertFalse(node0.isAssign());
820:       assertEquals((-1), node0.getSourcePosition());
821:       assertFalse(node0.isComma());
822:       assertFalse(node0.isObjectLit());
823:       assertFalse(node0.isWhile());
824:       assertFalse(node0.isString());
825:       assertTrue(node0.isNumber());
826:       assertFalse(boolean2);
827:       assertEquals(15, Node.NO_SIDE_EFFECTS);
828:       assertEquals(57, Node.LAST_PROP);
829:       assertEquals(54, Node.SLASH_V);
830:       assertEquals(49, Node.DIRECT_EVAL);
831:       assertEquals(1, Node.DECR_FLAG);
832:       assertEquals(12, Node.COLUMN_BITS);
833:       assertEquals(40, Node.ORIGINALNAME_PROP);
834:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
835:       assertEquals(2, Node.POST_FLAG);
836:       assertEquals(30, Node.VAR_ARGS_NAME);
837:       assertEquals(8, Node.FLAG_NO_THROWS);
838:       assertEquals(39, Node.EMPTY_BLOCK);
839:       assertEquals(47, Node.IS_DISPATCHER);
840:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
841:       assertEquals(56, Node.CHANGE_TIME);
842:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
843:       assertEquals(29, Node.JSDOC_INFO_PROP);
844:       assertEquals(37, Node.OPT_ARG_NAME);
845:       assertEquals(48, Node.DIRECTIVES);
846:       assertEquals(57, Node.REFLECTED_OBJECT);
847:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
848:       assertEquals(55, Node.INFERRED_FUNCTION);
849:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
850:       assertEquals(52, Node.LENGTH);
851:       assertEquals(43, Node.IS_CONSTANT_NAME);
852:       assertEquals(36, Node.QUOTED_PROP);
853:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
854:       assertEquals(53, Node.INPUT_ID);
855:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
856:       assertEquals(4095, Node.COLUMN_MASK);
857:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
858:       assertEquals(32, Node.INCRDECR_PROP);
859:       assertEquals(51, Node.STATIC_SOURCE_FILE);
860:       assertEquals(46, Node.IS_NAMESPACE);
861:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
862:       assertEquals(50, Node.FREE_CALL);
863:       
864:       boolean boolean3 = node0.isCall();
865:       assertFalse(node0.equals((Object)node1));
866:       assertTrue(boolean3 == boolean2);
867:       assertTrue(boolean3 == boolean1);
868:       assertTrue(boolean3 == boolean0);
869:       assertEquals((-1), node0.getCharno());
870:       assertFalse(node0.isInc());
871:       assertFalse(node0.isSwitch());
872:       assertFalse(node0.isHook());
873:       assertFalse(node0.isFalse());
874:       assertFalse(node0.isBreak());
875:       assertFalse(node0.isNE());
876:       assertFalse(node0.isIn());
877:       assertFalse(node0.isThrow());
878:       assertFalse(node0.isEmpty());
879:       assertFalse(node0.isRegExp());
880:       assertFalse(node0.isWith());
881:       assertFalse(node0.isCatch());
882:       assertFalse(node0.isInstanceOf());
883:       assertFalse(node0.isIf());
884:       assertFalse(node0.isLabelName());
885:       assertFalse(node0.isArrayLit());
886:       assertFalse(node0.isThis());
887:       assertFalse(node0.isParamList());
888:       assertFalse(node0.isGetterDef());
889:       assertFalse(node0.isFor());
890:       assertFalse(node0.isScript());
891:       assertFalse(node0.isTry());
892:       assertFalse(node0.hasOneChild());
893:       assertFalse(node0.isCase());
894:       assertFalse(node0.isAdd());
895:       assertFalse(node0.isBlock());
896:       assertEquals(39, node0.getType());
897:       assertFalse(node0.isContinue());
898:       assertFalse(node0.isStringKey());
899:       assertFalse(node0.isCall());
900:       assertFalse(node0.isName());
901:       assertFalse(node0.hasMoreThanOneChild());
902:       assertEquals((-1), node0.getLineno());
903:       assertFalse(node0.isAssignAdd());
904:       assertEquals(0, node0.getChildCount());
905:       assertFalse(node0.isNull());
906:       assertFalse(node0.isOr());
907:       assertFalse(node0.isLabel());
908:       assertFalse(node0.isVar());
909:       assertFalse(node0.isDefaultCase());
910:       assertFalse(node0.isSetterDef());
911:       assertFalse(node0.isDo());
912:       assertFalse(node0.isNew());
913:       assertFalse(node0.isVoid());
914:       assertFalse(node0.isExprResult());
915:       assertFalse(node0.isTrue());
916:       assertFalse(node0.isFunction());
917:       assertFalse(node0.isNot());
918:       assertFalse(node0.isDebugger());
919:       assertFalse(node0.isGetElem());
920:       assertFalse(node0.isCast());
921:       assertFalse(node0.isAnd());
922:       assertFalse(node0.isDelProp());
923:       assertFalse(node0.isGetProp());
924:       assertFalse(node0.hasChildren());
925:       assertFalse(node0.isDec());
926:       assertFalse(node0.isTypeOf());
927:       assertFalse(node0.isReturn());
928:       assertFalse(node0.isAssign());
929:       assertEquals((-1), node0.getSourcePosition());
930:       assertFalse(node0.isComma());
931:       assertFalse(node0.isObjectLit());
932:       assertFalse(node0.isWhile());
933:       assertFalse(node0.isString());
934:       assertTrue(node0.isNumber());
935:       assertFalse(boolean3);
936:       assertEquals(15, Node.NO_SIDE_EFFECTS);
937:       assertEquals(57, Node.LAST_PROP);
938:       assertEquals(54, Node.SLASH_V);
939:       assertEquals(49, Node.DIRECT_EVAL);
940:       assertEquals(1, Node.DECR_FLAG);
941:       assertEquals(12, Node.COLUMN_BITS);
942:       assertEquals(40, Node.ORIGINALNAME_PROP);
943:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
944:       assertEquals(2, Node.POST_FLAG);
945:       assertEquals(30, Node.VAR_ARGS_NAME);
946:       assertEquals(8, Node.FLAG_NO_THROWS);
947:       assertEquals(39, Node.EMPTY_BLOCK);
948:       assertEquals(47, Node.IS_DISPATCHER);
949:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
950:       assertEquals(56, Node.CHANGE_TIME);
951:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
952:       assertEquals(29, Node.JSDOC_INFO_PROP);
953:       assertEquals(37, Node.OPT_ARG_NAME);
954:       assertEquals(48, Node.DIRECTIVES);
955:       assertEquals(57, Node.REFLECTED_OBJECT);
956:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
957:       assertEquals(55, Node.INFERRED_FUNCTION);
958:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
959:       assertEquals(52, Node.LENGTH);
960:       assertEquals(43, Node.IS_CONSTANT_NAME);
961:       assertEquals(36, Node.QUOTED_PROP);
962:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
963:       assertEquals(53, Node.INPUT_ID);
964:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
965:       assertEquals(4095, Node.COLUMN_MASK);
966:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
967:       assertEquals(32, Node.INCRDECR_PROP);
968:       assertEquals(51, Node.STATIC_SOURCE_FILE);
969:       assertEquals(46, Node.IS_NAMESPACE);
970:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
971:       assertEquals(50, Node.FREE_CALL);
972:   }
973: }
RegularFileObject[/tmp/EvoSuite_41_1629222873462/com/google/javascript/rhino/Node_41_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:33 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_41_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_41_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.common.collect.Iterables",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.common.collect.AbstractMultimap$Values",
132:       "com.google.javascript.rhino.jstype.ProxyObjectType",
133:       "com.google.common.collect.Sets$SetView",
134:       "com.google.common.collect.RegularImmutableAsList",
135:       "com.google.javascript.rhino.jstype.TemplateType",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMultimap$Entries",
190:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
191:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
192:       "com.google.javascript.rhino.jstype.EnumElementType",
193:       "com.google.javascript.rhino.jstype.UnionType",
194:       "com.google.common.base.Objects",
195:       "com.google.javascript.rhino.Node$NumberNode",
196:       "com.google.common.collect.SingletonImmutableList",
197:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
198:       "com.google.common.collect.ImmutableCollection$Builder",
199:       "com.google.javascript.rhino.jstype.StaticSlot",
200:       "com.google.common.collect.Iterators$6",
201:       "com.google.common.collect.BiMap",
202:       "com.google.common.collect.Iterators$7",
203:       "com.google.common.collect.AbstractSetMultimap",
204:       "com.google.common.base.Function",
205:       "com.google.common.collect.ImmutableSet",
206:       "com.google.common.collect.Lists$AbstractListWrapper",
207:       "com.google.common.collect.ImmutableMap",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.Maps$1",
211:       "com.google.javascript.rhino.jstype.EnumType",
212:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.Multimaps$Entries",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
236:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
237:       "com.google.common.collect.ImmutableList",
238:       "com.google.common.collect.SingletonImmutableBiMap",
239:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
240:       "com.google.javascript.rhino.jstype.StringType",
241:       "com.google.javascript.rhino.Node$AbstractPropListItem",
242:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
243:       "com.google.javascript.rhino.jstype.TemplatizedType",
244:       "com.google.javascript.rhino.jstype.Visitor",
245:       "com.google.javascript.rhino.jstype.NoResolvedType",
246:       "com.google.javascript.rhino.jstype.JSTypeNative",
247:       "com.google.javascript.rhino.jstype.AllType",
248:       "com.google.common.collect.Maps",
249:       "com.google.common.collect.SetMultimap",
250:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
251:       "com.google.common.collect.Maps$EntryTransformer",
252:       "com.google.javascript.rhino.JSTypeExpression",
253:       "com.google.common.collect.Iterators$MergingIterator"
254:     );
255:   } 
256: 
257:   private static void resetClasses() {
258:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_41_tmp__ESTest_scaffolding.class.getClassLoader()); 
259: 
260:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
261:       "com.google.javascript.rhino.Node",
262:       "com.google.javascript.rhino.Node$NumberNode",
263:       "com.google.javascript.rhino.Node$StringNode",
264:       "com.google.javascript.rhino.Node$AbstractPropListItem",
265:       "com.google.javascript.rhino.Node$ObjectPropListItem",
266:       "com.google.javascript.rhino.Node$IntPropListItem",
267:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
268:       "com.google.javascript.rhino.Node$AncestorIterable",
269:       "com.google.javascript.rhino.Node$NodeMismatch",
270:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
271:       "com.google.javascript.rhino.Node$SideEffectFlags",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.Token",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.base.Objects",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
352:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.common.collect.AbstractIndexedListIterator",
362:       "com.google.common.collect.Iterators$11",
363:       "com.google.javascript.rhino.Node$AncestorIterable$1",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.InputId",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.javascript.rhino.JSTypeExpression",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.Sets$ImprovedAbstractSet",
375:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
376:       "com.google.common.collect.Hashing",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
378:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
379:       "com.google.common.collect.Platform"
380:     );
381:   }
382: }

[MASTER] 17:54:33.854 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node0);

Node node1 = new Node(52, node0, 16, 132);
assertFalse(node1.equals((Object)node0));
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertEquals(16, node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertEquals(52, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(65668, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertTrue(node1.isInstanceOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertEquals(132, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node1);

boolean boolean0 = node1.isEquivalentTo(node0, false, false, true);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertEquals(16, node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertEquals(52, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertEquals(65668, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertTrue(node1.isInstanceOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertEquals(132, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(boolean0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean1 = node0.isDo();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(boolean1);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

boolean boolean2 = node0.isHook();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(boolean2);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

boolean boolean3 = node0.isCall();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(boolean3);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);


[MASTER] 17:54:35.289 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_49_1629222875077/com/google/javascript/rhino/Node_49_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_49_1629222875077/com/google/javascript/rhino/Node_49_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:35.289 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:35.289 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:35.291 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1082
[MASTER] 17:54:35.293 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_49_1629222875077/com/google/javascript/rhino/Node_49_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:35 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_49_tmp__ESTest extends Node_49_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(304, 304, 304);
21:       assertFalse(node0.isGetElem());
22:       assertFalse(node0.isCast());
23:       assertFalse(node0.isNumber());
24:       assertFalse(node0.isDec());
25:       assertFalse(node0.isTypeOf());
26:       assertFalse(node0.hasChildren());
27:       assertFalse(node0.isAssign());
28:       assertFalse(node0.isLabel());
29:       assertFalse(node0.isAssignAdd());
30:       assertEquals(304, node0.getLineno());
31:       assertFalse(node0.isReturn());
32:       assertFalse(node0.isScript());
33:       assertFalse(node0.hasOneChild());
34:       assertFalse(node0.isWith());
35:       assertFalse(node0.isWhile());
36:       assertFalse(node0.isInstanceOf());
37:       assertFalse(node0.hasMoreThanOneChild());
38:       assertFalse(node0.isOr());
39:       assertFalse(node0.isExprResult());
40:       assertFalse(node0.isBreak());
41:       assertFalse(node0.isStringKey());
42:       assertFalse(node0.isName());
43:       assertFalse(node0.isVar());
44:       assertFalse(node0.isNull());
45:       assertFalse(node0.isHook());
46:       assertFalse(node0.isNew());
47:       assertFalse(node0.isBlock());
48:       assertFalse(node0.isThis());
49:       assertFalse(node0.isAdd());
50:       assertFalse(node0.isDo());
51:       assertFalse(node0.isCase());
52:       assertEquals(0, node0.getChildCount());
53:       assertFalse(node0.isParamList());
54:       assertEquals(1245488, node0.getSourcePosition());
55:       assertFalse(node0.isArrayLit());
56:       assertFalse(node0.isSwitch());
57:       assertFalse(node0.isLabelName());
58:       assertFalse(node0.isFor());
59:       assertFalse(node0.isEmpty());
60:       assertFalse(node0.isGetterDef());
61:       assertEquals(304, node0.getCharno());
62:       assertFalse(node0.isDefaultCase());
63:       assertFalse(node0.isTry());
64:       assertFalse(node0.isCatch());
65:       assertFalse(node0.isRegExp());
66:       assertFalse(node0.isIn());
67:       assertFalse(node0.isTrue());
68:       assertFalse(node0.isNE());
69:       assertFalse(node0.isIf());
70:       assertFalse(node0.isVoid());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isFalse());
73:       assertFalse(node0.isCall());
74:       assertFalse(node0.isThrow());
75:       assertFalse(node0.isComma());
76:       assertEquals(304, node0.getType());
77:       assertFalse(node0.isGetProp());
78:       assertFalse(node0.isSetterDef());
79:       assertFalse(node0.isInc());
80:       assertFalse(node0.isContinue());
81:       assertFalse(node0.isAnd());
82:       assertFalse(node0.isString());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isFunction());
85:       assertFalse(node0.isObjectLit());
86:       assertFalse(node0.isNot());
87:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
88:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
89:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
90:       assertEquals(43, Node.IS_CONSTANT_NAME);
91:       assertEquals(36, Node.QUOTED_PROP);
92:       assertEquals(56, Node.CHANGE_TIME);
93:       assertEquals(53, Node.INPUT_ID);
94:       assertEquals(29, Node.JSDOC_INFO_PROP);
95:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
96:       assertEquals(4095, Node.COLUMN_MASK);
97:       assertEquals(12, Node.COLUMN_BITS);
98:       assertEquals(49, Node.DIRECT_EVAL);
99:       assertEquals(48, Node.DIRECTIVES);
100:       assertEquals(1, Node.DECR_FLAG);
101:       assertEquals(32, Node.INCRDECR_PROP);
102:       assertEquals(37, Node.OPT_ARG_NAME);
103:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
105:       assertEquals(40, Node.ORIGINALNAME_PROP);
106:       assertEquals(57, Node.REFLECTED_OBJECT);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(39, Node.EMPTY_BLOCK);
109:       assertEquals(15, Node.NO_SIDE_EFFECTS);
110:       assertEquals(54, Node.SLASH_V);
111:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
112:       assertEquals(52, Node.LENGTH);
113:       assertEquals(50, Node.FREE_CALL);
114:       assertEquals(55, Node.INFERRED_FUNCTION);
115:       assertEquals(51, Node.STATIC_SOURCE_FILE);
116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
117:       assertEquals(46, Node.IS_NAMESPACE);
118:       assertEquals(57, Node.LAST_PROP);
119:       assertEquals(2, Node.POST_FLAG);
120:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertNotNull(node0);
124:       
125:       Node node1 = new Node(0, node0, 40, 41);
126:       assertFalse(node1.equals((Object)node0));
127:       assertFalse(node0.isGetElem());
128:       assertFalse(node0.isCast());
129:       assertFalse(node0.isNumber());
130:       assertFalse(node0.isDec());
131:       assertFalse(node0.isTypeOf());
132:       assertFalse(node0.hasChildren());
133:       assertFalse(node0.isAssign());
134:       assertFalse(node0.isLabel());
135:       assertFalse(node0.isAssignAdd());
136:       assertEquals(304, node0.getLineno());
137:       assertFalse(node0.isReturn());
138:       assertFalse(node0.isScript());
139:       assertFalse(node0.hasOneChild());
140:       assertFalse(node0.isWith());
141:       assertFalse(node0.isWhile());
142:       assertFalse(node0.isInstanceOf());
143:       assertFalse(node0.hasMoreThanOneChild());
144:       assertFalse(node0.isOr());
145:       assertFalse(node0.isExprResult());
146:       assertFalse(node0.isBreak());
147:       assertFalse(node0.isStringKey());
148:       assertFalse(node0.isName());
149:       assertFalse(node0.isVar());
150:       assertFalse(node0.isNull());
151:       assertFalse(node0.isHook());
152:       assertFalse(node0.isNew());
153:       assertFalse(node0.isBlock());
154:       assertFalse(node0.isThis());
155:       assertFalse(node0.isAdd());
156:       assertFalse(node0.isDo());
157:       assertFalse(node0.isCase());
158:       assertEquals(0, node0.getChildCount());
159:       assertFalse(node0.isParamList());
160:       assertEquals(1245488, node0.getSourcePosition());
161:       assertFalse(node0.isArrayLit());
162:       assertFalse(node0.isSwitch());
163:       assertFalse(node0.isLabelName());
164:       assertFalse(node0.isFor());
165:       assertFalse(node0.isEmpty());
166:       assertFalse(node0.isGetterDef());
167:       assertEquals(304, node0.getCharno());
168:       assertFalse(node0.isDefaultCase());
169:       assertFalse(node0.isTry());
170:       assertFalse(node0.isCatch());
171:       assertFalse(node0.isRegExp());
172:       assertFalse(node0.isIn());
173:       assertFalse(node0.isTrue());
174:       assertFalse(node0.isNE());
175:       assertFalse(node0.isIf());
176:       assertFalse(node0.isVoid());
177:       assertFalse(node0.isDelProp());
178:       assertFalse(node0.isFalse());
179:       assertFalse(node0.isCall());
180:       assertFalse(node0.isThrow());
181:       assertFalse(node0.isComma());
182:       assertEquals(304, node0.getType());
183:       assertFalse(node0.isGetProp());
184:       assertFalse(node0.isSetterDef());
185:       assertFalse(node0.isInc());
186:       assertFalse(node0.isContinue());
187:       assertFalse(node0.isAnd());
188:       assertFalse(node0.isString());
189:       assertFalse(node0.isDebugger());
190:       assertFalse(node0.isFunction());
191:       assertFalse(node0.isObjectLit());
192:       assertFalse(node0.isNot());
193:       assertFalse(node1.isScript());
194:       assertFalse(node1.isCast());
195:       assertFalse(node1.isExprResult());
196:       assertFalse(node1.isLabelName());
197:       assertFalse(node1.isNot());
198:       assertFalse(node1.isAnd());
199:       assertFalse(node1.isNumber());
200:       assertFalse(node1.isObjectLit());
201:       assertFalse(node1.isOr());
202:       assertFalse(node1.isLabel());
203:       assertFalse(node1.isAssignAdd());
204:       assertFalse(node1.isDo());
205:       assertFalse(node1.isFalse());
206:       assertFalse(node1.isContinue());
207:       assertFalse(node1.isThrow());
208:       assertFalse(node1.isBlock());
209:       assertFalse(node1.isSwitch());
210:       assertFalse(node1.isInc());
211:       assertFalse(node1.isStringKey());
212:       assertEquals(163881, node1.getSourcePosition());
213:       assertTrue(node1.hasChildren());
214:       assertFalse(node1.isInstanceOf());
215:       assertEquals(41, node1.getCharno());
216:       assertFalse(node1.isCase());
217:       assertEquals(40, node1.getLineno());
218:       assertFalse(node1.isFor());
219:       assertFalse(node1.isWith());
220:       assertFalse(node1.isCatch());
221:       assertFalse(node1.isRegExp());
222:       assertFalse(node1.hasMoreThanOneChild());
223:       assertFalse(node1.isThis());
224:       assertFalse(node1.isHook());
225:       assertEquals(1, node1.getChildCount());
226:       assertFalse(node1.isTry());
227:       assertFalse(node1.isArrayLit());
228:       assertFalse(node1.isVoid());
229:       assertFalse(node1.isEmpty());
230:       assertFalse(node1.isIf());
231:       assertFalse(node1.isNE());
232:       assertFalse(node1.isTrue());
233:       assertFalse(node1.isGetterDef());
234:       assertFalse(node1.isDebugger());
235:       assertFalse(node1.isIn());
236:       assertFalse(node1.isParamList());
237:       assertFalse(node1.isSetterDef());
238:       assertFalse(node1.isDefaultCase());
239:       assertFalse(node1.isVar());
240:       assertFalse(node1.isFunction());
241:       assertFalse(node1.isAdd());
242:       assertEquals(0, node1.getType());
243:       assertFalse(node1.isCall());
244:       assertFalse(node1.isNew());
245:       assertFalse(node1.isName());
246:       assertFalse(node1.isString());
247:       assertFalse(node1.isNull());
248:       assertFalse(node1.isReturn());
249:       assertFalse(node1.isDelProp());
250:       assertFalse(node1.isBreak());
251:       assertFalse(node1.isGetProp());
252:       assertFalse(node1.isAssign());
253:       assertTrue(node1.hasOneChild());
254:       assertFalse(node1.isGetElem());
255:       assertFalse(node1.isWhile());
256:       assertFalse(node1.isTypeOf());
257:       assertFalse(node1.isDec());
258:       assertFalse(node1.isComma());
259:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
260:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
262:       assertEquals(43, Node.IS_CONSTANT_NAME);
263:       assertEquals(36, Node.QUOTED_PROP);
264:       assertEquals(56, Node.CHANGE_TIME);
265:       assertEquals(53, Node.INPUT_ID);
266:       assertEquals(29, Node.JSDOC_INFO_PROP);
267:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
268:       assertEquals(4095, Node.COLUMN_MASK);
269:       assertEquals(12, Node.COLUMN_BITS);
270:       assertEquals(49, Node.DIRECT_EVAL);
271:       assertEquals(48, Node.DIRECTIVES);
272:       assertEquals(1, Node.DECR_FLAG);
273:       assertEquals(32, Node.INCRDECR_PROP);
274:       assertEquals(37, Node.OPT_ARG_NAME);
275:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
276:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
277:       assertEquals(40, Node.ORIGINALNAME_PROP);
278:       assertEquals(57, Node.REFLECTED_OBJECT);
279:       assertEquals(8, Node.FLAG_NO_THROWS);
280:       assertEquals(39, Node.EMPTY_BLOCK);
281:       assertEquals(15, Node.NO_SIDE_EFFECTS);
282:       assertEquals(54, Node.SLASH_V);
283:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
284:       assertEquals(52, Node.LENGTH);
285:       assertEquals(50, Node.FREE_CALL);
286:       assertEquals(55, Node.INFERRED_FUNCTION);
287:       assertEquals(51, Node.STATIC_SOURCE_FILE);
288:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
289:       assertEquals(46, Node.IS_NAMESPACE);
290:       assertEquals(57, Node.LAST_PROP);
291:       assertEquals(2, Node.POST_FLAG);
292:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
293:       assertEquals(47, Node.IS_DISPATCHER);
294:       assertEquals(30, Node.VAR_ARGS_NAME);
295:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
296:       assertEquals(43, Node.IS_CONSTANT_NAME);
297:       assertEquals(53, Node.INPUT_ID);
298:       assertEquals(36, Node.QUOTED_PROP);
299:       assertEquals(4095, Node.COLUMN_MASK);
300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
301:       assertEquals(48, Node.DIRECTIVES);
302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
303:       assertEquals(8, Node.FLAG_NO_THROWS);
304:       assertEquals(39, Node.EMPTY_BLOCK);
305:       assertEquals(56, Node.CHANGE_TIME);
306:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
307:       assertEquals(47, Node.IS_DISPATCHER);
308:       assertEquals(2, Node.POST_FLAG);
309:       assertEquals(55, Node.INFERRED_FUNCTION);
310:       assertEquals(29, Node.JSDOC_INFO_PROP);
311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
312:       assertEquals(15, Node.NO_SIDE_EFFECTS);
313:       assertEquals(57, Node.LAST_PROP);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(54, Node.SLASH_V);
316:       assertEquals(52, Node.LENGTH);
317:       assertEquals(30, Node.VAR_ARGS_NAME);
318:       assertEquals(40, Node.ORIGINALNAME_PROP);
319:       assertEquals(57, Node.REFLECTED_OBJECT);
320:       assertEquals(46, Node.IS_NAMESPACE);
321:       assertEquals(49, Node.DIRECT_EVAL);
322:       assertEquals(37, Node.OPT_ARG_NAME);
323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
324:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
325:       assertEquals(51, Node.STATIC_SOURCE_FILE);
326:       assertEquals(50, Node.FREE_CALL);
327:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
328:       assertEquals(12, Node.COLUMN_BITS);
329:       assertEquals(32, Node.INCRDECR_PROP);
330:       assertEquals(1, Node.DECR_FLAG);
331:       assertNotNull(node1);
332:       
333:       Node node2 = node1.cloneNode();
334:       assertFalse(node0.equals((Object)node1));
335:       assertFalse(node1.equals((Object)node0));
336:       assertFalse(node2.equals((Object)node1));
337:       assertFalse(node2.equals((Object)node0));
338:       assertFalse(node0.isGetElem());
339:       assertFalse(node0.isCast());
340:       assertFalse(node0.isNumber());
341:       assertFalse(node0.isDec());
342:       assertFalse(node0.isTypeOf());
343:       assertFalse(node0.hasChildren());
344:       assertFalse(node0.isAssign());
345:       assertFalse(node0.isLabel());
346:       assertFalse(node0.isAssignAdd());
347:       assertEquals(304, node0.getLineno());
348:       assertFalse(node0.isReturn());
349:       assertFalse(node0.isScript());
350:       assertFalse(node0.hasOneChild());
351:       assertFalse(node0.isWith());
352:       assertFalse(node0.isWhile());
353:       assertFalse(node0.isInstanceOf());
354:       assertFalse(node0.hasMoreThanOneChild());
355:       assertFalse(node0.isOr());
356:       assertFalse(node0.isExprResult());
357:       assertFalse(node0.isBreak());
358:       assertFalse(node0.isStringKey());
359:       assertFalse(node0.isName());
360:       assertFalse(node0.isVar());
361:       assertFalse(node0.isNull());
362:       assertFalse(node0.isHook());
363:       assertFalse(node0.isNew());
364:       assertFalse(node0.isBlock());
365:       assertFalse(node0.isThis());
366:       assertFalse(node0.isAdd());
367:       assertFalse(node0.isDo());
368:       assertFalse(node0.isCase());
369:       assertEquals(0, node0.getChildCount());
370:       assertFalse(node0.isParamList());
371:       assertEquals(1245488, node0.getSourcePosition());
372:       assertFalse(node0.isArrayLit());
373:       assertFalse(node0.isSwitch());
374:       assertFalse(node0.isLabelName());
375:       assertFalse(node0.isFor());
376:       assertFalse(node0.isEmpty());
377:       assertFalse(node0.isGetterDef());
378:       assertEquals(304, node0.getCharno());
379:       assertFalse(node0.isDefaultCase());
380:       assertFalse(node0.isTry());
381:       assertFalse(node0.isCatch());
382:       assertFalse(node0.isRegExp());
383:       assertFalse(node0.isIn());
384:       assertFalse(node0.isTrue());
385:       assertFalse(node0.isNE());
386:       assertFalse(node0.isIf());
387:       assertFalse(node0.isVoid());
388:       assertFalse(node0.isDelProp());
389:       assertFalse(node0.isFalse());
390:       assertFalse(node0.isCall());
391:       assertFalse(node0.isThrow());
392:       assertFalse(node0.isComma());
393:       assertEquals(304, node0.getType());
394:       assertFalse(node0.isGetProp());
395:       assertFalse(node0.isSetterDef());
396:       assertFalse(node0.isInc());
397:       assertFalse(node0.isContinue());
398:       assertFalse(node0.isAnd());
399:       assertFalse(node0.isString());
400:       assertFalse(node0.isDebugger());
401:       assertFalse(node0.isFunction());
402:       assertFalse(node0.isObjectLit());
403:       assertFalse(node0.isNot());
404:       assertFalse(node1.isScript());
405:       assertFalse(node1.isCast());
406:       assertFalse(node1.isExprResult());
407:       assertFalse(node1.isLabelName());
408:       assertFalse(node1.isNot());
409:       assertFalse(node1.isAnd());
410:       assertFalse(node1.isNumber());
411:       assertFalse(node1.isObjectLit());
412:       assertFalse(node1.isOr());
413:       assertFalse(node1.isLabel());
414:       assertFalse(node1.isAssignAdd());
415:       assertFalse(node1.isDo());
416:       assertFalse(node1.isFalse());
417:       assertFalse(node1.isContinue());
418:       assertFalse(node1.isThrow());
419:       assertFalse(node1.isBlock());
420:       assertFalse(node1.isSwitch());
421:       assertFalse(node1.isInc());
422:       assertFalse(node1.isStringKey());
423:       assertEquals(163881, node1.getSourcePosition());
424:       assertTrue(node1.hasChildren());
425:       assertFalse(node1.isInstanceOf());
426:       assertEquals(41, node1.getCharno());
427:       assertFalse(node1.isCase());
428:       assertEquals(40, node1.getLineno());
429:       assertFalse(node1.isFor());
430:       assertFalse(node1.isWith());
431:       assertFalse(node1.isCatch());
432:       assertFalse(node1.isRegExp());
433:       assertFalse(node1.hasMoreThanOneChild());
434:       assertFalse(node1.isThis());
435:       assertFalse(node1.isHook());
436:       assertEquals(1, node1.getChildCount());
437:       assertFalse(node1.isTry());
438:       assertFalse(node1.isArrayLit());
439:       assertFalse(node1.isVoid());
440:       assertFalse(node1.isEmpty());
441:       assertFalse(node1.isIf());
442:       assertFalse(node1.isNE());
443:       assertFalse(node1.isTrue());
444:       assertFalse(node1.isGetterDef());
445:       assertFalse(node1.isDebugger());
446:       assertFalse(node1.isIn());
447:       assertFalse(node1.isParamList());
448:       assertFalse(node1.isSetterDef());
449:       assertFalse(node1.isDefaultCase());
450:       assertFalse(node1.isVar());
451:       assertFalse(node1.isFunction());
452:       assertFalse(node1.isAdd());
453:       assertEquals(0, node1.getType());
454:       assertFalse(node1.isCall());
455:       assertFalse(node1.isNew());
456:       assertFalse(node1.isName());
457:       assertFalse(node1.isString());
458:       assertFalse(node1.isNull());
459:       assertFalse(node1.isReturn());
460:       assertFalse(node1.isDelProp());
461:       assertFalse(node1.isBreak());
462:       assertFalse(node1.isGetProp());
463:       assertFalse(node1.isAssign());
464:       assertTrue(node1.hasOneChild());
465:       assertFalse(node1.isGetElem());
466:       assertFalse(node1.isWhile());
467:       assertFalse(node1.isTypeOf());
468:       assertFalse(node1.isDec());
469:       assertFalse(node1.isComma());
470:       assertFalse(node2.isIf());
471:       assertFalse(node2.isNE());
472:       assertFalse(node2.isCase());
473:       assertFalse(node2.isGetterDef());
474:       assertEquals(163881, node2.getSourcePosition());
475:       assertFalse(node2.isIn());
476:       assertFalse(node2.isString());
477:       assertFalse(node2.isInc());
478:       assertFalse(node2.isEmpty());
479:       assertFalse(node2.isDebugger());
480:       assertFalse(node2.isFunction());
481:       assertFalse(node2.isDefaultCase());
482:       assertFalse(node2.isSwitch());
483:       assertFalse(node2.isThrow());
484:       assertFalse(node2.isFalse());
485:       assertFalse(node2.isArrayLit());
486:       assertFalse(node2.isParamList());
487:       assertFalse(node2.isThis());
488:       assertFalse(node2.isScript());
489:       assertFalse(node2.isSetterDef());
490:       assertFalse(node2.isBlock());
491:       assertFalse(node2.hasOneChild());
492:       assertFalse(node2.isTry());
493:       assertFalse(node2.isHook());
494:       assertFalse(node2.isFor());
495:       assertEquals(40, node2.getLineno());
496:       assertFalse(node2.isWith());
497:       assertFalse(node2.isRegExp());
498:       assertEquals(41, node2.getCharno());
499:       assertFalse(node2.hasMoreThanOneChild());
500:       assertFalse(node2.isInstanceOf());
501:       assertFalse(node2.isCatch());
502:       assertFalse(node2.isLabel());
503:       assertFalse(node2.isAssignAdd());
504:       assertFalse(node2.isOr());
505:       assertFalse(node2.hasChildren());
506:       assertFalse(node2.isReturn());
507:       assertFalse(node2.isDo());
508:       assertFalse(node2.isNumber());
509:       assertFalse(node2.isAdd());
510:       assertFalse(node2.isNew());
511:       assertFalse(node2.isStringKey());
512:       assertFalse(node2.isVar());
513:       assertFalse(node2.isLabelName());
514:       assertFalse(node2.isContinue());
515:       assertFalse(node2.isCast());
516:       assertFalse(node2.isGetProp());
517:       assertEquals(0, node2.getChildCount());
518:       assertFalse(node2.isComma());
519:       assertFalse(node2.isNull());
520:       assertFalse(node2.isAnd());
521:       assertFalse(node2.isObjectLit());
522:       assertFalse(node2.isNot());
523:       assertEquals(0, node2.getType());
524:       assertFalse(node2.isVoid());
525:       assertFalse(node2.isWhile());
526:       assertFalse(node2.isTrue());
527:       assertFalse(node2.isName());
528:       assertFalse(node2.isGetElem());
529:       assertFalse(node2.isDelProp());
530:       assertFalse(node2.isDec());
531:       assertFalse(node2.isAssign());
532:       assertFalse(node2.isTypeOf());
533:       assertFalse(node2.isBreak());
534:       assertFalse(node2.isCall());
535:       assertFalse(node2.isExprResult());
536:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
537:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
538:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
539:       assertEquals(43, Node.IS_CONSTANT_NAME);
540:       assertEquals(36, Node.QUOTED_PROP);
541:       assertEquals(56, Node.CHANGE_TIME);
542:       assertEquals(53, Node.INPUT_ID);
543:       assertEquals(29, Node.JSDOC_INFO_PROP);
544:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
545:       assertEquals(4095, Node.COLUMN_MASK);
546:       assertEquals(12, Node.COLUMN_BITS);
547:       assertEquals(49, Node.DIRECT_EVAL);
548:       assertEquals(48, Node.DIRECTIVES);
549:       assertEquals(1, Node.DECR_FLAG);
550:       assertEquals(32, Node.INCRDECR_PROP);
551:       assertEquals(37, Node.OPT_ARG_NAME);
552:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
553:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
554:       assertEquals(40, Node.ORIGINALNAME_PROP);
555:       assertEquals(57, Node.REFLECTED_OBJECT);
556:       assertEquals(8, Node.FLAG_NO_THROWS);
557:       assertEquals(39, Node.EMPTY_BLOCK);
558:       assertEquals(15, Node.NO_SIDE_EFFECTS);
559:       assertEquals(54, Node.SLASH_V);
560:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
561:       assertEquals(52, Node.LENGTH);
562:       assertEquals(50, Node.FREE_CALL);
563:       assertEquals(55, Node.INFERRED_FUNCTION);
564:       assertEquals(51, Node.STATIC_SOURCE_FILE);
565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
566:       assertEquals(46, Node.IS_NAMESPACE);
567:       assertEquals(57, Node.LAST_PROP);
568:       assertEquals(2, Node.POST_FLAG);
569:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
570:       assertEquals(47, Node.IS_DISPATCHER);
571:       assertEquals(30, Node.VAR_ARGS_NAME);
572:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
573:       assertEquals(43, Node.IS_CONSTANT_NAME);
574:       assertEquals(53, Node.INPUT_ID);
575:       assertEquals(36, Node.QUOTED_PROP);
576:       assertEquals(4095, Node.COLUMN_MASK);
577:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
578:       assertEquals(48, Node.DIRECTIVES);
579:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
580:       assertEquals(8, Node.FLAG_NO_THROWS);
581:       assertEquals(39, Node.EMPTY_BLOCK);
582:       assertEquals(56, Node.CHANGE_TIME);
583:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
584:       assertEquals(47, Node.IS_DISPATCHER);
585:       assertEquals(2, Node.POST_FLAG);
586:       assertEquals(55, Node.INFERRED_FUNCTION);
587:       assertEquals(29, Node.JSDOC_INFO_PROP);
588:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
589:       assertEquals(15, Node.NO_SIDE_EFFECTS);
590:       assertEquals(57, Node.LAST_PROP);
591:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
592:       assertEquals(54, Node.SLASH_V);
593:       assertEquals(52, Node.LENGTH);
594:       assertEquals(30, Node.VAR_ARGS_NAME);
595:       assertEquals(40, Node.ORIGINALNAME_PROP);
596:       assertEquals(57, Node.REFLECTED_OBJECT);
597:       assertEquals(46, Node.IS_NAMESPACE);
598:       assertEquals(49, Node.DIRECT_EVAL);
599:       assertEquals(37, Node.OPT_ARG_NAME);
600:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
601:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
602:       assertEquals(51, Node.STATIC_SOURCE_FILE);
603:       assertEquals(50, Node.FREE_CALL);
604:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
605:       assertEquals(12, Node.COLUMN_BITS);
606:       assertEquals(32, Node.INCRDECR_PROP);
607:       assertEquals(1, Node.DECR_FLAG);
608:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
609:       assertEquals(37, Node.OPT_ARG_NAME);
610:       assertEquals(2, Node.POST_FLAG);
611:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
612:       assertEquals(29, Node.JSDOC_INFO_PROP);
613:       assertEquals(51, Node.STATIC_SOURCE_FILE);
614:       assertEquals(49, Node.DIRECT_EVAL);
615:       assertEquals(56, Node.CHANGE_TIME);
616:       assertEquals(46, Node.IS_NAMESPACE);
617:       assertEquals(36, Node.QUOTED_PROP);
618:       assertEquals(57, Node.LAST_PROP);
619:       assertEquals(52, Node.LENGTH);
620:       assertEquals(15, Node.NO_SIDE_EFFECTS);
621:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
622:       assertEquals(53, Node.INPUT_ID);
623:       assertEquals(30, Node.VAR_ARGS_NAME);
624:       assertEquals(47, Node.IS_DISPATCHER);
625:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
626:       assertEquals(8, Node.FLAG_NO_THROWS);
627:       assertEquals(39, Node.EMPTY_BLOCK);
628:       assertEquals(48, Node.DIRECTIVES);
629:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
630:       assertEquals(40, Node.ORIGINALNAME_PROP);
631:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
632:       assertEquals(55, Node.INFERRED_FUNCTION);
633:       assertEquals(50, Node.FREE_CALL);
634:       assertEquals(43, Node.IS_CONSTANT_NAME);
635:       assertEquals(57, Node.REFLECTED_OBJECT);
636:       assertEquals(54, Node.SLASH_V);
637:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
638:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
639:       assertEquals(4095, Node.COLUMN_MASK);
640:       assertEquals(1, Node.DECR_FLAG);
641:       assertEquals(32, Node.INCRDECR_PROP);
642:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
643:       assertEquals(12, Node.COLUMN_BITS);
644:       assertNotNull(node2);
645:       assertNotSame(node0, node2);
646:       assertNotSame(node0, node1);
647:       assertNotSame(node1, node0);
648:       assertNotSame(node1, node2);
649:       assertNotSame(node2, node1);
650:       assertNotSame(node2, node0);
651:       
652:       boolean boolean0 = node0.isEquivalentTo(node1, true, true, true);
653:       assertFalse(node0.equals((Object)node2));
654:       assertFalse(node0.equals((Object)node1));
655:       assertFalse(node1.equals((Object)node0));
656:       assertFalse(node1.equals((Object)node2));
657:       assertFalse(node0.isGetElem());
658:       assertFalse(node0.isCast());
659:       assertFalse(node0.isNumber());
660:       assertFalse(node0.isDec());
661:       assertFalse(node0.isTypeOf());
662:       assertFalse(node0.hasChildren());
663:       assertFalse(node0.isAssign());
664:       assertFalse(node0.isLabel());
665:       assertFalse(node0.isAssignAdd());
666:       assertEquals(304, node0.getLineno());
667:       assertFalse(node0.isReturn());
668:       assertFalse(node0.isScript());
669:       assertFalse(node0.hasOneChild());
670:       assertFalse(node0.isWith());
671:       assertFalse(node0.isWhile());
672:       assertFalse(node0.isInstanceOf());
673:       assertFalse(node0.hasMoreThanOneChild());
674:       assertFalse(node0.isOr());
675:       assertFalse(node0.isExprResult());
676:       assertFalse(node0.isBreak());
677:       assertFalse(node0.isStringKey());
678:       assertFalse(node0.isName());
679:       assertFalse(node0.isVar());
680:       assertFalse(node0.isNull());
681:       assertFalse(node0.isHook());
682:       assertFalse(node0.isNew());
683:       assertFalse(node0.isBlock());
684:       assertFalse(node0.isThis());
685:       assertFalse(node0.isAdd());
686:       assertFalse(node0.isDo());
687:       assertFalse(node0.isCase());
688:       assertEquals(0, node0.getChildCount());
689:       assertFalse(node0.isParamList());
690:       assertEquals(1245488, node0.getSourcePosition());
691:       assertFalse(node0.isArrayLit());
692:       assertFalse(node0.isSwitch());
693:       assertFalse(node0.isLabelName());
694:       assertFalse(node0.isFor());
695:       assertFalse(node0.isEmpty());
696:       assertFalse(node0.isGetterDef());
697:       assertEquals(304, node0.getCharno());
698:       assertFalse(node0.isDefaultCase());
699:       assertFalse(node0.isTry());
700:       assertFalse(node0.isCatch());
701:       assertFalse(node0.isRegExp());
702:       assertFalse(node0.isIn());
703:       assertFalse(node0.isTrue());
704:       assertFalse(node0.isNE());
705:       assertFalse(node0.isIf());
706:       assertFalse(node0.isVoid());
707:       assertFalse(node0.isDelProp());
708:       assertFalse(node0.isFalse());
709:       assertFalse(node0.isCall());
710:       assertFalse(node0.isThrow());
711:       assertFalse(node0.isComma());
712:       assertEquals(304, node0.getType());
713:       assertFalse(node0.isGetProp());
714:       assertFalse(node0.isSetterDef());
715:       assertFalse(node0.isInc());
716:       assertFalse(node0.isContinue());
717:       assertFalse(node0.isAnd());
718:       assertFalse(node0.isString());
719:       assertFalse(node0.isDebugger());
720:       assertFalse(node0.isFunction());
721:       assertFalse(node0.isObjectLit());
722:       assertFalse(node0.isNot());
723:       assertFalse(node1.isScript());
724:       assertFalse(node1.isCast());
725:       assertFalse(node1.isExprResult());
726:       assertFalse(node1.isLabelName());
727:       assertFalse(node1.isNot());
728:       assertFalse(node1.isAnd());
729:       assertFalse(node1.isNumber());
730:       assertFalse(node1.isObjectLit());
731:       assertFalse(node1.isOr());
732:       assertFalse(node1.isLabel());
733:       assertFalse(node1.isAssignAdd());
734:       assertFalse(node1.isDo());
735:       assertFalse(node1.isFalse());
736:       assertFalse(node1.isContinue());
737:       assertFalse(node1.isThrow());
738:       assertFalse(node1.isBlock());
739:       assertFalse(node1.isSwitch());
740:       assertFalse(node1.isInc());
741:       assertFalse(node1.isStringKey());
742:       assertEquals(163881, node1.getSourcePosition());
743:       assertTrue(node1.hasChildren());
744:       assertFalse(node1.isInstanceOf());
745:       assertEquals(41, node1.getCharno());
746:       assertFalse(node1.isCase());
747:       assertEquals(40, node1.getLineno());
748:       assertFalse(node1.isFor());
749:       assertFalse(node1.isWith());
750:       assertFalse(node1.isCatch());
751:       assertFalse(node1.isRegExp());
752:       assertFalse(node1.hasMoreThanOneChild());
753:       assertFalse(node1.isThis());
754:       assertFalse(node1.isHook());
755:       assertEquals(1, node1.getChildCount());
756:       assertFalse(node1.isTry());
757:       assertFalse(node1.isArrayLit());
758:       assertFalse(node1.isVoid());
759:       assertFalse(node1.isEmpty());
760:       assertFalse(node1.isIf());
761:       assertFalse(node1.isNE());
762:       assertFalse(node1.isTrue());
763:       assertFalse(node1.isGetterDef());
764:       assertFalse(node1.isDebugger());
765:       assertFalse(node1.isIn());
766:       assertFalse(node1.isParamList());
767:       assertFalse(node1.isSetterDef());
768:       assertFalse(node1.isDefaultCase());
769:       assertFalse(node1.isVar());
770:       assertFalse(node1.isFunction());
771:       assertFalse(node1.isAdd());
772:       assertEquals(0, node1.getType());
773:       assertFalse(node1.isCall());
774:       assertFalse(node1.isNew());
775:       assertFalse(node1.isName());
776:       assertFalse(node1.isString());
777:       assertFalse(node1.isNull());
778:       assertFalse(node1.isReturn());
779:       assertFalse(node1.isDelProp());
780:       assertFalse(node1.isBreak());
781:       assertFalse(node1.isGetProp());
782:       assertFalse(node1.isAssign());
783:       assertTrue(node1.hasOneChild());
784:       assertFalse(node1.isGetElem());
785:       assertFalse(node1.isWhile());
786:       assertFalse(node1.isTypeOf());
787:       assertFalse(node1.isDec());
788:       assertFalse(node1.isComma());
789:       assertFalse(boolean0);
790:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
791:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
792:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
793:       assertEquals(43, Node.IS_CONSTANT_NAME);
794:       assertEquals(36, Node.QUOTED_PROP);
795:       assertEquals(56, Node.CHANGE_TIME);
796:       assertEquals(53, Node.INPUT_ID);
797:       assertEquals(29, Node.JSDOC_INFO_PROP);
798:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
799:       assertEquals(4095, Node.COLUMN_MASK);
800:       assertEquals(12, Node.COLUMN_BITS);
801:       assertEquals(49, Node.DIRECT_EVAL);
802:       assertEquals(48, Node.DIRECTIVES);
803:       assertEquals(1, Node.DECR_FLAG);
804:       assertEquals(32, Node.INCRDECR_PROP);
805:       assertEquals(37, Node.OPT_ARG_NAME);
806:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
807:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
808:       assertEquals(40, Node.ORIGINALNAME_PROP);
809:       assertEquals(57, Node.REFLECTED_OBJECT);
810:       assertEquals(8, Node.FLAG_NO_THROWS);
811:       assertEquals(39, Node.EMPTY_BLOCK);
812:       assertEquals(15, Node.NO_SIDE_EFFECTS);
813:       assertEquals(54, Node.SLASH_V);
814:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
815:       assertEquals(52, Node.LENGTH);
816:       assertEquals(50, Node.FREE_CALL);
817:       assertEquals(55, Node.INFERRED_FUNCTION);
818:       assertEquals(51, Node.STATIC_SOURCE_FILE);
819:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
820:       assertEquals(46, Node.IS_NAMESPACE);
821:       assertEquals(57, Node.LAST_PROP);
822:       assertEquals(2, Node.POST_FLAG);
823:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
824:       assertEquals(47, Node.IS_DISPATCHER);
825:       assertEquals(30, Node.VAR_ARGS_NAME);
826:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
827:       assertEquals(43, Node.IS_CONSTANT_NAME);
828:       assertEquals(53, Node.INPUT_ID);
829:       assertEquals(36, Node.QUOTED_PROP);
830:       assertEquals(4095, Node.COLUMN_MASK);
831:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
832:       assertEquals(48, Node.DIRECTIVES);
833:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
834:       assertEquals(8, Node.FLAG_NO_THROWS);
835:       assertEquals(39, Node.EMPTY_BLOCK);
836:       assertEquals(56, Node.CHANGE_TIME);
837:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
838:       assertEquals(47, Node.IS_DISPATCHER);
839:       assertEquals(2, Node.POST_FLAG);
840:       assertEquals(55, Node.INFERRED_FUNCTION);
841:       assertEquals(29, Node.JSDOC_INFO_PROP);
842:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
843:       assertEquals(15, Node.NO_SIDE_EFFECTS);
844:       assertEquals(57, Node.LAST_PROP);
845:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
846:       assertEquals(54, Node.SLASH_V);
847:       assertEquals(52, Node.LENGTH);
848:       assertEquals(30, Node.VAR_ARGS_NAME);
849:       assertEquals(40, Node.ORIGINALNAME_PROP);
850:       assertEquals(57, Node.REFLECTED_OBJECT);
851:       assertEquals(46, Node.IS_NAMESPACE);
852:       assertEquals(49, Node.DIRECT_EVAL);
853:       assertEquals(37, Node.OPT_ARG_NAME);
854:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
855:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
856:       assertEquals(51, Node.STATIC_SOURCE_FILE);
857:       assertEquals(50, Node.FREE_CALL);
858:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
859:       assertEquals(12, Node.COLUMN_BITS);
860:       assertEquals(32, Node.INCRDECR_PROP);
861:       assertEquals(1, Node.DECR_FLAG);
862:       assertNotSame(node0, node2);
863:       assertNotSame(node0, node1);
864:       assertNotSame(node1, node0);
865:       assertNotSame(node1, node2);
866:       
867:       boolean boolean1 = node0.isDo();
868:       assertFalse(node0.equals((Object)node2));
869:       assertFalse(node0.equals((Object)node1));
870:       assertTrue(boolean1 == boolean0);
871:       assertFalse(node0.isGetElem());
872:       assertFalse(node0.isCast());
873:       assertFalse(node0.isNumber());
874:       assertFalse(node0.isDec());
875:       assertFalse(node0.isTypeOf());
876:       assertFalse(node0.hasChildren());
877:       assertFalse(node0.isAssign());
878:       assertFalse(node0.isLabel());
879:       assertFalse(node0.isAssignAdd());
880:       assertEquals(304, node0.getLineno());
881:       assertFalse(node0.isReturn());
882:       assertFalse(node0.isScript());
883:       assertFalse(node0.hasOneChild());
884:       assertFalse(node0.isWith());
885:       assertFalse(node0.isWhile());
886:       assertFalse(node0.isInstanceOf());
887:       assertFalse(node0.hasMoreThanOneChild());
888:       assertFalse(node0.isOr());
889:       assertFalse(node0.isExprResult());
890:       assertFalse(node0.isBreak());
891:       assertFalse(node0.isStringKey());
892:       assertFalse(node0.isName());
893:       assertFalse(node0.isVar());
894:       assertFalse(node0.isNull());
895:       assertFalse(node0.isHook());
896:       assertFalse(node0.isNew());
897:       assertFalse(node0.isBlock());
898:       assertFalse(node0.isThis());
899:       assertFalse(node0.isAdd());
900:       assertFalse(node0.isDo());
901:       assertFalse(node0.isCase());
902:       assertEquals(0, node0.getChildCount());
903:       assertFalse(node0.isParamList());
904:       assertEquals(1245488, node0.getSourcePosition());
905:       assertFalse(node0.isArrayLit());
906:       assertFalse(node0.isSwitch());
907:       assertFalse(node0.isLabelName());
908:       assertFalse(node0.isFor());
909:       assertFalse(node0.isEmpty());
910:       assertFalse(node0.isGetterDef());
911:       assertEquals(304, node0.getCharno());
912:       assertFalse(node0.isDefaultCase());
913:       assertFalse(node0.isTry());
914:       assertFalse(node0.isCatch());
915:       assertFalse(node0.isRegExp());
916:       assertFalse(node0.isIn());
917:       assertFalse(node0.isTrue());
918:       assertFalse(node0.isNE());
919:       assertFalse(node0.isIf());
920:       assertFalse(node0.isVoid());
921:       assertFalse(node0.isDelProp());
922:       assertFalse(node0.isFalse());
923:       assertFalse(node0.isCall());
924:       assertFalse(node0.isThrow());
925:       assertFalse(node0.isComma());
926:       assertEquals(304, node0.getType());
927:       assertFalse(node0.isGetProp());
928:       assertFalse(node0.isSetterDef());
929:       assertFalse(node0.isInc());
930:       assertFalse(node0.isContinue());
931:       assertFalse(node0.isAnd());
932:       assertFalse(node0.isString());
933:       assertFalse(node0.isDebugger());
934:       assertFalse(node0.isFunction());
935:       assertFalse(node0.isObjectLit());
936:       assertFalse(node0.isNot());
937:       assertFalse(boolean1);
938:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
939:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
940:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
941:       assertEquals(43, Node.IS_CONSTANT_NAME);
942:       assertEquals(36, Node.QUOTED_PROP);
943:       assertEquals(56, Node.CHANGE_TIME);
944:       assertEquals(53, Node.INPUT_ID);
945:       assertEquals(29, Node.JSDOC_INFO_PROP);
946:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
947:       assertEquals(4095, Node.COLUMN_MASK);
948:       assertEquals(12, Node.COLUMN_BITS);
949:       assertEquals(49, Node.DIRECT_EVAL);
950:       assertEquals(48, Node.DIRECTIVES);
951:       assertEquals(1, Node.DECR_FLAG);
952:       assertEquals(32, Node.INCRDECR_PROP);
953:       assertEquals(37, Node.OPT_ARG_NAME);
954:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
955:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
956:       assertEquals(40, Node.ORIGINALNAME_PROP);
957:       assertEquals(57, Node.REFLECTED_OBJECT);
958:       assertEquals(8, Node.FLAG_NO_THROWS);
959:       assertEquals(39, Node.EMPTY_BLOCK);
960:       assertEquals(15, Node.NO_SIDE_EFFECTS);
961:       assertEquals(54, Node.SLASH_V);
962:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
963:       assertEquals(52, Node.LENGTH);
964:       assertEquals(50, Node.FREE_CALL);
965:       assertEquals(55, Node.INFERRED_FUNCTION);
966:       assertEquals(51, Node.STATIC_SOURCE_FILE);
967:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
968:       assertEquals(46, Node.IS_NAMESPACE);
969:       assertEquals(57, Node.LAST_PROP);
970:       assertEquals(2, Node.POST_FLAG);
971:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
972:       assertEquals(47, Node.IS_DISPATCHER);
973:       assertEquals(30, Node.VAR_ARGS_NAME);
974:       assertNotSame(node0, node2);
975:       assertNotSame(node0, node1);
976:       
977:       Iterable<Node> iterable0 = node0.children();
978:       assertFalse(node0.equals((Object)node2));
979:       assertFalse(node0.equals((Object)node1));
980:       assertFalse(node0.isGetElem());
981:       assertFalse(node0.isCast());
982:       assertFalse(node0.isNumber());
983:       assertFalse(node0.isDec());
984:       assertFalse(node0.isTypeOf());
985:       assertFalse(node0.hasChildren());
986:       assertFalse(node0.isAssign());
987:       assertFalse(node0.isLabel());
988:       assertFalse(node0.isAssignAdd());
989:       assertEquals(304, node0.getLineno());
990:       assertFalse(node0.isReturn());
991:       assertFalse(node0.isScript());
992:       assertFalse(node0.hasOneChild());
993:       assertFalse(node0.isWith());
994:       assertFalse(node0.isWhile());
995:       assertFalse(node0.isInstanceOf());
996:       assertFalse(node0.hasMoreThanOneChild());
997:       assertFalse(node0.isOr());
998:       assertFalse(node0.isExprResult());
999:       assertFalse(node0.isBreak());
1000:       assertFalse(node0.isStringKey());
1001:       assertFalse(node0.isName());
1002:       assertFalse(node0.isVar());
1003:       assertFalse(node0.isNull());
1004:       assertFalse(node0.isHook());
1005:       assertFalse(node0.isNew());
1006:       assertFalse(node0.isBlock());
1007:       assertFalse(node0.isThis());
1008:       assertFalse(node0.isAdd());
1009:       assertFalse(node0.isDo());
1010:       assertFalse(node0.isCase());
1011:       assertEquals(0, node0.getChildCount());
1012:       assertFalse(node0.isParamList());
1013:       assertEquals(1245488, node0.getSourcePosition());
1014:       assertFalse(node0.isArrayLit());
1015:       assertFalse(node0.isSwitch());
1016:       assertFalse(node0.isLabelName());
1017:       assertFalse(node0.isFor());
1018:       assertFalse(node0.isEmpty());
1019:       assertFalse(node0.isGetterDef());
1020:       assertEquals(304, node0.getCharno());
1021:       assertFalse(node0.isDefaultCase());
1022:       assertFalse(node0.isTry());
1023:       assertFalse(node0.isCatch());
1024:       assertFalse(node0.isRegExp());
1025:       assertFalse(node0.isIn());
1026:       assertFalse(node0.isTrue());
1027:       assertFalse(node0.isNE());
1028:       assertFalse(node0.isIf());
1029:       assertFalse(node0.isVoid());
1030:       assertFalse(node0.isDelProp());
1031:       assertFalse(node0.isFalse());
1032:       assertFalse(node0.isCall());
1033:       assertFalse(node0.isThrow());
1034:       assertFalse(node0.isComma());
1035:       assertEquals(304, node0.getType());
1036:       assertFalse(node0.isGetProp());
1037:       assertFalse(node0.isSetterDef());
1038:       assertFalse(node0.isInc());
1039:       assertFalse(node0.isContinue());
1040:       assertFalse(node0.isAnd());
1041:       assertFalse(node0.isString());
1042:       assertFalse(node0.isDebugger());
1043:       assertFalse(node0.isFunction());
1044:       assertFalse(node0.isObjectLit());
1045:       assertFalse(node0.isNot());
1046:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1047:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1048:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1049:       assertEquals(43, Node.IS_CONSTANT_NAME);
1050:       assertEquals(36, Node.QUOTED_PROP);
1051:       assertEquals(56, Node.CHANGE_TIME);
1052:       assertEquals(53, Node.INPUT_ID);
1053:       assertEquals(29, Node.JSDOC_INFO_PROP);
1054:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1055:       assertEquals(4095, Node.COLUMN_MASK);
1056:       assertEquals(12, Node.COLUMN_BITS);
1057:       assertEquals(49, Node.DIRECT_EVAL);
1058:       assertEquals(48, Node.DIRECTIVES);
1059:       assertEquals(1, Node.DECR_FLAG);
1060:       assertEquals(32, Node.INCRDECR_PROP);
1061:       assertEquals(37, Node.OPT_ARG_NAME);
1062:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1063:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1064:       assertEquals(40, Node.ORIGINALNAME_PROP);
1065:       assertEquals(57, Node.REFLECTED_OBJECT);
1066:       assertEquals(8, Node.FLAG_NO_THROWS);
1067:       assertEquals(39, Node.EMPTY_BLOCK);
1068:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1069:       assertEquals(54, Node.SLASH_V);
1070:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1071:       assertEquals(52, Node.LENGTH);
1072:       assertEquals(50, Node.FREE_CALL);
1073:       assertEquals(55, Node.INFERRED_FUNCTION);
1074:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1075:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1076:       assertEquals(46, Node.IS_NAMESPACE);
1077:       assertEquals(57, Node.LAST_PROP);
1078:       assertEquals(2, Node.POST_FLAG);
1079:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1080:       assertEquals(47, Node.IS_DISPATCHER);
1081:       assertEquals(30, Node.VAR_ARGS_NAME);
1082:       assertFalse(iterable0.contains(node0));
1083:       assertNotNull(iterable0);
1084:       assertNotSame(node0, node2);
1085:       assertNotSame(node0, node1);
1086:       
1087:       boolean boolean2 = node0.isHook();
1088:       assertFalse(node0.equals((Object)node2));
1089:       assertFalse(node0.equals((Object)node1));
1090:       assertTrue(boolean2 == boolean1);
1091:       assertTrue(boolean2 == boolean0);
1092:       assertFalse(node0.isGetElem());
1093:       assertFalse(node0.isCast());
1094:       assertFalse(node0.isNumber());
1095:       assertFalse(node0.isDec());
1096:       assertFalse(node0.isTypeOf());
1097:       assertFalse(node0.hasChildren());
1098:       assertFalse(node0.isAssign());
1099:       assertFalse(node0.isLabel());
1100:       assertFalse(node0.isAssignAdd());
1101:       assertEquals(304, node0.getLineno());
1102:       assertFalse(node0.isReturn());
1103:       assertFalse(node0.isScript());
1104:       assertFalse(node0.hasOneChild());
1105:       assertFalse(node0.isWith());
1106:       assertFalse(node0.isWhile());
1107:       assertFalse(node0.isInstanceOf());
1108:       assertFalse(node0.hasMoreThanOneChild());
1109:       assertFalse(node0.isOr());
1110:       assertFalse(node0.isExprResult());
1111:       assertFalse(node0.isBreak());
1112:       assertFalse(node0.isStringKey());
1113:       assertFalse(node0.isName());
1114:       assertFalse(node0.isVar());
1115:       assertFalse(node0.isNull());
1116:       assertFalse(node0.isHook());
1117:       assertFalse(node0.isNew());
1118:       assertFalse(node0.isBlock());
1119:       assertFalse(node0.isThis());
1120:       assertFalse(node0.isAdd());
1121:       assertFalse(node0.isDo());
1122:       assertFalse(node0.isCase());
1123:       assertEquals(0, node0.getChildCount());
1124:       assertFalse(node0.isParamList());
1125:       assertEquals(1245488, node0.getSourcePosition());
1126:       assertFalse(node0.isArrayLit());
1127:       assertFalse(node0.isSwitch());
1128:       assertFalse(node0.isLabelName());
1129:       assertFalse(node0.isFor());
1130:       assertFalse(node0.isEmpty());
1131:       assertFalse(node0.isGetterDef());
1132:       assertEquals(304, node0.getCharno());
1133:       assertFalse(node0.isDefaultCase());
1134:       assertFalse(node0.isTry());
1135:       assertFalse(node0.isCatch());
1136:       assertFalse(node0.isRegExp());
1137:       assertFalse(node0.isIn());
1138:       assertFalse(node0.isTrue());
1139:       assertFalse(node0.isNE());
1140:       assertFalse(node0.isIf());
1141:       assertFalse(node0.isVoid());
1142:       assertFalse(node0.isDelProp());
1143:       assertFalse(node0.isFalse());
1144:       assertFalse(node0.isCall());
1145:       assertFalse(node0.isThrow());
1146:       assertFalse(node0.isComma());
1147:       assertEquals(304, node0.getType());
1148:       assertFalse(node0.isGetProp());
1149:       assertFalse(node0.isSetterDef());
1150:       assertFalse(node0.isInc());
1151:       assertFalse(node0.isContinue());
1152:       assertFalse(node0.isAnd());
1153:       assertFalse(node0.isString());
1154:       assertFalse(node0.isDebugger());
1155:       assertFalse(node0.isFunction());
1156:       assertFalse(node0.isObjectLit());
1157:       assertFalse(node0.isNot());
1158:       assertFalse(boolean2);
1159:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1160:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1161:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1162:       assertEquals(43, Node.IS_CONSTANT_NAME);
1163:       assertEquals(36, Node.QUOTED_PROP);
1164:       assertEquals(56, Node.CHANGE_TIME);
1165:       assertEquals(53, Node.INPUT_ID);
1166:       assertEquals(29, Node.JSDOC_INFO_PROP);
1167:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1168:       assertEquals(4095, Node.COLUMN_MASK);
1169:       assertEquals(12, Node.COLUMN_BITS);
1170:       assertEquals(49, Node.DIRECT_EVAL);
1171:       assertEquals(48, Node.DIRECTIVES);
1172:       assertEquals(1, Node.DECR_FLAG);
1173:       assertEquals(32, Node.INCRDECR_PROP);
1174:       assertEquals(37, Node.OPT_ARG_NAME);
1175:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1176:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1177:       assertEquals(40, Node.ORIGINALNAME_PROP);
1178:       assertEquals(57, Node.REFLECTED_OBJECT);
1179:       assertEquals(8, Node.FLAG_NO_THROWS);
1180:       assertEquals(39, Node.EMPTY_BLOCK);
1181:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1182:       assertEquals(54, Node.SLASH_V);
1183:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1184:       assertEquals(52, Node.LENGTH);
1185:       assertEquals(50, Node.FREE_CALL);
1186:       assertEquals(55, Node.INFERRED_FUNCTION);
1187:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1188:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1189:       assertEquals(46, Node.IS_NAMESPACE);
1190:       assertEquals(57, Node.LAST_PROP);
1191:       assertEquals(2, Node.POST_FLAG);
1192:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1193:       assertEquals(47, Node.IS_DISPATCHER);
1194:       assertEquals(30, Node.VAR_ARGS_NAME);
1195:       assertNotSame(node0, node2);
1196:       assertNotSame(node0, node1);
1197:       
1198:       boolean boolean3 = node0.isCall();
1199:       assertFalse(node0.equals((Object)node2));
1200:       assertFalse(node0.equals((Object)node1));
1201:       assertTrue(boolean3 == boolean1);
1202:       assertTrue(boolean3 == boolean2);
1203:       assertTrue(boolean3 == boolean0);
1204:       assertFalse(node0.isGetElem());
1205:       assertFalse(node0.isCast());
1206:       assertFalse(node0.isNumber());
1207:       assertFalse(node0.isDec());
1208:       assertFalse(node0.isTypeOf());
1209:       assertFalse(node0.hasChildren());
1210:       assertFalse(node0.isAssign());
1211:       assertFalse(node0.isLabel());
1212:       assertFalse(node0.isAssignAdd());
1213:       assertEquals(304, node0.getLineno());
1214:       assertFalse(node0.isReturn());
1215:       assertFalse(node0.isScript());
1216:       assertFalse(node0.hasOneChild());
1217:       assertFalse(node0.isWith());
1218:       assertFalse(node0.isWhile());
1219:       assertFalse(node0.isInstanceOf());
1220:       assertFalse(node0.hasMoreThanOneChild());
1221:       assertFalse(node0.isOr());
1222:       assertFalse(node0.isExprResult());
1223:       assertFalse(node0.isBreak());
1224:       assertFalse(node0.isStringKey());
1225:       assertFalse(node0.isName());
1226:       assertFalse(node0.isVar());
1227:       assertFalse(node0.isNull());
1228:       assertFalse(node0.isHook());
1229:       assertFalse(node0.isNew());
1230:       assertFalse(node0.isBlock());
1231:       assertFalse(node0.isThis());
1232:       assertFalse(node0.isAdd());
1233:       assertFalse(node0.isDo());
1234:       assertFalse(node0.isCase());
1235:       assertEquals(0, node0.getChildCount());
1236:       assertFalse(node0.isParamList());
1237:       assertEquals(1245488, node0.getSourcePosition());
1238:       assertFalse(node0.isArrayLit());
1239:       assertFalse(node0.isSwitch());
1240:       assertFalse(node0.isLabelName());
1241:       assertFalse(node0.isFor());
1242:       assertFalse(node0.isEmpty());
1243:       assertFalse(node0.isGetterDef());
1244:       assertEquals(304, node0.getCharno());
1245:       assertFalse(node0.isDefaultCase());
1246:       assertFalse(node0.isTry());
1247:       assertFalse(node0.isCatch());
1248:       assertFalse(node0.isRegExp());
1249:       assertFalse(node0.isIn());
1250:       assertFalse(node0.isTrue());
1251:       assertFalse(node0.isNE());
1252:       assertFalse(node0.isIf());
1253:       assertFalse(node0.isVoid());
1254:       assertFalse(node0.isDelProp());
1255:       assertFalse(node0.isFalse());
1256:       assertFalse(node0.isCall());
1257:       assertFalse(node0.isThrow());
1258:       assertFalse(node0.isComma());
1259:       assertEquals(304, node0.getType());
1260:       assertFalse(node0.isGetProp());
1261:       assertFalse(node0.isSetterDef());
1262:       assertFalse(node0.isInc());
1263:       assertFalse(node0.isContinue());
1264:       assertFalse(node0.isAnd());
1265:       assertFalse(node0.isString());
1266:       assertFalse(node0.isDebugger());
1267:       assertFalse(node0.isFunction());
1268:       assertFalse(node0.isObjectLit());
1269:       assertFalse(node0.isNot());
1270:       assertFalse(boolean3);
1271:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1272:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1273:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1274:       assertEquals(43, Node.IS_CONSTANT_NAME);
1275:       assertEquals(36, Node.QUOTED_PROP);
1276:       assertEquals(56, Node.CHANGE_TIME);
1277:       assertEquals(53, Node.INPUT_ID);
1278:       assertEquals(29, Node.JSDOC_INFO_PROP);
1279:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1280:       assertEquals(4095, Node.COLUMN_MASK);
1281:       assertEquals(12, Node.COLUMN_BITS);
1282:       assertEquals(49, Node.DIRECT_EVAL);
1283:       assertEquals(48, Node.DIRECTIVES);
1284:       assertEquals(1, Node.DECR_FLAG);
1285:       assertEquals(32, Node.INCRDECR_PROP);
1286:       assertEquals(37, Node.OPT_ARG_NAME);
1287:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1288:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1289:       assertEquals(40, Node.ORIGINALNAME_PROP);
1290:       assertEquals(57, Node.REFLECTED_OBJECT);
1291:       assertEquals(8, Node.FLAG_NO_THROWS);
1292:       assertEquals(39, Node.EMPTY_BLOCK);
1293:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1294:       assertEquals(54, Node.SLASH_V);
1295:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1296:       assertEquals(52, Node.LENGTH);
1297:       assertEquals(50, Node.FREE_CALL);
1298:       assertEquals(55, Node.INFERRED_FUNCTION);
1299:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1300:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1301:       assertEquals(46, Node.IS_NAMESPACE);
1302:       assertEquals(57, Node.LAST_PROP);
1303:       assertEquals(2, Node.POST_FLAG);
1304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1305:       assertEquals(47, Node.IS_DISPATCHER);
1306:       assertEquals(30, Node.VAR_ARGS_NAME);
1307:       assertNotSame(node0, node2);
1308:       assertNotSame(node0, node1);
1309:   }
1310: }
RegularFileObject[/tmp/EvoSuite_49_1629222875077/com/google/javascript/rhino/Node_49_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:35 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_49_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_49_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.common.collect.Iterables",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.common.collect.AbstractMultimap$Values",
132:       "com.google.javascript.rhino.jstype.ProxyObjectType",
133:       "com.google.common.collect.Sets$SetView",
134:       "com.google.common.collect.RegularImmutableAsList",
135:       "com.google.javascript.rhino.jstype.TemplateType",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMultimap$Entries",
190:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
191:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
192:       "com.google.javascript.rhino.jstype.EnumElementType",
193:       "com.google.javascript.rhino.jstype.UnionType",
194:       "com.google.common.base.Objects",
195:       "com.google.javascript.rhino.Node$NumberNode",
196:       "com.google.common.collect.SingletonImmutableList",
197:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
198:       "com.google.common.collect.ImmutableCollection$Builder",
199:       "com.google.javascript.rhino.jstype.StaticSlot",
200:       "com.google.common.collect.Iterators$6",
201:       "com.google.common.collect.BiMap",
202:       "com.google.common.collect.Iterators$7",
203:       "com.google.common.collect.AbstractSetMultimap",
204:       "com.google.common.base.Function",
205:       "com.google.common.collect.ImmutableSet",
206:       "com.google.common.collect.Lists$AbstractListWrapper",
207:       "com.google.common.collect.ImmutableMap",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.Maps$1",
211:       "com.google.javascript.rhino.jstype.EnumType",
212:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.Multimaps$Entries",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
236:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
237:       "com.google.common.collect.ImmutableList",
238:       "com.google.common.collect.SingletonImmutableBiMap",
239:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
240:       "com.google.javascript.rhino.jstype.StringType",
241:       "com.google.javascript.rhino.Node$AbstractPropListItem",
242:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
243:       "com.google.javascript.rhino.jstype.TemplatizedType",
244:       "com.google.javascript.rhino.jstype.Visitor",
245:       "com.google.javascript.rhino.jstype.NoResolvedType",
246:       "com.google.javascript.rhino.jstype.JSTypeNative",
247:       "com.google.javascript.rhino.jstype.AllType",
248:       "com.google.common.collect.Maps",
249:       "com.google.common.collect.SetMultimap",
250:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
251:       "com.google.common.collect.Maps$EntryTransformer",
252:       "com.google.javascript.rhino.JSTypeExpression",
253:       "com.google.common.collect.Iterators$MergingIterator"
254:     );
255:   } 
256: 
257:   private static void resetClasses() {
258:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_49_tmp__ESTest_scaffolding.class.getClassLoader()); 
259: 
260:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
261:       "com.google.javascript.rhino.Node",
262:       "com.google.javascript.rhino.Node$NumberNode",
263:       "com.google.javascript.rhino.Node$StringNode",
264:       "com.google.javascript.rhino.Node$AbstractPropListItem",
265:       "com.google.javascript.rhino.Node$ObjectPropListItem",
266:       "com.google.javascript.rhino.Node$IntPropListItem",
267:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
268:       "com.google.javascript.rhino.Node$AncestorIterable",
269:       "com.google.javascript.rhino.Node$NodeMismatch",
270:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
271:       "com.google.javascript.rhino.Node$SideEffectFlags",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.Token",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.base.Objects",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
352:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.common.collect.AbstractIndexedListIterator",
362:       "com.google.common.collect.Iterators$11",
363:       "com.google.javascript.rhino.Node$AncestorIterable$1",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.InputId",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.javascript.rhino.JSTypeExpression",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.Sets$ImprovedAbstractSet",
375:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
376:       "com.google.common.collect.Hashing",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
378:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
379:       "com.google.common.collect.Platform"
380:     );
381:   }
382: }

[MASTER] 17:54:35.370 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(304, 304, 304);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(304, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertEquals(304, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);

Node node1 = new Node(0, node0, 40, 41);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(304, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertEquals(304, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isStringKey());
assertEquals(163881, node1.getSourcePosition());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertEquals(41, node1.getCharno());
assertFalse(node1.isCase());
assertEquals(40, node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertEquals(0, node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isString());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node1);

Node node2 = node1.cloneNode();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(304, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertEquals(304, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isStringKey());
assertEquals(163881, node1.getSourcePosition());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertEquals(41, node1.getCharno());
assertFalse(node1.isCase());
assertEquals(40, node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertEquals(0, node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isString());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.isGetterDef());
assertEquals(163881, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertEquals(40, node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertEquals(41, node2.getCharno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isDo());
assertFalse(node2.isNumber());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetProp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(0, node2.getType());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node2);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotSame(node2, node0);

boolean boolean0 = node0.isEquivalentTo(node1, true, true, true);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(304, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertEquals(304, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isStringKey());
assertEquals(163881, node1.getSourcePosition());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertEquals(41, node1.getCharno());
assertFalse(node1.isCase());
assertEquals(40, node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertFalse(node1.isAdd());
assertEquals(0, node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isString());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);

boolean boolean1 = node0.isDo();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(304, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertEquals(304, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotSame(node0, node2);
assertNotSame(node0, node1);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(304, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertEquals(304, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertNotSame(node0, node2);
assertNotSame(node0, node1);

boolean boolean2 = node0.isHook();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(304, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertEquals(304, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(boolean2);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotSame(node0, node2);
assertNotSame(node0, node1);

boolean boolean3 = node0.isCall();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(304, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertEquals(304, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(boolean3);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotSame(node0, node2);
assertNotSame(node0, node1);


[MASTER] 17:54:36.231 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_52_1629222875687/com/google/javascript/rhino/Node_52_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_52_1629222875687/com/google/javascript/rhino/Node_52_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:36.231 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:36.231 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:36.232 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1179
[MASTER] 17:54:36.235 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_52_1629222875687/com/google/javascript/rhino/Node_52_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:35 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_52_tmp__ESTest extends Node_52_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(0.0);
23:       assertFalse(node0.isTrue());
24:       assertFalse(node0.isDebugger());
25:       assertFalse(node0.isFunction());
26:       assertFalse(node0.isVoid());
27:       assertFalse(node0.isRegExp());
28:       assertFalse(node0.isTry());
29:       assertFalse(node0.isDefaultCase());
30:       assertFalse(node0.isEmpty());
31:       assertFalse(node0.isNE());
32:       assertFalse(node0.isIf());
33:       assertFalse(node0.isNull());
34:       assertFalse(node0.isFor());
35:       assertFalse(node0.isCall());
36:       assertFalse(node0.isCatch());
37:       assertFalse(node0.isName());
38:       assertFalse(node0.isDelProp());
39:       assertFalse(node0.isWhile());
40:       assertFalse(node0.isThrow());
41:       assertFalse(node0.isIn());
42:       assertFalse(node0.isString());
43:       assertTrue(node0.isNumber());
44:       assertFalse(node0.isSetterDef());
45:       assertFalse(node0.isInc());
46:       assertEquals((-1), node0.getSourcePosition());
47:       assertFalse(node0.isContinue());
48:       assertFalse(node0.isAnd());
49:       assertFalse(node0.isCast());
50:       assertFalse(node0.isFalse());
51:       assertFalse(node0.isExprResult());
52:       assertFalse(node0.isNot());
53:       assertFalse(node0.isObjectLit());
54:       assertFalse(node0.hasOneChild());
55:       assertFalse(node0.isScript());
56:       assertFalse(node0.isGetProp());
57:       assertFalse(node0.isComma());
58:       assertFalse(node0.isTypeOf());
59:       assertFalse(node0.isOr());
60:       assertFalse(node0.isDec());
61:       assertFalse(node0.isAssign());
62:       assertFalse(node0.isThis());
63:       assertFalse(node0.hasChildren());
64:       assertFalse(node0.isReturn());
65:       assertFalse(node0.hasMoreThanOneChild());
66:       assertFalse(node0.isWith());
67:       assertFalse(node0.isBreak());
68:       assertEquals((-1), node0.getLineno());
69:       assertFalse(node0.isInstanceOf());
70:       assertFalse(node0.isGetElem());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.isSwitch());
73:       assertFalse(node0.isVar());
74:       assertFalse(node0.isBlock());
75:       assertEquals(39, node0.getType());
76:       assertFalse(node0.isHook());
77:       assertFalse(node0.isDo());
78:       assertFalse(node0.isAdd());
79:       assertFalse(node0.isNew());
80:       assertFalse(node0.isCase());
81:       assertFalse(node0.isParamList());
82:       assertFalse(node0.isAssignAdd());
83:       assertFalse(node0.isGetterDef());
84:       assertEquals(0, node0.getChildCount());
85:       assertFalse(node0.isLabel());
86:       assertFalse(node0.isStringKey());
87:       assertFalse(node0.isLabelName());
88:       assertFalse(node0.isArrayLit());
89:       assertEquals(43, Node.IS_CONSTANT_NAME);
90:       assertEquals(36, Node.QUOTED_PROP);
91:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
92:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
93:       assertEquals(53, Node.INPUT_ID);
94:       assertEquals(55, Node.INFERRED_FUNCTION);
95:       assertEquals(56, Node.CHANGE_TIME);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
98:       assertEquals(48, Node.DIRECTIVES);
99:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
100:       assertEquals(37, Node.OPT_ARG_NAME);
101:       assertEquals(12, Node.COLUMN_BITS);
102:       assertEquals(32, Node.INCRDECR_PROP);
103:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
104:       assertEquals(4095, Node.COLUMN_MASK);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
107:       assertEquals(57, Node.LAST_PROP);
108:       assertEquals(1, Node.DECR_FLAG);
109:       assertEquals(49, Node.DIRECT_EVAL);
110:       assertEquals(51, Node.STATIC_SOURCE_FILE);
111:       assertEquals(57, Node.REFLECTED_OBJECT);
112:       assertEquals(46, Node.IS_NAMESPACE);
113:       assertEquals(52, Node.LENGTH);
114:       assertEquals(50, Node.FREE_CALL);
115:       assertEquals(54, Node.SLASH_V);
116:       assertEquals(47, Node.IS_DISPATCHER);
117:       assertEquals(2, Node.POST_FLAG);
118:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
119:       assertEquals(8, Node.FLAG_NO_THROWS);
120:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
121:       assertEquals(40, Node.ORIGINALNAME_PROP);
122:       assertEquals(29, Node.JSDOC_INFO_PROP);
123:       assertEquals(39, Node.EMPTY_BLOCK);
124:       assertEquals(30, Node.VAR_ARGS_NAME);
125:       assertNotNull(node0);
126:       
127:       Node node1 = Node.newString(0, "", 4, 38);
128:       assertFalse(node1.equals((Object)node0));
129:       assertFalse(node1.isGetElem());
130:       assertFalse(node1.isLabelName());
131:       assertFalse(node1.isAssign());
132:       assertFalse(node1.hasOneChild());
133:       assertFalse(node1.isCast());
134:       assertFalse(node1.isAssignAdd());
135:       assertFalse(node1.isDec());
136:       assertFalse(node1.isTypeOf());
137:       assertFalse(node1.isReturn());
138:       assertFalse(node1.isLabel());
139:       assertFalse(node1.hasChildren());
140:       assertFalse(node1.isDo());
141:       assertFalse(node1.hasMoreThanOneChild());
142:       assertFalse(node1.isWith());
143:       assertFalse(node1.isInstanceOf());
144:       assertFalse(node1.isExprResult());
145:       assertFalse(node1.isOr());
146:       assertFalse(node1.isAdd());
147:       assertFalse(node1.isName());
148:       assertFalse(node1.isFalse());
149:       assertFalse(node1.isThrow());
150:       assertFalse(node1.isCall());
151:       assertFalse(node1.isSetterDef());
152:       assertFalse(node1.isBreak());
153:       assertFalse(node1.isGetProp());
154:       assertEquals(0, node1.getType());
155:       assertEquals(4, node1.getLineno());
156:       assertFalse(node1.isComma());
157:       assertEquals(38, node1.getCharno());
158:       assertFalse(node1.isNot());
159:       assertFalse(node1.isObjectLit());
160:       assertFalse(node1.isWhile());
161:       assertFalse(node1.isString());
162:       assertFalse(node1.isContinue());
163:       assertFalse(node1.isAnd());
164:       assertFalse(node1.isDebugger());
165:       assertFalse(node1.isFor());
166:       assertFalse(node1.isEmpty());
167:       assertFalse(node1.isIf());
168:       assertFalse(node1.isDelProp());
169:       assertFalse(node1.isArrayLit());
170:       assertFalse(node1.isTry());
171:       assertFalse(node1.isFunction());
172:       assertFalse(node1.isRegExp());
173:       assertFalse(node1.isCatch());
174:       assertFalse(node1.isDefaultCase());
175:       assertFalse(node1.isInc());
176:       assertFalse(node1.isVoid());
177:       assertFalse(node1.isIn());
178:       assertFalse(node1.isNull());
179:       assertFalse(node1.isNE());
180:       assertFalse(node1.isTrue());
181:       assertFalse(node1.isStringKey());
182:       assertFalse(node1.isNew());
183:       assertFalse(node1.isBlock());
184:       assertFalse(node1.isHook());
185:       assertFalse(node1.isVar());
186:       assertEquals(0, node1.getChildCount());
187:       assertFalse(node1.isThis());
188:       assertFalse(node1.isCase());
189:       assertFalse(node1.isScript());
190:       assertFalse(node1.isParamList());
191:       assertFalse(node1.isSwitch());
192:       assertFalse(node1.isNumber());
193:       assertFalse(node1.isGetterDef());
194:       assertEquals(16422, node1.getSourcePosition());
195:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
196:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
199:       assertEquals(29, Node.JSDOC_INFO_PROP);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(32, Node.INCRDECR_PROP);
202:       assertEquals(55, Node.INFERRED_FUNCTION);
203:       assertEquals(4095, Node.COLUMN_MASK);
204:       assertEquals(12, Node.COLUMN_BITS);
205:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
206:       assertEquals(36, Node.QUOTED_PROP);
207:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
208:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
209:       assertEquals(56, Node.CHANGE_TIME);
210:       assertEquals(49, Node.DIRECT_EVAL);
211:       assertEquals(48, Node.DIRECTIVES);
212:       assertEquals(37, Node.OPT_ARG_NAME);
213:       assertEquals(40, Node.ORIGINALNAME_PROP);
214:       assertEquals(57, Node.REFLECTED_OBJECT);
215:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
216:       assertEquals(52, Node.LENGTH);
217:       assertEquals(50, Node.FREE_CALL);
218:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
219:       assertEquals(8, Node.FLAG_NO_THROWS);
220:       assertEquals(39, Node.EMPTY_BLOCK);
221:       assertEquals(57, Node.LAST_PROP);
222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
224:       assertEquals(1, Node.DECR_FLAG);
225:       assertEquals(46, Node.IS_NAMESPACE);
226:       assertEquals(30, Node.VAR_ARGS_NAME);
227:       assertEquals(51, Node.STATIC_SOURCE_FILE);
228:       assertEquals(2, Node.POST_FLAG);
229:       assertEquals(54, Node.SLASH_V);
230:       assertEquals(43, Node.IS_CONSTANT_NAME);
231:       assertNotNull(node1);
232:       
233:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
234:       assertFalse(node0.equals((Object)node1));
235:       assertFalse(node1.equals((Object)node0));
236:       assertFalse(node0.isTrue());
237:       assertFalse(node0.isDebugger());
238:       assertFalse(node0.isFunction());
239:       assertFalse(node0.isVoid());
240:       assertFalse(node0.isRegExp());
241:       assertFalse(node0.isTry());
242:       assertFalse(node0.isDefaultCase());
243:       assertFalse(node0.isEmpty());
244:       assertFalse(node0.isNE());
245:       assertFalse(node0.isIf());
246:       assertFalse(node0.isNull());
247:       assertFalse(node0.isFor());
248:       assertFalse(node0.isCall());
249:       assertFalse(node0.isCatch());
250:       assertFalse(node0.isName());
251:       assertFalse(node0.isDelProp());
252:       assertFalse(node0.isWhile());
253:       assertFalse(node0.isThrow());
254:       assertFalse(node0.isIn());
255:       assertFalse(node0.isString());
256:       assertTrue(node0.isNumber());
257:       assertFalse(node0.isSetterDef());
258:       assertFalse(node0.isInc());
259:       assertEquals((-1), node0.getSourcePosition());
260:       assertFalse(node0.isContinue());
261:       assertFalse(node0.isAnd());
262:       assertFalse(node0.isCast());
263:       assertFalse(node0.isFalse());
264:       assertFalse(node0.isExprResult());
265:       assertFalse(node0.isNot());
266:       assertFalse(node0.isObjectLit());
267:       assertFalse(node0.hasOneChild());
268:       assertFalse(node0.isScript());
269:       assertFalse(node0.isGetProp());
270:       assertFalse(node0.isComma());
271:       assertFalse(node0.isTypeOf());
272:       assertFalse(node0.isOr());
273:       assertFalse(node0.isDec());
274:       assertFalse(node0.isAssign());
275:       assertFalse(node0.isThis());
276:       assertFalse(node0.hasChildren());
277:       assertFalse(node0.isReturn());
278:       assertFalse(node0.hasMoreThanOneChild());
279:       assertFalse(node0.isWith());
280:       assertFalse(node0.isBreak());
281:       assertEquals((-1), node0.getLineno());
282:       assertFalse(node0.isInstanceOf());
283:       assertFalse(node0.isGetElem());
284:       assertEquals((-1), node0.getCharno());
285:       assertFalse(node0.isSwitch());
286:       assertFalse(node0.isVar());
287:       assertFalse(node0.isBlock());
288:       assertEquals(39, node0.getType());
289:       assertFalse(node0.isHook());
290:       assertFalse(node0.isDo());
291:       assertFalse(node0.isAdd());
292:       assertFalse(node0.isNew());
293:       assertFalse(node0.isCase());
294:       assertFalse(node0.isParamList());
295:       assertFalse(node0.isAssignAdd());
296:       assertFalse(node0.isGetterDef());
297:       assertEquals(0, node0.getChildCount());
298:       assertFalse(node0.isLabel());
299:       assertFalse(node0.isStringKey());
300:       assertFalse(node0.isLabelName());
301:       assertFalse(node0.isArrayLit());
302:       assertFalse(node1.isGetElem());
303:       assertFalse(node1.isLabelName());
304:       assertFalse(node1.isAssign());
305:       assertFalse(node1.hasOneChild());
306:       assertFalse(node1.isCast());
307:       assertFalse(node1.isAssignAdd());
308:       assertFalse(node1.isDec());
309:       assertFalse(node1.isTypeOf());
310:       assertFalse(node1.isReturn());
311:       assertFalse(node1.isLabel());
312:       assertFalse(node1.hasChildren());
313:       assertFalse(node1.isDo());
314:       assertFalse(node1.hasMoreThanOneChild());
315:       assertFalse(node1.isWith());
316:       assertFalse(node1.isInstanceOf());
317:       assertFalse(node1.isExprResult());
318:       assertFalse(node1.isOr());
319:       assertFalse(node1.isAdd());
320:       assertFalse(node1.isName());
321:       assertFalse(node1.isFalse());
322:       assertFalse(node1.isThrow());
323:       assertFalse(node1.isCall());
324:       assertFalse(node1.isSetterDef());
325:       assertFalse(node1.isBreak());
326:       assertFalse(node1.isGetProp());
327:       assertEquals(0, node1.getType());
328:       assertEquals(4, node1.getLineno());
329:       assertFalse(node1.isComma());
330:       assertEquals(38, node1.getCharno());
331:       assertFalse(node1.isNot());
332:       assertFalse(node1.isObjectLit());
333:       assertFalse(node1.isWhile());
334:       assertFalse(node1.isString());
335:       assertFalse(node1.isContinue());
336:       assertFalse(node1.isAnd());
337:       assertFalse(node1.isDebugger());
338:       assertFalse(node1.isFor());
339:       assertFalse(node1.isEmpty());
340:       assertFalse(node1.isIf());
341:       assertFalse(node1.isDelProp());
342:       assertFalse(node1.isArrayLit());
343:       assertFalse(node1.isTry());
344:       assertFalse(node1.isFunction());
345:       assertFalse(node1.isRegExp());
346:       assertFalse(node1.isCatch());
347:       assertFalse(node1.isDefaultCase());
348:       assertFalse(node1.isInc());
349:       assertFalse(node1.isVoid());
350:       assertFalse(node1.isIn());
351:       assertFalse(node1.isNull());
352:       assertFalse(node1.isNE());
353:       assertFalse(node1.isTrue());
354:       assertFalse(node1.isStringKey());
355:       assertFalse(node1.isNew());
356:       assertFalse(node1.isBlock());
357:       assertFalse(node1.isHook());
358:       assertFalse(node1.isVar());
359:       assertEquals(0, node1.getChildCount());
360:       assertFalse(node1.isThis());
361:       assertFalse(node1.isCase());
362:       assertFalse(node1.isScript());
363:       assertFalse(node1.isParamList());
364:       assertFalse(node1.isSwitch());
365:       assertFalse(node1.isNumber());
366:       assertFalse(node1.isGetterDef());
367:       assertEquals(16422, node1.getSourcePosition());
368:       assertEquals(43, Node.IS_CONSTANT_NAME);
369:       assertEquals(36, Node.QUOTED_PROP);
370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
371:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
372:       assertEquals(53, Node.INPUT_ID);
373:       assertEquals(55, Node.INFERRED_FUNCTION);
374:       assertEquals(56, Node.CHANGE_TIME);
375:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
376:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
377:       assertEquals(48, Node.DIRECTIVES);
378:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
379:       assertEquals(37, Node.OPT_ARG_NAME);
380:       assertEquals(12, Node.COLUMN_BITS);
381:       assertEquals(32, Node.INCRDECR_PROP);
382:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
383:       assertEquals(4095, Node.COLUMN_MASK);
384:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
385:       assertEquals(15, Node.NO_SIDE_EFFECTS);
386:       assertEquals(57, Node.LAST_PROP);
387:       assertEquals(1, Node.DECR_FLAG);
388:       assertEquals(49, Node.DIRECT_EVAL);
389:       assertEquals(51, Node.STATIC_SOURCE_FILE);
390:       assertEquals(57, Node.REFLECTED_OBJECT);
391:       assertEquals(46, Node.IS_NAMESPACE);
392:       assertEquals(52, Node.LENGTH);
393:       assertEquals(50, Node.FREE_CALL);
394:       assertEquals(54, Node.SLASH_V);
395:       assertEquals(47, Node.IS_DISPATCHER);
396:       assertEquals(2, Node.POST_FLAG);
397:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
398:       assertEquals(8, Node.FLAG_NO_THROWS);
399:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
400:       assertEquals(40, Node.ORIGINALNAME_PROP);
401:       assertEquals(29, Node.JSDOC_INFO_PROP);
402:       assertEquals(39, Node.EMPTY_BLOCK);
403:       assertEquals(30, Node.VAR_ARGS_NAME);
404:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
405:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
406:       assertEquals(47, Node.IS_DISPATCHER);
407:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
408:       assertEquals(29, Node.JSDOC_INFO_PROP);
409:       assertEquals(53, Node.INPUT_ID);
410:       assertEquals(32, Node.INCRDECR_PROP);
411:       assertEquals(55, Node.INFERRED_FUNCTION);
412:       assertEquals(4095, Node.COLUMN_MASK);
413:       assertEquals(12, Node.COLUMN_BITS);
414:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
415:       assertEquals(36, Node.QUOTED_PROP);
416:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
417:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
418:       assertEquals(56, Node.CHANGE_TIME);
419:       assertEquals(49, Node.DIRECT_EVAL);
420:       assertEquals(48, Node.DIRECTIVES);
421:       assertEquals(37, Node.OPT_ARG_NAME);
422:       assertEquals(40, Node.ORIGINALNAME_PROP);
423:       assertEquals(57, Node.REFLECTED_OBJECT);
424:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
425:       assertEquals(52, Node.LENGTH);
426:       assertEquals(50, Node.FREE_CALL);
427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
428:       assertEquals(8, Node.FLAG_NO_THROWS);
429:       assertEquals(39, Node.EMPTY_BLOCK);
430:       assertEquals(57, Node.LAST_PROP);
431:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
432:       assertEquals(15, Node.NO_SIDE_EFFECTS);
433:       assertEquals(1, Node.DECR_FLAG);
434:       assertEquals(46, Node.IS_NAMESPACE);
435:       assertEquals(30, Node.VAR_ARGS_NAME);
436:       assertEquals(51, Node.STATIC_SOURCE_FILE);
437:       assertEquals(2, Node.POST_FLAG);
438:       assertEquals(54, Node.SLASH_V);
439:       assertEquals(43, Node.IS_CONSTANT_NAME);
440:       assertNotNull(node_NodeMismatch0);
441:       
442:       boolean boolean0 = node_NodeMismatch0.equals("");
443:       assertFalse(node0.equals((Object)node1));
444:       assertFalse(node1.equals((Object)node0));
445:       assertFalse(node0.isTrue());
446:       assertFalse(node0.isDebugger());
447:       assertFalse(node0.isFunction());
448:       assertFalse(node0.isVoid());
449:       assertFalse(node0.isRegExp());
450:       assertFalse(node0.isTry());
451:       assertFalse(node0.isDefaultCase());
452:       assertFalse(node0.isEmpty());
453:       assertFalse(node0.isNE());
454:       assertFalse(node0.isIf());
455:       assertFalse(node0.isNull());
456:       assertFalse(node0.isFor());
457:       assertFalse(node0.isCall());
458:       assertFalse(node0.isCatch());
459:       assertFalse(node0.isName());
460:       assertFalse(node0.isDelProp());
461:       assertFalse(node0.isWhile());
462:       assertFalse(node0.isThrow());
463:       assertFalse(node0.isIn());
464:       assertFalse(node0.isString());
465:       assertTrue(node0.isNumber());
466:       assertFalse(node0.isSetterDef());
467:       assertFalse(node0.isInc());
468:       assertEquals((-1), node0.getSourcePosition());
469:       assertFalse(node0.isContinue());
470:       assertFalse(node0.isAnd());
471:       assertFalse(node0.isCast());
472:       assertFalse(node0.isFalse());
473:       assertFalse(node0.isExprResult());
474:       assertFalse(node0.isNot());
475:       assertFalse(node0.isObjectLit());
476:       assertFalse(node0.hasOneChild());
477:       assertFalse(node0.isScript());
478:       assertFalse(node0.isGetProp());
479:       assertFalse(node0.isComma());
480:       assertFalse(node0.isTypeOf());
481:       assertFalse(node0.isOr());
482:       assertFalse(node0.isDec());
483:       assertFalse(node0.isAssign());
484:       assertFalse(node0.isThis());
485:       assertFalse(node0.hasChildren());
486:       assertFalse(node0.isReturn());
487:       assertFalse(node0.hasMoreThanOneChild());
488:       assertFalse(node0.isWith());
489:       assertFalse(node0.isBreak());
490:       assertEquals((-1), node0.getLineno());
491:       assertFalse(node0.isInstanceOf());
492:       assertFalse(node0.isGetElem());
493:       assertEquals((-1), node0.getCharno());
494:       assertFalse(node0.isSwitch());
495:       assertFalse(node0.isVar());
496:       assertFalse(node0.isBlock());
497:       assertEquals(39, node0.getType());
498:       assertFalse(node0.isHook());
499:       assertFalse(node0.isDo());
500:       assertFalse(node0.isAdd());
501:       assertFalse(node0.isNew());
502:       assertFalse(node0.isCase());
503:       assertFalse(node0.isParamList());
504:       assertFalse(node0.isAssignAdd());
505:       assertFalse(node0.isGetterDef());
506:       assertEquals(0, node0.getChildCount());
507:       assertFalse(node0.isLabel());
508:       assertFalse(node0.isStringKey());
509:       assertFalse(node0.isLabelName());
510:       assertFalse(node0.isArrayLit());
511:       assertFalse(node1.isGetElem());
512:       assertFalse(node1.isLabelName());
513:       assertFalse(node1.isAssign());
514:       assertFalse(node1.hasOneChild());
515:       assertFalse(node1.isCast());
516:       assertFalse(node1.isAssignAdd());
517:       assertFalse(node1.isDec());
518:       assertFalse(node1.isTypeOf());
519:       assertFalse(node1.isReturn());
520:       assertFalse(node1.isLabel());
521:       assertFalse(node1.hasChildren());
522:       assertFalse(node1.isDo());
523:       assertFalse(node1.hasMoreThanOneChild());
524:       assertFalse(node1.isWith());
525:       assertFalse(node1.isInstanceOf());
526:       assertFalse(node1.isExprResult());
527:       assertFalse(node1.isOr());
528:       assertFalse(node1.isAdd());
529:       assertFalse(node1.isName());
530:       assertFalse(node1.isFalse());
531:       assertFalse(node1.isThrow());
532:       assertFalse(node1.isCall());
533:       assertFalse(node1.isSetterDef());
534:       assertFalse(node1.isBreak());
535:       assertFalse(node1.isGetProp());
536:       assertEquals(0, node1.getType());
537:       assertEquals(4, node1.getLineno());
538:       assertFalse(node1.isComma());
539:       assertEquals(38, node1.getCharno());
540:       assertFalse(node1.isNot());
541:       assertFalse(node1.isObjectLit());
542:       assertFalse(node1.isWhile());
543:       assertFalse(node1.isString());
544:       assertFalse(node1.isContinue());
545:       assertFalse(node1.isAnd());
546:       assertFalse(node1.isDebugger());
547:       assertFalse(node1.isFor());
548:       assertFalse(node1.isEmpty());
549:       assertFalse(node1.isIf());
550:       assertFalse(node1.isDelProp());
551:       assertFalse(node1.isArrayLit());
552:       assertFalse(node1.isTry());
553:       assertFalse(node1.isFunction());
554:       assertFalse(node1.isRegExp());
555:       assertFalse(node1.isCatch());
556:       assertFalse(node1.isDefaultCase());
557:       assertFalse(node1.isInc());
558:       assertFalse(node1.isVoid());
559:       assertFalse(node1.isIn());
560:       assertFalse(node1.isNull());
561:       assertFalse(node1.isNE());
562:       assertFalse(node1.isTrue());
563:       assertFalse(node1.isStringKey());
564:       assertFalse(node1.isNew());
565:       assertFalse(node1.isBlock());
566:       assertFalse(node1.isHook());
567:       assertFalse(node1.isVar());
568:       assertEquals(0, node1.getChildCount());
569:       assertFalse(node1.isThis());
570:       assertFalse(node1.isCase());
571:       assertFalse(node1.isScript());
572:       assertFalse(node1.isParamList());
573:       assertFalse(node1.isSwitch());
574:       assertFalse(node1.isNumber());
575:       assertFalse(node1.isGetterDef());
576:       assertEquals(16422, node1.getSourcePosition());
577:       assertFalse(boolean0);
578:       assertEquals(43, Node.IS_CONSTANT_NAME);
579:       assertEquals(36, Node.QUOTED_PROP);
580:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
581:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
582:       assertEquals(53, Node.INPUT_ID);
583:       assertEquals(55, Node.INFERRED_FUNCTION);
584:       assertEquals(56, Node.CHANGE_TIME);
585:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
586:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
587:       assertEquals(48, Node.DIRECTIVES);
588:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
589:       assertEquals(37, Node.OPT_ARG_NAME);
590:       assertEquals(12, Node.COLUMN_BITS);
591:       assertEquals(32, Node.INCRDECR_PROP);
592:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
593:       assertEquals(4095, Node.COLUMN_MASK);
594:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
595:       assertEquals(15, Node.NO_SIDE_EFFECTS);
596:       assertEquals(57, Node.LAST_PROP);
597:       assertEquals(1, Node.DECR_FLAG);
598:       assertEquals(49, Node.DIRECT_EVAL);
599:       assertEquals(51, Node.STATIC_SOURCE_FILE);
600:       assertEquals(57, Node.REFLECTED_OBJECT);
601:       assertEquals(46, Node.IS_NAMESPACE);
602:       assertEquals(52, Node.LENGTH);
603:       assertEquals(50, Node.FREE_CALL);
604:       assertEquals(54, Node.SLASH_V);
605:       assertEquals(47, Node.IS_DISPATCHER);
606:       assertEquals(2, Node.POST_FLAG);
607:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
608:       assertEquals(8, Node.FLAG_NO_THROWS);
609:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
610:       assertEquals(40, Node.ORIGINALNAME_PROP);
611:       assertEquals(29, Node.JSDOC_INFO_PROP);
612:       assertEquals(39, Node.EMPTY_BLOCK);
613:       assertEquals(30, Node.VAR_ARGS_NAME);
614:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
615:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
616:       assertEquals(47, Node.IS_DISPATCHER);
617:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
618:       assertEquals(29, Node.JSDOC_INFO_PROP);
619:       assertEquals(53, Node.INPUT_ID);
620:       assertEquals(32, Node.INCRDECR_PROP);
621:       assertEquals(55, Node.INFERRED_FUNCTION);
622:       assertEquals(4095, Node.COLUMN_MASK);
623:       assertEquals(12, Node.COLUMN_BITS);
624:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
625:       assertEquals(36, Node.QUOTED_PROP);
626:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
627:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
628:       assertEquals(56, Node.CHANGE_TIME);
629:       assertEquals(49, Node.DIRECT_EVAL);
630:       assertEquals(48, Node.DIRECTIVES);
631:       assertEquals(37, Node.OPT_ARG_NAME);
632:       assertEquals(40, Node.ORIGINALNAME_PROP);
633:       assertEquals(57, Node.REFLECTED_OBJECT);
634:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
635:       assertEquals(52, Node.LENGTH);
636:       assertEquals(50, Node.FREE_CALL);
637:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
638:       assertEquals(8, Node.FLAG_NO_THROWS);
639:       assertEquals(39, Node.EMPTY_BLOCK);
640:       assertEquals(57, Node.LAST_PROP);
641:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
642:       assertEquals(15, Node.NO_SIDE_EFFECTS);
643:       assertEquals(1, Node.DECR_FLAG);
644:       assertEquals(46, Node.IS_NAMESPACE);
645:       assertEquals(30, Node.VAR_ARGS_NAME);
646:       assertEquals(51, Node.STATIC_SOURCE_FILE);
647:       assertEquals(2, Node.POST_FLAG);
648:       assertEquals(54, Node.SLASH_V);
649:       assertEquals(43, Node.IS_CONSTANT_NAME);
650:       
651:       Set<String> set0 = node1.getDirectives();
652:       assertFalse(node1.equals((Object)node0));
653:       assertFalse(node1.isGetElem());
654:       assertFalse(node1.isLabelName());
655:       assertFalse(node1.isAssign());
656:       assertFalse(node1.hasOneChild());
657:       assertFalse(node1.isCast());
658:       assertFalse(node1.isAssignAdd());
659:       assertFalse(node1.isDec());
660:       assertFalse(node1.isTypeOf());
661:       assertFalse(node1.isReturn());
662:       assertFalse(node1.isLabel());
663:       assertFalse(node1.hasChildren());
664:       assertFalse(node1.isDo());
665:       assertFalse(node1.hasMoreThanOneChild());
666:       assertFalse(node1.isWith());
667:       assertFalse(node1.isInstanceOf());
668:       assertFalse(node1.isExprResult());
669:       assertFalse(node1.isOr());
670:       assertFalse(node1.isAdd());
671:       assertFalse(node1.isName());
672:       assertFalse(node1.isFalse());
673:       assertFalse(node1.isThrow());
674:       assertFalse(node1.isCall());
675:       assertFalse(node1.isSetterDef());
676:       assertFalse(node1.isBreak());
677:       assertFalse(node1.isGetProp());
678:       assertEquals(0, node1.getType());
679:       assertEquals(4, node1.getLineno());
680:       assertFalse(node1.isComma());
681:       assertEquals(38, node1.getCharno());
682:       assertFalse(node1.isNot());
683:       assertFalse(node1.isObjectLit());
684:       assertFalse(node1.isWhile());
685:       assertFalse(node1.isString());
686:       assertFalse(node1.isContinue());
687:       assertFalse(node1.isAnd());
688:       assertFalse(node1.isDebugger());
689:       assertFalse(node1.isFor());
690:       assertFalse(node1.isEmpty());
691:       assertFalse(node1.isIf());
692:       assertFalse(node1.isDelProp());
693:       assertFalse(node1.isArrayLit());
694:       assertFalse(node1.isTry());
695:       assertFalse(node1.isFunction());
696:       assertFalse(node1.isRegExp());
697:       assertFalse(node1.isCatch());
698:       assertFalse(node1.isDefaultCase());
699:       assertFalse(node1.isInc());
700:       assertFalse(node1.isVoid());
701:       assertFalse(node1.isIn());
702:       assertFalse(node1.isNull());
703:       assertFalse(node1.isNE());
704:       assertFalse(node1.isTrue());
705:       assertFalse(node1.isStringKey());
706:       assertFalse(node1.isNew());
707:       assertFalse(node1.isBlock());
708:       assertFalse(node1.isHook());
709:       assertFalse(node1.isVar());
710:       assertEquals(0, node1.getChildCount());
711:       assertFalse(node1.isThis());
712:       assertFalse(node1.isCase());
713:       assertFalse(node1.isScript());
714:       assertFalse(node1.isParamList());
715:       assertFalse(node1.isSwitch());
716:       assertFalse(node1.isNumber());
717:       assertFalse(node1.isGetterDef());
718:       assertEquals(16422, node1.getSourcePosition());
719:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
720:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
721:       assertEquals(47, Node.IS_DISPATCHER);
722:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
723:       assertEquals(29, Node.JSDOC_INFO_PROP);
724:       assertEquals(53, Node.INPUT_ID);
725:       assertEquals(32, Node.INCRDECR_PROP);
726:       assertEquals(55, Node.INFERRED_FUNCTION);
727:       assertEquals(4095, Node.COLUMN_MASK);
728:       assertEquals(12, Node.COLUMN_BITS);
729:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
730:       assertEquals(36, Node.QUOTED_PROP);
731:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
732:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
733:       assertEquals(56, Node.CHANGE_TIME);
734:       assertEquals(49, Node.DIRECT_EVAL);
735:       assertEquals(48, Node.DIRECTIVES);
736:       assertEquals(37, Node.OPT_ARG_NAME);
737:       assertEquals(40, Node.ORIGINALNAME_PROP);
738:       assertEquals(57, Node.REFLECTED_OBJECT);
739:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
740:       assertEquals(52, Node.LENGTH);
741:       assertEquals(50, Node.FREE_CALL);
742:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
743:       assertEquals(8, Node.FLAG_NO_THROWS);
744:       assertEquals(39, Node.EMPTY_BLOCK);
745:       assertEquals(57, Node.LAST_PROP);
746:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
747:       assertEquals(15, Node.NO_SIDE_EFFECTS);
748:       assertEquals(1, Node.DECR_FLAG);
749:       assertEquals(46, Node.IS_NAMESPACE);
750:       assertEquals(30, Node.VAR_ARGS_NAME);
751:       assertEquals(51, Node.STATIC_SOURCE_FILE);
752:       assertEquals(2, Node.POST_FLAG);
753:       assertEquals(54, Node.SLASH_V);
754:       assertEquals(43, Node.IS_CONSTANT_NAME);
755:       assertNull(set0);
756:       
757:       boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
758:       assertFalse(node0.equals((Object)node1));
759:       assertFalse(node1.equals((Object)node0));
760:       assertTrue(boolean1 == boolean0);
761:       assertFalse(node0.isTrue());
762:       assertFalse(node0.isDebugger());
763:       assertFalse(node0.isFunction());
764:       assertFalse(node0.isVoid());
765:       assertFalse(node0.isRegExp());
766:       assertFalse(node0.isTry());
767:       assertFalse(node0.isDefaultCase());
768:       assertFalse(node0.isEmpty());
769:       assertFalse(node0.isNE());
770:       assertFalse(node0.isIf());
771:       assertFalse(node0.isNull());
772:       assertFalse(node0.isFor());
773:       assertFalse(node0.isCall());
774:       assertFalse(node0.isCatch());
775:       assertFalse(node0.isName());
776:       assertFalse(node0.isDelProp());
777:       assertFalse(node0.isWhile());
778:       assertFalse(node0.isThrow());
779:       assertFalse(node0.isIn());
780:       assertFalse(node0.isString());
781:       assertTrue(node0.isNumber());
782:       assertFalse(node0.isSetterDef());
783:       assertFalse(node0.isInc());
784:       assertEquals((-1), node0.getSourcePosition());
785:       assertFalse(node0.isContinue());
786:       assertFalse(node0.isAnd());
787:       assertFalse(node0.isCast());
788:       assertFalse(node0.isFalse());
789:       assertFalse(node0.isExprResult());
790:       assertFalse(node0.isNot());
791:       assertFalse(node0.isObjectLit());
792:       assertFalse(node0.hasOneChild());
793:       assertFalse(node0.isScript());
794:       assertFalse(node0.isGetProp());
795:       assertFalse(node0.isComma());
796:       assertFalse(node0.isTypeOf());
797:       assertFalse(node0.isOr());
798:       assertFalse(node0.isDec());
799:       assertFalse(node0.isAssign());
800:       assertFalse(node0.isThis());
801:       assertFalse(node0.hasChildren());
802:       assertFalse(node0.isReturn());
803:       assertFalse(node0.hasMoreThanOneChild());
804:       assertFalse(node0.isWith());
805:       assertFalse(node0.isBreak());
806:       assertEquals((-1), node0.getLineno());
807:       assertFalse(node0.isInstanceOf());
808:       assertFalse(node0.isGetElem());
809:       assertEquals((-1), node0.getCharno());
810:       assertFalse(node0.isSwitch());
811:       assertFalse(node0.isVar());
812:       assertFalse(node0.isBlock());
813:       assertEquals(39, node0.getType());
814:       assertFalse(node0.isHook());
815:       assertFalse(node0.isDo());
816:       assertFalse(node0.isAdd());
817:       assertFalse(node0.isNew());
818:       assertFalse(node0.isCase());
819:       assertFalse(node0.isParamList());
820:       assertFalse(node0.isAssignAdd());
821:       assertFalse(node0.isGetterDef());
822:       assertEquals(0, node0.getChildCount());
823:       assertFalse(node0.isLabel());
824:       assertFalse(node0.isStringKey());
825:       assertFalse(node0.isLabelName());
826:       assertFalse(node0.isArrayLit());
827:       assertFalse(node1.isGetElem());
828:       assertFalse(node1.isLabelName());
829:       assertFalse(node1.isAssign());
830:       assertFalse(node1.hasOneChild());
831:       assertFalse(node1.isCast());
832:       assertFalse(node1.isAssignAdd());
833:       assertFalse(node1.isDec());
834:       assertFalse(node1.isTypeOf());
835:       assertFalse(node1.isReturn());
836:       assertFalse(node1.isLabel());
837:       assertFalse(node1.hasChildren());
838:       assertFalse(node1.isDo());
839:       assertFalse(node1.hasMoreThanOneChild());
840:       assertFalse(node1.isWith());
841:       assertFalse(node1.isInstanceOf());
842:       assertFalse(node1.isExprResult());
843:       assertFalse(node1.isOr());
844:       assertFalse(node1.isAdd());
845:       assertFalse(node1.isName());
846:       assertFalse(node1.isFalse());
847:       assertFalse(node1.isThrow());
848:       assertFalse(node1.isCall());
849:       assertFalse(node1.isSetterDef());
850:       assertFalse(node1.isBreak());
851:       assertFalse(node1.isGetProp());
852:       assertEquals(0, node1.getType());
853:       assertEquals(4, node1.getLineno());
854:       assertFalse(node1.isComma());
855:       assertEquals(38, node1.getCharno());
856:       assertFalse(node1.isNot());
857:       assertFalse(node1.isObjectLit());
858:       assertFalse(node1.isWhile());
859:       assertFalse(node1.isString());
860:       assertFalse(node1.isContinue());
861:       assertFalse(node1.isAnd());
862:       assertFalse(node1.isDebugger());
863:       assertFalse(node1.isFor());
864:       assertFalse(node1.isEmpty());
865:       assertFalse(node1.isIf());
866:       assertFalse(node1.isDelProp());
867:       assertFalse(node1.isArrayLit());
868:       assertFalse(node1.isTry());
869:       assertFalse(node1.isFunction());
870:       assertFalse(node1.isRegExp());
871:       assertFalse(node1.isCatch());
872:       assertFalse(node1.isDefaultCase());
873:       assertFalse(node1.isInc());
874:       assertFalse(node1.isVoid());
875:       assertFalse(node1.isIn());
876:       assertFalse(node1.isNull());
877:       assertFalse(node1.isNE());
878:       assertFalse(node1.isTrue());
879:       assertFalse(node1.isStringKey());
880:       assertFalse(node1.isNew());
881:       assertFalse(node1.isBlock());
882:       assertFalse(node1.isHook());
883:       assertFalse(node1.isVar());
884:       assertEquals(0, node1.getChildCount());
885:       assertFalse(node1.isThis());
886:       assertFalse(node1.isCase());
887:       assertFalse(node1.isScript());
888:       assertFalse(node1.isParamList());
889:       assertFalse(node1.isSwitch());
890:       assertFalse(node1.isNumber());
891:       assertFalse(node1.isGetterDef());
892:       assertEquals(16422, node1.getSourcePosition());
893:       assertFalse(boolean1);
894:       assertEquals(43, Node.IS_CONSTANT_NAME);
895:       assertEquals(36, Node.QUOTED_PROP);
896:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
897:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
898:       assertEquals(53, Node.INPUT_ID);
899:       assertEquals(55, Node.INFERRED_FUNCTION);
900:       assertEquals(56, Node.CHANGE_TIME);
901:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
902:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
903:       assertEquals(48, Node.DIRECTIVES);
904:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
905:       assertEquals(37, Node.OPT_ARG_NAME);
906:       assertEquals(12, Node.COLUMN_BITS);
907:       assertEquals(32, Node.INCRDECR_PROP);
908:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
909:       assertEquals(4095, Node.COLUMN_MASK);
910:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
911:       assertEquals(15, Node.NO_SIDE_EFFECTS);
912:       assertEquals(57, Node.LAST_PROP);
913:       assertEquals(1, Node.DECR_FLAG);
914:       assertEquals(49, Node.DIRECT_EVAL);
915:       assertEquals(51, Node.STATIC_SOURCE_FILE);
916:       assertEquals(57, Node.REFLECTED_OBJECT);
917:       assertEquals(46, Node.IS_NAMESPACE);
918:       assertEquals(52, Node.LENGTH);
919:       assertEquals(50, Node.FREE_CALL);
920:       assertEquals(54, Node.SLASH_V);
921:       assertEquals(47, Node.IS_DISPATCHER);
922:       assertEquals(2, Node.POST_FLAG);
923:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
924:       assertEquals(8, Node.FLAG_NO_THROWS);
925:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
926:       assertEquals(40, Node.ORIGINALNAME_PROP);
927:       assertEquals(29, Node.JSDOC_INFO_PROP);
928:       assertEquals(39, Node.EMPTY_BLOCK);
929:       assertEquals(30, Node.VAR_ARGS_NAME);
930:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
931:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
932:       assertEquals(47, Node.IS_DISPATCHER);
933:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
934:       assertEquals(29, Node.JSDOC_INFO_PROP);
935:       assertEquals(53, Node.INPUT_ID);
936:       assertEquals(32, Node.INCRDECR_PROP);
937:       assertEquals(55, Node.INFERRED_FUNCTION);
938:       assertEquals(4095, Node.COLUMN_MASK);
939:       assertEquals(12, Node.COLUMN_BITS);
940:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
941:       assertEquals(36, Node.QUOTED_PROP);
942:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
943:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
944:       assertEquals(56, Node.CHANGE_TIME);
945:       assertEquals(49, Node.DIRECT_EVAL);
946:       assertEquals(48, Node.DIRECTIVES);
947:       assertEquals(37, Node.OPT_ARG_NAME);
948:       assertEquals(40, Node.ORIGINALNAME_PROP);
949:       assertEquals(57, Node.REFLECTED_OBJECT);
950:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
951:       assertEquals(52, Node.LENGTH);
952:       assertEquals(50, Node.FREE_CALL);
953:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
954:       assertEquals(8, Node.FLAG_NO_THROWS);
955:       assertEquals(39, Node.EMPTY_BLOCK);
956:       assertEquals(57, Node.LAST_PROP);
957:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
958:       assertEquals(15, Node.NO_SIDE_EFFECTS);
959:       assertEquals(1, Node.DECR_FLAG);
960:       assertEquals(46, Node.IS_NAMESPACE);
961:       assertEquals(30, Node.VAR_ARGS_NAME);
962:       assertEquals(51, Node.STATIC_SOURCE_FILE);
963:       assertEquals(2, Node.POST_FLAG);
964:       assertEquals(54, Node.SLASH_V);
965:       assertEquals(43, Node.IS_CONSTANT_NAME);
966:       
967:       boolean boolean2 = node1.isVarArgs();
968:       assertFalse(node1.equals((Object)node0));
969:       assertTrue(boolean2 == boolean1);
970:       assertTrue(boolean2 == boolean0);
971:       assertFalse(node1.isGetElem());
972:       assertFalse(node1.isLabelName());
973:       assertFalse(node1.isAssign());
974:       assertFalse(node1.hasOneChild());
975:       assertFalse(node1.isCast());
976:       assertFalse(node1.isAssignAdd());
977:       assertFalse(node1.isDec());
978:       assertFalse(node1.isTypeOf());
979:       assertFalse(node1.isReturn());
980:       assertFalse(node1.isLabel());
981:       assertFalse(node1.hasChildren());
982:       assertFalse(node1.isDo());
983:       assertFalse(node1.hasMoreThanOneChild());
984:       assertFalse(node1.isWith());
985:       assertFalse(node1.isInstanceOf());
986:       assertFalse(node1.isExprResult());
987:       assertFalse(node1.isOr());
988:       assertFalse(node1.isAdd());
989:       assertFalse(node1.isName());
990:       assertFalse(node1.isFalse());
991:       assertFalse(node1.isThrow());
992:       assertFalse(node1.isCall());
993:       assertFalse(node1.isSetterDef());
994:       assertFalse(node1.isBreak());
995:       assertFalse(node1.isGetProp());
996:       assertEquals(0, node1.getType());
997:       assertEquals(4, node1.getLineno());
998:       assertFalse(node1.isComma());
999:       assertEquals(38, node1.getCharno());
1000:       assertFalse(node1.isNot());
1001:       assertFalse(node1.isObjectLit());
1002:       assertFalse(node1.isWhile());
1003:       assertFalse(node1.isString());
1004:       assertFalse(node1.isContinue());
1005:       assertFalse(node1.isAnd());
1006:       assertFalse(node1.isDebugger());
1007:       assertFalse(node1.isFor());
1008:       assertFalse(node1.isEmpty());
1009:       assertFalse(node1.isIf());
1010:       assertFalse(node1.isDelProp());
1011:       assertFalse(node1.isArrayLit());
1012:       assertFalse(node1.isTry());
1013:       assertFalse(node1.isFunction());
1014:       assertFalse(node1.isRegExp());
1015:       assertFalse(node1.isCatch());
1016:       assertFalse(node1.isDefaultCase());
1017:       assertFalse(node1.isInc());
1018:       assertFalse(node1.isVoid());
1019:       assertFalse(node1.isIn());
1020:       assertFalse(node1.isNull());
1021:       assertFalse(node1.isNE());
1022:       assertFalse(node1.isTrue());
1023:       assertFalse(node1.isStringKey());
1024:       assertFalse(node1.isNew());
1025:       assertFalse(node1.isBlock());
1026:       assertFalse(node1.isHook());
1027:       assertFalse(node1.isVar());
1028:       assertEquals(0, node1.getChildCount());
1029:       assertFalse(node1.isThis());
1030:       assertFalse(node1.isCase());
1031:       assertFalse(node1.isScript());
1032:       assertFalse(node1.isParamList());
1033:       assertFalse(node1.isSwitch());
1034:       assertFalse(node1.isNumber());
1035:       assertFalse(node1.isGetterDef());
1036:       assertEquals(16422, node1.getSourcePosition());
1037:       assertFalse(boolean2);
1038:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1039:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1040:       assertEquals(47, Node.IS_DISPATCHER);
1041:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1042:       assertEquals(29, Node.JSDOC_INFO_PROP);
1043:       assertEquals(53, Node.INPUT_ID);
1044:       assertEquals(32, Node.INCRDECR_PROP);
1045:       assertEquals(55, Node.INFERRED_FUNCTION);
1046:       assertEquals(4095, Node.COLUMN_MASK);
1047:       assertEquals(12, Node.COLUMN_BITS);
1048:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1049:       assertEquals(36, Node.QUOTED_PROP);
1050:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1051:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1052:       assertEquals(56, Node.CHANGE_TIME);
1053:       assertEquals(49, Node.DIRECT_EVAL);
1054:       assertEquals(48, Node.DIRECTIVES);
1055:       assertEquals(37, Node.OPT_ARG_NAME);
1056:       assertEquals(40, Node.ORIGINALNAME_PROP);
1057:       assertEquals(57, Node.REFLECTED_OBJECT);
1058:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1059:       assertEquals(52, Node.LENGTH);
1060:       assertEquals(50, Node.FREE_CALL);
1061:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1062:       assertEquals(8, Node.FLAG_NO_THROWS);
1063:       assertEquals(39, Node.EMPTY_BLOCK);
1064:       assertEquals(57, Node.LAST_PROP);
1065:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1066:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1067:       assertEquals(1, Node.DECR_FLAG);
1068:       assertEquals(46, Node.IS_NAMESPACE);
1069:       assertEquals(30, Node.VAR_ARGS_NAME);
1070:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1071:       assertEquals(2, Node.POST_FLAG);
1072:       assertEquals(54, Node.SLASH_V);
1073:       assertEquals(43, Node.IS_CONSTANT_NAME);
1074:       
1075:       Iterable<Node> iterable0 = node0.children();
1076:       assertFalse(node0.equals((Object)node1));
1077:       assertFalse(node0.isTrue());
1078:       assertFalse(node0.isDebugger());
1079:       assertFalse(node0.isFunction());
1080:       assertFalse(node0.isVoid());
1081:       assertFalse(node0.isRegExp());
1082:       assertFalse(node0.isTry());
1083:       assertFalse(node0.isDefaultCase());
1084:       assertFalse(node0.isEmpty());
1085:       assertFalse(node0.isNE());
1086:       assertFalse(node0.isIf());
1087:       assertFalse(node0.isNull());
1088:       assertFalse(node0.isFor());
1089:       assertFalse(node0.isCall());
1090:       assertFalse(node0.isCatch());
1091:       assertFalse(node0.isName());
1092:       assertFalse(node0.isDelProp());
1093:       assertFalse(node0.isWhile());
1094:       assertFalse(node0.isThrow());
1095:       assertFalse(node0.isIn());
1096:       assertFalse(node0.isString());
1097:       assertTrue(node0.isNumber());
1098:       assertFalse(node0.isSetterDef());
1099:       assertFalse(node0.isInc());
1100:       assertEquals((-1), node0.getSourcePosition());
1101:       assertFalse(node0.isContinue());
1102:       assertFalse(node0.isAnd());
1103:       assertFalse(node0.isCast());
1104:       assertFalse(node0.isFalse());
1105:       assertFalse(node0.isExprResult());
1106:       assertFalse(node0.isNot());
1107:       assertFalse(node0.isObjectLit());
1108:       assertFalse(node0.hasOneChild());
1109:       assertFalse(node0.isScript());
1110:       assertFalse(node0.isGetProp());
1111:       assertFalse(node0.isComma());
1112:       assertFalse(node0.isTypeOf());
1113:       assertFalse(node0.isOr());
1114:       assertFalse(node0.isDec());
1115:       assertFalse(node0.isAssign());
1116:       assertFalse(node0.isThis());
1117:       assertFalse(node0.hasChildren());
1118:       assertFalse(node0.isReturn());
1119:       assertFalse(node0.hasMoreThanOneChild());
1120:       assertFalse(node0.isWith());
1121:       assertFalse(node0.isBreak());
1122:       assertEquals((-1), node0.getLineno());
1123:       assertFalse(node0.isInstanceOf());
1124:       assertFalse(node0.isGetElem());
1125:       assertEquals((-1), node0.getCharno());
1126:       assertFalse(node0.isSwitch());
1127:       assertFalse(node0.isVar());
1128:       assertFalse(node0.isBlock());
1129:       assertEquals(39, node0.getType());
1130:       assertFalse(node0.isHook());
1131:       assertFalse(node0.isDo());
1132:       assertFalse(node0.isAdd());
1133:       assertFalse(node0.isNew());
1134:       assertFalse(node0.isCase());
1135:       assertFalse(node0.isParamList());
1136:       assertFalse(node0.isAssignAdd());
1137:       assertFalse(node0.isGetterDef());
1138:       assertEquals(0, node0.getChildCount());
1139:       assertFalse(node0.isLabel());
1140:       assertFalse(node0.isStringKey());
1141:       assertFalse(node0.isLabelName());
1142:       assertFalse(node0.isArrayLit());
1143:       assertEquals(43, Node.IS_CONSTANT_NAME);
1144:       assertEquals(36, Node.QUOTED_PROP);
1145:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1146:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1147:       assertEquals(53, Node.INPUT_ID);
1148:       assertEquals(55, Node.INFERRED_FUNCTION);
1149:       assertEquals(56, Node.CHANGE_TIME);
1150:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1151:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1152:       assertEquals(48, Node.DIRECTIVES);
1153:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1154:       assertEquals(37, Node.OPT_ARG_NAME);
1155:       assertEquals(12, Node.COLUMN_BITS);
1156:       assertEquals(32, Node.INCRDECR_PROP);
1157:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1158:       assertEquals(4095, Node.COLUMN_MASK);
1159:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1160:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1161:       assertEquals(57, Node.LAST_PROP);
1162:       assertEquals(1, Node.DECR_FLAG);
1163:       assertEquals(49, Node.DIRECT_EVAL);
1164:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1165:       assertEquals(57, Node.REFLECTED_OBJECT);
1166:       assertEquals(46, Node.IS_NAMESPACE);
1167:       assertEquals(52, Node.LENGTH);
1168:       assertEquals(50, Node.FREE_CALL);
1169:       assertEquals(54, Node.SLASH_V);
1170:       assertEquals(47, Node.IS_DISPATCHER);
1171:       assertEquals(2, Node.POST_FLAG);
1172:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1173:       assertEquals(8, Node.FLAG_NO_THROWS);
1174:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1175:       assertEquals(40, Node.ORIGINALNAME_PROP);
1176:       assertEquals(29, Node.JSDOC_INFO_PROP);
1177:       assertEquals(39, Node.EMPTY_BLOCK);
1178:       assertEquals(30, Node.VAR_ARGS_NAME);
1179:       assertFalse(iterable0.contains(node0));
1180:       assertNotNull(iterable0);
1181:       
1182:       boolean boolean3 = node0.isIf();
1183:       assertFalse(node0.equals((Object)node1));
1184:       assertTrue(boolean3 == boolean2);
1185:       assertTrue(boolean3 == boolean1);
1186:       assertTrue(boolean3 == boolean0);
1187:       assertFalse(node0.isTrue());
1188:       assertFalse(node0.isDebugger());
1189:       assertFalse(node0.isFunction());
1190:       assertFalse(node0.isVoid());
1191:       assertFalse(node0.isRegExp());
1192:       assertFalse(node0.isTry());
1193:       assertFalse(node0.isDefaultCase());
1194:       assertFalse(node0.isEmpty());
1195:       assertFalse(node0.isNE());
1196:       assertFalse(node0.isIf());
1197:       assertFalse(node0.isNull());
1198:       assertFalse(node0.isFor());
1199:       assertFalse(node0.isCall());
1200:       assertFalse(node0.isCatch());
1201:       assertFalse(node0.isName());
1202:       assertFalse(node0.isDelProp());
1203:       assertFalse(node0.isWhile());
1204:       assertFalse(node0.isThrow());
1205:       assertFalse(node0.isIn());
1206:       assertFalse(node0.isString());
1207:       assertTrue(node0.isNumber());
1208:       assertFalse(node0.isSetterDef());
1209:       assertFalse(node0.isInc());
1210:       assertEquals((-1), node0.getSourcePosition());
1211:       assertFalse(node0.isContinue());
1212:       assertFalse(node0.isAnd());
1213:       assertFalse(node0.isCast());
1214:       assertFalse(node0.isFalse());
1215:       assertFalse(node0.isExprResult());
1216:       assertFalse(node0.isNot());
1217:       assertFalse(node0.isObjectLit());
1218:       assertFalse(node0.hasOneChild());
1219:       assertFalse(node0.isScript());
1220:       assertFalse(node0.isGetProp());
1221:       assertFalse(node0.isComma());
1222:       assertFalse(node0.isTypeOf());
1223:       assertFalse(node0.isOr());
1224:       assertFalse(node0.isDec());
1225:       assertFalse(node0.isAssign());
1226:       assertFalse(node0.isThis());
1227:       assertFalse(node0.hasChildren());
1228:       assertFalse(node0.isReturn());
1229:       assertFalse(node0.hasMoreThanOneChild());
1230:       assertFalse(node0.isWith());
1231:       assertFalse(node0.isBreak());
1232:       assertEquals((-1), node0.getLineno());
1233:       assertFalse(node0.isInstanceOf());
1234:       assertFalse(node0.isGetElem());
1235:       assertEquals((-1), node0.getCharno());
1236:       assertFalse(node0.isSwitch());
1237:       assertFalse(node0.isVar());
1238:       assertFalse(node0.isBlock());
1239:       assertEquals(39, node0.getType());
1240:       assertFalse(node0.isHook());
1241:       assertFalse(node0.isDo());
1242:       assertFalse(node0.isAdd());
1243:       assertFalse(node0.isNew());
1244:       assertFalse(node0.isCase());
1245:       assertFalse(node0.isParamList());
1246:       assertFalse(node0.isAssignAdd());
1247:       assertFalse(node0.isGetterDef());
1248:       assertEquals(0, node0.getChildCount());
1249:       assertFalse(node0.isLabel());
1250:       assertFalse(node0.isStringKey());
1251:       assertFalse(node0.isLabelName());
1252:       assertFalse(node0.isArrayLit());
1253:       assertFalse(boolean3);
1254:       assertEquals(43, Node.IS_CONSTANT_NAME);
1255:       assertEquals(36, Node.QUOTED_PROP);
1256:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1257:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1258:       assertEquals(53, Node.INPUT_ID);
1259:       assertEquals(55, Node.INFERRED_FUNCTION);
1260:       assertEquals(56, Node.CHANGE_TIME);
1261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1263:       assertEquals(48, Node.DIRECTIVES);
1264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1265:       assertEquals(37, Node.OPT_ARG_NAME);
1266:       assertEquals(12, Node.COLUMN_BITS);
1267:       assertEquals(32, Node.INCRDECR_PROP);
1268:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1269:       assertEquals(4095, Node.COLUMN_MASK);
1270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1271:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1272:       assertEquals(57, Node.LAST_PROP);
1273:       assertEquals(1, Node.DECR_FLAG);
1274:       assertEquals(49, Node.DIRECT_EVAL);
1275:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1276:       assertEquals(57, Node.REFLECTED_OBJECT);
1277:       assertEquals(46, Node.IS_NAMESPACE);
1278:       assertEquals(52, Node.LENGTH);
1279:       assertEquals(50, Node.FREE_CALL);
1280:       assertEquals(54, Node.SLASH_V);
1281:       assertEquals(47, Node.IS_DISPATCHER);
1282:       assertEquals(2, Node.POST_FLAG);
1283:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1284:       assertEquals(8, Node.FLAG_NO_THROWS);
1285:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1286:       assertEquals(40, Node.ORIGINALNAME_PROP);
1287:       assertEquals(29, Node.JSDOC_INFO_PROP);
1288:       assertEquals(39, Node.EMPTY_BLOCK);
1289:       assertEquals(30, Node.VAR_ARGS_NAME);
1290:       
1291:       boolean boolean4 = node1.isVoid();
1292:       assertFalse(node1.equals((Object)node0));
1293:       assertTrue(boolean4 == boolean1);
1294:       assertTrue(boolean4 == boolean2);
1295:       assertTrue(boolean4 == boolean0);
1296:       assertTrue(boolean4 == boolean3);
1297:       assertFalse(node1.isGetElem());
1298:       assertFalse(node1.isLabelName());
1299:       assertFalse(node1.isAssign());
1300:       assertFalse(node1.hasOneChild());
1301:       assertFalse(node1.isCast());
1302:       assertFalse(node1.isAssignAdd());
1303:       assertFalse(node1.isDec());
1304:       assertFalse(node1.isTypeOf());
1305:       assertFalse(node1.isReturn());
1306:       assertFalse(node1.isLabel());
1307:       assertFalse(node1.hasChildren());
1308:       assertFalse(node1.isDo());
1309:       assertFalse(node1.hasMoreThanOneChild());
1310:       assertFalse(node1.isWith());
1311:       assertFalse(node1.isInstanceOf());
1312:       assertFalse(node1.isExprResult());
1313:       assertFalse(node1.isOr());
1314:       assertFalse(node1.isAdd());
1315:       assertFalse(node1.isName());
1316:       assertFalse(node1.isFalse());
1317:       assertFalse(node1.isThrow());
1318:       assertFalse(node1.isCall());
1319:       assertFalse(node1.isSetterDef());
1320:       assertFalse(node1.isBreak());
1321:       assertFalse(node1.isGetProp());
1322:       assertEquals(0, node1.getType());
1323:       assertEquals(4, node1.getLineno());
1324:       assertFalse(node1.isComma());
1325:       assertEquals(38, node1.getCharno());
1326:       assertFalse(node1.isNot());
1327:       assertFalse(node1.isObjectLit());
1328:       assertFalse(node1.isWhile());
1329:       assertFalse(node1.isString());
1330:       assertFalse(node1.isContinue());
1331:       assertFalse(node1.isAnd());
1332:       assertFalse(node1.isDebugger());
1333:       assertFalse(node1.isFor());
1334:       assertFalse(node1.isEmpty());
1335:       assertFalse(node1.isIf());
1336:       assertFalse(node1.isDelProp());
1337:       assertFalse(node1.isArrayLit());
1338:       assertFalse(node1.isTry());
1339:       assertFalse(node1.isFunction());
1340:       assertFalse(node1.isRegExp());
1341:       assertFalse(node1.isCatch());
1342:       assertFalse(node1.isDefaultCase());
1343:       assertFalse(node1.isInc());
1344:       assertFalse(node1.isVoid());
1345:       assertFalse(node1.isIn());
1346:       assertFalse(node1.isNull());
1347:       assertFalse(node1.isNE());
1348:       assertFalse(node1.isTrue());
1349:       assertFalse(node1.isStringKey());
1350:       assertFalse(node1.isNew());
1351:       assertFalse(node1.isBlock());
1352:       assertFalse(node1.isHook());
1353:       assertFalse(node1.isVar());
1354:       assertEquals(0, node1.getChildCount());
1355:       assertFalse(node1.isThis());
1356:       assertFalse(node1.isCase());
1357:       assertFalse(node1.isScript());
1358:       assertFalse(node1.isParamList());
1359:       assertFalse(node1.isSwitch());
1360:       assertFalse(node1.isNumber());
1361:       assertFalse(node1.isGetterDef());
1362:       assertEquals(16422, node1.getSourcePosition());
1363:       assertFalse(boolean4);
1364:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1365:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1366:       assertEquals(47, Node.IS_DISPATCHER);
1367:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1368:       assertEquals(29, Node.JSDOC_INFO_PROP);
1369:       assertEquals(53, Node.INPUT_ID);
1370:       assertEquals(32, Node.INCRDECR_PROP);
1371:       assertEquals(55, Node.INFERRED_FUNCTION);
1372:       assertEquals(4095, Node.COLUMN_MASK);
1373:       assertEquals(12, Node.COLUMN_BITS);
1374:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1375:       assertEquals(36, Node.QUOTED_PROP);
1376:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1377:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1378:       assertEquals(56, Node.CHANGE_TIME);
1379:       assertEquals(49, Node.DIRECT_EVAL);
1380:       assertEquals(48, Node.DIRECTIVES);
1381:       assertEquals(37, Node.OPT_ARG_NAME);
1382:       assertEquals(40, Node.ORIGINALNAME_PROP);
1383:       assertEquals(57, Node.REFLECTED_OBJECT);
1384:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1385:       assertEquals(52, Node.LENGTH);
1386:       assertEquals(50, Node.FREE_CALL);
1387:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1388:       assertEquals(8, Node.FLAG_NO_THROWS);
1389:       assertEquals(39, Node.EMPTY_BLOCK);
1390:       assertEquals(57, Node.LAST_PROP);
1391:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1392:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1393:       assertEquals(1, Node.DECR_FLAG);
1394:       assertEquals(46, Node.IS_NAMESPACE);
1395:       assertEquals(30, Node.VAR_ARGS_NAME);
1396:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1397:       assertEquals(2, Node.POST_FLAG);
1398:       assertEquals(54, Node.SLASH_V);
1399:       assertEquals(43, Node.IS_CONSTANT_NAME);
1400:       
1401:       node0.setInputId((InputId) null);
1402:       assertFalse(node0.equals((Object)node1));
1403:       assertFalse(node0.isTrue());
1404:       assertFalse(node0.isDebugger());
1405:       assertFalse(node0.isFunction());
1406:       assertFalse(node0.isVoid());
1407:       assertFalse(node0.isRegExp());
1408:       assertFalse(node0.isTry());
1409:       assertFalse(node0.isDefaultCase());
1410:       assertFalse(node0.isEmpty());
1411:       assertFalse(node0.isNE());
1412:       assertFalse(node0.isIf());
1413:       assertFalse(node0.isNull());
1414:       assertFalse(node0.isFor());
1415:       assertFalse(node0.isCall());
1416:       assertFalse(node0.isCatch());
1417:       assertFalse(node0.isName());
1418:       assertFalse(node0.isDelProp());
1419:       assertFalse(node0.isWhile());
1420:       assertFalse(node0.isThrow());
1421:       assertFalse(node0.isIn());
1422:       assertFalse(node0.isString());
1423:       assertTrue(node0.isNumber());
1424:       assertFalse(node0.isSetterDef());
1425:       assertFalse(node0.isInc());
1426:       assertEquals((-1), node0.getSourcePosition());
1427:       assertFalse(node0.isContinue());
1428:       assertFalse(node0.isAnd());
1429:       assertFalse(node0.isCast());
1430:       assertFalse(node0.isFalse());
1431:       assertFalse(node0.isExprResult());
1432:       assertFalse(node0.isNot());
1433:       assertFalse(node0.isObjectLit());
1434:       assertFalse(node0.hasOneChild());
1435:       assertFalse(node0.isScript());
1436:       assertFalse(node0.isGetProp());
1437:       assertFalse(node0.isComma());
1438:       assertFalse(node0.isTypeOf());
1439:       assertFalse(node0.isOr());
1440:       assertFalse(node0.isDec());
1441:       assertFalse(node0.isAssign());
1442:       assertFalse(node0.isThis());
1443:       assertFalse(node0.hasChildren());
1444:       assertFalse(node0.isReturn());
1445:       assertFalse(node0.hasMoreThanOneChild());
1446:       assertFalse(node0.isWith());
1447:       assertFalse(node0.isBreak());
1448:       assertEquals((-1), node0.getLineno());
1449:       assertFalse(node0.isInstanceOf());
1450:       assertFalse(node0.isGetElem());
1451:       assertEquals((-1), node0.getCharno());
1452:       assertFalse(node0.isSwitch());
1453:       assertFalse(node0.isVar());
1454:       assertFalse(node0.isBlock());
1455:       assertEquals(39, node0.getType());
1456:       assertFalse(node0.isHook());
1457:       assertFalse(node0.isDo());
1458:       assertFalse(node0.isAdd());
1459:       assertFalse(node0.isNew());
1460:       assertFalse(node0.isCase());
1461:       assertFalse(node0.isParamList());
1462:       assertFalse(node0.isAssignAdd());
1463:       assertFalse(node0.isGetterDef());
1464:       assertEquals(0, node0.getChildCount());
1465:       assertFalse(node0.isLabel());
1466:       assertFalse(node0.isStringKey());
1467:       assertFalse(node0.isLabelName());
1468:       assertFalse(node0.isArrayLit());
1469:       assertEquals(43, Node.IS_CONSTANT_NAME);
1470:       assertEquals(36, Node.QUOTED_PROP);
1471:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1472:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1473:       assertEquals(53, Node.INPUT_ID);
1474:       assertEquals(55, Node.INFERRED_FUNCTION);
1475:       assertEquals(56, Node.CHANGE_TIME);
1476:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1477:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1478:       assertEquals(48, Node.DIRECTIVES);
1479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1480:       assertEquals(37, Node.OPT_ARG_NAME);
1481:       assertEquals(12, Node.COLUMN_BITS);
1482:       assertEquals(32, Node.INCRDECR_PROP);
1483:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1484:       assertEquals(4095, Node.COLUMN_MASK);
1485:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1486:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1487:       assertEquals(57, Node.LAST_PROP);
1488:       assertEquals(1, Node.DECR_FLAG);
1489:       assertEquals(49, Node.DIRECT_EVAL);
1490:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1491:       assertEquals(57, Node.REFLECTED_OBJECT);
1492:       assertEquals(46, Node.IS_NAMESPACE);
1493:       assertEquals(52, Node.LENGTH);
1494:       assertEquals(50, Node.FREE_CALL);
1495:       assertEquals(54, Node.SLASH_V);
1496:       assertEquals(47, Node.IS_DISPATCHER);
1497:       assertEquals(2, Node.POST_FLAG);
1498:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1499:       assertEquals(8, Node.FLAG_NO_THROWS);
1500:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1501:       assertEquals(40, Node.ORIGINALNAME_PROP);
1502:       assertEquals(29, Node.JSDOC_INFO_PROP);
1503:       assertEquals(39, Node.EMPTY_BLOCK);
1504:       assertEquals(30, Node.VAR_ARGS_NAME);
1505:       
1506:       node0.setType(46);
1507:       assertFalse(node0.equals((Object)node1));
1508:       assertFalse(node0.isTrue());
1509:       assertFalse(node0.isDebugger());
1510:       assertFalse(node0.isFunction());
1511:       assertFalse(node0.isVoid());
1512:       assertFalse(node0.isRegExp());
1513:       assertFalse(node0.isTry());
1514:       assertFalse(node0.isDefaultCase());
1515:       assertFalse(node0.isEmpty());
1516:       assertFalse(node0.isNE());
1517:       assertFalse(node0.isIf());
1518:       assertFalse(node0.isNull());
1519:       assertFalse(node0.isFor());
1520:       assertFalse(node0.isCall());
1521:       assertFalse(node0.isCatch());
1522:       assertFalse(node0.isName());
1523:       assertFalse(node0.isDelProp());
1524:       assertFalse(node0.isWhile());
1525:       assertFalse(node0.isThrow());
1526:       assertFalse(node0.isIn());
1527:       assertFalse(node0.isString());
1528:       assertFalse(node0.isSetterDef());
1529:       assertFalse(node0.isInc());
1530:       assertEquals((-1), node0.getSourcePosition());
1531:       assertFalse(node0.isContinue());
1532:       assertFalse(node0.isAnd());
1533:       assertFalse(node0.isCast());
1534:       assertFalse(node0.isFalse());
1535:       assertFalse(node0.isExprResult());
1536:       assertFalse(node0.isNot());
1537:       assertFalse(node0.isObjectLit());
1538:       assertEquals(46, node0.getType());
1539:       assertFalse(node0.hasOneChild());
1540:       assertFalse(node0.isScript());
1541:       assertFalse(node0.isGetProp());
1542:       assertFalse(node0.isComma());
1543:       assertFalse(node0.isTypeOf());
1544:       assertFalse(node0.isOr());
1545:       assertFalse(node0.isDec());
1546:       assertFalse(node0.isAssign());
1547:       assertFalse(node0.isThis());
1548:       assertFalse(node0.hasChildren());
1549:       assertFalse(node0.isReturn());
1550:       assertFalse(node0.hasMoreThanOneChild());
1551:       assertFalse(node0.isWith());
1552:       assertFalse(node0.isBreak());
1553:       assertEquals((-1), node0.getLineno());
1554:       assertFalse(node0.isInstanceOf());
1555:       assertFalse(node0.isGetElem());
1556:       assertEquals((-1), node0.getCharno());
1557:       assertFalse(node0.isSwitch());
1558:       assertFalse(node0.isVar());
1559:       assertFalse(node0.isBlock());
1560:       assertFalse(node0.isHook());
1561:       assertFalse(node0.isDo());
1562:       assertFalse(node0.isAdd());
1563:       assertFalse(node0.isNew());
1564:       assertFalse(node0.isCase());
1565:       assertFalse(node0.isParamList());
1566:       assertFalse(node0.isAssignAdd());
1567:       assertFalse(node0.isNumber());
1568:       assertFalse(node0.isGetterDef());
1569:       assertEquals(0, node0.getChildCount());
1570:       assertFalse(node0.isLabel());
1571:       assertFalse(node0.isStringKey());
1572:       assertFalse(node0.isLabelName());
1573:       assertFalse(node0.isArrayLit());
1574:       assertEquals(43, Node.IS_CONSTANT_NAME);
1575:       assertEquals(36, Node.QUOTED_PROP);
1576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1577:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1578:       assertEquals(53, Node.INPUT_ID);
1579:       assertEquals(55, Node.INFERRED_FUNCTION);
1580:       assertEquals(56, Node.CHANGE_TIME);
1581:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1582:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1583:       assertEquals(48, Node.DIRECTIVES);
1584:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1585:       assertEquals(37, Node.OPT_ARG_NAME);
1586:       assertEquals(12, Node.COLUMN_BITS);
1587:       assertEquals(32, Node.INCRDECR_PROP);
1588:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1589:       assertEquals(4095, Node.COLUMN_MASK);
1590:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1591:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1592:       assertEquals(57, Node.LAST_PROP);
1593:       assertEquals(1, Node.DECR_FLAG);
1594:       assertEquals(49, Node.DIRECT_EVAL);
1595:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1596:       assertEquals(57, Node.REFLECTED_OBJECT);
1597:       assertEquals(46, Node.IS_NAMESPACE);
1598:       assertEquals(52, Node.LENGTH);
1599:       assertEquals(50, Node.FREE_CALL);
1600:       assertEquals(54, Node.SLASH_V);
1601:       assertEquals(47, Node.IS_DISPATCHER);
1602:       assertEquals(2, Node.POST_FLAG);
1603:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1604:       assertEquals(8, Node.FLAG_NO_THROWS);
1605:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1606:       assertEquals(40, Node.ORIGINALNAME_PROP);
1607:       assertEquals(29, Node.JSDOC_INFO_PROP);
1608:       assertEquals(39, Node.EMPTY_BLOCK);
1609:       assertEquals(30, Node.VAR_ARGS_NAME);
1610:       
1611:       boolean boolean5 = node1.hasChildren();
1612:       assertFalse(node1.equals((Object)node0));
1613:       assertTrue(boolean5 == boolean1);
1614:       assertTrue(boolean5 == boolean2);
1615:       assertTrue(boolean5 == boolean4);
1616:       assertTrue(boolean5 == boolean0);
1617:       assertTrue(boolean5 == boolean3);
1618:       assertFalse(node1.isGetElem());
1619:       assertFalse(node1.isLabelName());
1620:       assertFalse(node1.isAssign());
1621:       assertFalse(node1.hasOneChild());
1622:       assertFalse(node1.isCast());
1623:       assertFalse(node1.isAssignAdd());
1624:       assertFalse(node1.isDec());
1625:       assertFalse(node1.isTypeOf());
1626:       assertFalse(node1.isReturn());
1627:       assertFalse(node1.isLabel());
1628:       assertFalse(node1.hasChildren());
1629:       assertFalse(node1.isDo());
1630:       assertFalse(node1.hasMoreThanOneChild());
1631:       assertFalse(node1.isWith());
1632:       assertFalse(node1.isInstanceOf());
1633:       assertFalse(node1.isExprResult());
1634:       assertFalse(node1.isOr());
1635:       assertFalse(node1.isAdd());
1636:       assertFalse(node1.isName());
1637:       assertFalse(node1.isFalse());
1638:       assertFalse(node1.isThrow());
1639:       assertFalse(node1.isCall());
1640:       assertFalse(node1.isSetterDef());
1641:       assertFalse(node1.isBreak());
1642:       assertFalse(node1.isGetProp());
1643:       assertEquals(0, node1.getType());
1644:       assertEquals(4, node1.getLineno());
1645:       assertFalse(node1.isComma());
1646:       assertEquals(38, node1.getCharno());
1647:       assertFalse(node1.isNot());
1648:       assertFalse(node1.isObjectLit());
1649:       assertFalse(node1.isWhile());
1650:       assertFalse(node1.isString());
1651:       assertFalse(node1.isContinue());
1652:       assertFalse(node1.isAnd());
1653:       assertFalse(node1.isDebugger());
1654:       assertFalse(node1.isFor());
1655:       assertFalse(node1.isEmpty());
1656:       assertFalse(node1.isIf());
1657:       assertFalse(node1.isDelProp());
1658:       assertFalse(node1.isArrayLit());
1659:       assertFalse(node1.isTry());
1660:       assertFalse(node1.isFunction());
1661:       assertFalse(node1.isRegExp());
1662:       assertFalse(node1.isCatch());
1663:       assertFalse(node1.isDefaultCase());
1664:       assertFalse(node1.isInc());
1665:       assertFalse(node1.isVoid());
1666:       assertFalse(node1.isIn());
1667:       assertFalse(node1.isNull());
1668:       assertFalse(node1.isNE());
1669:       assertFalse(node1.isTrue());
1670:       assertFalse(node1.isStringKey());
1671:       assertFalse(node1.isNew());
1672:       assertFalse(node1.isBlock());
1673:       assertFalse(node1.isHook());
1674:       assertFalse(node1.isVar());
1675:       assertEquals(0, node1.getChildCount());
1676:       assertFalse(node1.isThis());
1677:       assertFalse(node1.isCase());
1678:       assertFalse(node1.isScript());
1679:       assertFalse(node1.isParamList());
1680:       assertFalse(node1.isSwitch());
1681:       assertFalse(node1.isNumber());
1682:       assertFalse(node1.isGetterDef());
1683:       assertEquals(16422, node1.getSourcePosition());
1684:       assertFalse(boolean5);
1685:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1686:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1687:       assertEquals(47, Node.IS_DISPATCHER);
1688:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1689:       assertEquals(29, Node.JSDOC_INFO_PROP);
1690:       assertEquals(53, Node.INPUT_ID);
1691:       assertEquals(32, Node.INCRDECR_PROP);
1692:       assertEquals(55, Node.INFERRED_FUNCTION);
1693:       assertEquals(4095, Node.COLUMN_MASK);
1694:       assertEquals(12, Node.COLUMN_BITS);
1695:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1696:       assertEquals(36, Node.QUOTED_PROP);
1697:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1698:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1699:       assertEquals(56, Node.CHANGE_TIME);
1700:       assertEquals(49, Node.DIRECT_EVAL);
1701:       assertEquals(48, Node.DIRECTIVES);
1702:       assertEquals(37, Node.OPT_ARG_NAME);
1703:       assertEquals(40, Node.ORIGINALNAME_PROP);
1704:       assertEquals(57, Node.REFLECTED_OBJECT);
1705:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1706:       assertEquals(52, Node.LENGTH);
1707:       assertEquals(50, Node.FREE_CALL);
1708:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1709:       assertEquals(8, Node.FLAG_NO_THROWS);
1710:       assertEquals(39, Node.EMPTY_BLOCK);
1711:       assertEquals(57, Node.LAST_PROP);
1712:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1713:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1714:       assertEquals(1, Node.DECR_FLAG);
1715:       assertEquals(46, Node.IS_NAMESPACE);
1716:       assertEquals(30, Node.VAR_ARGS_NAME);
1717:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1718:       assertEquals(2, Node.POST_FLAG);
1719:       assertEquals(54, Node.SLASH_V);
1720:       assertEquals(43, Node.IS_CONSTANT_NAME);
1721:       
1722:       Node node2 = new Node((-1872), node1, (-264), 0);
1723:       assertFalse(node1.equals((Object)node0));
1724:       assertFalse(node2.equals((Object)node1));
1725:       assertFalse(node2.equals((Object)node0));
1726:       assertFalse(node1.isGetElem());
1727:       assertFalse(node1.isLabelName());
1728:       assertFalse(node1.isAssign());
1729:       assertFalse(node1.hasOneChild());
1730:       assertFalse(node1.isCast());
1731:       assertFalse(node1.isAssignAdd());
1732:       assertFalse(node1.isDec());
1733:       assertFalse(node1.isTypeOf());
1734:       assertFalse(node1.isReturn());
1735:       assertFalse(node1.isLabel());
1736:       assertFalse(node1.hasChildren());
1737:       assertFalse(node1.isDo());
1738:       assertFalse(node1.hasMoreThanOneChild());
1739:       assertFalse(node1.isWith());
1740:       assertFalse(node1.isInstanceOf());
1741:       assertFalse(node1.isExprResult());
1742:       assertFalse(node1.isOr());
1743:       assertFalse(node1.isAdd());
1744:       assertFalse(node1.isName());
1745:       assertFalse(node1.isFalse());
1746:       assertFalse(node1.isThrow());
1747:       assertFalse(node1.isCall());
1748:       assertFalse(node1.isSetterDef());
1749:       assertFalse(node1.isBreak());
1750:       assertFalse(node1.isGetProp());
1751:       assertEquals(0, node1.getType());
1752:       assertEquals(4, node1.getLineno());
1753:       assertFalse(node1.isComma());
1754:       assertEquals(38, node1.getCharno());
1755:       assertFalse(node1.isNot());
1756:       assertFalse(node1.isObjectLit());
1757:       assertFalse(node1.isWhile());
1758:       assertFalse(node1.isString());
1759:       assertFalse(node1.isContinue());
1760:       assertFalse(node1.isAnd());
1761:       assertFalse(node1.isDebugger());
1762:       assertFalse(node1.isFor());
1763:       assertFalse(node1.isEmpty());
1764:       assertFalse(node1.isIf());
1765:       assertFalse(node1.isDelProp());
1766:       assertFalse(node1.isArrayLit());
1767:       assertFalse(node1.isTry());
1768:       assertFalse(node1.isFunction());
1769:       assertFalse(node1.isRegExp());
1770:       assertFalse(node1.isCatch());
1771:       assertFalse(node1.isDefaultCase());
1772:       assertFalse(node1.isInc());
1773:       assertFalse(node1.isVoid());
1774:       assertFalse(node1.isIn());
1775:       assertFalse(node1.isNull());
1776:       assertFalse(node1.isNE());
1777:       assertFalse(node1.isTrue());
1778:       assertFalse(node1.isStringKey());
1779:       assertFalse(node1.isNew());
1780:       assertFalse(node1.isBlock());
1781:       assertFalse(node1.isHook());
1782:       assertFalse(node1.isVar());
1783:       assertEquals(0, node1.getChildCount());
1784:       assertFalse(node1.isThis());
1785:       assertFalse(node1.isCase());
1786:       assertFalse(node1.isScript());
1787:       assertFalse(node1.isParamList());
1788:       assertFalse(node1.isSwitch());
1789:       assertFalse(node1.isNumber());
1790:       assertFalse(node1.isGetterDef());
1791:       assertEquals(16422, node1.getSourcePosition());
1792:       assertFalse(node2.isCase());
1793:       assertEquals(1, node2.getChildCount());
1794:       assertEquals((-1), node2.getCharno());
1795:       assertFalse(node2.isInc());
1796:       assertFalse(node2.isGetterDef());
1797:       assertFalse(node2.isString());
1798:       assertFalse(node2.isIn());
1799:       assertFalse(node2.isEmpty());
1800:       assertFalse(node2.isDelProp());
1801:       assertTrue(node2.hasOneChild());
1802:       assertFalse(node2.isHook());
1803:       assertFalse(node2.isIf());
1804:       assertFalse(node2.isFor());
1805:       assertFalse(node2.isNE());
1806:       assertFalse(node2.isVoid());
1807:       assertFalse(node2.isThis());
1808:       assertFalse(node2.isRegExp());
1809:       assertFalse(node2.isComma());
1810:       assertFalse(node2.isBreak());
1811:       assertTrue(node2.hasChildren());
1812:       assertFalse(node2.isInstanceOf());
1813:       assertFalse(node2.isDefaultCase());
1814:       assertFalse(node2.isTrue());
1815:       assertFalse(node2.isTry());
1816:       assertFalse(node2.isScript());
1817:       assertFalse(node2.isArrayLit());
1818:       assertFalse(node2.isLabelName());
1819:       assertFalse(node2.isVar());
1820:       assertFalse(node2.isStringKey());
1821:       assertFalse(node2.isParamList());
1822:       assertFalse(node2.isSwitch());
1823:       assertFalse(node2.isLabel());
1824:       assertFalse(node2.isContinue());
1825:       assertFalse(node2.hasMoreThanOneChild());
1826:       assertFalse(node2.isDo());
1827:       assertFalse(node2.isWhile());
1828:       assertFalse(node2.isReturn());
1829:       assertFalse(node2.isAssignAdd());
1830:       assertEquals((-1), node2.getSourcePosition());
1831:       assertFalse(node2.isOr());
1832:       assertFalse(node2.isNew());
1833:       assertFalse(node2.isNumber());
1834:       assertFalse(node2.isAdd());
1835:       assertFalse(node2.isCall());
1836:       assertFalse(node2.isGetElem());
1837:       assertFalse(node2.isName());
1838:       assertFalse(node2.isAssign());
1839:       assertFalse(node2.isNull());
1840:       assertFalse(node2.isBlock());
1841:       assertFalse(node2.isExprResult());
1842:       assertFalse(node2.isTypeOf());
1843:       assertEquals((-1), node2.getLineno());
1844:       assertFalse(node2.isDec());
1845:       assertFalse(node2.isWith());
1846:       assertFalse(node2.isCatch());
1847:       assertFalse(node2.isObjectLit());
1848:       assertFalse(node2.isAnd());
1849:       assertFalse(node2.isNot());
1850:       assertFalse(node2.isDebugger());
1851:       assertFalse(node2.isSetterDef());
1852:       assertFalse(node2.isGetProp());
1853:       assertEquals((-1872), node2.getType());
1854:       assertFalse(node2.isFalse());
1855:       assertFalse(node2.isThrow());
1856:       assertFalse(node2.isFunction());
1857:       assertFalse(node2.isCast());
1858:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1859:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1860:       assertEquals(47, Node.IS_DISPATCHER);
1861:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1862:       assertEquals(29, Node.JSDOC_INFO_PROP);
1863:       assertEquals(53, Node.INPUT_ID);
1864:       assertEquals(32, Node.INCRDECR_PROP);
1865:       assertEquals(55, Node.INFERRED_FUNCTION);
1866:       assertEquals(4095, Node.COLUMN_MASK);
1867:       assertEquals(12, Node.COLUMN_BITS);
1868:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1869:       assertEquals(36, Node.QUOTED_PROP);
1870:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1871:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1872:       assertEquals(56, Node.CHANGE_TIME);
1873:       assertEquals(49, Node.DIRECT_EVAL);
1874:       assertEquals(48, Node.DIRECTIVES);
1875:       assertEquals(37, Node.OPT_ARG_NAME);
1876:       assertEquals(40, Node.ORIGINALNAME_PROP);
1877:       assertEquals(57, Node.REFLECTED_OBJECT);
1878:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1879:       assertEquals(52, Node.LENGTH);
1880:       assertEquals(50, Node.FREE_CALL);
1881:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1882:       assertEquals(8, Node.FLAG_NO_THROWS);
1883:       assertEquals(39, Node.EMPTY_BLOCK);
1884:       assertEquals(57, Node.LAST_PROP);
1885:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1886:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1887:       assertEquals(1, Node.DECR_FLAG);
1888:       assertEquals(46, Node.IS_NAMESPACE);
1889:       assertEquals(30, Node.VAR_ARGS_NAME);
1890:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1891:       assertEquals(2, Node.POST_FLAG);
1892:       assertEquals(54, Node.SLASH_V);
1893:       assertEquals(43, Node.IS_CONSTANT_NAME);
1894:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1895:       assertEquals(32, Node.INCRDECR_PROP);
1896:       assertEquals(1, Node.DECR_FLAG);
1897:       assertEquals(56, Node.CHANGE_TIME);
1898:       assertEquals(37, Node.OPT_ARG_NAME);
1899:       assertEquals(49, Node.DIRECT_EVAL);
1900:       assertEquals(46, Node.IS_NAMESPACE);
1901:       assertEquals(54, Node.SLASH_V);
1902:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1903:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1904:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1905:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1906:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1907:       assertEquals(12, Node.COLUMN_BITS);
1908:       assertEquals(4095, Node.COLUMN_MASK);
1909:       assertEquals(55, Node.INFERRED_FUNCTION);
1910:       assertEquals(39, Node.EMPTY_BLOCK);
1911:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1912:       assertEquals(43, Node.IS_CONSTANT_NAME);
1913:       assertEquals(36, Node.QUOTED_PROP);
1914:       assertEquals(8, Node.FLAG_NO_THROWS);
1915:       assertEquals(48, Node.DIRECTIVES);
1916:       assertEquals(50, Node.FREE_CALL);
1917:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1918:       assertEquals(57, Node.REFLECTED_OBJECT);
1919:       assertEquals(52, Node.LENGTH);
1920:       assertEquals(53, Node.INPUT_ID);
1921:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1922:       assertEquals(40, Node.ORIGINALNAME_PROP);
1923:       assertEquals(29, Node.JSDOC_INFO_PROP);
1924:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1925:       assertEquals(47, Node.IS_DISPATCHER);
1926:       assertEquals(57, Node.LAST_PROP);
1927:       assertEquals(2, Node.POST_FLAG);
1928:       assertEquals(30, Node.VAR_ARGS_NAME);
1929:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1930:       assertNotNull(node2);
1931:       
1932:       Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeTypeAwareEqualsImpl(node2);
1933:       assertFalse(node1.equals((Object)node0));
1934:       assertFalse(node1.equals((Object)node2));
1935:       assertFalse(node2.equals((Object)node1));
1936:       assertFalse(node2.equals((Object)node0));
1937:       assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
1938:       assertFalse(node1.isGetElem());
1939:       assertFalse(node1.isLabelName());
1940:       assertFalse(node1.isAssign());
1941:       assertFalse(node1.hasOneChild());
1942:       assertFalse(node1.isCast());
1943:       assertFalse(node1.isAssignAdd());
1944:       assertFalse(node1.isDec());
1945:       assertFalse(node1.isTypeOf());
1946:       assertFalse(node1.isReturn());
1947:       assertFalse(node1.isLabel());
1948:       assertFalse(node1.hasChildren());
1949:       assertFalse(node1.isDo());
1950:       assertFalse(node1.hasMoreThanOneChild());
1951:       assertFalse(node1.isWith());
1952:       assertFalse(node1.isInstanceOf());
1953:       assertFalse(node1.isExprResult());
1954:       assertFalse(node1.isOr());
1955:       assertFalse(node1.isAdd());
1956:       assertFalse(node1.isName());
1957:       assertFalse(node1.isFalse());
1958:       assertFalse(node1.isThrow());
1959:       assertFalse(node1.isCall());
1960:       assertFalse(node1.isSetterDef());
1961:       assertFalse(node1.isBreak());
1962:       assertFalse(node1.isGetProp());
1963:       assertEquals(0, node1.getType());
1964:       assertEquals(4, node1.getLineno());
1965:       assertFalse(node1.isComma());
1966:       assertEquals(38, node1.getCharno());
1967:       assertFalse(node1.isNot());
1968:       assertFalse(node1.isObjectLit());
1969:       assertFalse(node1.isWhile());
1970:       assertFalse(node1.isString());
1971:       assertFalse(node1.isContinue());
1972:       assertFalse(node1.isAnd());
1973:       assertFalse(node1.isDebugger());
1974:       assertFalse(node1.isFor());
1975:       assertFalse(node1.isEmpty());
1976:       assertFalse(node1.isIf());
1977:       assertFalse(node1.isDelProp());
1978:       assertFalse(node1.isArrayLit());
1979:       assertFalse(node1.isTry());
1980:       assertFalse(node1.isFunction());
1981:       assertFalse(node1.isRegExp());
1982:       assertFalse(node1.isCatch());
1983:       assertFalse(node1.isDefaultCase());
1984:       assertFalse(node1.isInc());
1985:       assertFalse(node1.isVoid());
1986:       assertFalse(node1.isIn());
1987:       assertFalse(node1.isNull());
1988:       assertFalse(node1.isNE());
1989:       assertFalse(node1.isTrue());
1990:       assertFalse(node1.isStringKey());
1991:       assertFalse(node1.isNew());
1992:       assertFalse(node1.isBlock());
1993:       assertFalse(node1.isHook());
1994:       assertFalse(node1.isVar());
1995:       assertEquals(0, node1.getChildCount());
1996:       assertFalse(node1.isThis());
1997:       assertFalse(node1.isCase());
1998:       assertFalse(node1.isScript());
1999:       assertFalse(node1.isParamList());
2000:       assertFalse(node1.isSwitch());
2001:       assertFalse(node1.isNumber());
2002:       assertFalse(node1.isGetterDef());
2003:       assertEquals(16422, node1.getSourcePosition());
2004:       assertFalse(node2.isCase());
2005:       assertEquals(1, node2.getChildCount());
2006:       assertEquals((-1), node2.getCharno());
2007:       assertFalse(node2.isInc());
2008:       assertFalse(node2.isGetterDef());
2009:       assertFalse(node2.isString());
2010:       assertFalse(node2.isIn());
2011:       assertFalse(node2.isEmpty());
2012:       assertFalse(node2.isDelProp());
2013:       assertTrue(node2.hasOneChild());
2014:       assertFalse(node2.isHook());
2015:       assertFalse(node2.isIf());
2016:       assertFalse(node2.isFor());
2017:       assertFalse(node2.isNE());
2018:       assertFalse(node2.isVoid());
2019:       assertFalse(node2.isThis());
2020:       assertFalse(node2.isRegExp());
2021:       assertFalse(node2.isComma());
2022:       assertFalse(node2.isBreak());
2023:       assertTrue(node2.hasChildren());
2024:       assertFalse(node2.isInstanceOf());
2025:       assertFalse(node2.isDefaultCase());
2026:       assertFalse(node2.isTrue());
2027:       assertFalse(node2.isTry());
2028:       assertFalse(node2.isScript());
2029:       assertFalse(node2.isArrayLit());
2030:       assertFalse(node2.isLabelName());
2031:       assertFalse(node2.isVar());
2032:       assertFalse(node2.isStringKey());
2033:       assertFalse(node2.isParamList());
2034:       assertFalse(node2.isSwitch());
2035:       assertFalse(node2.isLabel());
2036:       assertFalse(node2.isContinue());
2037:       assertFalse(node2.hasMoreThanOneChild());
2038:       assertFalse(node2.isDo());
2039:       assertFalse(node2.isWhile());
2040:       assertFalse(node2.isReturn());
2041:       assertFalse(node2.isAssignAdd());
2042:       assertEquals((-1), node2.getSourcePosition());
2043:       assertFalse(node2.isOr());
2044:       assertFalse(node2.isNew());
2045:       assertFalse(node2.isNumber());
2046:       assertFalse(node2.isAdd());
2047:       assertFalse(node2.isCall());
2048:       assertFalse(node2.isGetElem());
2049:       assertFalse(node2.isName());
2050:       assertFalse(node2.isAssign());
2051:       assertFalse(node2.isNull());
2052:       assertFalse(node2.isBlock());
2053:       assertFalse(node2.isExprResult());
2054:       assertFalse(node2.isTypeOf());
2055:       assertEquals((-1), node2.getLineno());
2056:       assertFalse(node2.isDec());
2057:       assertFalse(node2.isWith());
2058:       assertFalse(node2.isCatch());
2059:       assertFalse(node2.isObjectLit());
2060:       assertFalse(node2.isAnd());
2061:       assertFalse(node2.isNot());
2062:       assertFalse(node2.isDebugger());
2063:       assertFalse(node2.isSetterDef());
2064:       assertFalse(node2.isGetProp());
2065:       assertEquals((-1872), node2.getType());
2066:       assertFalse(node2.isFalse());
2067:       assertFalse(node2.isThrow());
2068:       assertFalse(node2.isFunction());
2069:       assertFalse(node2.isCast());
2070:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2071:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2072:       assertEquals(47, Node.IS_DISPATCHER);
2073:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2074:       assertEquals(29, Node.JSDOC_INFO_PROP);
2075:       assertEquals(53, Node.INPUT_ID);
2076:       assertEquals(32, Node.INCRDECR_PROP);
2077:       assertEquals(55, Node.INFERRED_FUNCTION);
2078:       assertEquals(4095, Node.COLUMN_MASK);
2079:       assertEquals(12, Node.COLUMN_BITS);
2080:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2081:       assertEquals(36, Node.QUOTED_PROP);
2082:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2083:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2084:       assertEquals(56, Node.CHANGE_TIME);
2085:       assertEquals(49, Node.DIRECT_EVAL);
2086:       assertEquals(48, Node.DIRECTIVES);
2087:       assertEquals(37, Node.OPT_ARG_NAME);
2088:       assertEquals(40, Node.ORIGINALNAME_PROP);
2089:       assertEquals(57, Node.REFLECTED_OBJECT);
2090:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2091:       assertEquals(52, Node.LENGTH);
2092:       assertEquals(50, Node.FREE_CALL);
2093:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2094:       assertEquals(8, Node.FLAG_NO_THROWS);
2095:       assertEquals(39, Node.EMPTY_BLOCK);
2096:       assertEquals(57, Node.LAST_PROP);
2097:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2098:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2099:       assertEquals(1, Node.DECR_FLAG);
2100:       assertEquals(46, Node.IS_NAMESPACE);
2101:       assertEquals(30, Node.VAR_ARGS_NAME);
2102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2103:       assertEquals(2, Node.POST_FLAG);
2104:       assertEquals(54, Node.SLASH_V);
2105:       assertEquals(43, Node.IS_CONSTANT_NAME);
2106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2107:       assertEquals(32, Node.INCRDECR_PROP);
2108:       assertEquals(1, Node.DECR_FLAG);
2109:       assertEquals(56, Node.CHANGE_TIME);
2110:       assertEquals(37, Node.OPT_ARG_NAME);
2111:       assertEquals(49, Node.DIRECT_EVAL);
2112:       assertEquals(46, Node.IS_NAMESPACE);
2113:       assertEquals(54, Node.SLASH_V);
2114:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2118:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2119:       assertEquals(12, Node.COLUMN_BITS);
2120:       assertEquals(4095, Node.COLUMN_MASK);
2121:       assertEquals(55, Node.INFERRED_FUNCTION);
2122:       assertEquals(39, Node.EMPTY_BLOCK);
2123:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2124:       assertEquals(43, Node.IS_CONSTANT_NAME);
2125:       assertEquals(36, Node.QUOTED_PROP);
2126:       assertEquals(8, Node.FLAG_NO_THROWS);
2127:       assertEquals(48, Node.DIRECTIVES);
2128:       assertEquals(50, Node.FREE_CALL);
2129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2130:       assertEquals(57, Node.REFLECTED_OBJECT);
2131:       assertEquals(52, Node.LENGTH);
2132:       assertEquals(53, Node.INPUT_ID);
2133:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2134:       assertEquals(40, Node.ORIGINALNAME_PROP);
2135:       assertEquals(29, Node.JSDOC_INFO_PROP);
2136:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2137:       assertEquals(47, Node.IS_DISPATCHER);
2138:       assertEquals(57, Node.LAST_PROP);
2139:       assertEquals(2, Node.POST_FLAG);
2140:       assertEquals(30, Node.VAR_ARGS_NAME);
2141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2142:       assertNotNull(node_NodeMismatch1);
2143:       assertNotSame(node_NodeMismatch1, node_NodeMismatch0);
2144:       
2145:       Node node3 = node1.srcrefTree(node2);
2146:       assertFalse(node1.equals((Object)node0));
2147:       assertFalse(node1.equals((Object)node2));
2148:       assertFalse(node2.equals((Object)node1));
2149:       assertFalse(node2.equals((Object)node0));
2150:       assertFalse(node3.equals((Object)node0));
2151:       assertFalse(node3.equals((Object)node2));
2152:       assertFalse(node1.isGetElem());
2153:       assertFalse(node1.isLabelName());
2154:       assertFalse(node1.isAssign());
2155:       assertFalse(node1.hasOneChild());
2156:       assertFalse(node1.isCast());
2157:       assertFalse(node1.isAssignAdd());
2158:       assertFalse(node1.isDec());
2159:       assertFalse(node1.isTypeOf());
2160:       assertFalse(node1.isReturn());
2161:       assertFalse(node1.isLabel());
2162:       assertFalse(node1.hasChildren());
2163:       assertFalse(node1.isDo());
2164:       assertFalse(node1.hasMoreThanOneChild());
2165:       assertFalse(node1.isWith());
2166:       assertFalse(node1.isInstanceOf());
2167:       assertEquals((-1), node1.getLineno());
2168:       assertFalse(node1.isExprResult());
2169:       assertFalse(node1.isOr());
2170:       assertFalse(node1.isAdd());
2171:       assertFalse(node1.isName());
2172:       assertFalse(node1.isFalse());
2173:       assertFalse(node1.isThrow());
2174:       assertFalse(node1.isCall());
2175:       assertFalse(node1.isSetterDef());
2176:       assertFalse(node1.isBreak());
2177:       assertFalse(node1.isGetProp());
2178:       assertEquals(0, node1.getType());
2179:       assertFalse(node1.isComma());
2180:       assertFalse(node1.isNot());
2181:       assertFalse(node1.isObjectLit());
2182:       assertFalse(node1.isWhile());
2183:       assertFalse(node1.isString());
2184:       assertFalse(node1.isContinue());
2185:       assertFalse(node1.isAnd());
2186:       assertEquals((-1), node1.getSourcePosition());
2187:       assertFalse(node1.isDebugger());
2188:       assertFalse(node1.isFor());
2189:       assertFalse(node1.isEmpty());
2190:       assertFalse(node1.isIf());
2191:       assertFalse(node1.isDelProp());
2192:       assertFalse(node1.isArrayLit());
2193:       assertFalse(node1.isTry());
2194:       assertFalse(node1.isFunction());
2195:       assertFalse(node1.isRegExp());
2196:       assertFalse(node1.isCatch());
2197:       assertFalse(node1.isDefaultCase());
2198:       assertFalse(node1.isInc());
2199:       assertFalse(node1.isVoid());
2200:       assertFalse(node1.isIn());
2201:       assertFalse(node1.isNull());
2202:       assertFalse(node1.isNE());
2203:       assertFalse(node1.isTrue());
2204:       assertFalse(node1.isStringKey());
2205:       assertFalse(node1.isNew());
2206:       assertFalse(node1.isBlock());
2207:       assertFalse(node1.isHook());
2208:       assertFalse(node1.isVar());
2209:       assertEquals(0, node1.getChildCount());
2210:       assertFalse(node1.isThis());
2211:       assertFalse(node1.isCase());
2212:       assertFalse(node1.isScript());
2213:       assertFalse(node1.isParamList());
2214:       assertFalse(node1.isSwitch());
2215:       assertFalse(node1.isNumber());
2216:       assertFalse(node1.isGetterDef());
2217:       assertEquals((-1), node1.getCharno());
2218:       assertFalse(node2.isCase());
2219:       assertEquals(1, node2.getChildCount());
2220:       assertEquals((-1), node2.getCharno());
2221:       assertFalse(node2.isInc());
2222:       assertFalse(node2.isGetterDef());
2223:       assertFalse(node2.isString());
2224:       assertFalse(node2.isIn());
2225:       assertFalse(node2.isEmpty());
2226:       assertFalse(node2.isDelProp());
2227:       assertTrue(node2.hasOneChild());
2228:       assertFalse(node2.isHook());
2229:       assertFalse(node2.isIf());
2230:       assertFalse(node2.isFor());
2231:       assertFalse(node2.isNE());
2232:       assertFalse(node2.isVoid());
2233:       assertFalse(node2.isThis());
2234:       assertFalse(node2.isRegExp());
2235:       assertFalse(node2.isComma());
2236:       assertFalse(node2.isBreak());
2237:       assertTrue(node2.hasChildren());
2238:       assertFalse(node2.isInstanceOf());
2239:       assertFalse(node2.isDefaultCase());
2240:       assertFalse(node2.isTrue());
2241:       assertFalse(node2.isTry());
2242:       assertFalse(node2.isScript());
2243:       assertFalse(node2.isArrayLit());
2244:       assertFalse(node2.isLabelName());
2245:       assertFalse(node2.isVar());
2246:       assertFalse(node2.isStringKey());
2247:       assertFalse(node2.isParamList());
2248:       assertFalse(node2.isSwitch());
2249:       assertFalse(node2.isLabel());
2250:       assertFalse(node2.isContinue());
2251:       assertFalse(node2.hasMoreThanOneChild());
2252:       assertFalse(node2.isDo());
2253:       assertFalse(node2.isWhile());
2254:       assertFalse(node2.isReturn());
2255:       assertFalse(node2.isAssignAdd());
2256:       assertEquals((-1), node2.getSourcePosition());
2257:       assertFalse(node2.isOr());
2258:       assertFalse(node2.isNew());
2259:       assertFalse(node2.isNumber());
2260:       assertFalse(node2.isAdd());
2261:       assertFalse(node2.isCall());
2262:       assertFalse(node2.isGetElem());
2263:       assertFalse(node2.isName());
2264:       assertFalse(node2.isAssign());
2265:       assertFalse(node2.isNull());
2266:       assertFalse(node2.isBlock());
2267:       assertFalse(node2.isExprResult());
2268:       assertFalse(node2.isTypeOf());
2269:       assertEquals((-1), node2.getLineno());
2270:       assertFalse(node2.isDec());
2271:       assertFalse(node2.isWith());
2272:       assertFalse(node2.isCatch());
2273:       assertFalse(node2.isObjectLit());
2274:       assertFalse(node2.isAnd());
2275:       assertFalse(node2.isNot());
2276:       assertFalse(node2.isDebugger());
2277:       assertFalse(node2.isSetterDef());
2278:       assertFalse(node2.isGetProp());
2279:       assertEquals((-1872), node2.getType());
2280:       assertFalse(node2.isFalse());
2281:       assertFalse(node2.isThrow());
2282:       assertFalse(node2.isFunction());
2283:       assertFalse(node2.isCast());
2284:       assertFalse(node3.isContinue());
2285:       assertFalse(node3.hasMoreThanOneChild());
2286:       assertFalse(node3.isDo());
2287:       assertFalse(node3.isWhile());
2288:       assertFalse(node3.isAssignAdd());
2289:       assertFalse(node3.isReturn());
2290:       assertFalse(node3.isNew());
2291:       assertEquals((-1), node3.getSourcePosition());
2292:       assertFalse(node3.isOr());
2293:       assertFalse(node3.isNumber());
2294:       assertFalse(node3.isAdd());
2295:       assertFalse(node3.isCall());
2296:       assertFalse(node3.isName());
2297:       assertFalse(node3.hasOneChild());
2298:       assertFalse(node3.isAssign());
2299:       assertFalse(node3.hasChildren());
2300:       assertFalse(node3.isNull());
2301:       assertFalse(node3.isBlock());
2302:       assertFalse(node3.isExprResult());
2303:       assertFalse(node3.isTypeOf());
2304:       assertFalse(node3.isDec());
2305:       assertEquals((-1), node3.getLineno());
2306:       assertFalse(node3.isWith());
2307:       assertFalse(node3.isGetElem());
2308:       assertFalse(node3.isCatch());
2309:       assertEquals(0, node3.getChildCount());
2310:       assertFalse(node3.isDefaultCase());
2311:       assertFalse(node3.isTrue());
2312:       assertFalse(node3.isTry());
2313:       assertFalse(node3.isScript());
2314:       assertFalse(node3.isArrayLit());
2315:       assertFalse(node3.isLabelName());
2316:       assertFalse(node3.isStringKey());
2317:       assertFalse(node3.isVar());
2318:       assertFalse(node3.isParamList());
2319:       assertFalse(node3.isSwitch());
2320:       assertFalse(node3.isLabel());
2321:       assertFalse(node3.isCase());
2322:       assertFalse(node3.isInc());
2323:       assertEquals((-1), node3.getCharno());
2324:       assertFalse(node3.isGetterDef());
2325:       assertFalse(node3.isString());
2326:       assertFalse(node3.isIn());
2327:       assertFalse(node3.isEmpty());
2328:       assertFalse(node3.isDelProp());
2329:       assertFalse(node3.isHook());
2330:       assertFalse(node3.isIf());
2331:       assertFalse(node3.isFor());
2332:       assertFalse(node3.isNE());
2333:       assertFalse(node3.isVoid());
2334:       assertFalse(node3.isThis());
2335:       assertFalse(node3.isRegExp());
2336:       assertFalse(node3.isComma());
2337:       assertFalse(node3.isBreak());
2338:       assertEquals(0, node3.getType());
2339:       assertFalse(node3.isInstanceOf());
2340:       assertFalse(node3.isObjectLit());
2341:       assertFalse(node3.isAnd());
2342:       assertFalse(node3.isNot());
2343:       assertFalse(node3.isDebugger());
2344:       assertFalse(node3.isSetterDef());
2345:       assertFalse(node3.isGetProp());
2346:       assertFalse(node3.isFalse());
2347:       assertFalse(node3.isThrow());
2348:       assertFalse(node3.isFunction());
2349:       assertFalse(node3.isCast());
2350:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2351:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2352:       assertEquals(47, Node.IS_DISPATCHER);
2353:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2354:       assertEquals(29, Node.JSDOC_INFO_PROP);
2355:       assertEquals(53, Node.INPUT_ID);
2356:       assertEquals(32, Node.INCRDECR_PROP);
2357:       assertEquals(55, Node.INFERRED_FUNCTION);
2358:       assertEquals(4095, Node.COLUMN_MASK);
2359:       assertEquals(12, Node.COLUMN_BITS);
2360:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2361:       assertEquals(36, Node.QUOTED_PROP);
2362:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2363:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2364:       assertEquals(56, Node.CHANGE_TIME);
2365:       assertEquals(49, Node.DIRECT_EVAL);
2366:       assertEquals(48, Node.DIRECTIVES);
2367:       assertEquals(37, Node.OPT_ARG_NAME);
2368:       assertEquals(40, Node.ORIGINALNAME_PROP);
2369:       assertEquals(57, Node.REFLECTED_OBJECT);
2370:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2371:       assertEquals(52, Node.LENGTH);
2372:       assertEquals(50, Node.FREE_CALL);
2373:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2374:       assertEquals(8, Node.FLAG_NO_THROWS);
2375:       assertEquals(39, Node.EMPTY_BLOCK);
2376:       assertEquals(57, Node.LAST_PROP);
2377:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2378:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2379:       assertEquals(1, Node.DECR_FLAG);
2380:       assertEquals(46, Node.IS_NAMESPACE);
2381:       assertEquals(30, Node.VAR_ARGS_NAME);
2382:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2383:       assertEquals(2, Node.POST_FLAG);
2384:       assertEquals(54, Node.SLASH_V);
2385:       assertEquals(43, Node.IS_CONSTANT_NAME);
2386:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2387:       assertEquals(32, Node.INCRDECR_PROP);
2388:       assertEquals(1, Node.DECR_FLAG);
2389:       assertEquals(56, Node.CHANGE_TIME);
2390:       assertEquals(37, Node.OPT_ARG_NAME);
2391:       assertEquals(49, Node.DIRECT_EVAL);
2392:       assertEquals(46, Node.IS_NAMESPACE);
2393:       assertEquals(54, Node.SLASH_V);
2394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2396:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2397:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2398:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2399:       assertEquals(12, Node.COLUMN_BITS);
2400:       assertEquals(4095, Node.COLUMN_MASK);
2401:       assertEquals(55, Node.INFERRED_FUNCTION);
2402:       assertEquals(39, Node.EMPTY_BLOCK);
2403:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2404:       assertEquals(43, Node.IS_CONSTANT_NAME);
2405:       assertEquals(36, Node.QUOTED_PROP);
2406:       assertEquals(8, Node.FLAG_NO_THROWS);
2407:       assertEquals(48, Node.DIRECTIVES);
2408:       assertEquals(50, Node.FREE_CALL);
2409:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2410:       assertEquals(57, Node.REFLECTED_OBJECT);
2411:       assertEquals(52, Node.LENGTH);
2412:       assertEquals(53, Node.INPUT_ID);
2413:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2414:       assertEquals(40, Node.ORIGINALNAME_PROP);
2415:       assertEquals(29, Node.JSDOC_INFO_PROP);
2416:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2417:       assertEquals(47, Node.IS_DISPATCHER);
2418:       assertEquals(57, Node.LAST_PROP);
2419:       assertEquals(2, Node.POST_FLAG);
2420:       assertEquals(30, Node.VAR_ARGS_NAME);
2421:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2423:       assertEquals(32, Node.INCRDECR_PROP);
2424:       assertEquals(1, Node.DECR_FLAG);
2425:       assertEquals(37, Node.OPT_ARG_NAME);
2426:       assertEquals(56, Node.CHANGE_TIME);
2427:       assertEquals(49, Node.DIRECT_EVAL);
2428:       assertEquals(46, Node.IS_NAMESPACE);
2429:       assertEquals(54, Node.SLASH_V);
2430:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2431:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2432:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2433:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2434:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2435:       assertEquals(12, Node.COLUMN_BITS);
2436:       assertEquals(4095, Node.COLUMN_MASK);
2437:       assertEquals(48, Node.DIRECTIVES);
2438:       assertEquals(55, Node.INFERRED_FUNCTION);
2439:       assertEquals(39, Node.EMPTY_BLOCK);
2440:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2441:       assertEquals(43, Node.IS_CONSTANT_NAME);
2442:       assertEquals(36, Node.QUOTED_PROP);
2443:       assertEquals(8, Node.FLAG_NO_THROWS);
2444:       assertEquals(50, Node.FREE_CALL);
2445:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2446:       assertEquals(57, Node.REFLECTED_OBJECT);
2447:       assertEquals(52, Node.LENGTH);
2448:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2449:       assertEquals(40, Node.ORIGINALNAME_PROP);
2450:       assertEquals(29, Node.JSDOC_INFO_PROP);
2451:       assertEquals(53, Node.INPUT_ID);
2452:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2453:       assertEquals(57, Node.LAST_PROP);
2454:       assertEquals(47, Node.IS_DISPATCHER);
2455:       assertEquals(30, Node.VAR_ARGS_NAME);
2456:       assertEquals(2, Node.POST_FLAG);
2457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2458:       assertNotNull(node3);
2459:       assertSame(node1, node3);
2460:       assertSame(node3, node1);
2461:   }
2462: }
RegularFileObject[/tmp/EvoSuite_52_1629222875687/com/google/javascript/rhino/Node_52_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:36 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_52_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_52_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.common.collect.Iterables",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.common.collect.AbstractMultimap$Values",
132:       "com.google.javascript.rhino.jstype.ProxyObjectType",
133:       "com.google.common.collect.Sets$SetView",
134:       "com.google.common.collect.RegularImmutableAsList",
135:       "com.google.javascript.rhino.jstype.TemplateType",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMultimap$Entries",
190:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
191:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
192:       "com.google.javascript.rhino.jstype.EnumElementType",
193:       "com.google.javascript.rhino.jstype.UnionType",
194:       "com.google.common.base.Objects",
195:       "com.google.javascript.rhino.Node$NumberNode",
196:       "com.google.common.collect.SingletonImmutableList",
197:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
198:       "com.google.common.collect.ImmutableCollection$Builder",
199:       "com.google.javascript.rhino.jstype.StaticSlot",
200:       "com.google.common.collect.Iterators$6",
201:       "com.google.common.collect.BiMap",
202:       "com.google.common.collect.Iterators$7",
203:       "com.google.common.collect.AbstractSetMultimap",
204:       "com.google.common.base.Function",
205:       "com.google.common.collect.ImmutableSet",
206:       "com.google.common.collect.Lists$AbstractListWrapper",
207:       "com.google.common.collect.ImmutableMap",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.Maps$1",
211:       "com.google.javascript.rhino.jstype.EnumType",
212:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.Multimaps$Entries",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
236:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
237:       "com.google.common.collect.ImmutableList",
238:       "com.google.common.collect.SingletonImmutableBiMap",
239:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
240:       "com.google.javascript.rhino.jstype.StringType",
241:       "com.google.javascript.rhino.Node$AbstractPropListItem",
242:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
243:       "com.google.javascript.rhino.jstype.TemplatizedType",
244:       "com.google.javascript.rhino.jstype.Visitor",
245:       "com.google.javascript.rhino.jstype.NoResolvedType",
246:       "com.google.javascript.rhino.jstype.JSTypeNative",
247:       "com.google.javascript.rhino.jstype.AllType",
248:       "com.google.common.collect.Maps",
249:       "com.google.common.collect.SetMultimap",
250:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
251:       "com.google.common.collect.Maps$EntryTransformer",
252:       "com.google.javascript.rhino.JSTypeExpression",
253:       "com.google.common.collect.Iterators$MergingIterator"
254:     );
255:   } 
256: 
257:   private static void resetClasses() {
258:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_52_tmp__ESTest_scaffolding.class.getClassLoader()); 
259: 
260:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
261:       "com.google.javascript.rhino.Node",
262:       "com.google.javascript.rhino.Node$NumberNode",
263:       "com.google.javascript.rhino.Node$StringNode",
264:       "com.google.javascript.rhino.Node$AbstractPropListItem",
265:       "com.google.javascript.rhino.Node$ObjectPropListItem",
266:       "com.google.javascript.rhino.Node$IntPropListItem",
267:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
268:       "com.google.javascript.rhino.Node$AncestorIterable",
269:       "com.google.javascript.rhino.Node$NodeMismatch",
270:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
271:       "com.google.javascript.rhino.Node$SideEffectFlags",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.Token",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.base.Objects",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
352:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.common.collect.AbstractIndexedListIterator",
362:       "com.google.common.collect.Iterators$11",
363:       "com.google.javascript.rhino.Node$AncestorIterable$1",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.InputId",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.javascript.rhino.JSTypeExpression",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.Sets$ImprovedAbstractSet",
375:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
376:       "com.google.common.collect.Hashing",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
378:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
379:       "com.google.common.collect.Platform"
380:     );
381:   }
382: }

[MASTER] 17:54:36.526 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);

Node node1 = Node.newString(0, "", 4, 38);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getType());
assertEquals(4, node1.getLineno());
assertFalse(node1.isComma());
assertEquals(38, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(16422, node1.getSourcePosition());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node1);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getType());
assertEquals(4, node1.getLineno());
assertFalse(node1.isComma());
assertEquals(38, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(16422, node1.getSourcePosition());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node_NodeMismatch0);

boolean boolean0 = node_NodeMismatch0.equals("");
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getType());
assertEquals(4, node1.getLineno());
assertFalse(node1.isComma());
assertEquals(38, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(16422, node1.getSourcePosition());
assertFalse(boolean0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Set<String> set0 = node1.getDirectives();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getType());
assertEquals(4, node1.getLineno());
assertFalse(node1.isComma());
assertEquals(38, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(16422, node1.getSourcePosition());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNull(set0);

boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getType());
assertEquals(4, node1.getLineno());
assertFalse(node1.isComma());
assertEquals(38, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(16422, node1.getSourcePosition());
assertFalse(boolean1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

boolean boolean2 = node1.isVarArgs();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getType());
assertEquals(4, node1.getLineno());
assertFalse(node1.isComma());
assertEquals(38, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(16422, node1.getSourcePosition());
assertFalse(boolean2);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

boolean boolean3 = node0.isIf();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(boolean3);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean4 = node1.isVoid();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getType());
assertEquals(4, node1.getLineno());
assertFalse(node1.isComma());
assertEquals(38, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(16422, node1.getSourcePosition());
assertFalse(boolean4);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

node0.setInputId((InputId) null);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);

node0.setType(46);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(46, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean5 = node1.hasChildren();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getType());
assertEquals(4, node1.getLineno());
assertFalse(node1.isComma());
assertEquals(38, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(16422, node1.getSourcePosition());
assertFalse(boolean5);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node2 = new Node((-1872), node1, (-264), 0);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getType());
assertEquals(4, node1.getLineno());
assertFalse(node1.isComma());
assertEquals(38, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node2.isCase());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertTrue(node2.hasChildren());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isNumber());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isAssign());
assertFalse(node2.isNull());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertEquals((-1872), node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node2);

Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeTypeAwareEqualsImpl(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getType());
assertEquals(4, node1.getLineno());
assertFalse(node1.isComma());
assertEquals(38, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node2.isCase());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertTrue(node2.hasChildren());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isNumber());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isAssign());
assertFalse(node2.isNull());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertEquals((-1872), node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node_NodeMismatch1);
assertNotSame(node_NodeMismatch1, node_NodeMismatch0);

Node node3 = node1.srcrefTree(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isStringKey());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node2.isCase());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertTrue(node2.hasChildren());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isNumber());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isAssign());
assertFalse(node2.isNull());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertEquals((-1872), node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isNew());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isOr());
assertFalse(node3.isNumber());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isNull());
assertFalse(node3.isBlock());
assertFalse(node3.isExprResult());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isWith());
assertFalse(node3.isGetElem());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabel());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isGetterDef());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isDelProp());
assertFalse(node3.isHook());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isVoid());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertEquals(0, node3.getType());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node3);
assertSame(node1, node3);
assertSame(node3, node1);


[MASTER] 17:54:38.135 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_63_1629222877802/com/google/javascript/rhino/Node_63_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_63_1629222877802/com/google/javascript/rhino/Node_63_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:38.135 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:38.135 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:38.136 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1069
[MASTER] 17:54:38.137 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_63_1629222877802/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:37 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_63_tmp__ESTest extends Node_63_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(0.0);
21:       assertFalse(node0.isLabel());
22:       assertFalse(node0.isAssignAdd());
23:       assertFalse(node0.isReturn());
24:       assertFalse(node0.isDec());
25:       assertEquals((-1), node0.getSourcePosition());
26:       assertFalse(node0.hasChildren());
27:       assertFalse(node0.hasMoreThanOneChild());
28:       assertFalse(node0.isOr());
29:       assertFalse(node0.isAssign());
30:       assertFalse(node0.isTypeOf());
31:       assertFalse(node0.isGetElem());
32:       assertFalse(node0.isContinue());
33:       assertFalse(node0.isCast());
34:       assertEquals((-1), node0.getLineno());
35:       assertFalse(node0.isLabelName());
36:       assertFalse(node0.isNew());
37:       assertFalse(node0.isAdd());
38:       assertFalse(node0.isVar());
39:       assertFalse(node0.isDo());
40:       assertFalse(node0.isParamList());
41:       assertFalse(node0.isSetterDef());
42:       assertFalse(node0.isThis());
43:       assertFalse(node0.isInstanceOf());
44:       assertEquals(0, node0.getChildCount());
45:       assertFalse(node0.isStringKey());
46:       assertFalse(node0.isCatch());
47:       assertEquals((-1), node0.getCharno());
48:       assertFalse(node0.isScript());
49:       assertFalse(node0.isBlock());
50:       assertFalse(node0.isHook());
51:       assertFalse(node0.isWith());
52:       assertFalse(node0.isRegExp());
53:       assertFalse(node0.isCase());
54:       assertEquals(39, node0.getType());
55:       assertFalse(node0.isFor());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isTry());
58:       assertFalse(node0.isNE());
59:       assertFalse(node0.isIn());
60:       assertFalse(node0.isGetterDef());
61:       assertFalse(node0.isIf());
62:       assertFalse(node0.isArrayLit());
63:       assertFalse(node0.isSwitch());
64:       assertFalse(node0.isDelProp());
65:       assertFalse(node0.isInc());
66:       assertFalse(node0.isTrue());
67:       assertFalse(node0.isFunction());
68:       assertFalse(node0.isThrow());
69:       assertFalse(node0.isEmpty());
70:       assertFalse(node0.isDefaultCase());
71:       assertFalse(node0.isGetProp());
72:       assertFalse(node0.isNull());
73:       assertFalse(node0.isComma());
74:       assertFalse(node0.isObjectLit());
75:       assertFalse(node0.isFalse());
76:       assertFalse(node0.isAnd());
77:       assertFalse(node0.isCall());
78:       assertFalse(node0.isBreak());
79:       assertFalse(node0.isName());
80:       assertFalse(node0.isVoid());
81:       assertFalse(node0.isDebugger());
82:       assertFalse(node0.isExprResult());
83:       assertFalse(node0.isString());
84:       assertFalse(node0.isNot());
85:       assertFalse(node0.isWhile());
86:       assertTrue(node0.isNumber());
87:       assertEquals(2, Node.POST_FLAG);
88:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
89:       assertEquals(56, Node.CHANGE_TIME);
90:       assertEquals(37, Node.OPT_ARG_NAME);
91:       assertEquals(47, Node.IS_DISPATCHER);
92:       assertEquals(32, Node.INCRDECR_PROP);
93:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
94:       assertEquals(12, Node.COLUMN_BITS);
95:       assertEquals(30, Node.VAR_ARGS_NAME);
96:       assertEquals(36, Node.QUOTED_PROP);
97:       assertEquals(15, Node.NO_SIDE_EFFECTS);
98:       assertEquals(53, Node.INPUT_ID);
99:       assertEquals(49, Node.DIRECT_EVAL);
100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
101:       assertEquals(57, Node.LAST_PROP);
102:       assertEquals(55, Node.INFERRED_FUNCTION);
103:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
104:       assertEquals(57, Node.REFLECTED_OBJECT);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(29, Node.JSDOC_INFO_PROP);
107:       assertEquals(52, Node.LENGTH);
108:       assertEquals(8, Node.FLAG_NO_THROWS);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
111:       assertEquals(39, Node.EMPTY_BLOCK);
112:       assertEquals(48, Node.DIRECTIVES);
113:       assertEquals(4095, Node.COLUMN_MASK);
114:       assertEquals(40, Node.ORIGINALNAME_PROP);
115:       assertEquals(43, Node.IS_CONSTANT_NAME);
116:       assertEquals(54, Node.SLASH_V);
117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
118:       assertEquals(1, Node.DECR_FLAG);
119:       assertEquals(51, Node.STATIC_SOURCE_FILE);
120:       assertEquals(46, Node.IS_NAMESPACE);
121:       assertEquals(50, Node.FREE_CALL);
122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
123:       assertNotNull(node0);
124:       
125:       boolean boolean0 = node0.isQuotedString();
126:       assertFalse(node0.isLabel());
127:       assertFalse(node0.isAssignAdd());
128:       assertFalse(node0.isReturn());
129:       assertFalse(node0.isDec());
130:       assertEquals((-1), node0.getSourcePosition());
131:       assertFalse(node0.hasChildren());
132:       assertFalse(node0.hasMoreThanOneChild());
133:       assertFalse(node0.isOr());
134:       assertFalse(node0.isAssign());
135:       assertFalse(node0.isTypeOf());
136:       assertFalse(node0.isGetElem());
137:       assertFalse(node0.isContinue());
138:       assertFalse(node0.isCast());
139:       assertEquals((-1), node0.getLineno());
140:       assertFalse(node0.isLabelName());
141:       assertFalse(node0.isNew());
142:       assertFalse(node0.isAdd());
143:       assertFalse(node0.isVar());
144:       assertFalse(node0.isDo());
145:       assertFalse(node0.isParamList());
146:       assertFalse(node0.isSetterDef());
147:       assertFalse(node0.isThis());
148:       assertFalse(node0.isInstanceOf());
149:       assertEquals(0, node0.getChildCount());
150:       assertFalse(node0.isStringKey());
151:       assertFalse(node0.isCatch());
152:       assertEquals((-1), node0.getCharno());
153:       assertFalse(node0.isScript());
154:       assertFalse(node0.isBlock());
155:       assertFalse(node0.isHook());
156:       assertFalse(node0.isWith());
157:       assertFalse(node0.isRegExp());
158:       assertFalse(node0.isCase());
159:       assertEquals(39, node0.getType());
160:       assertFalse(node0.isFor());
161:       assertFalse(node0.hasOneChild());
162:       assertFalse(node0.isTry());
163:       assertFalse(node0.isNE());
164:       assertFalse(node0.isIn());
165:       assertFalse(node0.isGetterDef());
166:       assertFalse(node0.isIf());
167:       assertFalse(node0.isArrayLit());
168:       assertFalse(node0.isSwitch());
169:       assertFalse(node0.isDelProp());
170:       assertFalse(node0.isInc());
171:       assertFalse(node0.isTrue());
172:       assertFalse(node0.isFunction());
173:       assertFalse(node0.isThrow());
174:       assertFalse(node0.isEmpty());
175:       assertFalse(node0.isDefaultCase());
176:       assertFalse(node0.isGetProp());
177:       assertFalse(node0.isNull());
178:       assertFalse(node0.isComma());
179:       assertFalse(node0.isObjectLit());
180:       assertFalse(node0.isFalse());
181:       assertFalse(node0.isAnd());
182:       assertFalse(node0.isCall());
183:       assertFalse(node0.isBreak());
184:       assertFalse(node0.isName());
185:       assertFalse(node0.isVoid());
186:       assertFalse(node0.isDebugger());
187:       assertFalse(node0.isExprResult());
188:       assertFalse(node0.isString());
189:       assertFalse(node0.isNot());
190:       assertFalse(node0.isWhile());
191:       assertTrue(node0.isNumber());
192:       assertFalse(boolean0);
193:       assertEquals(2, Node.POST_FLAG);
194:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
195:       assertEquals(56, Node.CHANGE_TIME);
196:       assertEquals(37, Node.OPT_ARG_NAME);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(32, Node.INCRDECR_PROP);
199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
200:       assertEquals(12, Node.COLUMN_BITS);
201:       assertEquals(30, Node.VAR_ARGS_NAME);
202:       assertEquals(36, Node.QUOTED_PROP);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(53, Node.INPUT_ID);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
207:       assertEquals(57, Node.LAST_PROP);
208:       assertEquals(55, Node.INFERRED_FUNCTION);
209:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
210:       assertEquals(57, Node.REFLECTED_OBJECT);
211:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
212:       assertEquals(29, Node.JSDOC_INFO_PROP);
213:       assertEquals(52, Node.LENGTH);
214:       assertEquals(8, Node.FLAG_NO_THROWS);
215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
216:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
217:       assertEquals(39, Node.EMPTY_BLOCK);
218:       assertEquals(48, Node.DIRECTIVES);
219:       assertEquals(4095, Node.COLUMN_MASK);
220:       assertEquals(40, Node.ORIGINALNAME_PROP);
221:       assertEquals(43, Node.IS_CONSTANT_NAME);
222:       assertEquals(54, Node.SLASH_V);
223:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
224:       assertEquals(1, Node.DECR_FLAG);
225:       assertEquals(51, Node.STATIC_SOURCE_FILE);
226:       assertEquals(46, Node.IS_NAMESPACE);
227:       assertEquals(50, Node.FREE_CALL);
228:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
229:       
230:       Node node1 = new Node(52, node0, 16, 132);
231:       assertFalse(node1.equals((Object)node0));
232:       assertFalse(node0.isLabel());
233:       assertFalse(node0.isAssignAdd());
234:       assertFalse(node0.isReturn());
235:       assertFalse(node0.isDec());
236:       assertEquals((-1), node0.getSourcePosition());
237:       assertFalse(node0.hasChildren());
238:       assertFalse(node0.hasMoreThanOneChild());
239:       assertFalse(node0.isOr());
240:       assertFalse(node0.isAssign());
241:       assertFalse(node0.isTypeOf());
242:       assertFalse(node0.isGetElem());
243:       assertFalse(node0.isContinue());
244:       assertFalse(node0.isCast());
245:       assertEquals((-1), node0.getLineno());
246:       assertFalse(node0.isLabelName());
247:       assertFalse(node0.isNew());
248:       assertFalse(node0.isAdd());
249:       assertFalse(node0.isVar());
250:       assertFalse(node0.isDo());
251:       assertFalse(node0.isParamList());
252:       assertFalse(node0.isSetterDef());
253:       assertFalse(node0.isThis());
254:       assertFalse(node0.isInstanceOf());
255:       assertEquals(0, node0.getChildCount());
256:       assertFalse(node0.isStringKey());
257:       assertFalse(node0.isCatch());
258:       assertEquals((-1), node0.getCharno());
259:       assertFalse(node0.isScript());
260:       assertFalse(node0.isBlock());
261:       assertFalse(node0.isHook());
262:       assertFalse(node0.isWith());
263:       assertFalse(node0.isRegExp());
264:       assertFalse(node0.isCase());
265:       assertEquals(39, node0.getType());
266:       assertFalse(node0.isFor());
267:       assertFalse(node0.hasOneChild());
268:       assertFalse(node0.isTry());
269:       assertFalse(node0.isNE());
270:       assertFalse(node0.isIn());
271:       assertFalse(node0.isGetterDef());
272:       assertFalse(node0.isIf());
273:       assertFalse(node0.isArrayLit());
274:       assertFalse(node0.isSwitch());
275:       assertFalse(node0.isDelProp());
276:       assertFalse(node0.isInc());
277:       assertFalse(node0.isTrue());
278:       assertFalse(node0.isFunction());
279:       assertFalse(node0.isThrow());
280:       assertFalse(node0.isEmpty());
281:       assertFalse(node0.isDefaultCase());
282:       assertFalse(node0.isGetProp());
283:       assertFalse(node0.isNull());
284:       assertFalse(node0.isComma());
285:       assertFalse(node0.isObjectLit());
286:       assertFalse(node0.isFalse());
287:       assertFalse(node0.isAnd());
288:       assertFalse(node0.isCall());
289:       assertFalse(node0.isBreak());
290:       assertFalse(node0.isName());
291:       assertFalse(node0.isVoid());
292:       assertFalse(node0.isDebugger());
293:       assertFalse(node0.isExprResult());
294:       assertFalse(node0.isString());
295:       assertFalse(node0.isNot());
296:       assertFalse(node0.isWhile());
297:       assertTrue(node0.isNumber());
298:       assertFalse(node1.isHook());
299:       assertFalse(node1.isFalse());
300:       assertFalse(node1.isThis());
301:       assertFalse(node1.isInc());
302:       assertFalse(node1.isComma());
303:       assertFalse(node1.isGetProp());
304:       assertFalse(node1.isThrow());
305:       assertEquals(1, node1.getChildCount());
306:       assertFalse(node1.isWith());
307:       assertTrue(node1.hasChildren());
308:       assertFalse(node1.isIn());
309:       assertFalse(node1.isNE());
310:       assertFalse(node1.isExprResult());
311:       assertFalse(node1.isBreak());
312:       assertEquals(132, node1.getCharno());
313:       assertFalse(node1.isDelProp());
314:       assertFalse(node1.isIf());
315:       assertFalse(node1.isCast());
316:       assertFalse(node1.isGetElem());
317:       assertFalse(node1.isAssign());
318:       assertFalse(node1.isFunction());
319:       assertFalse(node1.isTypeOf());
320:       assertFalse(node1.isDec());
321:       assertTrue(node1.hasOneChild());
322:       assertFalse(node1.isReturn());
323:       assertFalse(node1.isObjectLit());
324:       assertFalse(node1.isNot());
325:       assertFalse(node1.isContinue());
326:       assertFalse(node1.isString());
327:       assertFalse(node1.isDebugger());
328:       assertFalse(node1.isAnd());
329:       assertFalse(node1.isCall());
330:       assertFalse(node1.isVar());
331:       assertFalse(node1.isAdd());
332:       assertFalse(node1.isSetterDef());
333:       assertFalse(node1.isNew());
334:       assertEquals(16, node1.getLineno());
335:       assertFalse(node1.isDo());
336:       assertFalse(node1.isBlock());
337:       assertFalse(node1.isWhile());
338:       assertFalse(node1.hasMoreThanOneChild());
339:       assertFalse(node1.isCatch());
340:       assertFalse(node1.isOr());
341:       assertEquals(52, node1.getType());
342:       assertFalse(node1.isNull());
343:       assertFalse(node1.isTrue());
344:       assertFalse(node1.isVoid());
345:       assertTrue(node1.isInstanceOf());
346:       assertFalse(node1.isName());
347:       assertFalse(node1.isArrayLit());
348:       assertFalse(node1.isGetterDef());
349:       assertFalse(node1.isEmpty());
350:       assertFalse(node1.isNumber());
351:       assertFalse(node1.isScript());
352:       assertFalse(node1.isRegExp());
353:       assertFalse(node1.isLabel());
354:       assertFalse(node1.isFor());
355:       assertFalse(node1.isTry());
356:       assertFalse(node1.isDefaultCase());
357:       assertFalse(node1.isAssignAdd());
358:       assertFalse(node1.isCase());
359:       assertFalse(node1.isSwitch());
360:       assertFalse(node1.isLabelName());
361:       assertEquals(65668, node1.getSourcePosition());
362:       assertFalse(node1.isStringKey());
363:       assertFalse(node1.isParamList());
364:       assertEquals(2, Node.POST_FLAG);
365:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
366:       assertEquals(56, Node.CHANGE_TIME);
367:       assertEquals(37, Node.OPT_ARG_NAME);
368:       assertEquals(47, Node.IS_DISPATCHER);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
371:       assertEquals(12, Node.COLUMN_BITS);
372:       assertEquals(30, Node.VAR_ARGS_NAME);
373:       assertEquals(36, Node.QUOTED_PROP);
374:       assertEquals(15, Node.NO_SIDE_EFFECTS);
375:       assertEquals(53, Node.INPUT_ID);
376:       assertEquals(49, Node.DIRECT_EVAL);
377:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
378:       assertEquals(57, Node.LAST_PROP);
379:       assertEquals(55, Node.INFERRED_FUNCTION);
380:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
381:       assertEquals(57, Node.REFLECTED_OBJECT);
382:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
383:       assertEquals(29, Node.JSDOC_INFO_PROP);
384:       assertEquals(52, Node.LENGTH);
385:       assertEquals(8, Node.FLAG_NO_THROWS);
386:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
387:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
388:       assertEquals(39, Node.EMPTY_BLOCK);
389:       assertEquals(48, Node.DIRECTIVES);
390:       assertEquals(4095, Node.COLUMN_MASK);
391:       assertEquals(40, Node.ORIGINALNAME_PROP);
392:       assertEquals(43, Node.IS_CONSTANT_NAME);
393:       assertEquals(54, Node.SLASH_V);
394:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
395:       assertEquals(1, Node.DECR_FLAG);
396:       assertEquals(51, Node.STATIC_SOURCE_FILE);
397:       assertEquals(46, Node.IS_NAMESPACE);
398:       assertEquals(50, Node.FREE_CALL);
399:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
400:       assertEquals(52, Node.LENGTH);
401:       assertEquals(57, Node.REFLECTED_OBJECT);
402:       assertEquals(54, Node.SLASH_V);
403:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
404:       assertEquals(57, Node.LAST_PROP);
405:       assertEquals(15, Node.NO_SIDE_EFFECTS);
406:       assertEquals(50, Node.FREE_CALL);
407:       assertEquals(1, Node.DECR_FLAG);
408:       assertEquals(8, Node.FLAG_NO_THROWS);
409:       assertEquals(39, Node.EMPTY_BLOCK);
410:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
411:       assertEquals(32, Node.INCRDECR_PROP);
412:       assertEquals(48, Node.DIRECTIVES);
413:       assertEquals(12, Node.COLUMN_BITS);
414:       assertEquals(56, Node.CHANGE_TIME);
415:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
416:       assertEquals(49, Node.DIRECT_EVAL);
417:       assertEquals(37, Node.OPT_ARG_NAME);
418:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
419:       assertEquals(4095, Node.COLUMN_MASK);
420:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
421:       assertEquals(43, Node.IS_CONSTANT_NAME);
422:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
423:       assertEquals(36, Node.QUOTED_PROP);
424:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
425:       assertEquals(53, Node.INPUT_ID);
426:       assertEquals(29, Node.JSDOC_INFO_PROP);
427:       assertEquals(55, Node.INFERRED_FUNCTION);
428:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
429:       assertEquals(46, Node.IS_NAMESPACE);
430:       assertEquals(51, Node.STATIC_SOURCE_FILE);
431:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
432:       assertEquals(47, Node.IS_DISPATCHER);
433:       assertEquals(2, Node.POST_FLAG);
434:       assertEquals(30, Node.VAR_ARGS_NAME);
435:       assertEquals(40, Node.ORIGINALNAME_PROP);
436:       assertNotNull(node1);
437:       
438:       String string0 = node1.getQualifiedName();
439:       assertFalse(node0.equals((Object)node1));
440:       assertFalse(node1.equals((Object)node0));
441:       assertFalse(node0.isLabel());
442:       assertFalse(node0.isAssignAdd());
443:       assertFalse(node0.isReturn());
444:       assertFalse(node0.isDec());
445:       assertEquals((-1), node0.getSourcePosition());
446:       assertFalse(node0.hasChildren());
447:       assertFalse(node0.hasMoreThanOneChild());
448:       assertFalse(node0.isOr());
449:       assertFalse(node0.isAssign());
450:       assertFalse(node0.isTypeOf());
451:       assertFalse(node0.isGetElem());
452:       assertFalse(node0.isContinue());
453:       assertFalse(node0.isCast());
454:       assertEquals((-1), node0.getLineno());
455:       assertFalse(node0.isLabelName());
456:       assertFalse(node0.isNew());
457:       assertFalse(node0.isAdd());
458:       assertFalse(node0.isVar());
459:       assertFalse(node0.isDo());
460:       assertFalse(node0.isParamList());
461:       assertFalse(node0.isSetterDef());
462:       assertFalse(node0.isThis());
463:       assertFalse(node0.isInstanceOf());
464:       assertEquals(0, node0.getChildCount());
465:       assertFalse(node0.isStringKey());
466:       assertFalse(node0.isCatch());
467:       assertEquals((-1), node0.getCharno());
468:       assertFalse(node0.isScript());
469:       assertFalse(node0.isBlock());
470:       assertFalse(node0.isHook());
471:       assertFalse(node0.isWith());
472:       assertFalse(node0.isRegExp());
473:       assertFalse(node0.isCase());
474:       assertEquals(39, node0.getType());
475:       assertFalse(node0.isFor());
476:       assertFalse(node0.hasOneChild());
477:       assertFalse(node0.isTry());
478:       assertFalse(node0.isNE());
479:       assertFalse(node0.isIn());
480:       assertFalse(node0.isGetterDef());
481:       assertFalse(node0.isIf());
482:       assertFalse(node0.isArrayLit());
483:       assertFalse(node0.isSwitch());
484:       assertFalse(node0.isDelProp());
485:       assertFalse(node0.isInc());
486:       assertFalse(node0.isTrue());
487:       assertFalse(node0.isFunction());
488:       assertFalse(node0.isThrow());
489:       assertFalse(node0.isEmpty());
490:       assertFalse(node0.isDefaultCase());
491:       assertFalse(node0.isGetProp());
492:       assertFalse(node0.isNull());
493:       assertFalse(node0.isComma());
494:       assertFalse(node0.isObjectLit());
495:       assertFalse(node0.isFalse());
496:       assertFalse(node0.isAnd());
497:       assertFalse(node0.isCall());
498:       assertFalse(node0.isBreak());
499:       assertFalse(node0.isName());
500:       assertFalse(node0.isVoid());
501:       assertFalse(node0.isDebugger());
502:       assertFalse(node0.isExprResult());
503:       assertFalse(node0.isString());
504:       assertFalse(node0.isNot());
505:       assertFalse(node0.isWhile());
506:       assertTrue(node0.isNumber());
507:       assertFalse(node1.isHook());
508:       assertFalse(node1.isFalse());
509:       assertFalse(node1.isThis());
510:       assertFalse(node1.isInc());
511:       assertFalse(node1.isComma());
512:       assertFalse(node1.isGetProp());
513:       assertFalse(node1.isThrow());
514:       assertEquals(1, node1.getChildCount());
515:       assertFalse(node1.isWith());
516:       assertTrue(node1.hasChildren());
517:       assertFalse(node1.isIn());
518:       assertFalse(node1.isNE());
519:       assertFalse(node1.isExprResult());
520:       assertFalse(node1.isBreak());
521:       assertEquals(132, node1.getCharno());
522:       assertFalse(node1.isDelProp());
523:       assertFalse(node1.isIf());
524:       assertFalse(node1.isCast());
525:       assertFalse(node1.isGetElem());
526:       assertFalse(node1.isAssign());
527:       assertFalse(node1.isFunction());
528:       assertFalse(node1.isTypeOf());
529:       assertFalse(node1.isDec());
530:       assertTrue(node1.hasOneChild());
531:       assertFalse(node1.isReturn());
532:       assertFalse(node1.isObjectLit());
533:       assertFalse(node1.isNot());
534:       assertFalse(node1.isContinue());
535:       assertFalse(node1.isString());
536:       assertFalse(node1.isDebugger());
537:       assertFalse(node1.isAnd());
538:       assertFalse(node1.isCall());
539:       assertFalse(node1.isVar());
540:       assertFalse(node1.isAdd());
541:       assertFalse(node1.isSetterDef());
542:       assertFalse(node1.isNew());
543:       assertEquals(16, node1.getLineno());
544:       assertFalse(node1.isDo());
545:       assertFalse(node1.isBlock());
546:       assertFalse(node1.isWhile());
547:       assertFalse(node1.hasMoreThanOneChild());
548:       assertFalse(node1.isCatch());
549:       assertFalse(node1.isOr());
550:       assertEquals(52, node1.getType());
551:       assertFalse(node1.isNull());
552:       assertFalse(node1.isTrue());
553:       assertFalse(node1.isVoid());
554:       assertTrue(node1.isInstanceOf());
555:       assertFalse(node1.isName());
556:       assertFalse(node1.isArrayLit());
557:       assertFalse(node1.isGetterDef());
558:       assertFalse(node1.isEmpty());
559:       assertFalse(node1.isNumber());
560:       assertFalse(node1.isScript());
561:       assertFalse(node1.isRegExp());
562:       assertFalse(node1.isLabel());
563:       assertFalse(node1.isFor());
564:       assertFalse(node1.isTry());
565:       assertFalse(node1.isDefaultCase());
566:       assertFalse(node1.isAssignAdd());
567:       assertFalse(node1.isCase());
568:       assertFalse(node1.isSwitch());
569:       assertFalse(node1.isLabelName());
570:       assertEquals(65668, node1.getSourcePosition());
571:       assertFalse(node1.isStringKey());
572:       assertFalse(node1.isParamList());
573:       assertEquals(2, Node.POST_FLAG);
574:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
575:       assertEquals(56, Node.CHANGE_TIME);
576:       assertEquals(37, Node.OPT_ARG_NAME);
577:       assertEquals(47, Node.IS_DISPATCHER);
578:       assertEquals(32, Node.INCRDECR_PROP);
579:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
580:       assertEquals(12, Node.COLUMN_BITS);
581:       assertEquals(30, Node.VAR_ARGS_NAME);
582:       assertEquals(36, Node.QUOTED_PROP);
583:       assertEquals(15, Node.NO_SIDE_EFFECTS);
584:       assertEquals(53, Node.INPUT_ID);
585:       assertEquals(49, Node.DIRECT_EVAL);
586:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
587:       assertEquals(57, Node.LAST_PROP);
588:       assertEquals(55, Node.INFERRED_FUNCTION);
589:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
590:       assertEquals(57, Node.REFLECTED_OBJECT);
591:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
592:       assertEquals(29, Node.JSDOC_INFO_PROP);
593:       assertEquals(52, Node.LENGTH);
594:       assertEquals(8, Node.FLAG_NO_THROWS);
595:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
596:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
597:       assertEquals(39, Node.EMPTY_BLOCK);
598:       assertEquals(48, Node.DIRECTIVES);
599:       assertEquals(4095, Node.COLUMN_MASK);
600:       assertEquals(40, Node.ORIGINALNAME_PROP);
601:       assertEquals(43, Node.IS_CONSTANT_NAME);
602:       assertEquals(54, Node.SLASH_V);
603:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
604:       assertEquals(1, Node.DECR_FLAG);
605:       assertEquals(51, Node.STATIC_SOURCE_FILE);
606:       assertEquals(46, Node.IS_NAMESPACE);
607:       assertEquals(50, Node.FREE_CALL);
608:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
609:       assertEquals(52, Node.LENGTH);
610:       assertEquals(57, Node.REFLECTED_OBJECT);
611:       assertEquals(54, Node.SLASH_V);
612:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
613:       assertEquals(57, Node.LAST_PROP);
614:       assertEquals(15, Node.NO_SIDE_EFFECTS);
615:       assertEquals(50, Node.FREE_CALL);
616:       assertEquals(1, Node.DECR_FLAG);
617:       assertEquals(8, Node.FLAG_NO_THROWS);
618:       assertEquals(39, Node.EMPTY_BLOCK);
619:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
620:       assertEquals(32, Node.INCRDECR_PROP);
621:       assertEquals(48, Node.DIRECTIVES);
622:       assertEquals(12, Node.COLUMN_BITS);
623:       assertEquals(56, Node.CHANGE_TIME);
624:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
625:       assertEquals(49, Node.DIRECT_EVAL);
626:       assertEquals(37, Node.OPT_ARG_NAME);
627:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
628:       assertEquals(4095, Node.COLUMN_MASK);
629:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
630:       assertEquals(43, Node.IS_CONSTANT_NAME);
631:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
632:       assertEquals(36, Node.QUOTED_PROP);
633:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
634:       assertEquals(53, Node.INPUT_ID);
635:       assertEquals(29, Node.JSDOC_INFO_PROP);
636:       assertEquals(55, Node.INFERRED_FUNCTION);
637:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
638:       assertEquals(46, Node.IS_NAMESPACE);
639:       assertEquals(51, Node.STATIC_SOURCE_FILE);
640:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
641:       assertEquals(47, Node.IS_DISPATCHER);
642:       assertEquals(2, Node.POST_FLAG);
643:       assertEquals(30, Node.VAR_ARGS_NAME);
644:       assertEquals(40, Node.ORIGINALNAME_PROP);
645:       assertNull(string0);
646:       
647:       boolean boolean1 = node1.isEquivalentTo(node0, false, false, true);
648:       assertFalse(node0.equals((Object)node1));
649:       assertFalse(node1.equals((Object)node0));
650:       assertTrue(boolean1 == boolean0);
651:       assertFalse(node0.isLabel());
652:       assertFalse(node0.isAssignAdd());
653:       assertFalse(node0.isReturn());
654:       assertFalse(node0.isDec());
655:       assertEquals((-1), node0.getSourcePosition());
656:       assertFalse(node0.hasChildren());
657:       assertFalse(node0.hasMoreThanOneChild());
658:       assertFalse(node0.isOr());
659:       assertFalse(node0.isAssign());
660:       assertFalse(node0.isTypeOf());
661:       assertFalse(node0.isGetElem());
662:       assertFalse(node0.isContinue());
663:       assertFalse(node0.isCast());
664:       assertEquals((-1), node0.getLineno());
665:       assertFalse(node0.isLabelName());
666:       assertFalse(node0.isNew());
667:       assertFalse(node0.isAdd());
668:       assertFalse(node0.isVar());
669:       assertFalse(node0.isDo());
670:       assertFalse(node0.isParamList());
671:       assertFalse(node0.isSetterDef());
672:       assertFalse(node0.isThis());
673:       assertFalse(node0.isInstanceOf());
674:       assertEquals(0, node0.getChildCount());
675:       assertFalse(node0.isStringKey());
676:       assertFalse(node0.isCatch());
677:       assertEquals((-1), node0.getCharno());
678:       assertFalse(node0.isScript());
679:       assertFalse(node0.isBlock());
680:       assertFalse(node0.isHook());
681:       assertFalse(node0.isWith());
682:       assertFalse(node0.isRegExp());
683:       assertFalse(node0.isCase());
684:       assertEquals(39, node0.getType());
685:       assertFalse(node0.isFor());
686:       assertFalse(node0.hasOneChild());
687:       assertFalse(node0.isTry());
688:       assertFalse(node0.isNE());
689:       assertFalse(node0.isIn());
690:       assertFalse(node0.isGetterDef());
691:       assertFalse(node0.isIf());
692:       assertFalse(node0.isArrayLit());
693:       assertFalse(node0.isSwitch());
694:       assertFalse(node0.isDelProp());
695:       assertFalse(node0.isInc());
696:       assertFalse(node0.isTrue());
697:       assertFalse(node0.isFunction());
698:       assertFalse(node0.isThrow());
699:       assertFalse(node0.isEmpty());
700:       assertFalse(node0.isDefaultCase());
701:       assertFalse(node0.isGetProp());
702:       assertFalse(node0.isNull());
703:       assertFalse(node0.isComma());
704:       assertFalse(node0.isObjectLit());
705:       assertFalse(node0.isFalse());
706:       assertFalse(node0.isAnd());
707:       assertFalse(node0.isCall());
708:       assertFalse(node0.isBreak());
709:       assertFalse(node0.isName());
710:       assertFalse(node0.isVoid());
711:       assertFalse(node0.isDebugger());
712:       assertFalse(node0.isExprResult());
713:       assertFalse(node0.isString());
714:       assertFalse(node0.isNot());
715:       assertFalse(node0.isWhile());
716:       assertTrue(node0.isNumber());
717:       assertFalse(node1.isHook());
718:       assertFalse(node1.isFalse());
719:       assertFalse(node1.isThis());
720:       assertFalse(node1.isInc());
721:       assertFalse(node1.isComma());
722:       assertFalse(node1.isGetProp());
723:       assertFalse(node1.isThrow());
724:       assertEquals(1, node1.getChildCount());
725:       assertFalse(node1.isWith());
726:       assertTrue(node1.hasChildren());
727:       assertFalse(node1.isIn());
728:       assertFalse(node1.isNE());
729:       assertFalse(node1.isExprResult());
730:       assertFalse(node1.isBreak());
731:       assertEquals(132, node1.getCharno());
732:       assertFalse(node1.isDelProp());
733:       assertFalse(node1.isIf());
734:       assertFalse(node1.isCast());
735:       assertFalse(node1.isGetElem());
736:       assertFalse(node1.isAssign());
737:       assertFalse(node1.isFunction());
738:       assertFalse(node1.isTypeOf());
739:       assertFalse(node1.isDec());
740:       assertTrue(node1.hasOneChild());
741:       assertFalse(node1.isReturn());
742:       assertFalse(node1.isObjectLit());
743:       assertFalse(node1.isNot());
744:       assertFalse(node1.isContinue());
745:       assertFalse(node1.isString());
746:       assertFalse(node1.isDebugger());
747:       assertFalse(node1.isAnd());
748:       assertFalse(node1.isCall());
749:       assertFalse(node1.isVar());
750:       assertFalse(node1.isAdd());
751:       assertFalse(node1.isSetterDef());
752:       assertFalse(node1.isNew());
753:       assertEquals(16, node1.getLineno());
754:       assertFalse(node1.isDo());
755:       assertFalse(node1.isBlock());
756:       assertFalse(node1.isWhile());
757:       assertFalse(node1.hasMoreThanOneChild());
758:       assertFalse(node1.isCatch());
759:       assertFalse(node1.isOr());
760:       assertEquals(52, node1.getType());
761:       assertFalse(node1.isNull());
762:       assertFalse(node1.isTrue());
763:       assertFalse(node1.isVoid());
764:       assertTrue(node1.isInstanceOf());
765:       assertFalse(node1.isName());
766:       assertFalse(node1.isArrayLit());
767:       assertFalse(node1.isGetterDef());
768:       assertFalse(node1.isEmpty());
769:       assertFalse(node1.isNumber());
770:       assertFalse(node1.isScript());
771:       assertFalse(node1.isRegExp());
772:       assertFalse(node1.isLabel());
773:       assertFalse(node1.isFor());
774:       assertFalse(node1.isTry());
775:       assertFalse(node1.isDefaultCase());
776:       assertFalse(node1.isAssignAdd());
777:       assertFalse(node1.isCase());
778:       assertFalse(node1.isSwitch());
779:       assertFalse(node1.isLabelName());
780:       assertEquals(65668, node1.getSourcePosition());
781:       assertFalse(node1.isStringKey());
782:       assertFalse(node1.isParamList());
783:       assertFalse(boolean1);
784:       assertEquals(2, Node.POST_FLAG);
785:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
786:       assertEquals(56, Node.CHANGE_TIME);
787:       assertEquals(37, Node.OPT_ARG_NAME);
788:       assertEquals(47, Node.IS_DISPATCHER);
789:       assertEquals(32, Node.INCRDECR_PROP);
790:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
791:       assertEquals(12, Node.COLUMN_BITS);
792:       assertEquals(30, Node.VAR_ARGS_NAME);
793:       assertEquals(36, Node.QUOTED_PROP);
794:       assertEquals(15, Node.NO_SIDE_EFFECTS);
795:       assertEquals(53, Node.INPUT_ID);
796:       assertEquals(49, Node.DIRECT_EVAL);
797:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
798:       assertEquals(57, Node.LAST_PROP);
799:       assertEquals(55, Node.INFERRED_FUNCTION);
800:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
801:       assertEquals(57, Node.REFLECTED_OBJECT);
802:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
803:       assertEquals(29, Node.JSDOC_INFO_PROP);
804:       assertEquals(52, Node.LENGTH);
805:       assertEquals(8, Node.FLAG_NO_THROWS);
806:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
807:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
808:       assertEquals(39, Node.EMPTY_BLOCK);
809:       assertEquals(48, Node.DIRECTIVES);
810:       assertEquals(4095, Node.COLUMN_MASK);
811:       assertEquals(40, Node.ORIGINALNAME_PROP);
812:       assertEquals(43, Node.IS_CONSTANT_NAME);
813:       assertEquals(54, Node.SLASH_V);
814:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
815:       assertEquals(1, Node.DECR_FLAG);
816:       assertEquals(51, Node.STATIC_SOURCE_FILE);
817:       assertEquals(46, Node.IS_NAMESPACE);
818:       assertEquals(50, Node.FREE_CALL);
819:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
820:       assertEquals(52, Node.LENGTH);
821:       assertEquals(57, Node.REFLECTED_OBJECT);
822:       assertEquals(54, Node.SLASH_V);
823:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
824:       assertEquals(57, Node.LAST_PROP);
825:       assertEquals(15, Node.NO_SIDE_EFFECTS);
826:       assertEquals(50, Node.FREE_CALL);
827:       assertEquals(1, Node.DECR_FLAG);
828:       assertEquals(8, Node.FLAG_NO_THROWS);
829:       assertEquals(39, Node.EMPTY_BLOCK);
830:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
831:       assertEquals(32, Node.INCRDECR_PROP);
832:       assertEquals(48, Node.DIRECTIVES);
833:       assertEquals(12, Node.COLUMN_BITS);
834:       assertEquals(56, Node.CHANGE_TIME);
835:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
836:       assertEquals(49, Node.DIRECT_EVAL);
837:       assertEquals(37, Node.OPT_ARG_NAME);
838:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
839:       assertEquals(4095, Node.COLUMN_MASK);
840:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
841:       assertEquals(43, Node.IS_CONSTANT_NAME);
842:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
843:       assertEquals(36, Node.QUOTED_PROP);
844:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
845:       assertEquals(53, Node.INPUT_ID);
846:       assertEquals(29, Node.JSDOC_INFO_PROP);
847:       assertEquals(55, Node.INFERRED_FUNCTION);
848:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
849:       assertEquals(46, Node.IS_NAMESPACE);
850:       assertEquals(51, Node.STATIC_SOURCE_FILE);
851:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
852:       assertEquals(47, Node.IS_DISPATCHER);
853:       assertEquals(2, Node.POST_FLAG);
854:       assertEquals(30, Node.VAR_ARGS_NAME);
855:       assertEquals(40, Node.ORIGINALNAME_PROP);
856:       
857:       boolean boolean2 = node0.isDo();
858:       assertFalse(node0.equals((Object)node1));
859:       assertTrue(boolean2 == boolean0);
860:       assertTrue(boolean2 == boolean1);
861:       assertFalse(node0.isLabel());
862:       assertFalse(node0.isAssignAdd());
863:       assertFalse(node0.isReturn());
864:       assertFalse(node0.isDec());
865:       assertEquals((-1), node0.getSourcePosition());
866:       assertFalse(node0.hasChildren());
867:       assertFalse(node0.hasMoreThanOneChild());
868:       assertFalse(node0.isOr());
869:       assertFalse(node0.isAssign());
870:       assertFalse(node0.isTypeOf());
871:       assertFalse(node0.isGetElem());
872:       assertFalse(node0.isContinue());
873:       assertFalse(node0.isCast());
874:       assertEquals((-1), node0.getLineno());
875:       assertFalse(node0.isLabelName());
876:       assertFalse(node0.isNew());
877:       assertFalse(node0.isAdd());
878:       assertFalse(node0.isVar());
879:       assertFalse(node0.isDo());
880:       assertFalse(node0.isParamList());
881:       assertFalse(node0.isSetterDef());
882:       assertFalse(node0.isThis());
883:       assertFalse(node0.isInstanceOf());
884:       assertEquals(0, node0.getChildCount());
885:       assertFalse(node0.isStringKey());
886:       assertFalse(node0.isCatch());
887:       assertEquals((-1), node0.getCharno());
888:       assertFalse(node0.isScript());
889:       assertFalse(node0.isBlock());
890:       assertFalse(node0.isHook());
891:       assertFalse(node0.isWith());
892:       assertFalse(node0.isRegExp());
893:       assertFalse(node0.isCase());
894:       assertEquals(39, node0.getType());
895:       assertFalse(node0.isFor());
896:       assertFalse(node0.hasOneChild());
897:       assertFalse(node0.isTry());
898:       assertFalse(node0.isNE());
899:       assertFalse(node0.isIn());
900:       assertFalse(node0.isGetterDef());
901:       assertFalse(node0.isIf());
902:       assertFalse(node0.isArrayLit());
903:       assertFalse(node0.isSwitch());
904:       assertFalse(node0.isDelProp());
905:       assertFalse(node0.isInc());
906:       assertFalse(node0.isTrue());
907:       assertFalse(node0.isFunction());
908:       assertFalse(node0.isThrow());
909:       assertFalse(node0.isEmpty());
910:       assertFalse(node0.isDefaultCase());
911:       assertFalse(node0.isGetProp());
912:       assertFalse(node0.isNull());
913:       assertFalse(node0.isComma());
914:       assertFalse(node0.isObjectLit());
915:       assertFalse(node0.isFalse());
916:       assertFalse(node0.isAnd());
917:       assertFalse(node0.isCall());
918:       assertFalse(node0.isBreak());
919:       assertFalse(node0.isName());
920:       assertFalse(node0.isVoid());
921:       assertFalse(node0.isDebugger());
922:       assertFalse(node0.isExprResult());
923:       assertFalse(node0.isString());
924:       assertFalse(node0.isNot());
925:       assertFalse(node0.isWhile());
926:       assertTrue(node0.isNumber());
927:       assertFalse(boolean2);
928:       assertEquals(2, Node.POST_FLAG);
929:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
930:       assertEquals(56, Node.CHANGE_TIME);
931:       assertEquals(37, Node.OPT_ARG_NAME);
932:       assertEquals(47, Node.IS_DISPATCHER);
933:       assertEquals(32, Node.INCRDECR_PROP);
934:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
935:       assertEquals(12, Node.COLUMN_BITS);
936:       assertEquals(30, Node.VAR_ARGS_NAME);
937:       assertEquals(36, Node.QUOTED_PROP);
938:       assertEquals(15, Node.NO_SIDE_EFFECTS);
939:       assertEquals(53, Node.INPUT_ID);
940:       assertEquals(49, Node.DIRECT_EVAL);
941:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
942:       assertEquals(57, Node.LAST_PROP);
943:       assertEquals(55, Node.INFERRED_FUNCTION);
944:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
945:       assertEquals(57, Node.REFLECTED_OBJECT);
946:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
947:       assertEquals(29, Node.JSDOC_INFO_PROP);
948:       assertEquals(52, Node.LENGTH);
949:       assertEquals(8, Node.FLAG_NO_THROWS);
950:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
951:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
952:       assertEquals(39, Node.EMPTY_BLOCK);
953:       assertEquals(48, Node.DIRECTIVES);
954:       assertEquals(4095, Node.COLUMN_MASK);
955:       assertEquals(40, Node.ORIGINALNAME_PROP);
956:       assertEquals(43, Node.IS_CONSTANT_NAME);
957:       assertEquals(54, Node.SLASH_V);
958:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
959:       assertEquals(1, Node.DECR_FLAG);
960:       assertEquals(51, Node.STATIC_SOURCE_FILE);
961:       assertEquals(46, Node.IS_NAMESPACE);
962:       assertEquals(50, Node.FREE_CALL);
963:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
964:       
965:       Iterable<Node> iterable0 = node0.children();
966:       assertFalse(node0.equals((Object)node1));
967:       assertFalse(node0.isLabel());
968:       assertFalse(node0.isAssignAdd());
969:       assertFalse(node0.isReturn());
970:       assertFalse(node0.isDec());
971:       assertEquals((-1), node0.getSourcePosition());
972:       assertFalse(node0.hasChildren());
973:       assertFalse(node0.hasMoreThanOneChild());
974:       assertFalse(node0.isOr());
975:       assertFalse(node0.isAssign());
976:       assertFalse(node0.isTypeOf());
977:       assertFalse(node0.isGetElem());
978:       assertFalse(node0.isContinue());
979:       assertFalse(node0.isCast());
980:       assertEquals((-1), node0.getLineno());
981:       assertFalse(node0.isLabelName());
982:       assertFalse(node0.isNew());
983:       assertFalse(node0.isAdd());
984:       assertFalse(node0.isVar());
985:       assertFalse(node0.isDo());
986:       assertFalse(node0.isParamList());
987:       assertFalse(node0.isSetterDef());
988:       assertFalse(node0.isThis());
989:       assertFalse(node0.isInstanceOf());
990:       assertEquals(0, node0.getChildCount());
991:       assertFalse(node0.isStringKey());
992:       assertFalse(node0.isCatch());
993:       assertEquals((-1), node0.getCharno());
994:       assertFalse(node0.isScript());
995:       assertFalse(node0.isBlock());
996:       assertFalse(node0.isHook());
997:       assertFalse(node0.isWith());
998:       assertFalse(node0.isRegExp());
999:       assertFalse(node0.isCase());
1000:       assertEquals(39, node0.getType());
1001:       assertFalse(node0.isFor());
1002:       assertFalse(node0.hasOneChild());
1003:       assertFalse(node0.isTry());
1004:       assertFalse(node0.isNE());
1005:       assertFalse(node0.isIn());
1006:       assertFalse(node0.isGetterDef());
1007:       assertFalse(node0.isIf());
1008:       assertFalse(node0.isArrayLit());
1009:       assertFalse(node0.isSwitch());
1010:       assertFalse(node0.isDelProp());
1011:       assertFalse(node0.isInc());
1012:       assertFalse(node0.isTrue());
1013:       assertFalse(node0.isFunction());
1014:       assertFalse(node0.isThrow());
1015:       assertFalse(node0.isEmpty());
1016:       assertFalse(node0.isDefaultCase());
1017:       assertFalse(node0.isGetProp());
1018:       assertFalse(node0.isNull());
1019:       assertFalse(node0.isComma());
1020:       assertFalse(node0.isObjectLit());
1021:       assertFalse(node0.isFalse());
1022:       assertFalse(node0.isAnd());
1023:       assertFalse(node0.isCall());
1024:       assertFalse(node0.isBreak());
1025:       assertFalse(node0.isName());
1026:       assertFalse(node0.isVoid());
1027:       assertFalse(node0.isDebugger());
1028:       assertFalse(node0.isExprResult());
1029:       assertFalse(node0.isString());
1030:       assertFalse(node0.isNot());
1031:       assertFalse(node0.isWhile());
1032:       assertTrue(node0.isNumber());
1033:       assertEquals(2, Node.POST_FLAG);
1034:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1035:       assertEquals(56, Node.CHANGE_TIME);
1036:       assertEquals(37, Node.OPT_ARG_NAME);
1037:       assertEquals(47, Node.IS_DISPATCHER);
1038:       assertEquals(32, Node.INCRDECR_PROP);
1039:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1040:       assertEquals(12, Node.COLUMN_BITS);
1041:       assertEquals(30, Node.VAR_ARGS_NAME);
1042:       assertEquals(36, Node.QUOTED_PROP);
1043:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1044:       assertEquals(53, Node.INPUT_ID);
1045:       assertEquals(49, Node.DIRECT_EVAL);
1046:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1047:       assertEquals(57, Node.LAST_PROP);
1048:       assertEquals(55, Node.INFERRED_FUNCTION);
1049:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1050:       assertEquals(57, Node.REFLECTED_OBJECT);
1051:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1052:       assertEquals(29, Node.JSDOC_INFO_PROP);
1053:       assertEquals(52, Node.LENGTH);
1054:       assertEquals(8, Node.FLAG_NO_THROWS);
1055:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1056:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1057:       assertEquals(39, Node.EMPTY_BLOCK);
1058:       assertEquals(48, Node.DIRECTIVES);
1059:       assertEquals(4095, Node.COLUMN_MASK);
1060:       assertEquals(40, Node.ORIGINALNAME_PROP);
1061:       assertEquals(43, Node.IS_CONSTANT_NAME);
1062:       assertEquals(54, Node.SLASH_V);
1063:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1064:       assertEquals(1, Node.DECR_FLAG);
1065:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1066:       assertEquals(46, Node.IS_NAMESPACE);
1067:       assertEquals(50, Node.FREE_CALL);
1068:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1069:       assertFalse(iterable0.contains(node1));
1070:       assertNotNull(iterable0);
1071:       
1072:       boolean boolean3 = node0.isHook();
1073:       assertFalse(node0.equals((Object)node1));
1074:       assertTrue(boolean3 == boolean2);
1075:       assertTrue(boolean3 == boolean0);
1076:       assertTrue(boolean3 == boolean1);
1077:       assertFalse(node0.isLabel());
1078:       assertFalse(node0.isAssignAdd());
1079:       assertFalse(node0.isReturn());
1080:       assertFalse(node0.isDec());
1081:       assertEquals((-1), node0.getSourcePosition());
1082:       assertFalse(node0.hasChildren());
1083:       assertFalse(node0.hasMoreThanOneChild());
1084:       assertFalse(node0.isOr());
1085:       assertFalse(node0.isAssign());
1086:       assertFalse(node0.isTypeOf());
1087:       assertFalse(node0.isGetElem());
1088:       assertFalse(node0.isContinue());
1089:       assertFalse(node0.isCast());
1090:       assertEquals((-1), node0.getLineno());
1091:       assertFalse(node0.isLabelName());
1092:       assertFalse(node0.isNew());
1093:       assertFalse(node0.isAdd());
1094:       assertFalse(node0.isVar());
1095:       assertFalse(node0.isDo());
1096:       assertFalse(node0.isParamList());
1097:       assertFalse(node0.isSetterDef());
1098:       assertFalse(node0.isThis());
1099:       assertFalse(node0.isInstanceOf());
1100:       assertEquals(0, node0.getChildCount());
1101:       assertFalse(node0.isStringKey());
1102:       assertFalse(node0.isCatch());
1103:       assertEquals((-1), node0.getCharno());
1104:       assertFalse(node0.isScript());
1105:       assertFalse(node0.isBlock());
1106:       assertFalse(node0.isHook());
1107:       assertFalse(node0.isWith());
1108:       assertFalse(node0.isRegExp());
1109:       assertFalse(node0.isCase());
1110:       assertEquals(39, node0.getType());
1111:       assertFalse(node0.isFor());
1112:       assertFalse(node0.hasOneChild());
1113:       assertFalse(node0.isTry());
1114:       assertFalse(node0.isNE());
1115:       assertFalse(node0.isIn());
1116:       assertFalse(node0.isGetterDef());
1117:       assertFalse(node0.isIf());
1118:       assertFalse(node0.isArrayLit());
1119:       assertFalse(node0.isSwitch());
1120:       assertFalse(node0.isDelProp());
1121:       assertFalse(node0.isInc());
1122:       assertFalse(node0.isTrue());
1123:       assertFalse(node0.isFunction());
1124:       assertFalse(node0.isThrow());
1125:       assertFalse(node0.isEmpty());
1126:       assertFalse(node0.isDefaultCase());
1127:       assertFalse(node0.isGetProp());
1128:       assertFalse(node0.isNull());
1129:       assertFalse(node0.isComma());
1130:       assertFalse(node0.isObjectLit());
1131:       assertFalse(node0.isFalse());
1132:       assertFalse(node0.isAnd());
1133:       assertFalse(node0.isCall());
1134:       assertFalse(node0.isBreak());
1135:       assertFalse(node0.isName());
1136:       assertFalse(node0.isVoid());
1137:       assertFalse(node0.isDebugger());
1138:       assertFalse(node0.isExprResult());
1139:       assertFalse(node0.isString());
1140:       assertFalse(node0.isNot());
1141:       assertFalse(node0.isWhile());
1142:       assertTrue(node0.isNumber());
1143:       assertFalse(boolean3);
1144:       assertEquals(2, Node.POST_FLAG);
1145:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1146:       assertEquals(56, Node.CHANGE_TIME);
1147:       assertEquals(37, Node.OPT_ARG_NAME);
1148:       assertEquals(47, Node.IS_DISPATCHER);
1149:       assertEquals(32, Node.INCRDECR_PROP);
1150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1151:       assertEquals(12, Node.COLUMN_BITS);
1152:       assertEquals(30, Node.VAR_ARGS_NAME);
1153:       assertEquals(36, Node.QUOTED_PROP);
1154:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1155:       assertEquals(53, Node.INPUT_ID);
1156:       assertEquals(49, Node.DIRECT_EVAL);
1157:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1158:       assertEquals(57, Node.LAST_PROP);
1159:       assertEquals(55, Node.INFERRED_FUNCTION);
1160:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1161:       assertEquals(57, Node.REFLECTED_OBJECT);
1162:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1163:       assertEquals(29, Node.JSDOC_INFO_PROP);
1164:       assertEquals(52, Node.LENGTH);
1165:       assertEquals(8, Node.FLAG_NO_THROWS);
1166:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1167:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1168:       assertEquals(39, Node.EMPTY_BLOCK);
1169:       assertEquals(48, Node.DIRECTIVES);
1170:       assertEquals(4095, Node.COLUMN_MASK);
1171:       assertEquals(40, Node.ORIGINALNAME_PROP);
1172:       assertEquals(43, Node.IS_CONSTANT_NAME);
1173:       assertEquals(54, Node.SLASH_V);
1174:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1175:       assertEquals(1, Node.DECR_FLAG);
1176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1177:       assertEquals(46, Node.IS_NAMESPACE);
1178:       assertEquals(50, Node.FREE_CALL);
1179:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1180:       
1181:       boolean boolean4 = node0.isOnlyModifiesThisCall();
1182:       assertFalse(node0.equals((Object)node1));
1183:       assertTrue(boolean4 == boolean1);
1184:       assertTrue(boolean4 == boolean3);
1185:       assertTrue(boolean4 == boolean2);
1186:       assertTrue(boolean4 == boolean0);
1187:       assertFalse(node0.isLabel());
1188:       assertFalse(node0.isAssignAdd());
1189:       assertFalse(node0.isReturn());
1190:       assertFalse(node0.isDec());
1191:       assertEquals((-1), node0.getSourcePosition());
1192:       assertFalse(node0.hasChildren());
1193:       assertFalse(node0.hasMoreThanOneChild());
1194:       assertFalse(node0.isOr());
1195:       assertFalse(node0.isAssign());
1196:       assertFalse(node0.isTypeOf());
1197:       assertFalse(node0.isGetElem());
1198:       assertFalse(node0.isContinue());
1199:       assertFalse(node0.isCast());
1200:       assertEquals((-1), node0.getLineno());
1201:       assertFalse(node0.isLabelName());
1202:       assertFalse(node0.isNew());
1203:       assertFalse(node0.isAdd());
1204:       assertFalse(node0.isVar());
1205:       assertFalse(node0.isDo());
1206:       assertFalse(node0.isParamList());
1207:       assertFalse(node0.isSetterDef());
1208:       assertFalse(node0.isThis());
1209:       assertFalse(node0.isInstanceOf());
1210:       assertEquals(0, node0.getChildCount());
1211:       assertFalse(node0.isStringKey());
1212:       assertFalse(node0.isCatch());
1213:       assertEquals((-1), node0.getCharno());
1214:       assertFalse(node0.isScript());
1215:       assertFalse(node0.isBlock());
1216:       assertFalse(node0.isHook());
1217:       assertFalse(node0.isWith());
1218:       assertFalse(node0.isRegExp());
1219:       assertFalse(node0.isCase());
1220:       assertEquals(39, node0.getType());
1221:       assertFalse(node0.isFor());
1222:       assertFalse(node0.hasOneChild());
1223:       assertFalse(node0.isTry());
1224:       assertFalse(node0.isNE());
1225:       assertFalse(node0.isIn());
1226:       assertFalse(node0.isGetterDef());
1227:       assertFalse(node0.isIf());
1228:       assertFalse(node0.isArrayLit());
1229:       assertFalse(node0.isSwitch());
1230:       assertFalse(node0.isDelProp());
1231:       assertFalse(node0.isInc());
1232:       assertFalse(node0.isTrue());
1233:       assertFalse(node0.isFunction());
1234:       assertFalse(node0.isThrow());
1235:       assertFalse(node0.isEmpty());
1236:       assertFalse(node0.isDefaultCase());
1237:       assertFalse(node0.isGetProp());
1238:       assertFalse(node0.isNull());
1239:       assertFalse(node0.isComma());
1240:       assertFalse(node0.isObjectLit());
1241:       assertFalse(node0.isFalse());
1242:       assertFalse(node0.isAnd());
1243:       assertFalse(node0.isCall());
1244:       assertFalse(node0.isBreak());
1245:       assertFalse(node0.isName());
1246:       assertFalse(node0.isVoid());
1247:       assertFalse(node0.isDebugger());
1248:       assertFalse(node0.isExprResult());
1249:       assertFalse(node0.isString());
1250:       assertFalse(node0.isNot());
1251:       assertFalse(node0.isWhile());
1252:       assertTrue(node0.isNumber());
1253:       assertFalse(boolean4);
1254:       assertEquals(2, Node.POST_FLAG);
1255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1256:       assertEquals(56, Node.CHANGE_TIME);
1257:       assertEquals(37, Node.OPT_ARG_NAME);
1258:       assertEquals(47, Node.IS_DISPATCHER);
1259:       assertEquals(32, Node.INCRDECR_PROP);
1260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1261:       assertEquals(12, Node.COLUMN_BITS);
1262:       assertEquals(30, Node.VAR_ARGS_NAME);
1263:       assertEquals(36, Node.QUOTED_PROP);
1264:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1265:       assertEquals(53, Node.INPUT_ID);
1266:       assertEquals(49, Node.DIRECT_EVAL);
1267:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1268:       assertEquals(57, Node.LAST_PROP);
1269:       assertEquals(55, Node.INFERRED_FUNCTION);
1270:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1271:       assertEquals(57, Node.REFLECTED_OBJECT);
1272:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1273:       assertEquals(29, Node.JSDOC_INFO_PROP);
1274:       assertEquals(52, Node.LENGTH);
1275:       assertEquals(8, Node.FLAG_NO_THROWS);
1276:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1277:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1278:       assertEquals(39, Node.EMPTY_BLOCK);
1279:       assertEquals(48, Node.DIRECTIVES);
1280:       assertEquals(4095, Node.COLUMN_MASK);
1281:       assertEquals(40, Node.ORIGINALNAME_PROP);
1282:       assertEquals(43, Node.IS_CONSTANT_NAME);
1283:       assertEquals(54, Node.SLASH_V);
1284:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1285:       assertEquals(1, Node.DECR_FLAG);
1286:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1287:       assertEquals(46, Node.IS_NAMESPACE);
1288:       assertEquals(50, Node.FREE_CALL);
1289:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1290:   }
1291: }
RegularFileObject[/tmp/EvoSuite_63_1629222877802/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_63_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_63_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.common.collect.Iterables",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.common.collect.AbstractMultimap$Values",
132:       "com.google.javascript.rhino.jstype.ProxyObjectType",
133:       "com.google.common.collect.Sets$SetView",
134:       "com.google.common.collect.RegularImmutableAsList",
135:       "com.google.javascript.rhino.jstype.TemplateType",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMultimap$Entries",
190:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
191:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
192:       "com.google.javascript.rhino.jstype.EnumElementType",
193:       "com.google.javascript.rhino.jstype.UnionType",
194:       "com.google.common.base.Objects",
195:       "com.google.javascript.rhino.Node$NumberNode",
196:       "com.google.common.collect.SingletonImmutableList",
197:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
198:       "com.google.common.collect.ImmutableCollection$Builder",
199:       "com.google.javascript.rhino.jstype.StaticSlot",
200:       "com.google.common.collect.Iterators$6",
201:       "com.google.common.collect.BiMap",
202:       "com.google.common.collect.Iterators$7",
203:       "com.google.common.collect.AbstractSetMultimap",
204:       "com.google.common.base.Function",
205:       "com.google.common.collect.ImmutableSet",
206:       "com.google.common.collect.Lists$AbstractListWrapper",
207:       "com.google.common.collect.ImmutableMap",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.Maps$1",
211:       "com.google.javascript.rhino.jstype.EnumType",
212:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.Multimaps$Entries",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
236:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
237:       "com.google.common.collect.ImmutableList",
238:       "com.google.common.collect.SingletonImmutableBiMap",
239:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
240:       "com.google.javascript.rhino.jstype.StringType",
241:       "com.google.javascript.rhino.Node$AbstractPropListItem",
242:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
243:       "com.google.javascript.rhino.jstype.TemplatizedType",
244:       "com.google.javascript.rhino.jstype.Visitor",
245:       "com.google.javascript.rhino.jstype.NoResolvedType",
246:       "com.google.javascript.rhino.jstype.JSTypeNative",
247:       "com.google.javascript.rhino.jstype.AllType",
248:       "com.google.common.collect.Maps",
249:       "com.google.common.collect.SetMultimap",
250:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
251:       "com.google.common.collect.Maps$EntryTransformer",
252:       "com.google.javascript.rhino.JSTypeExpression",
253:       "com.google.common.collect.Iterators$MergingIterator"
254:     );
255:   } 
256: 
257:   private static void resetClasses() {
258:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_63_tmp__ESTest_scaffolding.class.getClassLoader()); 
259: 
260:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
261:       "com.google.javascript.rhino.Node",
262:       "com.google.javascript.rhino.Node$NumberNode",
263:       "com.google.javascript.rhino.Node$StringNode",
264:       "com.google.javascript.rhino.Node$AbstractPropListItem",
265:       "com.google.javascript.rhino.Node$ObjectPropListItem",
266:       "com.google.javascript.rhino.Node$IntPropListItem",
267:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
268:       "com.google.javascript.rhino.Node$AncestorIterable",
269:       "com.google.javascript.rhino.Node$NodeMismatch",
270:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
271:       "com.google.javascript.rhino.Node$SideEffectFlags",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.Token",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.base.Objects",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
352:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.common.collect.AbstractIndexedListIterator",
362:       "com.google.common.collect.Iterators$11",
363:       "com.google.javascript.rhino.Node$AncestorIterable$1",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.InputId",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.javascript.rhino.JSTypeExpression",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.Sets$ImprovedAbstractSet",
375:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
376:       "com.google.common.collect.Hashing",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
378:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
379:       "com.google.common.collect.Platform"
380:     );
381:   }
382: }

[MASTER] 17:54:38.193 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node0);

boolean boolean0 = node0.isQuotedString();
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(boolean0);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node1 = new Node(52, node0, 16, 132);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(132, node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isFunction());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertEquals(16, node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isOr());
assertEquals(52, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertTrue(node1.isInstanceOf());
assertFalse(node1.isName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isLabel());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(65668, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node1);

String string0 = node1.getQualifiedName();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(132, node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isFunction());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertEquals(16, node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isOr());
assertEquals(52, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertTrue(node1.isInstanceOf());
assertFalse(node1.isName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isLabel());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(65668, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNull(string0);

boolean boolean1 = node1.isEquivalentTo(node0, false, false, true);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(132, node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isFunction());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertEquals(16, node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isOr());
assertEquals(52, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertTrue(node1.isInstanceOf());
assertFalse(node1.isName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isLabel());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertEquals(65668, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(boolean1);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean2 = node0.isDo();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(boolean2);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);

boolean boolean3 = node0.isHook();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(boolean3);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

boolean boolean4 = node0.isOnlyModifiesThisCall();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(boolean4);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);


[MASTER] 17:54:38.386 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_64_1629222878195/com/google/javascript/rhino/Node_64_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_64_1629222878195/com/google/javascript/rhino/Node_64_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:38.386 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:38.387 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:38.388 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1179
[MASTER] 17:54:38.389 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_64_1629222878195/com/google/javascript/rhino/Node_64_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_64_tmp__ESTest extends Node_64_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(0.0);
23:       assertFalse(node0.isStringKey());
24:       assertFalse(node0.isVar());
25:       assertFalse(node0.isCall());
26:       assertFalse(node0.isNew());
27:       assertFalse(node0.isAdd());
28:       assertFalse(node0.isSetterDef());
29:       assertFalse(node0.isBlock());
30:       assertFalse(node0.isWhile());
31:       assertFalse(node0.isDo());
32:       assertFalse(node0.isCatch());
33:       assertEquals(39, node0.getType());
34:       assertFalse(node0.hasMoreThanOneChild());
35:       assertFalse(node0.isOr());
36:       assertFalse(node0.isRegExp());
37:       assertFalse(node0.isVoid());
38:       assertFalse(node0.isNull());
39:       assertFalse(node0.isTrue());
40:       assertEquals((-1), node0.getLineno());
41:       assertFalse(node0.isName());
42:       assertFalse(node0.isCast());
43:       assertFalse(node0.isGetElem());
44:       assertFalse(node0.hasChildren());
45:       assertEquals((-1), node0.getSourcePosition());
46:       assertFalse(node0.isDec());
47:       assertFalse(node0.isAssign());
48:       assertFalse(node0.isTypeOf());
49:       assertFalse(node0.isReturn());
50:       assertTrue(node0.isNumber());
51:       assertFalse(node0.isContinue());
52:       assertFalse(node0.isObjectLit());
53:       assertFalse(node0.isAnd());
54:       assertFalse(node0.isString());
55:       assertFalse(node0.isNot());
56:       assertFalse(node0.isFunction());
57:       assertFalse(node0.isDebugger());
58:       assertFalse(node0.isThrow());
59:       assertFalse(node0.isHook());
60:       assertFalse(node0.isFalse());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isComma());
63:       assertFalse(node0.isThis());
64:       assertFalse(node0.isInc());
65:       assertFalse(node0.isIn());
66:       assertFalse(node0.isInstanceOf());
67:       assertFalse(node0.isWith());
68:       assertFalse(node0.isNE());
69:       assertFalse(node0.isExprResult());
70:       assertFalse(node0.isIf());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isBreak());
73:       assertFalse(node0.isArrayLit());
74:       assertFalse(node0.isFor());
75:       assertFalse(node0.isEmpty());
76:       assertFalse(node0.isGetterDef());
77:       assertFalse(node0.isLabel());
78:       assertFalse(node0.isScript());
79:       assertFalse(node0.isDefaultCase());
80:       assertFalse(node0.hasOneChild());
81:       assertFalse(node0.isAssignAdd());
82:       assertFalse(node0.isTry());
83:       assertFalse(node0.isCase());
84:       assertEquals(0, node0.getChildCount());
85:       assertEquals((-1), node0.getCharno());
86:       assertFalse(node0.isParamList());
87:       assertFalse(node0.isLabelName());
88:       assertFalse(node0.isSwitch());
89:       assertEquals(57, Node.REFLECTED_OBJECT);
90:       assertEquals(40, Node.ORIGINALNAME_PROP);
91:       assertEquals(54, Node.SLASH_V);
92:       assertEquals(15, Node.NO_SIDE_EFFECTS);
93:       assertEquals(39, Node.EMPTY_BLOCK);
94:       assertEquals(50, Node.FREE_CALL);
95:       assertEquals(8, Node.FLAG_NO_THROWS);
96:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
97:       assertEquals(52, Node.LENGTH);
98:       assertEquals(12, Node.COLUMN_BITS);
99:       assertEquals(4095, Node.COLUMN_MASK);
100:       assertEquals(48, Node.DIRECTIVES);
101:       assertEquals(49, Node.DIRECT_EVAL);
102:       assertEquals(1, Node.DECR_FLAG);
103:       assertEquals(32, Node.INCRDECR_PROP);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(37, Node.OPT_ARG_NAME);
106:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
109:       assertEquals(43, Node.IS_CONSTANT_NAME);
110:       assertEquals(56, Node.CHANGE_TIME);
111:       assertEquals(36, Node.QUOTED_PROP);
112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
113:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
114:       assertEquals(53, Node.INPUT_ID);
115:       assertEquals(29, Node.JSDOC_INFO_PROP);
116:       assertEquals(51, Node.STATIC_SOURCE_FILE);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(46, Node.IS_NAMESPACE);
119:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(2, Node.POST_FLAG);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       assertEquals(30, Node.VAR_ARGS_NAME);
125:       assertNotNull(node0);
126:       
127:       Node node1 = Node.newString(0, "", 4, 38);
128:       assertFalse(node1.equals((Object)node0));
129:       assertFalse(node1.isAdd());
130:       assertFalse(node1.isNew());
131:       assertFalse(node1.isBlock());
132:       assertFalse(node1.isCall());
133:       assertFalse(node1.isName());
134:       assertEquals(38, node1.getCharno());
135:       assertFalse(node1.isParamList());
136:       assertFalse(node1.isNull());
137:       assertFalse(node1.isStringKey());
138:       assertFalse(node1.isReturn());
139:       assertFalse(node1.hasMoreThanOneChild());
140:       assertFalse(node1.isCatch());
141:       assertFalse(node1.isTypeOf());
142:       assertFalse(node1.isNumber());
143:       assertFalse(node1.isAssign());
144:       assertFalse(node1.isDec());
145:       assertFalse(node1.hasChildren());
146:       assertFalse(node1.isWhile());
147:       assertFalse(node1.isDebugger());
148:       assertFalse(node1.isFunction());
149:       assertFalse(node1.isCast());
150:       assertFalse(node1.isRegExp());
151:       assertFalse(node1.isNot());
152:       assertFalse(node1.isNE());
153:       assertFalse(node1.isIf());
154:       assertFalse(node1.isAnd());
155:       assertFalse(node1.isSetterDef());
156:       assertFalse(node1.isContinue());
157:       assertEquals(4, node1.getLineno());
158:       assertFalse(node1.isIn());
159:       assertFalse(node1.isThrow());
160:       assertEquals(0, node1.getType());
161:       assertFalse(node1.isHook());
162:       assertFalse(node1.isInc());
163:       assertFalse(node1.isFalse());
164:       assertFalse(node1.isString());
165:       assertFalse(node1.isBreak());
166:       assertFalse(node1.isSwitch());
167:       assertFalse(node1.isGetProp());
168:       assertFalse(node1.isComma());
169:       assertFalse(node1.isObjectLit());
170:       assertFalse(node1.isInstanceOf());
171:       assertFalse(node1.isWith());
172:       assertFalse(node1.isFor());
173:       assertFalse(node1.isCase());
174:       assertFalse(node1.isThis());
175:       assertFalse(node1.isTry());
176:       assertFalse(node1.hasOneChild());
177:       assertFalse(node1.isArrayLit());
178:       assertEquals(16422, node1.getSourcePosition());
179:       assertFalse(node1.isScript());
180:       assertFalse(node1.isExprResult());
181:       assertFalse(node1.isLabelName());
182:       assertFalse(node1.isGetterDef());
183:       assertFalse(node1.isDelProp());
184:       assertFalse(node1.isGetElem());
185:       assertFalse(node1.isTrue());
186:       assertFalse(node1.isVoid());
187:       assertFalse(node1.isOr());
188:       assertEquals(0, node1.getChildCount());
189:       assertFalse(node1.isLabel());
190:       assertFalse(node1.isDo());
191:       assertFalse(node1.isEmpty());
192:       assertFalse(node1.isVar());
193:       assertFalse(node1.isDefaultCase());
194:       assertFalse(node1.isAssignAdd());
195:       assertEquals(54, Node.SLASH_V);
196:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
197:       assertEquals(57, Node.LAST_PROP);
198:       assertEquals(57, Node.REFLECTED_OBJECT);
199:       assertEquals(40, Node.ORIGINALNAME_PROP);
200:       assertEquals(30, Node.VAR_ARGS_NAME);
201:       assertEquals(49, Node.DIRECT_EVAL);
202:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
203:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
204:       assertEquals(32, Node.INCRDECR_PROP);
205:       assertEquals(46, Node.IS_NAMESPACE);
206:       assertEquals(12, Node.COLUMN_BITS);
207:       assertEquals(50, Node.FREE_CALL);
208:       assertEquals(51, Node.STATIC_SOURCE_FILE);
209:       assertEquals(1, Node.DECR_FLAG);
210:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
212:       assertEquals(53, Node.INPUT_ID);
213:       assertEquals(36, Node.QUOTED_PROP);
214:       assertEquals(43, Node.IS_CONSTANT_NAME);
215:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
216:       assertEquals(4095, Node.COLUMN_MASK);
217:       assertEquals(48, Node.DIRECTIVES);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(39, Node.EMPTY_BLOCK);
220:       assertEquals(2, Node.POST_FLAG);
221:       assertEquals(37, Node.OPT_ARG_NAME);
222:       assertEquals(47, Node.IS_DISPATCHER);
223:       assertEquals(56, Node.CHANGE_TIME);
224:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
225:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
226:       assertEquals(52, Node.LENGTH);
227:       assertEquals(15, Node.NO_SIDE_EFFECTS);
228:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
229:       assertEquals(29, Node.JSDOC_INFO_PROP);
230:       assertEquals(55, Node.INFERRED_FUNCTION);
231:       assertNotNull(node1);
232:       
233:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
234:       assertFalse(node0.equals((Object)node1));
235:       assertFalse(node1.equals((Object)node0));
236:       assertFalse(node0.isStringKey());
237:       assertFalse(node0.isVar());
238:       assertFalse(node0.isCall());
239:       assertFalse(node0.isNew());
240:       assertFalse(node0.isAdd());
241:       assertFalse(node0.isSetterDef());
242:       assertFalse(node0.isBlock());
243:       assertFalse(node0.isWhile());
244:       assertFalse(node0.isDo());
245:       assertFalse(node0.isCatch());
246:       assertEquals(39, node0.getType());
247:       assertFalse(node0.hasMoreThanOneChild());
248:       assertFalse(node0.isOr());
249:       assertFalse(node0.isRegExp());
250:       assertFalse(node0.isVoid());
251:       assertFalse(node0.isNull());
252:       assertFalse(node0.isTrue());
253:       assertEquals((-1), node0.getLineno());
254:       assertFalse(node0.isName());
255:       assertFalse(node0.isCast());
256:       assertFalse(node0.isGetElem());
257:       assertFalse(node0.hasChildren());
258:       assertEquals((-1), node0.getSourcePosition());
259:       assertFalse(node0.isDec());
260:       assertFalse(node0.isAssign());
261:       assertFalse(node0.isTypeOf());
262:       assertFalse(node0.isReturn());
263:       assertTrue(node0.isNumber());
264:       assertFalse(node0.isContinue());
265:       assertFalse(node0.isObjectLit());
266:       assertFalse(node0.isAnd());
267:       assertFalse(node0.isString());
268:       assertFalse(node0.isNot());
269:       assertFalse(node0.isFunction());
270:       assertFalse(node0.isDebugger());
271:       assertFalse(node0.isThrow());
272:       assertFalse(node0.isHook());
273:       assertFalse(node0.isFalse());
274:       assertFalse(node0.isGetProp());
275:       assertFalse(node0.isComma());
276:       assertFalse(node0.isThis());
277:       assertFalse(node0.isInc());
278:       assertFalse(node0.isIn());
279:       assertFalse(node0.isInstanceOf());
280:       assertFalse(node0.isWith());
281:       assertFalse(node0.isNE());
282:       assertFalse(node0.isExprResult());
283:       assertFalse(node0.isIf());
284:       assertFalse(node0.isDelProp());
285:       assertFalse(node0.isBreak());
286:       assertFalse(node0.isArrayLit());
287:       assertFalse(node0.isFor());
288:       assertFalse(node0.isEmpty());
289:       assertFalse(node0.isGetterDef());
290:       assertFalse(node0.isLabel());
291:       assertFalse(node0.isScript());
292:       assertFalse(node0.isDefaultCase());
293:       assertFalse(node0.hasOneChild());
294:       assertFalse(node0.isAssignAdd());
295:       assertFalse(node0.isTry());
296:       assertFalse(node0.isCase());
297:       assertEquals(0, node0.getChildCount());
298:       assertEquals((-1), node0.getCharno());
299:       assertFalse(node0.isParamList());
300:       assertFalse(node0.isLabelName());
301:       assertFalse(node0.isSwitch());
302:       assertFalse(node1.isAdd());
303:       assertFalse(node1.isNew());
304:       assertFalse(node1.isBlock());
305:       assertFalse(node1.isCall());
306:       assertFalse(node1.isName());
307:       assertEquals(38, node1.getCharno());
308:       assertFalse(node1.isParamList());
309:       assertFalse(node1.isNull());
310:       assertFalse(node1.isStringKey());
311:       assertFalse(node1.isReturn());
312:       assertFalse(node1.hasMoreThanOneChild());
313:       assertFalse(node1.isCatch());
314:       assertFalse(node1.isTypeOf());
315:       assertFalse(node1.isNumber());
316:       assertFalse(node1.isAssign());
317:       assertFalse(node1.isDec());
318:       assertFalse(node1.hasChildren());
319:       assertFalse(node1.isWhile());
320:       assertFalse(node1.isDebugger());
321:       assertFalse(node1.isFunction());
322:       assertFalse(node1.isCast());
323:       assertFalse(node1.isRegExp());
324:       assertFalse(node1.isNot());
325:       assertFalse(node1.isNE());
326:       assertFalse(node1.isIf());
327:       assertFalse(node1.isAnd());
328:       assertFalse(node1.isSetterDef());
329:       assertFalse(node1.isContinue());
330:       assertEquals(4, node1.getLineno());
331:       assertFalse(node1.isIn());
332:       assertFalse(node1.isThrow());
333:       assertEquals(0, node1.getType());
334:       assertFalse(node1.isHook());
335:       assertFalse(node1.isInc());
336:       assertFalse(node1.isFalse());
337:       assertFalse(node1.isString());
338:       assertFalse(node1.isBreak());
339:       assertFalse(node1.isSwitch());
340:       assertFalse(node1.isGetProp());
341:       assertFalse(node1.isComma());
342:       assertFalse(node1.isObjectLit());
343:       assertFalse(node1.isInstanceOf());
344:       assertFalse(node1.isWith());
345:       assertFalse(node1.isFor());
346:       assertFalse(node1.isCase());
347:       assertFalse(node1.isThis());
348:       assertFalse(node1.isTry());
349:       assertFalse(node1.hasOneChild());
350:       assertFalse(node1.isArrayLit());
351:       assertEquals(16422, node1.getSourcePosition());
352:       assertFalse(node1.isScript());
353:       assertFalse(node1.isExprResult());
354:       assertFalse(node1.isLabelName());
355:       assertFalse(node1.isGetterDef());
356:       assertFalse(node1.isDelProp());
357:       assertFalse(node1.isGetElem());
358:       assertFalse(node1.isTrue());
359:       assertFalse(node1.isVoid());
360:       assertFalse(node1.isOr());
361:       assertEquals(0, node1.getChildCount());
362:       assertFalse(node1.isLabel());
363:       assertFalse(node1.isDo());
364:       assertFalse(node1.isEmpty());
365:       assertFalse(node1.isVar());
366:       assertFalse(node1.isDefaultCase());
367:       assertFalse(node1.isAssignAdd());
368:       assertEquals(57, Node.REFLECTED_OBJECT);
369:       assertEquals(40, Node.ORIGINALNAME_PROP);
370:       assertEquals(54, Node.SLASH_V);
371:       assertEquals(15, Node.NO_SIDE_EFFECTS);
372:       assertEquals(39, Node.EMPTY_BLOCK);
373:       assertEquals(50, Node.FREE_CALL);
374:       assertEquals(8, Node.FLAG_NO_THROWS);
375:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
376:       assertEquals(52, Node.LENGTH);
377:       assertEquals(12, Node.COLUMN_BITS);
378:       assertEquals(4095, Node.COLUMN_MASK);
379:       assertEquals(48, Node.DIRECTIVES);
380:       assertEquals(49, Node.DIRECT_EVAL);
381:       assertEquals(1, Node.DECR_FLAG);
382:       assertEquals(32, Node.INCRDECR_PROP);
383:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
384:       assertEquals(37, Node.OPT_ARG_NAME);
385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
386:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
387:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
388:       assertEquals(43, Node.IS_CONSTANT_NAME);
389:       assertEquals(56, Node.CHANGE_TIME);
390:       assertEquals(36, Node.QUOTED_PROP);
391:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
392:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
393:       assertEquals(53, Node.INPUT_ID);
394:       assertEquals(29, Node.JSDOC_INFO_PROP);
395:       assertEquals(51, Node.STATIC_SOURCE_FILE);
396:       assertEquals(55, Node.INFERRED_FUNCTION);
397:       assertEquals(46, Node.IS_NAMESPACE);
398:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
399:       assertEquals(57, Node.LAST_PROP);
400:       assertEquals(2, Node.POST_FLAG);
401:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
402:       assertEquals(47, Node.IS_DISPATCHER);
403:       assertEquals(30, Node.VAR_ARGS_NAME);
404:       assertEquals(54, Node.SLASH_V);
405:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
406:       assertEquals(57, Node.LAST_PROP);
407:       assertEquals(57, Node.REFLECTED_OBJECT);
408:       assertEquals(40, Node.ORIGINALNAME_PROP);
409:       assertEquals(30, Node.VAR_ARGS_NAME);
410:       assertEquals(49, Node.DIRECT_EVAL);
411:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
412:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
413:       assertEquals(32, Node.INCRDECR_PROP);
414:       assertEquals(46, Node.IS_NAMESPACE);
415:       assertEquals(12, Node.COLUMN_BITS);
416:       assertEquals(50, Node.FREE_CALL);
417:       assertEquals(51, Node.STATIC_SOURCE_FILE);
418:       assertEquals(1, Node.DECR_FLAG);
419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
420:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
421:       assertEquals(53, Node.INPUT_ID);
422:       assertEquals(36, Node.QUOTED_PROP);
423:       assertEquals(43, Node.IS_CONSTANT_NAME);
424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
425:       assertEquals(4095, Node.COLUMN_MASK);
426:       assertEquals(48, Node.DIRECTIVES);
427:       assertEquals(8, Node.FLAG_NO_THROWS);
428:       assertEquals(39, Node.EMPTY_BLOCK);
429:       assertEquals(2, Node.POST_FLAG);
430:       assertEquals(37, Node.OPT_ARG_NAME);
431:       assertEquals(47, Node.IS_DISPATCHER);
432:       assertEquals(56, Node.CHANGE_TIME);
433:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
435:       assertEquals(52, Node.LENGTH);
436:       assertEquals(15, Node.NO_SIDE_EFFECTS);
437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
438:       assertEquals(29, Node.JSDOC_INFO_PROP);
439:       assertEquals(55, Node.INFERRED_FUNCTION);
440:       assertNotNull(node_NodeMismatch0);
441:       
442:       boolean boolean0 = node_NodeMismatch0.equals("");
443:       assertFalse(node0.equals((Object)node1));
444:       assertFalse(node1.equals((Object)node0));
445:       assertFalse(node0.isStringKey());
446:       assertFalse(node0.isVar());
447:       assertFalse(node0.isCall());
448:       assertFalse(node0.isNew());
449:       assertFalse(node0.isAdd());
450:       assertFalse(node0.isSetterDef());
451:       assertFalse(node0.isBlock());
452:       assertFalse(node0.isWhile());
453:       assertFalse(node0.isDo());
454:       assertFalse(node0.isCatch());
455:       assertEquals(39, node0.getType());
456:       assertFalse(node0.hasMoreThanOneChild());
457:       assertFalse(node0.isOr());
458:       assertFalse(node0.isRegExp());
459:       assertFalse(node0.isVoid());
460:       assertFalse(node0.isNull());
461:       assertFalse(node0.isTrue());
462:       assertEquals((-1), node0.getLineno());
463:       assertFalse(node0.isName());
464:       assertFalse(node0.isCast());
465:       assertFalse(node0.isGetElem());
466:       assertFalse(node0.hasChildren());
467:       assertEquals((-1), node0.getSourcePosition());
468:       assertFalse(node0.isDec());
469:       assertFalse(node0.isAssign());
470:       assertFalse(node0.isTypeOf());
471:       assertFalse(node0.isReturn());
472:       assertTrue(node0.isNumber());
473:       assertFalse(node0.isContinue());
474:       assertFalse(node0.isObjectLit());
475:       assertFalse(node0.isAnd());
476:       assertFalse(node0.isString());
477:       assertFalse(node0.isNot());
478:       assertFalse(node0.isFunction());
479:       assertFalse(node0.isDebugger());
480:       assertFalse(node0.isThrow());
481:       assertFalse(node0.isHook());
482:       assertFalse(node0.isFalse());
483:       assertFalse(node0.isGetProp());
484:       assertFalse(node0.isComma());
485:       assertFalse(node0.isThis());
486:       assertFalse(node0.isInc());
487:       assertFalse(node0.isIn());
488:       assertFalse(node0.isInstanceOf());
489:       assertFalse(node0.isWith());
490:       assertFalse(node0.isNE());
491:       assertFalse(node0.isExprResult());
492:       assertFalse(node0.isIf());
493:       assertFalse(node0.isDelProp());
494:       assertFalse(node0.isBreak());
495:       assertFalse(node0.isArrayLit());
496:       assertFalse(node0.isFor());
497:       assertFalse(node0.isEmpty());
498:       assertFalse(node0.isGetterDef());
499:       assertFalse(node0.isLabel());
500:       assertFalse(node0.isScript());
501:       assertFalse(node0.isDefaultCase());
502:       assertFalse(node0.hasOneChild());
503:       assertFalse(node0.isAssignAdd());
504:       assertFalse(node0.isTry());
505:       assertFalse(node0.isCase());
506:       assertEquals(0, node0.getChildCount());
507:       assertEquals((-1), node0.getCharno());
508:       assertFalse(node0.isParamList());
509:       assertFalse(node0.isLabelName());
510:       assertFalse(node0.isSwitch());
511:       assertFalse(node1.isAdd());
512:       assertFalse(node1.isNew());
513:       assertFalse(node1.isBlock());
514:       assertFalse(node1.isCall());
515:       assertFalse(node1.isName());
516:       assertEquals(38, node1.getCharno());
517:       assertFalse(node1.isParamList());
518:       assertFalse(node1.isNull());
519:       assertFalse(node1.isStringKey());
520:       assertFalse(node1.isReturn());
521:       assertFalse(node1.hasMoreThanOneChild());
522:       assertFalse(node1.isCatch());
523:       assertFalse(node1.isTypeOf());
524:       assertFalse(node1.isNumber());
525:       assertFalse(node1.isAssign());
526:       assertFalse(node1.isDec());
527:       assertFalse(node1.hasChildren());
528:       assertFalse(node1.isWhile());
529:       assertFalse(node1.isDebugger());
530:       assertFalse(node1.isFunction());
531:       assertFalse(node1.isCast());
532:       assertFalse(node1.isRegExp());
533:       assertFalse(node1.isNot());
534:       assertFalse(node1.isNE());
535:       assertFalse(node1.isIf());
536:       assertFalse(node1.isAnd());
537:       assertFalse(node1.isSetterDef());
538:       assertFalse(node1.isContinue());
539:       assertEquals(4, node1.getLineno());
540:       assertFalse(node1.isIn());
541:       assertFalse(node1.isThrow());
542:       assertEquals(0, node1.getType());
543:       assertFalse(node1.isHook());
544:       assertFalse(node1.isInc());
545:       assertFalse(node1.isFalse());
546:       assertFalse(node1.isString());
547:       assertFalse(node1.isBreak());
548:       assertFalse(node1.isSwitch());
549:       assertFalse(node1.isGetProp());
550:       assertFalse(node1.isComma());
551:       assertFalse(node1.isObjectLit());
552:       assertFalse(node1.isInstanceOf());
553:       assertFalse(node1.isWith());
554:       assertFalse(node1.isFor());
555:       assertFalse(node1.isCase());
556:       assertFalse(node1.isThis());
557:       assertFalse(node1.isTry());
558:       assertFalse(node1.hasOneChild());
559:       assertFalse(node1.isArrayLit());
560:       assertEquals(16422, node1.getSourcePosition());
561:       assertFalse(node1.isScript());
562:       assertFalse(node1.isExprResult());
563:       assertFalse(node1.isLabelName());
564:       assertFalse(node1.isGetterDef());
565:       assertFalse(node1.isDelProp());
566:       assertFalse(node1.isGetElem());
567:       assertFalse(node1.isTrue());
568:       assertFalse(node1.isVoid());
569:       assertFalse(node1.isOr());
570:       assertEquals(0, node1.getChildCount());
571:       assertFalse(node1.isLabel());
572:       assertFalse(node1.isDo());
573:       assertFalse(node1.isEmpty());
574:       assertFalse(node1.isVar());
575:       assertFalse(node1.isDefaultCase());
576:       assertFalse(node1.isAssignAdd());
577:       assertFalse(boolean0);
578:       assertEquals(57, Node.REFLECTED_OBJECT);
579:       assertEquals(40, Node.ORIGINALNAME_PROP);
580:       assertEquals(54, Node.SLASH_V);
581:       assertEquals(15, Node.NO_SIDE_EFFECTS);
582:       assertEquals(39, Node.EMPTY_BLOCK);
583:       assertEquals(50, Node.FREE_CALL);
584:       assertEquals(8, Node.FLAG_NO_THROWS);
585:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
586:       assertEquals(52, Node.LENGTH);
587:       assertEquals(12, Node.COLUMN_BITS);
588:       assertEquals(4095, Node.COLUMN_MASK);
589:       assertEquals(48, Node.DIRECTIVES);
590:       assertEquals(49, Node.DIRECT_EVAL);
591:       assertEquals(1, Node.DECR_FLAG);
592:       assertEquals(32, Node.INCRDECR_PROP);
593:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
594:       assertEquals(37, Node.OPT_ARG_NAME);
595:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
596:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
597:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
598:       assertEquals(43, Node.IS_CONSTANT_NAME);
599:       assertEquals(56, Node.CHANGE_TIME);
600:       assertEquals(36, Node.QUOTED_PROP);
601:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
602:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
603:       assertEquals(53, Node.INPUT_ID);
604:       assertEquals(29, Node.JSDOC_INFO_PROP);
605:       assertEquals(51, Node.STATIC_SOURCE_FILE);
606:       assertEquals(55, Node.INFERRED_FUNCTION);
607:       assertEquals(46, Node.IS_NAMESPACE);
608:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
609:       assertEquals(57, Node.LAST_PROP);
610:       assertEquals(2, Node.POST_FLAG);
611:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
612:       assertEquals(47, Node.IS_DISPATCHER);
613:       assertEquals(30, Node.VAR_ARGS_NAME);
614:       assertEquals(54, Node.SLASH_V);
615:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
616:       assertEquals(57, Node.LAST_PROP);
617:       assertEquals(57, Node.REFLECTED_OBJECT);
618:       assertEquals(40, Node.ORIGINALNAME_PROP);
619:       assertEquals(30, Node.VAR_ARGS_NAME);
620:       assertEquals(49, Node.DIRECT_EVAL);
621:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
622:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
623:       assertEquals(32, Node.INCRDECR_PROP);
624:       assertEquals(46, Node.IS_NAMESPACE);
625:       assertEquals(12, Node.COLUMN_BITS);
626:       assertEquals(50, Node.FREE_CALL);
627:       assertEquals(51, Node.STATIC_SOURCE_FILE);
628:       assertEquals(1, Node.DECR_FLAG);
629:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
630:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
631:       assertEquals(53, Node.INPUT_ID);
632:       assertEquals(36, Node.QUOTED_PROP);
633:       assertEquals(43, Node.IS_CONSTANT_NAME);
634:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
635:       assertEquals(4095, Node.COLUMN_MASK);
636:       assertEquals(48, Node.DIRECTIVES);
637:       assertEquals(8, Node.FLAG_NO_THROWS);
638:       assertEquals(39, Node.EMPTY_BLOCK);
639:       assertEquals(2, Node.POST_FLAG);
640:       assertEquals(37, Node.OPT_ARG_NAME);
641:       assertEquals(47, Node.IS_DISPATCHER);
642:       assertEquals(56, Node.CHANGE_TIME);
643:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
644:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
645:       assertEquals(52, Node.LENGTH);
646:       assertEquals(15, Node.NO_SIDE_EFFECTS);
647:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
648:       assertEquals(29, Node.JSDOC_INFO_PROP);
649:       assertEquals(55, Node.INFERRED_FUNCTION);
650:       
651:       Set<String> set0 = node1.getDirectives();
652:       assertFalse(node1.equals((Object)node0));
653:       assertFalse(node1.isAdd());
654:       assertFalse(node1.isNew());
655:       assertFalse(node1.isBlock());
656:       assertFalse(node1.isCall());
657:       assertFalse(node1.isName());
658:       assertEquals(38, node1.getCharno());
659:       assertFalse(node1.isParamList());
660:       assertFalse(node1.isNull());
661:       assertFalse(node1.isStringKey());
662:       assertFalse(node1.isReturn());
663:       assertFalse(node1.hasMoreThanOneChild());
664:       assertFalse(node1.isCatch());
665:       assertFalse(node1.isTypeOf());
666:       assertFalse(node1.isNumber());
667:       assertFalse(node1.isAssign());
668:       assertFalse(node1.isDec());
669:       assertFalse(node1.hasChildren());
670:       assertFalse(node1.isWhile());
671:       assertFalse(node1.isDebugger());
672:       assertFalse(node1.isFunction());
673:       assertFalse(node1.isCast());
674:       assertFalse(node1.isRegExp());
675:       assertFalse(node1.isNot());
676:       assertFalse(node1.isNE());
677:       assertFalse(node1.isIf());
678:       assertFalse(node1.isAnd());
679:       assertFalse(node1.isSetterDef());
680:       assertFalse(node1.isContinue());
681:       assertEquals(4, node1.getLineno());
682:       assertFalse(node1.isIn());
683:       assertFalse(node1.isThrow());
684:       assertEquals(0, node1.getType());
685:       assertFalse(node1.isHook());
686:       assertFalse(node1.isInc());
687:       assertFalse(node1.isFalse());
688:       assertFalse(node1.isString());
689:       assertFalse(node1.isBreak());
690:       assertFalse(node1.isSwitch());
691:       assertFalse(node1.isGetProp());
692:       assertFalse(node1.isComma());
693:       assertFalse(node1.isObjectLit());
694:       assertFalse(node1.isInstanceOf());
695:       assertFalse(node1.isWith());
696:       assertFalse(node1.isFor());
697:       assertFalse(node1.isCase());
698:       assertFalse(node1.isThis());
699:       assertFalse(node1.isTry());
700:       assertFalse(node1.hasOneChild());
701:       assertFalse(node1.isArrayLit());
702:       assertEquals(16422, node1.getSourcePosition());
703:       assertFalse(node1.isScript());
704:       assertFalse(node1.isExprResult());
705:       assertFalse(node1.isLabelName());
706:       assertFalse(node1.isGetterDef());
707:       assertFalse(node1.isDelProp());
708:       assertFalse(node1.isGetElem());
709:       assertFalse(node1.isTrue());
710:       assertFalse(node1.isVoid());
711:       assertFalse(node1.isOr());
712:       assertEquals(0, node1.getChildCount());
713:       assertFalse(node1.isLabel());
714:       assertFalse(node1.isDo());
715:       assertFalse(node1.isEmpty());
716:       assertFalse(node1.isVar());
717:       assertFalse(node1.isDefaultCase());
718:       assertFalse(node1.isAssignAdd());
719:       assertEquals(54, Node.SLASH_V);
720:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
721:       assertEquals(57, Node.LAST_PROP);
722:       assertEquals(57, Node.REFLECTED_OBJECT);
723:       assertEquals(40, Node.ORIGINALNAME_PROP);
724:       assertEquals(30, Node.VAR_ARGS_NAME);
725:       assertEquals(49, Node.DIRECT_EVAL);
726:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
727:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
728:       assertEquals(32, Node.INCRDECR_PROP);
729:       assertEquals(46, Node.IS_NAMESPACE);
730:       assertEquals(12, Node.COLUMN_BITS);
731:       assertEquals(50, Node.FREE_CALL);
732:       assertEquals(51, Node.STATIC_SOURCE_FILE);
733:       assertEquals(1, Node.DECR_FLAG);
734:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
735:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
736:       assertEquals(53, Node.INPUT_ID);
737:       assertEquals(36, Node.QUOTED_PROP);
738:       assertEquals(43, Node.IS_CONSTANT_NAME);
739:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
740:       assertEquals(4095, Node.COLUMN_MASK);
741:       assertEquals(48, Node.DIRECTIVES);
742:       assertEquals(8, Node.FLAG_NO_THROWS);
743:       assertEquals(39, Node.EMPTY_BLOCK);
744:       assertEquals(2, Node.POST_FLAG);
745:       assertEquals(37, Node.OPT_ARG_NAME);
746:       assertEquals(47, Node.IS_DISPATCHER);
747:       assertEquals(56, Node.CHANGE_TIME);
748:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
749:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
750:       assertEquals(52, Node.LENGTH);
751:       assertEquals(15, Node.NO_SIDE_EFFECTS);
752:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
753:       assertEquals(29, Node.JSDOC_INFO_PROP);
754:       assertEquals(55, Node.INFERRED_FUNCTION);
755:       assertNull(set0);
756:       
757:       boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
758:       assertFalse(node0.equals((Object)node1));
759:       assertFalse(node1.equals((Object)node0));
760:       assertTrue(boolean1 == boolean0);
761:       assertFalse(node0.isStringKey());
762:       assertFalse(node0.isVar());
763:       assertFalse(node0.isCall());
764:       assertFalse(node0.isNew());
765:       assertFalse(node0.isAdd());
766:       assertFalse(node0.isSetterDef());
767:       assertFalse(node0.isBlock());
768:       assertFalse(node0.isWhile());
769:       assertFalse(node0.isDo());
770:       assertFalse(node0.isCatch());
771:       assertEquals(39, node0.getType());
772:       assertFalse(node0.hasMoreThanOneChild());
773:       assertFalse(node0.isOr());
774:       assertFalse(node0.isRegExp());
775:       assertFalse(node0.isVoid());
776:       assertFalse(node0.isNull());
777:       assertFalse(node0.isTrue());
778:       assertEquals((-1), node0.getLineno());
779:       assertFalse(node0.isName());
780:       assertFalse(node0.isCast());
781:       assertFalse(node0.isGetElem());
782:       assertFalse(node0.hasChildren());
783:       assertEquals((-1), node0.getSourcePosition());
784:       assertFalse(node0.isDec());
785:       assertFalse(node0.isAssign());
786:       assertFalse(node0.isTypeOf());
787:       assertFalse(node0.isReturn());
788:       assertTrue(node0.isNumber());
789:       assertFalse(node0.isContinue());
790:       assertFalse(node0.isObjectLit());
791:       assertFalse(node0.isAnd());
792:       assertFalse(node0.isString());
793:       assertFalse(node0.isNot());
794:       assertFalse(node0.isFunction());
795:       assertFalse(node0.isDebugger());
796:       assertFalse(node0.isThrow());
797:       assertFalse(node0.isHook());
798:       assertFalse(node0.isFalse());
799:       assertFalse(node0.isGetProp());
800:       assertFalse(node0.isComma());
801:       assertFalse(node0.isThis());
802:       assertFalse(node0.isInc());
803:       assertFalse(node0.isIn());
804:       assertFalse(node0.isInstanceOf());
805:       assertFalse(node0.isWith());
806:       assertFalse(node0.isNE());
807:       assertFalse(node0.isExprResult());
808:       assertFalse(node0.isIf());
809:       assertFalse(node0.isDelProp());
810:       assertFalse(node0.isBreak());
811:       assertFalse(node0.isArrayLit());
812:       assertFalse(node0.isFor());
813:       assertFalse(node0.isEmpty());
814:       assertFalse(node0.isGetterDef());
815:       assertFalse(node0.isLabel());
816:       assertFalse(node0.isScript());
817:       assertFalse(node0.isDefaultCase());
818:       assertFalse(node0.hasOneChild());
819:       assertFalse(node0.isAssignAdd());
820:       assertFalse(node0.isTry());
821:       assertFalse(node0.isCase());
822:       assertEquals(0, node0.getChildCount());
823:       assertEquals((-1), node0.getCharno());
824:       assertFalse(node0.isParamList());
825:       assertFalse(node0.isLabelName());
826:       assertFalse(node0.isSwitch());
827:       assertFalse(node1.isAdd());
828:       assertFalse(node1.isNew());
829:       assertFalse(node1.isBlock());
830:       assertFalse(node1.isCall());
831:       assertFalse(node1.isName());
832:       assertEquals(38, node1.getCharno());
833:       assertFalse(node1.isParamList());
834:       assertFalse(node1.isNull());
835:       assertFalse(node1.isStringKey());
836:       assertFalse(node1.isReturn());
837:       assertFalse(node1.hasMoreThanOneChild());
838:       assertFalse(node1.isCatch());
839:       assertFalse(node1.isTypeOf());
840:       assertFalse(node1.isNumber());
841:       assertFalse(node1.isAssign());
842:       assertFalse(node1.isDec());
843:       assertFalse(node1.hasChildren());
844:       assertFalse(node1.isWhile());
845:       assertFalse(node1.isDebugger());
846:       assertFalse(node1.isFunction());
847:       assertFalse(node1.isCast());
848:       assertFalse(node1.isRegExp());
849:       assertFalse(node1.isNot());
850:       assertFalse(node1.isNE());
851:       assertFalse(node1.isIf());
852:       assertFalse(node1.isAnd());
853:       assertFalse(node1.isSetterDef());
854:       assertFalse(node1.isContinue());
855:       assertEquals(4, node1.getLineno());
856:       assertFalse(node1.isIn());
857:       assertFalse(node1.isThrow());
858:       assertEquals(0, node1.getType());
859:       assertFalse(node1.isHook());
860:       assertFalse(node1.isInc());
861:       assertFalse(node1.isFalse());
862:       assertFalse(node1.isString());
863:       assertFalse(node1.isBreak());
864:       assertFalse(node1.isSwitch());
865:       assertFalse(node1.isGetProp());
866:       assertFalse(node1.isComma());
867:       assertFalse(node1.isObjectLit());
868:       assertFalse(node1.isInstanceOf());
869:       assertFalse(node1.isWith());
870:       assertFalse(node1.isFor());
871:       assertFalse(node1.isCase());
872:       assertFalse(node1.isThis());
873:       assertFalse(node1.isTry());
874:       assertFalse(node1.hasOneChild());
875:       assertFalse(node1.isArrayLit());
876:       assertEquals(16422, node1.getSourcePosition());
877:       assertFalse(node1.isScript());
878:       assertFalse(node1.isExprResult());
879:       assertFalse(node1.isLabelName());
880:       assertFalse(node1.isGetterDef());
881:       assertFalse(node1.isDelProp());
882:       assertFalse(node1.isGetElem());
883:       assertFalse(node1.isTrue());
884:       assertFalse(node1.isVoid());
885:       assertFalse(node1.isOr());
886:       assertEquals(0, node1.getChildCount());
887:       assertFalse(node1.isLabel());
888:       assertFalse(node1.isDo());
889:       assertFalse(node1.isEmpty());
890:       assertFalse(node1.isVar());
891:       assertFalse(node1.isDefaultCase());
892:       assertFalse(node1.isAssignAdd());
893:       assertFalse(boolean1);
894:       assertEquals(57, Node.REFLECTED_OBJECT);
895:       assertEquals(40, Node.ORIGINALNAME_PROP);
896:       assertEquals(54, Node.SLASH_V);
897:       assertEquals(15, Node.NO_SIDE_EFFECTS);
898:       assertEquals(39, Node.EMPTY_BLOCK);
899:       assertEquals(50, Node.FREE_CALL);
900:       assertEquals(8, Node.FLAG_NO_THROWS);
901:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
902:       assertEquals(52, Node.LENGTH);
903:       assertEquals(12, Node.COLUMN_BITS);
904:       assertEquals(4095, Node.COLUMN_MASK);
905:       assertEquals(48, Node.DIRECTIVES);
906:       assertEquals(49, Node.DIRECT_EVAL);
907:       assertEquals(1, Node.DECR_FLAG);
908:       assertEquals(32, Node.INCRDECR_PROP);
909:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
910:       assertEquals(37, Node.OPT_ARG_NAME);
911:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
912:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
913:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
914:       assertEquals(43, Node.IS_CONSTANT_NAME);
915:       assertEquals(56, Node.CHANGE_TIME);
916:       assertEquals(36, Node.QUOTED_PROP);
917:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
918:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
919:       assertEquals(53, Node.INPUT_ID);
920:       assertEquals(29, Node.JSDOC_INFO_PROP);
921:       assertEquals(51, Node.STATIC_SOURCE_FILE);
922:       assertEquals(55, Node.INFERRED_FUNCTION);
923:       assertEquals(46, Node.IS_NAMESPACE);
924:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
925:       assertEquals(57, Node.LAST_PROP);
926:       assertEquals(2, Node.POST_FLAG);
927:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
928:       assertEquals(47, Node.IS_DISPATCHER);
929:       assertEquals(30, Node.VAR_ARGS_NAME);
930:       assertEquals(54, Node.SLASH_V);
931:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
932:       assertEquals(57, Node.LAST_PROP);
933:       assertEquals(57, Node.REFLECTED_OBJECT);
934:       assertEquals(40, Node.ORIGINALNAME_PROP);
935:       assertEquals(30, Node.VAR_ARGS_NAME);
936:       assertEquals(49, Node.DIRECT_EVAL);
937:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
938:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
939:       assertEquals(32, Node.INCRDECR_PROP);
940:       assertEquals(46, Node.IS_NAMESPACE);
941:       assertEquals(12, Node.COLUMN_BITS);
942:       assertEquals(50, Node.FREE_CALL);
943:       assertEquals(51, Node.STATIC_SOURCE_FILE);
944:       assertEquals(1, Node.DECR_FLAG);
945:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
946:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
947:       assertEquals(53, Node.INPUT_ID);
948:       assertEquals(36, Node.QUOTED_PROP);
949:       assertEquals(43, Node.IS_CONSTANT_NAME);
950:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
951:       assertEquals(4095, Node.COLUMN_MASK);
952:       assertEquals(48, Node.DIRECTIVES);
953:       assertEquals(8, Node.FLAG_NO_THROWS);
954:       assertEquals(39, Node.EMPTY_BLOCK);
955:       assertEquals(2, Node.POST_FLAG);
956:       assertEquals(37, Node.OPT_ARG_NAME);
957:       assertEquals(47, Node.IS_DISPATCHER);
958:       assertEquals(56, Node.CHANGE_TIME);
959:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
960:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
961:       assertEquals(52, Node.LENGTH);
962:       assertEquals(15, Node.NO_SIDE_EFFECTS);
963:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
964:       assertEquals(29, Node.JSDOC_INFO_PROP);
965:       assertEquals(55, Node.INFERRED_FUNCTION);
966:       
967:       boolean boolean2 = node1.isVarArgs();
968:       assertFalse(node1.equals((Object)node0));
969:       assertTrue(boolean2 == boolean1);
970:       assertTrue(boolean2 == boolean0);
971:       assertFalse(node1.isAdd());
972:       assertFalse(node1.isNew());
973:       assertFalse(node1.isBlock());
974:       assertFalse(node1.isCall());
975:       assertFalse(node1.isName());
976:       assertEquals(38, node1.getCharno());
977:       assertFalse(node1.isParamList());
978:       assertFalse(node1.isNull());
979:       assertFalse(node1.isStringKey());
980:       assertFalse(node1.isReturn());
981:       assertFalse(node1.hasMoreThanOneChild());
982:       assertFalse(node1.isCatch());
983:       assertFalse(node1.isTypeOf());
984:       assertFalse(node1.isNumber());
985:       assertFalse(node1.isAssign());
986:       assertFalse(node1.isDec());
987:       assertFalse(node1.hasChildren());
988:       assertFalse(node1.isWhile());
989:       assertFalse(node1.isDebugger());
990:       assertFalse(node1.isFunction());
991:       assertFalse(node1.isCast());
992:       assertFalse(node1.isRegExp());
993:       assertFalse(node1.isNot());
994:       assertFalse(node1.isNE());
995:       assertFalse(node1.isIf());
996:       assertFalse(node1.isAnd());
997:       assertFalse(node1.isSetterDef());
998:       assertFalse(node1.isContinue());
999:       assertEquals(4, node1.getLineno());
1000:       assertFalse(node1.isIn());
1001:       assertFalse(node1.isThrow());
1002:       assertEquals(0, node1.getType());
1003:       assertFalse(node1.isHook());
1004:       assertFalse(node1.isInc());
1005:       assertFalse(node1.isFalse());
1006:       assertFalse(node1.isString());
1007:       assertFalse(node1.isBreak());
1008:       assertFalse(node1.isSwitch());
1009:       assertFalse(node1.isGetProp());
1010:       assertFalse(node1.isComma());
1011:       assertFalse(node1.isObjectLit());
1012:       assertFalse(node1.isInstanceOf());
1013:       assertFalse(node1.isWith());
1014:       assertFalse(node1.isFor());
1015:       assertFalse(node1.isCase());
1016:       assertFalse(node1.isThis());
1017:       assertFalse(node1.isTry());
1018:       assertFalse(node1.hasOneChild());
1019:       assertFalse(node1.isArrayLit());
1020:       assertEquals(16422, node1.getSourcePosition());
1021:       assertFalse(node1.isScript());
1022:       assertFalse(node1.isExprResult());
1023:       assertFalse(node1.isLabelName());
1024:       assertFalse(node1.isGetterDef());
1025:       assertFalse(node1.isDelProp());
1026:       assertFalse(node1.isGetElem());
1027:       assertFalse(node1.isTrue());
1028:       assertFalse(node1.isVoid());
1029:       assertFalse(node1.isOr());
1030:       assertEquals(0, node1.getChildCount());
1031:       assertFalse(node1.isLabel());
1032:       assertFalse(node1.isDo());
1033:       assertFalse(node1.isEmpty());
1034:       assertFalse(node1.isVar());
1035:       assertFalse(node1.isDefaultCase());
1036:       assertFalse(node1.isAssignAdd());
1037:       assertFalse(boolean2);
1038:       assertEquals(54, Node.SLASH_V);
1039:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1040:       assertEquals(57, Node.LAST_PROP);
1041:       assertEquals(57, Node.REFLECTED_OBJECT);
1042:       assertEquals(40, Node.ORIGINALNAME_PROP);
1043:       assertEquals(30, Node.VAR_ARGS_NAME);
1044:       assertEquals(49, Node.DIRECT_EVAL);
1045:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1046:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1047:       assertEquals(32, Node.INCRDECR_PROP);
1048:       assertEquals(46, Node.IS_NAMESPACE);
1049:       assertEquals(12, Node.COLUMN_BITS);
1050:       assertEquals(50, Node.FREE_CALL);
1051:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1052:       assertEquals(1, Node.DECR_FLAG);
1053:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1054:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1055:       assertEquals(53, Node.INPUT_ID);
1056:       assertEquals(36, Node.QUOTED_PROP);
1057:       assertEquals(43, Node.IS_CONSTANT_NAME);
1058:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1059:       assertEquals(4095, Node.COLUMN_MASK);
1060:       assertEquals(48, Node.DIRECTIVES);
1061:       assertEquals(8, Node.FLAG_NO_THROWS);
1062:       assertEquals(39, Node.EMPTY_BLOCK);
1063:       assertEquals(2, Node.POST_FLAG);
1064:       assertEquals(37, Node.OPT_ARG_NAME);
1065:       assertEquals(47, Node.IS_DISPATCHER);
1066:       assertEquals(56, Node.CHANGE_TIME);
1067:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1068:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1069:       assertEquals(52, Node.LENGTH);
1070:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1071:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1072:       assertEquals(29, Node.JSDOC_INFO_PROP);
1073:       assertEquals(55, Node.INFERRED_FUNCTION);
1074:       
1075:       Iterable<Node> iterable0 = node0.children();
1076:       assertFalse(node0.equals((Object)node1));
1077:       assertFalse(node0.isStringKey());
1078:       assertFalse(node0.isVar());
1079:       assertFalse(node0.isCall());
1080:       assertFalse(node0.isNew());
1081:       assertFalse(node0.isAdd());
1082:       assertFalse(node0.isSetterDef());
1083:       assertFalse(node0.isBlock());
1084:       assertFalse(node0.isWhile());
1085:       assertFalse(node0.isDo());
1086:       assertFalse(node0.isCatch());
1087:       assertEquals(39, node0.getType());
1088:       assertFalse(node0.hasMoreThanOneChild());
1089:       assertFalse(node0.isOr());
1090:       assertFalse(node0.isRegExp());
1091:       assertFalse(node0.isVoid());
1092:       assertFalse(node0.isNull());
1093:       assertFalse(node0.isTrue());
1094:       assertEquals((-1), node0.getLineno());
1095:       assertFalse(node0.isName());
1096:       assertFalse(node0.isCast());
1097:       assertFalse(node0.isGetElem());
1098:       assertFalse(node0.hasChildren());
1099:       assertEquals((-1), node0.getSourcePosition());
1100:       assertFalse(node0.isDec());
1101:       assertFalse(node0.isAssign());
1102:       assertFalse(node0.isTypeOf());
1103:       assertFalse(node0.isReturn());
1104:       assertTrue(node0.isNumber());
1105:       assertFalse(node0.isContinue());
1106:       assertFalse(node0.isObjectLit());
1107:       assertFalse(node0.isAnd());
1108:       assertFalse(node0.isString());
1109:       assertFalse(node0.isNot());
1110:       assertFalse(node0.isFunction());
1111:       assertFalse(node0.isDebugger());
1112:       assertFalse(node0.isThrow());
1113:       assertFalse(node0.isHook());
1114:       assertFalse(node0.isFalse());
1115:       assertFalse(node0.isGetProp());
1116:       assertFalse(node0.isComma());
1117:       assertFalse(node0.isThis());
1118:       assertFalse(node0.isInc());
1119:       assertFalse(node0.isIn());
1120:       assertFalse(node0.isInstanceOf());
1121:       assertFalse(node0.isWith());
1122:       assertFalse(node0.isNE());
1123:       assertFalse(node0.isExprResult());
1124:       assertFalse(node0.isIf());
1125:       assertFalse(node0.isDelProp());
1126:       assertFalse(node0.isBreak());
1127:       assertFalse(node0.isArrayLit());
1128:       assertFalse(node0.isFor());
1129:       assertFalse(node0.isEmpty());
1130:       assertFalse(node0.isGetterDef());
1131:       assertFalse(node0.isLabel());
1132:       assertFalse(node0.isScript());
1133:       assertFalse(node0.isDefaultCase());
1134:       assertFalse(node0.hasOneChild());
1135:       assertFalse(node0.isAssignAdd());
1136:       assertFalse(node0.isTry());
1137:       assertFalse(node0.isCase());
1138:       assertEquals(0, node0.getChildCount());
1139:       assertEquals((-1), node0.getCharno());
1140:       assertFalse(node0.isParamList());
1141:       assertFalse(node0.isLabelName());
1142:       assertFalse(node0.isSwitch());
1143:       assertEquals(57, Node.REFLECTED_OBJECT);
1144:       assertEquals(40, Node.ORIGINALNAME_PROP);
1145:       assertEquals(54, Node.SLASH_V);
1146:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1147:       assertEquals(39, Node.EMPTY_BLOCK);
1148:       assertEquals(50, Node.FREE_CALL);
1149:       assertEquals(8, Node.FLAG_NO_THROWS);
1150:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1151:       assertEquals(52, Node.LENGTH);
1152:       assertEquals(12, Node.COLUMN_BITS);
1153:       assertEquals(4095, Node.COLUMN_MASK);
1154:       assertEquals(48, Node.DIRECTIVES);
1155:       assertEquals(49, Node.DIRECT_EVAL);
1156:       assertEquals(1, Node.DECR_FLAG);
1157:       assertEquals(32, Node.INCRDECR_PROP);
1158:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1159:       assertEquals(37, Node.OPT_ARG_NAME);
1160:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1161:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1162:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1163:       assertEquals(43, Node.IS_CONSTANT_NAME);
1164:       assertEquals(56, Node.CHANGE_TIME);
1165:       assertEquals(36, Node.QUOTED_PROP);
1166:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1167:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1168:       assertEquals(53, Node.INPUT_ID);
1169:       assertEquals(29, Node.JSDOC_INFO_PROP);
1170:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1171:       assertEquals(55, Node.INFERRED_FUNCTION);
1172:       assertEquals(46, Node.IS_NAMESPACE);
1173:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1174:       assertEquals(57, Node.LAST_PROP);
1175:       assertEquals(2, Node.POST_FLAG);
1176:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1177:       assertEquals(47, Node.IS_DISPATCHER);
1178:       assertEquals(30, Node.VAR_ARGS_NAME);
1179:       assertFalse(iterable0.contains(node0));
1180:       assertNotNull(iterable0);
1181:       
1182:       boolean boolean3 = node0.isIf();
1183:       assertFalse(node0.equals((Object)node1));
1184:       assertTrue(boolean3 == boolean1);
1185:       assertTrue(boolean3 == boolean0);
1186:       assertTrue(boolean3 == boolean2);
1187:       assertFalse(node0.isStringKey());
1188:       assertFalse(node0.isVar());
1189:       assertFalse(node0.isCall());
1190:       assertFalse(node0.isNew());
1191:       assertFalse(node0.isAdd());
1192:       assertFalse(node0.isSetterDef());
1193:       assertFalse(node0.isBlock());
1194:       assertFalse(node0.isWhile());
1195:       assertFalse(node0.isDo());
1196:       assertFalse(node0.isCatch());
1197:       assertEquals(39, node0.getType());
1198:       assertFalse(node0.hasMoreThanOneChild());
1199:       assertFalse(node0.isOr());
1200:       assertFalse(node0.isRegExp());
1201:       assertFalse(node0.isVoid());
1202:       assertFalse(node0.isNull());
1203:       assertFalse(node0.isTrue());
1204:       assertEquals((-1), node0.getLineno());
1205:       assertFalse(node0.isName());
1206:       assertFalse(node0.isCast());
1207:       assertFalse(node0.isGetElem());
1208:       assertFalse(node0.hasChildren());
1209:       assertEquals((-1), node0.getSourcePosition());
1210:       assertFalse(node0.isDec());
1211:       assertFalse(node0.isAssign());
1212:       assertFalse(node0.isTypeOf());
1213:       assertFalse(node0.isReturn());
1214:       assertTrue(node0.isNumber());
1215:       assertFalse(node0.isContinue());
1216:       assertFalse(node0.isObjectLit());
1217:       assertFalse(node0.isAnd());
1218:       assertFalse(node0.isString());
1219:       assertFalse(node0.isNot());
1220:       assertFalse(node0.isFunction());
1221:       assertFalse(node0.isDebugger());
1222:       assertFalse(node0.isThrow());
1223:       assertFalse(node0.isHook());
1224:       assertFalse(node0.isFalse());
1225:       assertFalse(node0.isGetProp());
1226:       assertFalse(node0.isComma());
1227:       assertFalse(node0.isThis());
1228:       assertFalse(node0.isInc());
1229:       assertFalse(node0.isIn());
1230:       assertFalse(node0.isInstanceOf());
1231:       assertFalse(node0.isWith());
1232:       assertFalse(node0.isNE());
1233:       assertFalse(node0.isExprResult());
1234:       assertFalse(node0.isIf());
1235:       assertFalse(node0.isDelProp());
1236:       assertFalse(node0.isBreak());
1237:       assertFalse(node0.isArrayLit());
1238:       assertFalse(node0.isFor());
1239:       assertFalse(node0.isEmpty());
1240:       assertFalse(node0.isGetterDef());
1241:       assertFalse(node0.isLabel());
1242:       assertFalse(node0.isScript());
1243:       assertFalse(node0.isDefaultCase());
1244:       assertFalse(node0.hasOneChild());
1245:       assertFalse(node0.isAssignAdd());
1246:       assertFalse(node0.isTry());
1247:       assertFalse(node0.isCase());
1248:       assertEquals(0, node0.getChildCount());
1249:       assertEquals((-1), node0.getCharno());
1250:       assertFalse(node0.isParamList());
1251:       assertFalse(node0.isLabelName());
1252:       assertFalse(node0.isSwitch());
1253:       assertFalse(boolean3);
1254:       assertEquals(57, Node.REFLECTED_OBJECT);
1255:       assertEquals(40, Node.ORIGINALNAME_PROP);
1256:       assertEquals(54, Node.SLASH_V);
1257:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1258:       assertEquals(39, Node.EMPTY_BLOCK);
1259:       assertEquals(50, Node.FREE_CALL);
1260:       assertEquals(8, Node.FLAG_NO_THROWS);
1261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1262:       assertEquals(52, Node.LENGTH);
1263:       assertEquals(12, Node.COLUMN_BITS);
1264:       assertEquals(4095, Node.COLUMN_MASK);
1265:       assertEquals(48, Node.DIRECTIVES);
1266:       assertEquals(49, Node.DIRECT_EVAL);
1267:       assertEquals(1, Node.DECR_FLAG);
1268:       assertEquals(32, Node.INCRDECR_PROP);
1269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1270:       assertEquals(37, Node.OPT_ARG_NAME);
1271:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1272:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1273:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1274:       assertEquals(43, Node.IS_CONSTANT_NAME);
1275:       assertEquals(56, Node.CHANGE_TIME);
1276:       assertEquals(36, Node.QUOTED_PROP);
1277:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1278:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1279:       assertEquals(53, Node.INPUT_ID);
1280:       assertEquals(29, Node.JSDOC_INFO_PROP);
1281:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1282:       assertEquals(55, Node.INFERRED_FUNCTION);
1283:       assertEquals(46, Node.IS_NAMESPACE);
1284:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1285:       assertEquals(57, Node.LAST_PROP);
1286:       assertEquals(2, Node.POST_FLAG);
1287:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1288:       assertEquals(47, Node.IS_DISPATCHER);
1289:       assertEquals(30, Node.VAR_ARGS_NAME);
1290:       
1291:       // Undeclared exception!
1292:       try { 
1293:         node0.addChildAfter(node1, node1);
1294:         fail("Expecting exception: IllegalArgumentException");
1295:       
1296:       } catch(IllegalArgumentException e) {
1297:          //
1298:          // no message in exception (getMessage() returned null)
1299:          //
1300:          verifyException("com.google.common.base.Preconditions", e);
1301:       }
1302:   }
1303: }
RegularFileObject[/tmp/EvoSuite_64_1629222878195/com/google/javascript/rhino/Node_64_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_64_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_64_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.common.collect.Iterables",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.common.collect.AbstractMultimap$Values",
132:       "com.google.javascript.rhino.jstype.ProxyObjectType",
133:       "com.google.common.collect.Sets$SetView",
134:       "com.google.common.collect.RegularImmutableAsList",
135:       "com.google.javascript.rhino.jstype.TemplateType",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMultimap$Entries",
190:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
191:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
192:       "com.google.javascript.rhino.jstype.EnumElementType",
193:       "com.google.javascript.rhino.jstype.UnionType",
194:       "com.google.common.base.Objects",
195:       "com.google.javascript.rhino.Node$NumberNode",
196:       "com.google.common.collect.SingletonImmutableList",
197:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
198:       "com.google.common.collect.ImmutableCollection$Builder",
199:       "com.google.javascript.rhino.jstype.StaticSlot",
200:       "com.google.common.collect.Iterators$6",
201:       "com.google.common.collect.BiMap",
202:       "com.google.common.collect.Iterators$7",
203:       "com.google.common.collect.AbstractSetMultimap",
204:       "com.google.common.base.Function",
205:       "com.google.common.collect.ImmutableSet",
206:       "com.google.common.collect.Lists$AbstractListWrapper",
207:       "com.google.common.collect.ImmutableMap",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.Maps$1",
211:       "com.google.javascript.rhino.jstype.EnumType",
212:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.Multimaps$Entries",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
236:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
237:       "com.google.common.collect.ImmutableList",
238:       "com.google.common.collect.SingletonImmutableBiMap",
239:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
240:       "com.google.javascript.rhino.jstype.StringType",
241:       "com.google.javascript.rhino.Node$AbstractPropListItem",
242:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
243:       "com.google.javascript.rhino.jstype.TemplatizedType",
244:       "com.google.javascript.rhino.jstype.Visitor",
245:       "com.google.javascript.rhino.jstype.NoResolvedType",
246:       "com.google.javascript.rhino.jstype.JSTypeNative",
247:       "com.google.javascript.rhino.jstype.AllType",
248:       "com.google.common.collect.Maps",
249:       "com.google.common.collect.SetMultimap",
250:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
251:       "com.google.common.collect.Maps$EntryTransformer",
252:       "com.google.javascript.rhino.JSTypeExpression",
253:       "com.google.common.collect.Iterators$MergingIterator"
254:     );
255:   } 
256: 
257:   private static void resetClasses() {
258:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_64_tmp__ESTest_scaffolding.class.getClassLoader()); 
259: 
260:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
261:       "com.google.javascript.rhino.Node",
262:       "com.google.javascript.rhino.Node$NumberNode",
263:       "com.google.javascript.rhino.Node$StringNode",
264:       "com.google.javascript.rhino.Node$AbstractPropListItem",
265:       "com.google.javascript.rhino.Node$ObjectPropListItem",
266:       "com.google.javascript.rhino.Node$IntPropListItem",
267:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
268:       "com.google.javascript.rhino.Node$AncestorIterable",
269:       "com.google.javascript.rhino.Node$NodeMismatch",
270:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
271:       "com.google.javascript.rhino.Node$SideEffectFlags",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.Token",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.base.Objects",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
352:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.common.collect.AbstractIndexedListIterator",
362:       "com.google.common.collect.Iterators$11",
363:       "com.google.javascript.rhino.Node$AncestorIterable$1",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.InputId",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.javascript.rhino.JSTypeExpression",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.Sets$ImprovedAbstractSet",
375:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
376:       "com.google.common.collect.Hashing",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
378:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
379:       "com.google.common.collect.Platform"
380:     );
381:   }
382: }

[MASTER] 17:54:38.463 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);

Node node1 = Node.newString(0, "", 4, 38);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertEquals(38, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNot());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals(0, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertNotNull(node1);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertEquals(38, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNot());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals(0, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertNotNull(node_NodeMismatch0);

boolean boolean0 = node_NodeMismatch0.equals("");
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertEquals(38, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNot());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals(0, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(boolean0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);

Set<String> set0 = node1.getDirectives();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertEquals(38, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNot());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals(0, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertNull(set0);

boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertEquals(38, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNot());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals(0, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(boolean1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);

boolean boolean2 = node1.isVarArgs();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertEquals(38, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isRegExp());
assertFalse(node1.isNot());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertEquals(0, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(boolean2);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

boolean boolean3 = node0.isIf();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(boolean3);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);

node0.addChildAfter(node1, node1);

[MASTER] 17:54:40.176 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_72_1629222879757/com/google/javascript/rhino/Node_72_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_72_1629222879757/com/google/javascript/rhino/Node_72_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:40.177 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:40.177 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:40.178 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1078
[MASTER] 17:54:40.179 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_72_1629222879757/com/google/javascript/rhino/Node_72_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:39 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_72_tmp__ESTest extends Node_72_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(304, 304, 304);
21:       assertFalse(node0.isLabel());
22:       assertFalse(node0.isAssignAdd());
23:       assertFalse(node0.isReturn());
24:       assertFalse(node0.isNumber());
25:       assertFalse(node0.isDec());
26:       assertFalse(node0.isTypeOf());
27:       assertFalse(node0.hasMoreThanOneChild());
28:       assertFalse(node0.hasChildren());
29:       assertFalse(node0.isOr());
30:       assertFalse(node0.isAssign());
31:       assertFalse(node0.isGetElem());
32:       assertFalse(node0.isContinue());
33:       assertFalse(node0.isCast());
34:       assertFalse(node0.isLabelName());
35:       assertFalse(node0.isBlock());
36:       assertEquals(304, node0.getLineno());
37:       assertFalse(node0.isExprResult());
38:       assertFalse(node0.isScript());
39:       assertFalse(node0.isNot());
40:       assertFalse(node0.isWhile());
41:       assertFalse(node0.hasOneChild());
42:       assertFalse(node0.isParamList());
43:       assertEquals(1245488, node0.getSourcePosition());
44:       assertFalse(node0.isNull());
45:       assertFalse(node0.isComma());
46:       assertEquals(0, node0.getChildCount());
47:       assertFalse(node0.isStringKey());
48:       assertFalse(node0.isName());
49:       assertFalse(node0.isCall());
50:       assertFalse(node0.isBreak());
51:       assertFalse(node0.isVoid());
52:       assertFalse(node0.isNew());
53:       assertFalse(node0.isTrue());
54:       assertFalse(node0.isAdd());
55:       assertFalse(node0.isVar());
56:       assertFalse(node0.isEmpty());
57:       assertFalse(node0.isDefaultCase());
58:       assertFalse(node0.isDo());
59:       assertEquals(304, node0.getCharno());
60:       assertFalse(node0.isNE());
61:       assertFalse(node0.isIn());
62:       assertFalse(node0.isGetterDef());
63:       assertFalse(node0.isArrayLit());
64:       assertFalse(node0.isSwitch());
65:       assertFalse(node0.isIf());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isRegExp());
68:       assertFalse(node0.isHook());
69:       assertFalse(node0.isDebugger());
70:       assertFalse(node0.isCase());
71:       assertFalse(node0.isString());
72:       assertFalse(node0.isFor());
73:       assertFalse(node0.isTry());
74:       assertEquals(304, node0.getType());
75:       assertFalse(node0.isGetProp());
76:       assertFalse(node0.isSetterDef());
77:       assertFalse(node0.isThis());
78:       assertFalse(node0.isInstanceOf());
79:       assertFalse(node0.isObjectLit());
80:       assertFalse(node0.isFalse());
81:       assertFalse(node0.isWith());
82:       assertFalse(node0.isAnd());
83:       assertFalse(node0.isCatch());
84:       assertFalse(node0.isInc());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isThrow());
87:       assertEquals(2, Node.POST_FLAG);
88:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
89:       assertEquals(37, Node.OPT_ARG_NAME);
90:       assertEquals(56, Node.CHANGE_TIME);
91:       assertEquals(47, Node.IS_DISPATCHER);
92:       assertEquals(32, Node.INCRDECR_PROP);
93:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
94:       assertEquals(12, Node.COLUMN_BITS);
95:       assertEquals(30, Node.VAR_ARGS_NAME);
96:       assertEquals(43, Node.IS_CONSTANT_NAME);
97:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
98:       assertEquals(54, Node.SLASH_V);
99:       assertEquals(1, Node.DECR_FLAG);
100:       assertEquals(51, Node.STATIC_SOURCE_FILE);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
103:       assertEquals(50, Node.FREE_CALL);
104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
105:       assertEquals(8, Node.FLAG_NO_THROWS);
106:       assertEquals(39, Node.EMPTY_BLOCK);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(48, Node.DIRECTIVES);
109:       assertEquals(4095, Node.COLUMN_MASK);
110:       assertEquals(40, Node.ORIGINALNAME_PROP);
111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
112:       assertEquals(36, Node.QUOTED_PROP);
113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
114:       assertEquals(53, Node.INPUT_ID);
115:       assertEquals(49, Node.DIRECT_EVAL);
116:       assertEquals(57, Node.LAST_PROP);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
119:       assertEquals(57, Node.REFLECTED_OBJECT);
120:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
121:       assertEquals(29, Node.JSDOC_INFO_PROP);
122:       assertEquals(52, Node.LENGTH);
123:       assertNotNull(node0);
124:       
125:       Node node1 = new Node(0, node0, 40, 41);
126:       assertFalse(node1.equals((Object)node0));
127:       assertFalse(node0.isLabel());
128:       assertFalse(node0.isAssignAdd());
129:       assertFalse(node0.isReturn());
130:       assertFalse(node0.isNumber());
131:       assertFalse(node0.isDec());
132:       assertFalse(node0.isTypeOf());
133:       assertFalse(node0.hasMoreThanOneChild());
134:       assertFalse(node0.hasChildren());
135:       assertFalse(node0.isOr());
136:       assertFalse(node0.isAssign());
137:       assertFalse(node0.isGetElem());
138:       assertFalse(node0.isContinue());
139:       assertFalse(node0.isCast());
140:       assertFalse(node0.isLabelName());
141:       assertFalse(node0.isBlock());
142:       assertEquals(304, node0.getLineno());
143:       assertFalse(node0.isExprResult());
144:       assertFalse(node0.isScript());
145:       assertFalse(node0.isNot());
146:       assertFalse(node0.isWhile());
147:       assertFalse(node0.hasOneChild());
148:       assertFalse(node0.isParamList());
149:       assertEquals(1245488, node0.getSourcePosition());
150:       assertFalse(node0.isNull());
151:       assertFalse(node0.isComma());
152:       assertEquals(0, node0.getChildCount());
153:       assertFalse(node0.isStringKey());
154:       assertFalse(node0.isName());
155:       assertFalse(node0.isCall());
156:       assertFalse(node0.isBreak());
157:       assertFalse(node0.isVoid());
158:       assertFalse(node0.isNew());
159:       assertFalse(node0.isTrue());
160:       assertFalse(node0.isAdd());
161:       assertFalse(node0.isVar());
162:       assertFalse(node0.isEmpty());
163:       assertFalse(node0.isDefaultCase());
164:       assertFalse(node0.isDo());
165:       assertEquals(304, node0.getCharno());
166:       assertFalse(node0.isNE());
167:       assertFalse(node0.isIn());
168:       assertFalse(node0.isGetterDef());
169:       assertFalse(node0.isArrayLit());
170:       assertFalse(node0.isSwitch());
171:       assertFalse(node0.isIf());
172:       assertFalse(node0.isDelProp());
173:       assertFalse(node0.isRegExp());
174:       assertFalse(node0.isHook());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isCase());
177:       assertFalse(node0.isString());
178:       assertFalse(node0.isFor());
179:       assertFalse(node0.isTry());
180:       assertEquals(304, node0.getType());
181:       assertFalse(node0.isGetProp());
182:       assertFalse(node0.isSetterDef());
183:       assertFalse(node0.isThis());
184:       assertFalse(node0.isInstanceOf());
185:       assertFalse(node0.isObjectLit());
186:       assertFalse(node0.isFalse());
187:       assertFalse(node0.isWith());
188:       assertFalse(node0.isAnd());
189:       assertFalse(node0.isCatch());
190:       assertFalse(node0.isInc());
191:       assertFalse(node0.isFunction());
192:       assertFalse(node0.isThrow());
193:       assertFalse(node1.isReturn());
194:       assertFalse(node1.isOr());
195:       assertFalse(node1.hasMoreThanOneChild());
196:       assertFalse(node1.isAssignAdd());
197:       assertFalse(node1.isWhile());
198:       assertFalse(node1.isDo());
199:       assertFalse(node1.isAssign());
200:       assertFalse(node1.isTypeOf());
201:       assertFalse(node1.isContinue());
202:       assertFalse(node1.isBlock());
203:       assertFalse(node1.isDec());
204:       assertFalse(node1.isLabel());
205:       assertEquals(40, node1.getLineno());
206:       assertFalse(node1.isScript());
207:       assertFalse(node1.isCast());
208:       assertFalse(node1.isLabelName());
209:       assertFalse(node1.isNot());
210:       assertFalse(node1.isStringKey());
211:       assertFalse(node1.isNumber());
212:       assertFalse(node1.isAnd());
213:       assertFalse(node1.isParamList());
214:       assertFalse(node1.isObjectLit());
215:       assertFalse(node1.isBreak());
216:       assertFalse(node1.isGetProp());
217:       assertFalse(node1.isDefaultCase());
218:       assertFalse(node1.isComma());
219:       assertFalse(node1.isVar());
220:       assertFalse(node1.isAdd());
221:       assertFalse(node1.isCall());
222:       assertFalse(node1.isExprResult());
223:       assertFalse(node1.isVoid());
224:       assertEquals(0, node1.getType());
225:       assertFalse(node1.isNew());
226:       assertFalse(node1.isGetElem());
227:       assertFalse(node1.isEmpty());
228:       assertFalse(node1.isDelProp());
229:       assertFalse(node1.isName());
230:       assertFalse(node1.isTrue());
231:       assertFalse(node1.isNull());
232:       assertEquals(1, node1.getChildCount());
233:       assertTrue(node1.hasChildren());
234:       assertFalse(node1.isIn());
235:       assertEquals(163881, node1.getSourcePosition());
236:       assertFalse(node1.isCase());
237:       assertTrue(node1.hasOneChild());
238:       assertFalse(node1.isFor());
239:       assertFalse(node1.isTry());
240:       assertFalse(node1.isArrayLit());
241:       assertFalse(node1.isString());
242:       assertFalse(node1.isGetterDef());
243:       assertFalse(node1.isSwitch());
244:       assertFalse(node1.isDebugger());
245:       assertFalse(node1.isInstanceOf());
246:       assertFalse(node1.isSetterDef());
247:       assertFalse(node1.isCatch());
248:       assertEquals(41, node1.getCharno());
249:       assertFalse(node1.isRegExp());
250:       assertFalse(node1.isFalse());
251:       assertFalse(node1.isWith());
252:       assertFalse(node1.isThis());
253:       assertFalse(node1.isFunction());
254:       assertFalse(node1.isThrow());
255:       assertFalse(node1.isHook());
256:       assertFalse(node1.isInc());
257:       assertFalse(node1.isIf());
258:       assertFalse(node1.isNE());
259:       assertEquals(2, Node.POST_FLAG);
260:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
261:       assertEquals(37, Node.OPT_ARG_NAME);
262:       assertEquals(56, Node.CHANGE_TIME);
263:       assertEquals(47, Node.IS_DISPATCHER);
264:       assertEquals(32, Node.INCRDECR_PROP);
265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
266:       assertEquals(12, Node.COLUMN_BITS);
267:       assertEquals(30, Node.VAR_ARGS_NAME);
268:       assertEquals(43, Node.IS_CONSTANT_NAME);
269:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
270:       assertEquals(54, Node.SLASH_V);
271:       assertEquals(1, Node.DECR_FLAG);
272:       assertEquals(51, Node.STATIC_SOURCE_FILE);
273:       assertEquals(46, Node.IS_NAMESPACE);
274:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
275:       assertEquals(50, Node.FREE_CALL);
276:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
277:       assertEquals(8, Node.FLAG_NO_THROWS);
278:       assertEquals(39, Node.EMPTY_BLOCK);
279:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
280:       assertEquals(48, Node.DIRECTIVES);
281:       assertEquals(4095, Node.COLUMN_MASK);
282:       assertEquals(40, Node.ORIGINALNAME_PROP);
283:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
284:       assertEquals(36, Node.QUOTED_PROP);
285:       assertEquals(15, Node.NO_SIDE_EFFECTS);
286:       assertEquals(53, Node.INPUT_ID);
287:       assertEquals(49, Node.DIRECT_EVAL);
288:       assertEquals(57, Node.LAST_PROP);
289:       assertEquals(55, Node.INFERRED_FUNCTION);
290:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
291:       assertEquals(57, Node.REFLECTED_OBJECT);
292:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
293:       assertEquals(29, Node.JSDOC_INFO_PROP);
294:       assertEquals(52, Node.LENGTH);
295:       assertEquals(56, Node.CHANGE_TIME);
296:       assertEquals(47, Node.IS_DISPATCHER);
297:       assertEquals(12, Node.COLUMN_BITS);
298:       assertEquals(46, Node.IS_NAMESPACE);
299:       assertEquals(2, Node.POST_FLAG);
300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
301:       assertEquals(1, Node.DECR_FLAG);
302:       assertEquals(29, Node.JSDOC_INFO_PROP);
303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
304:       assertEquals(15, Node.NO_SIDE_EFFECTS);
305:       assertEquals(57, Node.LAST_PROP);
306:       assertEquals(32, Node.INCRDECR_PROP);
307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
308:       assertEquals(54, Node.SLASH_V);
309:       assertEquals(43, Node.IS_CONSTANT_NAME);
310:       assertEquals(30, Node.VAR_ARGS_NAME);
311:       assertEquals(40, Node.ORIGINALNAME_PROP);
312:       assertEquals(48, Node.DIRECTIVES);
313:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
314:       assertEquals(8, Node.FLAG_NO_THROWS);
315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
316:       assertEquals(50, Node.FREE_CALL);
317:       assertEquals(55, Node.INFERRED_FUNCTION);
318:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
319:       assertEquals(39, Node.EMPTY_BLOCK);
320:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
321:       assertEquals(53, Node.INPUT_ID);
322:       assertEquals(52, Node.LENGTH);
323:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
324:       assertEquals(57, Node.REFLECTED_OBJECT);
325:       assertEquals(36, Node.QUOTED_PROP);
326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
327:       assertEquals(4095, Node.COLUMN_MASK);
328:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
329:       assertEquals(49, Node.DIRECT_EVAL);
330:       assertEquals(37, Node.OPT_ARG_NAME);
331:       assertNotNull(node1);
332:       
333:       Node node2 = node1.cloneNode();
334:       assertFalse(node0.equals((Object)node1));
335:       assertFalse(node1.equals((Object)node0));
336:       assertFalse(node2.equals((Object)node1));
337:       assertFalse(node2.equals((Object)node0));
338:       assertFalse(node0.isLabel());
339:       assertFalse(node0.isAssignAdd());
340:       assertFalse(node0.isReturn());
341:       assertFalse(node0.isNumber());
342:       assertFalse(node0.isDec());
343:       assertFalse(node0.isTypeOf());
344:       assertFalse(node0.hasMoreThanOneChild());
345:       assertFalse(node0.hasChildren());
346:       assertFalse(node0.isOr());
347:       assertFalse(node0.isAssign());
348:       assertFalse(node0.isGetElem());
349:       assertFalse(node0.isContinue());
350:       assertFalse(node0.isCast());
351:       assertFalse(node0.isLabelName());
352:       assertFalse(node0.isBlock());
353:       assertEquals(304, node0.getLineno());
354:       assertFalse(node0.isExprResult());
355:       assertFalse(node0.isScript());
356:       assertFalse(node0.isNot());
357:       assertFalse(node0.isWhile());
358:       assertFalse(node0.hasOneChild());
359:       assertFalse(node0.isParamList());
360:       assertEquals(1245488, node0.getSourcePosition());
361:       assertFalse(node0.isNull());
362:       assertFalse(node0.isComma());
363:       assertEquals(0, node0.getChildCount());
364:       assertFalse(node0.isStringKey());
365:       assertFalse(node0.isName());
366:       assertFalse(node0.isCall());
367:       assertFalse(node0.isBreak());
368:       assertFalse(node0.isVoid());
369:       assertFalse(node0.isNew());
370:       assertFalse(node0.isTrue());
371:       assertFalse(node0.isAdd());
372:       assertFalse(node0.isVar());
373:       assertFalse(node0.isEmpty());
374:       assertFalse(node0.isDefaultCase());
375:       assertFalse(node0.isDo());
376:       assertEquals(304, node0.getCharno());
377:       assertFalse(node0.isNE());
378:       assertFalse(node0.isIn());
379:       assertFalse(node0.isGetterDef());
380:       assertFalse(node0.isArrayLit());
381:       assertFalse(node0.isSwitch());
382:       assertFalse(node0.isIf());
383:       assertFalse(node0.isDelProp());
384:       assertFalse(node0.isRegExp());
385:       assertFalse(node0.isHook());
386:       assertFalse(node0.isDebugger());
387:       assertFalse(node0.isCase());
388:       assertFalse(node0.isString());
389:       assertFalse(node0.isFor());
390:       assertFalse(node0.isTry());
391:       assertEquals(304, node0.getType());
392:       assertFalse(node0.isGetProp());
393:       assertFalse(node0.isSetterDef());
394:       assertFalse(node0.isThis());
395:       assertFalse(node0.isInstanceOf());
396:       assertFalse(node0.isObjectLit());
397:       assertFalse(node0.isFalse());
398:       assertFalse(node0.isWith());
399:       assertFalse(node0.isAnd());
400:       assertFalse(node0.isCatch());
401:       assertFalse(node0.isInc());
402:       assertFalse(node0.isFunction());
403:       assertFalse(node0.isThrow());
404:       assertFalse(node1.isReturn());
405:       assertFalse(node1.isOr());
406:       assertFalse(node1.hasMoreThanOneChild());
407:       assertFalse(node1.isAssignAdd());
408:       assertFalse(node1.isWhile());
409:       assertFalse(node1.isDo());
410:       assertFalse(node1.isAssign());
411:       assertFalse(node1.isTypeOf());
412:       assertFalse(node1.isContinue());
413:       assertFalse(node1.isBlock());
414:       assertFalse(node1.isDec());
415:       assertFalse(node1.isLabel());
416:       assertEquals(40, node1.getLineno());
417:       assertFalse(node1.isScript());
418:       assertFalse(node1.isCast());
419:       assertFalse(node1.isLabelName());
420:       assertFalse(node1.isNot());
421:       assertFalse(node1.isStringKey());
422:       assertFalse(node1.isNumber());
423:       assertFalse(node1.isAnd());
424:       assertFalse(node1.isParamList());
425:       assertFalse(node1.isObjectLit());
426:       assertFalse(node1.isBreak());
427:       assertFalse(node1.isGetProp());
428:       assertFalse(node1.isDefaultCase());
429:       assertFalse(node1.isComma());
430:       assertFalse(node1.isVar());
431:       assertFalse(node1.isAdd());
432:       assertFalse(node1.isCall());
433:       assertFalse(node1.isExprResult());
434:       assertFalse(node1.isVoid());
435:       assertEquals(0, node1.getType());
436:       assertFalse(node1.isNew());
437:       assertFalse(node1.isGetElem());
438:       assertFalse(node1.isEmpty());
439:       assertFalse(node1.isDelProp());
440:       assertFalse(node1.isName());
441:       assertFalse(node1.isTrue());
442:       assertFalse(node1.isNull());
443:       assertEquals(1, node1.getChildCount());
444:       assertTrue(node1.hasChildren());
445:       assertFalse(node1.isIn());
446:       assertEquals(163881, node1.getSourcePosition());
447:       assertFalse(node1.isCase());
448:       assertTrue(node1.hasOneChild());
449:       assertFalse(node1.isFor());
450:       assertFalse(node1.isTry());
451:       assertFalse(node1.isArrayLit());
452:       assertFalse(node1.isString());
453:       assertFalse(node1.isGetterDef());
454:       assertFalse(node1.isSwitch());
455:       assertFalse(node1.isDebugger());
456:       assertFalse(node1.isInstanceOf());
457:       assertFalse(node1.isSetterDef());
458:       assertFalse(node1.isCatch());
459:       assertEquals(41, node1.getCharno());
460:       assertFalse(node1.isRegExp());
461:       assertFalse(node1.isFalse());
462:       assertFalse(node1.isWith());
463:       assertFalse(node1.isThis());
464:       assertFalse(node1.isFunction());
465:       assertFalse(node1.isThrow());
466:       assertFalse(node1.isHook());
467:       assertFalse(node1.isInc());
468:       assertFalse(node1.isIf());
469:       assertFalse(node1.isNE());
470:       assertFalse(node2.isDefaultCase());
471:       assertFalse(node2.isRegExp());
472:       assertFalse(node2.isFunction());
473:       assertFalse(node2.isDebugger());
474:       assertFalse(node2.isTrue());
475:       assertEquals(0, node2.getChildCount());
476:       assertFalse(node2.isVoid());
477:       assertFalse(node2.isCatch());
478:       assertFalse(node2.isArrayLit());
479:       assertFalse(node2.isIf());
480:       assertFalse(node2.isDelProp());
481:       assertFalse(node2.isName());
482:       assertFalse(node2.isVar());
483:       assertFalse(node2.isNE());
484:       assertFalse(node2.isNull());
485:       assertFalse(node2.isIn());
486:       assertEquals(163881, node2.getSourcePosition());
487:       assertFalse(node2.isNew());
488:       assertFalse(node2.isAdd());
489:       assertFalse(node2.isEmpty());
490:       assertFalse(node2.isSetterDef());
491:       assertFalse(node2.isDo());
492:       assertFalse(node2.isSwitch());
493:       assertFalse(node2.isBlock());
494:       assertFalse(node2.hasMoreThanOneChild());
495:       assertFalse(node2.isGetterDef());
496:       assertFalse(node2.isLabelName());
497:       assertFalse(node2.isNumber());
498:       assertFalse(node2.isStringKey());
499:       assertFalse(node2.isParamList());
500:       assertEquals(40, node2.getLineno());
501:       assertFalse(node2.isFor());
502:       assertFalse(node2.isThis());
503:       assertFalse(node2.isHook());
504:       assertFalse(node2.hasOneChild());
505:       assertFalse(node2.isTry());
506:       assertFalse(node2.isCase());
507:       assertFalse(node2.isScript());
508:       assertFalse(node2.isWith());
509:       assertFalse(node2.isNot());
510:       assertFalse(node2.isAnd());
511:       assertFalse(node2.isInstanceOf());
512:       assertEquals(41, node2.getCharno());
513:       assertFalse(node2.isCast());
514:       assertFalse(node2.isExprResult());
515:       assertFalse(node2.isGetElem());
516:       assertFalse(node2.isBreak());
517:       assertFalse(node2.isFalse());
518:       assertFalse(node2.isThrow());
519:       assertFalse(node2.isLabel());
520:       assertFalse(node2.isOr());
521:       assertFalse(node2.isAssignAdd());
522:       assertFalse(node2.isInc());
523:       assertFalse(node2.isWhile());
524:       assertFalse(node2.isString());
525:       assertFalse(node2.isContinue());
526:       assertFalse(node2.isCall());
527:       assertEquals(0, node2.getType());
528:       assertFalse(node2.hasChildren());
529:       assertFalse(node2.isDec());
530:       assertFalse(node2.isAssign());
531:       assertFalse(node2.isTypeOf());
532:       assertFalse(node2.isComma());
533:       assertFalse(node2.isReturn());
534:       assertFalse(node2.isObjectLit());
535:       assertFalse(node2.isGetProp());
536:       assertEquals(2, Node.POST_FLAG);
537:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
538:       assertEquals(37, Node.OPT_ARG_NAME);
539:       assertEquals(56, Node.CHANGE_TIME);
540:       assertEquals(47, Node.IS_DISPATCHER);
541:       assertEquals(32, Node.INCRDECR_PROP);
542:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
543:       assertEquals(12, Node.COLUMN_BITS);
544:       assertEquals(30, Node.VAR_ARGS_NAME);
545:       assertEquals(43, Node.IS_CONSTANT_NAME);
546:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
547:       assertEquals(54, Node.SLASH_V);
548:       assertEquals(1, Node.DECR_FLAG);
549:       assertEquals(51, Node.STATIC_SOURCE_FILE);
550:       assertEquals(46, Node.IS_NAMESPACE);
551:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
552:       assertEquals(50, Node.FREE_CALL);
553:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
554:       assertEquals(8, Node.FLAG_NO_THROWS);
555:       assertEquals(39, Node.EMPTY_BLOCK);
556:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
557:       assertEquals(48, Node.DIRECTIVES);
558:       assertEquals(4095, Node.COLUMN_MASK);
559:       assertEquals(40, Node.ORIGINALNAME_PROP);
560:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
561:       assertEquals(36, Node.QUOTED_PROP);
562:       assertEquals(15, Node.NO_SIDE_EFFECTS);
563:       assertEquals(53, Node.INPUT_ID);
564:       assertEquals(49, Node.DIRECT_EVAL);
565:       assertEquals(57, Node.LAST_PROP);
566:       assertEquals(55, Node.INFERRED_FUNCTION);
567:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
568:       assertEquals(57, Node.REFLECTED_OBJECT);
569:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
570:       assertEquals(29, Node.JSDOC_INFO_PROP);
571:       assertEquals(52, Node.LENGTH);
572:       assertEquals(56, Node.CHANGE_TIME);
573:       assertEquals(47, Node.IS_DISPATCHER);
574:       assertEquals(12, Node.COLUMN_BITS);
575:       assertEquals(46, Node.IS_NAMESPACE);
576:       assertEquals(2, Node.POST_FLAG);
577:       assertEquals(51, Node.STATIC_SOURCE_FILE);
578:       assertEquals(1, Node.DECR_FLAG);
579:       assertEquals(29, Node.JSDOC_INFO_PROP);
580:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
581:       assertEquals(15, Node.NO_SIDE_EFFECTS);
582:       assertEquals(57, Node.LAST_PROP);
583:       assertEquals(32, Node.INCRDECR_PROP);
584:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
585:       assertEquals(54, Node.SLASH_V);
586:       assertEquals(43, Node.IS_CONSTANT_NAME);
587:       assertEquals(30, Node.VAR_ARGS_NAME);
588:       assertEquals(40, Node.ORIGINALNAME_PROP);
589:       assertEquals(48, Node.DIRECTIVES);
590:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
591:       assertEquals(8, Node.FLAG_NO_THROWS);
592:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
593:       assertEquals(50, Node.FREE_CALL);
594:       assertEquals(55, Node.INFERRED_FUNCTION);
595:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
596:       assertEquals(39, Node.EMPTY_BLOCK);
597:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
598:       assertEquals(53, Node.INPUT_ID);
599:       assertEquals(52, Node.LENGTH);
600:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
601:       assertEquals(57, Node.REFLECTED_OBJECT);
602:       assertEquals(36, Node.QUOTED_PROP);
603:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
604:       assertEquals(4095, Node.COLUMN_MASK);
605:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
606:       assertEquals(49, Node.DIRECT_EVAL);
607:       assertEquals(37, Node.OPT_ARG_NAME);
608:       assertEquals(4095, Node.COLUMN_MASK);
609:       assertEquals(55, Node.INFERRED_FUNCTION);
610:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
611:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
612:       assertEquals(29, Node.JSDOC_INFO_PROP);
613:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
614:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
615:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
616:       assertEquals(37, Node.OPT_ARG_NAME);
617:       assertEquals(39, Node.EMPTY_BLOCK);
618:       assertEquals(53, Node.INPUT_ID);
619:       assertEquals(48, Node.DIRECTIVES);
620:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
621:       assertEquals(52, Node.LENGTH);
622:       assertEquals(8, Node.FLAG_NO_THROWS);
623:       assertEquals(56, Node.CHANGE_TIME);
624:       assertEquals(36, Node.QUOTED_PROP);
625:       assertEquals(57, Node.REFLECTED_OBJECT);
626:       assertEquals(30, Node.VAR_ARGS_NAME);
627:       assertEquals(49, Node.DIRECT_EVAL);
628:       assertEquals(1, Node.DECR_FLAG);
629:       assertEquals(57, Node.LAST_PROP);
630:       assertEquals(15, Node.NO_SIDE_EFFECTS);
631:       assertEquals(32, Node.INCRDECR_PROP);
632:       assertEquals(12, Node.COLUMN_BITS);
633:       assertEquals(2, Node.POST_FLAG);
634:       assertEquals(47, Node.IS_DISPATCHER);
635:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
636:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
637:       assertEquals(50, Node.FREE_CALL);
638:       assertEquals(40, Node.ORIGINALNAME_PROP);
639:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
640:       assertEquals(54, Node.SLASH_V);
641:       assertEquals(43, Node.IS_CONSTANT_NAME);
642:       assertEquals(51, Node.STATIC_SOURCE_FILE);
643:       assertEquals(46, Node.IS_NAMESPACE);
644:       assertNotNull(node2);
645:       assertNotSame(node0, node2);
646:       assertNotSame(node0, node1);
647:       assertNotSame(node1, node2);
648:       assertNotSame(node1, node0);
649:       assertNotSame(node2, node1);
650:       assertNotSame(node2, node0);
651:       
652:       boolean boolean0 = node2.isCall();
653:       assertFalse(node0.equals((Object)node2));
654:       assertFalse(node0.equals((Object)node1));
655:       assertFalse(node1.equals((Object)node2));
656:       assertFalse(node1.equals((Object)node0));
657:       assertFalse(node2.equals((Object)node1));
658:       assertFalse(node2.equals((Object)node0));
659:       assertFalse(node0.isLabel());
660:       assertFalse(node0.isAssignAdd());
661:       assertFalse(node0.isReturn());
662:       assertFalse(node0.isNumber());
663:       assertFalse(node0.isDec());
664:       assertFalse(node0.isTypeOf());
665:       assertFalse(node0.hasMoreThanOneChild());
666:       assertFalse(node0.hasChildren());
667:       assertFalse(node0.isOr());
668:       assertFalse(node0.isAssign());
669:       assertFalse(node0.isGetElem());
670:       assertFalse(node0.isContinue());
671:       assertFalse(node0.isCast());
672:       assertFalse(node0.isLabelName());
673:       assertFalse(node0.isBlock());
674:       assertEquals(304, node0.getLineno());
675:       assertFalse(node0.isExprResult());
676:       assertFalse(node0.isScript());
677:       assertFalse(node0.isNot());
678:       assertFalse(node0.isWhile());
679:       assertFalse(node0.hasOneChild());
680:       assertFalse(node0.isParamList());
681:       assertEquals(1245488, node0.getSourcePosition());
682:       assertFalse(node0.isNull());
683:       assertFalse(node0.isComma());
684:       assertEquals(0, node0.getChildCount());
685:       assertFalse(node0.isStringKey());
686:       assertFalse(node0.isName());
687:       assertFalse(node0.isCall());
688:       assertFalse(node0.isBreak());
689:       assertFalse(node0.isVoid());
690:       assertFalse(node0.isNew());
691:       assertFalse(node0.isTrue());
692:       assertFalse(node0.isAdd());
693:       assertFalse(node0.isVar());
694:       assertFalse(node0.isEmpty());
695:       assertFalse(node0.isDefaultCase());
696:       assertFalse(node0.isDo());
697:       assertEquals(304, node0.getCharno());
698:       assertFalse(node0.isNE());
699:       assertFalse(node0.isIn());
700:       assertFalse(node0.isGetterDef());
701:       assertFalse(node0.isArrayLit());
702:       assertFalse(node0.isSwitch());
703:       assertFalse(node0.isIf());
704:       assertFalse(node0.isDelProp());
705:       assertFalse(node0.isRegExp());
706:       assertFalse(node0.isHook());
707:       assertFalse(node0.isDebugger());
708:       assertFalse(node0.isCase());
709:       assertFalse(node0.isString());
710:       assertFalse(node0.isFor());
711:       assertFalse(node0.isTry());
712:       assertEquals(304, node0.getType());
713:       assertFalse(node0.isGetProp());
714:       assertFalse(node0.isSetterDef());
715:       assertFalse(node0.isThis());
716:       assertFalse(node0.isInstanceOf());
717:       assertFalse(node0.isObjectLit());
718:       assertFalse(node0.isFalse());
719:       assertFalse(node0.isWith());
720:       assertFalse(node0.isAnd());
721:       assertFalse(node0.isCatch());
722:       assertFalse(node0.isInc());
723:       assertFalse(node0.isFunction());
724:       assertFalse(node0.isThrow());
725:       assertFalse(node1.isReturn());
726:       assertFalse(node1.isOr());
727:       assertFalse(node1.hasMoreThanOneChild());
728:       assertFalse(node1.isAssignAdd());
729:       assertFalse(node1.isWhile());
730:       assertFalse(node1.isDo());
731:       assertFalse(node1.isAssign());
732:       assertFalse(node1.isTypeOf());
733:       assertFalse(node1.isContinue());
734:       assertFalse(node1.isBlock());
735:       assertFalse(node1.isDec());
736:       assertFalse(node1.isLabel());
737:       assertEquals(40, node1.getLineno());
738:       assertFalse(node1.isScript());
739:       assertFalse(node1.isCast());
740:       assertFalse(node1.isLabelName());
741:       assertFalse(node1.isNot());
742:       assertFalse(node1.isStringKey());
743:       assertFalse(node1.isNumber());
744:       assertFalse(node1.isAnd());
745:       assertFalse(node1.isParamList());
746:       assertFalse(node1.isObjectLit());
747:       assertFalse(node1.isBreak());
748:       assertFalse(node1.isGetProp());
749:       assertFalse(node1.isDefaultCase());
750:       assertFalse(node1.isComma());
751:       assertFalse(node1.isVar());
752:       assertFalse(node1.isAdd());
753:       assertFalse(node1.isCall());
754:       assertFalse(node1.isExprResult());
755:       assertFalse(node1.isVoid());
756:       assertEquals(0, node1.getType());
757:       assertFalse(node1.isNew());
758:       assertFalse(node1.isGetElem());
759:       assertFalse(node1.isEmpty());
760:       assertFalse(node1.isDelProp());
761:       assertFalse(node1.isName());
762:       assertFalse(node1.isTrue());
763:       assertFalse(node1.isNull());
764:       assertEquals(1, node1.getChildCount());
765:       assertTrue(node1.hasChildren());
766:       assertFalse(node1.isIn());
767:       assertEquals(163881, node1.getSourcePosition());
768:       assertFalse(node1.isCase());
769:       assertTrue(node1.hasOneChild());
770:       assertFalse(node1.isFor());
771:       assertFalse(node1.isTry());
772:       assertFalse(node1.isArrayLit());
773:       assertFalse(node1.isString());
774:       assertFalse(node1.isGetterDef());
775:       assertFalse(node1.isSwitch());
776:       assertFalse(node1.isDebugger());
777:       assertFalse(node1.isInstanceOf());
778:       assertFalse(node1.isSetterDef());
779:       assertFalse(node1.isCatch());
780:       assertEquals(41, node1.getCharno());
781:       assertFalse(node1.isRegExp());
782:       assertFalse(node1.isFalse());
783:       assertFalse(node1.isWith());
784:       assertFalse(node1.isThis());
785:       assertFalse(node1.isFunction());
786:       assertFalse(node1.isThrow());
787:       assertFalse(node1.isHook());
788:       assertFalse(node1.isInc());
789:       assertFalse(node1.isIf());
790:       assertFalse(node1.isNE());
791:       assertFalse(node2.isDefaultCase());
792:       assertFalse(node2.isRegExp());
793:       assertFalse(node2.isFunction());
794:       assertFalse(node2.isDebugger());
795:       assertFalse(node2.isTrue());
796:       assertEquals(0, node2.getChildCount());
797:       assertFalse(node2.isVoid());
798:       assertFalse(node2.isCatch());
799:       assertFalse(node2.isArrayLit());
800:       assertFalse(node2.isIf());
801:       assertFalse(node2.isDelProp());
802:       assertFalse(node2.isName());
803:       assertFalse(node2.isVar());
804:       assertFalse(node2.isNE());
805:       assertFalse(node2.isNull());
806:       assertFalse(node2.isIn());
807:       assertEquals(163881, node2.getSourcePosition());
808:       assertFalse(node2.isNew());
809:       assertFalse(node2.isAdd());
810:       assertFalse(node2.isEmpty());
811:       assertFalse(node2.isSetterDef());
812:       assertFalse(node2.isDo());
813:       assertFalse(node2.isSwitch());
814:       assertFalse(node2.isBlock());
815:       assertFalse(node2.hasMoreThanOneChild());
816:       assertFalse(node2.isGetterDef());
817:       assertFalse(node2.isLabelName());
818:       assertFalse(node2.isNumber());
819:       assertFalse(node2.isStringKey());
820:       assertFalse(node2.isParamList());
821:       assertEquals(40, node2.getLineno());
822:       assertFalse(node2.isFor());
823:       assertFalse(node2.isThis());
824:       assertFalse(node2.isHook());
825:       assertFalse(node2.hasOneChild());
826:       assertFalse(node2.isTry());
827:       assertFalse(node2.isCase());
828:       assertFalse(node2.isScript());
829:       assertFalse(node2.isWith());
830:       assertFalse(node2.isNot());
831:       assertFalse(node2.isAnd());
832:       assertFalse(node2.isInstanceOf());
833:       assertEquals(41, node2.getCharno());
834:       assertFalse(node2.isCast());
835:       assertFalse(node2.isExprResult());
836:       assertFalse(node2.isGetElem());
837:       assertFalse(node2.isBreak());
838:       assertFalse(node2.isFalse());
839:       assertFalse(node2.isThrow());
840:       assertFalse(node2.isLabel());
841:       assertFalse(node2.isOr());
842:       assertFalse(node2.isAssignAdd());
843:       assertFalse(node2.isInc());
844:       assertFalse(node2.isWhile());
845:       assertFalse(node2.isString());
846:       assertFalse(node2.isContinue());
847:       assertFalse(node2.isCall());
848:       assertEquals(0, node2.getType());
849:       assertFalse(node2.hasChildren());
850:       assertFalse(node2.isDec());
851:       assertFalse(node2.isAssign());
852:       assertFalse(node2.isTypeOf());
853:       assertFalse(node2.isComma());
854:       assertFalse(node2.isReturn());
855:       assertFalse(node2.isObjectLit());
856:       assertFalse(node2.isGetProp());
857:       assertFalse(boolean0);
858:       assertEquals(2, Node.POST_FLAG);
859:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
860:       assertEquals(37, Node.OPT_ARG_NAME);
861:       assertEquals(56, Node.CHANGE_TIME);
862:       assertEquals(47, Node.IS_DISPATCHER);
863:       assertEquals(32, Node.INCRDECR_PROP);
864:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
865:       assertEquals(12, Node.COLUMN_BITS);
866:       assertEquals(30, Node.VAR_ARGS_NAME);
867:       assertEquals(43, Node.IS_CONSTANT_NAME);
868:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
869:       assertEquals(54, Node.SLASH_V);
870:       assertEquals(1, Node.DECR_FLAG);
871:       assertEquals(51, Node.STATIC_SOURCE_FILE);
872:       assertEquals(46, Node.IS_NAMESPACE);
873:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
874:       assertEquals(50, Node.FREE_CALL);
875:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
876:       assertEquals(8, Node.FLAG_NO_THROWS);
877:       assertEquals(39, Node.EMPTY_BLOCK);
878:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
879:       assertEquals(48, Node.DIRECTIVES);
880:       assertEquals(4095, Node.COLUMN_MASK);
881:       assertEquals(40, Node.ORIGINALNAME_PROP);
882:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
883:       assertEquals(36, Node.QUOTED_PROP);
884:       assertEquals(15, Node.NO_SIDE_EFFECTS);
885:       assertEquals(53, Node.INPUT_ID);
886:       assertEquals(49, Node.DIRECT_EVAL);
887:       assertEquals(57, Node.LAST_PROP);
888:       assertEquals(55, Node.INFERRED_FUNCTION);
889:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
890:       assertEquals(57, Node.REFLECTED_OBJECT);
891:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
892:       assertEquals(29, Node.JSDOC_INFO_PROP);
893:       assertEquals(52, Node.LENGTH);
894:       assertEquals(56, Node.CHANGE_TIME);
895:       assertEquals(47, Node.IS_DISPATCHER);
896:       assertEquals(12, Node.COLUMN_BITS);
897:       assertEquals(46, Node.IS_NAMESPACE);
898:       assertEquals(2, Node.POST_FLAG);
899:       assertEquals(51, Node.STATIC_SOURCE_FILE);
900:       assertEquals(1, Node.DECR_FLAG);
901:       assertEquals(29, Node.JSDOC_INFO_PROP);
902:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
903:       assertEquals(15, Node.NO_SIDE_EFFECTS);
904:       assertEquals(57, Node.LAST_PROP);
905:       assertEquals(32, Node.INCRDECR_PROP);
906:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
907:       assertEquals(54, Node.SLASH_V);
908:       assertEquals(43, Node.IS_CONSTANT_NAME);
909:       assertEquals(30, Node.VAR_ARGS_NAME);
910:       assertEquals(40, Node.ORIGINALNAME_PROP);
911:       assertEquals(48, Node.DIRECTIVES);
912:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
913:       assertEquals(8, Node.FLAG_NO_THROWS);
914:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
915:       assertEquals(50, Node.FREE_CALL);
916:       assertEquals(55, Node.INFERRED_FUNCTION);
917:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
918:       assertEquals(39, Node.EMPTY_BLOCK);
919:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
920:       assertEquals(53, Node.INPUT_ID);
921:       assertEquals(52, Node.LENGTH);
922:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
923:       assertEquals(57, Node.REFLECTED_OBJECT);
924:       assertEquals(36, Node.QUOTED_PROP);
925:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
926:       assertEquals(4095, Node.COLUMN_MASK);
927:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
928:       assertEquals(49, Node.DIRECT_EVAL);
929:       assertEquals(37, Node.OPT_ARG_NAME);
930:       assertEquals(4095, Node.COLUMN_MASK);
931:       assertEquals(55, Node.INFERRED_FUNCTION);
932:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
933:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
934:       assertEquals(29, Node.JSDOC_INFO_PROP);
935:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
936:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
937:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
938:       assertEquals(37, Node.OPT_ARG_NAME);
939:       assertEquals(39, Node.EMPTY_BLOCK);
940:       assertEquals(53, Node.INPUT_ID);
941:       assertEquals(48, Node.DIRECTIVES);
942:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
943:       assertEquals(52, Node.LENGTH);
944:       assertEquals(8, Node.FLAG_NO_THROWS);
945:       assertEquals(56, Node.CHANGE_TIME);
946:       assertEquals(36, Node.QUOTED_PROP);
947:       assertEquals(57, Node.REFLECTED_OBJECT);
948:       assertEquals(30, Node.VAR_ARGS_NAME);
949:       assertEquals(49, Node.DIRECT_EVAL);
950:       assertEquals(1, Node.DECR_FLAG);
951:       assertEquals(57, Node.LAST_PROP);
952:       assertEquals(15, Node.NO_SIDE_EFFECTS);
953:       assertEquals(32, Node.INCRDECR_PROP);
954:       assertEquals(12, Node.COLUMN_BITS);
955:       assertEquals(2, Node.POST_FLAG);
956:       assertEquals(47, Node.IS_DISPATCHER);
957:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
958:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
959:       assertEquals(50, Node.FREE_CALL);
960:       assertEquals(40, Node.ORIGINALNAME_PROP);
961:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
962:       assertEquals(54, Node.SLASH_V);
963:       assertEquals(43, Node.IS_CONSTANT_NAME);
964:       assertEquals(51, Node.STATIC_SOURCE_FILE);
965:       assertEquals(46, Node.IS_NAMESPACE);
966:       assertNotSame(node0, node2);
967:       assertNotSame(node0, node1);
968:       assertNotSame(node1, node2);
969:       assertNotSame(node1, node0);
970:       assertNotSame(node2, node1);
971:       assertNotSame(node2, node0);
972:       
973:       Iterable<Node> iterable0 = node0.children();
974:       assertFalse(node0.equals((Object)node2));
975:       assertFalse(node0.equals((Object)node1));
976:       assertFalse(node0.isLabel());
977:       assertFalse(node0.isAssignAdd());
978:       assertFalse(node0.isReturn());
979:       assertFalse(node0.isNumber());
980:       assertFalse(node0.isDec());
981:       assertFalse(node0.isTypeOf());
982:       assertFalse(node0.hasMoreThanOneChild());
983:       assertFalse(node0.hasChildren());
984:       assertFalse(node0.isOr());
985:       assertFalse(node0.isAssign());
986:       assertFalse(node0.isGetElem());
987:       assertFalse(node0.isContinue());
988:       assertFalse(node0.isCast());
989:       assertFalse(node0.isLabelName());
990:       assertFalse(node0.isBlock());
991:       assertEquals(304, node0.getLineno());
992:       assertFalse(node0.isExprResult());
993:       assertFalse(node0.isScript());
994:       assertFalse(node0.isNot());
995:       assertFalse(node0.isWhile());
996:       assertFalse(node0.hasOneChild());
997:       assertFalse(node0.isParamList());
998:       assertEquals(1245488, node0.getSourcePosition());
999:       assertFalse(node0.isNull());
1000:       assertFalse(node0.isComma());
1001:       assertEquals(0, node0.getChildCount());
1002:       assertFalse(node0.isStringKey());
1003:       assertFalse(node0.isName());
1004:       assertFalse(node0.isCall());
1005:       assertFalse(node0.isBreak());
1006:       assertFalse(node0.isVoid());
1007:       assertFalse(node0.isNew());
1008:       assertFalse(node0.isTrue());
1009:       assertFalse(node0.isAdd());
1010:       assertFalse(node0.isVar());
1011:       assertFalse(node0.isEmpty());
1012:       assertFalse(node0.isDefaultCase());
1013:       assertFalse(node0.isDo());
1014:       assertEquals(304, node0.getCharno());
1015:       assertFalse(node0.isNE());
1016:       assertFalse(node0.isIn());
1017:       assertFalse(node0.isGetterDef());
1018:       assertFalse(node0.isArrayLit());
1019:       assertFalse(node0.isSwitch());
1020:       assertFalse(node0.isIf());
1021:       assertFalse(node0.isDelProp());
1022:       assertFalse(node0.isRegExp());
1023:       assertFalse(node0.isHook());
1024:       assertFalse(node0.isDebugger());
1025:       assertFalse(node0.isCase());
1026:       assertFalse(node0.isString());
1027:       assertFalse(node0.isFor());
1028:       assertFalse(node0.isTry());
1029:       assertEquals(304, node0.getType());
1030:       assertFalse(node0.isGetProp());
1031:       assertFalse(node0.isSetterDef());
1032:       assertFalse(node0.isThis());
1033:       assertFalse(node0.isInstanceOf());
1034:       assertFalse(node0.isObjectLit());
1035:       assertFalse(node0.isFalse());
1036:       assertFalse(node0.isWith());
1037:       assertFalse(node0.isAnd());
1038:       assertFalse(node0.isCatch());
1039:       assertFalse(node0.isInc());
1040:       assertFalse(node0.isFunction());
1041:       assertFalse(node0.isThrow());
1042:       assertEquals(2, Node.POST_FLAG);
1043:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1044:       assertEquals(37, Node.OPT_ARG_NAME);
1045:       assertEquals(56, Node.CHANGE_TIME);
1046:       assertEquals(47, Node.IS_DISPATCHER);
1047:       assertEquals(32, Node.INCRDECR_PROP);
1048:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1049:       assertEquals(12, Node.COLUMN_BITS);
1050:       assertEquals(30, Node.VAR_ARGS_NAME);
1051:       assertEquals(43, Node.IS_CONSTANT_NAME);
1052:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1053:       assertEquals(54, Node.SLASH_V);
1054:       assertEquals(1, Node.DECR_FLAG);
1055:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1056:       assertEquals(46, Node.IS_NAMESPACE);
1057:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1058:       assertEquals(50, Node.FREE_CALL);
1059:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1060:       assertEquals(8, Node.FLAG_NO_THROWS);
1061:       assertEquals(39, Node.EMPTY_BLOCK);
1062:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1063:       assertEquals(48, Node.DIRECTIVES);
1064:       assertEquals(4095, Node.COLUMN_MASK);
1065:       assertEquals(40, Node.ORIGINALNAME_PROP);
1066:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1067:       assertEquals(36, Node.QUOTED_PROP);
1068:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1069:       assertEquals(53, Node.INPUT_ID);
1070:       assertEquals(49, Node.DIRECT_EVAL);
1071:       assertEquals(57, Node.LAST_PROP);
1072:       assertEquals(55, Node.INFERRED_FUNCTION);
1073:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1074:       assertEquals(57, Node.REFLECTED_OBJECT);
1075:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1076:       assertEquals(29, Node.JSDOC_INFO_PROP);
1077:       assertEquals(52, Node.LENGTH);
1078:       assertFalse(iterable0.contains(node1));
1079:       assertNotNull(iterable0);
1080:       assertNotSame(node0, node2);
1081:       assertNotSame(node0, node1);
1082:       
1083:       boolean boolean1 = node0.isHook();
1084:       assertFalse(node0.equals((Object)node2));
1085:       assertFalse(node0.equals((Object)node1));
1086:       assertTrue(boolean1 == boolean0);
1087:       assertFalse(node0.isLabel());
1088:       assertFalse(node0.isAssignAdd());
1089:       assertFalse(node0.isReturn());
1090:       assertFalse(node0.isNumber());
1091:       assertFalse(node0.isDec());
1092:       assertFalse(node0.isTypeOf());
1093:       assertFalse(node0.hasMoreThanOneChild());
1094:       assertFalse(node0.hasChildren());
1095:       assertFalse(node0.isOr());
1096:       assertFalse(node0.isAssign());
1097:       assertFalse(node0.isGetElem());
1098:       assertFalse(node0.isContinue());
1099:       assertFalse(node0.isCast());
1100:       assertFalse(node0.isLabelName());
1101:       assertFalse(node0.isBlock());
1102:       assertEquals(304, node0.getLineno());
1103:       assertFalse(node0.isExprResult());
1104:       assertFalse(node0.isScript());
1105:       assertFalse(node0.isNot());
1106:       assertFalse(node0.isWhile());
1107:       assertFalse(node0.hasOneChild());
1108:       assertFalse(node0.isParamList());
1109:       assertEquals(1245488, node0.getSourcePosition());
1110:       assertFalse(node0.isNull());
1111:       assertFalse(node0.isComma());
1112:       assertEquals(0, node0.getChildCount());
1113:       assertFalse(node0.isStringKey());
1114:       assertFalse(node0.isName());
1115:       assertFalse(node0.isCall());
1116:       assertFalse(node0.isBreak());
1117:       assertFalse(node0.isVoid());
1118:       assertFalse(node0.isNew());
1119:       assertFalse(node0.isTrue());
1120:       assertFalse(node0.isAdd());
1121:       assertFalse(node0.isVar());
1122:       assertFalse(node0.isEmpty());
1123:       assertFalse(node0.isDefaultCase());
1124:       assertFalse(node0.isDo());
1125:       assertEquals(304, node0.getCharno());
1126:       assertFalse(node0.isNE());
1127:       assertFalse(node0.isIn());
1128:       assertFalse(node0.isGetterDef());
1129:       assertFalse(node0.isArrayLit());
1130:       assertFalse(node0.isSwitch());
1131:       assertFalse(node0.isIf());
1132:       assertFalse(node0.isDelProp());
1133:       assertFalse(node0.isRegExp());
1134:       assertFalse(node0.isHook());
1135:       assertFalse(node0.isDebugger());
1136:       assertFalse(node0.isCase());
1137:       assertFalse(node0.isString());
1138:       assertFalse(node0.isFor());
1139:       assertFalse(node0.isTry());
1140:       assertEquals(304, node0.getType());
1141:       assertFalse(node0.isGetProp());
1142:       assertFalse(node0.isSetterDef());
1143:       assertFalse(node0.isThis());
1144:       assertFalse(node0.isInstanceOf());
1145:       assertFalse(node0.isObjectLit());
1146:       assertFalse(node0.isFalse());
1147:       assertFalse(node0.isWith());
1148:       assertFalse(node0.isAnd());
1149:       assertFalse(node0.isCatch());
1150:       assertFalse(node0.isInc());
1151:       assertFalse(node0.isFunction());
1152:       assertFalse(node0.isThrow());
1153:       assertFalse(boolean1);
1154:       assertEquals(2, Node.POST_FLAG);
1155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1156:       assertEquals(37, Node.OPT_ARG_NAME);
1157:       assertEquals(56, Node.CHANGE_TIME);
1158:       assertEquals(47, Node.IS_DISPATCHER);
1159:       assertEquals(32, Node.INCRDECR_PROP);
1160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1161:       assertEquals(12, Node.COLUMN_BITS);
1162:       assertEquals(30, Node.VAR_ARGS_NAME);
1163:       assertEquals(43, Node.IS_CONSTANT_NAME);
1164:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1165:       assertEquals(54, Node.SLASH_V);
1166:       assertEquals(1, Node.DECR_FLAG);
1167:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1168:       assertEquals(46, Node.IS_NAMESPACE);
1169:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1170:       assertEquals(50, Node.FREE_CALL);
1171:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1172:       assertEquals(8, Node.FLAG_NO_THROWS);
1173:       assertEquals(39, Node.EMPTY_BLOCK);
1174:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1175:       assertEquals(48, Node.DIRECTIVES);
1176:       assertEquals(4095, Node.COLUMN_MASK);
1177:       assertEquals(40, Node.ORIGINALNAME_PROP);
1178:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1179:       assertEquals(36, Node.QUOTED_PROP);
1180:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1181:       assertEquals(53, Node.INPUT_ID);
1182:       assertEquals(49, Node.DIRECT_EVAL);
1183:       assertEquals(57, Node.LAST_PROP);
1184:       assertEquals(55, Node.INFERRED_FUNCTION);
1185:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1186:       assertEquals(57, Node.REFLECTED_OBJECT);
1187:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1188:       assertEquals(29, Node.JSDOC_INFO_PROP);
1189:       assertEquals(52, Node.LENGTH);
1190:       assertNotSame(node0, node2);
1191:       assertNotSame(node0, node1);
1192:       
1193:       boolean boolean2 = node0.isCall();
1194:       assertFalse(node0.equals((Object)node2));
1195:       assertFalse(node0.equals((Object)node1));
1196:       assertTrue(boolean2 == boolean1);
1197:       assertTrue(boolean2 == boolean0);
1198:       assertFalse(node0.isLabel());
1199:       assertFalse(node0.isAssignAdd());
1200:       assertFalse(node0.isReturn());
1201:       assertFalse(node0.isNumber());
1202:       assertFalse(node0.isDec());
1203:       assertFalse(node0.isTypeOf());
1204:       assertFalse(node0.hasMoreThanOneChild());
1205:       assertFalse(node0.hasChildren());
1206:       assertFalse(node0.isOr());
1207:       assertFalse(node0.isAssign());
1208:       assertFalse(node0.isGetElem());
1209:       assertFalse(node0.isContinue());
1210:       assertFalse(node0.isCast());
1211:       assertFalse(node0.isLabelName());
1212:       assertFalse(node0.isBlock());
1213:       assertEquals(304, node0.getLineno());
1214:       assertFalse(node0.isExprResult());
1215:       assertFalse(node0.isScript());
1216:       assertFalse(node0.isNot());
1217:       assertFalse(node0.isWhile());
1218:       assertFalse(node0.hasOneChild());
1219:       assertFalse(node0.isParamList());
1220:       assertEquals(1245488, node0.getSourcePosition());
1221:       assertFalse(node0.isNull());
1222:       assertFalse(node0.isComma());
1223:       assertEquals(0, node0.getChildCount());
1224:       assertFalse(node0.isStringKey());
1225:       assertFalse(node0.isName());
1226:       assertFalse(node0.isCall());
1227:       assertFalse(node0.isBreak());
1228:       assertFalse(node0.isVoid());
1229:       assertFalse(node0.isNew());
1230:       assertFalse(node0.isTrue());
1231:       assertFalse(node0.isAdd());
1232:       assertFalse(node0.isVar());
1233:       assertFalse(node0.isEmpty());
1234:       assertFalse(node0.isDefaultCase());
1235:       assertFalse(node0.isDo());
1236:       assertEquals(304, node0.getCharno());
1237:       assertFalse(node0.isNE());
1238:       assertFalse(node0.isIn());
1239:       assertFalse(node0.isGetterDef());
1240:       assertFalse(node0.isArrayLit());
1241:       assertFalse(node0.isSwitch());
1242:       assertFalse(node0.isIf());
1243:       assertFalse(node0.isDelProp());
1244:       assertFalse(node0.isRegExp());
1245:       assertFalse(node0.isHook());
1246:       assertFalse(node0.isDebugger());
1247:       assertFalse(node0.isCase());
1248:       assertFalse(node0.isString());
1249:       assertFalse(node0.isFor());
1250:       assertFalse(node0.isTry());
1251:       assertEquals(304, node0.getType());
1252:       assertFalse(node0.isGetProp());
1253:       assertFalse(node0.isSetterDef());
1254:       assertFalse(node0.isThis());
1255:       assertFalse(node0.isInstanceOf());
1256:       assertFalse(node0.isObjectLit());
1257:       assertFalse(node0.isFalse());
1258:       assertFalse(node0.isWith());
1259:       assertFalse(node0.isAnd());
1260:       assertFalse(node0.isCatch());
1261:       assertFalse(node0.isInc());
1262:       assertFalse(node0.isFunction());
1263:       assertFalse(node0.isThrow());
1264:       assertFalse(boolean2);
1265:       assertEquals(2, Node.POST_FLAG);
1266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1267:       assertEquals(37, Node.OPT_ARG_NAME);
1268:       assertEquals(56, Node.CHANGE_TIME);
1269:       assertEquals(47, Node.IS_DISPATCHER);
1270:       assertEquals(32, Node.INCRDECR_PROP);
1271:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1272:       assertEquals(12, Node.COLUMN_BITS);
1273:       assertEquals(30, Node.VAR_ARGS_NAME);
1274:       assertEquals(43, Node.IS_CONSTANT_NAME);
1275:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1276:       assertEquals(54, Node.SLASH_V);
1277:       assertEquals(1, Node.DECR_FLAG);
1278:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1279:       assertEquals(46, Node.IS_NAMESPACE);
1280:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1281:       assertEquals(50, Node.FREE_CALL);
1282:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1283:       assertEquals(8, Node.FLAG_NO_THROWS);
1284:       assertEquals(39, Node.EMPTY_BLOCK);
1285:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1286:       assertEquals(48, Node.DIRECTIVES);
1287:       assertEquals(4095, Node.COLUMN_MASK);
1288:       assertEquals(40, Node.ORIGINALNAME_PROP);
1289:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1290:       assertEquals(36, Node.QUOTED_PROP);
1291:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1292:       assertEquals(53, Node.INPUT_ID);
1293:       assertEquals(49, Node.DIRECT_EVAL);
1294:       assertEquals(57, Node.LAST_PROP);
1295:       assertEquals(55, Node.INFERRED_FUNCTION);
1296:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1297:       assertEquals(57, Node.REFLECTED_OBJECT);
1298:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1299:       assertEquals(29, Node.JSDOC_INFO_PROP);
1300:       assertEquals(52, Node.LENGTH);
1301:       assertNotSame(node0, node2);
1302:       assertNotSame(node0, node1);
1303:       
1304:       int int0 = node1.getType();
1305:       assertFalse(node0.equals((Object)node2));
1306:       assertFalse(node0.equals((Object)node1));
1307:       assertFalse(node1.equals((Object)node2));
1308:       assertFalse(node1.equals((Object)node0));
1309:       assertFalse(node0.isLabel());
1310:       assertFalse(node0.isAssignAdd());
1311:       assertFalse(node0.isReturn());
1312:       assertFalse(node0.isNumber());
1313:       assertFalse(node0.isDec());
1314:       assertFalse(node0.isTypeOf());
1315:       assertFalse(node0.hasMoreThanOneChild());
1316:       assertFalse(node0.hasChildren());
1317:       assertFalse(node0.isOr());
1318:       assertFalse(node0.isAssign());
1319:       assertFalse(node0.isGetElem());
1320:       assertFalse(node0.isContinue());
1321:       assertFalse(node0.isCast());
1322:       assertFalse(node0.isLabelName());
1323:       assertFalse(node0.isBlock());
1324:       assertEquals(304, node0.getLineno());
1325:       assertFalse(node0.isExprResult());
1326:       assertFalse(node0.isScript());
1327:       assertFalse(node0.isNot());
1328:       assertFalse(node0.isWhile());
1329:       assertFalse(node0.hasOneChild());
1330:       assertFalse(node0.isParamList());
1331:       assertEquals(1245488, node0.getSourcePosition());
1332:       assertFalse(node0.isNull());
1333:       assertFalse(node0.isComma());
1334:       assertEquals(0, node0.getChildCount());
1335:       assertFalse(node0.isStringKey());
1336:       assertFalse(node0.isName());
1337:       assertFalse(node0.isCall());
1338:       assertFalse(node0.isBreak());
1339:       assertFalse(node0.isVoid());
1340:       assertFalse(node0.isNew());
1341:       assertFalse(node0.isTrue());
1342:       assertFalse(node0.isAdd());
1343:       assertFalse(node0.isVar());
1344:       assertFalse(node0.isEmpty());
1345:       assertFalse(node0.isDefaultCase());
1346:       assertFalse(node0.isDo());
1347:       assertEquals(304, node0.getCharno());
1348:       assertFalse(node0.isNE());
1349:       assertFalse(node0.isIn());
1350:       assertFalse(node0.isGetterDef());
1351:       assertFalse(node0.isArrayLit());
1352:       assertFalse(node0.isSwitch());
1353:       assertFalse(node0.isIf());
1354:       assertFalse(node0.isDelProp());
1355:       assertFalse(node0.isRegExp());
1356:       assertFalse(node0.isHook());
1357:       assertFalse(node0.isDebugger());
1358:       assertFalse(node0.isCase());
1359:       assertFalse(node0.isString());
1360:       assertFalse(node0.isFor());
1361:       assertFalse(node0.isTry());
1362:       assertEquals(304, node0.getType());
1363:       assertFalse(node0.isGetProp());
1364:       assertFalse(node0.isSetterDef());
1365:       assertFalse(node0.isThis());
1366:       assertFalse(node0.isInstanceOf());
1367:       assertFalse(node0.isObjectLit());
1368:       assertFalse(node0.isFalse());
1369:       assertFalse(node0.isWith());
1370:       assertFalse(node0.isAnd());
1371:       assertFalse(node0.isCatch());
1372:       assertFalse(node0.isInc());
1373:       assertFalse(node0.isFunction());
1374:       assertFalse(node0.isThrow());
1375:       assertFalse(node1.isReturn());
1376:       assertFalse(node1.isOr());
1377:       assertFalse(node1.hasMoreThanOneChild());
1378:       assertFalse(node1.isAssignAdd());
1379:       assertFalse(node1.isWhile());
1380:       assertFalse(node1.isDo());
1381:       assertFalse(node1.isAssign());
1382:       assertFalse(node1.isTypeOf());
1383:       assertFalse(node1.isContinue());
1384:       assertFalse(node1.isBlock());
1385:       assertFalse(node1.isDec());
1386:       assertFalse(node1.isLabel());
1387:       assertEquals(40, node1.getLineno());
1388:       assertFalse(node1.isScript());
1389:       assertFalse(node1.isCast());
1390:       assertFalse(node1.isLabelName());
1391:       assertFalse(node1.isNot());
1392:       assertFalse(node1.isStringKey());
1393:       assertFalse(node1.isNumber());
1394:       assertFalse(node1.isAnd());
1395:       assertFalse(node1.isParamList());
1396:       assertFalse(node1.isObjectLit());
1397:       assertFalse(node1.isBreak());
1398:       assertFalse(node1.isGetProp());
1399:       assertFalse(node1.isDefaultCase());
1400:       assertFalse(node1.isComma());
1401:       assertFalse(node1.isVar());
1402:       assertFalse(node1.isAdd());
1403:       assertFalse(node1.isCall());
1404:       assertFalse(node1.isExprResult());
1405:       assertFalse(node1.isVoid());
1406:       assertEquals(0, node1.getType());
1407:       assertFalse(node1.isNew());
1408:       assertFalse(node1.isGetElem());
1409:       assertFalse(node1.isEmpty());
1410:       assertFalse(node1.isDelProp());
1411:       assertFalse(node1.isName());
1412:       assertFalse(node1.isTrue());
1413:       assertFalse(node1.isNull());
1414:       assertEquals(1, node1.getChildCount());
1415:       assertTrue(node1.hasChildren());
1416:       assertFalse(node1.isIn());
1417:       assertEquals(163881, node1.getSourcePosition());
1418:       assertFalse(node1.isCase());
1419:       assertTrue(node1.hasOneChild());
1420:       assertFalse(node1.isFor());
1421:       assertFalse(node1.isTry());
1422:       assertFalse(node1.isArrayLit());
1423:       assertFalse(node1.isString());
1424:       assertFalse(node1.isGetterDef());
1425:       assertFalse(node1.isSwitch());
1426:       assertFalse(node1.isDebugger());
1427:       assertFalse(node1.isInstanceOf());
1428:       assertFalse(node1.isSetterDef());
1429:       assertFalse(node1.isCatch());
1430:       assertEquals(41, node1.getCharno());
1431:       assertFalse(node1.isRegExp());
1432:       assertFalse(node1.isFalse());
1433:       assertFalse(node1.isWith());
1434:       assertFalse(node1.isThis());
1435:       assertFalse(node1.isFunction());
1436:       assertFalse(node1.isThrow());
1437:       assertFalse(node1.isHook());
1438:       assertFalse(node1.isInc());
1439:       assertFalse(node1.isIf());
1440:       assertFalse(node1.isNE());
1441:       assertEquals(0, int0);
1442:       assertEquals(2, Node.POST_FLAG);
1443:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1444:       assertEquals(37, Node.OPT_ARG_NAME);
1445:       assertEquals(56, Node.CHANGE_TIME);
1446:       assertEquals(47, Node.IS_DISPATCHER);
1447:       assertEquals(32, Node.INCRDECR_PROP);
1448:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1449:       assertEquals(12, Node.COLUMN_BITS);
1450:       assertEquals(30, Node.VAR_ARGS_NAME);
1451:       assertEquals(43, Node.IS_CONSTANT_NAME);
1452:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1453:       assertEquals(54, Node.SLASH_V);
1454:       assertEquals(1, Node.DECR_FLAG);
1455:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1456:       assertEquals(46, Node.IS_NAMESPACE);
1457:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1458:       assertEquals(50, Node.FREE_CALL);
1459:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1460:       assertEquals(8, Node.FLAG_NO_THROWS);
1461:       assertEquals(39, Node.EMPTY_BLOCK);
1462:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1463:       assertEquals(48, Node.DIRECTIVES);
1464:       assertEquals(4095, Node.COLUMN_MASK);
1465:       assertEquals(40, Node.ORIGINALNAME_PROP);
1466:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1467:       assertEquals(36, Node.QUOTED_PROP);
1468:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1469:       assertEquals(53, Node.INPUT_ID);
1470:       assertEquals(49, Node.DIRECT_EVAL);
1471:       assertEquals(57, Node.LAST_PROP);
1472:       assertEquals(55, Node.INFERRED_FUNCTION);
1473:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1474:       assertEquals(57, Node.REFLECTED_OBJECT);
1475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1476:       assertEquals(29, Node.JSDOC_INFO_PROP);
1477:       assertEquals(52, Node.LENGTH);
1478:       assertEquals(56, Node.CHANGE_TIME);
1479:       assertEquals(47, Node.IS_DISPATCHER);
1480:       assertEquals(12, Node.COLUMN_BITS);
1481:       assertEquals(46, Node.IS_NAMESPACE);
1482:       assertEquals(2, Node.POST_FLAG);
1483:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1484:       assertEquals(1, Node.DECR_FLAG);
1485:       assertEquals(29, Node.JSDOC_INFO_PROP);
1486:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1487:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1488:       assertEquals(57, Node.LAST_PROP);
1489:       assertEquals(32, Node.INCRDECR_PROP);
1490:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1491:       assertEquals(54, Node.SLASH_V);
1492:       assertEquals(43, Node.IS_CONSTANT_NAME);
1493:       assertEquals(30, Node.VAR_ARGS_NAME);
1494:       assertEquals(40, Node.ORIGINALNAME_PROP);
1495:       assertEquals(48, Node.DIRECTIVES);
1496:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1497:       assertEquals(8, Node.FLAG_NO_THROWS);
1498:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1499:       assertEquals(50, Node.FREE_CALL);
1500:       assertEquals(55, Node.INFERRED_FUNCTION);
1501:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1502:       assertEquals(39, Node.EMPTY_BLOCK);
1503:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1504:       assertEquals(53, Node.INPUT_ID);
1505:       assertEquals(52, Node.LENGTH);
1506:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1507:       assertEquals(57, Node.REFLECTED_OBJECT);
1508:       assertEquals(36, Node.QUOTED_PROP);
1509:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1510:       assertEquals(4095, Node.COLUMN_MASK);
1511:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1512:       assertEquals(49, Node.DIRECT_EVAL);
1513:       assertEquals(37, Node.OPT_ARG_NAME);
1514:       assertNotSame(node0, node2);
1515:       assertNotSame(node0, node1);
1516:       assertNotSame(node1, node2);
1517:       assertNotSame(node1, node0);
1518:       
1519:       boolean boolean3 = node2.hasMoreThanOneChild();
1520:       assertFalse(node0.equals((Object)node2));
1521:       assertFalse(node0.equals((Object)node1));
1522:       assertFalse(node1.equals((Object)node2));
1523:       assertFalse(node1.equals((Object)node0));
1524:       assertFalse(node2.equals((Object)node1));
1525:       assertFalse(node2.equals((Object)node0));
1526:       assertTrue(boolean3 == boolean1);
1527:       assertTrue(boolean3 == boolean2);
1528:       assertTrue(boolean3 == boolean0);
1529:       assertFalse(node0.isLabel());
1530:       assertFalse(node0.isAssignAdd());
1531:       assertFalse(node0.isReturn());
1532:       assertFalse(node0.isNumber());
1533:       assertFalse(node0.isDec());
1534:       assertFalse(node0.isTypeOf());
1535:       assertFalse(node0.hasMoreThanOneChild());
1536:       assertFalse(node0.hasChildren());
1537:       assertFalse(node0.isOr());
1538:       assertFalse(node0.isAssign());
1539:       assertFalse(node0.isGetElem());
1540:       assertFalse(node0.isContinue());
1541:       assertFalse(node0.isCast());
1542:       assertFalse(node0.isLabelName());
1543:       assertFalse(node0.isBlock());
1544:       assertEquals(304, node0.getLineno());
1545:       assertFalse(node0.isExprResult());
1546:       assertFalse(node0.isScript());
1547:       assertFalse(node0.isNot());
1548:       assertFalse(node0.isWhile());
1549:       assertFalse(node0.hasOneChild());
1550:       assertFalse(node0.isParamList());
1551:       assertEquals(1245488, node0.getSourcePosition());
1552:       assertFalse(node0.isNull());
1553:       assertFalse(node0.isComma());
1554:       assertEquals(0, node0.getChildCount());
1555:       assertFalse(node0.isStringKey());
1556:       assertFalse(node0.isName());
1557:       assertFalse(node0.isCall());
1558:       assertFalse(node0.isBreak());
1559:       assertFalse(node0.isVoid());
1560:       assertFalse(node0.isNew());
1561:       assertFalse(node0.isTrue());
1562:       assertFalse(node0.isAdd());
1563:       assertFalse(node0.isVar());
1564:       assertFalse(node0.isEmpty());
1565:       assertFalse(node0.isDefaultCase());
1566:       assertFalse(node0.isDo());
1567:       assertEquals(304, node0.getCharno());
1568:       assertFalse(node0.isNE());
1569:       assertFalse(node0.isIn());
1570:       assertFalse(node0.isGetterDef());
1571:       assertFalse(node0.isArrayLit());
1572:       assertFalse(node0.isSwitch());
1573:       assertFalse(node0.isIf());
1574:       assertFalse(node0.isDelProp());
1575:       assertFalse(node0.isRegExp());
1576:       assertFalse(node0.isHook());
1577:       assertFalse(node0.isDebugger());
1578:       assertFalse(node0.isCase());
1579:       assertFalse(node0.isString());
1580:       assertFalse(node0.isFor());
1581:       assertFalse(node0.isTry());
1582:       assertEquals(304, node0.getType());
1583:       assertFalse(node0.isGetProp());
1584:       assertFalse(node0.isSetterDef());
1585:       assertFalse(node0.isThis());
1586:       assertFalse(node0.isInstanceOf());
1587:       assertFalse(node0.isObjectLit());
1588:       assertFalse(node0.isFalse());
1589:       assertFalse(node0.isWith());
1590:       assertFalse(node0.isAnd());
1591:       assertFalse(node0.isCatch());
1592:       assertFalse(node0.isInc());
1593:       assertFalse(node0.isFunction());
1594:       assertFalse(node0.isThrow());
1595:       assertFalse(node1.isReturn());
1596:       assertFalse(node1.isOr());
1597:       assertFalse(node1.hasMoreThanOneChild());
1598:       assertFalse(node1.isAssignAdd());
1599:       assertFalse(node1.isWhile());
1600:       assertFalse(node1.isDo());
1601:       assertFalse(node1.isAssign());
1602:       assertFalse(node1.isTypeOf());
1603:       assertFalse(node1.isContinue());
1604:       assertFalse(node1.isBlock());
1605:       assertFalse(node1.isDec());
1606:       assertFalse(node1.isLabel());
1607:       assertEquals(40, node1.getLineno());
1608:       assertFalse(node1.isScript());
1609:       assertFalse(node1.isCast());
1610:       assertFalse(node1.isLabelName());
1611:       assertFalse(node1.isNot());
1612:       assertFalse(node1.isStringKey());
1613:       assertFalse(node1.isNumber());
1614:       assertFalse(node1.isAnd());
1615:       assertFalse(node1.isParamList());
1616:       assertFalse(node1.isObjectLit());
1617:       assertFalse(node1.isBreak());
1618:       assertFalse(node1.isGetProp());
1619:       assertFalse(node1.isDefaultCase());
1620:       assertFalse(node1.isComma());
1621:       assertFalse(node1.isVar());
1622:       assertFalse(node1.isAdd());
1623:       assertFalse(node1.isCall());
1624:       assertFalse(node1.isExprResult());
1625:       assertFalse(node1.isVoid());
1626:       assertEquals(0, node1.getType());
1627:       assertFalse(node1.isNew());
1628:       assertFalse(node1.isGetElem());
1629:       assertFalse(node1.isEmpty());
1630:       assertFalse(node1.isDelProp());
1631:       assertFalse(node1.isName());
1632:       assertFalse(node1.isTrue());
1633:       assertFalse(node1.isNull());
1634:       assertEquals(1, node1.getChildCount());
1635:       assertTrue(node1.hasChildren());
1636:       assertFalse(node1.isIn());
1637:       assertEquals(163881, node1.getSourcePosition());
1638:       assertFalse(node1.isCase());
1639:       assertTrue(node1.hasOneChild());
1640:       assertFalse(node1.isFor());
1641:       assertFalse(node1.isTry());
1642:       assertFalse(node1.isArrayLit());
1643:       assertFalse(node1.isString());
1644:       assertFalse(node1.isGetterDef());
1645:       assertFalse(node1.isSwitch());
1646:       assertFalse(node1.isDebugger());
1647:       assertFalse(node1.isInstanceOf());
1648:       assertFalse(node1.isSetterDef());
1649:       assertFalse(node1.isCatch());
1650:       assertEquals(41, node1.getCharno());
1651:       assertFalse(node1.isRegExp());
1652:       assertFalse(node1.isFalse());
1653:       assertFalse(node1.isWith());
1654:       assertFalse(node1.isThis());
1655:       assertFalse(node1.isFunction());
1656:       assertFalse(node1.isThrow());
1657:       assertFalse(node1.isHook());
1658:       assertFalse(node1.isInc());
1659:       assertFalse(node1.isIf());
1660:       assertFalse(node1.isNE());
1661:       assertFalse(node2.isDefaultCase());
1662:       assertFalse(node2.isRegExp());
1663:       assertFalse(node2.isFunction());
1664:       assertFalse(node2.isDebugger());
1665:       assertFalse(node2.isTrue());
1666:       assertEquals(0, node2.getChildCount());
1667:       assertFalse(node2.isVoid());
1668:       assertFalse(node2.isCatch());
1669:       assertFalse(node2.isArrayLit());
1670:       assertFalse(node2.isIf());
1671:       assertFalse(node2.isDelProp());
1672:       assertFalse(node2.isName());
1673:       assertFalse(node2.isVar());
1674:       assertFalse(node2.isNE());
1675:       assertFalse(node2.isNull());
1676:       assertFalse(node2.isIn());
1677:       assertEquals(163881, node2.getSourcePosition());
1678:       assertFalse(node2.isNew());
1679:       assertFalse(node2.isAdd());
1680:       assertFalse(node2.isEmpty());
1681:       assertFalse(node2.isSetterDef());
1682:       assertFalse(node2.isDo());
1683:       assertFalse(node2.isSwitch());
1684:       assertFalse(node2.isBlock());
1685:       assertFalse(node2.hasMoreThanOneChild());
1686:       assertFalse(node2.isGetterDef());
1687:       assertFalse(node2.isLabelName());
1688:       assertFalse(node2.isNumber());
1689:       assertFalse(node2.isStringKey());
1690:       assertFalse(node2.isParamList());
1691:       assertEquals(40, node2.getLineno());
1692:       assertFalse(node2.isFor());
1693:       assertFalse(node2.isThis());
1694:       assertFalse(node2.isHook());
1695:       assertFalse(node2.hasOneChild());
1696:       assertFalse(node2.isTry());
1697:       assertFalse(node2.isCase());
1698:       assertFalse(node2.isScript());
1699:       assertFalse(node2.isWith());
1700:       assertFalse(node2.isNot());
1701:       assertFalse(node2.isAnd());
1702:       assertFalse(node2.isInstanceOf());
1703:       assertEquals(41, node2.getCharno());
1704:       assertFalse(node2.isCast());
1705:       assertFalse(node2.isExprResult());
1706:       assertFalse(node2.isGetElem());
1707:       assertFalse(node2.isBreak());
1708:       assertFalse(node2.isFalse());
1709:       assertFalse(node2.isThrow());
1710:       assertFalse(node2.isLabel());
1711:       assertFalse(node2.isOr());
1712:       assertFalse(node2.isAssignAdd());
1713:       assertFalse(node2.isInc());
1714:       assertFalse(node2.isWhile());
1715:       assertFalse(node2.isString());
1716:       assertFalse(node2.isContinue());
1717:       assertFalse(node2.isCall());
1718:       assertEquals(0, node2.getType());
1719:       assertFalse(node2.hasChildren());
1720:       assertFalse(node2.isDec());
1721:       assertFalse(node2.isAssign());
1722:       assertFalse(node2.isTypeOf());
1723:       assertFalse(node2.isComma());
1724:       assertFalse(node2.isReturn());
1725:       assertFalse(node2.isObjectLit());
1726:       assertFalse(node2.isGetProp());
1727:       assertFalse(boolean3);
1728:       assertEquals(2, Node.POST_FLAG);
1729:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1730:       assertEquals(37, Node.OPT_ARG_NAME);
1731:       assertEquals(56, Node.CHANGE_TIME);
1732:       assertEquals(47, Node.IS_DISPATCHER);
1733:       assertEquals(32, Node.INCRDECR_PROP);
1734:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1735:       assertEquals(12, Node.COLUMN_BITS);
1736:       assertEquals(30, Node.VAR_ARGS_NAME);
1737:       assertEquals(43, Node.IS_CONSTANT_NAME);
1738:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1739:       assertEquals(54, Node.SLASH_V);
1740:       assertEquals(1, Node.DECR_FLAG);
1741:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1742:       assertEquals(46, Node.IS_NAMESPACE);
1743:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1744:       assertEquals(50, Node.FREE_CALL);
1745:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1746:       assertEquals(8, Node.FLAG_NO_THROWS);
1747:       assertEquals(39, Node.EMPTY_BLOCK);
1748:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1749:       assertEquals(48, Node.DIRECTIVES);
1750:       assertEquals(4095, Node.COLUMN_MASK);
1751:       assertEquals(40, Node.ORIGINALNAME_PROP);
1752:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1753:       assertEquals(36, Node.QUOTED_PROP);
1754:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1755:       assertEquals(53, Node.INPUT_ID);
1756:       assertEquals(49, Node.DIRECT_EVAL);
1757:       assertEquals(57, Node.LAST_PROP);
1758:       assertEquals(55, Node.INFERRED_FUNCTION);
1759:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1760:       assertEquals(57, Node.REFLECTED_OBJECT);
1761:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1762:       assertEquals(29, Node.JSDOC_INFO_PROP);
1763:       assertEquals(52, Node.LENGTH);
1764:       assertEquals(56, Node.CHANGE_TIME);
1765:       assertEquals(47, Node.IS_DISPATCHER);
1766:       assertEquals(12, Node.COLUMN_BITS);
1767:       assertEquals(46, Node.IS_NAMESPACE);
1768:       assertEquals(2, Node.POST_FLAG);
1769:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1770:       assertEquals(1, Node.DECR_FLAG);
1771:       assertEquals(29, Node.JSDOC_INFO_PROP);
1772:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1773:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1774:       assertEquals(57, Node.LAST_PROP);
1775:       assertEquals(32, Node.INCRDECR_PROP);
1776:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1777:       assertEquals(54, Node.SLASH_V);
1778:       assertEquals(43, Node.IS_CONSTANT_NAME);
1779:       assertEquals(30, Node.VAR_ARGS_NAME);
1780:       assertEquals(40, Node.ORIGINALNAME_PROP);
1781:       assertEquals(48, Node.DIRECTIVES);
1782:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1783:       assertEquals(8, Node.FLAG_NO_THROWS);
1784:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1785:       assertEquals(50, Node.FREE_CALL);
1786:       assertEquals(55, Node.INFERRED_FUNCTION);
1787:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1788:       assertEquals(39, Node.EMPTY_BLOCK);
1789:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1790:       assertEquals(53, Node.INPUT_ID);
1791:       assertEquals(52, Node.LENGTH);
1792:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1793:       assertEquals(57, Node.REFLECTED_OBJECT);
1794:       assertEquals(36, Node.QUOTED_PROP);
1795:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1796:       assertEquals(4095, Node.COLUMN_MASK);
1797:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1798:       assertEquals(49, Node.DIRECT_EVAL);
1799:       assertEquals(37, Node.OPT_ARG_NAME);
1800:       assertEquals(4095, Node.COLUMN_MASK);
1801:       assertEquals(55, Node.INFERRED_FUNCTION);
1802:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1803:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1804:       assertEquals(29, Node.JSDOC_INFO_PROP);
1805:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1806:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1807:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1808:       assertEquals(37, Node.OPT_ARG_NAME);
1809:       assertEquals(39, Node.EMPTY_BLOCK);
1810:       assertEquals(53, Node.INPUT_ID);
1811:       assertEquals(48, Node.DIRECTIVES);
1812:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1813:       assertEquals(52, Node.LENGTH);
1814:       assertEquals(8, Node.FLAG_NO_THROWS);
1815:       assertEquals(56, Node.CHANGE_TIME);
1816:       assertEquals(36, Node.QUOTED_PROP);
1817:       assertEquals(57, Node.REFLECTED_OBJECT);
1818:       assertEquals(30, Node.VAR_ARGS_NAME);
1819:       assertEquals(49, Node.DIRECT_EVAL);
1820:       assertEquals(1, Node.DECR_FLAG);
1821:       assertEquals(57, Node.LAST_PROP);
1822:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1823:       assertEquals(32, Node.INCRDECR_PROP);
1824:       assertEquals(12, Node.COLUMN_BITS);
1825:       assertEquals(2, Node.POST_FLAG);
1826:       assertEquals(47, Node.IS_DISPATCHER);
1827:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1828:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1829:       assertEquals(50, Node.FREE_CALL);
1830:       assertEquals(40, Node.ORIGINALNAME_PROP);
1831:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1832:       assertEquals(54, Node.SLASH_V);
1833:       assertEquals(43, Node.IS_CONSTANT_NAME);
1834:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1835:       assertEquals(46, Node.IS_NAMESPACE);
1836:       assertNotSame(node0, node2);
1837:       assertNotSame(node0, node1);
1838:       assertNotSame(node1, node2);
1839:       assertNotSame(node1, node0);
1840:       assertNotSame(node2, node1);
1841:       assertNotSame(node2, node0);
1842:   }
1843: }
RegularFileObject[/tmp/EvoSuite_72_1629222879757/com/google/javascript/rhino/Node_72_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:40 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_72_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_72_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.common.collect.Iterables",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.common.collect.AbstractMultimap$Values",
132:       "com.google.javascript.rhino.jstype.ProxyObjectType",
133:       "com.google.common.collect.Sets$SetView",
134:       "com.google.common.collect.RegularImmutableAsList",
135:       "com.google.javascript.rhino.jstype.TemplateType",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMultimap$Entries",
190:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
191:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
192:       "com.google.javascript.rhino.jstype.EnumElementType",
193:       "com.google.javascript.rhino.jstype.UnionType",
194:       "com.google.common.base.Objects",
195:       "com.google.javascript.rhino.Node$NumberNode",
196:       "com.google.common.collect.SingletonImmutableList",
197:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
198:       "com.google.common.collect.ImmutableCollection$Builder",
199:       "com.google.javascript.rhino.jstype.StaticSlot",
200:       "com.google.common.collect.Iterators$6",
201:       "com.google.common.collect.BiMap",
202:       "com.google.common.collect.Iterators$7",
203:       "com.google.common.collect.AbstractSetMultimap",
204:       "com.google.common.base.Function",
205:       "com.google.common.collect.ImmutableSet",
206:       "com.google.common.collect.Lists$AbstractListWrapper",
207:       "com.google.common.collect.ImmutableMap",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.Maps$1",
211:       "com.google.javascript.rhino.jstype.EnumType",
212:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.Multimaps$Entries",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
236:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
237:       "com.google.common.collect.ImmutableList",
238:       "com.google.common.collect.SingletonImmutableBiMap",
239:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
240:       "com.google.javascript.rhino.jstype.StringType",
241:       "com.google.javascript.rhino.Node$AbstractPropListItem",
242:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
243:       "com.google.javascript.rhino.jstype.TemplatizedType",
244:       "com.google.javascript.rhino.jstype.Visitor",
245:       "com.google.javascript.rhino.jstype.NoResolvedType",
246:       "com.google.javascript.rhino.jstype.JSTypeNative",
247:       "com.google.javascript.rhino.jstype.AllType",
248:       "com.google.common.collect.Maps",
249:       "com.google.common.collect.SetMultimap",
250:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
251:       "com.google.common.collect.Maps$EntryTransformer",
252:       "com.google.javascript.rhino.JSTypeExpression",
253:       "com.google.common.collect.Iterators$MergingIterator"
254:     );
255:   } 
256: 
257:   private static void resetClasses() {
258:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_72_tmp__ESTest_scaffolding.class.getClassLoader()); 
259: 
260:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
261:       "com.google.javascript.rhino.Node",
262:       "com.google.javascript.rhino.Node$NumberNode",
263:       "com.google.javascript.rhino.Node$StringNode",
264:       "com.google.javascript.rhino.Node$AbstractPropListItem",
265:       "com.google.javascript.rhino.Node$ObjectPropListItem",
266:       "com.google.javascript.rhino.Node$IntPropListItem",
267:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
268:       "com.google.javascript.rhino.Node$AncestorIterable",
269:       "com.google.javascript.rhino.Node$NodeMismatch",
270:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
271:       "com.google.javascript.rhino.Node$SideEffectFlags",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.Token",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.base.Objects",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
352:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.common.collect.AbstractIndexedListIterator",
362:       "com.google.common.collect.Iterators$11",
363:       "com.google.javascript.rhino.Node$AncestorIterable$1",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.InputId",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.javascript.rhino.JSTypeExpression",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.Sets$ImprovedAbstractSet",
375:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
376:       "com.google.common.collect.Hashing",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
378:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
379:       "com.google.common.collect.Platform"
380:     );
381:   }
382: }

[MASTER] 17:54:40.264 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(304, 304, 304);
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertEquals(304, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(304, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertNotNull(node0);

Node node1 = new Node(0, node0, 40, 41);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertEquals(304, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(304, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals(40, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertFalse(node1.isObjectLit());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertEquals(0, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isDebugger());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertEquals(41, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(node1);

Node node2 = node1.cloneNode();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertEquals(304, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(304, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals(40, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertFalse(node1.isObjectLit());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertEquals(0, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isDebugger());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertEquals(41, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(163881, node2.getSourcePosition());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals(40, node2.getLineno());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertEquals(41, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertEquals(0, node2.getType());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertNotNull(node2);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node1);
assertNotSame(node2, node0);

boolean boolean0 = node2.isCall();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertEquals(304, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(304, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals(40, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertFalse(node1.isObjectLit());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertEquals(0, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isDebugger());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertEquals(41, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(163881, node2.getSourcePosition());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals(40, node2.getLineno());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertEquals(41, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertEquals(0, node2.getType());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(boolean0);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node1);
assertNotSame(node2, node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertEquals(304, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(304, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertNotSame(node0, node2);
assertNotSame(node0, node1);

boolean boolean1 = node0.isHook();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertEquals(304, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(304, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(boolean1);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertNotSame(node0, node2);
assertNotSame(node0, node1);

boolean boolean2 = node0.isCall();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertEquals(304, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(304, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(boolean2);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertNotSame(node0, node2);
assertNotSame(node0, node1);

int int0 = node1.getType();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertEquals(304, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(304, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals(40, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertFalse(node1.isObjectLit());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertEquals(0, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isDebugger());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertEquals(41, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, int0);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

boolean boolean3 = node2.hasMoreThanOneChild();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertEquals(304, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals(304, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertEquals(304, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals(40, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isParamList());
assertFalse(node1.isObjectLit());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertEquals(0, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isDebugger());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertEquals(41, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(163881, node2.getSourcePosition());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals(40, node2.getLineno());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertEquals(41, node2.getCharno());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertEquals(0, node2.getType());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(boolean3);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node1);
assertNotSame(node2, node0);


[MASTER] 17:54:41.139 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_75_1629222880639/com/google/javascript/rhino/Node_75_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_75_1629222880639/com/google/javascript/rhino/Node_75_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:41.139 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:41.140 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:41.140 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1179
[MASTER] 17:54:41.143 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_75_1629222880639/com/google/javascript/rhino/Node_75_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:40 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_75_tmp__ESTest extends Node_75_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(0.0);
23:       assertFalse(node0.isIn());
24:       assertTrue(node0.isNumber());
25:       assertFalse(node0.isCase());
26:       assertFalse(node0.isGetterDef());
27:       assertFalse(node0.isIf());
28:       assertFalse(node0.isDelProp());
29:       assertFalse(node0.isSwitch());
30:       assertFalse(node0.isNE());
31:       assertFalse(node0.isEmpty());
32:       assertFalse(node0.isString());
33:       assertEquals((-1), node0.getCharno());
34:       assertFalse(node0.isHook());
35:       assertFalse(node0.isVoid());
36:       assertFalse(node0.isTry());
37:       assertFalse(node0.isBreak());
38:       assertFalse(node0.isRegExp());
39:       assertFalse(node0.isFor());
40:       assertFalse(node0.isThis());
41:       assertFalse(node0.isComma());
42:       assertEquals(0, node0.getChildCount());
43:       assertFalse(node0.isNull());
44:       assertFalse(node0.isScript());
45:       assertFalse(node0.isStringKey());
46:       assertFalse(node0.isParamList());
47:       assertFalse(node0.isTrue());
48:       assertFalse(node0.isVar());
49:       assertFalse(node0.isAdd());
50:       assertFalse(node0.isLabelName());
51:       assertFalse(node0.isNew());
52:       assertFalse(node0.isArrayLit());
53:       assertFalse(node0.isDefaultCase());
54:       assertFalse(node0.isLabel());
55:       assertFalse(node0.isReturn());
56:       assertFalse(node0.hasMoreThanOneChild());
57:       assertFalse(node0.isAssignAdd());
58:       assertFalse(node0.isDo());
59:       assertEquals((-1), node0.getLineno());
60:       assertFalse(node0.isOr());
61:       assertEquals((-1), node0.getSourcePosition());
62:       assertFalse(node0.isCall());
63:       assertFalse(node0.isName());
64:       assertFalse(node0.isExprResult());
65:       assertFalse(node0.isGetElem());
66:       assertFalse(node0.hasOneChild());
67:       assertFalse(node0.hasChildren());
68:       assertFalse(node0.isTypeOf());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isWhile());
71:       assertFalse(node0.isBlock());
72:       assertEquals(39, node0.getType());
73:       assertFalse(node0.isAssign());
74:       assertFalse(node0.isDec());
75:       assertFalse(node0.isCatch());
76:       assertFalse(node0.isInstanceOf());
77:       assertFalse(node0.isAnd());
78:       assertFalse(node0.isGetProp());
79:       assertFalse(node0.isSetterDef());
80:       assertFalse(node0.isObjectLit());
81:       assertFalse(node0.isNot());
82:       assertFalse(node0.isDebugger());
83:       assertFalse(node0.isCast());
84:       assertFalse(node0.isInc());
85:       assertFalse(node0.isContinue());
86:       assertFalse(node0.isThrow());
87:       assertFalse(node0.isFalse());
88:       assertFalse(node0.isFunction());
89:       assertEquals(46, Node.IS_NAMESPACE);
90:       assertEquals(51, Node.STATIC_SOURCE_FILE);
91:       assertEquals(12, Node.COLUMN_BITS);
92:       assertEquals(47, Node.IS_DISPATCHER);
93:       assertEquals(2, Node.POST_FLAG);
94:       assertEquals(56, Node.CHANGE_TIME);
95:       assertEquals(37, Node.OPT_ARG_NAME);
96:       assertEquals(49, Node.DIRECT_EVAL);
97:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
98:       assertEquals(54, Node.SLASH_V);
99:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
100:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
101:       assertEquals(50, Node.FREE_CALL);
102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
103:       assertEquals(32, Node.INCRDECR_PROP);
104:       assertEquals(1, Node.DECR_FLAG);
105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
106:       assertEquals(4095, Node.COLUMN_MASK);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(40, Node.ORIGINALNAME_PROP);
109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
110:       assertEquals(43, Node.IS_CONSTANT_NAME);
111:       assertEquals(48, Node.DIRECTIVES);
112:       assertEquals(53, Node.INPUT_ID);
113:       assertEquals(52, Node.LENGTH);
114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
115:       assertEquals(36, Node.QUOTED_PROP);
116:       assertEquals(57, Node.REFLECTED_OBJECT);
117:       assertEquals(30, Node.VAR_ARGS_NAME);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
120:       assertEquals(55, Node.INFERRED_FUNCTION);
121:       assertEquals(29, Node.JSDOC_INFO_PROP);
122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
123:       assertEquals(39, Node.EMPTY_BLOCK);
124:       assertEquals(57, Node.LAST_PROP);
125:       assertNotNull(node0);
126:       
127:       Node node1 = Node.newString(0, "", 4, 38);
128:       assertFalse(node1.equals((Object)node0));
129:       assertFalse(node1.isDefaultCase());
130:       assertFalse(node1.isTrue());
131:       assertFalse(node1.isSetterDef());
132:       assertFalse(node1.isTry());
133:       assertEquals(16422, node1.getSourcePosition());
134:       assertFalse(node1.isDebugger());
135:       assertFalse(node1.isStringKey());
136:       assertFalse(node1.isEmpty());
137:       assertFalse(node1.isArrayLit());
138:       assertFalse(node1.isVar());
139:       assertFalse(node1.isParamList());
140:       assertFalse(node1.isFunction());
141:       assertEquals(0, node1.getChildCount());
142:       assertEquals(4, node1.getLineno());
143:       assertEquals(38, node1.getCharno());
144:       assertFalse(node1.isDo());
145:       assertFalse(node1.isAssignAdd());
146:       assertFalse(node1.isWhile());
147:       assertFalse(node1.isAdd());
148:       assertFalse(node1.isOr());
149:       assertFalse(node1.isNew());
150:       assertFalse(node1.isString());
151:       assertFalse(node1.isCall());
152:       assertFalse(node1.isName());
153:       assertFalse(node1.isGetElem());
154:       assertFalse(node1.isAssign());
155:       assertFalse(node1.hasChildren());
156:       assertFalse(node1.isNull());
157:       assertFalse(node1.isDelProp());
158:       assertEquals(0, node1.getType());
159:       assertFalse(node1.isExprResult());
160:       assertFalse(node1.isVoid());
161:       assertFalse(node1.isComma());
162:       assertFalse(node1.isReturn());
163:       assertFalse(node1.isBreak());
164:       assertFalse(node1.isDec());
165:       assertFalse(node1.isTypeOf());
166:       assertFalse(node1.isObjectLit());
167:       assertFalse(node1.isNot());
168:       assertFalse(node1.isAnd());
169:       assertFalse(node1.isGetProp());
170:       assertFalse(node1.isScript());
171:       assertFalse(node1.isFalse());
172:       assertFalse(node1.isThrow());
173:       assertFalse(node1.isLabelName());
174:       assertFalse(node1.isLabel());
175:       assertFalse(node1.isCast());
176:       assertFalse(node1.isContinue());
177:       assertFalse(node1.isCase());
178:       assertFalse(node1.isSwitch());
179:       assertFalse(node1.isInc());
180:       assertFalse(node1.isNumber());
181:       assertFalse(node1.isIn());
182:       assertFalse(node1.isGetterDef());
183:       assertFalse(node1.isFor());
184:       assertFalse(node1.hasOneChild());
185:       assertFalse(node1.isHook());
186:       assertFalse(node1.isIf());
187:       assertFalse(node1.isNE());
188:       assertFalse(node1.isBlock());
189:       assertFalse(node1.isThis());
190:       assertFalse(node1.isInstanceOf());
191:       assertFalse(node1.isRegExp());
192:       assertFalse(node1.hasMoreThanOneChild());
193:       assertFalse(node1.isWith());
194:       assertFalse(node1.isCatch());
195:       assertEquals(4095, Node.COLUMN_MASK);
196:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
197:       assertEquals(55, Node.INFERRED_FUNCTION);
198:       assertEquals(36, Node.QUOTED_PROP);
199:       assertEquals(8, Node.FLAG_NO_THROWS);
200:       assertEquals(48, Node.DIRECTIVES);
201:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
202:       assertEquals(43, Node.IS_CONSTANT_NAME);
203:       assertEquals(57, Node.REFLECTED_OBJECT);
204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
205:       assertEquals(29, Node.JSDOC_INFO_PROP);
206:       assertEquals(53, Node.INPUT_ID);
207:       assertEquals(52, Node.LENGTH);
208:       assertEquals(40, Node.ORIGINALNAME_PROP);
209:       assertEquals(2, Node.POST_FLAG);
210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
211:       assertEquals(39, Node.EMPTY_BLOCK);
212:       assertEquals(57, Node.LAST_PROP);
213:       assertEquals(47, Node.IS_DISPATCHER);
214:       assertEquals(30, Node.VAR_ARGS_NAME);
215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
216:       assertEquals(12, Node.COLUMN_BITS);
217:       assertEquals(32, Node.INCRDECR_PROP);
218:       assertEquals(51, Node.STATIC_SOURCE_FILE);
219:       assertEquals(1, Node.DECR_FLAG);
220:       assertEquals(37, Node.OPT_ARG_NAME);
221:       assertEquals(49, Node.DIRECT_EVAL);
222:       assertEquals(46, Node.IS_NAMESPACE);
223:       assertEquals(54, Node.SLASH_V);
224:       assertEquals(56, Node.CHANGE_TIME);
225:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
226:       assertEquals(50, Node.FREE_CALL);
227:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
228:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
231:       assertNotNull(node1);
232:       
233:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
234:       assertFalse(node0.equals((Object)node1));
235:       assertFalse(node1.equals((Object)node0));
236:       assertFalse(node0.isIn());
237:       assertTrue(node0.isNumber());
238:       assertFalse(node0.isCase());
239:       assertFalse(node0.isGetterDef());
240:       assertFalse(node0.isIf());
241:       assertFalse(node0.isDelProp());
242:       assertFalse(node0.isSwitch());
243:       assertFalse(node0.isNE());
244:       assertFalse(node0.isEmpty());
245:       assertFalse(node0.isString());
246:       assertEquals((-1), node0.getCharno());
247:       assertFalse(node0.isHook());
248:       assertFalse(node0.isVoid());
249:       assertFalse(node0.isTry());
250:       assertFalse(node0.isBreak());
251:       assertFalse(node0.isRegExp());
252:       assertFalse(node0.isFor());
253:       assertFalse(node0.isThis());
254:       assertFalse(node0.isComma());
255:       assertEquals(0, node0.getChildCount());
256:       assertFalse(node0.isNull());
257:       assertFalse(node0.isScript());
258:       assertFalse(node0.isStringKey());
259:       assertFalse(node0.isParamList());
260:       assertFalse(node0.isTrue());
261:       assertFalse(node0.isVar());
262:       assertFalse(node0.isAdd());
263:       assertFalse(node0.isLabelName());
264:       assertFalse(node0.isNew());
265:       assertFalse(node0.isArrayLit());
266:       assertFalse(node0.isDefaultCase());
267:       assertFalse(node0.isLabel());
268:       assertFalse(node0.isReturn());
269:       assertFalse(node0.hasMoreThanOneChild());
270:       assertFalse(node0.isAssignAdd());
271:       assertFalse(node0.isDo());
272:       assertEquals((-1), node0.getLineno());
273:       assertFalse(node0.isOr());
274:       assertEquals((-1), node0.getSourcePosition());
275:       assertFalse(node0.isCall());
276:       assertFalse(node0.isName());
277:       assertFalse(node0.isExprResult());
278:       assertFalse(node0.isGetElem());
279:       assertFalse(node0.hasOneChild());
280:       assertFalse(node0.hasChildren());
281:       assertFalse(node0.isTypeOf());
282:       assertFalse(node0.isWith());
283:       assertFalse(node0.isWhile());
284:       assertFalse(node0.isBlock());
285:       assertEquals(39, node0.getType());
286:       assertFalse(node0.isAssign());
287:       assertFalse(node0.isDec());
288:       assertFalse(node0.isCatch());
289:       assertFalse(node0.isInstanceOf());
290:       assertFalse(node0.isAnd());
291:       assertFalse(node0.isGetProp());
292:       assertFalse(node0.isSetterDef());
293:       assertFalse(node0.isObjectLit());
294:       assertFalse(node0.isNot());
295:       assertFalse(node0.isDebugger());
296:       assertFalse(node0.isCast());
297:       assertFalse(node0.isInc());
298:       assertFalse(node0.isContinue());
299:       assertFalse(node0.isThrow());
300:       assertFalse(node0.isFalse());
301:       assertFalse(node0.isFunction());
302:       assertFalse(node1.isDefaultCase());
303:       assertFalse(node1.isTrue());
304:       assertFalse(node1.isSetterDef());
305:       assertFalse(node1.isTry());
306:       assertEquals(16422, node1.getSourcePosition());
307:       assertFalse(node1.isDebugger());
308:       assertFalse(node1.isStringKey());
309:       assertFalse(node1.isEmpty());
310:       assertFalse(node1.isArrayLit());
311:       assertFalse(node1.isVar());
312:       assertFalse(node1.isParamList());
313:       assertFalse(node1.isFunction());
314:       assertEquals(0, node1.getChildCount());
315:       assertEquals(4, node1.getLineno());
316:       assertEquals(38, node1.getCharno());
317:       assertFalse(node1.isDo());
318:       assertFalse(node1.isAssignAdd());
319:       assertFalse(node1.isWhile());
320:       assertFalse(node1.isAdd());
321:       assertFalse(node1.isOr());
322:       assertFalse(node1.isNew());
323:       assertFalse(node1.isString());
324:       assertFalse(node1.isCall());
325:       assertFalse(node1.isName());
326:       assertFalse(node1.isGetElem());
327:       assertFalse(node1.isAssign());
328:       assertFalse(node1.hasChildren());
329:       assertFalse(node1.isNull());
330:       assertFalse(node1.isDelProp());
331:       assertEquals(0, node1.getType());
332:       assertFalse(node1.isExprResult());
333:       assertFalse(node1.isVoid());
334:       assertFalse(node1.isComma());
335:       assertFalse(node1.isReturn());
336:       assertFalse(node1.isBreak());
337:       assertFalse(node1.isDec());
338:       assertFalse(node1.isTypeOf());
339:       assertFalse(node1.isObjectLit());
340:       assertFalse(node1.isNot());
341:       assertFalse(node1.isAnd());
342:       assertFalse(node1.isGetProp());
343:       assertFalse(node1.isScript());
344:       assertFalse(node1.isFalse());
345:       assertFalse(node1.isThrow());
346:       assertFalse(node1.isLabelName());
347:       assertFalse(node1.isLabel());
348:       assertFalse(node1.isCast());
349:       assertFalse(node1.isContinue());
350:       assertFalse(node1.isCase());
351:       assertFalse(node1.isSwitch());
352:       assertFalse(node1.isInc());
353:       assertFalse(node1.isNumber());
354:       assertFalse(node1.isIn());
355:       assertFalse(node1.isGetterDef());
356:       assertFalse(node1.isFor());
357:       assertFalse(node1.hasOneChild());
358:       assertFalse(node1.isHook());
359:       assertFalse(node1.isIf());
360:       assertFalse(node1.isNE());
361:       assertFalse(node1.isBlock());
362:       assertFalse(node1.isThis());
363:       assertFalse(node1.isInstanceOf());
364:       assertFalse(node1.isRegExp());
365:       assertFalse(node1.hasMoreThanOneChild());
366:       assertFalse(node1.isWith());
367:       assertFalse(node1.isCatch());
368:       assertEquals(46, Node.IS_NAMESPACE);
369:       assertEquals(51, Node.STATIC_SOURCE_FILE);
370:       assertEquals(12, Node.COLUMN_BITS);
371:       assertEquals(47, Node.IS_DISPATCHER);
372:       assertEquals(2, Node.POST_FLAG);
373:       assertEquals(56, Node.CHANGE_TIME);
374:       assertEquals(37, Node.OPT_ARG_NAME);
375:       assertEquals(49, Node.DIRECT_EVAL);
376:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
377:       assertEquals(54, Node.SLASH_V);
378:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
379:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
380:       assertEquals(50, Node.FREE_CALL);
381:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
382:       assertEquals(32, Node.INCRDECR_PROP);
383:       assertEquals(1, Node.DECR_FLAG);
384:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
385:       assertEquals(4095, Node.COLUMN_MASK);
386:       assertEquals(8, Node.FLAG_NO_THROWS);
387:       assertEquals(40, Node.ORIGINALNAME_PROP);
388:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
389:       assertEquals(43, Node.IS_CONSTANT_NAME);
390:       assertEquals(48, Node.DIRECTIVES);
391:       assertEquals(53, Node.INPUT_ID);
392:       assertEquals(52, Node.LENGTH);
393:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
394:       assertEquals(36, Node.QUOTED_PROP);
395:       assertEquals(57, Node.REFLECTED_OBJECT);
396:       assertEquals(30, Node.VAR_ARGS_NAME);
397:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
398:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
399:       assertEquals(55, Node.INFERRED_FUNCTION);
400:       assertEquals(29, Node.JSDOC_INFO_PROP);
401:       assertEquals(15, Node.NO_SIDE_EFFECTS);
402:       assertEquals(39, Node.EMPTY_BLOCK);
403:       assertEquals(57, Node.LAST_PROP);
404:       assertEquals(4095, Node.COLUMN_MASK);
405:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
406:       assertEquals(55, Node.INFERRED_FUNCTION);
407:       assertEquals(36, Node.QUOTED_PROP);
408:       assertEquals(8, Node.FLAG_NO_THROWS);
409:       assertEquals(48, Node.DIRECTIVES);
410:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
411:       assertEquals(43, Node.IS_CONSTANT_NAME);
412:       assertEquals(57, Node.REFLECTED_OBJECT);
413:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
414:       assertEquals(29, Node.JSDOC_INFO_PROP);
415:       assertEquals(53, Node.INPUT_ID);
416:       assertEquals(52, Node.LENGTH);
417:       assertEquals(40, Node.ORIGINALNAME_PROP);
418:       assertEquals(2, Node.POST_FLAG);
419:       assertEquals(15, Node.NO_SIDE_EFFECTS);
420:       assertEquals(39, Node.EMPTY_BLOCK);
421:       assertEquals(57, Node.LAST_PROP);
422:       assertEquals(47, Node.IS_DISPATCHER);
423:       assertEquals(30, Node.VAR_ARGS_NAME);
424:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
425:       assertEquals(12, Node.COLUMN_BITS);
426:       assertEquals(32, Node.INCRDECR_PROP);
427:       assertEquals(51, Node.STATIC_SOURCE_FILE);
428:       assertEquals(1, Node.DECR_FLAG);
429:       assertEquals(37, Node.OPT_ARG_NAME);
430:       assertEquals(49, Node.DIRECT_EVAL);
431:       assertEquals(46, Node.IS_NAMESPACE);
432:       assertEquals(54, Node.SLASH_V);
433:       assertEquals(56, Node.CHANGE_TIME);
434:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
435:       assertEquals(50, Node.FREE_CALL);
436:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
437:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
438:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
440:       assertNotNull(node_NodeMismatch0);
441:       
442:       boolean boolean0 = node_NodeMismatch0.equals("");
443:       assertFalse(node0.equals((Object)node1));
444:       assertFalse(node1.equals((Object)node0));
445:       assertFalse(node0.isIn());
446:       assertTrue(node0.isNumber());
447:       assertFalse(node0.isCase());
448:       assertFalse(node0.isGetterDef());
449:       assertFalse(node0.isIf());
450:       assertFalse(node0.isDelProp());
451:       assertFalse(node0.isSwitch());
452:       assertFalse(node0.isNE());
453:       assertFalse(node0.isEmpty());
454:       assertFalse(node0.isString());
455:       assertEquals((-1), node0.getCharno());
456:       assertFalse(node0.isHook());
457:       assertFalse(node0.isVoid());
458:       assertFalse(node0.isTry());
459:       assertFalse(node0.isBreak());
460:       assertFalse(node0.isRegExp());
461:       assertFalse(node0.isFor());
462:       assertFalse(node0.isThis());
463:       assertFalse(node0.isComma());
464:       assertEquals(0, node0.getChildCount());
465:       assertFalse(node0.isNull());
466:       assertFalse(node0.isScript());
467:       assertFalse(node0.isStringKey());
468:       assertFalse(node0.isParamList());
469:       assertFalse(node0.isTrue());
470:       assertFalse(node0.isVar());
471:       assertFalse(node0.isAdd());
472:       assertFalse(node0.isLabelName());
473:       assertFalse(node0.isNew());
474:       assertFalse(node0.isArrayLit());
475:       assertFalse(node0.isDefaultCase());
476:       assertFalse(node0.isLabel());
477:       assertFalse(node0.isReturn());
478:       assertFalse(node0.hasMoreThanOneChild());
479:       assertFalse(node0.isAssignAdd());
480:       assertFalse(node0.isDo());
481:       assertEquals((-1), node0.getLineno());
482:       assertFalse(node0.isOr());
483:       assertEquals((-1), node0.getSourcePosition());
484:       assertFalse(node0.isCall());
485:       assertFalse(node0.isName());
486:       assertFalse(node0.isExprResult());
487:       assertFalse(node0.isGetElem());
488:       assertFalse(node0.hasOneChild());
489:       assertFalse(node0.hasChildren());
490:       assertFalse(node0.isTypeOf());
491:       assertFalse(node0.isWith());
492:       assertFalse(node0.isWhile());
493:       assertFalse(node0.isBlock());
494:       assertEquals(39, node0.getType());
495:       assertFalse(node0.isAssign());
496:       assertFalse(node0.isDec());
497:       assertFalse(node0.isCatch());
498:       assertFalse(node0.isInstanceOf());
499:       assertFalse(node0.isAnd());
500:       assertFalse(node0.isGetProp());
501:       assertFalse(node0.isSetterDef());
502:       assertFalse(node0.isObjectLit());
503:       assertFalse(node0.isNot());
504:       assertFalse(node0.isDebugger());
505:       assertFalse(node0.isCast());
506:       assertFalse(node0.isInc());
507:       assertFalse(node0.isContinue());
508:       assertFalse(node0.isThrow());
509:       assertFalse(node0.isFalse());
510:       assertFalse(node0.isFunction());
511:       assertFalse(node1.isDefaultCase());
512:       assertFalse(node1.isTrue());
513:       assertFalse(node1.isSetterDef());
514:       assertFalse(node1.isTry());
515:       assertEquals(16422, node1.getSourcePosition());
516:       assertFalse(node1.isDebugger());
517:       assertFalse(node1.isStringKey());
518:       assertFalse(node1.isEmpty());
519:       assertFalse(node1.isArrayLit());
520:       assertFalse(node1.isVar());
521:       assertFalse(node1.isParamList());
522:       assertFalse(node1.isFunction());
523:       assertEquals(0, node1.getChildCount());
524:       assertEquals(4, node1.getLineno());
525:       assertEquals(38, node1.getCharno());
526:       assertFalse(node1.isDo());
527:       assertFalse(node1.isAssignAdd());
528:       assertFalse(node1.isWhile());
529:       assertFalse(node1.isAdd());
530:       assertFalse(node1.isOr());
531:       assertFalse(node1.isNew());
532:       assertFalse(node1.isString());
533:       assertFalse(node1.isCall());
534:       assertFalse(node1.isName());
535:       assertFalse(node1.isGetElem());
536:       assertFalse(node1.isAssign());
537:       assertFalse(node1.hasChildren());
538:       assertFalse(node1.isNull());
539:       assertFalse(node1.isDelProp());
540:       assertEquals(0, node1.getType());
541:       assertFalse(node1.isExprResult());
542:       assertFalse(node1.isVoid());
543:       assertFalse(node1.isComma());
544:       assertFalse(node1.isReturn());
545:       assertFalse(node1.isBreak());
546:       assertFalse(node1.isDec());
547:       assertFalse(node1.isTypeOf());
548:       assertFalse(node1.isObjectLit());
549:       assertFalse(node1.isNot());
550:       assertFalse(node1.isAnd());
551:       assertFalse(node1.isGetProp());
552:       assertFalse(node1.isScript());
553:       assertFalse(node1.isFalse());
554:       assertFalse(node1.isThrow());
555:       assertFalse(node1.isLabelName());
556:       assertFalse(node1.isLabel());
557:       assertFalse(node1.isCast());
558:       assertFalse(node1.isContinue());
559:       assertFalse(node1.isCase());
560:       assertFalse(node1.isSwitch());
561:       assertFalse(node1.isInc());
562:       assertFalse(node1.isNumber());
563:       assertFalse(node1.isIn());
564:       assertFalse(node1.isGetterDef());
565:       assertFalse(node1.isFor());
566:       assertFalse(node1.hasOneChild());
567:       assertFalse(node1.isHook());
568:       assertFalse(node1.isIf());
569:       assertFalse(node1.isNE());
570:       assertFalse(node1.isBlock());
571:       assertFalse(node1.isThis());
572:       assertFalse(node1.isInstanceOf());
573:       assertFalse(node1.isRegExp());
574:       assertFalse(node1.hasMoreThanOneChild());
575:       assertFalse(node1.isWith());
576:       assertFalse(node1.isCatch());
577:       assertFalse(boolean0);
578:       assertEquals(46, Node.IS_NAMESPACE);
579:       assertEquals(51, Node.STATIC_SOURCE_FILE);
580:       assertEquals(12, Node.COLUMN_BITS);
581:       assertEquals(47, Node.IS_DISPATCHER);
582:       assertEquals(2, Node.POST_FLAG);
583:       assertEquals(56, Node.CHANGE_TIME);
584:       assertEquals(37, Node.OPT_ARG_NAME);
585:       assertEquals(49, Node.DIRECT_EVAL);
586:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
587:       assertEquals(54, Node.SLASH_V);
588:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
589:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
590:       assertEquals(50, Node.FREE_CALL);
591:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
592:       assertEquals(32, Node.INCRDECR_PROP);
593:       assertEquals(1, Node.DECR_FLAG);
594:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
595:       assertEquals(4095, Node.COLUMN_MASK);
596:       assertEquals(8, Node.FLAG_NO_THROWS);
597:       assertEquals(40, Node.ORIGINALNAME_PROP);
598:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
599:       assertEquals(43, Node.IS_CONSTANT_NAME);
600:       assertEquals(48, Node.DIRECTIVES);
601:       assertEquals(53, Node.INPUT_ID);
602:       assertEquals(52, Node.LENGTH);
603:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
604:       assertEquals(36, Node.QUOTED_PROP);
605:       assertEquals(57, Node.REFLECTED_OBJECT);
606:       assertEquals(30, Node.VAR_ARGS_NAME);
607:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
608:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
609:       assertEquals(55, Node.INFERRED_FUNCTION);
610:       assertEquals(29, Node.JSDOC_INFO_PROP);
611:       assertEquals(15, Node.NO_SIDE_EFFECTS);
612:       assertEquals(39, Node.EMPTY_BLOCK);
613:       assertEquals(57, Node.LAST_PROP);
614:       assertEquals(4095, Node.COLUMN_MASK);
615:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
616:       assertEquals(55, Node.INFERRED_FUNCTION);
617:       assertEquals(36, Node.QUOTED_PROP);
618:       assertEquals(8, Node.FLAG_NO_THROWS);
619:       assertEquals(48, Node.DIRECTIVES);
620:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
621:       assertEquals(43, Node.IS_CONSTANT_NAME);
622:       assertEquals(57, Node.REFLECTED_OBJECT);
623:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
624:       assertEquals(29, Node.JSDOC_INFO_PROP);
625:       assertEquals(53, Node.INPUT_ID);
626:       assertEquals(52, Node.LENGTH);
627:       assertEquals(40, Node.ORIGINALNAME_PROP);
628:       assertEquals(2, Node.POST_FLAG);
629:       assertEquals(15, Node.NO_SIDE_EFFECTS);
630:       assertEquals(39, Node.EMPTY_BLOCK);
631:       assertEquals(57, Node.LAST_PROP);
632:       assertEquals(47, Node.IS_DISPATCHER);
633:       assertEquals(30, Node.VAR_ARGS_NAME);
634:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
635:       assertEquals(12, Node.COLUMN_BITS);
636:       assertEquals(32, Node.INCRDECR_PROP);
637:       assertEquals(51, Node.STATIC_SOURCE_FILE);
638:       assertEquals(1, Node.DECR_FLAG);
639:       assertEquals(37, Node.OPT_ARG_NAME);
640:       assertEquals(49, Node.DIRECT_EVAL);
641:       assertEquals(46, Node.IS_NAMESPACE);
642:       assertEquals(54, Node.SLASH_V);
643:       assertEquals(56, Node.CHANGE_TIME);
644:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
645:       assertEquals(50, Node.FREE_CALL);
646:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
647:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
648:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
649:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
650:       
651:       Set<String> set0 = node1.getDirectives();
652:       assertFalse(node1.equals((Object)node0));
653:       assertFalse(node1.isDefaultCase());
654:       assertFalse(node1.isTrue());
655:       assertFalse(node1.isSetterDef());
656:       assertFalse(node1.isTry());
657:       assertEquals(16422, node1.getSourcePosition());
658:       assertFalse(node1.isDebugger());
659:       assertFalse(node1.isStringKey());
660:       assertFalse(node1.isEmpty());
661:       assertFalse(node1.isArrayLit());
662:       assertFalse(node1.isVar());
663:       assertFalse(node1.isParamList());
664:       assertFalse(node1.isFunction());
665:       assertEquals(0, node1.getChildCount());
666:       assertEquals(4, node1.getLineno());
667:       assertEquals(38, node1.getCharno());
668:       assertFalse(node1.isDo());
669:       assertFalse(node1.isAssignAdd());
670:       assertFalse(node1.isWhile());
671:       assertFalse(node1.isAdd());
672:       assertFalse(node1.isOr());
673:       assertFalse(node1.isNew());
674:       assertFalse(node1.isString());
675:       assertFalse(node1.isCall());
676:       assertFalse(node1.isName());
677:       assertFalse(node1.isGetElem());
678:       assertFalse(node1.isAssign());
679:       assertFalse(node1.hasChildren());
680:       assertFalse(node1.isNull());
681:       assertFalse(node1.isDelProp());
682:       assertEquals(0, node1.getType());
683:       assertFalse(node1.isExprResult());
684:       assertFalse(node1.isVoid());
685:       assertFalse(node1.isComma());
686:       assertFalse(node1.isReturn());
687:       assertFalse(node1.isBreak());
688:       assertFalse(node1.isDec());
689:       assertFalse(node1.isTypeOf());
690:       assertFalse(node1.isObjectLit());
691:       assertFalse(node1.isNot());
692:       assertFalse(node1.isAnd());
693:       assertFalse(node1.isGetProp());
694:       assertFalse(node1.isScript());
695:       assertFalse(node1.isFalse());
696:       assertFalse(node1.isThrow());
697:       assertFalse(node1.isLabelName());
698:       assertFalse(node1.isLabel());
699:       assertFalse(node1.isCast());
700:       assertFalse(node1.isContinue());
701:       assertFalse(node1.isCase());
702:       assertFalse(node1.isSwitch());
703:       assertFalse(node1.isInc());
704:       assertFalse(node1.isNumber());
705:       assertFalse(node1.isIn());
706:       assertFalse(node1.isGetterDef());
707:       assertFalse(node1.isFor());
708:       assertFalse(node1.hasOneChild());
709:       assertFalse(node1.isHook());
710:       assertFalse(node1.isIf());
711:       assertFalse(node1.isNE());
712:       assertFalse(node1.isBlock());
713:       assertFalse(node1.isThis());
714:       assertFalse(node1.isInstanceOf());
715:       assertFalse(node1.isRegExp());
716:       assertFalse(node1.hasMoreThanOneChild());
717:       assertFalse(node1.isWith());
718:       assertFalse(node1.isCatch());
719:       assertEquals(4095, Node.COLUMN_MASK);
720:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
721:       assertEquals(55, Node.INFERRED_FUNCTION);
722:       assertEquals(36, Node.QUOTED_PROP);
723:       assertEquals(8, Node.FLAG_NO_THROWS);
724:       assertEquals(48, Node.DIRECTIVES);
725:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
726:       assertEquals(43, Node.IS_CONSTANT_NAME);
727:       assertEquals(57, Node.REFLECTED_OBJECT);
728:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
729:       assertEquals(29, Node.JSDOC_INFO_PROP);
730:       assertEquals(53, Node.INPUT_ID);
731:       assertEquals(52, Node.LENGTH);
732:       assertEquals(40, Node.ORIGINALNAME_PROP);
733:       assertEquals(2, Node.POST_FLAG);
734:       assertEquals(15, Node.NO_SIDE_EFFECTS);
735:       assertEquals(39, Node.EMPTY_BLOCK);
736:       assertEquals(57, Node.LAST_PROP);
737:       assertEquals(47, Node.IS_DISPATCHER);
738:       assertEquals(30, Node.VAR_ARGS_NAME);
739:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
740:       assertEquals(12, Node.COLUMN_BITS);
741:       assertEquals(32, Node.INCRDECR_PROP);
742:       assertEquals(51, Node.STATIC_SOURCE_FILE);
743:       assertEquals(1, Node.DECR_FLAG);
744:       assertEquals(37, Node.OPT_ARG_NAME);
745:       assertEquals(49, Node.DIRECT_EVAL);
746:       assertEquals(46, Node.IS_NAMESPACE);
747:       assertEquals(54, Node.SLASH_V);
748:       assertEquals(56, Node.CHANGE_TIME);
749:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
750:       assertEquals(50, Node.FREE_CALL);
751:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
752:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
753:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
754:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
755:       assertNull(set0);
756:       
757:       boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
758:       assertFalse(node0.equals((Object)node1));
759:       assertFalse(node1.equals((Object)node0));
760:       assertTrue(boolean1 == boolean0);
761:       assertFalse(node0.isIn());
762:       assertTrue(node0.isNumber());
763:       assertFalse(node0.isCase());
764:       assertFalse(node0.isGetterDef());
765:       assertFalse(node0.isIf());
766:       assertFalse(node0.isDelProp());
767:       assertFalse(node0.isSwitch());
768:       assertFalse(node0.isNE());
769:       assertFalse(node0.isEmpty());
770:       assertFalse(node0.isString());
771:       assertEquals((-1), node0.getCharno());
772:       assertFalse(node0.isHook());
773:       assertFalse(node0.isVoid());
774:       assertFalse(node0.isTry());
775:       assertFalse(node0.isBreak());
776:       assertFalse(node0.isRegExp());
777:       assertFalse(node0.isFor());
778:       assertFalse(node0.isThis());
779:       assertFalse(node0.isComma());
780:       assertEquals(0, node0.getChildCount());
781:       assertFalse(node0.isNull());
782:       assertFalse(node0.isScript());
783:       assertFalse(node0.isStringKey());
784:       assertFalse(node0.isParamList());
785:       assertFalse(node0.isTrue());
786:       assertFalse(node0.isVar());
787:       assertFalse(node0.isAdd());
788:       assertFalse(node0.isLabelName());
789:       assertFalse(node0.isNew());
790:       assertFalse(node0.isArrayLit());
791:       assertFalse(node0.isDefaultCase());
792:       assertFalse(node0.isLabel());
793:       assertFalse(node0.isReturn());
794:       assertFalse(node0.hasMoreThanOneChild());
795:       assertFalse(node0.isAssignAdd());
796:       assertFalse(node0.isDo());
797:       assertEquals((-1), node0.getLineno());
798:       assertFalse(node0.isOr());
799:       assertEquals((-1), node0.getSourcePosition());
800:       assertFalse(node0.isCall());
801:       assertFalse(node0.isName());
802:       assertFalse(node0.isExprResult());
803:       assertFalse(node0.isGetElem());
804:       assertFalse(node0.hasOneChild());
805:       assertFalse(node0.hasChildren());
806:       assertFalse(node0.isTypeOf());
807:       assertFalse(node0.isWith());
808:       assertFalse(node0.isWhile());
809:       assertFalse(node0.isBlock());
810:       assertEquals(39, node0.getType());
811:       assertFalse(node0.isAssign());
812:       assertFalse(node0.isDec());
813:       assertFalse(node0.isCatch());
814:       assertFalse(node0.isInstanceOf());
815:       assertFalse(node0.isAnd());
816:       assertFalse(node0.isGetProp());
817:       assertFalse(node0.isSetterDef());
818:       assertFalse(node0.isObjectLit());
819:       assertFalse(node0.isNot());
820:       assertFalse(node0.isDebugger());
821:       assertFalse(node0.isCast());
822:       assertFalse(node0.isInc());
823:       assertFalse(node0.isContinue());
824:       assertFalse(node0.isThrow());
825:       assertFalse(node0.isFalse());
826:       assertFalse(node0.isFunction());
827:       assertFalse(node1.isDefaultCase());
828:       assertFalse(node1.isTrue());
829:       assertFalse(node1.isSetterDef());
830:       assertFalse(node1.isTry());
831:       assertEquals(16422, node1.getSourcePosition());
832:       assertFalse(node1.isDebugger());
833:       assertFalse(node1.isStringKey());
834:       assertFalse(node1.isEmpty());
835:       assertFalse(node1.isArrayLit());
836:       assertFalse(node1.isVar());
837:       assertFalse(node1.isParamList());
838:       assertFalse(node1.isFunction());
839:       assertEquals(0, node1.getChildCount());
840:       assertEquals(4, node1.getLineno());
841:       assertEquals(38, node1.getCharno());
842:       assertFalse(node1.isDo());
843:       assertFalse(node1.isAssignAdd());
844:       assertFalse(node1.isWhile());
845:       assertFalse(node1.isAdd());
846:       assertFalse(node1.isOr());
847:       assertFalse(node1.isNew());
848:       assertFalse(node1.isString());
849:       assertFalse(node1.isCall());
850:       assertFalse(node1.isName());
851:       assertFalse(node1.isGetElem());
852:       assertFalse(node1.isAssign());
853:       assertFalse(node1.hasChildren());
854:       assertFalse(node1.isNull());
855:       assertFalse(node1.isDelProp());
856:       assertEquals(0, node1.getType());
857:       assertFalse(node1.isExprResult());
858:       assertFalse(node1.isVoid());
859:       assertFalse(node1.isComma());
860:       assertFalse(node1.isReturn());
861:       assertFalse(node1.isBreak());
862:       assertFalse(node1.isDec());
863:       assertFalse(node1.isTypeOf());
864:       assertFalse(node1.isObjectLit());
865:       assertFalse(node1.isNot());
866:       assertFalse(node1.isAnd());
867:       assertFalse(node1.isGetProp());
868:       assertFalse(node1.isScript());
869:       assertFalse(node1.isFalse());
870:       assertFalse(node1.isThrow());
871:       assertFalse(node1.isLabelName());
872:       assertFalse(node1.isLabel());
873:       assertFalse(node1.isCast());
874:       assertFalse(node1.isContinue());
875:       assertFalse(node1.isCase());
876:       assertFalse(node1.isSwitch());
877:       assertFalse(node1.isInc());
878:       assertFalse(node1.isNumber());
879:       assertFalse(node1.isIn());
880:       assertFalse(node1.isGetterDef());
881:       assertFalse(node1.isFor());
882:       assertFalse(node1.hasOneChild());
883:       assertFalse(node1.isHook());
884:       assertFalse(node1.isIf());
885:       assertFalse(node1.isNE());
886:       assertFalse(node1.isBlock());
887:       assertFalse(node1.isThis());
888:       assertFalse(node1.isInstanceOf());
889:       assertFalse(node1.isRegExp());
890:       assertFalse(node1.hasMoreThanOneChild());
891:       assertFalse(node1.isWith());
892:       assertFalse(node1.isCatch());
893:       assertFalse(boolean1);
894:       assertEquals(46, Node.IS_NAMESPACE);
895:       assertEquals(51, Node.STATIC_SOURCE_FILE);
896:       assertEquals(12, Node.COLUMN_BITS);
897:       assertEquals(47, Node.IS_DISPATCHER);
898:       assertEquals(2, Node.POST_FLAG);
899:       assertEquals(56, Node.CHANGE_TIME);
900:       assertEquals(37, Node.OPT_ARG_NAME);
901:       assertEquals(49, Node.DIRECT_EVAL);
902:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
903:       assertEquals(54, Node.SLASH_V);
904:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
905:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
906:       assertEquals(50, Node.FREE_CALL);
907:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
908:       assertEquals(32, Node.INCRDECR_PROP);
909:       assertEquals(1, Node.DECR_FLAG);
910:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
911:       assertEquals(4095, Node.COLUMN_MASK);
912:       assertEquals(8, Node.FLAG_NO_THROWS);
913:       assertEquals(40, Node.ORIGINALNAME_PROP);
914:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
915:       assertEquals(43, Node.IS_CONSTANT_NAME);
916:       assertEquals(48, Node.DIRECTIVES);
917:       assertEquals(53, Node.INPUT_ID);
918:       assertEquals(52, Node.LENGTH);
919:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
920:       assertEquals(36, Node.QUOTED_PROP);
921:       assertEquals(57, Node.REFLECTED_OBJECT);
922:       assertEquals(30, Node.VAR_ARGS_NAME);
923:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
924:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
925:       assertEquals(55, Node.INFERRED_FUNCTION);
926:       assertEquals(29, Node.JSDOC_INFO_PROP);
927:       assertEquals(15, Node.NO_SIDE_EFFECTS);
928:       assertEquals(39, Node.EMPTY_BLOCK);
929:       assertEquals(57, Node.LAST_PROP);
930:       assertEquals(4095, Node.COLUMN_MASK);
931:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
932:       assertEquals(55, Node.INFERRED_FUNCTION);
933:       assertEquals(36, Node.QUOTED_PROP);
934:       assertEquals(8, Node.FLAG_NO_THROWS);
935:       assertEquals(48, Node.DIRECTIVES);
936:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
937:       assertEquals(43, Node.IS_CONSTANT_NAME);
938:       assertEquals(57, Node.REFLECTED_OBJECT);
939:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
940:       assertEquals(29, Node.JSDOC_INFO_PROP);
941:       assertEquals(53, Node.INPUT_ID);
942:       assertEquals(52, Node.LENGTH);
943:       assertEquals(40, Node.ORIGINALNAME_PROP);
944:       assertEquals(2, Node.POST_FLAG);
945:       assertEquals(15, Node.NO_SIDE_EFFECTS);
946:       assertEquals(39, Node.EMPTY_BLOCK);
947:       assertEquals(57, Node.LAST_PROP);
948:       assertEquals(47, Node.IS_DISPATCHER);
949:       assertEquals(30, Node.VAR_ARGS_NAME);
950:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
951:       assertEquals(12, Node.COLUMN_BITS);
952:       assertEquals(32, Node.INCRDECR_PROP);
953:       assertEquals(51, Node.STATIC_SOURCE_FILE);
954:       assertEquals(1, Node.DECR_FLAG);
955:       assertEquals(37, Node.OPT_ARG_NAME);
956:       assertEquals(49, Node.DIRECT_EVAL);
957:       assertEquals(46, Node.IS_NAMESPACE);
958:       assertEquals(54, Node.SLASH_V);
959:       assertEquals(56, Node.CHANGE_TIME);
960:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
961:       assertEquals(50, Node.FREE_CALL);
962:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
963:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
964:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
965:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
966:       
967:       boolean boolean2 = node1.isVarArgs();
968:       assertFalse(node1.equals((Object)node0));
969:       assertTrue(boolean2 == boolean0);
970:       assertTrue(boolean2 == boolean1);
971:       assertFalse(node1.isDefaultCase());
972:       assertFalse(node1.isTrue());
973:       assertFalse(node1.isSetterDef());
974:       assertFalse(node1.isTry());
975:       assertEquals(16422, node1.getSourcePosition());
976:       assertFalse(node1.isDebugger());
977:       assertFalse(node1.isStringKey());
978:       assertFalse(node1.isEmpty());
979:       assertFalse(node1.isArrayLit());
980:       assertFalse(node1.isVar());
981:       assertFalse(node1.isParamList());
982:       assertFalse(node1.isFunction());
983:       assertEquals(0, node1.getChildCount());
984:       assertEquals(4, node1.getLineno());
985:       assertEquals(38, node1.getCharno());
986:       assertFalse(node1.isDo());
987:       assertFalse(node1.isAssignAdd());
988:       assertFalse(node1.isWhile());
989:       assertFalse(node1.isAdd());
990:       assertFalse(node1.isOr());
991:       assertFalse(node1.isNew());
992:       assertFalse(node1.isString());
993:       assertFalse(node1.isCall());
994:       assertFalse(node1.isName());
995:       assertFalse(node1.isGetElem());
996:       assertFalse(node1.isAssign());
997:       assertFalse(node1.hasChildren());
998:       assertFalse(node1.isNull());
999:       assertFalse(node1.isDelProp());
1000:       assertEquals(0, node1.getType());
1001:       assertFalse(node1.isExprResult());
1002:       assertFalse(node1.isVoid());
1003:       assertFalse(node1.isComma());
1004:       assertFalse(node1.isReturn());
1005:       assertFalse(node1.isBreak());
1006:       assertFalse(node1.isDec());
1007:       assertFalse(node1.isTypeOf());
1008:       assertFalse(node1.isObjectLit());
1009:       assertFalse(node1.isNot());
1010:       assertFalse(node1.isAnd());
1011:       assertFalse(node1.isGetProp());
1012:       assertFalse(node1.isScript());
1013:       assertFalse(node1.isFalse());
1014:       assertFalse(node1.isThrow());
1015:       assertFalse(node1.isLabelName());
1016:       assertFalse(node1.isLabel());
1017:       assertFalse(node1.isCast());
1018:       assertFalse(node1.isContinue());
1019:       assertFalse(node1.isCase());
1020:       assertFalse(node1.isSwitch());
1021:       assertFalse(node1.isInc());
1022:       assertFalse(node1.isNumber());
1023:       assertFalse(node1.isIn());
1024:       assertFalse(node1.isGetterDef());
1025:       assertFalse(node1.isFor());
1026:       assertFalse(node1.hasOneChild());
1027:       assertFalse(node1.isHook());
1028:       assertFalse(node1.isIf());
1029:       assertFalse(node1.isNE());
1030:       assertFalse(node1.isBlock());
1031:       assertFalse(node1.isThis());
1032:       assertFalse(node1.isInstanceOf());
1033:       assertFalse(node1.isRegExp());
1034:       assertFalse(node1.hasMoreThanOneChild());
1035:       assertFalse(node1.isWith());
1036:       assertFalse(node1.isCatch());
1037:       assertFalse(boolean2);
1038:       assertEquals(4095, Node.COLUMN_MASK);
1039:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1040:       assertEquals(55, Node.INFERRED_FUNCTION);
1041:       assertEquals(36, Node.QUOTED_PROP);
1042:       assertEquals(8, Node.FLAG_NO_THROWS);
1043:       assertEquals(48, Node.DIRECTIVES);
1044:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1045:       assertEquals(43, Node.IS_CONSTANT_NAME);
1046:       assertEquals(57, Node.REFLECTED_OBJECT);
1047:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1048:       assertEquals(29, Node.JSDOC_INFO_PROP);
1049:       assertEquals(53, Node.INPUT_ID);
1050:       assertEquals(52, Node.LENGTH);
1051:       assertEquals(40, Node.ORIGINALNAME_PROP);
1052:       assertEquals(2, Node.POST_FLAG);
1053:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1054:       assertEquals(39, Node.EMPTY_BLOCK);
1055:       assertEquals(57, Node.LAST_PROP);
1056:       assertEquals(47, Node.IS_DISPATCHER);
1057:       assertEquals(30, Node.VAR_ARGS_NAME);
1058:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1059:       assertEquals(12, Node.COLUMN_BITS);
1060:       assertEquals(32, Node.INCRDECR_PROP);
1061:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1062:       assertEquals(1, Node.DECR_FLAG);
1063:       assertEquals(37, Node.OPT_ARG_NAME);
1064:       assertEquals(49, Node.DIRECT_EVAL);
1065:       assertEquals(46, Node.IS_NAMESPACE);
1066:       assertEquals(54, Node.SLASH_V);
1067:       assertEquals(56, Node.CHANGE_TIME);
1068:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1069:       assertEquals(50, Node.FREE_CALL);
1070:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1071:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1072:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1073:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1074:       
1075:       Iterable<Node> iterable0 = node0.children();
1076:       assertFalse(node0.equals((Object)node1));
1077:       assertFalse(node0.isIn());
1078:       assertTrue(node0.isNumber());
1079:       assertFalse(node0.isCase());
1080:       assertFalse(node0.isGetterDef());
1081:       assertFalse(node0.isIf());
1082:       assertFalse(node0.isDelProp());
1083:       assertFalse(node0.isSwitch());
1084:       assertFalse(node0.isNE());
1085:       assertFalse(node0.isEmpty());
1086:       assertFalse(node0.isString());
1087:       assertEquals((-1), node0.getCharno());
1088:       assertFalse(node0.isHook());
1089:       assertFalse(node0.isVoid());
1090:       assertFalse(node0.isTry());
1091:       assertFalse(node0.isBreak());
1092:       assertFalse(node0.isRegExp());
1093:       assertFalse(node0.isFor());
1094:       assertFalse(node0.isThis());
1095:       assertFalse(node0.isComma());
1096:       assertEquals(0, node0.getChildCount());
1097:       assertFalse(node0.isNull());
1098:       assertFalse(node0.isScript());
1099:       assertFalse(node0.isStringKey());
1100:       assertFalse(node0.isParamList());
1101:       assertFalse(node0.isTrue());
1102:       assertFalse(node0.isVar());
1103:       assertFalse(node0.isAdd());
1104:       assertFalse(node0.isLabelName());
1105:       assertFalse(node0.isNew());
1106:       assertFalse(node0.isArrayLit());
1107:       assertFalse(node0.isDefaultCase());
1108:       assertFalse(node0.isLabel());
1109:       assertFalse(node0.isReturn());
1110:       assertFalse(node0.hasMoreThanOneChild());
1111:       assertFalse(node0.isAssignAdd());
1112:       assertFalse(node0.isDo());
1113:       assertEquals((-1), node0.getLineno());
1114:       assertFalse(node0.isOr());
1115:       assertEquals((-1), node0.getSourcePosition());
1116:       assertFalse(node0.isCall());
1117:       assertFalse(node0.isName());
1118:       assertFalse(node0.isExprResult());
1119:       assertFalse(node0.isGetElem());
1120:       assertFalse(node0.hasOneChild());
1121:       assertFalse(node0.hasChildren());
1122:       assertFalse(node0.isTypeOf());
1123:       assertFalse(node0.isWith());
1124:       assertFalse(node0.isWhile());
1125:       assertFalse(node0.isBlock());
1126:       assertEquals(39, node0.getType());
1127:       assertFalse(node0.isAssign());
1128:       assertFalse(node0.isDec());
1129:       assertFalse(node0.isCatch());
1130:       assertFalse(node0.isInstanceOf());
1131:       assertFalse(node0.isAnd());
1132:       assertFalse(node0.isGetProp());
1133:       assertFalse(node0.isSetterDef());
1134:       assertFalse(node0.isObjectLit());
1135:       assertFalse(node0.isNot());
1136:       assertFalse(node0.isDebugger());
1137:       assertFalse(node0.isCast());
1138:       assertFalse(node0.isInc());
1139:       assertFalse(node0.isContinue());
1140:       assertFalse(node0.isThrow());
1141:       assertFalse(node0.isFalse());
1142:       assertFalse(node0.isFunction());
1143:       assertEquals(46, Node.IS_NAMESPACE);
1144:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1145:       assertEquals(12, Node.COLUMN_BITS);
1146:       assertEquals(47, Node.IS_DISPATCHER);
1147:       assertEquals(2, Node.POST_FLAG);
1148:       assertEquals(56, Node.CHANGE_TIME);
1149:       assertEquals(37, Node.OPT_ARG_NAME);
1150:       assertEquals(49, Node.DIRECT_EVAL);
1151:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1152:       assertEquals(54, Node.SLASH_V);
1153:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1155:       assertEquals(50, Node.FREE_CALL);
1156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1157:       assertEquals(32, Node.INCRDECR_PROP);
1158:       assertEquals(1, Node.DECR_FLAG);
1159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1160:       assertEquals(4095, Node.COLUMN_MASK);
1161:       assertEquals(8, Node.FLAG_NO_THROWS);
1162:       assertEquals(40, Node.ORIGINALNAME_PROP);
1163:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1164:       assertEquals(43, Node.IS_CONSTANT_NAME);
1165:       assertEquals(48, Node.DIRECTIVES);
1166:       assertEquals(53, Node.INPUT_ID);
1167:       assertEquals(52, Node.LENGTH);
1168:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1169:       assertEquals(36, Node.QUOTED_PROP);
1170:       assertEquals(57, Node.REFLECTED_OBJECT);
1171:       assertEquals(30, Node.VAR_ARGS_NAME);
1172:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1173:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1174:       assertEquals(55, Node.INFERRED_FUNCTION);
1175:       assertEquals(29, Node.JSDOC_INFO_PROP);
1176:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1177:       assertEquals(39, Node.EMPTY_BLOCK);
1178:       assertEquals(57, Node.LAST_PROP);
1179:       assertFalse(iterable0.contains(node1));
1180:       assertNotNull(iterable0);
1181:       
1182:       boolean boolean3 = node0.isIf();
1183:       assertFalse(node0.equals((Object)node1));
1184:       assertTrue(boolean3 == boolean1);
1185:       assertTrue(boolean3 == boolean0);
1186:       assertTrue(boolean3 == boolean2);
1187:       assertFalse(node0.isIn());
1188:       assertTrue(node0.isNumber());
1189:       assertFalse(node0.isCase());
1190:       assertFalse(node0.isGetterDef());
1191:       assertFalse(node0.isIf());
1192:       assertFalse(node0.isDelProp());
1193:       assertFalse(node0.isSwitch());
1194:       assertFalse(node0.isNE());
1195:       assertFalse(node0.isEmpty());
1196:       assertFalse(node0.isString());
1197:       assertEquals((-1), node0.getCharno());
1198:       assertFalse(node0.isHook());
1199:       assertFalse(node0.isVoid());
1200:       assertFalse(node0.isTry());
1201:       assertFalse(node0.isBreak());
1202:       assertFalse(node0.isRegExp());
1203:       assertFalse(node0.isFor());
1204:       assertFalse(node0.isThis());
1205:       assertFalse(node0.isComma());
1206:       assertEquals(0, node0.getChildCount());
1207:       assertFalse(node0.isNull());
1208:       assertFalse(node0.isScript());
1209:       assertFalse(node0.isStringKey());
1210:       assertFalse(node0.isParamList());
1211:       assertFalse(node0.isTrue());
1212:       assertFalse(node0.isVar());
1213:       assertFalse(node0.isAdd());
1214:       assertFalse(node0.isLabelName());
1215:       assertFalse(node0.isNew());
1216:       assertFalse(node0.isArrayLit());
1217:       assertFalse(node0.isDefaultCase());
1218:       assertFalse(node0.isLabel());
1219:       assertFalse(node0.isReturn());
1220:       assertFalse(node0.hasMoreThanOneChild());
1221:       assertFalse(node0.isAssignAdd());
1222:       assertFalse(node0.isDo());
1223:       assertEquals((-1), node0.getLineno());
1224:       assertFalse(node0.isOr());
1225:       assertEquals((-1), node0.getSourcePosition());
1226:       assertFalse(node0.isCall());
1227:       assertFalse(node0.isName());
1228:       assertFalse(node0.isExprResult());
1229:       assertFalse(node0.isGetElem());
1230:       assertFalse(node0.hasOneChild());
1231:       assertFalse(node0.hasChildren());
1232:       assertFalse(node0.isTypeOf());
1233:       assertFalse(node0.isWith());
1234:       assertFalse(node0.isWhile());
1235:       assertFalse(node0.isBlock());
1236:       assertEquals(39, node0.getType());
1237:       assertFalse(node0.isAssign());
1238:       assertFalse(node0.isDec());
1239:       assertFalse(node0.isCatch());
1240:       assertFalse(node0.isInstanceOf());
1241:       assertFalse(node0.isAnd());
1242:       assertFalse(node0.isGetProp());
1243:       assertFalse(node0.isSetterDef());
1244:       assertFalse(node0.isObjectLit());
1245:       assertFalse(node0.isNot());
1246:       assertFalse(node0.isDebugger());
1247:       assertFalse(node0.isCast());
1248:       assertFalse(node0.isInc());
1249:       assertFalse(node0.isContinue());
1250:       assertFalse(node0.isThrow());
1251:       assertFalse(node0.isFalse());
1252:       assertFalse(node0.isFunction());
1253:       assertFalse(boolean3);
1254:       assertEquals(46, Node.IS_NAMESPACE);
1255:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1256:       assertEquals(12, Node.COLUMN_BITS);
1257:       assertEquals(47, Node.IS_DISPATCHER);
1258:       assertEquals(2, Node.POST_FLAG);
1259:       assertEquals(56, Node.CHANGE_TIME);
1260:       assertEquals(37, Node.OPT_ARG_NAME);
1261:       assertEquals(49, Node.DIRECT_EVAL);
1262:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1263:       assertEquals(54, Node.SLASH_V);
1264:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1266:       assertEquals(50, Node.FREE_CALL);
1267:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1268:       assertEquals(32, Node.INCRDECR_PROP);
1269:       assertEquals(1, Node.DECR_FLAG);
1270:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1271:       assertEquals(4095, Node.COLUMN_MASK);
1272:       assertEquals(8, Node.FLAG_NO_THROWS);
1273:       assertEquals(40, Node.ORIGINALNAME_PROP);
1274:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1275:       assertEquals(43, Node.IS_CONSTANT_NAME);
1276:       assertEquals(48, Node.DIRECTIVES);
1277:       assertEquals(53, Node.INPUT_ID);
1278:       assertEquals(52, Node.LENGTH);
1279:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1280:       assertEquals(36, Node.QUOTED_PROP);
1281:       assertEquals(57, Node.REFLECTED_OBJECT);
1282:       assertEquals(30, Node.VAR_ARGS_NAME);
1283:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1284:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1285:       assertEquals(55, Node.INFERRED_FUNCTION);
1286:       assertEquals(29, Node.JSDOC_INFO_PROP);
1287:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1288:       assertEquals(39, Node.EMPTY_BLOCK);
1289:       assertEquals(57, Node.LAST_PROP);
1290:       
1291:       boolean boolean4 = node1.isVoid();
1292:       assertFalse(node1.equals((Object)node0));
1293:       assertTrue(boolean4 == boolean2);
1294:       assertTrue(boolean4 == boolean1);
1295:       assertTrue(boolean4 == boolean3);
1296:       assertTrue(boolean4 == boolean0);
1297:       assertFalse(node1.isDefaultCase());
1298:       assertFalse(node1.isTrue());
1299:       assertFalse(node1.isSetterDef());
1300:       assertFalse(node1.isTry());
1301:       assertEquals(16422, node1.getSourcePosition());
1302:       assertFalse(node1.isDebugger());
1303:       assertFalse(node1.isStringKey());
1304:       assertFalse(node1.isEmpty());
1305:       assertFalse(node1.isArrayLit());
1306:       assertFalse(node1.isVar());
1307:       assertFalse(node1.isParamList());
1308:       assertFalse(node1.isFunction());
1309:       assertEquals(0, node1.getChildCount());
1310:       assertEquals(4, node1.getLineno());
1311:       assertEquals(38, node1.getCharno());
1312:       assertFalse(node1.isDo());
1313:       assertFalse(node1.isAssignAdd());
1314:       assertFalse(node1.isWhile());
1315:       assertFalse(node1.isAdd());
1316:       assertFalse(node1.isOr());
1317:       assertFalse(node1.isNew());
1318:       assertFalse(node1.isString());
1319:       assertFalse(node1.isCall());
1320:       assertFalse(node1.isName());
1321:       assertFalse(node1.isGetElem());
1322:       assertFalse(node1.isAssign());
1323:       assertFalse(node1.hasChildren());
1324:       assertFalse(node1.isNull());
1325:       assertFalse(node1.isDelProp());
1326:       assertEquals(0, node1.getType());
1327:       assertFalse(node1.isExprResult());
1328:       assertFalse(node1.isVoid());
1329:       assertFalse(node1.isComma());
1330:       assertFalse(node1.isReturn());
1331:       assertFalse(node1.isBreak());
1332:       assertFalse(node1.isDec());
1333:       assertFalse(node1.isTypeOf());
1334:       assertFalse(node1.isObjectLit());
1335:       assertFalse(node1.isNot());
1336:       assertFalse(node1.isAnd());
1337:       assertFalse(node1.isGetProp());
1338:       assertFalse(node1.isScript());
1339:       assertFalse(node1.isFalse());
1340:       assertFalse(node1.isThrow());
1341:       assertFalse(node1.isLabelName());
1342:       assertFalse(node1.isLabel());
1343:       assertFalse(node1.isCast());
1344:       assertFalse(node1.isContinue());
1345:       assertFalse(node1.isCase());
1346:       assertFalse(node1.isSwitch());
1347:       assertFalse(node1.isInc());
1348:       assertFalse(node1.isNumber());
1349:       assertFalse(node1.isIn());
1350:       assertFalse(node1.isGetterDef());
1351:       assertFalse(node1.isFor());
1352:       assertFalse(node1.hasOneChild());
1353:       assertFalse(node1.isHook());
1354:       assertFalse(node1.isIf());
1355:       assertFalse(node1.isNE());
1356:       assertFalse(node1.isBlock());
1357:       assertFalse(node1.isThis());
1358:       assertFalse(node1.isInstanceOf());
1359:       assertFalse(node1.isRegExp());
1360:       assertFalse(node1.hasMoreThanOneChild());
1361:       assertFalse(node1.isWith());
1362:       assertFalse(node1.isCatch());
1363:       assertFalse(boolean4);
1364:       assertEquals(4095, Node.COLUMN_MASK);
1365:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1366:       assertEquals(55, Node.INFERRED_FUNCTION);
1367:       assertEquals(36, Node.QUOTED_PROP);
1368:       assertEquals(8, Node.FLAG_NO_THROWS);
1369:       assertEquals(48, Node.DIRECTIVES);
1370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1371:       assertEquals(43, Node.IS_CONSTANT_NAME);
1372:       assertEquals(57, Node.REFLECTED_OBJECT);
1373:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1374:       assertEquals(29, Node.JSDOC_INFO_PROP);
1375:       assertEquals(53, Node.INPUT_ID);
1376:       assertEquals(52, Node.LENGTH);
1377:       assertEquals(40, Node.ORIGINALNAME_PROP);
1378:       assertEquals(2, Node.POST_FLAG);
1379:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1380:       assertEquals(39, Node.EMPTY_BLOCK);
1381:       assertEquals(57, Node.LAST_PROP);
1382:       assertEquals(47, Node.IS_DISPATCHER);
1383:       assertEquals(30, Node.VAR_ARGS_NAME);
1384:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1385:       assertEquals(12, Node.COLUMN_BITS);
1386:       assertEquals(32, Node.INCRDECR_PROP);
1387:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1388:       assertEquals(1, Node.DECR_FLAG);
1389:       assertEquals(37, Node.OPT_ARG_NAME);
1390:       assertEquals(49, Node.DIRECT_EVAL);
1391:       assertEquals(46, Node.IS_NAMESPACE);
1392:       assertEquals(54, Node.SLASH_V);
1393:       assertEquals(56, Node.CHANGE_TIME);
1394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1395:       assertEquals(50, Node.FREE_CALL);
1396:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1397:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1398:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1399:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1400:       
1401:       node0.setInputId((InputId) null);
1402:       assertFalse(node0.equals((Object)node1));
1403:       assertFalse(node0.isIn());
1404:       assertTrue(node0.isNumber());
1405:       assertFalse(node0.isCase());
1406:       assertFalse(node0.isGetterDef());
1407:       assertFalse(node0.isIf());
1408:       assertFalse(node0.isDelProp());
1409:       assertFalse(node0.isSwitch());
1410:       assertFalse(node0.isNE());
1411:       assertFalse(node0.isEmpty());
1412:       assertFalse(node0.isString());
1413:       assertEquals((-1), node0.getCharno());
1414:       assertFalse(node0.isHook());
1415:       assertFalse(node0.isVoid());
1416:       assertFalse(node0.isTry());
1417:       assertFalse(node0.isBreak());
1418:       assertFalse(node0.isRegExp());
1419:       assertFalse(node0.isFor());
1420:       assertFalse(node0.isThis());
1421:       assertFalse(node0.isComma());
1422:       assertEquals(0, node0.getChildCount());
1423:       assertFalse(node0.isNull());
1424:       assertFalse(node0.isScript());
1425:       assertFalse(node0.isStringKey());
1426:       assertFalse(node0.isParamList());
1427:       assertFalse(node0.isTrue());
1428:       assertFalse(node0.isVar());
1429:       assertFalse(node0.isAdd());
1430:       assertFalse(node0.isLabelName());
1431:       assertFalse(node0.isNew());
1432:       assertFalse(node0.isArrayLit());
1433:       assertFalse(node0.isDefaultCase());
1434:       assertFalse(node0.isLabel());
1435:       assertFalse(node0.isReturn());
1436:       assertFalse(node0.hasMoreThanOneChild());
1437:       assertFalse(node0.isAssignAdd());
1438:       assertFalse(node0.isDo());
1439:       assertEquals((-1), node0.getLineno());
1440:       assertFalse(node0.isOr());
1441:       assertEquals((-1), node0.getSourcePosition());
1442:       assertFalse(node0.isCall());
1443:       assertFalse(node0.isName());
1444:       assertFalse(node0.isExprResult());
1445:       assertFalse(node0.isGetElem());
1446:       assertFalse(node0.hasOneChild());
1447:       assertFalse(node0.hasChildren());
1448:       assertFalse(node0.isTypeOf());
1449:       assertFalse(node0.isWith());
1450:       assertFalse(node0.isWhile());
1451:       assertFalse(node0.isBlock());
1452:       assertEquals(39, node0.getType());
1453:       assertFalse(node0.isAssign());
1454:       assertFalse(node0.isDec());
1455:       assertFalse(node0.isCatch());
1456:       assertFalse(node0.isInstanceOf());
1457:       assertFalse(node0.isAnd());
1458:       assertFalse(node0.isGetProp());
1459:       assertFalse(node0.isSetterDef());
1460:       assertFalse(node0.isObjectLit());
1461:       assertFalse(node0.isNot());
1462:       assertFalse(node0.isDebugger());
1463:       assertFalse(node0.isCast());
1464:       assertFalse(node0.isInc());
1465:       assertFalse(node0.isContinue());
1466:       assertFalse(node0.isThrow());
1467:       assertFalse(node0.isFalse());
1468:       assertFalse(node0.isFunction());
1469:       assertEquals(46, Node.IS_NAMESPACE);
1470:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1471:       assertEquals(12, Node.COLUMN_BITS);
1472:       assertEquals(47, Node.IS_DISPATCHER);
1473:       assertEquals(2, Node.POST_FLAG);
1474:       assertEquals(56, Node.CHANGE_TIME);
1475:       assertEquals(37, Node.OPT_ARG_NAME);
1476:       assertEquals(49, Node.DIRECT_EVAL);
1477:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1478:       assertEquals(54, Node.SLASH_V);
1479:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1480:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1481:       assertEquals(50, Node.FREE_CALL);
1482:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1483:       assertEquals(32, Node.INCRDECR_PROP);
1484:       assertEquals(1, Node.DECR_FLAG);
1485:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1486:       assertEquals(4095, Node.COLUMN_MASK);
1487:       assertEquals(8, Node.FLAG_NO_THROWS);
1488:       assertEquals(40, Node.ORIGINALNAME_PROP);
1489:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1490:       assertEquals(43, Node.IS_CONSTANT_NAME);
1491:       assertEquals(48, Node.DIRECTIVES);
1492:       assertEquals(53, Node.INPUT_ID);
1493:       assertEquals(52, Node.LENGTH);
1494:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1495:       assertEquals(36, Node.QUOTED_PROP);
1496:       assertEquals(57, Node.REFLECTED_OBJECT);
1497:       assertEquals(30, Node.VAR_ARGS_NAME);
1498:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1500:       assertEquals(55, Node.INFERRED_FUNCTION);
1501:       assertEquals(29, Node.JSDOC_INFO_PROP);
1502:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1503:       assertEquals(39, Node.EMPTY_BLOCK);
1504:       assertEquals(57, Node.LAST_PROP);
1505:       
1506:       node0.setType(46);
1507:       assertFalse(node0.equals((Object)node1));
1508:       assertFalse(node0.isIn());
1509:       assertFalse(node0.isCase());
1510:       assertFalse(node0.isGetterDef());
1511:       assertFalse(node0.isIf());
1512:       assertFalse(node0.isDelProp());
1513:       assertFalse(node0.isSwitch());
1514:       assertFalse(node0.isNE());
1515:       assertFalse(node0.isEmpty());
1516:       assertFalse(node0.isString());
1517:       assertEquals((-1), node0.getCharno());
1518:       assertFalse(node0.isHook());
1519:       assertFalse(node0.isVoid());
1520:       assertFalse(node0.isTry());
1521:       assertFalse(node0.isBreak());
1522:       assertFalse(node0.isRegExp());
1523:       assertFalse(node0.isFor());
1524:       assertFalse(node0.isThis());
1525:       assertFalse(node0.isComma());
1526:       assertEquals(0, node0.getChildCount());
1527:       assertEquals(46, node0.getType());
1528:       assertFalse(node0.isNull());
1529:       assertFalse(node0.isScript());
1530:       assertFalse(node0.isStringKey());
1531:       assertFalse(node0.isParamList());
1532:       assertFalse(node0.isTrue());
1533:       assertFalse(node0.isVar());
1534:       assertFalse(node0.isAdd());
1535:       assertFalse(node0.isLabelName());
1536:       assertFalse(node0.isNew());
1537:       assertFalse(node0.isArrayLit());
1538:       assertFalse(node0.isDefaultCase());
1539:       assertFalse(node0.isLabel());
1540:       assertFalse(node0.isReturn());
1541:       assertFalse(node0.hasMoreThanOneChild());
1542:       assertFalse(node0.isAssignAdd());
1543:       assertFalse(node0.isDo());
1544:       assertEquals((-1), node0.getLineno());
1545:       assertFalse(node0.isNumber());
1546:       assertFalse(node0.isOr());
1547:       assertEquals((-1), node0.getSourcePosition());
1548:       assertFalse(node0.isCall());
1549:       assertFalse(node0.isName());
1550:       assertFalse(node0.isExprResult());
1551:       assertFalse(node0.isGetElem());
1552:       assertFalse(node0.hasOneChild());
1553:       assertFalse(node0.hasChildren());
1554:       assertFalse(node0.isTypeOf());
1555:       assertFalse(node0.isWith());
1556:       assertFalse(node0.isWhile());
1557:       assertFalse(node0.isBlock());
1558:       assertFalse(node0.isAssign());
1559:       assertFalse(node0.isDec());
1560:       assertFalse(node0.isCatch());
1561:       assertFalse(node0.isInstanceOf());
1562:       assertFalse(node0.isAnd());
1563:       assertFalse(node0.isGetProp());
1564:       assertFalse(node0.isSetterDef());
1565:       assertFalse(node0.isObjectLit());
1566:       assertFalse(node0.isNot());
1567:       assertFalse(node0.isDebugger());
1568:       assertFalse(node0.isCast());
1569:       assertFalse(node0.isInc());
1570:       assertFalse(node0.isContinue());
1571:       assertFalse(node0.isThrow());
1572:       assertFalse(node0.isFalse());
1573:       assertFalse(node0.isFunction());
1574:       assertEquals(46, Node.IS_NAMESPACE);
1575:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1576:       assertEquals(12, Node.COLUMN_BITS);
1577:       assertEquals(47, Node.IS_DISPATCHER);
1578:       assertEquals(2, Node.POST_FLAG);
1579:       assertEquals(56, Node.CHANGE_TIME);
1580:       assertEquals(37, Node.OPT_ARG_NAME);
1581:       assertEquals(49, Node.DIRECT_EVAL);
1582:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1583:       assertEquals(54, Node.SLASH_V);
1584:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1585:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1586:       assertEquals(50, Node.FREE_CALL);
1587:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1588:       assertEquals(32, Node.INCRDECR_PROP);
1589:       assertEquals(1, Node.DECR_FLAG);
1590:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1591:       assertEquals(4095, Node.COLUMN_MASK);
1592:       assertEquals(8, Node.FLAG_NO_THROWS);
1593:       assertEquals(40, Node.ORIGINALNAME_PROP);
1594:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1595:       assertEquals(43, Node.IS_CONSTANT_NAME);
1596:       assertEquals(48, Node.DIRECTIVES);
1597:       assertEquals(53, Node.INPUT_ID);
1598:       assertEquals(52, Node.LENGTH);
1599:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1600:       assertEquals(36, Node.QUOTED_PROP);
1601:       assertEquals(57, Node.REFLECTED_OBJECT);
1602:       assertEquals(30, Node.VAR_ARGS_NAME);
1603:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1604:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1605:       assertEquals(55, Node.INFERRED_FUNCTION);
1606:       assertEquals(29, Node.JSDOC_INFO_PROP);
1607:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1608:       assertEquals(39, Node.EMPTY_BLOCK);
1609:       assertEquals(57, Node.LAST_PROP);
1610:       
1611:       boolean boolean5 = node1.isVar();
1612:       assertFalse(node1.equals((Object)node0));
1613:       assertTrue(boolean5 == boolean0);
1614:       assertTrue(boolean5 == boolean1);
1615:       assertTrue(boolean5 == boolean2);
1616:       assertTrue(boolean5 == boolean4);
1617:       assertTrue(boolean5 == boolean3);
1618:       assertFalse(node1.isDefaultCase());
1619:       assertFalse(node1.isTrue());
1620:       assertFalse(node1.isSetterDef());
1621:       assertFalse(node1.isTry());
1622:       assertEquals(16422, node1.getSourcePosition());
1623:       assertFalse(node1.isDebugger());
1624:       assertFalse(node1.isStringKey());
1625:       assertFalse(node1.isEmpty());
1626:       assertFalse(node1.isArrayLit());
1627:       assertFalse(node1.isVar());
1628:       assertFalse(node1.isParamList());
1629:       assertFalse(node1.isFunction());
1630:       assertEquals(0, node1.getChildCount());
1631:       assertEquals(4, node1.getLineno());
1632:       assertEquals(38, node1.getCharno());
1633:       assertFalse(node1.isDo());
1634:       assertFalse(node1.isAssignAdd());
1635:       assertFalse(node1.isWhile());
1636:       assertFalse(node1.isAdd());
1637:       assertFalse(node1.isOr());
1638:       assertFalse(node1.isNew());
1639:       assertFalse(node1.isString());
1640:       assertFalse(node1.isCall());
1641:       assertFalse(node1.isName());
1642:       assertFalse(node1.isGetElem());
1643:       assertFalse(node1.isAssign());
1644:       assertFalse(node1.hasChildren());
1645:       assertFalse(node1.isNull());
1646:       assertFalse(node1.isDelProp());
1647:       assertEquals(0, node1.getType());
1648:       assertFalse(node1.isExprResult());
1649:       assertFalse(node1.isVoid());
1650:       assertFalse(node1.isComma());
1651:       assertFalse(node1.isReturn());
1652:       assertFalse(node1.isBreak());
1653:       assertFalse(node1.isDec());
1654:       assertFalse(node1.isTypeOf());
1655:       assertFalse(node1.isObjectLit());
1656:       assertFalse(node1.isNot());
1657:       assertFalse(node1.isAnd());
1658:       assertFalse(node1.isGetProp());
1659:       assertFalse(node1.isScript());
1660:       assertFalse(node1.isFalse());
1661:       assertFalse(node1.isThrow());
1662:       assertFalse(node1.isLabelName());
1663:       assertFalse(node1.isLabel());
1664:       assertFalse(node1.isCast());
1665:       assertFalse(node1.isContinue());
1666:       assertFalse(node1.isCase());
1667:       assertFalse(node1.isSwitch());
1668:       assertFalse(node1.isInc());
1669:       assertFalse(node1.isNumber());
1670:       assertFalse(node1.isIn());
1671:       assertFalse(node1.isGetterDef());
1672:       assertFalse(node1.isFor());
1673:       assertFalse(node1.hasOneChild());
1674:       assertFalse(node1.isHook());
1675:       assertFalse(node1.isIf());
1676:       assertFalse(node1.isNE());
1677:       assertFalse(node1.isBlock());
1678:       assertFalse(node1.isThis());
1679:       assertFalse(node1.isInstanceOf());
1680:       assertFalse(node1.isRegExp());
1681:       assertFalse(node1.hasMoreThanOneChild());
1682:       assertFalse(node1.isWith());
1683:       assertFalse(node1.isCatch());
1684:       assertFalse(boolean5);
1685:       assertEquals(4095, Node.COLUMN_MASK);
1686:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1687:       assertEquals(55, Node.INFERRED_FUNCTION);
1688:       assertEquals(36, Node.QUOTED_PROP);
1689:       assertEquals(8, Node.FLAG_NO_THROWS);
1690:       assertEquals(48, Node.DIRECTIVES);
1691:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1692:       assertEquals(43, Node.IS_CONSTANT_NAME);
1693:       assertEquals(57, Node.REFLECTED_OBJECT);
1694:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1695:       assertEquals(29, Node.JSDOC_INFO_PROP);
1696:       assertEquals(53, Node.INPUT_ID);
1697:       assertEquals(52, Node.LENGTH);
1698:       assertEquals(40, Node.ORIGINALNAME_PROP);
1699:       assertEquals(2, Node.POST_FLAG);
1700:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1701:       assertEquals(39, Node.EMPTY_BLOCK);
1702:       assertEquals(57, Node.LAST_PROP);
1703:       assertEquals(47, Node.IS_DISPATCHER);
1704:       assertEquals(30, Node.VAR_ARGS_NAME);
1705:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1706:       assertEquals(12, Node.COLUMN_BITS);
1707:       assertEquals(32, Node.INCRDECR_PROP);
1708:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1709:       assertEquals(1, Node.DECR_FLAG);
1710:       assertEquals(37, Node.OPT_ARG_NAME);
1711:       assertEquals(49, Node.DIRECT_EVAL);
1712:       assertEquals(46, Node.IS_NAMESPACE);
1713:       assertEquals(54, Node.SLASH_V);
1714:       assertEquals(56, Node.CHANGE_TIME);
1715:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1716:       assertEquals(50, Node.FREE_CALL);
1717:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1718:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1719:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1720:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1721:       
1722:       Node node2 = new Node((-1872), node1, (-264), 0);
1723:       assertFalse(node1.equals((Object)node0));
1724:       assertFalse(node2.equals((Object)node0));
1725:       assertFalse(node2.equals((Object)node1));
1726:       assertFalse(node1.isDefaultCase());
1727:       assertFalse(node1.isTrue());
1728:       assertFalse(node1.isSetterDef());
1729:       assertFalse(node1.isTry());
1730:       assertEquals(16422, node1.getSourcePosition());
1731:       assertFalse(node1.isDebugger());
1732:       assertFalse(node1.isStringKey());
1733:       assertFalse(node1.isEmpty());
1734:       assertFalse(node1.isArrayLit());
1735:       assertFalse(node1.isVar());
1736:       assertFalse(node1.isParamList());
1737:       assertFalse(node1.isFunction());
1738:       assertEquals(0, node1.getChildCount());
1739:       assertEquals(4, node1.getLineno());
1740:       assertEquals(38, node1.getCharno());
1741:       assertFalse(node1.isDo());
1742:       assertFalse(node1.isAssignAdd());
1743:       assertFalse(node1.isWhile());
1744:       assertFalse(node1.isAdd());
1745:       assertFalse(node1.isOr());
1746:       assertFalse(node1.isNew());
1747:       assertFalse(node1.isString());
1748:       assertFalse(node1.isCall());
1749:       assertFalse(node1.isName());
1750:       assertFalse(node1.isGetElem());
1751:       assertFalse(node1.isAssign());
1752:       assertFalse(node1.hasChildren());
1753:       assertFalse(node1.isNull());
1754:       assertFalse(node1.isDelProp());
1755:       assertEquals(0, node1.getType());
1756:       assertFalse(node1.isExprResult());
1757:       assertFalse(node1.isVoid());
1758:       assertFalse(node1.isComma());
1759:       assertFalse(node1.isReturn());
1760:       assertFalse(node1.isBreak());
1761:       assertFalse(node1.isDec());
1762:       assertFalse(node1.isTypeOf());
1763:       assertFalse(node1.isObjectLit());
1764:       assertFalse(node1.isNot());
1765:       assertFalse(node1.isAnd());
1766:       assertFalse(node1.isGetProp());
1767:       assertFalse(node1.isScript());
1768:       assertFalse(node1.isFalse());
1769:       assertFalse(node1.isThrow());
1770:       assertFalse(node1.isLabelName());
1771:       assertFalse(node1.isLabel());
1772:       assertFalse(node1.isCast());
1773:       assertFalse(node1.isContinue());
1774:       assertFalse(node1.isCase());
1775:       assertFalse(node1.isSwitch());
1776:       assertFalse(node1.isInc());
1777:       assertFalse(node1.isNumber());
1778:       assertFalse(node1.isIn());
1779:       assertFalse(node1.isGetterDef());
1780:       assertFalse(node1.isFor());
1781:       assertFalse(node1.hasOneChild());
1782:       assertFalse(node1.isHook());
1783:       assertFalse(node1.isIf());
1784:       assertFalse(node1.isNE());
1785:       assertFalse(node1.isBlock());
1786:       assertFalse(node1.isThis());
1787:       assertFalse(node1.isInstanceOf());
1788:       assertFalse(node1.isRegExp());
1789:       assertFalse(node1.hasMoreThanOneChild());
1790:       assertFalse(node1.isWith());
1791:       assertFalse(node1.isCatch());
1792:       assertFalse(node2.isLabelName());
1793:       assertFalse(node2.isAssign());
1794:       assertFalse(node2.isDec());
1795:       assertEquals((-1), node2.getSourcePosition());
1796:       assertFalse(node2.isOr());
1797:       assertFalse(node2.isAssignAdd());
1798:       assertFalse(node2.isNumber());
1799:       assertFalse(node2.isScript());
1800:       assertFalse(node2.hasMoreThanOneChild());
1801:       assertFalse(node2.isWith());
1802:       assertFalse(node2.isWhile());
1803:       assertFalse(node2.isReturn());
1804:       assertFalse(node2.isComma());
1805:       assertFalse(node2.isTypeOf());
1806:       assertFalse(node2.isInstanceOf());
1807:       assertFalse(node2.isBreak());
1808:       assertEquals((-1), node2.getLineno());
1809:       assertFalse(node2.isCall());
1810:       assertFalse(node2.isExprResult());
1811:       assertFalse(node2.isGetElem());
1812:       assertFalse(node2.isStringKey());
1813:       assertFalse(node2.isName());
1814:       assertFalse(node2.isHook());
1815:       assertFalse(node2.isVar());
1816:       assertFalse(node2.isThis());
1817:       assertFalse(node2.isNull());
1818:       assertFalse(node2.isBlock());
1819:       assertFalse(node2.isNew());
1820:       assertEquals((-1), node2.getCharno());
1821:       assertFalse(node2.isAdd());
1822:       assertFalse(node2.isDo());
1823:       assertFalse(node2.isDefaultCase());
1824:       assertFalse(node2.isLabel());
1825:       assertFalse(node2.isParamList());
1826:       assertFalse(node2.isSwitch());
1827:       assertFalse(node2.isArrayLit());
1828:       assertFalse(node2.isGetterDef());
1829:       assertFalse(node2.isDelProp());
1830:       assertFalse(node2.isIf());
1831:       assertTrue(node2.hasOneChild());
1832:       assertFalse(node2.isNE());
1833:       assertFalse(node2.isFor());
1834:       assertFalse(node2.isDebugger());
1835:       assertFalse(node2.isTry());
1836:       assertFalse(node2.isIn());
1837:       assertFalse(node2.isEmpty());
1838:       assertFalse(node2.isCase());
1839:       assertEquals(1, node2.getChildCount());
1840:       assertFalse(node2.isTrue());
1841:       assertFalse(node2.isRegExp());
1842:       assertFalse(node2.isVoid());
1843:       assertFalse(node2.isCatch());
1844:       assertTrue(node2.hasChildren());
1845:       assertFalse(node2.isFalse());
1846:       assertFalse(node2.isThrow());
1847:       assertFalse(node2.isGetProp());
1848:       assertFalse(node2.isString());
1849:       assertEquals((-1872), node2.getType());
1850:       assertFalse(node2.isSetterDef());
1851:       assertFalse(node2.isInc());
1852:       assertFalse(node2.isContinue());
1853:       assertFalse(node2.isAnd());
1854:       assertFalse(node2.isNot());
1855:       assertFalse(node2.isObjectLit());
1856:       assertFalse(node2.isFunction());
1857:       assertFalse(node2.isCast());
1858:       assertEquals(4095, Node.COLUMN_MASK);
1859:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1860:       assertEquals(55, Node.INFERRED_FUNCTION);
1861:       assertEquals(36, Node.QUOTED_PROP);
1862:       assertEquals(8, Node.FLAG_NO_THROWS);
1863:       assertEquals(48, Node.DIRECTIVES);
1864:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1865:       assertEquals(43, Node.IS_CONSTANT_NAME);
1866:       assertEquals(57, Node.REFLECTED_OBJECT);
1867:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1868:       assertEquals(29, Node.JSDOC_INFO_PROP);
1869:       assertEquals(53, Node.INPUT_ID);
1870:       assertEquals(52, Node.LENGTH);
1871:       assertEquals(40, Node.ORIGINALNAME_PROP);
1872:       assertEquals(2, Node.POST_FLAG);
1873:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1874:       assertEquals(39, Node.EMPTY_BLOCK);
1875:       assertEquals(57, Node.LAST_PROP);
1876:       assertEquals(47, Node.IS_DISPATCHER);
1877:       assertEquals(30, Node.VAR_ARGS_NAME);
1878:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1879:       assertEquals(12, Node.COLUMN_BITS);
1880:       assertEquals(32, Node.INCRDECR_PROP);
1881:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1882:       assertEquals(1, Node.DECR_FLAG);
1883:       assertEquals(37, Node.OPT_ARG_NAME);
1884:       assertEquals(49, Node.DIRECT_EVAL);
1885:       assertEquals(46, Node.IS_NAMESPACE);
1886:       assertEquals(54, Node.SLASH_V);
1887:       assertEquals(56, Node.CHANGE_TIME);
1888:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1889:       assertEquals(50, Node.FREE_CALL);
1890:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1891:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1892:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1893:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1894:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1895:       assertEquals(29, Node.JSDOC_INFO_PROP);
1896:       assertEquals(53, Node.INPUT_ID);
1897:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1898:       assertEquals(36, Node.QUOTED_PROP);
1899:       assertEquals(43, Node.IS_CONSTANT_NAME);
1900:       assertEquals(56, Node.CHANGE_TIME);
1901:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1902:       assertEquals(46, Node.IS_NAMESPACE);
1903:       assertEquals(12, Node.COLUMN_BITS);
1904:       assertEquals(4095, Node.COLUMN_MASK);
1905:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1906:       assertEquals(32, Node.INCRDECR_PROP);
1907:       assertEquals(49, Node.DIRECT_EVAL);
1908:       assertEquals(48, Node.DIRECTIVES);
1909:       assertEquals(1, Node.DECR_FLAG);
1910:       assertEquals(37, Node.OPT_ARG_NAME);
1911:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1912:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1913:       assertEquals(52, Node.LENGTH);
1914:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1915:       assertEquals(40, Node.ORIGINALNAME_PROP);
1916:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1917:       assertEquals(8, Node.FLAG_NO_THROWS);
1918:       assertEquals(50, Node.FREE_CALL);
1919:       assertEquals(54, Node.SLASH_V);
1920:       assertEquals(57, Node.REFLECTED_OBJECT);
1921:       assertEquals(55, Node.INFERRED_FUNCTION);
1922:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1923:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1924:       assertEquals(39, Node.EMPTY_BLOCK);
1925:       assertEquals(2, Node.POST_FLAG);
1926:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1927:       assertEquals(57, Node.LAST_PROP);
1928:       assertEquals(30, Node.VAR_ARGS_NAME);
1929:       assertEquals(47, Node.IS_DISPATCHER);
1930:       assertNotNull(node2);
1931:       
1932:       Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeTypeAwareEqualsImpl(node2);
1933:       assertFalse(node1.equals((Object)node0));
1934:       assertFalse(node1.equals((Object)node2));
1935:       assertFalse(node2.equals((Object)node0));
1936:       assertFalse(node2.equals((Object)node1));
1937:       assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
1938:       assertFalse(node1.isDefaultCase());
1939:       assertFalse(node1.isTrue());
1940:       assertFalse(node1.isSetterDef());
1941:       assertFalse(node1.isTry());
1942:       assertEquals(16422, node1.getSourcePosition());
1943:       assertFalse(node1.isDebugger());
1944:       assertFalse(node1.isStringKey());
1945:       assertFalse(node1.isEmpty());
1946:       assertFalse(node1.isArrayLit());
1947:       assertFalse(node1.isVar());
1948:       assertFalse(node1.isParamList());
1949:       assertFalse(node1.isFunction());
1950:       assertEquals(0, node1.getChildCount());
1951:       assertEquals(4, node1.getLineno());
1952:       assertEquals(38, node1.getCharno());
1953:       assertFalse(node1.isDo());
1954:       assertFalse(node1.isAssignAdd());
1955:       assertFalse(node1.isWhile());
1956:       assertFalse(node1.isAdd());
1957:       assertFalse(node1.isOr());
1958:       assertFalse(node1.isNew());
1959:       assertFalse(node1.isString());
1960:       assertFalse(node1.isCall());
1961:       assertFalse(node1.isName());
1962:       assertFalse(node1.isGetElem());
1963:       assertFalse(node1.isAssign());
1964:       assertFalse(node1.hasChildren());
1965:       assertFalse(node1.isNull());
1966:       assertFalse(node1.isDelProp());
1967:       assertEquals(0, node1.getType());
1968:       assertFalse(node1.isExprResult());
1969:       assertFalse(node1.isVoid());
1970:       assertFalse(node1.isComma());
1971:       assertFalse(node1.isReturn());
1972:       assertFalse(node1.isBreak());
1973:       assertFalse(node1.isDec());
1974:       assertFalse(node1.isTypeOf());
1975:       assertFalse(node1.isObjectLit());
1976:       assertFalse(node1.isNot());
1977:       assertFalse(node1.isAnd());
1978:       assertFalse(node1.isGetProp());
1979:       assertFalse(node1.isScript());
1980:       assertFalse(node1.isFalse());
1981:       assertFalse(node1.isThrow());
1982:       assertFalse(node1.isLabelName());
1983:       assertFalse(node1.isLabel());
1984:       assertFalse(node1.isCast());
1985:       assertFalse(node1.isContinue());
1986:       assertFalse(node1.isCase());
1987:       assertFalse(node1.isSwitch());
1988:       assertFalse(node1.isInc());
1989:       assertFalse(node1.isNumber());
1990:       assertFalse(node1.isIn());
1991:       assertFalse(node1.isGetterDef());
1992:       assertFalse(node1.isFor());
1993:       assertFalse(node1.hasOneChild());
1994:       assertFalse(node1.isHook());
1995:       assertFalse(node1.isIf());
1996:       assertFalse(node1.isNE());
1997:       assertFalse(node1.isBlock());
1998:       assertFalse(node1.isThis());
1999:       assertFalse(node1.isInstanceOf());
2000:       assertFalse(node1.isRegExp());
2001:       assertFalse(node1.hasMoreThanOneChild());
2002:       assertFalse(node1.isWith());
2003:       assertFalse(node1.isCatch());
2004:       assertFalse(node2.isLabelName());
2005:       assertFalse(node2.isAssign());
2006:       assertFalse(node2.isDec());
2007:       assertEquals((-1), node2.getSourcePosition());
2008:       assertFalse(node2.isOr());
2009:       assertFalse(node2.isAssignAdd());
2010:       assertFalse(node2.isNumber());
2011:       assertFalse(node2.isScript());
2012:       assertFalse(node2.hasMoreThanOneChild());
2013:       assertFalse(node2.isWith());
2014:       assertFalse(node2.isWhile());
2015:       assertFalse(node2.isReturn());
2016:       assertFalse(node2.isComma());
2017:       assertFalse(node2.isTypeOf());
2018:       assertFalse(node2.isInstanceOf());
2019:       assertFalse(node2.isBreak());
2020:       assertEquals((-1), node2.getLineno());
2021:       assertFalse(node2.isCall());
2022:       assertFalse(node2.isExprResult());
2023:       assertFalse(node2.isGetElem());
2024:       assertFalse(node2.isStringKey());
2025:       assertFalse(node2.isName());
2026:       assertFalse(node2.isHook());
2027:       assertFalse(node2.isVar());
2028:       assertFalse(node2.isThis());
2029:       assertFalse(node2.isNull());
2030:       assertFalse(node2.isBlock());
2031:       assertFalse(node2.isNew());
2032:       assertEquals((-1), node2.getCharno());
2033:       assertFalse(node2.isAdd());
2034:       assertFalse(node2.isDo());
2035:       assertFalse(node2.isDefaultCase());
2036:       assertFalse(node2.isLabel());
2037:       assertFalse(node2.isParamList());
2038:       assertFalse(node2.isSwitch());
2039:       assertFalse(node2.isArrayLit());
2040:       assertFalse(node2.isGetterDef());
2041:       assertFalse(node2.isDelProp());
2042:       assertFalse(node2.isIf());
2043:       assertTrue(node2.hasOneChild());
2044:       assertFalse(node2.isNE());
2045:       assertFalse(node2.isFor());
2046:       assertFalse(node2.isDebugger());
2047:       assertFalse(node2.isTry());
2048:       assertFalse(node2.isIn());
2049:       assertFalse(node2.isEmpty());
2050:       assertFalse(node2.isCase());
2051:       assertEquals(1, node2.getChildCount());
2052:       assertFalse(node2.isTrue());
2053:       assertFalse(node2.isRegExp());
2054:       assertFalse(node2.isVoid());
2055:       assertFalse(node2.isCatch());
2056:       assertTrue(node2.hasChildren());
2057:       assertFalse(node2.isFalse());
2058:       assertFalse(node2.isThrow());
2059:       assertFalse(node2.isGetProp());
2060:       assertFalse(node2.isString());
2061:       assertEquals((-1872), node2.getType());
2062:       assertFalse(node2.isSetterDef());
2063:       assertFalse(node2.isInc());
2064:       assertFalse(node2.isContinue());
2065:       assertFalse(node2.isAnd());
2066:       assertFalse(node2.isNot());
2067:       assertFalse(node2.isObjectLit());
2068:       assertFalse(node2.isFunction());
2069:       assertFalse(node2.isCast());
2070:       assertEquals(4095, Node.COLUMN_MASK);
2071:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2072:       assertEquals(55, Node.INFERRED_FUNCTION);
2073:       assertEquals(36, Node.QUOTED_PROP);
2074:       assertEquals(8, Node.FLAG_NO_THROWS);
2075:       assertEquals(48, Node.DIRECTIVES);
2076:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2077:       assertEquals(43, Node.IS_CONSTANT_NAME);
2078:       assertEquals(57, Node.REFLECTED_OBJECT);
2079:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2080:       assertEquals(29, Node.JSDOC_INFO_PROP);
2081:       assertEquals(53, Node.INPUT_ID);
2082:       assertEquals(52, Node.LENGTH);
2083:       assertEquals(40, Node.ORIGINALNAME_PROP);
2084:       assertEquals(2, Node.POST_FLAG);
2085:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2086:       assertEquals(39, Node.EMPTY_BLOCK);
2087:       assertEquals(57, Node.LAST_PROP);
2088:       assertEquals(47, Node.IS_DISPATCHER);
2089:       assertEquals(30, Node.VAR_ARGS_NAME);
2090:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2091:       assertEquals(12, Node.COLUMN_BITS);
2092:       assertEquals(32, Node.INCRDECR_PROP);
2093:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2094:       assertEquals(1, Node.DECR_FLAG);
2095:       assertEquals(37, Node.OPT_ARG_NAME);
2096:       assertEquals(49, Node.DIRECT_EVAL);
2097:       assertEquals(46, Node.IS_NAMESPACE);
2098:       assertEquals(54, Node.SLASH_V);
2099:       assertEquals(56, Node.CHANGE_TIME);
2100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2101:       assertEquals(50, Node.FREE_CALL);
2102:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2103:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2104:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2107:       assertEquals(29, Node.JSDOC_INFO_PROP);
2108:       assertEquals(53, Node.INPUT_ID);
2109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2110:       assertEquals(36, Node.QUOTED_PROP);
2111:       assertEquals(43, Node.IS_CONSTANT_NAME);
2112:       assertEquals(56, Node.CHANGE_TIME);
2113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2114:       assertEquals(46, Node.IS_NAMESPACE);
2115:       assertEquals(12, Node.COLUMN_BITS);
2116:       assertEquals(4095, Node.COLUMN_MASK);
2117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2118:       assertEquals(32, Node.INCRDECR_PROP);
2119:       assertEquals(49, Node.DIRECT_EVAL);
2120:       assertEquals(48, Node.DIRECTIVES);
2121:       assertEquals(1, Node.DECR_FLAG);
2122:       assertEquals(37, Node.OPT_ARG_NAME);
2123:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2125:       assertEquals(52, Node.LENGTH);
2126:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2127:       assertEquals(40, Node.ORIGINALNAME_PROP);
2128:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2129:       assertEquals(8, Node.FLAG_NO_THROWS);
2130:       assertEquals(50, Node.FREE_CALL);
2131:       assertEquals(54, Node.SLASH_V);
2132:       assertEquals(57, Node.REFLECTED_OBJECT);
2133:       assertEquals(55, Node.INFERRED_FUNCTION);
2134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2136:       assertEquals(39, Node.EMPTY_BLOCK);
2137:       assertEquals(2, Node.POST_FLAG);
2138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2139:       assertEquals(57, Node.LAST_PROP);
2140:       assertEquals(30, Node.VAR_ARGS_NAME);
2141:       assertEquals(47, Node.IS_DISPATCHER);
2142:       assertNotNull(node_NodeMismatch1);
2143:       assertNotSame(node_NodeMismatch1, node_NodeMismatch0);
2144:       
2145:       Node node3 = node1.srcrefTree(node2);
2146:       assertFalse(node1.equals((Object)node0));
2147:       assertFalse(node1.equals((Object)node2));
2148:       assertFalse(node2.equals((Object)node0));
2149:       assertFalse(node2.equals((Object)node1));
2150:       assertFalse(node3.equals((Object)node2));
2151:       assertFalse(node3.equals((Object)node0));
2152:       assertFalse(node1.isDefaultCase());
2153:       assertFalse(node1.isTrue());
2154:       assertFalse(node1.isSetterDef());
2155:       assertFalse(node1.isTry());
2156:       assertFalse(node1.isDebugger());
2157:       assertFalse(node1.isStringKey());
2158:       assertFalse(node1.isEmpty());
2159:       assertFalse(node1.isArrayLit());
2160:       assertFalse(node1.isVar());
2161:       assertFalse(node1.isParamList());
2162:       assertFalse(node1.isFunction());
2163:       assertEquals(0, node1.getChildCount());
2164:       assertFalse(node1.isDo());
2165:       assertFalse(node1.isAssignAdd());
2166:       assertFalse(node1.isWhile());
2167:       assertFalse(node1.isAdd());
2168:       assertFalse(node1.isOr());
2169:       assertFalse(node1.isNew());
2170:       assertEquals((-1), node1.getSourcePosition());
2171:       assertFalse(node1.isString());
2172:       assertFalse(node1.isCall());
2173:       assertFalse(node1.isName());
2174:       assertFalse(node1.isGetElem());
2175:       assertFalse(node1.isAssign());
2176:       assertFalse(node1.hasChildren());
2177:       assertFalse(node1.isNull());
2178:       assertFalse(node1.isDelProp());
2179:       assertEquals(0, node1.getType());
2180:       assertFalse(node1.isExprResult());
2181:       assertFalse(node1.isVoid());
2182:       assertFalse(node1.isComma());
2183:       assertFalse(node1.isReturn());
2184:       assertFalse(node1.isBreak());
2185:       assertFalse(node1.isDec());
2186:       assertFalse(node1.isTypeOf());
2187:       assertFalse(node1.isObjectLit());
2188:       assertFalse(node1.isNot());
2189:       assertFalse(node1.isAnd());
2190:       assertFalse(node1.isGetProp());
2191:       assertFalse(node1.isScript());
2192:       assertFalse(node1.isFalse());
2193:       assertFalse(node1.isThrow());
2194:       assertFalse(node1.isLabelName());
2195:       assertFalse(node1.isLabel());
2196:       assertFalse(node1.isCast());
2197:       assertFalse(node1.isContinue());
2198:       assertFalse(node1.isCase());
2199:       assertFalse(node1.isSwitch());
2200:       assertFalse(node1.isInc());
2201:       assertEquals((-1), node1.getCharno());
2202:       assertFalse(node1.isNumber());
2203:       assertFalse(node1.isIn());
2204:       assertFalse(node1.isGetterDef());
2205:       assertFalse(node1.isFor());
2206:       assertFalse(node1.hasOneChild());
2207:       assertFalse(node1.isHook());
2208:       assertFalse(node1.isIf());
2209:       assertFalse(node1.isNE());
2210:       assertFalse(node1.isBlock());
2211:       assertFalse(node1.isThis());
2212:       assertEquals((-1), node1.getLineno());
2213:       assertFalse(node1.isInstanceOf());
2214:       assertFalse(node1.isRegExp());
2215:       assertFalse(node1.hasMoreThanOneChild());
2216:       assertFalse(node1.isWith());
2217:       assertFalse(node1.isCatch());
2218:       assertFalse(node2.isLabelName());
2219:       assertFalse(node2.isAssign());
2220:       assertFalse(node2.isDec());
2221:       assertEquals((-1), node2.getSourcePosition());
2222:       assertFalse(node2.isOr());
2223:       assertFalse(node2.isAssignAdd());
2224:       assertFalse(node2.isNumber());
2225:       assertFalse(node2.isScript());
2226:       assertFalse(node2.hasMoreThanOneChild());
2227:       assertFalse(node2.isWith());
2228:       assertFalse(node2.isWhile());
2229:       assertFalse(node2.isReturn());
2230:       assertFalse(node2.isComma());
2231:       assertFalse(node2.isTypeOf());
2232:       assertFalse(node2.isInstanceOf());
2233:       assertFalse(node2.isBreak());
2234:       assertEquals((-1), node2.getLineno());
2235:       assertFalse(node2.isCall());
2236:       assertFalse(node2.isExprResult());
2237:       assertFalse(node2.isGetElem());
2238:       assertFalse(node2.isStringKey());
2239:       assertFalse(node2.isName());
2240:       assertFalse(node2.isHook());
2241:       assertFalse(node2.isVar());
2242:       assertFalse(node2.isThis());
2243:       assertFalse(node2.isNull());
2244:       assertFalse(node2.isBlock());
2245:       assertFalse(node2.isNew());
2246:       assertEquals((-1), node2.getCharno());
2247:       assertFalse(node2.isAdd());
2248:       assertFalse(node2.isDo());
2249:       assertFalse(node2.isDefaultCase());
2250:       assertFalse(node2.isLabel());
2251:       assertFalse(node2.isParamList());
2252:       assertFalse(node2.isSwitch());
2253:       assertFalse(node2.isArrayLit());
2254:       assertFalse(node2.isGetterDef());
2255:       assertFalse(node2.isDelProp());
2256:       assertFalse(node2.isIf());
2257:       assertTrue(node2.hasOneChild());
2258:       assertFalse(node2.isNE());
2259:       assertFalse(node2.isFor());
2260:       assertFalse(node2.isDebugger());
2261:       assertFalse(node2.isTry());
2262:       assertFalse(node2.isIn());
2263:       assertFalse(node2.isEmpty());
2264:       assertFalse(node2.isCase());
2265:       assertEquals(1, node2.getChildCount());
2266:       assertFalse(node2.isTrue());
2267:       assertFalse(node2.isRegExp());
2268:       assertFalse(node2.isVoid());
2269:       assertFalse(node2.isCatch());
2270:       assertTrue(node2.hasChildren());
2271:       assertFalse(node2.isFalse());
2272:       assertFalse(node2.isThrow());
2273:       assertFalse(node2.isGetProp());
2274:       assertFalse(node2.isString());
2275:       assertEquals((-1872), node2.getType());
2276:       assertFalse(node2.isSetterDef());
2277:       assertFalse(node2.isInc());
2278:       assertFalse(node2.isContinue());
2279:       assertFalse(node2.isAnd());
2280:       assertFalse(node2.isNot());
2281:       assertFalse(node2.isObjectLit());
2282:       assertFalse(node2.isFunction());
2283:       assertFalse(node2.isCast());
2284:       assertEquals(0, node3.getChildCount());
2285:       assertFalse(node3.isCatch());
2286:       assertFalse(node3.isSetterDef());
2287:       assertFalse(node3.isNull());
2288:       assertFalse(node3.isParamList());
2289:       assertFalse(node3.isStringKey());
2290:       assertFalse(node3.isTrue());
2291:       assertFalse(node3.isDebugger());
2292:       assertFalse(node3.isCall());
2293:       assertFalse(node3.isName());
2294:       assertFalse(node3.isTry());
2295:       assertFalse(node3.isVoid());
2296:       assertFalse(node3.isRegExp());
2297:       assertFalse(node3.isWhile());
2298:       assertFalse(node3.isFor());
2299:       assertFalse(node3.isBlock());
2300:       assertFalse(node3.isAssignAdd());
2301:       assertFalse(node3.isDo());
2302:       assertFalse(node3.isCase());
2303:       assertFalse(node3.isNumber());
2304:       assertFalse(node3.isGetterDef());
2305:       assertFalse(node3.isDelProp());
2306:       assertFalse(node3.isSwitch());
2307:       assertFalse(node3.isOr());
2308:       assertEquals((-1), node3.getCharno());
2309:       assertFalse(node3.isVar());
2310:       assertFalse(node3.isAdd());
2311:       assertFalse(node3.isEmpty());
2312:       assertFalse(node3.isLabelName());
2313:       assertFalse(node3.isNew());
2314:       assertFalse(node3.isArrayLit());
2315:       assertFalse(node3.isDefaultCase());
2316:       assertFalse(node3.isLabel());
2317:       assertFalse(node3.isInstanceOf());
2318:       assertFalse(node3.isAnd());
2319:       assertFalse(node3.isGetProp());
2320:       assertFalse(node3.isScript());
2321:       assertFalse(node3.isObjectLit());
2322:       assertFalse(node3.isNot());
2323:       assertFalse(node3.hasOneChild());
2324:       assertFalse(node3.isHook());
2325:       assertFalse(node3.isGetElem());
2326:       assertEquals(0, node3.getType());
2327:       assertFalse(node3.isExprResult());
2328:       assertFalse(node3.isBreak());
2329:       assertFalse(node3.hasChildren());
2330:       assertFalse(node3.isDec());
2331:       assertFalse(node3.isTypeOf());
2332:       assertFalse(node3.isWith());
2333:       assertFalse(node3.isThis());
2334:       assertFalse(node3.isComma());
2335:       assertFalse(node3.isAssign());
2336:       assertFalse(node3.isReturn());
2337:       assertFalse(node3.isIn());
2338:       assertFalse(node3.hasMoreThanOneChild());
2339:       assertFalse(node3.isContinue());
2340:       assertEquals((-1), node3.getLineno());
2341:       assertFalse(node3.isIf());
2342:       assertFalse(node3.isNE());
2343:       assertFalse(node3.isString());
2344:       assertEquals((-1), node3.getSourcePosition());
2345:       assertFalse(node3.isCast());
2346:       assertFalse(node3.isInc());
2347:       assertFalse(node3.isFalse());
2348:       assertFalse(node3.isThrow());
2349:       assertFalse(node3.isFunction());
2350:       assertEquals(4095, Node.COLUMN_MASK);
2351:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2352:       assertEquals(55, Node.INFERRED_FUNCTION);
2353:       assertEquals(36, Node.QUOTED_PROP);
2354:       assertEquals(8, Node.FLAG_NO_THROWS);
2355:       assertEquals(48, Node.DIRECTIVES);
2356:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2357:       assertEquals(43, Node.IS_CONSTANT_NAME);
2358:       assertEquals(57, Node.REFLECTED_OBJECT);
2359:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2360:       assertEquals(29, Node.JSDOC_INFO_PROP);
2361:       assertEquals(53, Node.INPUT_ID);
2362:       assertEquals(52, Node.LENGTH);
2363:       assertEquals(40, Node.ORIGINALNAME_PROP);
2364:       assertEquals(2, Node.POST_FLAG);
2365:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2366:       assertEquals(39, Node.EMPTY_BLOCK);
2367:       assertEquals(57, Node.LAST_PROP);
2368:       assertEquals(47, Node.IS_DISPATCHER);
2369:       assertEquals(30, Node.VAR_ARGS_NAME);
2370:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2371:       assertEquals(12, Node.COLUMN_BITS);
2372:       assertEquals(32, Node.INCRDECR_PROP);
2373:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2374:       assertEquals(1, Node.DECR_FLAG);
2375:       assertEquals(37, Node.OPT_ARG_NAME);
2376:       assertEquals(49, Node.DIRECT_EVAL);
2377:       assertEquals(46, Node.IS_NAMESPACE);
2378:       assertEquals(54, Node.SLASH_V);
2379:       assertEquals(56, Node.CHANGE_TIME);
2380:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2381:       assertEquals(50, Node.FREE_CALL);
2382:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2383:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2384:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2386:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2387:       assertEquals(29, Node.JSDOC_INFO_PROP);
2388:       assertEquals(53, Node.INPUT_ID);
2389:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2390:       assertEquals(36, Node.QUOTED_PROP);
2391:       assertEquals(43, Node.IS_CONSTANT_NAME);
2392:       assertEquals(56, Node.CHANGE_TIME);
2393:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2394:       assertEquals(46, Node.IS_NAMESPACE);
2395:       assertEquals(12, Node.COLUMN_BITS);
2396:       assertEquals(4095, Node.COLUMN_MASK);
2397:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2398:       assertEquals(32, Node.INCRDECR_PROP);
2399:       assertEquals(49, Node.DIRECT_EVAL);
2400:       assertEquals(48, Node.DIRECTIVES);
2401:       assertEquals(1, Node.DECR_FLAG);
2402:       assertEquals(37, Node.OPT_ARG_NAME);
2403:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2404:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2405:       assertEquals(52, Node.LENGTH);
2406:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2407:       assertEquals(40, Node.ORIGINALNAME_PROP);
2408:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2409:       assertEquals(8, Node.FLAG_NO_THROWS);
2410:       assertEquals(50, Node.FREE_CALL);
2411:       assertEquals(54, Node.SLASH_V);
2412:       assertEquals(57, Node.REFLECTED_OBJECT);
2413:       assertEquals(55, Node.INFERRED_FUNCTION);
2414:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2415:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2416:       assertEquals(39, Node.EMPTY_BLOCK);
2417:       assertEquals(2, Node.POST_FLAG);
2418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2419:       assertEquals(57, Node.LAST_PROP);
2420:       assertEquals(30, Node.VAR_ARGS_NAME);
2421:       assertEquals(47, Node.IS_DISPATCHER);
2422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2423:       assertEquals(4095, Node.COLUMN_MASK);
2424:       assertEquals(8, Node.FLAG_NO_THROWS);
2425:       assertEquals(40, Node.ORIGINALNAME_PROP);
2426:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2427:       assertEquals(43, Node.IS_CONSTANT_NAME);
2428:       assertEquals(48, Node.DIRECTIVES);
2429:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2430:       assertEquals(54, Node.SLASH_V);
2431:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2432:       assertEquals(50, Node.FREE_CALL);
2433:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2434:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2435:       assertEquals(32, Node.INCRDECR_PROP);
2436:       assertEquals(1, Node.DECR_FLAG);
2437:       assertEquals(46, Node.IS_NAMESPACE);
2438:       assertEquals(2, Node.POST_FLAG);
2439:       assertEquals(12, Node.COLUMN_BITS);
2440:       assertEquals(47, Node.IS_DISPATCHER);
2441:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2442:       assertEquals(49, Node.DIRECT_EVAL);
2443:       assertEquals(56, Node.CHANGE_TIME);
2444:       assertEquals(37, Node.OPT_ARG_NAME);
2445:       assertEquals(52, Node.LENGTH);
2446:       assertEquals(53, Node.INPUT_ID);
2447:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2448:       assertEquals(57, Node.REFLECTED_OBJECT);
2449:       assertEquals(30, Node.VAR_ARGS_NAME);
2450:       assertEquals(36, Node.QUOTED_PROP);
2451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2452:       assertEquals(29, Node.JSDOC_INFO_PROP);
2453:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2454:       assertEquals(57, Node.LAST_PROP);
2455:       assertEquals(55, Node.INFERRED_FUNCTION);
2456:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2457:       assertEquals(39, Node.EMPTY_BLOCK);
2458:       assertNotNull(node3);
2459:       assertSame(node1, node3);
2460:       assertSame(node3, node1);
2461:   }
2462: }
RegularFileObject[/tmp/EvoSuite_75_1629222880639/com/google/javascript/rhino/Node_75_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_75_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_75_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.common.collect.Iterables",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.common.collect.AbstractMultimap$Values",
132:       "com.google.javascript.rhino.jstype.ProxyObjectType",
133:       "com.google.common.collect.Sets$SetView",
134:       "com.google.common.collect.RegularImmutableAsList",
135:       "com.google.javascript.rhino.jstype.TemplateType",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMultimap$Entries",
190:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
191:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
192:       "com.google.javascript.rhino.jstype.EnumElementType",
193:       "com.google.javascript.rhino.jstype.UnionType",
194:       "com.google.common.base.Objects",
195:       "com.google.javascript.rhino.Node$NumberNode",
196:       "com.google.common.collect.SingletonImmutableList",
197:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
198:       "com.google.common.collect.ImmutableCollection$Builder",
199:       "com.google.javascript.rhino.jstype.StaticSlot",
200:       "com.google.common.collect.Iterators$6",
201:       "com.google.common.collect.BiMap",
202:       "com.google.common.collect.Iterators$7",
203:       "com.google.common.collect.AbstractSetMultimap",
204:       "com.google.common.base.Function",
205:       "com.google.common.collect.ImmutableSet",
206:       "com.google.common.collect.Lists$AbstractListWrapper",
207:       "com.google.common.collect.ImmutableMap",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.Maps$1",
211:       "com.google.javascript.rhino.jstype.EnumType",
212:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.Multimaps$Entries",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
236:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
237:       "com.google.common.collect.ImmutableList",
238:       "com.google.common.collect.SingletonImmutableBiMap",
239:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
240:       "com.google.javascript.rhino.jstype.StringType",
241:       "com.google.javascript.rhino.Node$AbstractPropListItem",
242:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
243:       "com.google.javascript.rhino.jstype.TemplatizedType",
244:       "com.google.javascript.rhino.jstype.Visitor",
245:       "com.google.javascript.rhino.jstype.NoResolvedType",
246:       "com.google.javascript.rhino.jstype.JSTypeNative",
247:       "com.google.javascript.rhino.jstype.AllType",
248:       "com.google.common.collect.Maps",
249:       "com.google.common.collect.SetMultimap",
250:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
251:       "com.google.common.collect.Maps$EntryTransformer",
252:       "com.google.javascript.rhino.JSTypeExpression",
253:       "com.google.common.collect.Iterators$MergingIterator"
254:     );
255:   } 
256: 
257:   private static void resetClasses() {
258:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_75_tmp__ESTest_scaffolding.class.getClassLoader()); 
259: 
260:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
261:       "com.google.javascript.rhino.Node",
262:       "com.google.javascript.rhino.Node$NumberNode",
263:       "com.google.javascript.rhino.Node$StringNode",
264:       "com.google.javascript.rhino.Node$AbstractPropListItem",
265:       "com.google.javascript.rhino.Node$ObjectPropListItem",
266:       "com.google.javascript.rhino.Node$IntPropListItem",
267:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
268:       "com.google.javascript.rhino.Node$AncestorIterable",
269:       "com.google.javascript.rhino.Node$NodeMismatch",
270:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
271:       "com.google.javascript.rhino.Node$SideEffectFlags",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.Token",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.base.Objects",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
352:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.common.collect.AbstractIndexedListIterator",
362:       "com.google.common.collect.Iterators$11",
363:       "com.google.javascript.rhino.Node$AncestorIterable$1",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.InputId",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.javascript.rhino.JSTypeExpression",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.Sets$ImprovedAbstractSet",
375:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
376:       "com.google.common.collect.Hashing",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
378:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
379:       "com.google.common.collect.Platform"
380:     );
381:   }
382: }

[MASTER] 17:54:41.367 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node0);

Node node1 = Node.newString(0, "", 4, 38);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node1);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node_NodeMismatch0);

boolean boolean0 = node_NodeMismatch0.equals("");
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(boolean0);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Set<String> set0 = node1.getDirectives();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNull(set0);

boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(boolean1);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean2 = node1.isVarArgs();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(boolean2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);

boolean boolean3 = node0.isIf();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(boolean3);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);

boolean boolean4 = node1.isVoid();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(boolean4);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

node0.setInputId((InputId) null);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);

node0.setType(46);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertEquals(46, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);

boolean boolean5 = node1.isVar();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(boolean5);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node2 = new Node((-1872), node1, (-264), 0);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertFalse(node2.isThis());
assertFalse(node2.isNull());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertTrue(node2.hasOneChild());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertEquals((-1872), node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node2);

Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeTypeAwareEqualsImpl(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertFalse(node2.isThis());
assertFalse(node2.isNull());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertTrue(node2.hasOneChild());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertEquals((-1872), node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node_NodeMismatch1);
assertNotSame(node_NodeMismatch1, node_NodeMismatch0);

Node node3 = node1.srcrefTree(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getType());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertFalse(node2.isThis());
assertFalse(node2.isNull());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertTrue(node2.hasOneChild());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertEquals((-1872), node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isWhile());
assertFalse(node3.isFor());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isSwitch());
assertFalse(node3.isOr());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isLabelName());
assertFalse(node3.isNew());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isLabel());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isGetElem());
assertEquals(0, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isReturn());
assertFalse(node3.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isString());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isCast());
assertFalse(node3.isInc());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(node3);
assertSame(node1, node3);
assertSame(node3, node1);


[MASTER] 17:54:41.820 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_76_1629222881368/com/google/javascript/rhino/Node_76_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_76_1629222881368/com/google/javascript/rhino/Node_76_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:41.821 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:41.821 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:41.822 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1398
[MASTER] 17:54:41.825 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_76_1629222881368/com/google/javascript/rhino/Node_76_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_76_tmp__ESTest extends Node_76_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(304, 304, 304);
21:       assertFalse(node0.isString());
22:       assertFalse(node0.isSwitch());
23:       assertFalse(node0.isIf());
24:       assertFalse(node0.isDelProp());
25:       assertFalse(node0.isBreak());
26:       assertFalse(node0.isFalse());
27:       assertFalse(node0.isThrow());
28:       assertFalse(node0.isNE());
29:       assertEquals(304, node0.getCharno());
30:       assertFalse(node0.isIn());
31:       assertFalse(node0.isEmpty());
32:       assertFalse(node0.isInc());
33:       assertFalse(node0.isRegExp());
34:       assertFalse(node0.isDefaultCase());
35:       assertFalse(node0.isWith());
36:       assertFalse(node0.isInstanceOf());
37:       assertEquals(0, node0.getChildCount());
38:       assertFalse(node0.isCatch());
39:       assertFalse(node0.isArrayLit());
40:       assertFalse(node0.isGetterDef());
41:       assertFalse(node0.isLabelName());
42:       assertFalse(node0.isNumber());
43:       assertFalse(node0.isStringKey());
44:       assertFalse(node0.isParamList());
45:       assertEquals(1245488, node0.getSourcePosition());
46:       assertFalse(node0.isFor());
47:       assertFalse(node0.isThis());
48:       assertFalse(node0.isHook());
49:       assertFalse(node0.hasOneChild());
50:       assertFalse(node0.isTry());
51:       assertEquals(304, node0.getLineno());
52:       assertFalse(node0.isScript());
53:       assertFalse(node0.isCase());
54:       assertFalse(node0.isWhile());
55:       assertFalse(node0.isDo());
56:       assertFalse(node0.isBlock());
57:       assertFalse(node0.hasMoreThanOneChild());
58:       assertFalse(node0.isContinue());
59:       assertFalse(node0.isCall());
60:       assertFalse(node0.isName());
61:       assertFalse(node0.isNull());
62:       assertFalse(node0.isLabel());
63:       assertFalse(node0.isVar());
64:       assertFalse(node0.isOr());
65:       assertFalse(node0.isAssignAdd());
66:       assertFalse(node0.isNew());
67:       assertFalse(node0.isAdd());
68:       assertEquals(304, node0.getType());
69:       assertFalse(node0.isSetterDef());
70:       assertFalse(node0.isNot());
71:       assertFalse(node0.isFunction());
72:       assertFalse(node0.isTrue());
73:       assertFalse(node0.isDebugger());
74:       assertFalse(node0.isObjectLit());
75:       assertFalse(node0.isAnd());
76:       assertFalse(node0.isExprResult());
77:       assertFalse(node0.isVoid());
78:       assertFalse(node0.isCast());
79:       assertFalse(node0.isGetElem());
80:       assertFalse(node0.hasChildren());
81:       assertFalse(node0.isDec());
82:       assertFalse(node0.isAssign());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.isComma());
85:       assertFalse(node0.isReturn());
86:       assertFalse(node0.isGetProp());
87:       assertEquals(1, Node.DECR_FLAG);
88:       assertEquals(30, Node.VAR_ARGS_NAME);
89:       assertEquals(49, Node.DIRECT_EVAL);
90:       assertEquals(57, Node.LAST_PROP);
91:       assertEquals(15, Node.NO_SIDE_EFFECTS);
92:       assertEquals(32, Node.INCRDECR_PROP);
93:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
94:       assertEquals(2, Node.POST_FLAG);
95:       assertEquals(12, Node.COLUMN_BITS);
96:       assertEquals(47, Node.IS_DISPATCHER);
97:       assertEquals(29, Node.JSDOC_INFO_PROP);
98:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
99:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
101:       assertEquals(37, Node.OPT_ARG_NAME);
102:       assertEquals(39, Node.EMPTY_BLOCK);
103:       assertEquals(53, Node.INPUT_ID);
104:       assertEquals(48, Node.DIRECTIVES);
105:       assertEquals(52, Node.LENGTH);
106:       assertEquals(8, Node.FLAG_NO_THROWS);
107:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
108:       assertEquals(56, Node.CHANGE_TIME);
109:       assertEquals(36, Node.QUOTED_PROP);
110:       assertEquals(57, Node.REFLECTED_OBJECT);
111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
112:       assertEquals(55, Node.INFERRED_FUNCTION);
113:       assertEquals(4095, Node.COLUMN_MASK);
114:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
116:       assertEquals(50, Node.FREE_CALL);
117:       assertEquals(40, Node.ORIGINALNAME_PROP);
118:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
119:       assertEquals(54, Node.SLASH_V);
120:       assertEquals(43, Node.IS_CONSTANT_NAME);
121:       assertEquals(51, Node.STATIC_SOURCE_FILE);
122:       assertEquals(46, Node.IS_NAMESPACE);
123:       assertNotNull(node0);
124:       
125:       node0.setSourceFileForTesting("ad$l5a6Tb6");
126:       assertFalse(node0.isString());
127:       assertFalse(node0.isSwitch());
128:       assertFalse(node0.isIf());
129:       assertFalse(node0.isDelProp());
130:       assertFalse(node0.isBreak());
131:       assertFalse(node0.isFalse());
132:       assertFalse(node0.isThrow());
133:       assertFalse(node0.isNE());
134:       assertEquals(304, node0.getCharno());
135:       assertFalse(node0.isIn());
136:       assertFalse(node0.isEmpty());
137:       assertFalse(node0.isInc());
138:       assertFalse(node0.isRegExp());
139:       assertFalse(node0.isDefaultCase());
140:       assertFalse(node0.isWith());
141:       assertFalse(node0.isInstanceOf());
142:       assertEquals(0, node0.getChildCount());
143:       assertFalse(node0.isCatch());
144:       assertFalse(node0.isArrayLit());
145:       assertFalse(node0.isGetterDef());
146:       assertFalse(node0.isLabelName());
147:       assertFalse(node0.isNumber());
148:       assertFalse(node0.isStringKey());
149:       assertFalse(node0.isParamList());
150:       assertEquals(1245488, node0.getSourcePosition());
151:       assertFalse(node0.isFor());
152:       assertFalse(node0.isThis());
153:       assertFalse(node0.isHook());
154:       assertFalse(node0.hasOneChild());
155:       assertFalse(node0.isTry());
156:       assertEquals(304, node0.getLineno());
157:       assertFalse(node0.isScript());
158:       assertFalse(node0.isCase());
159:       assertFalse(node0.isWhile());
160:       assertFalse(node0.isDo());
161:       assertFalse(node0.isBlock());
162:       assertFalse(node0.hasMoreThanOneChild());
163:       assertFalse(node0.isContinue());
164:       assertFalse(node0.isCall());
165:       assertFalse(node0.isName());
166:       assertFalse(node0.isNull());
167:       assertFalse(node0.isLabel());
168:       assertFalse(node0.isVar());
169:       assertFalse(node0.isOr());
170:       assertFalse(node0.isAssignAdd());
171:       assertFalse(node0.isNew());
172:       assertFalse(node0.isAdd());
173:       assertEquals(304, node0.getType());
174:       assertFalse(node0.isSetterDef());
175:       assertFalse(node0.isNot());
176:       assertFalse(node0.isFunction());
177:       assertFalse(node0.isTrue());
178:       assertFalse(node0.isDebugger());
179:       assertFalse(node0.isObjectLit());
180:       assertFalse(node0.isAnd());
181:       assertFalse(node0.isExprResult());
182:       assertFalse(node0.isVoid());
183:       assertFalse(node0.isCast());
184:       assertFalse(node0.isGetElem());
185:       assertFalse(node0.hasChildren());
186:       assertFalse(node0.isDec());
187:       assertFalse(node0.isAssign());
188:       assertFalse(node0.isTypeOf());
189:       assertFalse(node0.isComma());
190:       assertFalse(node0.isReturn());
191:       assertFalse(node0.isGetProp());
192:       assertEquals(1, Node.DECR_FLAG);
193:       assertEquals(30, Node.VAR_ARGS_NAME);
194:       assertEquals(49, Node.DIRECT_EVAL);
195:       assertEquals(57, Node.LAST_PROP);
196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
197:       assertEquals(32, Node.INCRDECR_PROP);
198:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
199:       assertEquals(2, Node.POST_FLAG);
200:       assertEquals(12, Node.COLUMN_BITS);
201:       assertEquals(47, Node.IS_DISPATCHER);
202:       assertEquals(29, Node.JSDOC_INFO_PROP);
203:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
204:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
205:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
206:       assertEquals(37, Node.OPT_ARG_NAME);
207:       assertEquals(39, Node.EMPTY_BLOCK);
208:       assertEquals(53, Node.INPUT_ID);
209:       assertEquals(48, Node.DIRECTIVES);
210:       assertEquals(52, Node.LENGTH);
211:       assertEquals(8, Node.FLAG_NO_THROWS);
212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
213:       assertEquals(56, Node.CHANGE_TIME);
214:       assertEquals(36, Node.QUOTED_PROP);
215:       assertEquals(57, Node.REFLECTED_OBJECT);
216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
217:       assertEquals(55, Node.INFERRED_FUNCTION);
218:       assertEquals(4095, Node.COLUMN_MASK);
219:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
220:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
221:       assertEquals(50, Node.FREE_CALL);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
224:       assertEquals(54, Node.SLASH_V);
225:       assertEquals(43, Node.IS_CONSTANT_NAME);
226:       assertEquals(51, Node.STATIC_SOURCE_FILE);
227:       assertEquals(46, Node.IS_NAMESPACE);
228:       
229:       Node node1 = new Node(1, node0, 40, 41);
230:       assertFalse(node1.equals((Object)node0));
231:       assertFalse(node0.isString());
232:       assertFalse(node0.isSwitch());
233:       assertFalse(node0.isIf());
234:       assertFalse(node0.isDelProp());
235:       assertFalse(node0.isBreak());
236:       assertFalse(node0.isFalse());
237:       assertFalse(node0.isThrow());
238:       assertFalse(node0.isNE());
239:       assertEquals(304, node0.getCharno());
240:       assertFalse(node0.isIn());
241:       assertFalse(node0.isEmpty());
242:       assertFalse(node0.isInc());
243:       assertFalse(node0.isRegExp());
244:       assertFalse(node0.isDefaultCase());
245:       assertFalse(node0.isWith());
246:       assertFalse(node0.isInstanceOf());
247:       assertEquals(0, node0.getChildCount());
248:       assertFalse(node0.isCatch());
249:       assertFalse(node0.isArrayLit());
250:       assertFalse(node0.isGetterDef());
251:       assertFalse(node0.isLabelName());
252:       assertFalse(node0.isNumber());
253:       assertFalse(node0.isStringKey());
254:       assertFalse(node0.isParamList());
255:       assertEquals(1245488, node0.getSourcePosition());
256:       assertFalse(node0.isFor());
257:       assertFalse(node0.isThis());
258:       assertFalse(node0.isHook());
259:       assertFalse(node0.hasOneChild());
260:       assertFalse(node0.isTry());
261:       assertEquals(304, node0.getLineno());
262:       assertFalse(node0.isScript());
263:       assertFalse(node0.isCase());
264:       assertFalse(node0.isWhile());
265:       assertFalse(node0.isDo());
266:       assertFalse(node0.isBlock());
267:       assertFalse(node0.hasMoreThanOneChild());
268:       assertFalse(node0.isContinue());
269:       assertFalse(node0.isCall());
270:       assertFalse(node0.isName());
271:       assertFalse(node0.isNull());
272:       assertFalse(node0.isLabel());
273:       assertFalse(node0.isVar());
274:       assertFalse(node0.isOr());
275:       assertFalse(node0.isAssignAdd());
276:       assertFalse(node0.isNew());
277:       assertFalse(node0.isAdd());
278:       assertEquals(304, node0.getType());
279:       assertFalse(node0.isSetterDef());
280:       assertFalse(node0.isNot());
281:       assertFalse(node0.isFunction());
282:       assertFalse(node0.isTrue());
283:       assertFalse(node0.isDebugger());
284:       assertFalse(node0.isObjectLit());
285:       assertFalse(node0.isAnd());
286:       assertFalse(node0.isExprResult());
287:       assertFalse(node0.isVoid());
288:       assertFalse(node0.isCast());
289:       assertFalse(node0.isGetElem());
290:       assertFalse(node0.hasChildren());
291:       assertFalse(node0.isDec());
292:       assertFalse(node0.isAssign());
293:       assertFalse(node0.isTypeOf());
294:       assertFalse(node0.isComma());
295:       assertFalse(node0.isReturn());
296:       assertFalse(node0.isGetProp());
297:       assertFalse(node1.isAdd());
298:       assertFalse(node1.isNew());
299:       assertFalse(node1.isBlock());
300:       assertFalse(node1.isName());
301:       assertFalse(node1.isContinue());
302:       assertFalse(node1.isCall());
303:       assertFalse(node1.isStringKey());
304:       assertFalse(node1.isLabel());
305:       assertFalse(node1.isAssignAdd());
306:       assertFalse(node1.isNull());
307:       assertFalse(node1.isOr());
308:       assertFalse(node1.isVar());
309:       assertFalse(node1.isSetterDef());
310:       assertFalse(node1.isDefaultCase());
311:       assertFalse(node1.isDo());
312:       assertFalse(node1.isExprResult());
313:       assertFalse(node1.isTrue());
314:       assertFalse(node1.isDebugger());
315:       assertFalse(node1.isFunction());
316:       assertFalse(node1.isNot());
317:       assertFalse(node1.isGetElem());
318:       assertFalse(node1.isAnd());
319:       assertFalse(node1.isCast());
320:       assertFalse(node1.isVoid());
321:       assertFalse(node1.isDelProp());
322:       assertFalse(node1.isReturn());
323:       assertFalse(node1.isGetProp());
324:       assertFalse(node1.isTypeOf());
325:       assertFalse(node1.isObjectLit());
326:       assertFalse(node1.isDec());
327:       assertFalse(node1.isComma());
328:       assertFalse(node1.isAssign());
329:       assertTrue(node1.hasOneChild());
330:       assertFalse(node1.isWhile());
331:       assertFalse(node1.isString());
332:       assertFalse(node1.isInc());
333:       assertFalse(node1.isHook());
334:       assertFalse(node1.isFalse());
335:       assertFalse(node1.isSwitch());
336:       assertFalse(node1.isBreak());
337:       assertFalse(node1.isNE());
338:       assertEquals(163881, node1.getSourcePosition());
339:       assertFalse(node1.isIn());
340:       assertFalse(node1.isEmpty());
341:       assertFalse(node1.isThrow());
342:       assertEquals(1, node1.getType());
343:       assertFalse(node1.isRegExp());
344:       assertFalse(node1.isWith());
345:       assertFalse(node1.isCatch());
346:       assertFalse(node1.isArrayLit());
347:       assertEquals(41, node1.getCharno());
348:       assertFalse(node1.isIf());
349:       assertFalse(node1.isLabelName());
350:       assertFalse(node1.isParamList());
351:       assertFalse(node1.isInstanceOf());
352:       assertTrue(node1.hasChildren());
353:       assertFalse(node1.hasMoreThanOneChild());
354:       assertFalse(node1.isThis());
355:       assertFalse(node1.isNumber());
356:       assertFalse(node1.isGetterDef());
357:       assertEquals(1, node1.getChildCount());
358:       assertFalse(node1.isFor());
359:       assertFalse(node1.isCase());
360:       assertEquals(40, node1.getLineno());
361:       assertFalse(node1.isScript());
362:       assertFalse(node1.isTry());
363:       assertEquals(1, Node.DECR_FLAG);
364:       assertEquals(30, Node.VAR_ARGS_NAME);
365:       assertEquals(49, Node.DIRECT_EVAL);
366:       assertEquals(57, Node.LAST_PROP);
367:       assertEquals(15, Node.NO_SIDE_EFFECTS);
368:       assertEquals(32, Node.INCRDECR_PROP);
369:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
370:       assertEquals(2, Node.POST_FLAG);
371:       assertEquals(12, Node.COLUMN_BITS);
372:       assertEquals(47, Node.IS_DISPATCHER);
373:       assertEquals(29, Node.JSDOC_INFO_PROP);
374:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
375:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
376:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
377:       assertEquals(37, Node.OPT_ARG_NAME);
378:       assertEquals(39, Node.EMPTY_BLOCK);
379:       assertEquals(53, Node.INPUT_ID);
380:       assertEquals(48, Node.DIRECTIVES);
381:       assertEquals(52, Node.LENGTH);
382:       assertEquals(8, Node.FLAG_NO_THROWS);
383:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
384:       assertEquals(56, Node.CHANGE_TIME);
385:       assertEquals(36, Node.QUOTED_PROP);
386:       assertEquals(57, Node.REFLECTED_OBJECT);
387:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
388:       assertEquals(55, Node.INFERRED_FUNCTION);
389:       assertEquals(4095, Node.COLUMN_MASK);
390:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
391:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
392:       assertEquals(50, Node.FREE_CALL);
393:       assertEquals(40, Node.ORIGINALNAME_PROP);
394:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
395:       assertEquals(54, Node.SLASH_V);
396:       assertEquals(43, Node.IS_CONSTANT_NAME);
397:       assertEquals(51, Node.STATIC_SOURCE_FILE);
398:       assertEquals(46, Node.IS_NAMESPACE);
399:       assertEquals(15, Node.NO_SIDE_EFFECTS);
400:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
401:       assertEquals(54, Node.SLASH_V);
402:       assertEquals(57, Node.LAST_PROP);
403:       assertEquals(1, Node.DECR_FLAG);
404:       assertEquals(49, Node.DIRECT_EVAL);
405:       assertEquals(40, Node.ORIGINALNAME_PROP);
406:       assertEquals(12, Node.COLUMN_BITS);
407:       assertEquals(30, Node.VAR_ARGS_NAME);
408:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
409:       assertEquals(8, Node.FLAG_NO_THROWS);
410:       assertEquals(39, Node.EMPTY_BLOCK);
411:       assertEquals(37, Node.OPT_ARG_NAME);
412:       assertEquals(56, Node.CHANGE_TIME);
413:       assertEquals(47, Node.IS_DISPATCHER);
414:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
415:       assertEquals(48, Node.DIRECTIVES);
416:       assertEquals(55, Node.INFERRED_FUNCTION);
417:       assertEquals(57, Node.REFLECTED_OBJECT);
418:       assertEquals(29, Node.JSDOC_INFO_PROP);
419:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
420:       assertEquals(52, Node.LENGTH);
421:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
423:       assertEquals(36, Node.QUOTED_PROP);
424:       assertEquals(43, Node.IS_CONSTANT_NAME);
425:       assertEquals(53, Node.INPUT_ID);
426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
427:       assertEquals(4095, Node.COLUMN_MASK);
428:       assertEquals(2, Node.POST_FLAG);
429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
430:       assertEquals(32, Node.INCRDECR_PROP);
431:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
432:       assertEquals(46, Node.IS_NAMESPACE);
433:       assertEquals(51, Node.STATIC_SOURCE_FILE);
434:       assertEquals(50, Node.FREE_CALL);
435:       assertNotNull(node1);
436:       
437:       Node node2 = node1.cloneNode();
438:       assertFalse(node0.equals((Object)node1));
439:       assertFalse(node1.equals((Object)node0));
440:       assertFalse(node2.equals((Object)node0));
441:       assertFalse(node2.equals((Object)node1));
442:       assertFalse(node0.isString());
443:       assertFalse(node0.isSwitch());
444:       assertFalse(node0.isIf());
445:       assertFalse(node0.isDelProp());
446:       assertFalse(node0.isBreak());
447:       assertFalse(node0.isFalse());
448:       assertFalse(node0.isThrow());
449:       assertFalse(node0.isNE());
450:       assertEquals(304, node0.getCharno());
451:       assertFalse(node0.isIn());
452:       assertFalse(node0.isEmpty());
453:       assertFalse(node0.isInc());
454:       assertFalse(node0.isRegExp());
455:       assertFalse(node0.isDefaultCase());
456:       assertFalse(node0.isWith());
457:       assertFalse(node0.isInstanceOf());
458:       assertEquals(0, node0.getChildCount());
459:       assertFalse(node0.isCatch());
460:       assertFalse(node0.isArrayLit());
461:       assertFalse(node0.isGetterDef());
462:       assertFalse(node0.isLabelName());
463:       assertFalse(node0.isNumber());
464:       assertFalse(node0.isStringKey());
465:       assertFalse(node0.isParamList());
466:       assertEquals(1245488, node0.getSourcePosition());
467:       assertFalse(node0.isFor());
468:       assertFalse(node0.isThis());
469:       assertFalse(node0.isHook());
470:       assertFalse(node0.hasOneChild());
471:       assertFalse(node0.isTry());
472:       assertEquals(304, node0.getLineno());
473:       assertFalse(node0.isScript());
474:       assertFalse(node0.isCase());
475:       assertFalse(node0.isWhile());
476:       assertFalse(node0.isDo());
477:       assertFalse(node0.isBlock());
478:       assertFalse(node0.hasMoreThanOneChild());
479:       assertFalse(node0.isContinue());
480:       assertFalse(node0.isCall());
481:       assertFalse(node0.isName());
482:       assertFalse(node0.isNull());
483:       assertFalse(node0.isLabel());
484:       assertFalse(node0.isVar());
485:       assertFalse(node0.isOr());
486:       assertFalse(node0.isAssignAdd());
487:       assertFalse(node0.isNew());
488:       assertFalse(node0.isAdd());
489:       assertEquals(304, node0.getType());
490:       assertFalse(node0.isSetterDef());
491:       assertFalse(node0.isNot());
492:       assertFalse(node0.isFunction());
493:       assertFalse(node0.isTrue());
494:       assertFalse(node0.isDebugger());
495:       assertFalse(node0.isObjectLit());
496:       assertFalse(node0.isAnd());
497:       assertFalse(node0.isExprResult());
498:       assertFalse(node0.isVoid());
499:       assertFalse(node0.isCast());
500:       assertFalse(node0.isGetElem());
501:       assertFalse(node0.hasChildren());
502:       assertFalse(node0.isDec());
503:       assertFalse(node0.isAssign());
504:       assertFalse(node0.isTypeOf());
505:       assertFalse(node0.isComma());
506:       assertFalse(node0.isReturn());
507:       assertFalse(node0.isGetProp());
508:       assertFalse(node1.isAdd());
509:       assertFalse(node1.isNew());
510:       assertFalse(node1.isBlock());
511:       assertFalse(node1.isName());
512:       assertFalse(node1.isContinue());
513:       assertFalse(node1.isCall());
514:       assertFalse(node1.isStringKey());
515:       assertFalse(node1.isLabel());
516:       assertFalse(node1.isAssignAdd());
517:       assertFalse(node1.isNull());
518:       assertFalse(node1.isOr());
519:       assertFalse(node1.isVar());
520:       assertFalse(node1.isSetterDef());
521:       assertFalse(node1.isDefaultCase());
522:       assertFalse(node1.isDo());
523:       assertFalse(node1.isExprResult());
524:       assertFalse(node1.isTrue());
525:       assertFalse(node1.isDebugger());
526:       assertFalse(node1.isFunction());
527:       assertFalse(node1.isNot());
528:       assertFalse(node1.isGetElem());
529:       assertFalse(node1.isAnd());
530:       assertFalse(node1.isCast());
531:       assertFalse(node1.isVoid());
532:       assertFalse(node1.isDelProp());
533:       assertFalse(node1.isReturn());
534:       assertFalse(node1.isGetProp());
535:       assertFalse(node1.isTypeOf());
536:       assertFalse(node1.isObjectLit());
537:       assertFalse(node1.isDec());
538:       assertFalse(node1.isComma());
539:       assertFalse(node1.isAssign());
540:       assertTrue(node1.hasOneChild());
541:       assertFalse(node1.isWhile());
542:       assertFalse(node1.isString());
543:       assertFalse(node1.isInc());
544:       assertFalse(node1.isHook());
545:       assertFalse(node1.isFalse());
546:       assertFalse(node1.isSwitch());
547:       assertFalse(node1.isBreak());
548:       assertFalse(node1.isNE());
549:       assertEquals(163881, node1.getSourcePosition());
550:       assertFalse(node1.isIn());
551:       assertFalse(node1.isEmpty());
552:       assertFalse(node1.isThrow());
553:       assertEquals(1, node1.getType());
554:       assertFalse(node1.isRegExp());
555:       assertFalse(node1.isWith());
556:       assertFalse(node1.isCatch());
557:       assertFalse(node1.isArrayLit());
558:       assertEquals(41, node1.getCharno());
559:       assertFalse(node1.isIf());
560:       assertFalse(node1.isLabelName());
561:       assertFalse(node1.isParamList());
562:       assertFalse(node1.isInstanceOf());
563:       assertTrue(node1.hasChildren());
564:       assertFalse(node1.hasMoreThanOneChild());
565:       assertFalse(node1.isThis());
566:       assertFalse(node1.isNumber());
567:       assertFalse(node1.isGetterDef());
568:       assertEquals(1, node1.getChildCount());
569:       assertFalse(node1.isFor());
570:       assertFalse(node1.isCase());
571:       assertEquals(40, node1.getLineno());
572:       assertFalse(node1.isScript());
573:       assertFalse(node1.isTry());
574:       assertFalse(node2.isInc());
575:       assertFalse(node2.isHook());
576:       assertFalse(node2.isSwitch());
577:       assertFalse(node2.isCase());
578:       assertFalse(node2.isIn());
579:       assertFalse(node2.isString());
580:       assertEquals(163881, node2.getSourcePosition());
581:       assertFalse(node2.isGetProp());
582:       assertFalse(node2.isThis());
583:       assertFalse(node2.isComma());
584:       assertFalse(node2.isIf());
585:       assertFalse(node2.isDelProp());
586:       assertFalse(node2.isNE());
587:       assertFalse(node2.isFor());
588:       assertFalse(node2.isBreak());
589:       assertFalse(node2.isWith());
590:       assertEquals(41, node2.getCharno());
591:       assertFalse(node2.isInstanceOf());
592:       assertFalse(node2.isFunction());
593:       assertFalse(node2.isDebugger());
594:       assertFalse(node2.isObjectLit());
595:       assertFalse(node2.isNot());
596:       assertFalse(node2.isSetterDef());
597:       assertFalse(node2.isAnd());
598:       assertFalse(node2.isContinue());
599:       assertFalse(node2.isThrow());
600:       assertFalse(node2.isFalse());
601:       assertFalse(node2.isCast());
602:       assertFalse(node2.isAdd());
603:       assertFalse(node2.isBlock());
604:       assertFalse(node2.isNew());
605:       assertFalse(node2.isVar());
606:       assertFalse(node2.isWhile());
607:       assertFalse(node2.isDo());
608:       assertFalse(node2.isOr());
609:       assertFalse(node2.hasChildren());
610:       assertFalse(node2.isNull());
611:       assertFalse(node2.isReturn());
612:       assertFalse(node2.isCall());
613:       assertFalse(node2.isName());
614:       assertFalse(node2.isGetElem());
615:       assertEquals(40, node2.getLineno());
616:       assertFalse(node2.isAssign());
617:       assertFalse(node2.isDec());
618:       assertFalse(node2.isRegExp());
619:       assertFalse(node2.isTypeOf());
620:       assertFalse(node2.hasMoreThanOneChild());
621:       assertFalse(node2.isCatch());
622:       assertEquals(1, node2.getType());
623:       assertFalse(node2.isVoid());
624:       assertFalse(node2.isExprResult());
625:       assertFalse(node2.isTrue());
626:       assertFalse(node2.isTry());
627:       assertFalse(node2.isDefaultCase());
628:       assertFalse(node2.hasOneChild());
629:       assertFalse(node2.isGetterDef());
630:       assertFalse(node2.isNumber());
631:       assertFalse(node2.isScript());
632:       assertFalse(node2.isEmpty());
633:       assertFalse(node2.isLabel());
634:       assertFalse(node2.isAssignAdd());
635:       assertFalse(node2.isStringKey());
636:       assertFalse(node2.isParamList());
637:       assertFalse(node2.isLabelName());
638:       assertFalse(node2.isArrayLit());
639:       assertEquals(0, node2.getChildCount());
640:       assertEquals(1, Node.DECR_FLAG);
641:       assertEquals(30, Node.VAR_ARGS_NAME);
642:       assertEquals(49, Node.DIRECT_EVAL);
643:       assertEquals(57, Node.LAST_PROP);
644:       assertEquals(15, Node.NO_SIDE_EFFECTS);
645:       assertEquals(32, Node.INCRDECR_PROP);
646:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
647:       assertEquals(2, Node.POST_FLAG);
648:       assertEquals(12, Node.COLUMN_BITS);
649:       assertEquals(47, Node.IS_DISPATCHER);
650:       assertEquals(29, Node.JSDOC_INFO_PROP);
651:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
652:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
653:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
654:       assertEquals(37, Node.OPT_ARG_NAME);
655:       assertEquals(39, Node.EMPTY_BLOCK);
656:       assertEquals(53, Node.INPUT_ID);
657:       assertEquals(48, Node.DIRECTIVES);
658:       assertEquals(52, Node.LENGTH);
659:       assertEquals(8, Node.FLAG_NO_THROWS);
660:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
661:       assertEquals(56, Node.CHANGE_TIME);
662:       assertEquals(36, Node.QUOTED_PROP);
663:       assertEquals(57, Node.REFLECTED_OBJECT);
664:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
665:       assertEquals(55, Node.INFERRED_FUNCTION);
666:       assertEquals(4095, Node.COLUMN_MASK);
667:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
668:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
669:       assertEquals(50, Node.FREE_CALL);
670:       assertEquals(40, Node.ORIGINALNAME_PROP);
671:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
672:       assertEquals(54, Node.SLASH_V);
673:       assertEquals(43, Node.IS_CONSTANT_NAME);
674:       assertEquals(51, Node.STATIC_SOURCE_FILE);
675:       assertEquals(46, Node.IS_NAMESPACE);
676:       assertEquals(15, Node.NO_SIDE_EFFECTS);
677:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
678:       assertEquals(54, Node.SLASH_V);
679:       assertEquals(57, Node.LAST_PROP);
680:       assertEquals(1, Node.DECR_FLAG);
681:       assertEquals(49, Node.DIRECT_EVAL);
682:       assertEquals(40, Node.ORIGINALNAME_PROP);
683:       assertEquals(12, Node.COLUMN_BITS);
684:       assertEquals(30, Node.VAR_ARGS_NAME);
685:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
686:       assertEquals(8, Node.FLAG_NO_THROWS);
687:       assertEquals(39, Node.EMPTY_BLOCK);
688:       assertEquals(37, Node.OPT_ARG_NAME);
689:       assertEquals(56, Node.CHANGE_TIME);
690:       assertEquals(47, Node.IS_DISPATCHER);
691:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
692:       assertEquals(48, Node.DIRECTIVES);
693:       assertEquals(55, Node.INFERRED_FUNCTION);
694:       assertEquals(57, Node.REFLECTED_OBJECT);
695:       assertEquals(29, Node.JSDOC_INFO_PROP);
696:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
697:       assertEquals(52, Node.LENGTH);
698:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
699:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
700:       assertEquals(36, Node.QUOTED_PROP);
701:       assertEquals(43, Node.IS_CONSTANT_NAME);
702:       assertEquals(53, Node.INPUT_ID);
703:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
704:       assertEquals(4095, Node.COLUMN_MASK);
705:       assertEquals(2, Node.POST_FLAG);
706:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
707:       assertEquals(32, Node.INCRDECR_PROP);
708:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
709:       assertEquals(46, Node.IS_NAMESPACE);
710:       assertEquals(51, Node.STATIC_SOURCE_FILE);
711:       assertEquals(50, Node.FREE_CALL);
712:       assertEquals(15, Node.NO_SIDE_EFFECTS);
713:       assertEquals(57, Node.LAST_PROP);
714:       assertEquals(30, Node.VAR_ARGS_NAME);
715:       assertEquals(52, Node.LENGTH);
716:       assertEquals(51, Node.STATIC_SOURCE_FILE);
717:       assertEquals(57, Node.REFLECTED_OBJECT);
718:       assertEquals(49, Node.DIRECT_EVAL);
719:       assertEquals(46, Node.IS_NAMESPACE);
720:       assertEquals(54, Node.SLASH_V);
721:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
722:       assertEquals(37, Node.OPT_ARG_NAME);
723:       assertEquals(48, Node.DIRECTIVES);
724:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
725:       assertEquals(50, Node.FREE_CALL);
726:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
727:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
728:       assertEquals(12, Node.COLUMN_BITS);
729:       assertEquals(4095, Node.COLUMN_MASK);
730:       assertEquals(32, Node.INCRDECR_PROP);
731:       assertEquals(1, Node.DECR_FLAG);
732:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
733:       assertEquals(43, Node.IS_CONSTANT_NAME);
734:       assertEquals(36, Node.QUOTED_PROP);
735:       assertEquals(53, Node.INPUT_ID);
736:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
737:       assertEquals(55, Node.INFERRED_FUNCTION);
738:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
739:       assertEquals(56, Node.CHANGE_TIME);
740:       assertEquals(8, Node.FLAG_NO_THROWS);
741:       assertEquals(39, Node.EMPTY_BLOCK);
742:       assertEquals(47, Node.IS_DISPATCHER);
743:       assertEquals(2, Node.POST_FLAG);
744:       assertEquals(29, Node.JSDOC_INFO_PROP);
745:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
746:       assertEquals(40, Node.ORIGINALNAME_PROP);
747:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
748:       assertNotNull(node2);
749:       assertNotSame(node0, node2);
750:       assertNotSame(node0, node1);
751:       assertNotSame(node1, node0);
752:       assertNotSame(node1, node2);
753:       assertNotSame(node2, node0);
754:       assertNotSame(node2, node1);
755:       
756:       boolean boolean0 = node1.isUnscopedQualifiedName();
757:       assertFalse(node0.equals((Object)node2));
758:       assertFalse(node0.equals((Object)node1));
759:       assertFalse(node1.equals((Object)node0));
760:       assertFalse(node1.equals((Object)node2));
761:       assertFalse(node0.isString());
762:       assertFalse(node0.isSwitch());
763:       assertFalse(node0.isIf());
764:       assertFalse(node0.isDelProp());
765:       assertFalse(node0.isBreak());
766:       assertFalse(node0.isFalse());
767:       assertFalse(node0.isThrow());
768:       assertFalse(node0.isNE());
769:       assertEquals(304, node0.getCharno());
770:       assertFalse(node0.isIn());
771:       assertFalse(node0.isEmpty());
772:       assertFalse(node0.isInc());
773:       assertFalse(node0.isRegExp());
774:       assertFalse(node0.isDefaultCase());
775:       assertFalse(node0.isWith());
776:       assertFalse(node0.isInstanceOf());
777:       assertEquals(0, node0.getChildCount());
778:       assertFalse(node0.isCatch());
779:       assertFalse(node0.isArrayLit());
780:       assertFalse(node0.isGetterDef());
781:       assertFalse(node0.isLabelName());
782:       assertFalse(node0.isNumber());
783:       assertFalse(node0.isStringKey());
784:       assertFalse(node0.isParamList());
785:       assertEquals(1245488, node0.getSourcePosition());
786:       assertFalse(node0.isFor());
787:       assertFalse(node0.isThis());
788:       assertFalse(node0.isHook());
789:       assertFalse(node0.hasOneChild());
790:       assertFalse(node0.isTry());
791:       assertEquals(304, node0.getLineno());
792:       assertFalse(node0.isScript());
793:       assertFalse(node0.isCase());
794:       assertFalse(node0.isWhile());
795:       assertFalse(node0.isDo());
796:       assertFalse(node0.isBlock());
797:       assertFalse(node0.hasMoreThanOneChild());
798:       assertFalse(node0.isContinue());
799:       assertFalse(node0.isCall());
800:       assertFalse(node0.isName());
801:       assertFalse(node0.isNull());
802:       assertFalse(node0.isLabel());
803:       assertFalse(node0.isVar());
804:       assertFalse(node0.isOr());
805:       assertFalse(node0.isAssignAdd());
806:       assertFalse(node0.isNew());
807:       assertFalse(node0.isAdd());
808:       assertEquals(304, node0.getType());
809:       assertFalse(node0.isSetterDef());
810:       assertFalse(node0.isNot());
811:       assertFalse(node0.isFunction());
812:       assertFalse(node0.isTrue());
813:       assertFalse(node0.isDebugger());
814:       assertFalse(node0.isObjectLit());
815:       assertFalse(node0.isAnd());
816:       assertFalse(node0.isExprResult());
817:       assertFalse(node0.isVoid());
818:       assertFalse(node0.isCast());
819:       assertFalse(node0.isGetElem());
820:       assertFalse(node0.hasChildren());
821:       assertFalse(node0.isDec());
822:       assertFalse(node0.isAssign());
823:       assertFalse(node0.isTypeOf());
824:       assertFalse(node0.isComma());
825:       assertFalse(node0.isReturn());
826:       assertFalse(node0.isGetProp());
827:       assertFalse(node1.isAdd());
828:       assertFalse(node1.isNew());
829:       assertFalse(node1.isBlock());
830:       assertFalse(node1.isName());
831:       assertFalse(node1.isContinue());
832:       assertFalse(node1.isCall());
833:       assertFalse(node1.isStringKey());
834:       assertFalse(node1.isLabel());
835:       assertFalse(node1.isAssignAdd());
836:       assertFalse(node1.isNull());
837:       assertFalse(node1.isOr());
838:       assertFalse(node1.isVar());
839:       assertFalse(node1.isSetterDef());
840:       assertFalse(node1.isDefaultCase());
841:       assertFalse(node1.isDo());
842:       assertFalse(node1.isExprResult());
843:       assertFalse(node1.isTrue());
844:       assertFalse(node1.isDebugger());
845:       assertFalse(node1.isFunction());
846:       assertFalse(node1.isNot());
847:       assertFalse(node1.isGetElem());
848:       assertFalse(node1.isAnd());
849:       assertFalse(node1.isCast());
850:       assertFalse(node1.isVoid());
851:       assertFalse(node1.isDelProp());
852:       assertFalse(node1.isReturn());
853:       assertFalse(node1.isGetProp());
854:       assertFalse(node1.isTypeOf());
855:       assertFalse(node1.isObjectLit());
856:       assertFalse(node1.isDec());
857:       assertFalse(node1.isComma());
858:       assertFalse(node1.isAssign());
859:       assertTrue(node1.hasOneChild());
860:       assertFalse(node1.isWhile());
861:       assertFalse(node1.isString());
862:       assertFalse(node1.isInc());
863:       assertFalse(node1.isHook());
864:       assertFalse(node1.isFalse());
865:       assertFalse(node1.isSwitch());
866:       assertFalse(node1.isBreak());
867:       assertFalse(node1.isNE());
868:       assertEquals(163881, node1.getSourcePosition());
869:       assertFalse(node1.isIn());
870:       assertFalse(node1.isEmpty());
871:       assertFalse(node1.isThrow());
872:       assertEquals(1, node1.getType());
873:       assertFalse(node1.isRegExp());
874:       assertFalse(node1.isWith());
875:       assertFalse(node1.isCatch());
876:       assertFalse(node1.isArrayLit());
877:       assertEquals(41, node1.getCharno());
878:       assertFalse(node1.isIf());
879:       assertFalse(node1.isLabelName());
880:       assertFalse(node1.isParamList());
881:       assertFalse(node1.isInstanceOf());
882:       assertTrue(node1.hasChildren());
883:       assertFalse(node1.hasMoreThanOneChild());
884:       assertFalse(node1.isThis());
885:       assertFalse(node1.isNumber());
886:       assertFalse(node1.isGetterDef());
887:       assertEquals(1, node1.getChildCount());
888:       assertFalse(node1.isFor());
889:       assertFalse(node1.isCase());
890:       assertEquals(40, node1.getLineno());
891:       assertFalse(node1.isScript());
892:       assertFalse(node1.isTry());
893:       assertFalse(boolean0);
894:       assertEquals(1, Node.DECR_FLAG);
895:       assertEquals(30, Node.VAR_ARGS_NAME);
896:       assertEquals(49, Node.DIRECT_EVAL);
897:       assertEquals(57, Node.LAST_PROP);
898:       assertEquals(15, Node.NO_SIDE_EFFECTS);
899:       assertEquals(32, Node.INCRDECR_PROP);
900:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
901:       assertEquals(2, Node.POST_FLAG);
902:       assertEquals(12, Node.COLUMN_BITS);
903:       assertEquals(47, Node.IS_DISPATCHER);
904:       assertEquals(29, Node.JSDOC_INFO_PROP);
905:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
906:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
907:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
908:       assertEquals(37, Node.OPT_ARG_NAME);
909:       assertEquals(39, Node.EMPTY_BLOCK);
910:       assertEquals(53, Node.INPUT_ID);
911:       assertEquals(48, Node.DIRECTIVES);
912:       assertEquals(52, Node.LENGTH);
913:       assertEquals(8, Node.FLAG_NO_THROWS);
914:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
915:       assertEquals(56, Node.CHANGE_TIME);
916:       assertEquals(36, Node.QUOTED_PROP);
917:       assertEquals(57, Node.REFLECTED_OBJECT);
918:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
919:       assertEquals(55, Node.INFERRED_FUNCTION);
920:       assertEquals(4095, Node.COLUMN_MASK);
921:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
922:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
923:       assertEquals(50, Node.FREE_CALL);
924:       assertEquals(40, Node.ORIGINALNAME_PROP);
925:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
926:       assertEquals(54, Node.SLASH_V);
927:       assertEquals(43, Node.IS_CONSTANT_NAME);
928:       assertEquals(51, Node.STATIC_SOURCE_FILE);
929:       assertEquals(46, Node.IS_NAMESPACE);
930:       assertEquals(15, Node.NO_SIDE_EFFECTS);
931:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
932:       assertEquals(54, Node.SLASH_V);
933:       assertEquals(57, Node.LAST_PROP);
934:       assertEquals(1, Node.DECR_FLAG);
935:       assertEquals(49, Node.DIRECT_EVAL);
936:       assertEquals(40, Node.ORIGINALNAME_PROP);
937:       assertEquals(12, Node.COLUMN_BITS);
938:       assertEquals(30, Node.VAR_ARGS_NAME);
939:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
940:       assertEquals(8, Node.FLAG_NO_THROWS);
941:       assertEquals(39, Node.EMPTY_BLOCK);
942:       assertEquals(37, Node.OPT_ARG_NAME);
943:       assertEquals(56, Node.CHANGE_TIME);
944:       assertEquals(47, Node.IS_DISPATCHER);
945:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
946:       assertEquals(48, Node.DIRECTIVES);
947:       assertEquals(55, Node.INFERRED_FUNCTION);
948:       assertEquals(57, Node.REFLECTED_OBJECT);
949:       assertEquals(29, Node.JSDOC_INFO_PROP);
950:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
951:       assertEquals(52, Node.LENGTH);
952:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
953:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
954:       assertEquals(36, Node.QUOTED_PROP);
955:       assertEquals(43, Node.IS_CONSTANT_NAME);
956:       assertEquals(53, Node.INPUT_ID);
957:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
958:       assertEquals(4095, Node.COLUMN_MASK);
959:       assertEquals(2, Node.POST_FLAG);
960:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
961:       assertEquals(32, Node.INCRDECR_PROP);
962:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
963:       assertEquals(46, Node.IS_NAMESPACE);
964:       assertEquals(51, Node.STATIC_SOURCE_FILE);
965:       assertEquals(50, Node.FREE_CALL);
966:       assertNotSame(node0, node2);
967:       assertNotSame(node0, node1);
968:       assertNotSame(node1, node0);
969:       assertNotSame(node1, node2);
970:       
971:       boolean boolean1 = node2.isCall();
972:       assertFalse(node0.equals((Object)node2));
973:       assertFalse(node0.equals((Object)node1));
974:       assertFalse(node1.equals((Object)node0));
975:       assertFalse(node1.equals((Object)node2));
976:       assertFalse(node2.equals((Object)node0));
977:       assertFalse(node2.equals((Object)node1));
978:       assertTrue(boolean1 == boolean0);
979:       assertFalse(node0.isString());
980:       assertFalse(node0.isSwitch());
981:       assertFalse(node0.isIf());
982:       assertFalse(node0.isDelProp());
983:       assertFalse(node0.isBreak());
984:       assertFalse(node0.isFalse());
985:       assertFalse(node0.isThrow());
986:       assertFalse(node0.isNE());
987:       assertEquals(304, node0.getCharno());
988:       assertFalse(node0.isIn());
989:       assertFalse(node0.isEmpty());
990:       assertFalse(node0.isInc());
991:       assertFalse(node0.isRegExp());
992:       assertFalse(node0.isDefaultCase());
993:       assertFalse(node0.isWith());
994:       assertFalse(node0.isInstanceOf());
995:       assertEquals(0, node0.getChildCount());
996:       assertFalse(node0.isCatch());
997:       assertFalse(node0.isArrayLit());
998:       assertFalse(node0.isGetterDef());
999:       assertFalse(node0.isLabelName());
1000:       assertFalse(node0.isNumber());
1001:       assertFalse(node0.isStringKey());
1002:       assertFalse(node0.isParamList());
1003:       assertEquals(1245488, node0.getSourcePosition());
1004:       assertFalse(node0.isFor());
1005:       assertFalse(node0.isThis());
1006:       assertFalse(node0.isHook());
1007:       assertFalse(node0.hasOneChild());
1008:       assertFalse(node0.isTry());
1009:       assertEquals(304, node0.getLineno());
1010:       assertFalse(node0.isScript());
1011:       assertFalse(node0.isCase());
1012:       assertFalse(node0.isWhile());
1013:       assertFalse(node0.isDo());
1014:       assertFalse(node0.isBlock());
1015:       assertFalse(node0.hasMoreThanOneChild());
1016:       assertFalse(node0.isContinue());
1017:       assertFalse(node0.isCall());
1018:       assertFalse(node0.isName());
1019:       assertFalse(node0.isNull());
1020:       assertFalse(node0.isLabel());
1021:       assertFalse(node0.isVar());
1022:       assertFalse(node0.isOr());
1023:       assertFalse(node0.isAssignAdd());
1024:       assertFalse(node0.isNew());
1025:       assertFalse(node0.isAdd());
1026:       assertEquals(304, node0.getType());
1027:       assertFalse(node0.isSetterDef());
1028:       assertFalse(node0.isNot());
1029:       assertFalse(node0.isFunction());
1030:       assertFalse(node0.isTrue());
1031:       assertFalse(node0.isDebugger());
1032:       assertFalse(node0.isObjectLit());
1033:       assertFalse(node0.isAnd());
1034:       assertFalse(node0.isExprResult());
1035:       assertFalse(node0.isVoid());
1036:       assertFalse(node0.isCast());
1037:       assertFalse(node0.isGetElem());
1038:       assertFalse(node0.hasChildren());
1039:       assertFalse(node0.isDec());
1040:       assertFalse(node0.isAssign());
1041:       assertFalse(node0.isTypeOf());
1042:       assertFalse(node0.isComma());
1043:       assertFalse(node0.isReturn());
1044:       assertFalse(node0.isGetProp());
1045:       assertFalse(node1.isAdd());
1046:       assertFalse(node1.isNew());
1047:       assertFalse(node1.isBlock());
1048:       assertFalse(node1.isName());
1049:       assertFalse(node1.isContinue());
1050:       assertFalse(node1.isCall());
1051:       assertFalse(node1.isStringKey());
1052:       assertFalse(node1.isLabel());
1053:       assertFalse(node1.isAssignAdd());
1054:       assertFalse(node1.isNull());
1055:       assertFalse(node1.isOr());
1056:       assertFalse(node1.isVar());
1057:       assertFalse(node1.isSetterDef());
1058:       assertFalse(node1.isDefaultCase());
1059:       assertFalse(node1.isDo());
1060:       assertFalse(node1.isExprResult());
1061:       assertFalse(node1.isTrue());
1062:       assertFalse(node1.isDebugger());
1063:       assertFalse(node1.isFunction());
1064:       assertFalse(node1.isNot());
1065:       assertFalse(node1.isGetElem());
1066:       assertFalse(node1.isAnd());
1067:       assertFalse(node1.isCast());
1068:       assertFalse(node1.isVoid());
1069:       assertFalse(node1.isDelProp());
1070:       assertFalse(node1.isReturn());
1071:       assertFalse(node1.isGetProp());
1072:       assertFalse(node1.isTypeOf());
1073:       assertFalse(node1.isObjectLit());
1074:       assertFalse(node1.isDec());
1075:       assertFalse(node1.isComma());
1076:       assertFalse(node1.isAssign());
1077:       assertTrue(node1.hasOneChild());
1078:       assertFalse(node1.isWhile());
1079:       assertFalse(node1.isString());
1080:       assertFalse(node1.isInc());
1081:       assertFalse(node1.isHook());
1082:       assertFalse(node1.isFalse());
1083:       assertFalse(node1.isSwitch());
1084:       assertFalse(node1.isBreak());
1085:       assertFalse(node1.isNE());
1086:       assertEquals(163881, node1.getSourcePosition());
1087:       assertFalse(node1.isIn());
1088:       assertFalse(node1.isEmpty());
1089:       assertFalse(node1.isThrow());
1090:       assertEquals(1, node1.getType());
1091:       assertFalse(node1.isRegExp());
1092:       assertFalse(node1.isWith());
1093:       assertFalse(node1.isCatch());
1094:       assertFalse(node1.isArrayLit());
1095:       assertEquals(41, node1.getCharno());
1096:       assertFalse(node1.isIf());
1097:       assertFalse(node1.isLabelName());
1098:       assertFalse(node1.isParamList());
1099:       assertFalse(node1.isInstanceOf());
1100:       assertTrue(node1.hasChildren());
1101:       assertFalse(node1.hasMoreThanOneChild());
1102:       assertFalse(node1.isThis());
1103:       assertFalse(node1.isNumber());
1104:       assertFalse(node1.isGetterDef());
1105:       assertEquals(1, node1.getChildCount());
1106:       assertFalse(node1.isFor());
1107:       assertFalse(node1.isCase());
1108:       assertEquals(40, node1.getLineno());
1109:       assertFalse(node1.isScript());
1110:       assertFalse(node1.isTry());
1111:       assertFalse(node2.isInc());
1112:       assertFalse(node2.isHook());
1113:       assertFalse(node2.isSwitch());
1114:       assertFalse(node2.isCase());
1115:       assertFalse(node2.isIn());
1116:       assertFalse(node2.isString());
1117:       assertEquals(163881, node2.getSourcePosition());
1118:       assertFalse(node2.isGetProp());
1119:       assertFalse(node2.isThis());
1120:       assertFalse(node2.isComma());
1121:       assertFalse(node2.isIf());
1122:       assertFalse(node2.isDelProp());
1123:       assertFalse(node2.isNE());
1124:       assertFalse(node2.isFor());
1125:       assertFalse(node2.isBreak());
1126:       assertFalse(node2.isWith());
1127:       assertEquals(41, node2.getCharno());
1128:       assertFalse(node2.isInstanceOf());
1129:       assertFalse(node2.isFunction());
1130:       assertFalse(node2.isDebugger());
1131:       assertFalse(node2.isObjectLit());
1132:       assertFalse(node2.isNot());
1133:       assertFalse(node2.isSetterDef());
1134:       assertFalse(node2.isAnd());
1135:       assertFalse(node2.isContinue());
1136:       assertFalse(node2.isThrow());
1137:       assertFalse(node2.isFalse());
1138:       assertFalse(node2.isCast());
1139:       assertFalse(node2.isAdd());
1140:       assertFalse(node2.isBlock());
1141:       assertFalse(node2.isNew());
1142:       assertFalse(node2.isVar());
1143:       assertFalse(node2.isWhile());
1144:       assertFalse(node2.isDo());
1145:       assertFalse(node2.isOr());
1146:       assertFalse(node2.hasChildren());
1147:       assertFalse(node2.isNull());
1148:       assertFalse(node2.isReturn());
1149:       assertFalse(node2.isCall());
1150:       assertFalse(node2.isName());
1151:       assertFalse(node2.isGetElem());
1152:       assertEquals(40, node2.getLineno());
1153:       assertFalse(node2.isAssign());
1154:       assertFalse(node2.isDec());
1155:       assertFalse(node2.isRegExp());
1156:       assertFalse(node2.isTypeOf());
1157:       assertFalse(node2.hasMoreThanOneChild());
1158:       assertFalse(node2.isCatch());
1159:       assertEquals(1, node2.getType());
1160:       assertFalse(node2.isVoid());
1161:       assertFalse(node2.isExprResult());
1162:       assertFalse(node2.isTrue());
1163:       assertFalse(node2.isTry());
1164:       assertFalse(node2.isDefaultCase());
1165:       assertFalse(node2.hasOneChild());
1166:       assertFalse(node2.isGetterDef());
1167:       assertFalse(node2.isNumber());
1168:       assertFalse(node2.isScript());
1169:       assertFalse(node2.isEmpty());
1170:       assertFalse(node2.isLabel());
1171:       assertFalse(node2.isAssignAdd());
1172:       assertFalse(node2.isStringKey());
1173:       assertFalse(node2.isParamList());
1174:       assertFalse(node2.isLabelName());
1175:       assertFalse(node2.isArrayLit());
1176:       assertEquals(0, node2.getChildCount());
1177:       assertFalse(boolean1);
1178:       assertEquals(1, Node.DECR_FLAG);
1179:       assertEquals(30, Node.VAR_ARGS_NAME);
1180:       assertEquals(49, Node.DIRECT_EVAL);
1181:       assertEquals(57, Node.LAST_PROP);
1182:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1183:       assertEquals(32, Node.INCRDECR_PROP);
1184:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1185:       assertEquals(2, Node.POST_FLAG);
1186:       assertEquals(12, Node.COLUMN_BITS);
1187:       assertEquals(47, Node.IS_DISPATCHER);
1188:       assertEquals(29, Node.JSDOC_INFO_PROP);
1189:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1190:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1191:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1192:       assertEquals(37, Node.OPT_ARG_NAME);
1193:       assertEquals(39, Node.EMPTY_BLOCK);
1194:       assertEquals(53, Node.INPUT_ID);
1195:       assertEquals(48, Node.DIRECTIVES);
1196:       assertEquals(52, Node.LENGTH);
1197:       assertEquals(8, Node.FLAG_NO_THROWS);
1198:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1199:       assertEquals(56, Node.CHANGE_TIME);
1200:       assertEquals(36, Node.QUOTED_PROP);
1201:       assertEquals(57, Node.REFLECTED_OBJECT);
1202:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1203:       assertEquals(55, Node.INFERRED_FUNCTION);
1204:       assertEquals(4095, Node.COLUMN_MASK);
1205:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1207:       assertEquals(50, Node.FREE_CALL);
1208:       assertEquals(40, Node.ORIGINALNAME_PROP);
1209:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1210:       assertEquals(54, Node.SLASH_V);
1211:       assertEquals(43, Node.IS_CONSTANT_NAME);
1212:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1213:       assertEquals(46, Node.IS_NAMESPACE);
1214:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1215:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1216:       assertEquals(54, Node.SLASH_V);
1217:       assertEquals(57, Node.LAST_PROP);
1218:       assertEquals(1, Node.DECR_FLAG);
1219:       assertEquals(49, Node.DIRECT_EVAL);
1220:       assertEquals(40, Node.ORIGINALNAME_PROP);
1221:       assertEquals(12, Node.COLUMN_BITS);
1222:       assertEquals(30, Node.VAR_ARGS_NAME);
1223:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1224:       assertEquals(8, Node.FLAG_NO_THROWS);
1225:       assertEquals(39, Node.EMPTY_BLOCK);
1226:       assertEquals(37, Node.OPT_ARG_NAME);
1227:       assertEquals(56, Node.CHANGE_TIME);
1228:       assertEquals(47, Node.IS_DISPATCHER);
1229:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1230:       assertEquals(48, Node.DIRECTIVES);
1231:       assertEquals(55, Node.INFERRED_FUNCTION);
1232:       assertEquals(57, Node.REFLECTED_OBJECT);
1233:       assertEquals(29, Node.JSDOC_INFO_PROP);
1234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1235:       assertEquals(52, Node.LENGTH);
1236:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1237:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1238:       assertEquals(36, Node.QUOTED_PROP);
1239:       assertEquals(43, Node.IS_CONSTANT_NAME);
1240:       assertEquals(53, Node.INPUT_ID);
1241:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1242:       assertEquals(4095, Node.COLUMN_MASK);
1243:       assertEquals(2, Node.POST_FLAG);
1244:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1245:       assertEquals(32, Node.INCRDECR_PROP);
1246:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1247:       assertEquals(46, Node.IS_NAMESPACE);
1248:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1249:       assertEquals(50, Node.FREE_CALL);
1250:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1251:       assertEquals(57, Node.LAST_PROP);
1252:       assertEquals(30, Node.VAR_ARGS_NAME);
1253:       assertEquals(52, Node.LENGTH);
1254:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1255:       assertEquals(57, Node.REFLECTED_OBJECT);
1256:       assertEquals(49, Node.DIRECT_EVAL);
1257:       assertEquals(46, Node.IS_NAMESPACE);
1258:       assertEquals(54, Node.SLASH_V);
1259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1260:       assertEquals(37, Node.OPT_ARG_NAME);
1261:       assertEquals(48, Node.DIRECTIVES);
1262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1263:       assertEquals(50, Node.FREE_CALL);
1264:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1266:       assertEquals(12, Node.COLUMN_BITS);
1267:       assertEquals(4095, Node.COLUMN_MASK);
1268:       assertEquals(32, Node.INCRDECR_PROP);
1269:       assertEquals(1, Node.DECR_FLAG);
1270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1271:       assertEquals(43, Node.IS_CONSTANT_NAME);
1272:       assertEquals(36, Node.QUOTED_PROP);
1273:       assertEquals(53, Node.INPUT_ID);
1274:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1275:       assertEquals(55, Node.INFERRED_FUNCTION);
1276:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1277:       assertEquals(56, Node.CHANGE_TIME);
1278:       assertEquals(8, Node.FLAG_NO_THROWS);
1279:       assertEquals(39, Node.EMPTY_BLOCK);
1280:       assertEquals(47, Node.IS_DISPATCHER);
1281:       assertEquals(2, Node.POST_FLAG);
1282:       assertEquals(29, Node.JSDOC_INFO_PROP);
1283:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1284:       assertEquals(40, Node.ORIGINALNAME_PROP);
1285:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1286:       assertNotSame(node0, node2);
1287:       assertNotSame(node0, node1);
1288:       assertNotSame(node1, node0);
1289:       assertNotSame(node1, node2);
1290:       assertNotSame(node2, node0);
1291:       assertNotSame(node2, node1);
1292:       
1293:       Iterable<Node> iterable0 = node0.children();
1294:       assertFalse(node0.equals((Object)node2));
1295:       assertFalse(node0.equals((Object)node1));
1296:       assertFalse(node0.isString());
1297:       assertFalse(node0.isSwitch());
1298:       assertFalse(node0.isIf());
1299:       assertFalse(node0.isDelProp());
1300:       assertFalse(node0.isBreak());
1301:       assertFalse(node0.isFalse());
1302:       assertFalse(node0.isThrow());
1303:       assertFalse(node0.isNE());
1304:       assertEquals(304, node0.getCharno());
1305:       assertFalse(node0.isIn());
1306:       assertFalse(node0.isEmpty());
1307:       assertFalse(node0.isInc());
1308:       assertFalse(node0.isRegExp());
1309:       assertFalse(node0.isDefaultCase());
1310:       assertFalse(node0.isWith());
1311:       assertFalse(node0.isInstanceOf());
1312:       assertEquals(0, node0.getChildCount());
1313:       assertFalse(node0.isCatch());
1314:       assertFalse(node0.isArrayLit());
1315:       assertFalse(node0.isGetterDef());
1316:       assertFalse(node0.isLabelName());
1317:       assertFalse(node0.isNumber());
1318:       assertFalse(node0.isStringKey());
1319:       assertFalse(node0.isParamList());
1320:       assertEquals(1245488, node0.getSourcePosition());
1321:       assertFalse(node0.isFor());
1322:       assertFalse(node0.isThis());
1323:       assertFalse(node0.isHook());
1324:       assertFalse(node0.hasOneChild());
1325:       assertFalse(node0.isTry());
1326:       assertEquals(304, node0.getLineno());
1327:       assertFalse(node0.isScript());
1328:       assertFalse(node0.isCase());
1329:       assertFalse(node0.isWhile());
1330:       assertFalse(node0.isDo());
1331:       assertFalse(node0.isBlock());
1332:       assertFalse(node0.hasMoreThanOneChild());
1333:       assertFalse(node0.isContinue());
1334:       assertFalse(node0.isCall());
1335:       assertFalse(node0.isName());
1336:       assertFalse(node0.isNull());
1337:       assertFalse(node0.isLabel());
1338:       assertFalse(node0.isVar());
1339:       assertFalse(node0.isOr());
1340:       assertFalse(node0.isAssignAdd());
1341:       assertFalse(node0.isNew());
1342:       assertFalse(node0.isAdd());
1343:       assertEquals(304, node0.getType());
1344:       assertFalse(node0.isSetterDef());
1345:       assertFalse(node0.isNot());
1346:       assertFalse(node0.isFunction());
1347:       assertFalse(node0.isTrue());
1348:       assertFalse(node0.isDebugger());
1349:       assertFalse(node0.isObjectLit());
1350:       assertFalse(node0.isAnd());
1351:       assertFalse(node0.isExprResult());
1352:       assertFalse(node0.isVoid());
1353:       assertFalse(node0.isCast());
1354:       assertFalse(node0.isGetElem());
1355:       assertFalse(node0.hasChildren());
1356:       assertFalse(node0.isDec());
1357:       assertFalse(node0.isAssign());
1358:       assertFalse(node0.isTypeOf());
1359:       assertFalse(node0.isComma());
1360:       assertFalse(node0.isReturn());
1361:       assertFalse(node0.isGetProp());
1362:       assertEquals(1, Node.DECR_FLAG);
1363:       assertEquals(30, Node.VAR_ARGS_NAME);
1364:       assertEquals(49, Node.DIRECT_EVAL);
1365:       assertEquals(57, Node.LAST_PROP);
1366:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1367:       assertEquals(32, Node.INCRDECR_PROP);
1368:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1369:       assertEquals(2, Node.POST_FLAG);
1370:       assertEquals(12, Node.COLUMN_BITS);
1371:       assertEquals(47, Node.IS_DISPATCHER);
1372:       assertEquals(29, Node.JSDOC_INFO_PROP);
1373:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1374:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1375:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1376:       assertEquals(37, Node.OPT_ARG_NAME);
1377:       assertEquals(39, Node.EMPTY_BLOCK);
1378:       assertEquals(53, Node.INPUT_ID);
1379:       assertEquals(48, Node.DIRECTIVES);
1380:       assertEquals(52, Node.LENGTH);
1381:       assertEquals(8, Node.FLAG_NO_THROWS);
1382:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1383:       assertEquals(56, Node.CHANGE_TIME);
1384:       assertEquals(36, Node.QUOTED_PROP);
1385:       assertEquals(57, Node.REFLECTED_OBJECT);
1386:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1387:       assertEquals(55, Node.INFERRED_FUNCTION);
1388:       assertEquals(4095, Node.COLUMN_MASK);
1389:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1390:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1391:       assertEquals(50, Node.FREE_CALL);
1392:       assertEquals(40, Node.ORIGINALNAME_PROP);
1393:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1394:       assertEquals(54, Node.SLASH_V);
1395:       assertEquals(43, Node.IS_CONSTANT_NAME);
1396:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1397:       assertEquals(46, Node.IS_NAMESPACE);
1398:       assertFalse(iterable0.contains(node1));
1399:       assertNotNull(iterable0);
1400:       assertNotSame(node0, node2);
1401:       assertNotSame(node0, node1);
1402:       
1403:       boolean boolean2 = node0.isHook();
1404:       assertFalse(node0.equals((Object)node2));
1405:       assertFalse(node0.equals((Object)node1));
1406:       assertTrue(boolean2 == boolean1);
1407:       assertTrue(boolean2 == boolean0);
1408:       assertFalse(node0.isString());
1409:       assertFalse(node0.isSwitch());
1410:       assertFalse(node0.isIf());
1411:       assertFalse(node0.isDelProp());
1412:       assertFalse(node0.isBreak());
1413:       assertFalse(node0.isFalse());
1414:       assertFalse(node0.isThrow());
1415:       assertFalse(node0.isNE());
1416:       assertEquals(304, node0.getCharno());
1417:       assertFalse(node0.isIn());
1418:       assertFalse(node0.isEmpty());
1419:       assertFalse(node0.isInc());
1420:       assertFalse(node0.isRegExp());
1421:       assertFalse(node0.isDefaultCase());
1422:       assertFalse(node0.isWith());
1423:       assertFalse(node0.isInstanceOf());
1424:       assertEquals(0, node0.getChildCount());
1425:       assertFalse(node0.isCatch());
1426:       assertFalse(node0.isArrayLit());
1427:       assertFalse(node0.isGetterDef());
1428:       assertFalse(node0.isLabelName());
1429:       assertFalse(node0.isNumber());
1430:       assertFalse(node0.isStringKey());
1431:       assertFalse(node0.isParamList());
1432:       assertEquals(1245488, node0.getSourcePosition());
1433:       assertFalse(node0.isFor());
1434:       assertFalse(node0.isThis());
1435:       assertFalse(node0.isHook());
1436:       assertFalse(node0.hasOneChild());
1437:       assertFalse(node0.isTry());
1438:       assertEquals(304, node0.getLineno());
1439:       assertFalse(node0.isScript());
1440:       assertFalse(node0.isCase());
1441:       assertFalse(node0.isWhile());
1442:       assertFalse(node0.isDo());
1443:       assertFalse(node0.isBlock());
1444:       assertFalse(node0.hasMoreThanOneChild());
1445:       assertFalse(node0.isContinue());
1446:       assertFalse(node0.isCall());
1447:       assertFalse(node0.isName());
1448:       assertFalse(node0.isNull());
1449:       assertFalse(node0.isLabel());
1450:       assertFalse(node0.isVar());
1451:       assertFalse(node0.isOr());
1452:       assertFalse(node0.isAssignAdd());
1453:       assertFalse(node0.isNew());
1454:       assertFalse(node0.isAdd());
1455:       assertEquals(304, node0.getType());
1456:       assertFalse(node0.isSetterDef());
1457:       assertFalse(node0.isNot());
1458:       assertFalse(node0.isFunction());
1459:       assertFalse(node0.isTrue());
1460:       assertFalse(node0.isDebugger());
1461:       assertFalse(node0.isObjectLit());
1462:       assertFalse(node0.isAnd());
1463:       assertFalse(node0.isExprResult());
1464:       assertFalse(node0.isVoid());
1465:       assertFalse(node0.isCast());
1466:       assertFalse(node0.isGetElem());
1467:       assertFalse(node0.hasChildren());
1468:       assertFalse(node0.isDec());
1469:       assertFalse(node0.isAssign());
1470:       assertFalse(node0.isTypeOf());
1471:       assertFalse(node0.isComma());
1472:       assertFalse(node0.isReturn());
1473:       assertFalse(node0.isGetProp());
1474:       assertFalse(boolean2);
1475:       assertEquals(1, Node.DECR_FLAG);
1476:       assertEquals(30, Node.VAR_ARGS_NAME);
1477:       assertEquals(49, Node.DIRECT_EVAL);
1478:       assertEquals(57, Node.LAST_PROP);
1479:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1480:       assertEquals(32, Node.INCRDECR_PROP);
1481:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1482:       assertEquals(2, Node.POST_FLAG);
1483:       assertEquals(12, Node.COLUMN_BITS);
1484:       assertEquals(47, Node.IS_DISPATCHER);
1485:       assertEquals(29, Node.JSDOC_INFO_PROP);
1486:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1487:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1488:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1489:       assertEquals(37, Node.OPT_ARG_NAME);
1490:       assertEquals(39, Node.EMPTY_BLOCK);
1491:       assertEquals(53, Node.INPUT_ID);
1492:       assertEquals(48, Node.DIRECTIVES);
1493:       assertEquals(52, Node.LENGTH);
1494:       assertEquals(8, Node.FLAG_NO_THROWS);
1495:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1496:       assertEquals(56, Node.CHANGE_TIME);
1497:       assertEquals(36, Node.QUOTED_PROP);
1498:       assertEquals(57, Node.REFLECTED_OBJECT);
1499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1500:       assertEquals(55, Node.INFERRED_FUNCTION);
1501:       assertEquals(4095, Node.COLUMN_MASK);
1502:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1503:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1504:       assertEquals(50, Node.FREE_CALL);
1505:       assertEquals(40, Node.ORIGINALNAME_PROP);
1506:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1507:       assertEquals(54, Node.SLASH_V);
1508:       assertEquals(43, Node.IS_CONSTANT_NAME);
1509:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1510:       assertEquals(46, Node.IS_NAMESPACE);
1511:       assertNotSame(node0, node2);
1512:       assertNotSame(node0, node1);
1513:       
1514:       boolean boolean3 = node0.isCall();
1515:       assertFalse(node0.equals((Object)node2));
1516:       assertFalse(node0.equals((Object)node1));
1517:       assertTrue(boolean3 == boolean2);
1518:       assertTrue(boolean3 == boolean1);
1519:       assertTrue(boolean3 == boolean0);
1520:       assertFalse(node0.isString());
1521:       assertFalse(node0.isSwitch());
1522:       assertFalse(node0.isIf());
1523:       assertFalse(node0.isDelProp());
1524:       assertFalse(node0.isBreak());
1525:       assertFalse(node0.isFalse());
1526:       assertFalse(node0.isThrow());
1527:       assertFalse(node0.isNE());
1528:       assertEquals(304, node0.getCharno());
1529:       assertFalse(node0.isIn());
1530:       assertFalse(node0.isEmpty());
1531:       assertFalse(node0.isInc());
1532:       assertFalse(node0.isRegExp());
1533:       assertFalse(node0.isDefaultCase());
1534:       assertFalse(node0.isWith());
1535:       assertFalse(node0.isInstanceOf());
1536:       assertEquals(0, node0.getChildCount());
1537:       assertFalse(node0.isCatch());
1538:       assertFalse(node0.isArrayLit());
1539:       assertFalse(node0.isGetterDef());
1540:       assertFalse(node0.isLabelName());
1541:       assertFalse(node0.isNumber());
1542:       assertFalse(node0.isStringKey());
1543:       assertFalse(node0.isParamList());
1544:       assertEquals(1245488, node0.getSourcePosition());
1545:       assertFalse(node0.isFor());
1546:       assertFalse(node0.isThis());
1547:       assertFalse(node0.isHook());
1548:       assertFalse(node0.hasOneChild());
1549:       assertFalse(node0.isTry());
1550:       assertEquals(304, node0.getLineno());
1551:       assertFalse(node0.isScript());
1552:       assertFalse(node0.isCase());
1553:       assertFalse(node0.isWhile());
1554:       assertFalse(node0.isDo());
1555:       assertFalse(node0.isBlock());
1556:       assertFalse(node0.hasMoreThanOneChild());
1557:       assertFalse(node0.isContinue());
1558:       assertFalse(node0.isCall());
1559:       assertFalse(node0.isName());
1560:       assertFalse(node0.isNull());
1561:       assertFalse(node0.isLabel());
1562:       assertFalse(node0.isVar());
1563:       assertFalse(node0.isOr());
1564:       assertFalse(node0.isAssignAdd());
1565:       assertFalse(node0.isNew());
1566:       assertFalse(node0.isAdd());
1567:       assertEquals(304, node0.getType());
1568:       assertFalse(node0.isSetterDef());
1569:       assertFalse(node0.isNot());
1570:       assertFalse(node0.isFunction());
1571:       assertFalse(node0.isTrue());
1572:       assertFalse(node0.isDebugger());
1573:       assertFalse(node0.isObjectLit());
1574:       assertFalse(node0.isAnd());
1575:       assertFalse(node0.isExprResult());
1576:       assertFalse(node0.isVoid());
1577:       assertFalse(node0.isCast());
1578:       assertFalse(node0.isGetElem());
1579:       assertFalse(node0.hasChildren());
1580:       assertFalse(node0.isDec());
1581:       assertFalse(node0.isAssign());
1582:       assertFalse(node0.isTypeOf());
1583:       assertFalse(node0.isComma());
1584:       assertFalse(node0.isReturn());
1585:       assertFalse(node0.isGetProp());
1586:       assertFalse(boolean3);
1587:       assertEquals(1, Node.DECR_FLAG);
1588:       assertEquals(30, Node.VAR_ARGS_NAME);
1589:       assertEquals(49, Node.DIRECT_EVAL);
1590:       assertEquals(57, Node.LAST_PROP);
1591:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1592:       assertEquals(32, Node.INCRDECR_PROP);
1593:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1594:       assertEquals(2, Node.POST_FLAG);
1595:       assertEquals(12, Node.COLUMN_BITS);
1596:       assertEquals(47, Node.IS_DISPATCHER);
1597:       assertEquals(29, Node.JSDOC_INFO_PROP);
1598:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1599:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1600:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1601:       assertEquals(37, Node.OPT_ARG_NAME);
1602:       assertEquals(39, Node.EMPTY_BLOCK);
1603:       assertEquals(53, Node.INPUT_ID);
1604:       assertEquals(48, Node.DIRECTIVES);
1605:       assertEquals(52, Node.LENGTH);
1606:       assertEquals(8, Node.FLAG_NO_THROWS);
1607:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1608:       assertEquals(56, Node.CHANGE_TIME);
1609:       assertEquals(36, Node.QUOTED_PROP);
1610:       assertEquals(57, Node.REFLECTED_OBJECT);
1611:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1612:       assertEquals(55, Node.INFERRED_FUNCTION);
1613:       assertEquals(4095, Node.COLUMN_MASK);
1614:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1615:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1616:       assertEquals(50, Node.FREE_CALL);
1617:       assertEquals(40, Node.ORIGINALNAME_PROP);
1618:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1619:       assertEquals(54, Node.SLASH_V);
1620:       assertEquals(43, Node.IS_CONSTANT_NAME);
1621:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1622:       assertEquals(46, Node.IS_NAMESPACE);
1623:       assertNotSame(node0, node2);
1624:       assertNotSame(node0, node1);
1625:       
1626:       int int0 = node2.getType();
1627:       assertFalse(node0.equals((Object)node2));
1628:       assertFalse(node0.equals((Object)node1));
1629:       assertFalse(node1.equals((Object)node0));
1630:       assertFalse(node1.equals((Object)node2));
1631:       assertFalse(node2.equals((Object)node0));
1632:       assertFalse(node2.equals((Object)node1));
1633:       assertFalse(node0.isString());
1634:       assertFalse(node0.isSwitch());
1635:       assertFalse(node0.isIf());
1636:       assertFalse(node0.isDelProp());
1637:       assertFalse(node0.isBreak());
1638:       assertFalse(node0.isFalse());
1639:       assertFalse(node0.isThrow());
1640:       assertFalse(node0.isNE());
1641:       assertEquals(304, node0.getCharno());
1642:       assertFalse(node0.isIn());
1643:       assertFalse(node0.isEmpty());
1644:       assertFalse(node0.isInc());
1645:       assertFalse(node0.isRegExp());
1646:       assertFalse(node0.isDefaultCase());
1647:       assertFalse(node0.isWith());
1648:       assertFalse(node0.isInstanceOf());
1649:       assertEquals(0, node0.getChildCount());
1650:       assertFalse(node0.isCatch());
1651:       assertFalse(node0.isArrayLit());
1652:       assertFalse(node0.isGetterDef());
1653:       assertFalse(node0.isLabelName());
1654:       assertFalse(node0.isNumber());
1655:       assertFalse(node0.isStringKey());
1656:       assertFalse(node0.isParamList());
1657:       assertEquals(1245488, node0.getSourcePosition());
1658:       assertFalse(node0.isFor());
1659:       assertFalse(node0.isThis());
1660:       assertFalse(node0.isHook());
1661:       assertFalse(node0.hasOneChild());
1662:       assertFalse(node0.isTry());
1663:       assertEquals(304, node0.getLineno());
1664:       assertFalse(node0.isScript());
1665:       assertFalse(node0.isCase());
1666:       assertFalse(node0.isWhile());
1667:       assertFalse(node0.isDo());
1668:       assertFalse(node0.isBlock());
1669:       assertFalse(node0.hasMoreThanOneChild());
1670:       assertFalse(node0.isContinue());
1671:       assertFalse(node0.isCall());
1672:       assertFalse(node0.isName());
1673:       assertFalse(node0.isNull());
1674:       assertFalse(node0.isLabel());
1675:       assertFalse(node0.isVar());
1676:       assertFalse(node0.isOr());
1677:       assertFalse(node0.isAssignAdd());
1678:       assertFalse(node0.isNew());
1679:       assertFalse(node0.isAdd());
1680:       assertEquals(304, node0.getType());
1681:       assertFalse(node0.isSetterDef());
1682:       assertFalse(node0.isNot());
1683:       assertFalse(node0.isFunction());
1684:       assertFalse(node0.isTrue());
1685:       assertFalse(node0.isDebugger());
1686:       assertFalse(node0.isObjectLit());
1687:       assertFalse(node0.isAnd());
1688:       assertFalse(node0.isExprResult());
1689:       assertFalse(node0.isVoid());
1690:       assertFalse(node0.isCast());
1691:       assertFalse(node0.isGetElem());
1692:       assertFalse(node0.hasChildren());
1693:       assertFalse(node0.isDec());
1694:       assertFalse(node0.isAssign());
1695:       assertFalse(node0.isTypeOf());
1696:       assertFalse(node0.isComma());
1697:       assertFalse(node0.isReturn());
1698:       assertFalse(node0.isGetProp());
1699:       assertFalse(node1.isAdd());
1700:       assertFalse(node1.isNew());
1701:       assertFalse(node1.isBlock());
1702:       assertFalse(node1.isName());
1703:       assertFalse(node1.isContinue());
1704:       assertFalse(node1.isCall());
1705:       assertFalse(node1.isStringKey());
1706:       assertFalse(node1.isLabel());
1707:       assertFalse(node1.isAssignAdd());
1708:       assertFalse(node1.isNull());
1709:       assertFalse(node1.isOr());
1710:       assertFalse(node1.isVar());
1711:       assertFalse(node1.isSetterDef());
1712:       assertFalse(node1.isDefaultCase());
1713:       assertFalse(node1.isDo());
1714:       assertFalse(node1.isExprResult());
1715:       assertFalse(node1.isTrue());
1716:       assertFalse(node1.isDebugger());
1717:       assertFalse(node1.isFunction());
1718:       assertFalse(node1.isNot());
1719:       assertFalse(node1.isGetElem());
1720:       assertFalse(node1.isAnd());
1721:       assertFalse(node1.isCast());
1722:       assertFalse(node1.isVoid());
1723:       assertFalse(node1.isDelProp());
1724:       assertFalse(node1.isReturn());
1725:       assertFalse(node1.isGetProp());
1726:       assertFalse(node1.isTypeOf());
1727:       assertFalse(node1.isObjectLit());
1728:       assertFalse(node1.isDec());
1729:       assertFalse(node1.isComma());
1730:       assertFalse(node1.isAssign());
1731:       assertTrue(node1.hasOneChild());
1732:       assertFalse(node1.isWhile());
1733:       assertFalse(node1.isString());
1734:       assertFalse(node1.isInc());
1735:       assertFalse(node1.isHook());
1736:       assertFalse(node1.isFalse());
1737:       assertFalse(node1.isSwitch());
1738:       assertFalse(node1.isBreak());
1739:       assertFalse(node1.isNE());
1740:       assertEquals(163881, node1.getSourcePosition());
1741:       assertFalse(node1.isIn());
1742:       assertFalse(node1.isEmpty());
1743:       assertFalse(node1.isThrow());
1744:       assertEquals(1, node1.getType());
1745:       assertFalse(node1.isRegExp());
1746:       assertFalse(node1.isWith());
1747:       assertFalse(node1.isCatch());
1748:       assertFalse(node1.isArrayLit());
1749:       assertEquals(41, node1.getCharno());
1750:       assertFalse(node1.isIf());
1751:       assertFalse(node1.isLabelName());
1752:       assertFalse(node1.isParamList());
1753:       assertFalse(node1.isInstanceOf());
1754:       assertTrue(node1.hasChildren());
1755:       assertFalse(node1.hasMoreThanOneChild());
1756:       assertFalse(node1.isThis());
1757:       assertFalse(node1.isNumber());
1758:       assertFalse(node1.isGetterDef());
1759:       assertEquals(1, node1.getChildCount());
1760:       assertFalse(node1.isFor());
1761:       assertFalse(node1.isCase());
1762:       assertEquals(40, node1.getLineno());
1763:       assertFalse(node1.isScript());
1764:       assertFalse(node1.isTry());
1765:       assertFalse(node2.isInc());
1766:       assertFalse(node2.isHook());
1767:       assertFalse(node2.isSwitch());
1768:       assertFalse(node2.isCase());
1769:       assertFalse(node2.isIn());
1770:       assertFalse(node2.isString());
1771:       assertEquals(163881, node2.getSourcePosition());
1772:       assertFalse(node2.isGetProp());
1773:       assertFalse(node2.isThis());
1774:       assertFalse(node2.isComma());
1775:       assertFalse(node2.isIf());
1776:       assertFalse(node2.isDelProp());
1777:       assertFalse(node2.isNE());
1778:       assertFalse(node2.isFor());
1779:       assertFalse(node2.isBreak());
1780:       assertFalse(node2.isWith());
1781:       assertEquals(41, node2.getCharno());
1782:       assertFalse(node2.isInstanceOf());
1783:       assertFalse(node2.isFunction());
1784:       assertFalse(node2.isDebugger());
1785:       assertFalse(node2.isObjectLit());
1786:       assertFalse(node2.isNot());
1787:       assertFalse(node2.isSetterDef());
1788:       assertFalse(node2.isAnd());
1789:       assertFalse(node2.isContinue());
1790:       assertFalse(node2.isThrow());
1791:       assertFalse(node2.isFalse());
1792:       assertFalse(node2.isCast());
1793:       assertFalse(node2.isAdd());
1794:       assertFalse(node2.isBlock());
1795:       assertFalse(node2.isNew());
1796:       assertFalse(node2.isVar());
1797:       assertFalse(node2.isWhile());
1798:       assertFalse(node2.isDo());
1799:       assertFalse(node2.isOr());
1800:       assertFalse(node2.hasChildren());
1801:       assertFalse(node2.isNull());
1802:       assertFalse(node2.isReturn());
1803:       assertFalse(node2.isCall());
1804:       assertFalse(node2.isName());
1805:       assertFalse(node2.isGetElem());
1806:       assertEquals(40, node2.getLineno());
1807:       assertFalse(node2.isAssign());
1808:       assertFalse(node2.isDec());
1809:       assertFalse(node2.isRegExp());
1810:       assertFalse(node2.isTypeOf());
1811:       assertFalse(node2.hasMoreThanOneChild());
1812:       assertFalse(node2.isCatch());
1813:       assertEquals(1, node2.getType());
1814:       assertFalse(node2.isVoid());
1815:       assertFalse(node2.isExprResult());
1816:       assertFalse(node2.isTrue());
1817:       assertFalse(node2.isTry());
1818:       assertFalse(node2.isDefaultCase());
1819:       assertFalse(node2.hasOneChild());
1820:       assertFalse(node2.isGetterDef());
1821:       assertFalse(node2.isNumber());
1822:       assertFalse(node2.isScript());
1823:       assertFalse(node2.isEmpty());
1824:       assertFalse(node2.isLabel());
1825:       assertFalse(node2.isAssignAdd());
1826:       assertFalse(node2.isStringKey());
1827:       assertFalse(node2.isParamList());
1828:       assertFalse(node2.isLabelName());
1829:       assertFalse(node2.isArrayLit());
1830:       assertEquals(0, node2.getChildCount());
1831:       assertEquals(1, int0);
1832:       assertEquals(1, Node.DECR_FLAG);
1833:       assertEquals(30, Node.VAR_ARGS_NAME);
1834:       assertEquals(49, Node.DIRECT_EVAL);
1835:       assertEquals(57, Node.LAST_PROP);
1836:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1837:       assertEquals(32, Node.INCRDECR_PROP);
1838:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1839:       assertEquals(2, Node.POST_FLAG);
1840:       assertEquals(12, Node.COLUMN_BITS);
1841:       assertEquals(47, Node.IS_DISPATCHER);
1842:       assertEquals(29, Node.JSDOC_INFO_PROP);
1843:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1844:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1845:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1846:       assertEquals(37, Node.OPT_ARG_NAME);
1847:       assertEquals(39, Node.EMPTY_BLOCK);
1848:       assertEquals(53, Node.INPUT_ID);
1849:       assertEquals(48, Node.DIRECTIVES);
1850:       assertEquals(52, Node.LENGTH);
1851:       assertEquals(8, Node.FLAG_NO_THROWS);
1852:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1853:       assertEquals(56, Node.CHANGE_TIME);
1854:       assertEquals(36, Node.QUOTED_PROP);
1855:       assertEquals(57, Node.REFLECTED_OBJECT);
1856:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1857:       assertEquals(55, Node.INFERRED_FUNCTION);
1858:       assertEquals(4095, Node.COLUMN_MASK);
1859:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1860:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1861:       assertEquals(50, Node.FREE_CALL);
1862:       assertEquals(40, Node.ORIGINALNAME_PROP);
1863:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1864:       assertEquals(54, Node.SLASH_V);
1865:       assertEquals(43, Node.IS_CONSTANT_NAME);
1866:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1867:       assertEquals(46, Node.IS_NAMESPACE);
1868:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1869:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1870:       assertEquals(54, Node.SLASH_V);
1871:       assertEquals(57, Node.LAST_PROP);
1872:       assertEquals(1, Node.DECR_FLAG);
1873:       assertEquals(49, Node.DIRECT_EVAL);
1874:       assertEquals(40, Node.ORIGINALNAME_PROP);
1875:       assertEquals(12, Node.COLUMN_BITS);
1876:       assertEquals(30, Node.VAR_ARGS_NAME);
1877:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1878:       assertEquals(8, Node.FLAG_NO_THROWS);
1879:       assertEquals(39, Node.EMPTY_BLOCK);
1880:       assertEquals(37, Node.OPT_ARG_NAME);
1881:       assertEquals(56, Node.CHANGE_TIME);
1882:       assertEquals(47, Node.IS_DISPATCHER);
1883:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1884:       assertEquals(48, Node.DIRECTIVES);
1885:       assertEquals(55, Node.INFERRED_FUNCTION);
1886:       assertEquals(57, Node.REFLECTED_OBJECT);
1887:       assertEquals(29, Node.JSDOC_INFO_PROP);
1888:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1889:       assertEquals(52, Node.LENGTH);
1890:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1891:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1892:       assertEquals(36, Node.QUOTED_PROP);
1893:       assertEquals(43, Node.IS_CONSTANT_NAME);
1894:       assertEquals(53, Node.INPUT_ID);
1895:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1896:       assertEquals(4095, Node.COLUMN_MASK);
1897:       assertEquals(2, Node.POST_FLAG);
1898:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1899:       assertEquals(32, Node.INCRDECR_PROP);
1900:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1901:       assertEquals(46, Node.IS_NAMESPACE);
1902:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1903:       assertEquals(50, Node.FREE_CALL);
1904:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1905:       assertEquals(57, Node.LAST_PROP);
1906:       assertEquals(30, Node.VAR_ARGS_NAME);
1907:       assertEquals(52, Node.LENGTH);
1908:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1909:       assertEquals(57, Node.REFLECTED_OBJECT);
1910:       assertEquals(49, Node.DIRECT_EVAL);
1911:       assertEquals(46, Node.IS_NAMESPACE);
1912:       assertEquals(54, Node.SLASH_V);
1913:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1914:       assertEquals(37, Node.OPT_ARG_NAME);
1915:       assertEquals(48, Node.DIRECTIVES);
1916:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1917:       assertEquals(50, Node.FREE_CALL);
1918:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1919:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1920:       assertEquals(12, Node.COLUMN_BITS);
1921:       assertEquals(4095, Node.COLUMN_MASK);
1922:       assertEquals(32, Node.INCRDECR_PROP);
1923:       assertEquals(1, Node.DECR_FLAG);
1924:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1925:       assertEquals(43, Node.IS_CONSTANT_NAME);
1926:       assertEquals(36, Node.QUOTED_PROP);
1927:       assertEquals(53, Node.INPUT_ID);
1928:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1929:       assertEquals(55, Node.INFERRED_FUNCTION);
1930:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1931:       assertEquals(56, Node.CHANGE_TIME);
1932:       assertEquals(8, Node.FLAG_NO_THROWS);
1933:       assertEquals(39, Node.EMPTY_BLOCK);
1934:       assertEquals(47, Node.IS_DISPATCHER);
1935:       assertEquals(2, Node.POST_FLAG);
1936:       assertEquals(29, Node.JSDOC_INFO_PROP);
1937:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1938:       assertEquals(40, Node.ORIGINALNAME_PROP);
1939:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1940:       assertNotSame(node0, node2);
1941:       assertNotSame(node0, node1);
1942:       assertNotSame(node1, node0);
1943:       assertNotSame(node1, node2);
1944:       assertNotSame(node2, node0);
1945:       assertNotSame(node2, node1);
1946:       
1947:       boolean boolean4 = node1.hasMoreThanOneChild();
1948:       assertFalse(node0.equals((Object)node2));
1949:       assertFalse(node0.equals((Object)node1));
1950:       assertFalse(node1.equals((Object)node0));
1951:       assertFalse(node1.equals((Object)node2));
1952:       assertTrue(boolean4 == boolean3);
1953:       assertTrue(boolean4 == boolean2);
1954:       assertTrue(boolean4 == boolean1);
1955:       assertTrue(boolean4 == boolean0);
1956:       assertFalse(node0.isString());
1957:       assertFalse(node0.isSwitch());
1958:       assertFalse(node0.isIf());
1959:       assertFalse(node0.isDelProp());
1960:       assertFalse(node0.isBreak());
1961:       assertFalse(node0.isFalse());
1962:       assertFalse(node0.isThrow());
1963:       assertFalse(node0.isNE());
1964:       assertEquals(304, node0.getCharno());
1965:       assertFalse(node0.isIn());
1966:       assertFalse(node0.isEmpty());
1967:       assertFalse(node0.isInc());
1968:       assertFalse(node0.isRegExp());
1969:       assertFalse(node0.isDefaultCase());
1970:       assertFalse(node0.isWith());
1971:       assertFalse(node0.isInstanceOf());
1972:       assertEquals(0, node0.getChildCount());
1973:       assertFalse(node0.isCatch());
1974:       assertFalse(node0.isArrayLit());
1975:       assertFalse(node0.isGetterDef());
1976:       assertFalse(node0.isLabelName());
1977:       assertFalse(node0.isNumber());
1978:       assertFalse(node0.isStringKey());
1979:       assertFalse(node0.isParamList());
1980:       assertEquals(1245488, node0.getSourcePosition());
1981:       assertFalse(node0.isFor());
1982:       assertFalse(node0.isThis());
1983:       assertFalse(node0.isHook());
1984:       assertFalse(node0.hasOneChild());
1985:       assertFalse(node0.isTry());
1986:       assertEquals(304, node0.getLineno());
1987:       assertFalse(node0.isScript());
1988:       assertFalse(node0.isCase());
1989:       assertFalse(node0.isWhile());
1990:       assertFalse(node0.isDo());
1991:       assertFalse(node0.isBlock());
1992:       assertFalse(node0.hasMoreThanOneChild());
1993:       assertFalse(node0.isContinue());
1994:       assertFalse(node0.isCall());
1995:       assertFalse(node0.isName());
1996:       assertFalse(node0.isNull());
1997:       assertFalse(node0.isLabel());
1998:       assertFalse(node0.isVar());
1999:       assertFalse(node0.isOr());
2000:       assertFalse(node0.isAssignAdd());
2001:       assertFalse(node0.isNew());
2002:       assertFalse(node0.isAdd());
2003:       assertEquals(304, node0.getType());
2004:       assertFalse(node0.isSetterDef());
2005:       assertFalse(node0.isNot());
2006:       assertFalse(node0.isFunction());
2007:       assertFalse(node0.isTrue());
2008:       assertFalse(node0.isDebugger());
2009:       assertFalse(node0.isObjectLit());
2010:       assertFalse(node0.isAnd());
2011:       assertFalse(node0.isExprResult());
2012:       assertFalse(node0.isVoid());
2013:       assertFalse(node0.isCast());
2014:       assertFalse(node0.isGetElem());
2015:       assertFalse(node0.hasChildren());
2016:       assertFalse(node0.isDec());
2017:       assertFalse(node0.isAssign());
2018:       assertFalse(node0.isTypeOf());
2019:       assertFalse(node0.isComma());
2020:       assertFalse(node0.isReturn());
2021:       assertFalse(node0.isGetProp());
2022:       assertFalse(node1.isAdd());
2023:       assertFalse(node1.isNew());
2024:       assertFalse(node1.isBlock());
2025:       assertFalse(node1.isName());
2026:       assertFalse(node1.isContinue());
2027:       assertFalse(node1.isCall());
2028:       assertFalse(node1.isStringKey());
2029:       assertFalse(node1.isLabel());
2030:       assertFalse(node1.isAssignAdd());
2031:       assertFalse(node1.isNull());
2032:       assertFalse(node1.isOr());
2033:       assertFalse(node1.isVar());
2034:       assertFalse(node1.isSetterDef());
2035:       assertFalse(node1.isDefaultCase());
2036:       assertFalse(node1.isDo());
2037:       assertFalse(node1.isExprResult());
2038:       assertFalse(node1.isTrue());
2039:       assertFalse(node1.isDebugger());
2040:       assertFalse(node1.isFunction());
2041:       assertFalse(node1.isNot());
2042:       assertFalse(node1.isGetElem());
2043:       assertFalse(node1.isAnd());
2044:       assertFalse(node1.isCast());
2045:       assertFalse(node1.isVoid());
2046:       assertFalse(node1.isDelProp());
2047:       assertFalse(node1.isReturn());
2048:       assertFalse(node1.isGetProp());
2049:       assertFalse(node1.isTypeOf());
2050:       assertFalse(node1.isObjectLit());
2051:       assertFalse(node1.isDec());
2052:       assertFalse(node1.isComma());
2053:       assertFalse(node1.isAssign());
2054:       assertTrue(node1.hasOneChild());
2055:       assertFalse(node1.isWhile());
2056:       assertFalse(node1.isString());
2057:       assertFalse(node1.isInc());
2058:       assertFalse(node1.isHook());
2059:       assertFalse(node1.isFalse());
2060:       assertFalse(node1.isSwitch());
2061:       assertFalse(node1.isBreak());
2062:       assertFalse(node1.isNE());
2063:       assertEquals(163881, node1.getSourcePosition());
2064:       assertFalse(node1.isIn());
2065:       assertFalse(node1.isEmpty());
2066:       assertFalse(node1.isThrow());
2067:       assertEquals(1, node1.getType());
2068:       assertFalse(node1.isRegExp());
2069:       assertFalse(node1.isWith());
2070:       assertFalse(node1.isCatch());
2071:       assertFalse(node1.isArrayLit());
2072:       assertEquals(41, node1.getCharno());
2073:       assertFalse(node1.isIf());
2074:       assertFalse(node1.isLabelName());
2075:       assertFalse(node1.isParamList());
2076:       assertFalse(node1.isInstanceOf());
2077:       assertTrue(node1.hasChildren());
2078:       assertFalse(node1.hasMoreThanOneChild());
2079:       assertFalse(node1.isThis());
2080:       assertFalse(node1.isNumber());
2081:       assertFalse(node1.isGetterDef());
2082:       assertEquals(1, node1.getChildCount());
2083:       assertFalse(node1.isFor());
2084:       assertFalse(node1.isCase());
2085:       assertEquals(40, node1.getLineno());
2086:       assertFalse(node1.isScript());
2087:       assertFalse(node1.isTry());
2088:       assertFalse(boolean4);
2089:       assertEquals(1, Node.DECR_FLAG);
2090:       assertEquals(30, Node.VAR_ARGS_NAME);
2091:       assertEquals(49, Node.DIRECT_EVAL);
2092:       assertEquals(57, Node.LAST_PROP);
2093:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2094:       assertEquals(32, Node.INCRDECR_PROP);
2095:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2096:       assertEquals(2, Node.POST_FLAG);
2097:       assertEquals(12, Node.COLUMN_BITS);
2098:       assertEquals(47, Node.IS_DISPATCHER);
2099:       assertEquals(29, Node.JSDOC_INFO_PROP);
2100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2101:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2102:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2103:       assertEquals(37, Node.OPT_ARG_NAME);
2104:       assertEquals(39, Node.EMPTY_BLOCK);
2105:       assertEquals(53, Node.INPUT_ID);
2106:       assertEquals(48, Node.DIRECTIVES);
2107:       assertEquals(52, Node.LENGTH);
2108:       assertEquals(8, Node.FLAG_NO_THROWS);
2109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2110:       assertEquals(56, Node.CHANGE_TIME);
2111:       assertEquals(36, Node.QUOTED_PROP);
2112:       assertEquals(57, Node.REFLECTED_OBJECT);
2113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2114:       assertEquals(55, Node.INFERRED_FUNCTION);
2115:       assertEquals(4095, Node.COLUMN_MASK);
2116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2117:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2118:       assertEquals(50, Node.FREE_CALL);
2119:       assertEquals(40, Node.ORIGINALNAME_PROP);
2120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2121:       assertEquals(54, Node.SLASH_V);
2122:       assertEquals(43, Node.IS_CONSTANT_NAME);
2123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2124:       assertEquals(46, Node.IS_NAMESPACE);
2125:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2126:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2127:       assertEquals(54, Node.SLASH_V);
2128:       assertEquals(57, Node.LAST_PROP);
2129:       assertEquals(1, Node.DECR_FLAG);
2130:       assertEquals(49, Node.DIRECT_EVAL);
2131:       assertEquals(40, Node.ORIGINALNAME_PROP);
2132:       assertEquals(12, Node.COLUMN_BITS);
2133:       assertEquals(30, Node.VAR_ARGS_NAME);
2134:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2135:       assertEquals(8, Node.FLAG_NO_THROWS);
2136:       assertEquals(39, Node.EMPTY_BLOCK);
2137:       assertEquals(37, Node.OPT_ARG_NAME);
2138:       assertEquals(56, Node.CHANGE_TIME);
2139:       assertEquals(47, Node.IS_DISPATCHER);
2140:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2141:       assertEquals(48, Node.DIRECTIVES);
2142:       assertEquals(55, Node.INFERRED_FUNCTION);
2143:       assertEquals(57, Node.REFLECTED_OBJECT);
2144:       assertEquals(29, Node.JSDOC_INFO_PROP);
2145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2146:       assertEquals(52, Node.LENGTH);
2147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2149:       assertEquals(36, Node.QUOTED_PROP);
2150:       assertEquals(43, Node.IS_CONSTANT_NAME);
2151:       assertEquals(53, Node.INPUT_ID);
2152:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2153:       assertEquals(4095, Node.COLUMN_MASK);
2154:       assertEquals(2, Node.POST_FLAG);
2155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2156:       assertEquals(32, Node.INCRDECR_PROP);
2157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2158:       assertEquals(46, Node.IS_NAMESPACE);
2159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2160:       assertEquals(50, Node.FREE_CALL);
2161:       assertNotSame(node0, node2);
2162:       assertNotSame(node0, node1);
2163:       assertNotSame(node1, node0);
2164:       assertNotSame(node1, node2);
2165:       
2166:       boolean boolean5 = node0.isScript();
2167:       assertFalse(node0.equals((Object)node2));
2168:       assertFalse(node0.equals((Object)node1));
2169:       assertTrue(boolean5 == boolean1);
2170:       assertTrue(boolean5 == boolean3);
2171:       assertTrue(boolean5 == boolean0);
2172:       assertTrue(boolean5 == boolean4);
2173:       assertTrue(boolean5 == boolean2);
2174:       assertFalse(node0.isString());
2175:       assertFalse(node0.isSwitch());
2176:       assertFalse(node0.isIf());
2177:       assertFalse(node0.isDelProp());
2178:       assertFalse(node0.isBreak());
2179:       assertFalse(node0.isFalse());
2180:       assertFalse(node0.isThrow());
2181:       assertFalse(node0.isNE());
2182:       assertEquals(304, node0.getCharno());
2183:       assertFalse(node0.isIn());
2184:       assertFalse(node0.isEmpty());
2185:       assertFalse(node0.isInc());
2186:       assertFalse(node0.isRegExp());
2187:       assertFalse(node0.isDefaultCase());
2188:       assertFalse(node0.isWith());
2189:       assertFalse(node0.isInstanceOf());
2190:       assertEquals(0, node0.getChildCount());
2191:       assertFalse(node0.isCatch());
2192:       assertFalse(node0.isArrayLit());
2193:       assertFalse(node0.isGetterDef());
2194:       assertFalse(node0.isLabelName());
2195:       assertFalse(node0.isNumber());
2196:       assertFalse(node0.isStringKey());
2197:       assertFalse(node0.isParamList());
2198:       assertEquals(1245488, node0.getSourcePosition());
2199:       assertFalse(node0.isFor());
2200:       assertFalse(node0.isThis());
2201:       assertFalse(node0.isHook());
2202:       assertFalse(node0.hasOneChild());
2203:       assertFalse(node0.isTry());
2204:       assertEquals(304, node0.getLineno());
2205:       assertFalse(node0.isScript());
2206:       assertFalse(node0.isCase());
2207:       assertFalse(node0.isWhile());
2208:       assertFalse(node0.isDo());
2209:       assertFalse(node0.isBlock());
2210:       assertFalse(node0.hasMoreThanOneChild());
2211:       assertFalse(node0.isContinue());
2212:       assertFalse(node0.isCall());
2213:       assertFalse(node0.isName());
2214:       assertFalse(node0.isNull());
2215:       assertFalse(node0.isLabel());
2216:       assertFalse(node0.isVar());
2217:       assertFalse(node0.isOr());
2218:       assertFalse(node0.isAssignAdd());
2219:       assertFalse(node0.isNew());
2220:       assertFalse(node0.isAdd());
2221:       assertEquals(304, node0.getType());
2222:       assertFalse(node0.isSetterDef());
2223:       assertFalse(node0.isNot());
2224:       assertFalse(node0.isFunction());
2225:       assertFalse(node0.isTrue());
2226:       assertFalse(node0.isDebugger());
2227:       assertFalse(node0.isObjectLit());
2228:       assertFalse(node0.isAnd());
2229:       assertFalse(node0.isExprResult());
2230:       assertFalse(node0.isVoid());
2231:       assertFalse(node0.isCast());
2232:       assertFalse(node0.isGetElem());
2233:       assertFalse(node0.hasChildren());
2234:       assertFalse(node0.isDec());
2235:       assertFalse(node0.isAssign());
2236:       assertFalse(node0.isTypeOf());
2237:       assertFalse(node0.isComma());
2238:       assertFalse(node0.isReturn());
2239:       assertFalse(node0.isGetProp());
2240:       assertFalse(boolean5);
2241:       assertEquals(1, Node.DECR_FLAG);
2242:       assertEquals(30, Node.VAR_ARGS_NAME);
2243:       assertEquals(49, Node.DIRECT_EVAL);
2244:       assertEquals(57, Node.LAST_PROP);
2245:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2246:       assertEquals(32, Node.INCRDECR_PROP);
2247:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2248:       assertEquals(2, Node.POST_FLAG);
2249:       assertEquals(12, Node.COLUMN_BITS);
2250:       assertEquals(47, Node.IS_DISPATCHER);
2251:       assertEquals(29, Node.JSDOC_INFO_PROP);
2252:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2254:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2255:       assertEquals(37, Node.OPT_ARG_NAME);
2256:       assertEquals(39, Node.EMPTY_BLOCK);
2257:       assertEquals(53, Node.INPUT_ID);
2258:       assertEquals(48, Node.DIRECTIVES);
2259:       assertEquals(52, Node.LENGTH);
2260:       assertEquals(8, Node.FLAG_NO_THROWS);
2261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2262:       assertEquals(56, Node.CHANGE_TIME);
2263:       assertEquals(36, Node.QUOTED_PROP);
2264:       assertEquals(57, Node.REFLECTED_OBJECT);
2265:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2266:       assertEquals(55, Node.INFERRED_FUNCTION);
2267:       assertEquals(4095, Node.COLUMN_MASK);
2268:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2269:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2270:       assertEquals(50, Node.FREE_CALL);
2271:       assertEquals(40, Node.ORIGINALNAME_PROP);
2272:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2273:       assertEquals(54, Node.SLASH_V);
2274:       assertEquals(43, Node.IS_CONSTANT_NAME);
2275:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2276:       assertEquals(46, Node.IS_NAMESPACE);
2277:       assertNotSame(node0, node2);
2278:       assertNotSame(node0, node1);
2279:   }
2280: }
RegularFileObject[/tmp/EvoSuite_76_1629222881368/com/google/javascript/rhino/Node_76_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_76_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_76_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.common.collect.Iterables",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.common.collect.AbstractMultimap$Values",
132:       "com.google.javascript.rhino.jstype.ProxyObjectType",
133:       "com.google.common.collect.Sets$SetView",
134:       "com.google.common.collect.RegularImmutableAsList",
135:       "com.google.javascript.rhino.jstype.TemplateType",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMultimap$Entries",
190:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
191:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
192:       "com.google.javascript.rhino.jstype.EnumElementType",
193:       "com.google.javascript.rhino.jstype.UnionType",
194:       "com.google.common.base.Objects",
195:       "com.google.javascript.rhino.Node$NumberNode",
196:       "com.google.common.collect.SingletonImmutableList",
197:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
198:       "com.google.common.collect.ImmutableCollection$Builder",
199:       "com.google.javascript.rhino.jstype.StaticSlot",
200:       "com.google.common.collect.Iterators$6",
201:       "com.google.common.collect.BiMap",
202:       "com.google.common.collect.Iterators$7",
203:       "com.google.common.collect.AbstractSetMultimap",
204:       "com.google.common.base.Function",
205:       "com.google.common.collect.ImmutableSet",
206:       "com.google.common.collect.Lists$AbstractListWrapper",
207:       "com.google.common.collect.ImmutableMap",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.Maps$1",
211:       "com.google.javascript.rhino.jstype.EnumType",
212:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.Multimaps$Entries",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
236:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
237:       "com.google.common.collect.ImmutableList",
238:       "com.google.common.collect.SingletonImmutableBiMap",
239:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
240:       "com.google.javascript.rhino.jstype.StringType",
241:       "com.google.javascript.rhino.Node$AbstractPropListItem",
242:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
243:       "com.google.javascript.rhino.jstype.TemplatizedType",
244:       "com.google.javascript.rhino.jstype.Visitor",
245:       "com.google.javascript.rhino.jstype.NoResolvedType",
246:       "com.google.javascript.rhino.jstype.JSTypeNative",
247:       "com.google.javascript.rhino.jstype.AllType",
248:       "com.google.common.collect.Maps",
249:       "com.google.common.collect.SetMultimap",
250:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
251:       "com.google.common.collect.Maps$EntryTransformer",
252:       "com.google.javascript.rhino.JSTypeExpression",
253:       "com.google.common.collect.Iterators$MergingIterator"
254:     );
255:   } 
256: 
257:   private static void resetClasses() {
258:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_76_tmp__ESTest_scaffolding.class.getClassLoader()); 
259: 
260:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
261:       "com.google.javascript.rhino.Node",
262:       "com.google.javascript.rhino.Node$NumberNode",
263:       "com.google.javascript.rhino.Node$StringNode",
264:       "com.google.javascript.rhino.Node$AbstractPropListItem",
265:       "com.google.javascript.rhino.Node$ObjectPropListItem",
266:       "com.google.javascript.rhino.Node$IntPropListItem",
267:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
268:       "com.google.javascript.rhino.Node$AncestorIterable",
269:       "com.google.javascript.rhino.Node$NodeMismatch",
270:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
271:       "com.google.javascript.rhino.Node$SideEffectFlags",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.Token",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.base.Objects",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
352:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.common.collect.AbstractIndexedListIterator",
362:       "com.google.common.collect.Iterators$11",
363:       "com.google.javascript.rhino.Node$AncestorIterable$1",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.InputId",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.javascript.rhino.JSTypeExpression",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.Sets$ImprovedAbstractSet",
375:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
376:       "com.google.common.collect.Hashing",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
378:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
379:       "com.google.common.collect.Platform"
380:     );
381:   }
382: }

[MASTER] 17:54:42.063 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(304, 304, 304);
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(304, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(304, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertNotNull(node0);

node0.setSourceFileForTesting("ad$l5a6Tb6");
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(304, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(304, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

Node node1 = new Node(1, node0, 40, 41);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(304, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(304, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertEquals(1, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(41, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(40, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node1);

Node node2 = node1.cloneNode();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(304, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(304, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertEquals(1, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(41, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(40, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertEquals(163881, node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertEquals(41, node2.getCharno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.hasChildren());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertEquals(40, node2.getLineno());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isRegExp());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertEquals(1, node2.getType());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node2);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node0);
assertNotSame(node2, node1);

boolean boolean0 = node1.isUnscopedQualifiedName();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(304, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(304, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertEquals(1, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(41, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(40, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(boolean0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);

boolean boolean1 = node2.isCall();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(304, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(304, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertEquals(1, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(41, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(40, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertEquals(163881, node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertEquals(41, node2.getCharno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.hasChildren());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertEquals(40, node2.getLineno());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isRegExp());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertEquals(1, node2.getType());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(boolean1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node0);
assertNotSame(node2, node1);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(304, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(304, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertNotSame(node0, node2);
assertNotSame(node0, node1);

boolean boolean2 = node0.isHook();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(304, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(304, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(boolean2);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertNotSame(node0, node2);
assertNotSame(node0, node1);

boolean boolean3 = node0.isCall();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(304, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(304, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(boolean3);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertNotSame(node0, node2);
assertNotSame(node0, node1);

int int0 = node2.getType();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(304, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(304, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertEquals(1, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(41, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(40, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertEquals(163881, node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertEquals(41, node2.getCharno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.hasChildren());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertEquals(40, node2.getLineno());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isRegExp());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertEquals(1, node2.getType());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertEquals(1, int0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node0);
assertNotSame(node2, node1);

boolean boolean4 = node1.hasMoreThanOneChild();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(304, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(304, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isGetElem());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertEquals(1, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(41, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(40, node1.getLineno());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(boolean4);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);

boolean boolean5 = node0.isScript();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(1245488, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(304, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(304, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(boolean5);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertNotSame(node0, node2);
assertNotSame(node0, node1);


[MASTER] 17:54:48.327 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_98_1629222887855/com/google/javascript/rhino/Node_98_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_98_1629222887855/com/google/javascript/rhino/Node_98_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:48.327 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:48.327 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:48.328 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1073
[MASTER] 17:54:48.330 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_98_1629222887855/com/google/javascript/rhino/Node_98_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:47 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_98_tmp__ESTest extends Node_98_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(0.0);
23:       assertTrue(node0.isNumber());
24:       assertFalse(node0.isCase());
25:       assertFalse(node0.isSwitch());
26:       assertFalse(node0.isNE());
27:       assertEquals((-1), node0.getCharno());
28:       assertFalse(node0.isInc());
29:       assertFalse(node0.isEmpty());
30:       assertFalse(node0.isString());
31:       assertFalse(node0.isIn());
32:       assertFalse(node0.isGetterDef());
33:       assertFalse(node0.isArrayLit());
34:       assertFalse(node0.isThrow());
35:       assertFalse(node0.isFalse());
36:       assertFalse(node0.isFunction());
37:       assertFalse(node0.isAnd());
38:       assertFalse(node0.isDefaultCase());
39:       assertFalse(node0.isDebugger());
40:       assertFalse(node0.isGetProp());
41:       assertFalse(node0.isNull());
42:       assertFalse(node0.isTrue());
43:       assertFalse(node0.isNot());
44:       assertFalse(node0.isObjectLit());
45:       assertFalse(node0.isCall());
46:       assertFalse(node0.isGetElem());
47:       assertFalse(node0.isVoid());
48:       assertFalse(node0.isName());
49:       assertFalse(node0.isDelProp());
50:       assertFalse(node0.isComma());
51:       assertFalse(node0.isBreak());
52:       assertFalse(node0.hasChildren());
53:       assertFalse(node0.isExprResult());
54:       assertFalse(node0.isAssign());
55:       assertFalse(node0.isDec());
56:       assertFalse(node0.isTypeOf());
57:       assertFalse(node0.hasMoreThanOneChild());
58:       assertFalse(node0.isContinue());
59:       assertFalse(node0.isReturn());
60:       assertFalse(node0.isAssignAdd());
61:       assertFalse(node0.isDo());
62:       assertFalse(node0.isWhile());
63:       assertEquals((-1), node0.getLineno());
64:       assertEquals((-1), node0.getSourcePosition());
65:       assertFalse(node0.isAdd());
66:       assertFalse(node0.isOr());
67:       assertFalse(node0.isVar());
68:       assertFalse(node0.isCast());
69:       assertFalse(node0.isStringKey());
70:       assertFalse(node0.isLabelName());
71:       assertFalse(node0.isNew());
72:       assertFalse(node0.isLabel());
73:       assertEquals(0, node0.getChildCount());
74:       assertFalse(node0.isCatch());
75:       assertFalse(node0.isInstanceOf());
76:       assertFalse(node0.isSetterDef());
77:       assertFalse(node0.isParamList());
78:       assertFalse(node0.isScript());
79:       assertFalse(node0.hasOneChild());
80:       assertFalse(node0.isHook());
81:       assertFalse(node0.isFor());
82:       assertFalse(node0.isTry());
83:       assertFalse(node0.isIf());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isBlock());
86:       assertEquals(39, node0.getType());
87:       assertFalse(node0.isWith());
88:       assertFalse(node0.isRegExp());
89:       assertEquals(32, Node.INCRDECR_PROP);
90:       assertEquals(46, Node.IS_NAMESPACE);
91:       assertEquals(51, Node.STATIC_SOURCE_FILE);
92:       assertEquals(12, Node.COLUMN_BITS);
93:       assertEquals(2, Node.POST_FLAG);
94:       assertEquals(56, Node.CHANGE_TIME);
95:       assertEquals(37, Node.OPT_ARG_NAME);
96:       assertEquals(54, Node.SLASH_V);
97:       assertEquals(49, Node.DIRECT_EVAL);
98:       assertEquals(53, Node.INPUT_ID);
99:       assertEquals(57, Node.REFLECTED_OBJECT);
100:       assertEquals(40, Node.ORIGINALNAME_PROP);
101:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
102:       assertEquals(52, Node.LENGTH);
103:       assertEquals(30, Node.VAR_ARGS_NAME);
104:       assertEquals(29, Node.JSDOC_INFO_PROP);
105:       assertEquals(15, Node.NO_SIDE_EFFECTS);
106:       assertEquals(39, Node.EMPTY_BLOCK);
107:       assertEquals(47, Node.IS_DISPATCHER);
108:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
109:       assertEquals(57, Node.LAST_PROP);
110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(4095, Node.COLUMN_MASK);
113:       assertEquals(8, Node.FLAG_NO_THROWS);
114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
115:       assertEquals(36, Node.QUOTED_PROP);
116:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
117:       assertEquals(48, Node.DIRECTIVES);
118:       assertEquals(43, Node.IS_CONSTANT_NAME);
119:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
121:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
122:       assertEquals(50, Node.FREE_CALL);
123:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
124:       assertEquals(1, Node.DECR_FLAG);
125:       assertNotNull(node0);
126:       
127:       Node node1 = Node.newString(0, "", 4, 38);
128:       assertFalse(node1.equals((Object)node0));
129:       assertFalse(node1.isCall());
130:       assertFalse(node1.isStringKey());
131:       assertFalse(node1.isVar());
132:       assertFalse(node1.isName());
133:       assertFalse(node1.isParamList());
134:       assertFalse(node1.isNull());
135:       assertFalse(node1.isAdd());
136:       assertFalse(node1.isNew());
137:       assertFalse(node1.isSetterDef());
138:       assertFalse(node1.isContinue());
139:       assertEquals(38, node1.getCharno());
140:       assertFalse(node1.isDo());
141:       assertFalse(node1.isAssignAdd());
142:       assertFalse(node1.isDefaultCase());
143:       assertFalse(node1.isFunction());
144:       assertFalse(node1.isLabel());
145:       assertEquals(0, node1.getChildCount());
146:       assertEquals(4, node1.getLineno());
147:       assertFalse(node1.isCast());
148:       assertFalse(node1.isEmpty());
149:       assertFalse(node1.isGetElem());
150:       assertFalse(node1.isDelProp());
151:       assertFalse(node1.isTrue());
152:       assertFalse(node1.isDebugger());
153:       assertFalse(node1.isOr());
154:       assertFalse(node1.isNot());
155:       assertFalse(node1.isWhile());
156:       assertFalse(node1.isExprResult());
157:       assertFalse(node1.isVoid());
158:       assertFalse(node1.isComma());
159:       assertEquals(0, node1.getType());
160:       assertFalse(node1.isBreak());
161:       assertFalse(node1.hasChildren());
162:       assertFalse(node1.isReturn());
163:       assertFalse(node1.isDec());
164:       assertFalse(node1.isAssign());
165:       assertFalse(node1.isTypeOf());
166:       assertFalse(node1.isThrow());
167:       assertFalse(node1.isHook());
168:       assertFalse(node1.isInc());
169:       assertFalse(node1.isGetProp());
170:       assertFalse(node1.isString());
171:       assertFalse(node1.isObjectLit());
172:       assertFalse(node1.isAnd());
173:       assertFalse(node1.isSwitch());
174:       assertFalse(node1.isFalse());
175:       assertFalse(node1.isArrayLit());
176:       assertFalse(node1.isFor());
177:       assertFalse(node1.isLabelName());
178:       assertFalse(node1.hasOneChild());
179:       assertFalse(node1.isTry());
180:       assertFalse(node1.isIf());
181:       assertFalse(node1.isNE());
182:       assertEquals(16422, node1.getSourcePosition());
183:       assertFalse(node1.isScript());
184:       assertFalse(node1.isGetterDef());
185:       assertFalse(node1.isNumber());
186:       assertFalse(node1.isIn());
187:       assertFalse(node1.isCatch());
188:       assertFalse(node1.isCase());
189:       assertFalse(node1.isBlock());
190:       assertFalse(node1.isThis());
191:       assertFalse(node1.isInstanceOf());
192:       assertFalse(node1.isRegExp());
193:       assertFalse(node1.hasMoreThanOneChild());
194:       assertFalse(node1.isWith());
195:       assertEquals(57, Node.REFLECTED_OBJECT);
196:       assertEquals(40, Node.ORIGINALNAME_PROP);
197:       assertEquals(50, Node.FREE_CALL);
198:       assertEquals(52, Node.LENGTH);
199:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
200:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
201:       assertEquals(48, Node.DIRECTIVES);
202:       assertEquals(49, Node.DIRECT_EVAL);
203:       assertEquals(54, Node.SLASH_V);
204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
205:       assertEquals(55, Node.INFERRED_FUNCTION);
206:       assertEquals(8, Node.FLAG_NO_THROWS);
207:       assertEquals(15, Node.NO_SIDE_EFFECTS);
208:       assertEquals(57, Node.LAST_PROP);
209:       assertEquals(47, Node.IS_DISPATCHER);
210:       assertEquals(2, Node.POST_FLAG);
211:       assertEquals(30, Node.VAR_ARGS_NAME);
212:       assertEquals(39, Node.EMPTY_BLOCK);
213:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
214:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
215:       assertEquals(29, Node.JSDOC_INFO_PROP);
216:       assertEquals(53, Node.INPUT_ID);
217:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
218:       assertEquals(43, Node.IS_CONSTANT_NAME);
219:       assertEquals(56, Node.CHANGE_TIME);
220:       assertEquals(37, Node.OPT_ARG_NAME);
221:       assertEquals(36, Node.QUOTED_PROP);
222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
223:       assertEquals(51, Node.STATIC_SOURCE_FILE);
224:       assertEquals(12, Node.COLUMN_BITS);
225:       assertEquals(32, Node.INCRDECR_PROP);
226:       assertEquals(46, Node.IS_NAMESPACE);
227:       assertEquals(4095, Node.COLUMN_MASK);
228:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
229:       assertEquals(1, Node.DECR_FLAG);
230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
231:       assertNotNull(node1);
232:       
233:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
234:       assertFalse(node0.equals((Object)node1));
235:       assertFalse(node1.equals((Object)node0));
236:       assertTrue(node0.isNumber());
237:       assertFalse(node0.isCase());
238:       assertFalse(node0.isSwitch());
239:       assertFalse(node0.isNE());
240:       assertEquals((-1), node0.getCharno());
241:       assertFalse(node0.isInc());
242:       assertFalse(node0.isEmpty());
243:       assertFalse(node0.isString());
244:       assertFalse(node0.isIn());
245:       assertFalse(node0.isGetterDef());
246:       assertFalse(node0.isArrayLit());
247:       assertFalse(node0.isThrow());
248:       assertFalse(node0.isFalse());
249:       assertFalse(node0.isFunction());
250:       assertFalse(node0.isAnd());
251:       assertFalse(node0.isDefaultCase());
252:       assertFalse(node0.isDebugger());
253:       assertFalse(node0.isGetProp());
254:       assertFalse(node0.isNull());
255:       assertFalse(node0.isTrue());
256:       assertFalse(node0.isNot());
257:       assertFalse(node0.isObjectLit());
258:       assertFalse(node0.isCall());
259:       assertFalse(node0.isGetElem());
260:       assertFalse(node0.isVoid());
261:       assertFalse(node0.isName());
262:       assertFalse(node0.isDelProp());
263:       assertFalse(node0.isComma());
264:       assertFalse(node0.isBreak());
265:       assertFalse(node0.hasChildren());
266:       assertFalse(node0.isExprResult());
267:       assertFalse(node0.isAssign());
268:       assertFalse(node0.isDec());
269:       assertFalse(node0.isTypeOf());
270:       assertFalse(node0.hasMoreThanOneChild());
271:       assertFalse(node0.isContinue());
272:       assertFalse(node0.isReturn());
273:       assertFalse(node0.isAssignAdd());
274:       assertFalse(node0.isDo());
275:       assertFalse(node0.isWhile());
276:       assertEquals((-1), node0.getLineno());
277:       assertEquals((-1), node0.getSourcePosition());
278:       assertFalse(node0.isAdd());
279:       assertFalse(node0.isOr());
280:       assertFalse(node0.isVar());
281:       assertFalse(node0.isCast());
282:       assertFalse(node0.isStringKey());
283:       assertFalse(node0.isLabelName());
284:       assertFalse(node0.isNew());
285:       assertFalse(node0.isLabel());
286:       assertEquals(0, node0.getChildCount());
287:       assertFalse(node0.isCatch());
288:       assertFalse(node0.isInstanceOf());
289:       assertFalse(node0.isSetterDef());
290:       assertFalse(node0.isParamList());
291:       assertFalse(node0.isScript());
292:       assertFalse(node0.hasOneChild());
293:       assertFalse(node0.isHook());
294:       assertFalse(node0.isFor());
295:       assertFalse(node0.isTry());
296:       assertFalse(node0.isIf());
297:       assertFalse(node0.isThis());
298:       assertFalse(node0.isBlock());
299:       assertEquals(39, node0.getType());
300:       assertFalse(node0.isWith());
301:       assertFalse(node0.isRegExp());
302:       assertFalse(node1.isCall());
303:       assertFalse(node1.isStringKey());
304:       assertFalse(node1.isVar());
305:       assertFalse(node1.isName());
306:       assertFalse(node1.isParamList());
307:       assertFalse(node1.isNull());
308:       assertFalse(node1.isAdd());
309:       assertFalse(node1.isNew());
310:       assertFalse(node1.isSetterDef());
311:       assertFalse(node1.isContinue());
312:       assertEquals(38, node1.getCharno());
313:       assertFalse(node1.isDo());
314:       assertFalse(node1.isAssignAdd());
315:       assertFalse(node1.isDefaultCase());
316:       assertFalse(node1.isFunction());
317:       assertFalse(node1.isLabel());
318:       assertEquals(0, node1.getChildCount());
319:       assertEquals(4, node1.getLineno());
320:       assertFalse(node1.isCast());
321:       assertFalse(node1.isEmpty());
322:       assertFalse(node1.isGetElem());
323:       assertFalse(node1.isDelProp());
324:       assertFalse(node1.isTrue());
325:       assertFalse(node1.isDebugger());
326:       assertFalse(node1.isOr());
327:       assertFalse(node1.isNot());
328:       assertFalse(node1.isWhile());
329:       assertFalse(node1.isExprResult());
330:       assertFalse(node1.isVoid());
331:       assertFalse(node1.isComma());
332:       assertEquals(0, node1.getType());
333:       assertFalse(node1.isBreak());
334:       assertFalse(node1.hasChildren());
335:       assertFalse(node1.isReturn());
336:       assertFalse(node1.isDec());
337:       assertFalse(node1.isAssign());
338:       assertFalse(node1.isTypeOf());
339:       assertFalse(node1.isThrow());
340:       assertFalse(node1.isHook());
341:       assertFalse(node1.isInc());
342:       assertFalse(node1.isGetProp());
343:       assertFalse(node1.isString());
344:       assertFalse(node1.isObjectLit());
345:       assertFalse(node1.isAnd());
346:       assertFalse(node1.isSwitch());
347:       assertFalse(node1.isFalse());
348:       assertFalse(node1.isArrayLit());
349:       assertFalse(node1.isFor());
350:       assertFalse(node1.isLabelName());
351:       assertFalse(node1.hasOneChild());
352:       assertFalse(node1.isTry());
353:       assertFalse(node1.isIf());
354:       assertFalse(node1.isNE());
355:       assertEquals(16422, node1.getSourcePosition());
356:       assertFalse(node1.isScript());
357:       assertFalse(node1.isGetterDef());
358:       assertFalse(node1.isNumber());
359:       assertFalse(node1.isIn());
360:       assertFalse(node1.isCatch());
361:       assertFalse(node1.isCase());
362:       assertFalse(node1.isBlock());
363:       assertFalse(node1.isThis());
364:       assertFalse(node1.isInstanceOf());
365:       assertFalse(node1.isRegExp());
366:       assertFalse(node1.hasMoreThanOneChild());
367:       assertFalse(node1.isWith());
368:       assertEquals(32, Node.INCRDECR_PROP);
369:       assertEquals(46, Node.IS_NAMESPACE);
370:       assertEquals(51, Node.STATIC_SOURCE_FILE);
371:       assertEquals(12, Node.COLUMN_BITS);
372:       assertEquals(2, Node.POST_FLAG);
373:       assertEquals(56, Node.CHANGE_TIME);
374:       assertEquals(37, Node.OPT_ARG_NAME);
375:       assertEquals(54, Node.SLASH_V);
376:       assertEquals(49, Node.DIRECT_EVAL);
377:       assertEquals(53, Node.INPUT_ID);
378:       assertEquals(57, Node.REFLECTED_OBJECT);
379:       assertEquals(40, Node.ORIGINALNAME_PROP);
380:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
381:       assertEquals(52, Node.LENGTH);
382:       assertEquals(30, Node.VAR_ARGS_NAME);
383:       assertEquals(29, Node.JSDOC_INFO_PROP);
384:       assertEquals(15, Node.NO_SIDE_EFFECTS);
385:       assertEquals(39, Node.EMPTY_BLOCK);
386:       assertEquals(47, Node.IS_DISPATCHER);
387:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
388:       assertEquals(57, Node.LAST_PROP);
389:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
390:       assertEquals(55, Node.INFERRED_FUNCTION);
391:       assertEquals(4095, Node.COLUMN_MASK);
392:       assertEquals(8, Node.FLAG_NO_THROWS);
393:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
394:       assertEquals(36, Node.QUOTED_PROP);
395:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
396:       assertEquals(48, Node.DIRECTIVES);
397:       assertEquals(43, Node.IS_CONSTANT_NAME);
398:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
399:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
400:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
401:       assertEquals(50, Node.FREE_CALL);
402:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
403:       assertEquals(1, Node.DECR_FLAG);
404:       assertEquals(57, Node.REFLECTED_OBJECT);
405:       assertEquals(40, Node.ORIGINALNAME_PROP);
406:       assertEquals(50, Node.FREE_CALL);
407:       assertEquals(52, Node.LENGTH);
408:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
409:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
410:       assertEquals(48, Node.DIRECTIVES);
411:       assertEquals(49, Node.DIRECT_EVAL);
412:       assertEquals(54, Node.SLASH_V);
413:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
414:       assertEquals(55, Node.INFERRED_FUNCTION);
415:       assertEquals(8, Node.FLAG_NO_THROWS);
416:       assertEquals(15, Node.NO_SIDE_EFFECTS);
417:       assertEquals(57, Node.LAST_PROP);
418:       assertEquals(47, Node.IS_DISPATCHER);
419:       assertEquals(2, Node.POST_FLAG);
420:       assertEquals(30, Node.VAR_ARGS_NAME);
421:       assertEquals(39, Node.EMPTY_BLOCK);
422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
423:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
424:       assertEquals(29, Node.JSDOC_INFO_PROP);
425:       assertEquals(53, Node.INPUT_ID);
426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
427:       assertEquals(43, Node.IS_CONSTANT_NAME);
428:       assertEquals(56, Node.CHANGE_TIME);
429:       assertEquals(37, Node.OPT_ARG_NAME);
430:       assertEquals(36, Node.QUOTED_PROP);
431:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
433:       assertEquals(12, Node.COLUMN_BITS);
434:       assertEquals(32, Node.INCRDECR_PROP);
435:       assertEquals(46, Node.IS_NAMESPACE);
436:       assertEquals(4095, Node.COLUMN_MASK);
437:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
438:       assertEquals(1, Node.DECR_FLAG);
439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
440:       assertNotNull(node_NodeMismatch0);
441:       
442:       boolean boolean0 = node_NodeMismatch0.equals("");
443:       assertFalse(node0.equals((Object)node1));
444:       assertFalse(node1.equals((Object)node0));
445:       assertTrue(node0.isNumber());
446:       assertFalse(node0.isCase());
447:       assertFalse(node0.isSwitch());
448:       assertFalse(node0.isNE());
449:       assertEquals((-1), node0.getCharno());
450:       assertFalse(node0.isInc());
451:       assertFalse(node0.isEmpty());
452:       assertFalse(node0.isString());
453:       assertFalse(node0.isIn());
454:       assertFalse(node0.isGetterDef());
455:       assertFalse(node0.isArrayLit());
456:       assertFalse(node0.isThrow());
457:       assertFalse(node0.isFalse());
458:       assertFalse(node0.isFunction());
459:       assertFalse(node0.isAnd());
460:       assertFalse(node0.isDefaultCase());
461:       assertFalse(node0.isDebugger());
462:       assertFalse(node0.isGetProp());
463:       assertFalse(node0.isNull());
464:       assertFalse(node0.isTrue());
465:       assertFalse(node0.isNot());
466:       assertFalse(node0.isObjectLit());
467:       assertFalse(node0.isCall());
468:       assertFalse(node0.isGetElem());
469:       assertFalse(node0.isVoid());
470:       assertFalse(node0.isName());
471:       assertFalse(node0.isDelProp());
472:       assertFalse(node0.isComma());
473:       assertFalse(node0.isBreak());
474:       assertFalse(node0.hasChildren());
475:       assertFalse(node0.isExprResult());
476:       assertFalse(node0.isAssign());
477:       assertFalse(node0.isDec());
478:       assertFalse(node0.isTypeOf());
479:       assertFalse(node0.hasMoreThanOneChild());
480:       assertFalse(node0.isContinue());
481:       assertFalse(node0.isReturn());
482:       assertFalse(node0.isAssignAdd());
483:       assertFalse(node0.isDo());
484:       assertFalse(node0.isWhile());
485:       assertEquals((-1), node0.getLineno());
486:       assertEquals((-1), node0.getSourcePosition());
487:       assertFalse(node0.isAdd());
488:       assertFalse(node0.isOr());
489:       assertFalse(node0.isVar());
490:       assertFalse(node0.isCast());
491:       assertFalse(node0.isStringKey());
492:       assertFalse(node0.isLabelName());
493:       assertFalse(node0.isNew());
494:       assertFalse(node0.isLabel());
495:       assertEquals(0, node0.getChildCount());
496:       assertFalse(node0.isCatch());
497:       assertFalse(node0.isInstanceOf());
498:       assertFalse(node0.isSetterDef());
499:       assertFalse(node0.isParamList());
500:       assertFalse(node0.isScript());
501:       assertFalse(node0.hasOneChild());
502:       assertFalse(node0.isHook());
503:       assertFalse(node0.isFor());
504:       assertFalse(node0.isTry());
505:       assertFalse(node0.isIf());
506:       assertFalse(node0.isThis());
507:       assertFalse(node0.isBlock());
508:       assertEquals(39, node0.getType());
509:       assertFalse(node0.isWith());
510:       assertFalse(node0.isRegExp());
511:       assertFalse(node1.isCall());
512:       assertFalse(node1.isStringKey());
513:       assertFalse(node1.isVar());
514:       assertFalse(node1.isName());
515:       assertFalse(node1.isParamList());
516:       assertFalse(node1.isNull());
517:       assertFalse(node1.isAdd());
518:       assertFalse(node1.isNew());
519:       assertFalse(node1.isSetterDef());
520:       assertFalse(node1.isContinue());
521:       assertEquals(38, node1.getCharno());
522:       assertFalse(node1.isDo());
523:       assertFalse(node1.isAssignAdd());
524:       assertFalse(node1.isDefaultCase());
525:       assertFalse(node1.isFunction());
526:       assertFalse(node1.isLabel());
527:       assertEquals(0, node1.getChildCount());
528:       assertEquals(4, node1.getLineno());
529:       assertFalse(node1.isCast());
530:       assertFalse(node1.isEmpty());
531:       assertFalse(node1.isGetElem());
532:       assertFalse(node1.isDelProp());
533:       assertFalse(node1.isTrue());
534:       assertFalse(node1.isDebugger());
535:       assertFalse(node1.isOr());
536:       assertFalse(node1.isNot());
537:       assertFalse(node1.isWhile());
538:       assertFalse(node1.isExprResult());
539:       assertFalse(node1.isVoid());
540:       assertFalse(node1.isComma());
541:       assertEquals(0, node1.getType());
542:       assertFalse(node1.isBreak());
543:       assertFalse(node1.hasChildren());
544:       assertFalse(node1.isReturn());
545:       assertFalse(node1.isDec());
546:       assertFalse(node1.isAssign());
547:       assertFalse(node1.isTypeOf());
548:       assertFalse(node1.isThrow());
549:       assertFalse(node1.isHook());
550:       assertFalse(node1.isInc());
551:       assertFalse(node1.isGetProp());
552:       assertFalse(node1.isString());
553:       assertFalse(node1.isObjectLit());
554:       assertFalse(node1.isAnd());
555:       assertFalse(node1.isSwitch());
556:       assertFalse(node1.isFalse());
557:       assertFalse(node1.isArrayLit());
558:       assertFalse(node1.isFor());
559:       assertFalse(node1.isLabelName());
560:       assertFalse(node1.hasOneChild());
561:       assertFalse(node1.isTry());
562:       assertFalse(node1.isIf());
563:       assertFalse(node1.isNE());
564:       assertEquals(16422, node1.getSourcePosition());
565:       assertFalse(node1.isScript());
566:       assertFalse(node1.isGetterDef());
567:       assertFalse(node1.isNumber());
568:       assertFalse(node1.isIn());
569:       assertFalse(node1.isCatch());
570:       assertFalse(node1.isCase());
571:       assertFalse(node1.isBlock());
572:       assertFalse(node1.isThis());
573:       assertFalse(node1.isInstanceOf());
574:       assertFalse(node1.isRegExp());
575:       assertFalse(node1.hasMoreThanOneChild());
576:       assertFalse(node1.isWith());
577:       assertFalse(boolean0);
578:       assertEquals(32, Node.INCRDECR_PROP);
579:       assertEquals(46, Node.IS_NAMESPACE);
580:       assertEquals(51, Node.STATIC_SOURCE_FILE);
581:       assertEquals(12, Node.COLUMN_BITS);
582:       assertEquals(2, Node.POST_FLAG);
583:       assertEquals(56, Node.CHANGE_TIME);
584:       assertEquals(37, Node.OPT_ARG_NAME);
585:       assertEquals(54, Node.SLASH_V);
586:       assertEquals(49, Node.DIRECT_EVAL);
587:       assertEquals(53, Node.INPUT_ID);
588:       assertEquals(57, Node.REFLECTED_OBJECT);
589:       assertEquals(40, Node.ORIGINALNAME_PROP);
590:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
591:       assertEquals(52, Node.LENGTH);
592:       assertEquals(30, Node.VAR_ARGS_NAME);
593:       assertEquals(29, Node.JSDOC_INFO_PROP);
594:       assertEquals(15, Node.NO_SIDE_EFFECTS);
595:       assertEquals(39, Node.EMPTY_BLOCK);
596:       assertEquals(47, Node.IS_DISPATCHER);
597:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
598:       assertEquals(57, Node.LAST_PROP);
599:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
600:       assertEquals(55, Node.INFERRED_FUNCTION);
601:       assertEquals(4095, Node.COLUMN_MASK);
602:       assertEquals(8, Node.FLAG_NO_THROWS);
603:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
604:       assertEquals(36, Node.QUOTED_PROP);
605:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
606:       assertEquals(48, Node.DIRECTIVES);
607:       assertEquals(43, Node.IS_CONSTANT_NAME);
608:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
609:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
610:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
611:       assertEquals(50, Node.FREE_CALL);
612:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
613:       assertEquals(1, Node.DECR_FLAG);
614:       assertEquals(57, Node.REFLECTED_OBJECT);
615:       assertEquals(40, Node.ORIGINALNAME_PROP);
616:       assertEquals(50, Node.FREE_CALL);
617:       assertEquals(52, Node.LENGTH);
618:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
619:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
620:       assertEquals(48, Node.DIRECTIVES);
621:       assertEquals(49, Node.DIRECT_EVAL);
622:       assertEquals(54, Node.SLASH_V);
623:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
624:       assertEquals(55, Node.INFERRED_FUNCTION);
625:       assertEquals(8, Node.FLAG_NO_THROWS);
626:       assertEquals(15, Node.NO_SIDE_EFFECTS);
627:       assertEquals(57, Node.LAST_PROP);
628:       assertEquals(47, Node.IS_DISPATCHER);
629:       assertEquals(2, Node.POST_FLAG);
630:       assertEquals(30, Node.VAR_ARGS_NAME);
631:       assertEquals(39, Node.EMPTY_BLOCK);
632:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
633:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
634:       assertEquals(29, Node.JSDOC_INFO_PROP);
635:       assertEquals(53, Node.INPUT_ID);
636:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
637:       assertEquals(43, Node.IS_CONSTANT_NAME);
638:       assertEquals(56, Node.CHANGE_TIME);
639:       assertEquals(37, Node.OPT_ARG_NAME);
640:       assertEquals(36, Node.QUOTED_PROP);
641:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
642:       assertEquals(51, Node.STATIC_SOURCE_FILE);
643:       assertEquals(12, Node.COLUMN_BITS);
644:       assertEquals(32, Node.INCRDECR_PROP);
645:       assertEquals(46, Node.IS_NAMESPACE);
646:       assertEquals(4095, Node.COLUMN_MASK);
647:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
648:       assertEquals(1, Node.DECR_FLAG);
649:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
650:       
651:       boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
652:       assertFalse(node0.equals((Object)node1));
653:       assertFalse(node1.equals((Object)node0));
654:       assertTrue(boolean1 == boolean0);
655:       assertTrue(node0.isNumber());
656:       assertFalse(node0.isCase());
657:       assertFalse(node0.isSwitch());
658:       assertFalse(node0.isNE());
659:       assertEquals((-1), node0.getCharno());
660:       assertFalse(node0.isInc());
661:       assertFalse(node0.isEmpty());
662:       assertFalse(node0.isString());
663:       assertFalse(node0.isIn());
664:       assertFalse(node0.isGetterDef());
665:       assertFalse(node0.isArrayLit());
666:       assertFalse(node0.isThrow());
667:       assertFalse(node0.isFalse());
668:       assertFalse(node0.isFunction());
669:       assertFalse(node0.isAnd());
670:       assertFalse(node0.isDefaultCase());
671:       assertFalse(node0.isDebugger());
672:       assertFalse(node0.isGetProp());
673:       assertFalse(node0.isNull());
674:       assertFalse(node0.isTrue());
675:       assertFalse(node0.isNot());
676:       assertFalse(node0.isObjectLit());
677:       assertFalse(node0.isCall());
678:       assertFalse(node0.isGetElem());
679:       assertFalse(node0.isVoid());
680:       assertFalse(node0.isName());
681:       assertFalse(node0.isDelProp());
682:       assertFalse(node0.isComma());
683:       assertFalse(node0.isBreak());
684:       assertFalse(node0.hasChildren());
685:       assertFalse(node0.isExprResult());
686:       assertFalse(node0.isAssign());
687:       assertFalse(node0.isDec());
688:       assertFalse(node0.isTypeOf());
689:       assertFalse(node0.hasMoreThanOneChild());
690:       assertFalse(node0.isContinue());
691:       assertFalse(node0.isReturn());
692:       assertFalse(node0.isAssignAdd());
693:       assertFalse(node0.isDo());
694:       assertFalse(node0.isWhile());
695:       assertEquals((-1), node0.getLineno());
696:       assertEquals((-1), node0.getSourcePosition());
697:       assertFalse(node0.isAdd());
698:       assertFalse(node0.isOr());
699:       assertFalse(node0.isVar());
700:       assertFalse(node0.isCast());
701:       assertFalse(node0.isStringKey());
702:       assertFalse(node0.isLabelName());
703:       assertFalse(node0.isNew());
704:       assertFalse(node0.isLabel());
705:       assertEquals(0, node0.getChildCount());
706:       assertFalse(node0.isCatch());
707:       assertFalse(node0.isInstanceOf());
708:       assertFalse(node0.isSetterDef());
709:       assertFalse(node0.isParamList());
710:       assertFalse(node0.isScript());
711:       assertFalse(node0.hasOneChild());
712:       assertFalse(node0.isHook());
713:       assertFalse(node0.isFor());
714:       assertFalse(node0.isTry());
715:       assertFalse(node0.isIf());
716:       assertFalse(node0.isThis());
717:       assertFalse(node0.isBlock());
718:       assertEquals(39, node0.getType());
719:       assertFalse(node0.isWith());
720:       assertFalse(node0.isRegExp());
721:       assertFalse(node1.isCall());
722:       assertFalse(node1.isStringKey());
723:       assertFalse(node1.isVar());
724:       assertFalse(node1.isName());
725:       assertFalse(node1.isParamList());
726:       assertFalse(node1.isNull());
727:       assertFalse(node1.isAdd());
728:       assertFalse(node1.isNew());
729:       assertFalse(node1.isSetterDef());
730:       assertFalse(node1.isContinue());
731:       assertEquals(38, node1.getCharno());
732:       assertFalse(node1.isDo());
733:       assertFalse(node1.isAssignAdd());
734:       assertFalse(node1.isDefaultCase());
735:       assertFalse(node1.isFunction());
736:       assertFalse(node1.isLabel());
737:       assertEquals(0, node1.getChildCount());
738:       assertEquals(4, node1.getLineno());
739:       assertFalse(node1.isCast());
740:       assertFalse(node1.isEmpty());
741:       assertFalse(node1.isGetElem());
742:       assertFalse(node1.isDelProp());
743:       assertFalse(node1.isTrue());
744:       assertFalse(node1.isDebugger());
745:       assertFalse(node1.isOr());
746:       assertFalse(node1.isNot());
747:       assertFalse(node1.isWhile());
748:       assertFalse(node1.isExprResult());
749:       assertFalse(node1.isVoid());
750:       assertFalse(node1.isComma());
751:       assertEquals(0, node1.getType());
752:       assertFalse(node1.isBreak());
753:       assertFalse(node1.hasChildren());
754:       assertFalse(node1.isReturn());
755:       assertFalse(node1.isDec());
756:       assertFalse(node1.isAssign());
757:       assertFalse(node1.isTypeOf());
758:       assertFalse(node1.isThrow());
759:       assertFalse(node1.isHook());
760:       assertFalse(node1.isInc());
761:       assertFalse(node1.isGetProp());
762:       assertFalse(node1.isString());
763:       assertFalse(node1.isObjectLit());
764:       assertFalse(node1.isAnd());
765:       assertFalse(node1.isSwitch());
766:       assertFalse(node1.isFalse());
767:       assertFalse(node1.isArrayLit());
768:       assertFalse(node1.isFor());
769:       assertFalse(node1.isLabelName());
770:       assertFalse(node1.hasOneChild());
771:       assertFalse(node1.isTry());
772:       assertFalse(node1.isIf());
773:       assertFalse(node1.isNE());
774:       assertEquals(16422, node1.getSourcePosition());
775:       assertFalse(node1.isScript());
776:       assertFalse(node1.isGetterDef());
777:       assertFalse(node1.isNumber());
778:       assertFalse(node1.isIn());
779:       assertFalse(node1.isCatch());
780:       assertFalse(node1.isCase());
781:       assertFalse(node1.isBlock());
782:       assertFalse(node1.isThis());
783:       assertFalse(node1.isInstanceOf());
784:       assertFalse(node1.isRegExp());
785:       assertFalse(node1.hasMoreThanOneChild());
786:       assertFalse(node1.isWith());
787:       assertFalse(boolean1);
788:       assertEquals(32, Node.INCRDECR_PROP);
789:       assertEquals(46, Node.IS_NAMESPACE);
790:       assertEquals(51, Node.STATIC_SOURCE_FILE);
791:       assertEquals(12, Node.COLUMN_BITS);
792:       assertEquals(2, Node.POST_FLAG);
793:       assertEquals(56, Node.CHANGE_TIME);
794:       assertEquals(37, Node.OPT_ARG_NAME);
795:       assertEquals(54, Node.SLASH_V);
796:       assertEquals(49, Node.DIRECT_EVAL);
797:       assertEquals(53, Node.INPUT_ID);
798:       assertEquals(57, Node.REFLECTED_OBJECT);
799:       assertEquals(40, Node.ORIGINALNAME_PROP);
800:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
801:       assertEquals(52, Node.LENGTH);
802:       assertEquals(30, Node.VAR_ARGS_NAME);
803:       assertEquals(29, Node.JSDOC_INFO_PROP);
804:       assertEquals(15, Node.NO_SIDE_EFFECTS);
805:       assertEquals(39, Node.EMPTY_BLOCK);
806:       assertEquals(47, Node.IS_DISPATCHER);
807:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
808:       assertEquals(57, Node.LAST_PROP);
809:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
810:       assertEquals(55, Node.INFERRED_FUNCTION);
811:       assertEquals(4095, Node.COLUMN_MASK);
812:       assertEquals(8, Node.FLAG_NO_THROWS);
813:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
814:       assertEquals(36, Node.QUOTED_PROP);
815:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
816:       assertEquals(48, Node.DIRECTIVES);
817:       assertEquals(43, Node.IS_CONSTANT_NAME);
818:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
819:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
820:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
821:       assertEquals(50, Node.FREE_CALL);
822:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
823:       assertEquals(1, Node.DECR_FLAG);
824:       assertEquals(57, Node.REFLECTED_OBJECT);
825:       assertEquals(40, Node.ORIGINALNAME_PROP);
826:       assertEquals(50, Node.FREE_CALL);
827:       assertEquals(52, Node.LENGTH);
828:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
829:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
830:       assertEquals(48, Node.DIRECTIVES);
831:       assertEquals(49, Node.DIRECT_EVAL);
832:       assertEquals(54, Node.SLASH_V);
833:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
834:       assertEquals(55, Node.INFERRED_FUNCTION);
835:       assertEquals(8, Node.FLAG_NO_THROWS);
836:       assertEquals(15, Node.NO_SIDE_EFFECTS);
837:       assertEquals(57, Node.LAST_PROP);
838:       assertEquals(47, Node.IS_DISPATCHER);
839:       assertEquals(2, Node.POST_FLAG);
840:       assertEquals(30, Node.VAR_ARGS_NAME);
841:       assertEquals(39, Node.EMPTY_BLOCK);
842:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
843:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
844:       assertEquals(29, Node.JSDOC_INFO_PROP);
845:       assertEquals(53, Node.INPUT_ID);
846:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
847:       assertEquals(43, Node.IS_CONSTANT_NAME);
848:       assertEquals(56, Node.CHANGE_TIME);
849:       assertEquals(37, Node.OPT_ARG_NAME);
850:       assertEquals(36, Node.QUOTED_PROP);
851:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
852:       assertEquals(51, Node.STATIC_SOURCE_FILE);
853:       assertEquals(12, Node.COLUMN_BITS);
854:       assertEquals(32, Node.INCRDECR_PROP);
855:       assertEquals(46, Node.IS_NAMESPACE);
856:       assertEquals(4095, Node.COLUMN_MASK);
857:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
858:       assertEquals(1, Node.DECR_FLAG);
859:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
860:       
861:       boolean boolean2 = node1.isVarArgs();
862:       assertFalse(node1.equals((Object)node0));
863:       assertTrue(boolean2 == boolean1);
864:       assertTrue(boolean2 == boolean0);
865:       assertFalse(node1.isCall());
866:       assertFalse(node1.isStringKey());
867:       assertFalse(node1.isVar());
868:       assertFalse(node1.isName());
869:       assertFalse(node1.isParamList());
870:       assertFalse(node1.isNull());
871:       assertFalse(node1.isAdd());
872:       assertFalse(node1.isNew());
873:       assertFalse(node1.isSetterDef());
874:       assertFalse(node1.isContinue());
875:       assertEquals(38, node1.getCharno());
876:       assertFalse(node1.isDo());
877:       assertFalse(node1.isAssignAdd());
878:       assertFalse(node1.isDefaultCase());
879:       assertFalse(node1.isFunction());
880:       assertFalse(node1.isLabel());
881:       assertEquals(0, node1.getChildCount());
882:       assertEquals(4, node1.getLineno());
883:       assertFalse(node1.isCast());
884:       assertFalse(node1.isEmpty());
885:       assertFalse(node1.isGetElem());
886:       assertFalse(node1.isDelProp());
887:       assertFalse(node1.isTrue());
888:       assertFalse(node1.isDebugger());
889:       assertFalse(node1.isOr());
890:       assertFalse(node1.isNot());
891:       assertFalse(node1.isWhile());
892:       assertFalse(node1.isExprResult());
893:       assertFalse(node1.isVoid());
894:       assertFalse(node1.isComma());
895:       assertEquals(0, node1.getType());
896:       assertFalse(node1.isBreak());
897:       assertFalse(node1.hasChildren());
898:       assertFalse(node1.isReturn());
899:       assertFalse(node1.isDec());
900:       assertFalse(node1.isAssign());
901:       assertFalse(node1.isTypeOf());
902:       assertFalse(node1.isThrow());
903:       assertFalse(node1.isHook());
904:       assertFalse(node1.isInc());
905:       assertFalse(node1.isGetProp());
906:       assertFalse(node1.isString());
907:       assertFalse(node1.isObjectLit());
908:       assertFalse(node1.isAnd());
909:       assertFalse(node1.isSwitch());
910:       assertFalse(node1.isFalse());
911:       assertFalse(node1.isArrayLit());
912:       assertFalse(node1.isFor());
913:       assertFalse(node1.isLabelName());
914:       assertFalse(node1.hasOneChild());
915:       assertFalse(node1.isTry());
916:       assertFalse(node1.isIf());
917:       assertFalse(node1.isNE());
918:       assertEquals(16422, node1.getSourcePosition());
919:       assertFalse(node1.isScript());
920:       assertFalse(node1.isGetterDef());
921:       assertFalse(node1.isNumber());
922:       assertFalse(node1.isIn());
923:       assertFalse(node1.isCatch());
924:       assertFalse(node1.isCase());
925:       assertFalse(node1.isBlock());
926:       assertFalse(node1.isThis());
927:       assertFalse(node1.isInstanceOf());
928:       assertFalse(node1.isRegExp());
929:       assertFalse(node1.hasMoreThanOneChild());
930:       assertFalse(node1.isWith());
931:       assertFalse(boolean2);
932:       assertEquals(57, Node.REFLECTED_OBJECT);
933:       assertEquals(40, Node.ORIGINALNAME_PROP);
934:       assertEquals(50, Node.FREE_CALL);
935:       assertEquals(52, Node.LENGTH);
936:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
937:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
938:       assertEquals(48, Node.DIRECTIVES);
939:       assertEquals(49, Node.DIRECT_EVAL);
940:       assertEquals(54, Node.SLASH_V);
941:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
942:       assertEquals(55, Node.INFERRED_FUNCTION);
943:       assertEquals(8, Node.FLAG_NO_THROWS);
944:       assertEquals(15, Node.NO_SIDE_EFFECTS);
945:       assertEquals(57, Node.LAST_PROP);
946:       assertEquals(47, Node.IS_DISPATCHER);
947:       assertEquals(2, Node.POST_FLAG);
948:       assertEquals(30, Node.VAR_ARGS_NAME);
949:       assertEquals(39, Node.EMPTY_BLOCK);
950:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
951:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
952:       assertEquals(29, Node.JSDOC_INFO_PROP);
953:       assertEquals(53, Node.INPUT_ID);
954:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
955:       assertEquals(43, Node.IS_CONSTANT_NAME);
956:       assertEquals(56, Node.CHANGE_TIME);
957:       assertEquals(37, Node.OPT_ARG_NAME);
958:       assertEquals(36, Node.QUOTED_PROP);
959:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
960:       assertEquals(51, Node.STATIC_SOURCE_FILE);
961:       assertEquals(12, Node.COLUMN_BITS);
962:       assertEquals(32, Node.INCRDECR_PROP);
963:       assertEquals(46, Node.IS_NAMESPACE);
964:       assertEquals(4095, Node.COLUMN_MASK);
965:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
966:       assertEquals(1, Node.DECR_FLAG);
967:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
968:       
969:       Iterable<Node> iterable0 = node0.children();
970:       assertFalse(node0.equals((Object)node1));
971:       assertTrue(node0.isNumber());
972:       assertFalse(node0.isCase());
973:       assertFalse(node0.isSwitch());
974:       assertFalse(node0.isNE());
975:       assertEquals((-1), node0.getCharno());
976:       assertFalse(node0.isInc());
977:       assertFalse(node0.isEmpty());
978:       assertFalse(node0.isString());
979:       assertFalse(node0.isIn());
980:       assertFalse(node0.isGetterDef());
981:       assertFalse(node0.isArrayLit());
982:       assertFalse(node0.isThrow());
983:       assertFalse(node0.isFalse());
984:       assertFalse(node0.isFunction());
985:       assertFalse(node0.isAnd());
986:       assertFalse(node0.isDefaultCase());
987:       assertFalse(node0.isDebugger());
988:       assertFalse(node0.isGetProp());
989:       assertFalse(node0.isNull());
990:       assertFalse(node0.isTrue());
991:       assertFalse(node0.isNot());
992:       assertFalse(node0.isObjectLit());
993:       assertFalse(node0.isCall());
994:       assertFalse(node0.isGetElem());
995:       assertFalse(node0.isVoid());
996:       assertFalse(node0.isName());
997:       assertFalse(node0.isDelProp());
998:       assertFalse(node0.isComma());
999:       assertFalse(node0.isBreak());
1000:       assertFalse(node0.hasChildren());
1001:       assertFalse(node0.isExprResult());
1002:       assertFalse(node0.isAssign());
1003:       assertFalse(node0.isDec());
1004:       assertFalse(node0.isTypeOf());
1005:       assertFalse(node0.hasMoreThanOneChild());
1006:       assertFalse(node0.isContinue());
1007:       assertFalse(node0.isReturn());
1008:       assertFalse(node0.isAssignAdd());
1009:       assertFalse(node0.isDo());
1010:       assertFalse(node0.isWhile());
1011:       assertEquals((-1), node0.getLineno());
1012:       assertEquals((-1), node0.getSourcePosition());
1013:       assertFalse(node0.isAdd());
1014:       assertFalse(node0.isOr());
1015:       assertFalse(node0.isVar());
1016:       assertFalse(node0.isCast());
1017:       assertFalse(node0.isStringKey());
1018:       assertFalse(node0.isLabelName());
1019:       assertFalse(node0.isNew());
1020:       assertFalse(node0.isLabel());
1021:       assertEquals(0, node0.getChildCount());
1022:       assertFalse(node0.isCatch());
1023:       assertFalse(node0.isInstanceOf());
1024:       assertFalse(node0.isSetterDef());
1025:       assertFalse(node0.isParamList());
1026:       assertFalse(node0.isScript());
1027:       assertFalse(node0.hasOneChild());
1028:       assertFalse(node0.isHook());
1029:       assertFalse(node0.isFor());
1030:       assertFalse(node0.isTry());
1031:       assertFalse(node0.isIf());
1032:       assertFalse(node0.isThis());
1033:       assertFalse(node0.isBlock());
1034:       assertEquals(39, node0.getType());
1035:       assertFalse(node0.isWith());
1036:       assertFalse(node0.isRegExp());
1037:       assertEquals(32, Node.INCRDECR_PROP);
1038:       assertEquals(46, Node.IS_NAMESPACE);
1039:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1040:       assertEquals(12, Node.COLUMN_BITS);
1041:       assertEquals(2, Node.POST_FLAG);
1042:       assertEquals(56, Node.CHANGE_TIME);
1043:       assertEquals(37, Node.OPT_ARG_NAME);
1044:       assertEquals(54, Node.SLASH_V);
1045:       assertEquals(49, Node.DIRECT_EVAL);
1046:       assertEquals(53, Node.INPUT_ID);
1047:       assertEquals(57, Node.REFLECTED_OBJECT);
1048:       assertEquals(40, Node.ORIGINALNAME_PROP);
1049:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1050:       assertEquals(52, Node.LENGTH);
1051:       assertEquals(30, Node.VAR_ARGS_NAME);
1052:       assertEquals(29, Node.JSDOC_INFO_PROP);
1053:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1054:       assertEquals(39, Node.EMPTY_BLOCK);
1055:       assertEquals(47, Node.IS_DISPATCHER);
1056:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1057:       assertEquals(57, Node.LAST_PROP);
1058:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1059:       assertEquals(55, Node.INFERRED_FUNCTION);
1060:       assertEquals(4095, Node.COLUMN_MASK);
1061:       assertEquals(8, Node.FLAG_NO_THROWS);
1062:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1063:       assertEquals(36, Node.QUOTED_PROP);
1064:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1065:       assertEquals(48, Node.DIRECTIVES);
1066:       assertEquals(43, Node.IS_CONSTANT_NAME);
1067:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1068:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1069:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1070:       assertEquals(50, Node.FREE_CALL);
1071:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1072:       assertEquals(1, Node.DECR_FLAG);
1073:       assertFalse(iterable0.contains(node1));
1074:       assertNotNull(iterable0);
1075:       
1076:       boolean boolean3 = node0.isIf();
1077:       assertFalse(node0.equals((Object)node1));
1078:       assertTrue(boolean3 == boolean1);
1079:       assertTrue(boolean3 == boolean2);
1080:       assertTrue(boolean3 == boolean0);
1081:       assertTrue(node0.isNumber());
1082:       assertFalse(node0.isCase());
1083:       assertFalse(node0.isSwitch());
1084:       assertFalse(node0.isNE());
1085:       assertEquals((-1), node0.getCharno());
1086:       assertFalse(node0.isInc());
1087:       assertFalse(node0.isEmpty());
1088:       assertFalse(node0.isString());
1089:       assertFalse(node0.isIn());
1090:       assertFalse(node0.isGetterDef());
1091:       assertFalse(node0.isArrayLit());
1092:       assertFalse(node0.isThrow());
1093:       assertFalse(node0.isFalse());
1094:       assertFalse(node0.isFunction());
1095:       assertFalse(node0.isAnd());
1096:       assertFalse(node0.isDefaultCase());
1097:       assertFalse(node0.isDebugger());
1098:       assertFalse(node0.isGetProp());
1099:       assertFalse(node0.isNull());
1100:       assertFalse(node0.isTrue());
1101:       assertFalse(node0.isNot());
1102:       assertFalse(node0.isObjectLit());
1103:       assertFalse(node0.isCall());
1104:       assertFalse(node0.isGetElem());
1105:       assertFalse(node0.isVoid());
1106:       assertFalse(node0.isName());
1107:       assertFalse(node0.isDelProp());
1108:       assertFalse(node0.isComma());
1109:       assertFalse(node0.isBreak());
1110:       assertFalse(node0.hasChildren());
1111:       assertFalse(node0.isExprResult());
1112:       assertFalse(node0.isAssign());
1113:       assertFalse(node0.isDec());
1114:       assertFalse(node0.isTypeOf());
1115:       assertFalse(node0.hasMoreThanOneChild());
1116:       assertFalse(node0.isContinue());
1117:       assertFalse(node0.isReturn());
1118:       assertFalse(node0.isAssignAdd());
1119:       assertFalse(node0.isDo());
1120:       assertFalse(node0.isWhile());
1121:       assertEquals((-1), node0.getLineno());
1122:       assertEquals((-1), node0.getSourcePosition());
1123:       assertFalse(node0.isAdd());
1124:       assertFalse(node0.isOr());
1125:       assertFalse(node0.isVar());
1126:       assertFalse(node0.isCast());
1127:       assertFalse(node0.isStringKey());
1128:       assertFalse(node0.isLabelName());
1129:       assertFalse(node0.isNew());
1130:       assertFalse(node0.isLabel());
1131:       assertEquals(0, node0.getChildCount());
1132:       assertFalse(node0.isCatch());
1133:       assertFalse(node0.isInstanceOf());
1134:       assertFalse(node0.isSetterDef());
1135:       assertFalse(node0.isParamList());
1136:       assertFalse(node0.isScript());
1137:       assertFalse(node0.hasOneChild());
1138:       assertFalse(node0.isHook());
1139:       assertFalse(node0.isFor());
1140:       assertFalse(node0.isTry());
1141:       assertFalse(node0.isIf());
1142:       assertFalse(node0.isThis());
1143:       assertFalse(node0.isBlock());
1144:       assertEquals(39, node0.getType());
1145:       assertFalse(node0.isWith());
1146:       assertFalse(node0.isRegExp());
1147:       assertFalse(boolean3);
1148:       assertEquals(32, Node.INCRDECR_PROP);
1149:       assertEquals(46, Node.IS_NAMESPACE);
1150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1151:       assertEquals(12, Node.COLUMN_BITS);
1152:       assertEquals(2, Node.POST_FLAG);
1153:       assertEquals(56, Node.CHANGE_TIME);
1154:       assertEquals(37, Node.OPT_ARG_NAME);
1155:       assertEquals(54, Node.SLASH_V);
1156:       assertEquals(49, Node.DIRECT_EVAL);
1157:       assertEquals(53, Node.INPUT_ID);
1158:       assertEquals(57, Node.REFLECTED_OBJECT);
1159:       assertEquals(40, Node.ORIGINALNAME_PROP);
1160:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1161:       assertEquals(52, Node.LENGTH);
1162:       assertEquals(30, Node.VAR_ARGS_NAME);
1163:       assertEquals(29, Node.JSDOC_INFO_PROP);
1164:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1165:       assertEquals(39, Node.EMPTY_BLOCK);
1166:       assertEquals(47, Node.IS_DISPATCHER);
1167:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1168:       assertEquals(57, Node.LAST_PROP);
1169:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1170:       assertEquals(55, Node.INFERRED_FUNCTION);
1171:       assertEquals(4095, Node.COLUMN_MASK);
1172:       assertEquals(8, Node.FLAG_NO_THROWS);
1173:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1174:       assertEquals(36, Node.QUOTED_PROP);
1175:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1176:       assertEquals(48, Node.DIRECTIVES);
1177:       assertEquals(43, Node.IS_CONSTANT_NAME);
1178:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1179:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1180:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1181:       assertEquals(50, Node.FREE_CALL);
1182:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1183:       assertEquals(1, Node.DECR_FLAG);
1184:       
1185:       boolean boolean4 = node1.isVoid();
1186:       assertFalse(node1.equals((Object)node0));
1187:       assertTrue(boolean4 == boolean1);
1188:       assertTrue(boolean4 == boolean2);
1189:       assertTrue(boolean4 == boolean3);
1190:       assertTrue(boolean4 == boolean0);
1191:       assertFalse(node1.isCall());
1192:       assertFalse(node1.isStringKey());
1193:       assertFalse(node1.isVar());
1194:       assertFalse(node1.isName());
1195:       assertFalse(node1.isParamList());
1196:       assertFalse(node1.isNull());
1197:       assertFalse(node1.isAdd());
1198:       assertFalse(node1.isNew());
1199:       assertFalse(node1.isSetterDef());
1200:       assertFalse(node1.isContinue());
1201:       assertEquals(38, node1.getCharno());
1202:       assertFalse(node1.isDo());
1203:       assertFalse(node1.isAssignAdd());
1204:       assertFalse(node1.isDefaultCase());
1205:       assertFalse(node1.isFunction());
1206:       assertFalse(node1.isLabel());
1207:       assertEquals(0, node1.getChildCount());
1208:       assertEquals(4, node1.getLineno());
1209:       assertFalse(node1.isCast());
1210:       assertFalse(node1.isEmpty());
1211:       assertFalse(node1.isGetElem());
1212:       assertFalse(node1.isDelProp());
1213:       assertFalse(node1.isTrue());
1214:       assertFalse(node1.isDebugger());
1215:       assertFalse(node1.isOr());
1216:       assertFalse(node1.isNot());
1217:       assertFalse(node1.isWhile());
1218:       assertFalse(node1.isExprResult());
1219:       assertFalse(node1.isVoid());
1220:       assertFalse(node1.isComma());
1221:       assertEquals(0, node1.getType());
1222:       assertFalse(node1.isBreak());
1223:       assertFalse(node1.hasChildren());
1224:       assertFalse(node1.isReturn());
1225:       assertFalse(node1.isDec());
1226:       assertFalse(node1.isAssign());
1227:       assertFalse(node1.isTypeOf());
1228:       assertFalse(node1.isThrow());
1229:       assertFalse(node1.isHook());
1230:       assertFalse(node1.isInc());
1231:       assertFalse(node1.isGetProp());
1232:       assertFalse(node1.isString());
1233:       assertFalse(node1.isObjectLit());
1234:       assertFalse(node1.isAnd());
1235:       assertFalse(node1.isSwitch());
1236:       assertFalse(node1.isFalse());
1237:       assertFalse(node1.isArrayLit());
1238:       assertFalse(node1.isFor());
1239:       assertFalse(node1.isLabelName());
1240:       assertFalse(node1.hasOneChild());
1241:       assertFalse(node1.isTry());
1242:       assertFalse(node1.isIf());
1243:       assertFalse(node1.isNE());
1244:       assertEquals(16422, node1.getSourcePosition());
1245:       assertFalse(node1.isScript());
1246:       assertFalse(node1.isGetterDef());
1247:       assertFalse(node1.isNumber());
1248:       assertFalse(node1.isIn());
1249:       assertFalse(node1.isCatch());
1250:       assertFalse(node1.isCase());
1251:       assertFalse(node1.isBlock());
1252:       assertFalse(node1.isThis());
1253:       assertFalse(node1.isInstanceOf());
1254:       assertFalse(node1.isRegExp());
1255:       assertFalse(node1.hasMoreThanOneChild());
1256:       assertFalse(node1.isWith());
1257:       assertFalse(boolean4);
1258:       assertEquals(57, Node.REFLECTED_OBJECT);
1259:       assertEquals(40, Node.ORIGINALNAME_PROP);
1260:       assertEquals(50, Node.FREE_CALL);
1261:       assertEquals(52, Node.LENGTH);
1262:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1263:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1264:       assertEquals(48, Node.DIRECTIVES);
1265:       assertEquals(49, Node.DIRECT_EVAL);
1266:       assertEquals(54, Node.SLASH_V);
1267:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1268:       assertEquals(55, Node.INFERRED_FUNCTION);
1269:       assertEquals(8, Node.FLAG_NO_THROWS);
1270:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1271:       assertEquals(57, Node.LAST_PROP);
1272:       assertEquals(47, Node.IS_DISPATCHER);
1273:       assertEquals(2, Node.POST_FLAG);
1274:       assertEquals(30, Node.VAR_ARGS_NAME);
1275:       assertEquals(39, Node.EMPTY_BLOCK);
1276:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1277:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1278:       assertEquals(29, Node.JSDOC_INFO_PROP);
1279:       assertEquals(53, Node.INPUT_ID);
1280:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1281:       assertEquals(43, Node.IS_CONSTANT_NAME);
1282:       assertEquals(56, Node.CHANGE_TIME);
1283:       assertEquals(37, Node.OPT_ARG_NAME);
1284:       assertEquals(36, Node.QUOTED_PROP);
1285:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1286:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1287:       assertEquals(12, Node.COLUMN_BITS);
1288:       assertEquals(32, Node.INCRDECR_PROP);
1289:       assertEquals(46, Node.IS_NAMESPACE);
1290:       assertEquals(4095, Node.COLUMN_MASK);
1291:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1292:       assertEquals(1, Node.DECR_FLAG);
1293:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1294:       
1295:       node0.setInputId((InputId) null);
1296:       assertFalse(node0.equals((Object)node1));
1297:       assertTrue(node0.isNumber());
1298:       assertFalse(node0.isCase());
1299:       assertFalse(node0.isSwitch());
1300:       assertFalse(node0.isNE());
1301:       assertEquals((-1), node0.getCharno());
1302:       assertFalse(node0.isInc());
1303:       assertFalse(node0.isEmpty());
1304:       assertFalse(node0.isString());
1305:       assertFalse(node0.isIn());
1306:       assertFalse(node0.isGetterDef());
1307:       assertFalse(node0.isArrayLit());
1308:       assertFalse(node0.isThrow());
1309:       assertFalse(node0.isFalse());
1310:       assertFalse(node0.isFunction());
1311:       assertFalse(node0.isAnd());
1312:       assertFalse(node0.isDefaultCase());
1313:       assertFalse(node0.isDebugger());
1314:       assertFalse(node0.isGetProp());
1315:       assertFalse(node0.isNull());
1316:       assertFalse(node0.isTrue());
1317:       assertFalse(node0.isNot());
1318:       assertFalse(node0.isObjectLit());
1319:       assertFalse(node0.isCall());
1320:       assertFalse(node0.isGetElem());
1321:       assertFalse(node0.isVoid());
1322:       assertFalse(node0.isName());
1323:       assertFalse(node0.isDelProp());
1324:       assertFalse(node0.isComma());
1325:       assertFalse(node0.isBreak());
1326:       assertFalse(node0.hasChildren());
1327:       assertFalse(node0.isExprResult());
1328:       assertFalse(node0.isAssign());
1329:       assertFalse(node0.isDec());
1330:       assertFalse(node0.isTypeOf());
1331:       assertFalse(node0.hasMoreThanOneChild());
1332:       assertFalse(node0.isContinue());
1333:       assertFalse(node0.isReturn());
1334:       assertFalse(node0.isAssignAdd());
1335:       assertFalse(node0.isDo());
1336:       assertFalse(node0.isWhile());
1337:       assertEquals((-1), node0.getLineno());
1338:       assertEquals((-1), node0.getSourcePosition());
1339:       assertFalse(node0.isAdd());
1340:       assertFalse(node0.isOr());
1341:       assertFalse(node0.isVar());
1342:       assertFalse(node0.isCast());
1343:       assertFalse(node0.isStringKey());
1344:       assertFalse(node0.isLabelName());
1345:       assertFalse(node0.isNew());
1346:       assertFalse(node0.isLabel());
1347:       assertEquals(0, node0.getChildCount());
1348:       assertFalse(node0.isCatch());
1349:       assertFalse(node0.isInstanceOf());
1350:       assertFalse(node0.isSetterDef());
1351:       assertFalse(node0.isParamList());
1352:       assertFalse(node0.isScript());
1353:       assertFalse(node0.hasOneChild());
1354:       assertFalse(node0.isHook());
1355:       assertFalse(node0.isFor());
1356:       assertFalse(node0.isTry());
1357:       assertFalse(node0.isIf());
1358:       assertFalse(node0.isThis());
1359:       assertFalse(node0.isBlock());
1360:       assertEquals(39, node0.getType());
1361:       assertFalse(node0.isWith());
1362:       assertFalse(node0.isRegExp());
1363:       assertEquals(32, Node.INCRDECR_PROP);
1364:       assertEquals(46, Node.IS_NAMESPACE);
1365:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1366:       assertEquals(12, Node.COLUMN_BITS);
1367:       assertEquals(2, Node.POST_FLAG);
1368:       assertEquals(56, Node.CHANGE_TIME);
1369:       assertEquals(37, Node.OPT_ARG_NAME);
1370:       assertEquals(54, Node.SLASH_V);
1371:       assertEquals(49, Node.DIRECT_EVAL);
1372:       assertEquals(53, Node.INPUT_ID);
1373:       assertEquals(57, Node.REFLECTED_OBJECT);
1374:       assertEquals(40, Node.ORIGINALNAME_PROP);
1375:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1376:       assertEquals(52, Node.LENGTH);
1377:       assertEquals(30, Node.VAR_ARGS_NAME);
1378:       assertEquals(29, Node.JSDOC_INFO_PROP);
1379:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1380:       assertEquals(39, Node.EMPTY_BLOCK);
1381:       assertEquals(47, Node.IS_DISPATCHER);
1382:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1383:       assertEquals(57, Node.LAST_PROP);
1384:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1385:       assertEquals(55, Node.INFERRED_FUNCTION);
1386:       assertEquals(4095, Node.COLUMN_MASK);
1387:       assertEquals(8, Node.FLAG_NO_THROWS);
1388:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1389:       assertEquals(36, Node.QUOTED_PROP);
1390:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1391:       assertEquals(48, Node.DIRECTIVES);
1392:       assertEquals(43, Node.IS_CONSTANT_NAME);
1393:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1394:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1395:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1396:       assertEquals(50, Node.FREE_CALL);
1397:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1398:       assertEquals(1, Node.DECR_FLAG);
1399:       
1400:       node0.setType(46);
1401:       assertFalse(node0.equals((Object)node1));
1402:       assertFalse(node0.isCase());
1403:       assertFalse(node0.isSwitch());
1404:       assertFalse(node0.isNE());
1405:       assertEquals((-1), node0.getCharno());
1406:       assertFalse(node0.isInc());
1407:       assertFalse(node0.isEmpty());
1408:       assertFalse(node0.isString());
1409:       assertFalse(node0.isIn());
1410:       assertFalse(node0.isGetterDef());
1411:       assertFalse(node0.isArrayLit());
1412:       assertFalse(node0.isThrow());
1413:       assertFalse(node0.isFalse());
1414:       assertFalse(node0.isFunction());
1415:       assertFalse(node0.isAnd());
1416:       assertEquals(46, node0.getType());
1417:       assertFalse(node0.isDefaultCase());
1418:       assertFalse(node0.isDebugger());
1419:       assertFalse(node0.isGetProp());
1420:       assertFalse(node0.isNull());
1421:       assertFalse(node0.isTrue());
1422:       assertFalse(node0.isNot());
1423:       assertFalse(node0.isObjectLit());
1424:       assertFalse(node0.isCall());
1425:       assertFalse(node0.isGetElem());
1426:       assertFalse(node0.isVoid());
1427:       assertFalse(node0.isName());
1428:       assertFalse(node0.isDelProp());
1429:       assertFalse(node0.isComma());
1430:       assertFalse(node0.isBreak());
1431:       assertFalse(node0.hasChildren());
1432:       assertFalse(node0.isExprResult());
1433:       assertFalse(node0.isAssign());
1434:       assertFalse(node0.isDec());
1435:       assertFalse(node0.isTypeOf());
1436:       assertFalse(node0.hasMoreThanOneChild());
1437:       assertFalse(node0.isContinue());
1438:       assertFalse(node0.isReturn());
1439:       assertFalse(node0.isAssignAdd());
1440:       assertFalse(node0.isDo());
1441:       assertFalse(node0.isWhile());
1442:       assertEquals((-1), node0.getLineno());
1443:       assertEquals((-1), node0.getSourcePosition());
1444:       assertFalse(node0.isAdd());
1445:       assertFalse(node0.isOr());
1446:       assertFalse(node0.isNumber());
1447:       assertFalse(node0.isVar());
1448:       assertFalse(node0.isCast());
1449:       assertFalse(node0.isStringKey());
1450:       assertFalse(node0.isLabelName());
1451:       assertFalse(node0.isNew());
1452:       assertFalse(node0.isLabel());
1453:       assertEquals(0, node0.getChildCount());
1454:       assertFalse(node0.isCatch());
1455:       assertFalse(node0.isInstanceOf());
1456:       assertFalse(node0.isSetterDef());
1457:       assertFalse(node0.isParamList());
1458:       assertFalse(node0.isScript());
1459:       assertFalse(node0.hasOneChild());
1460:       assertFalse(node0.isHook());
1461:       assertFalse(node0.isFor());
1462:       assertFalse(node0.isTry());
1463:       assertFalse(node0.isIf());
1464:       assertFalse(node0.isThis());
1465:       assertFalse(node0.isBlock());
1466:       assertFalse(node0.isWith());
1467:       assertFalse(node0.isRegExp());
1468:       assertEquals(32, Node.INCRDECR_PROP);
1469:       assertEquals(46, Node.IS_NAMESPACE);
1470:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1471:       assertEquals(12, Node.COLUMN_BITS);
1472:       assertEquals(2, Node.POST_FLAG);
1473:       assertEquals(56, Node.CHANGE_TIME);
1474:       assertEquals(37, Node.OPT_ARG_NAME);
1475:       assertEquals(54, Node.SLASH_V);
1476:       assertEquals(49, Node.DIRECT_EVAL);
1477:       assertEquals(53, Node.INPUT_ID);
1478:       assertEquals(57, Node.REFLECTED_OBJECT);
1479:       assertEquals(40, Node.ORIGINALNAME_PROP);
1480:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1481:       assertEquals(52, Node.LENGTH);
1482:       assertEquals(30, Node.VAR_ARGS_NAME);
1483:       assertEquals(29, Node.JSDOC_INFO_PROP);
1484:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1485:       assertEquals(39, Node.EMPTY_BLOCK);
1486:       assertEquals(47, Node.IS_DISPATCHER);
1487:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1488:       assertEquals(57, Node.LAST_PROP);
1489:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1490:       assertEquals(55, Node.INFERRED_FUNCTION);
1491:       assertEquals(4095, Node.COLUMN_MASK);
1492:       assertEquals(8, Node.FLAG_NO_THROWS);
1493:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1494:       assertEquals(36, Node.QUOTED_PROP);
1495:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1496:       assertEquals(48, Node.DIRECTIVES);
1497:       assertEquals(43, Node.IS_CONSTANT_NAME);
1498:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1499:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1500:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1501:       assertEquals(50, Node.FREE_CALL);
1502:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1503:       assertEquals(1, Node.DECR_FLAG);
1504:       
1505:       boolean boolean5 = node1.hasChildren();
1506:       assertFalse(node1.equals((Object)node0));
1507:       assertTrue(boolean5 == boolean3);
1508:       assertTrue(boolean5 == boolean1);
1509:       assertTrue(boolean5 == boolean2);
1510:       assertTrue(boolean5 == boolean4);
1511:       assertTrue(boolean5 == boolean0);
1512:       assertFalse(node1.isCall());
1513:       assertFalse(node1.isStringKey());
1514:       assertFalse(node1.isVar());
1515:       assertFalse(node1.isName());
1516:       assertFalse(node1.isParamList());
1517:       assertFalse(node1.isNull());
1518:       assertFalse(node1.isAdd());
1519:       assertFalse(node1.isNew());
1520:       assertFalse(node1.isSetterDef());
1521:       assertFalse(node1.isContinue());
1522:       assertEquals(38, node1.getCharno());
1523:       assertFalse(node1.isDo());
1524:       assertFalse(node1.isAssignAdd());
1525:       assertFalse(node1.isDefaultCase());
1526:       assertFalse(node1.isFunction());
1527:       assertFalse(node1.isLabel());
1528:       assertEquals(0, node1.getChildCount());
1529:       assertEquals(4, node1.getLineno());
1530:       assertFalse(node1.isCast());
1531:       assertFalse(node1.isEmpty());
1532:       assertFalse(node1.isGetElem());
1533:       assertFalse(node1.isDelProp());
1534:       assertFalse(node1.isTrue());
1535:       assertFalse(node1.isDebugger());
1536:       assertFalse(node1.isOr());
1537:       assertFalse(node1.isNot());
1538:       assertFalse(node1.isWhile());
1539:       assertFalse(node1.isExprResult());
1540:       assertFalse(node1.isVoid());
1541:       assertFalse(node1.isComma());
1542:       assertEquals(0, node1.getType());
1543:       assertFalse(node1.isBreak());
1544:       assertFalse(node1.hasChildren());
1545:       assertFalse(node1.isReturn());
1546:       assertFalse(node1.isDec());
1547:       assertFalse(node1.isAssign());
1548:       assertFalse(node1.isTypeOf());
1549:       assertFalse(node1.isThrow());
1550:       assertFalse(node1.isHook());
1551:       assertFalse(node1.isInc());
1552:       assertFalse(node1.isGetProp());
1553:       assertFalse(node1.isString());
1554:       assertFalse(node1.isObjectLit());
1555:       assertFalse(node1.isAnd());
1556:       assertFalse(node1.isSwitch());
1557:       assertFalse(node1.isFalse());
1558:       assertFalse(node1.isArrayLit());
1559:       assertFalse(node1.isFor());
1560:       assertFalse(node1.isLabelName());
1561:       assertFalse(node1.hasOneChild());
1562:       assertFalse(node1.isTry());
1563:       assertFalse(node1.isIf());
1564:       assertFalse(node1.isNE());
1565:       assertEquals(16422, node1.getSourcePosition());
1566:       assertFalse(node1.isScript());
1567:       assertFalse(node1.isGetterDef());
1568:       assertFalse(node1.isNumber());
1569:       assertFalse(node1.isIn());
1570:       assertFalse(node1.isCatch());
1571:       assertFalse(node1.isCase());
1572:       assertFalse(node1.isBlock());
1573:       assertFalse(node1.isThis());
1574:       assertFalse(node1.isInstanceOf());
1575:       assertFalse(node1.isRegExp());
1576:       assertFalse(node1.hasMoreThanOneChild());
1577:       assertFalse(node1.isWith());
1578:       assertFalse(boolean5);
1579:       assertEquals(57, Node.REFLECTED_OBJECT);
1580:       assertEquals(40, Node.ORIGINALNAME_PROP);
1581:       assertEquals(50, Node.FREE_CALL);
1582:       assertEquals(52, Node.LENGTH);
1583:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1585:       assertEquals(48, Node.DIRECTIVES);
1586:       assertEquals(49, Node.DIRECT_EVAL);
1587:       assertEquals(54, Node.SLASH_V);
1588:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1589:       assertEquals(55, Node.INFERRED_FUNCTION);
1590:       assertEquals(8, Node.FLAG_NO_THROWS);
1591:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1592:       assertEquals(57, Node.LAST_PROP);
1593:       assertEquals(47, Node.IS_DISPATCHER);
1594:       assertEquals(2, Node.POST_FLAG);
1595:       assertEquals(30, Node.VAR_ARGS_NAME);
1596:       assertEquals(39, Node.EMPTY_BLOCK);
1597:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1598:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1599:       assertEquals(29, Node.JSDOC_INFO_PROP);
1600:       assertEquals(53, Node.INPUT_ID);
1601:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1602:       assertEquals(43, Node.IS_CONSTANT_NAME);
1603:       assertEquals(56, Node.CHANGE_TIME);
1604:       assertEquals(37, Node.OPT_ARG_NAME);
1605:       assertEquals(36, Node.QUOTED_PROP);
1606:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1607:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1608:       assertEquals(12, Node.COLUMN_BITS);
1609:       assertEquals(32, Node.INCRDECR_PROP);
1610:       assertEquals(46, Node.IS_NAMESPACE);
1611:       assertEquals(4095, Node.COLUMN_MASK);
1612:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1613:       assertEquals(1, Node.DECR_FLAG);
1614:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1615:       
1616:       Node node2 = new Node((-1872), node1, (-264), 0);
1617:       assertFalse(node1.equals((Object)node0));
1618:       assertFalse(node2.equals((Object)node0));
1619:       assertFalse(node2.equals((Object)node1));
1620:       assertFalse(node1.isCall());
1621:       assertFalse(node1.isStringKey());
1622:       assertFalse(node1.isVar());
1623:       assertFalse(node1.isName());
1624:       assertFalse(node1.isParamList());
1625:       assertFalse(node1.isNull());
1626:       assertFalse(node1.isAdd());
1627:       assertFalse(node1.isNew());
1628:       assertFalse(node1.isSetterDef());
1629:       assertFalse(node1.isContinue());
1630:       assertEquals(38, node1.getCharno());
1631:       assertFalse(node1.isDo());
1632:       assertFalse(node1.isAssignAdd());
1633:       assertFalse(node1.isDefaultCase());
1634:       assertFalse(node1.isFunction());
1635:       assertFalse(node1.isLabel());
1636:       assertEquals(0, node1.getChildCount());
1637:       assertEquals(4, node1.getLineno());
1638:       assertFalse(node1.isCast());
1639:       assertFalse(node1.isEmpty());
1640:       assertFalse(node1.isGetElem());
1641:       assertFalse(node1.isDelProp());
1642:       assertFalse(node1.isTrue());
1643:       assertFalse(node1.isDebugger());
1644:       assertFalse(node1.isOr());
1645:       assertFalse(node1.isNot());
1646:       assertFalse(node1.isWhile());
1647:       assertFalse(node1.isExprResult());
1648:       assertFalse(node1.isVoid());
1649:       assertFalse(node1.isComma());
1650:       assertEquals(0, node1.getType());
1651:       assertFalse(node1.isBreak());
1652:       assertFalse(node1.hasChildren());
1653:       assertFalse(node1.isReturn());
1654:       assertFalse(node1.isDec());
1655:       assertFalse(node1.isAssign());
1656:       assertFalse(node1.isTypeOf());
1657:       assertFalse(node1.isThrow());
1658:       assertFalse(node1.isHook());
1659:       assertFalse(node1.isInc());
1660:       assertFalse(node1.isGetProp());
1661:       assertFalse(node1.isString());
1662:       assertFalse(node1.isObjectLit());
1663:       assertFalse(node1.isAnd());
1664:       assertFalse(node1.isSwitch());
1665:       assertFalse(node1.isFalse());
1666:       assertFalse(node1.isArrayLit());
1667:       assertFalse(node1.isFor());
1668:       assertFalse(node1.isLabelName());
1669:       assertFalse(node1.hasOneChild());
1670:       assertFalse(node1.isTry());
1671:       assertFalse(node1.isIf());
1672:       assertFalse(node1.isNE());
1673:       assertEquals(16422, node1.getSourcePosition());
1674:       assertFalse(node1.isScript());
1675:       assertFalse(node1.isGetterDef());
1676:       assertFalse(node1.isNumber());
1677:       assertFalse(node1.isIn());
1678:       assertFalse(node1.isCatch());
1679:       assertFalse(node1.isCase());
1680:       assertFalse(node1.isBlock());
1681:       assertFalse(node1.isThis());
1682:       assertFalse(node1.isInstanceOf());
1683:       assertFalse(node1.isRegExp());
1684:       assertFalse(node1.hasMoreThanOneChild());
1685:       assertFalse(node1.isWith());
1686:       assertFalse(node2.isNot());
1687:       assertEquals((-1), node2.getSourcePosition());
1688:       assertFalse(node2.isScript());
1689:       assertFalse(node2.isObjectLit());
1690:       assertFalse(node2.isNumber());
1691:       assertFalse(node2.isLabel());
1692:       assertFalse(node2.isAssignAdd());
1693:       assertFalse(node2.isAnd());
1694:       assertFalse(node2.isLabelName());
1695:       assertFalse(node2.isCast());
1696:       assertFalse(node2.isFalse());
1697:       assertFalse(node2.isContinue());
1698:       assertFalse(node2.isBlock());
1699:       assertFalse(node2.isHook());
1700:       assertEquals((-1), node2.getCharno());
1701:       assertFalse(node2.isSwitch());
1702:       assertFalse(node2.isStringKey());
1703:       assertFalse(node2.isThrow());
1704:       assertFalse(node2.isCase());
1705:       assertFalse(node2.isSetterDef());
1706:       assertFalse(node2.isInc());
1707:       assertFalse(node2.isIn());
1708:       assertEquals((-1), node2.getLineno());
1709:       assertTrue(node2.hasChildren());
1710:       assertEquals(1, node2.getChildCount());
1711:       assertFalse(node2.isThis());
1712:       assertFalse(node2.isNE());
1713:       assertFalse(node2.isIf());
1714:       assertFalse(node2.isWith());
1715:       assertFalse(node2.isFor());
1716:       assertFalse(node2.hasMoreThanOneChild());
1717:       assertFalse(node2.isCatch());
1718:       assertFalse(node2.isRegExp());
1719:       assertFalse(node2.isInstanceOf());
1720:       assertFalse(node2.isTry());
1721:       assertFalse(node2.isArrayLit());
1722:       assertFalse(node2.isDebugger());
1723:       assertFalse(node2.isTrue());
1724:       assertFalse(node2.isVoid());
1725:       assertFalse(node2.isDefaultCase());
1726:       assertFalse(node2.isGetterDef());
1727:       assertFalse(node2.isEmpty());
1728:       assertEquals((-1872), node2.getType());
1729:       assertFalse(node2.isParamList());
1730:       assertFalse(node2.isFunction());
1731:       assertFalse(node2.isAdd());
1732:       assertFalse(node2.isNew());
1733:       assertFalse(node2.isVar());
1734:       assertFalse(node2.isWhile());
1735:       assertFalse(node2.isDo());
1736:       assertFalse(node2.isString());
1737:       assertFalse(node2.isOr());
1738:       assertFalse(node2.isReturn());
1739:       assertFalse(node2.isGetProp());
1740:       assertFalse(node2.isNull());
1741:       assertTrue(node2.hasOneChild());
1742:       assertFalse(node2.isName());
1743:       assertFalse(node2.isDelProp());
1744:       assertFalse(node2.isAssign());
1745:       assertFalse(node2.isDec());
1746:       assertFalse(node2.isGetElem());
1747:       assertFalse(node2.isBreak());
1748:       assertFalse(node2.isComma());
1749:       assertFalse(node2.isCall());
1750:       assertFalse(node2.isExprResult());
1751:       assertFalse(node2.isTypeOf());
1752:       assertEquals(57, Node.REFLECTED_OBJECT);
1753:       assertEquals(40, Node.ORIGINALNAME_PROP);
1754:       assertEquals(50, Node.FREE_CALL);
1755:       assertEquals(52, Node.LENGTH);
1756:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1757:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1758:       assertEquals(48, Node.DIRECTIVES);
1759:       assertEquals(49, Node.DIRECT_EVAL);
1760:       assertEquals(54, Node.SLASH_V);
1761:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1762:       assertEquals(55, Node.INFERRED_FUNCTION);
1763:       assertEquals(8, Node.FLAG_NO_THROWS);
1764:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1765:       assertEquals(57, Node.LAST_PROP);
1766:       assertEquals(47, Node.IS_DISPATCHER);
1767:       assertEquals(2, Node.POST_FLAG);
1768:       assertEquals(30, Node.VAR_ARGS_NAME);
1769:       assertEquals(39, Node.EMPTY_BLOCK);
1770:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1771:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1772:       assertEquals(29, Node.JSDOC_INFO_PROP);
1773:       assertEquals(53, Node.INPUT_ID);
1774:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1775:       assertEquals(43, Node.IS_CONSTANT_NAME);
1776:       assertEquals(56, Node.CHANGE_TIME);
1777:       assertEquals(37, Node.OPT_ARG_NAME);
1778:       assertEquals(36, Node.QUOTED_PROP);
1779:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1780:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1781:       assertEquals(12, Node.COLUMN_BITS);
1782:       assertEquals(32, Node.INCRDECR_PROP);
1783:       assertEquals(46, Node.IS_NAMESPACE);
1784:       assertEquals(4095, Node.COLUMN_MASK);
1785:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1786:       assertEquals(1, Node.DECR_FLAG);
1787:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1788:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1789:       assertEquals(53, Node.INPUT_ID);
1790:       assertEquals(36, Node.QUOTED_PROP);
1791:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1792:       assertEquals(43, Node.IS_CONSTANT_NAME);
1793:       assertEquals(56, Node.CHANGE_TIME);
1794:       assertEquals(8, Node.FLAG_NO_THROWS);
1795:       assertEquals(39, Node.EMPTY_BLOCK);
1796:       assertEquals(2, Node.POST_FLAG);
1797:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1798:       assertEquals(29, Node.JSDOC_INFO_PROP);
1799:       assertEquals(55, Node.INFERRED_FUNCTION);
1800:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1801:       assertEquals(30, Node.VAR_ARGS_NAME);
1802:       assertEquals(57, Node.LAST_PROP);
1803:       assertEquals(47, Node.IS_DISPATCHER);
1804:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1805:       assertEquals(54, Node.SLASH_V);
1806:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1807:       assertEquals(52, Node.LENGTH);
1808:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1809:       assertEquals(40, Node.ORIGINALNAME_PROP);
1810:       assertEquals(49, Node.DIRECT_EVAL);
1811:       assertEquals(50, Node.FREE_CALL);
1812:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1813:       assertEquals(46, Node.IS_NAMESPACE);
1814:       assertEquals(57, Node.REFLECTED_OBJECT);
1815:       assertEquals(48, Node.DIRECTIVES);
1816:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1817:       assertEquals(37, Node.OPT_ARG_NAME);
1818:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1819:       assertEquals(4095, Node.COLUMN_MASK);
1820:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1821:       assertEquals(1, Node.DECR_FLAG);
1822:       assertEquals(32, Node.INCRDECR_PROP);
1823:       assertEquals(12, Node.COLUMN_BITS);
1824:       assertNotNull(node2);
1825:       
1826:       // Undeclared exception!
1827:       try { 
1828:         node2.getChildBefore(node0);
1829:         fail("Expecting exception: RuntimeException");
1830:       
1831:       } catch(RuntimeException e) {
1832:          //
1833:          // node is not a child
1834:          //
1835:          verifyException("com.google.javascript.rhino.Node", e);
1836:       }
1837:   }
1838: }
RegularFileObject[/tmp/EvoSuite_98_1629222887855/com/google/javascript/rhino/Node_98_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:48 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_98_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_98_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.common.collect.Iterables",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.common.collect.AbstractMultimap$Values",
132:       "com.google.javascript.rhino.jstype.ProxyObjectType",
133:       "com.google.common.collect.Sets$SetView",
134:       "com.google.common.collect.RegularImmutableAsList",
135:       "com.google.javascript.rhino.jstype.TemplateType",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMultimap$Entries",
190:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
191:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
192:       "com.google.javascript.rhino.jstype.EnumElementType",
193:       "com.google.javascript.rhino.jstype.UnionType",
194:       "com.google.common.base.Objects",
195:       "com.google.javascript.rhino.Node$NumberNode",
196:       "com.google.common.collect.SingletonImmutableList",
197:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
198:       "com.google.common.collect.ImmutableCollection$Builder",
199:       "com.google.javascript.rhino.jstype.StaticSlot",
200:       "com.google.common.collect.Iterators$6",
201:       "com.google.common.collect.BiMap",
202:       "com.google.common.collect.Iterators$7",
203:       "com.google.common.collect.AbstractSetMultimap",
204:       "com.google.common.base.Function",
205:       "com.google.common.collect.ImmutableSet",
206:       "com.google.common.collect.Lists$AbstractListWrapper",
207:       "com.google.common.collect.ImmutableMap",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.Maps$1",
211:       "com.google.javascript.rhino.jstype.EnumType",
212:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.Multimaps$Entries",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
236:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
237:       "com.google.common.collect.ImmutableList",
238:       "com.google.common.collect.SingletonImmutableBiMap",
239:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
240:       "com.google.javascript.rhino.jstype.StringType",
241:       "com.google.javascript.rhino.Node$AbstractPropListItem",
242:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
243:       "com.google.javascript.rhino.jstype.TemplatizedType",
244:       "com.google.javascript.rhino.jstype.Visitor",
245:       "com.google.javascript.rhino.jstype.NoResolvedType",
246:       "com.google.javascript.rhino.jstype.JSTypeNative",
247:       "com.google.javascript.rhino.jstype.AllType",
248:       "com.google.common.collect.Maps",
249:       "com.google.common.collect.SetMultimap",
250:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
251:       "com.google.common.collect.Maps$EntryTransformer",
252:       "com.google.javascript.rhino.JSTypeExpression",
253:       "com.google.common.collect.Iterators$MergingIterator"
254:     );
255:   } 
256: 
257:   private static void resetClasses() {
258:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_98_tmp__ESTest_scaffolding.class.getClassLoader()); 
259: 
260:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
261:       "com.google.javascript.rhino.Node",
262:       "com.google.javascript.rhino.Node$NumberNode",
263:       "com.google.javascript.rhino.Node$StringNode",
264:       "com.google.javascript.rhino.Node$AbstractPropListItem",
265:       "com.google.javascript.rhino.Node$ObjectPropListItem",
266:       "com.google.javascript.rhino.Node$IntPropListItem",
267:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
268:       "com.google.javascript.rhino.Node$AncestorIterable",
269:       "com.google.javascript.rhino.Node$NodeMismatch",
270:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
271:       "com.google.javascript.rhino.Node$SideEffectFlags",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.Token",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.base.Objects",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
352:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.common.collect.AbstractIndexedListIterator",
362:       "com.google.common.collect.Iterators$11",
363:       "com.google.javascript.rhino.Node$AncestorIterable$1",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.InputId",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.javascript.rhino.JSTypeExpression",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.Sets$ImprovedAbstractSet",
375:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
376:       "com.google.common.collect.Hashing",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
378:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
379:       "com.google.common.collect.Platform"
380:     );
381:   }
382: }

[MASTER] 17:54:48.422 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node0);

Node node1 = Node.newString(0, "", 4, 38);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node1);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node_NodeMismatch0);

boolean boolean0 = node_NodeMismatch0.equals("");
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(boolean1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean2 = node1.isVarArgs();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(boolean2);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);

boolean boolean3 = node0.isIf();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(boolean3);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

boolean boolean4 = node1.isVoid();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(boolean4);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

node0.setInputId((InputId) null);
assertFalse(node0.equals((Object)node1));
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

node0.setType(46);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isAnd());
assertEquals(46, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

boolean boolean5 = node1.hasChildren();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(boolean5);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node2 = new Node((-1872), node1, (-264), 0);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isOr());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertEquals((-1872), node2.getType());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isString());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertTrue(node2.hasOneChild());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node2);

node2.getChildBefore(node0);

[MASTER] 17:55:00.987 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_139_1629222900286/com/google/javascript/rhino/Node_139_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_139_1629222900286/com/google/javascript/rhino/Node_139_tmp__ESTest_scaffolding.java]]
[MASTER] 17:55:01.006 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:01.013 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:01.014 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1289
[MASTER] 17:55:01.020 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_139_1629222900286/com/google/javascript/rhino/Node_139_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:55:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_139_tmp__ESTest extends Node_139_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber((-1.0));
23:       assertFalse(node0.isBreak());
24:       assertFalse(node0.isComma());
25:       assertFalse(node0.isFalse());
26:       assertFalse(node0.isGetProp());
27:       assertFalse(node0.isObjectLit());
28:       assertEquals((-1), node0.getCharno());
29:       assertFalse(node0.isAnd());
30:       assertFalse(node0.isString());
31:       assertFalse(node0.isWith());
32:       assertFalse(node0.isNot());
33:       assertFalse(node0.isCase());
34:       assertFalse(node0.isScript());
35:       assertFalse(node0.isExprResult());
36:       assertFalse(node0.isInstanceOf());
37:       assertFalse(node0.hasOneChild());
38:       assertFalse(node0.isHook());
39:       assertTrue(node0.isNumber());
40:       assertFalse(node0.isThis());
41:       assertFalse(node0.isDec());
42:       assertFalse(node0.hasChildren());
43:       assertFalse(node0.isLabelName());
44:       assertFalse(node0.isGetterDef());
45:       assertFalse(node0.isDelProp());
46:       assertFalse(node0.isAssign());
47:       assertFalse(node0.isTypeOf());
48:       assertFalse(node0.isGetElem());
49:       assertFalse(node0.isEmpty());
50:       assertFalse(node0.isArrayLit());
51:       assertFalse(node0.isOr());
52:       assertFalse(node0.isTrue());
53:       assertFalse(node0.isDefaultCase());
54:       assertFalse(node0.isSwitch());
55:       assertFalse(node0.isDo());
56:       assertFalse(node0.isNew());
57:       assertFalse(node0.isAdd());
58:       assertEquals(0, node0.getChildCount());
59:       assertFalse(node0.isLabel());
60:       assertFalse(node0.isAssignAdd());
61:       assertFalse(node0.isVar());
62:       assertFalse(node0.isName());
63:       assertFalse(node0.isSetterDef());
64:       assertFalse(node0.isCall());
65:       assertFalse(node0.isStringKey());
66:       assertFalse(node0.isParamList());
67:       assertFalse(node0.isNull());
68:       assertFalse(node0.isWhile());
69:       assertFalse(node0.isRegExp());
70:       assertFalse(node0.isVoid());
71:       assertFalse(node0.isCatch());
72:       assertFalse(node0.hasMoreThanOneChild());
73:       assertFalse(node0.isTry());
74:       assertFalse(node0.isBlock());
75:       assertEquals(39, node0.getType());
76:       assertFalse(node0.isReturn());
77:       assertFalse(node0.isFor());
78:       assertFalse(node0.isIf());
79:       assertEquals((-1), node0.getSourcePosition());
80:       assertFalse(node0.isCast());
81:       assertFalse(node0.isIn());
82:       assertEquals((-1), node0.getLineno());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isNE());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isInc());
88:       assertFalse(node0.isThrow());
89:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
90:       assertEquals(50, Node.FREE_CALL);
91:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
92:       assertEquals(57, Node.REFLECTED_OBJECT);
93:       assertEquals(48, Node.DIRECTIVES);
94:       assertEquals(4095, Node.COLUMN_MASK);
95:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
96:       assertEquals(40, Node.ORIGINALNAME_PROP);
97:       assertEquals(1, Node.DECR_FLAG);
98:       assertEquals(12, Node.COLUMN_BITS);
99:       assertEquals(43, Node.IS_CONSTANT_NAME);
100:       assertEquals(51, Node.STATIC_SOURCE_FILE);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(54, Node.SLASH_V);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
106:       assertEquals(29, Node.JSDOC_INFO_PROP);
107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
108:       assertEquals(2, Node.POST_FLAG);
109:       assertEquals(56, Node.CHANGE_TIME);
110:       assertEquals(47, Node.IS_DISPATCHER);
111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
112:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
113:       assertEquals(37, Node.OPT_ARG_NAME);
114:       assertEquals(30, Node.VAR_ARGS_NAME);
115:       assertEquals(49, Node.DIRECT_EVAL);
116:       assertEquals(57, Node.LAST_PROP);
117:       assertEquals(36, Node.QUOTED_PROP);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(8, Node.FLAG_NO_THROWS);
120:       assertEquals(55, Node.INFERRED_FUNCTION);
121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
123:       assertEquals(39, Node.EMPTY_BLOCK);
124:       assertEquals(53, Node.INPUT_ID);
125:       assertNotNull(node0);
126:       
127:       Node node1 = Node.newString((-1778), "", 15, 64);
128:       assertFalse(node1.equals((Object)node0));
129:       assertFalse(node1.isIn());
130:       assertEquals(61504, node1.getSourcePosition());
131:       assertFalse(node1.isNE());
132:       assertFalse(node1.isSwitch());
133:       assertFalse(node1.isIf());
134:       assertFalse(node1.isDelProp());
135:       assertFalse(node1.isGetterDef());
136:       assertFalse(node1.isFor());
137:       assertFalse(node1.isHook());
138:       assertFalse(node1.isThis());
139:       assertFalse(node1.isDebugger());
140:       assertFalse(node1.isString());
141:       assertFalse(node1.isTry());
142:       assertFalse(node1.isCase());
143:       assertFalse(node1.isGetProp());
144:       assertFalse(node1.isObjectLit());
145:       assertFalse(node1.isCatch());
146:       assertFalse(node1.isInstanceOf());
147:       assertFalse(node1.isWith());
148:       assertFalse(node1.isAnd());
149:       assertFalse(node1.isNot());
150:       assertFalse(node1.isFunction());
151:       assertFalse(node1.isRegExp());
152:       assertFalse(node1.isThrow());
153:       assertFalse(node1.isCast());
154:       assertFalse(node1.isFalse());
155:       assertFalse(node1.isSetterDef());
156:       assertFalse(node1.isInc());
157:       assertFalse(node1.isContinue());
158:       assertFalse(node1.hasMoreThanOneChild());
159:       assertFalse(node1.isWhile());
160:       assertFalse(node1.isReturn());
161:       assertFalse(node1.isOr());
162:       assertFalse(node1.isLabel());
163:       assertFalse(node1.isTypeOf());
164:       assertFalse(node1.isLabelName());
165:       assertFalse(node1.isGetElem());
166:       assertFalse(node1.isCall());
167:       assertFalse(node1.isStringKey());
168:       assertFalse(node1.isAssign());
169:       assertFalse(node1.isBlock());
170:       assertFalse(node1.isDec());
171:       assertFalse(node1.hasChildren());
172:       assertFalse(node1.isScript());
173:       assertFalse(node1.isNumber());
174:       assertEquals(15, node1.getLineno());
175:       assertFalse(node1.hasOneChild());
176:       assertEquals((-1778), node1.getType());
177:       assertEquals(0, node1.getChildCount());
178:       assertFalse(node1.isParamList());
179:       assertEquals(64, node1.getCharno());
180:       assertFalse(node1.isExprResult());
181:       assertFalse(node1.isTrue());
182:       assertFalse(node1.isComma());
183:       assertFalse(node1.isVoid());
184:       assertFalse(node1.isArrayLit());
185:       assertFalse(node1.isBreak());
186:       assertFalse(node1.isVar());
187:       assertFalse(node1.isName());
188:       assertFalse(node1.isNull());
189:       assertFalse(node1.isAssignAdd());
190:       assertFalse(node1.isDefaultCase());
191:       assertFalse(node1.isDo());
192:       assertFalse(node1.isEmpty());
193:       assertFalse(node1.isAdd());
194:       assertFalse(node1.isNew());
195:       assertEquals(12, Node.COLUMN_BITS);
196:       assertEquals(32, Node.INCRDECR_PROP);
197:       assertEquals(46, Node.IS_NAMESPACE);
198:       assertEquals(1, Node.DECR_FLAG);
199:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
200:       assertEquals(49, Node.DIRECT_EVAL);
201:       assertEquals(37, Node.OPT_ARG_NAME);
202:       assertEquals(57, Node.LAST_PROP);
203:       assertEquals(47, Node.IS_DISPATCHER);
204:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
205:       assertEquals(2, Node.POST_FLAG);
206:       assertEquals(30, Node.VAR_ARGS_NAME);
207:       assertEquals(40, Node.ORIGINALNAME_PROP);
208:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
209:       assertEquals(43, Node.IS_CONSTANT_NAME);
210:       assertEquals(50, Node.FREE_CALL);
211:       assertEquals(54, Node.SLASH_V);
212:       assertEquals(51, Node.STATIC_SOURCE_FILE);
213:       assertEquals(55, Node.INFERRED_FUNCTION);
214:       assertEquals(4095, Node.COLUMN_MASK);
215:       assertEquals(48, Node.DIRECTIVES);
216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
217:       assertEquals(39, Node.EMPTY_BLOCK);
218:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
219:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
220:       assertEquals(57, Node.REFLECTED_OBJECT);
221:       assertEquals(52, Node.LENGTH);
222:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
223:       assertEquals(29, Node.JSDOC_INFO_PROP);
224:       assertEquals(53, Node.INPUT_ID);
225:       assertEquals(56, Node.CHANGE_TIME);
226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
227:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
228:       assertEquals(8, Node.FLAG_NO_THROWS);
229:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
230:       assertEquals(36, Node.QUOTED_PROP);
231:       assertNotNull(node1);
232:       
233:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
234:       assertFalse(node0.equals((Object)node1));
235:       assertFalse(node1.equals((Object)node0));
236:       assertFalse(node0.isBreak());
237:       assertFalse(node0.isComma());
238:       assertFalse(node0.isFalse());
239:       assertFalse(node0.isGetProp());
240:       assertFalse(node0.isObjectLit());
241:       assertEquals((-1), node0.getCharno());
242:       assertFalse(node0.isAnd());
243:       assertFalse(node0.isString());
244:       assertFalse(node0.isWith());
245:       assertFalse(node0.isNot());
246:       assertFalse(node0.isCase());
247:       assertFalse(node0.isScript());
248:       assertFalse(node0.isExprResult());
249:       assertFalse(node0.isInstanceOf());
250:       assertFalse(node0.hasOneChild());
251:       assertFalse(node0.isHook());
252:       assertTrue(node0.isNumber());
253:       assertFalse(node0.isThis());
254:       assertFalse(node0.isDec());
255:       assertFalse(node0.hasChildren());
256:       assertFalse(node0.isLabelName());
257:       assertFalse(node0.isGetterDef());
258:       assertFalse(node0.isDelProp());
259:       assertFalse(node0.isAssign());
260:       assertFalse(node0.isTypeOf());
261:       assertFalse(node0.isGetElem());
262:       assertFalse(node0.isEmpty());
263:       assertFalse(node0.isArrayLit());
264:       assertFalse(node0.isOr());
265:       assertFalse(node0.isTrue());
266:       assertFalse(node0.isDefaultCase());
267:       assertFalse(node0.isSwitch());
268:       assertFalse(node0.isDo());
269:       assertFalse(node0.isNew());
270:       assertFalse(node0.isAdd());
271:       assertEquals(0, node0.getChildCount());
272:       assertFalse(node0.isLabel());
273:       assertFalse(node0.isAssignAdd());
274:       assertFalse(node0.isVar());
275:       assertFalse(node0.isName());
276:       assertFalse(node0.isSetterDef());
277:       assertFalse(node0.isCall());
278:       assertFalse(node0.isStringKey());
279:       assertFalse(node0.isParamList());
280:       assertFalse(node0.isNull());
281:       assertFalse(node0.isWhile());
282:       assertFalse(node0.isRegExp());
283:       assertFalse(node0.isVoid());
284:       assertFalse(node0.isCatch());
285:       assertFalse(node0.hasMoreThanOneChild());
286:       assertFalse(node0.isTry());
287:       assertFalse(node0.isBlock());
288:       assertEquals(39, node0.getType());
289:       assertFalse(node0.isReturn());
290:       assertFalse(node0.isFor());
291:       assertFalse(node0.isIf());
292:       assertEquals((-1), node0.getSourcePosition());
293:       assertFalse(node0.isCast());
294:       assertFalse(node0.isIn());
295:       assertEquals((-1), node0.getLineno());
296:       assertFalse(node0.isDebugger());
297:       assertFalse(node0.isNE());
298:       assertFalse(node0.isFunction());
299:       assertFalse(node0.isContinue());
300:       assertFalse(node0.isInc());
301:       assertFalse(node0.isThrow());
302:       assertFalse(node1.isIn());
303:       assertEquals(61504, node1.getSourcePosition());
304:       assertFalse(node1.isNE());
305:       assertFalse(node1.isSwitch());
306:       assertFalse(node1.isIf());
307:       assertFalse(node1.isDelProp());
308:       assertFalse(node1.isGetterDef());
309:       assertFalse(node1.isFor());
310:       assertFalse(node1.isHook());
311:       assertFalse(node1.isThis());
312:       assertFalse(node1.isDebugger());
313:       assertFalse(node1.isString());
314:       assertFalse(node1.isTry());
315:       assertFalse(node1.isCase());
316:       assertFalse(node1.isGetProp());
317:       assertFalse(node1.isObjectLit());
318:       assertFalse(node1.isCatch());
319:       assertFalse(node1.isInstanceOf());
320:       assertFalse(node1.isWith());
321:       assertFalse(node1.isAnd());
322:       assertFalse(node1.isNot());
323:       assertFalse(node1.isFunction());
324:       assertFalse(node1.isRegExp());
325:       assertFalse(node1.isThrow());
326:       assertFalse(node1.isCast());
327:       assertFalse(node1.isFalse());
328:       assertFalse(node1.isSetterDef());
329:       assertFalse(node1.isInc());
330:       assertFalse(node1.isContinue());
331:       assertFalse(node1.hasMoreThanOneChild());
332:       assertFalse(node1.isWhile());
333:       assertFalse(node1.isReturn());
334:       assertFalse(node1.isOr());
335:       assertFalse(node1.isLabel());
336:       assertFalse(node1.isTypeOf());
337:       assertFalse(node1.isLabelName());
338:       assertFalse(node1.isGetElem());
339:       assertFalse(node1.isCall());
340:       assertFalse(node1.isStringKey());
341:       assertFalse(node1.isAssign());
342:       assertFalse(node1.isBlock());
343:       assertFalse(node1.isDec());
344:       assertFalse(node1.hasChildren());
345:       assertFalse(node1.isScript());
346:       assertFalse(node1.isNumber());
347:       assertEquals(15, node1.getLineno());
348:       assertFalse(node1.hasOneChild());
349:       assertEquals((-1778), node1.getType());
350:       assertEquals(0, node1.getChildCount());
351:       assertFalse(node1.isParamList());
352:       assertEquals(64, node1.getCharno());
353:       assertFalse(node1.isExprResult());
354:       assertFalse(node1.isTrue());
355:       assertFalse(node1.isComma());
356:       assertFalse(node1.isVoid());
357:       assertFalse(node1.isArrayLit());
358:       assertFalse(node1.isBreak());
359:       assertFalse(node1.isVar());
360:       assertFalse(node1.isName());
361:       assertFalse(node1.isNull());
362:       assertFalse(node1.isAssignAdd());
363:       assertFalse(node1.isDefaultCase());
364:       assertFalse(node1.isDo());
365:       assertFalse(node1.isEmpty());
366:       assertFalse(node1.isAdd());
367:       assertFalse(node1.isNew());
368:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
369:       assertEquals(50, Node.FREE_CALL);
370:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
371:       assertEquals(57, Node.REFLECTED_OBJECT);
372:       assertEquals(48, Node.DIRECTIVES);
373:       assertEquals(4095, Node.COLUMN_MASK);
374:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
375:       assertEquals(40, Node.ORIGINALNAME_PROP);
376:       assertEquals(1, Node.DECR_FLAG);
377:       assertEquals(12, Node.COLUMN_BITS);
378:       assertEquals(43, Node.IS_CONSTANT_NAME);
379:       assertEquals(51, Node.STATIC_SOURCE_FILE);
380:       assertEquals(46, Node.IS_NAMESPACE);
381:       assertEquals(54, Node.SLASH_V);
382:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
383:       assertEquals(32, Node.INCRDECR_PROP);
384:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
385:       assertEquals(29, Node.JSDOC_INFO_PROP);
386:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
387:       assertEquals(2, Node.POST_FLAG);
388:       assertEquals(56, Node.CHANGE_TIME);
389:       assertEquals(47, Node.IS_DISPATCHER);
390:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
391:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
392:       assertEquals(37, Node.OPT_ARG_NAME);
393:       assertEquals(30, Node.VAR_ARGS_NAME);
394:       assertEquals(49, Node.DIRECT_EVAL);
395:       assertEquals(57, Node.LAST_PROP);
396:       assertEquals(36, Node.QUOTED_PROP);
397:       assertEquals(52, Node.LENGTH);
398:       assertEquals(8, Node.FLAG_NO_THROWS);
399:       assertEquals(55, Node.INFERRED_FUNCTION);
400:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
401:       assertEquals(15, Node.NO_SIDE_EFFECTS);
402:       assertEquals(39, Node.EMPTY_BLOCK);
403:       assertEquals(53, Node.INPUT_ID);
404:       assertEquals(12, Node.COLUMN_BITS);
405:       assertEquals(32, Node.INCRDECR_PROP);
406:       assertEquals(46, Node.IS_NAMESPACE);
407:       assertEquals(1, Node.DECR_FLAG);
408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
409:       assertEquals(49, Node.DIRECT_EVAL);
410:       assertEquals(37, Node.OPT_ARG_NAME);
411:       assertEquals(57, Node.LAST_PROP);
412:       assertEquals(47, Node.IS_DISPATCHER);
413:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
414:       assertEquals(2, Node.POST_FLAG);
415:       assertEquals(30, Node.VAR_ARGS_NAME);
416:       assertEquals(40, Node.ORIGINALNAME_PROP);
417:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
418:       assertEquals(43, Node.IS_CONSTANT_NAME);
419:       assertEquals(50, Node.FREE_CALL);
420:       assertEquals(54, Node.SLASH_V);
421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
422:       assertEquals(55, Node.INFERRED_FUNCTION);
423:       assertEquals(4095, Node.COLUMN_MASK);
424:       assertEquals(48, Node.DIRECTIVES);
425:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
426:       assertEquals(39, Node.EMPTY_BLOCK);
427:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
428:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
429:       assertEquals(57, Node.REFLECTED_OBJECT);
430:       assertEquals(52, Node.LENGTH);
431:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
432:       assertEquals(29, Node.JSDOC_INFO_PROP);
433:       assertEquals(53, Node.INPUT_ID);
434:       assertEquals(56, Node.CHANGE_TIME);
435:       assertEquals(15, Node.NO_SIDE_EFFECTS);
436:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
437:       assertEquals(8, Node.FLAG_NO_THROWS);
438:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
439:       assertEquals(36, Node.QUOTED_PROP);
440:       assertNotNull(node_NodeMismatch0);
441:       
442:       Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node1);
443:       assertFalse(node0.equals((Object)node1));
444:       assertFalse(node1.equals((Object)node0));
445:       assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
446:       assertFalse(node0.isBreak());
447:       assertFalse(node0.isComma());
448:       assertFalse(node0.isFalse());
449:       assertFalse(node0.isGetProp());
450:       assertFalse(node0.isObjectLit());
451:       assertEquals((-1), node0.getCharno());
452:       assertFalse(node0.isAnd());
453:       assertFalse(node0.isString());
454:       assertFalse(node0.isWith());
455:       assertFalse(node0.isNot());
456:       assertFalse(node0.isCase());
457:       assertFalse(node0.isScript());
458:       assertFalse(node0.isExprResult());
459:       assertFalse(node0.isInstanceOf());
460:       assertFalse(node0.hasOneChild());
461:       assertFalse(node0.isHook());
462:       assertTrue(node0.isNumber());
463:       assertFalse(node0.isThis());
464:       assertFalse(node0.isDec());
465:       assertFalse(node0.hasChildren());
466:       assertFalse(node0.isLabelName());
467:       assertFalse(node0.isGetterDef());
468:       assertFalse(node0.isDelProp());
469:       assertFalse(node0.isAssign());
470:       assertFalse(node0.isTypeOf());
471:       assertFalse(node0.isGetElem());
472:       assertFalse(node0.isEmpty());
473:       assertFalse(node0.isArrayLit());
474:       assertFalse(node0.isOr());
475:       assertFalse(node0.isTrue());
476:       assertFalse(node0.isDefaultCase());
477:       assertFalse(node0.isSwitch());
478:       assertFalse(node0.isDo());
479:       assertFalse(node0.isNew());
480:       assertFalse(node0.isAdd());
481:       assertEquals(0, node0.getChildCount());
482:       assertFalse(node0.isLabel());
483:       assertFalse(node0.isAssignAdd());
484:       assertFalse(node0.isVar());
485:       assertFalse(node0.isName());
486:       assertFalse(node0.isSetterDef());
487:       assertFalse(node0.isCall());
488:       assertFalse(node0.isStringKey());
489:       assertFalse(node0.isParamList());
490:       assertFalse(node0.isNull());
491:       assertFalse(node0.isWhile());
492:       assertFalse(node0.isRegExp());
493:       assertFalse(node0.isVoid());
494:       assertFalse(node0.isCatch());
495:       assertFalse(node0.hasMoreThanOneChild());
496:       assertFalse(node0.isTry());
497:       assertFalse(node0.isBlock());
498:       assertEquals(39, node0.getType());
499:       assertFalse(node0.isReturn());
500:       assertFalse(node0.isFor());
501:       assertFalse(node0.isIf());
502:       assertEquals((-1), node0.getSourcePosition());
503:       assertFalse(node0.isCast());
504:       assertFalse(node0.isIn());
505:       assertEquals((-1), node0.getLineno());
506:       assertFalse(node0.isDebugger());
507:       assertFalse(node0.isNE());
508:       assertFalse(node0.isFunction());
509:       assertFalse(node0.isContinue());
510:       assertFalse(node0.isInc());
511:       assertFalse(node0.isThrow());
512:       assertFalse(node1.isIn());
513:       assertEquals(61504, node1.getSourcePosition());
514:       assertFalse(node1.isNE());
515:       assertFalse(node1.isSwitch());
516:       assertFalse(node1.isIf());
517:       assertFalse(node1.isDelProp());
518:       assertFalse(node1.isGetterDef());
519:       assertFalse(node1.isFor());
520:       assertFalse(node1.isHook());
521:       assertFalse(node1.isThis());
522:       assertFalse(node1.isDebugger());
523:       assertFalse(node1.isString());
524:       assertFalse(node1.isTry());
525:       assertFalse(node1.isCase());
526:       assertFalse(node1.isGetProp());
527:       assertFalse(node1.isObjectLit());
528:       assertFalse(node1.isCatch());
529:       assertFalse(node1.isInstanceOf());
530:       assertFalse(node1.isWith());
531:       assertFalse(node1.isAnd());
532:       assertFalse(node1.isNot());
533:       assertFalse(node1.isFunction());
534:       assertFalse(node1.isRegExp());
535:       assertFalse(node1.isThrow());
536:       assertFalse(node1.isCast());
537:       assertFalse(node1.isFalse());
538:       assertFalse(node1.isSetterDef());
539:       assertFalse(node1.isInc());
540:       assertFalse(node1.isContinue());
541:       assertFalse(node1.hasMoreThanOneChild());
542:       assertFalse(node1.isWhile());
543:       assertFalse(node1.isReturn());
544:       assertFalse(node1.isOr());
545:       assertFalse(node1.isLabel());
546:       assertFalse(node1.isTypeOf());
547:       assertFalse(node1.isLabelName());
548:       assertFalse(node1.isGetElem());
549:       assertFalse(node1.isCall());
550:       assertFalse(node1.isStringKey());
551:       assertFalse(node1.isAssign());
552:       assertFalse(node1.isBlock());
553:       assertFalse(node1.isDec());
554:       assertFalse(node1.hasChildren());
555:       assertFalse(node1.isScript());
556:       assertFalse(node1.isNumber());
557:       assertEquals(15, node1.getLineno());
558:       assertFalse(node1.hasOneChild());
559:       assertEquals((-1778), node1.getType());
560:       assertEquals(0, node1.getChildCount());
561:       assertFalse(node1.isParamList());
562:       assertEquals(64, node1.getCharno());
563:       assertFalse(node1.isExprResult());
564:       assertFalse(node1.isTrue());
565:       assertFalse(node1.isComma());
566:       assertFalse(node1.isVoid());
567:       assertFalse(node1.isArrayLit());
568:       assertFalse(node1.isBreak());
569:       assertFalse(node1.isVar());
570:       assertFalse(node1.isName());
571:       assertFalse(node1.isNull());
572:       assertFalse(node1.isAssignAdd());
573:       assertFalse(node1.isDefaultCase());
574:       assertFalse(node1.isDo());
575:       assertFalse(node1.isEmpty());
576:       assertFalse(node1.isAdd());
577:       assertFalse(node1.isNew());
578:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
579:       assertEquals(50, Node.FREE_CALL);
580:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
581:       assertEquals(57, Node.REFLECTED_OBJECT);
582:       assertEquals(48, Node.DIRECTIVES);
583:       assertEquals(4095, Node.COLUMN_MASK);
584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
585:       assertEquals(40, Node.ORIGINALNAME_PROP);
586:       assertEquals(1, Node.DECR_FLAG);
587:       assertEquals(12, Node.COLUMN_BITS);
588:       assertEquals(43, Node.IS_CONSTANT_NAME);
589:       assertEquals(51, Node.STATIC_SOURCE_FILE);
590:       assertEquals(46, Node.IS_NAMESPACE);
591:       assertEquals(54, Node.SLASH_V);
592:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
593:       assertEquals(32, Node.INCRDECR_PROP);
594:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
595:       assertEquals(29, Node.JSDOC_INFO_PROP);
596:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
597:       assertEquals(2, Node.POST_FLAG);
598:       assertEquals(56, Node.CHANGE_TIME);
599:       assertEquals(47, Node.IS_DISPATCHER);
600:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
601:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
602:       assertEquals(37, Node.OPT_ARG_NAME);
603:       assertEquals(30, Node.VAR_ARGS_NAME);
604:       assertEquals(49, Node.DIRECT_EVAL);
605:       assertEquals(57, Node.LAST_PROP);
606:       assertEquals(36, Node.QUOTED_PROP);
607:       assertEquals(52, Node.LENGTH);
608:       assertEquals(8, Node.FLAG_NO_THROWS);
609:       assertEquals(55, Node.INFERRED_FUNCTION);
610:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
611:       assertEquals(15, Node.NO_SIDE_EFFECTS);
612:       assertEquals(39, Node.EMPTY_BLOCK);
613:       assertEquals(53, Node.INPUT_ID);
614:       assertEquals(12, Node.COLUMN_BITS);
615:       assertEquals(32, Node.INCRDECR_PROP);
616:       assertEquals(46, Node.IS_NAMESPACE);
617:       assertEquals(1, Node.DECR_FLAG);
618:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
619:       assertEquals(49, Node.DIRECT_EVAL);
620:       assertEquals(37, Node.OPT_ARG_NAME);
621:       assertEquals(57, Node.LAST_PROP);
622:       assertEquals(47, Node.IS_DISPATCHER);
623:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
624:       assertEquals(2, Node.POST_FLAG);
625:       assertEquals(30, Node.VAR_ARGS_NAME);
626:       assertEquals(40, Node.ORIGINALNAME_PROP);
627:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
628:       assertEquals(43, Node.IS_CONSTANT_NAME);
629:       assertEquals(50, Node.FREE_CALL);
630:       assertEquals(54, Node.SLASH_V);
631:       assertEquals(51, Node.STATIC_SOURCE_FILE);
632:       assertEquals(55, Node.INFERRED_FUNCTION);
633:       assertEquals(4095, Node.COLUMN_MASK);
634:       assertEquals(48, Node.DIRECTIVES);
635:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
636:       assertEquals(39, Node.EMPTY_BLOCK);
637:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
638:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
639:       assertEquals(57, Node.REFLECTED_OBJECT);
640:       assertEquals(52, Node.LENGTH);
641:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
642:       assertEquals(29, Node.JSDOC_INFO_PROP);
643:       assertEquals(53, Node.INPUT_ID);
644:       assertEquals(56, Node.CHANGE_TIME);
645:       assertEquals(15, Node.NO_SIDE_EFFECTS);
646:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
647:       assertEquals(8, Node.FLAG_NO_THROWS);
648:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
649:       assertEquals(36, Node.QUOTED_PROP);
650:       assertNotNull(node_NodeMismatch1);
651:       assertNotSame(node_NodeMismatch1, node_NodeMismatch0);
652:       
653:       Object object0 = new Object();
654:       assertNotNull(object0);
655:       
656:       boolean boolean0 = node_NodeMismatch1.equals(object0);
657:       assertFalse(node0.equals((Object)node1));
658:       assertFalse(node1.equals((Object)node0));
659:       assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
660:       assertFalse(node0.isBreak());
661:       assertFalse(node0.isComma());
662:       assertFalse(node0.isFalse());
663:       assertFalse(node0.isGetProp());
664:       assertFalse(node0.isObjectLit());
665:       assertEquals((-1), node0.getCharno());
666:       assertFalse(node0.isAnd());
667:       assertFalse(node0.isString());
668:       assertFalse(node0.isWith());
669:       assertFalse(node0.isNot());
670:       assertFalse(node0.isCase());
671:       assertFalse(node0.isScript());
672:       assertFalse(node0.isExprResult());
673:       assertFalse(node0.isInstanceOf());
674:       assertFalse(node0.hasOneChild());
675:       assertFalse(node0.isHook());
676:       assertTrue(node0.isNumber());
677:       assertFalse(node0.isThis());
678:       assertFalse(node0.isDec());
679:       assertFalse(node0.hasChildren());
680:       assertFalse(node0.isLabelName());
681:       assertFalse(node0.isGetterDef());
682:       assertFalse(node0.isDelProp());
683:       assertFalse(node0.isAssign());
684:       assertFalse(node0.isTypeOf());
685:       assertFalse(node0.isGetElem());
686:       assertFalse(node0.isEmpty());
687:       assertFalse(node0.isArrayLit());
688:       assertFalse(node0.isOr());
689:       assertFalse(node0.isTrue());
690:       assertFalse(node0.isDefaultCase());
691:       assertFalse(node0.isSwitch());
692:       assertFalse(node0.isDo());
693:       assertFalse(node0.isNew());
694:       assertFalse(node0.isAdd());
695:       assertEquals(0, node0.getChildCount());
696:       assertFalse(node0.isLabel());
697:       assertFalse(node0.isAssignAdd());
698:       assertFalse(node0.isVar());
699:       assertFalse(node0.isName());
700:       assertFalse(node0.isSetterDef());
701:       assertFalse(node0.isCall());
702:       assertFalse(node0.isStringKey());
703:       assertFalse(node0.isParamList());
704:       assertFalse(node0.isNull());
705:       assertFalse(node0.isWhile());
706:       assertFalse(node0.isRegExp());
707:       assertFalse(node0.isVoid());
708:       assertFalse(node0.isCatch());
709:       assertFalse(node0.hasMoreThanOneChild());
710:       assertFalse(node0.isTry());
711:       assertFalse(node0.isBlock());
712:       assertEquals(39, node0.getType());
713:       assertFalse(node0.isReturn());
714:       assertFalse(node0.isFor());
715:       assertFalse(node0.isIf());
716:       assertEquals((-1), node0.getSourcePosition());
717:       assertFalse(node0.isCast());
718:       assertFalse(node0.isIn());
719:       assertEquals((-1), node0.getLineno());
720:       assertFalse(node0.isDebugger());
721:       assertFalse(node0.isNE());
722:       assertFalse(node0.isFunction());
723:       assertFalse(node0.isContinue());
724:       assertFalse(node0.isInc());
725:       assertFalse(node0.isThrow());
726:       assertFalse(node1.isIn());
727:       assertEquals(61504, node1.getSourcePosition());
728:       assertFalse(node1.isNE());
729:       assertFalse(node1.isSwitch());
730:       assertFalse(node1.isIf());
731:       assertFalse(node1.isDelProp());
732:       assertFalse(node1.isGetterDef());
733:       assertFalse(node1.isFor());
734:       assertFalse(node1.isHook());
735:       assertFalse(node1.isThis());
736:       assertFalse(node1.isDebugger());
737:       assertFalse(node1.isString());
738:       assertFalse(node1.isTry());
739:       assertFalse(node1.isCase());
740:       assertFalse(node1.isGetProp());
741:       assertFalse(node1.isObjectLit());
742:       assertFalse(node1.isCatch());
743:       assertFalse(node1.isInstanceOf());
744:       assertFalse(node1.isWith());
745:       assertFalse(node1.isAnd());
746:       assertFalse(node1.isNot());
747:       assertFalse(node1.isFunction());
748:       assertFalse(node1.isRegExp());
749:       assertFalse(node1.isThrow());
750:       assertFalse(node1.isCast());
751:       assertFalse(node1.isFalse());
752:       assertFalse(node1.isSetterDef());
753:       assertFalse(node1.isInc());
754:       assertFalse(node1.isContinue());
755:       assertFalse(node1.hasMoreThanOneChild());
756:       assertFalse(node1.isWhile());
757:       assertFalse(node1.isReturn());
758:       assertFalse(node1.isOr());
759:       assertFalse(node1.isLabel());
760:       assertFalse(node1.isTypeOf());
761:       assertFalse(node1.isLabelName());
762:       assertFalse(node1.isGetElem());
763:       assertFalse(node1.isCall());
764:       assertFalse(node1.isStringKey());
765:       assertFalse(node1.isAssign());
766:       assertFalse(node1.isBlock());
767:       assertFalse(node1.isDec());
768:       assertFalse(node1.hasChildren());
769:       assertFalse(node1.isScript());
770:       assertFalse(node1.isNumber());
771:       assertEquals(15, node1.getLineno());
772:       assertFalse(node1.hasOneChild());
773:       assertEquals((-1778), node1.getType());
774:       assertEquals(0, node1.getChildCount());
775:       assertFalse(node1.isParamList());
776:       assertEquals(64, node1.getCharno());
777:       assertFalse(node1.isExprResult());
778:       assertFalse(node1.isTrue());
779:       assertFalse(node1.isComma());
780:       assertFalse(node1.isVoid());
781:       assertFalse(node1.isArrayLit());
782:       assertFalse(node1.isBreak());
783:       assertFalse(node1.isVar());
784:       assertFalse(node1.isName());
785:       assertFalse(node1.isNull());
786:       assertFalse(node1.isAssignAdd());
787:       assertFalse(node1.isDefaultCase());
788:       assertFalse(node1.isDo());
789:       assertFalse(node1.isEmpty());
790:       assertFalse(node1.isAdd());
791:       assertFalse(node1.isNew());
792:       assertFalse(boolean0);
793:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
794:       assertEquals(50, Node.FREE_CALL);
795:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
796:       assertEquals(57, Node.REFLECTED_OBJECT);
797:       assertEquals(48, Node.DIRECTIVES);
798:       assertEquals(4095, Node.COLUMN_MASK);
799:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
800:       assertEquals(40, Node.ORIGINALNAME_PROP);
801:       assertEquals(1, Node.DECR_FLAG);
802:       assertEquals(12, Node.COLUMN_BITS);
803:       assertEquals(43, Node.IS_CONSTANT_NAME);
804:       assertEquals(51, Node.STATIC_SOURCE_FILE);
805:       assertEquals(46, Node.IS_NAMESPACE);
806:       assertEquals(54, Node.SLASH_V);
807:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
808:       assertEquals(32, Node.INCRDECR_PROP);
809:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
810:       assertEquals(29, Node.JSDOC_INFO_PROP);
811:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
812:       assertEquals(2, Node.POST_FLAG);
813:       assertEquals(56, Node.CHANGE_TIME);
814:       assertEquals(47, Node.IS_DISPATCHER);
815:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
816:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
817:       assertEquals(37, Node.OPT_ARG_NAME);
818:       assertEquals(30, Node.VAR_ARGS_NAME);
819:       assertEquals(49, Node.DIRECT_EVAL);
820:       assertEquals(57, Node.LAST_PROP);
821:       assertEquals(36, Node.QUOTED_PROP);
822:       assertEquals(52, Node.LENGTH);
823:       assertEquals(8, Node.FLAG_NO_THROWS);
824:       assertEquals(55, Node.INFERRED_FUNCTION);
825:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
826:       assertEquals(15, Node.NO_SIDE_EFFECTS);
827:       assertEquals(39, Node.EMPTY_BLOCK);
828:       assertEquals(53, Node.INPUT_ID);
829:       assertEquals(12, Node.COLUMN_BITS);
830:       assertEquals(32, Node.INCRDECR_PROP);
831:       assertEquals(46, Node.IS_NAMESPACE);
832:       assertEquals(1, Node.DECR_FLAG);
833:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
834:       assertEquals(49, Node.DIRECT_EVAL);
835:       assertEquals(37, Node.OPT_ARG_NAME);
836:       assertEquals(57, Node.LAST_PROP);
837:       assertEquals(47, Node.IS_DISPATCHER);
838:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
839:       assertEquals(2, Node.POST_FLAG);
840:       assertEquals(30, Node.VAR_ARGS_NAME);
841:       assertEquals(40, Node.ORIGINALNAME_PROP);
842:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
843:       assertEquals(43, Node.IS_CONSTANT_NAME);
844:       assertEquals(50, Node.FREE_CALL);
845:       assertEquals(54, Node.SLASH_V);
846:       assertEquals(51, Node.STATIC_SOURCE_FILE);
847:       assertEquals(55, Node.INFERRED_FUNCTION);
848:       assertEquals(4095, Node.COLUMN_MASK);
849:       assertEquals(48, Node.DIRECTIVES);
850:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
851:       assertEquals(39, Node.EMPTY_BLOCK);
852:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
853:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
854:       assertEquals(57, Node.REFLECTED_OBJECT);
855:       assertEquals(52, Node.LENGTH);
856:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
857:       assertEquals(29, Node.JSDOC_INFO_PROP);
858:       assertEquals(53, Node.INPUT_ID);
859:       assertEquals(56, Node.CHANGE_TIME);
860:       assertEquals(15, Node.NO_SIDE_EFFECTS);
861:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
862:       assertEquals(8, Node.FLAG_NO_THROWS);
863:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
864:       assertEquals(36, Node.QUOTED_PROP);
865:       assertNotSame(node_NodeMismatch1, node_NodeMismatch0);
866:       
867:       boolean boolean1 = node0.isEquivalentTo(node1, true, true, false);
868:       assertFalse(node0.equals((Object)node1));
869:       assertFalse(node1.equals((Object)node0));
870:       assertTrue(boolean1 == boolean0);
871:       assertFalse(node0.isBreak());
872:       assertFalse(node0.isComma());
873:       assertFalse(node0.isFalse());
874:       assertFalse(node0.isGetProp());
875:       assertFalse(node0.isObjectLit());
876:       assertEquals((-1), node0.getCharno());
877:       assertFalse(node0.isAnd());
878:       assertFalse(node0.isString());
879:       assertFalse(node0.isWith());
880:       assertFalse(node0.isNot());
881:       assertFalse(node0.isCase());
882:       assertFalse(node0.isScript());
883:       assertFalse(node0.isExprResult());
884:       assertFalse(node0.isInstanceOf());
885:       assertFalse(node0.hasOneChild());
886:       assertFalse(node0.isHook());
887:       assertTrue(node0.isNumber());
888:       assertFalse(node0.isThis());
889:       assertFalse(node0.isDec());
890:       assertFalse(node0.hasChildren());
891:       assertFalse(node0.isLabelName());
892:       assertFalse(node0.isGetterDef());
893:       assertFalse(node0.isDelProp());
894:       assertFalse(node0.isAssign());
895:       assertFalse(node0.isTypeOf());
896:       assertFalse(node0.isGetElem());
897:       assertFalse(node0.isEmpty());
898:       assertFalse(node0.isArrayLit());
899:       assertFalse(node0.isOr());
900:       assertFalse(node0.isTrue());
901:       assertFalse(node0.isDefaultCase());
902:       assertFalse(node0.isSwitch());
903:       assertFalse(node0.isDo());
904:       assertFalse(node0.isNew());
905:       assertFalse(node0.isAdd());
906:       assertEquals(0, node0.getChildCount());
907:       assertFalse(node0.isLabel());
908:       assertFalse(node0.isAssignAdd());
909:       assertFalse(node0.isVar());
910:       assertFalse(node0.isName());
911:       assertFalse(node0.isSetterDef());
912:       assertFalse(node0.isCall());
913:       assertFalse(node0.isStringKey());
914:       assertFalse(node0.isParamList());
915:       assertFalse(node0.isNull());
916:       assertFalse(node0.isWhile());
917:       assertFalse(node0.isRegExp());
918:       assertFalse(node0.isVoid());
919:       assertFalse(node0.isCatch());
920:       assertFalse(node0.hasMoreThanOneChild());
921:       assertFalse(node0.isTry());
922:       assertFalse(node0.isBlock());
923:       assertEquals(39, node0.getType());
924:       assertFalse(node0.isReturn());
925:       assertFalse(node0.isFor());
926:       assertFalse(node0.isIf());
927:       assertEquals((-1), node0.getSourcePosition());
928:       assertFalse(node0.isCast());
929:       assertFalse(node0.isIn());
930:       assertEquals((-1), node0.getLineno());
931:       assertFalse(node0.isDebugger());
932:       assertFalse(node0.isNE());
933:       assertFalse(node0.isFunction());
934:       assertFalse(node0.isContinue());
935:       assertFalse(node0.isInc());
936:       assertFalse(node0.isThrow());
937:       assertFalse(node1.isIn());
938:       assertEquals(61504, node1.getSourcePosition());
939:       assertFalse(node1.isNE());
940:       assertFalse(node1.isSwitch());
941:       assertFalse(node1.isIf());
942:       assertFalse(node1.isDelProp());
943:       assertFalse(node1.isGetterDef());
944:       assertFalse(node1.isFor());
945:       assertFalse(node1.isHook());
946:       assertFalse(node1.isThis());
947:       assertFalse(node1.isDebugger());
948:       assertFalse(node1.isString());
949:       assertFalse(node1.isTry());
950:       assertFalse(node1.isCase());
951:       assertFalse(node1.isGetProp());
952:       assertFalse(node1.isObjectLit());
953:       assertFalse(node1.isCatch());
954:       assertFalse(node1.isInstanceOf());
955:       assertFalse(node1.isWith());
956:       assertFalse(node1.isAnd());
957:       assertFalse(node1.isNot());
958:       assertFalse(node1.isFunction());
959:       assertFalse(node1.isRegExp());
960:       assertFalse(node1.isThrow());
961:       assertFalse(node1.isCast());
962:       assertFalse(node1.isFalse());
963:       assertFalse(node1.isSetterDef());
964:       assertFalse(node1.isInc());
965:       assertFalse(node1.isContinue());
966:       assertFalse(node1.hasMoreThanOneChild());
967:       assertFalse(node1.isWhile());
968:       assertFalse(node1.isReturn());
969:       assertFalse(node1.isOr());
970:       assertFalse(node1.isLabel());
971:       assertFalse(node1.isTypeOf());
972:       assertFalse(node1.isLabelName());
973:       assertFalse(node1.isGetElem());
974:       assertFalse(node1.isCall());
975:       assertFalse(node1.isStringKey());
976:       assertFalse(node1.isAssign());
977:       assertFalse(node1.isBlock());
978:       assertFalse(node1.isDec());
979:       assertFalse(node1.hasChildren());
980:       assertFalse(node1.isScript());
981:       assertFalse(node1.isNumber());
982:       assertEquals(15, node1.getLineno());
983:       assertFalse(node1.hasOneChild());
984:       assertEquals((-1778), node1.getType());
985:       assertEquals(0, node1.getChildCount());
986:       assertFalse(node1.isParamList());
987:       assertEquals(64, node1.getCharno());
988:       assertFalse(node1.isExprResult());
989:       assertFalse(node1.isTrue());
990:       assertFalse(node1.isComma());
991:       assertFalse(node1.isVoid());
992:       assertFalse(node1.isArrayLit());
993:       assertFalse(node1.isBreak());
994:       assertFalse(node1.isVar());
995:       assertFalse(node1.isName());
996:       assertFalse(node1.isNull());
997:       assertFalse(node1.isAssignAdd());
998:       assertFalse(node1.isDefaultCase());
999:       assertFalse(node1.isDo());
1000:       assertFalse(node1.isEmpty());
1001:       assertFalse(node1.isAdd());
1002:       assertFalse(node1.isNew());
1003:       assertFalse(boolean1);
1004:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1005:       assertEquals(50, Node.FREE_CALL);
1006:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1007:       assertEquals(57, Node.REFLECTED_OBJECT);
1008:       assertEquals(48, Node.DIRECTIVES);
1009:       assertEquals(4095, Node.COLUMN_MASK);
1010:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1011:       assertEquals(40, Node.ORIGINALNAME_PROP);
1012:       assertEquals(1, Node.DECR_FLAG);
1013:       assertEquals(12, Node.COLUMN_BITS);
1014:       assertEquals(43, Node.IS_CONSTANT_NAME);
1015:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1016:       assertEquals(46, Node.IS_NAMESPACE);
1017:       assertEquals(54, Node.SLASH_V);
1018:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1019:       assertEquals(32, Node.INCRDECR_PROP);
1020:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1021:       assertEquals(29, Node.JSDOC_INFO_PROP);
1022:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1023:       assertEquals(2, Node.POST_FLAG);
1024:       assertEquals(56, Node.CHANGE_TIME);
1025:       assertEquals(47, Node.IS_DISPATCHER);
1026:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1027:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1028:       assertEquals(37, Node.OPT_ARG_NAME);
1029:       assertEquals(30, Node.VAR_ARGS_NAME);
1030:       assertEquals(49, Node.DIRECT_EVAL);
1031:       assertEquals(57, Node.LAST_PROP);
1032:       assertEquals(36, Node.QUOTED_PROP);
1033:       assertEquals(52, Node.LENGTH);
1034:       assertEquals(8, Node.FLAG_NO_THROWS);
1035:       assertEquals(55, Node.INFERRED_FUNCTION);
1036:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1037:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1038:       assertEquals(39, Node.EMPTY_BLOCK);
1039:       assertEquals(53, Node.INPUT_ID);
1040:       assertEquals(12, Node.COLUMN_BITS);
1041:       assertEquals(32, Node.INCRDECR_PROP);
1042:       assertEquals(46, Node.IS_NAMESPACE);
1043:       assertEquals(1, Node.DECR_FLAG);
1044:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1045:       assertEquals(49, Node.DIRECT_EVAL);
1046:       assertEquals(37, Node.OPT_ARG_NAME);
1047:       assertEquals(57, Node.LAST_PROP);
1048:       assertEquals(47, Node.IS_DISPATCHER);
1049:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1050:       assertEquals(2, Node.POST_FLAG);
1051:       assertEquals(30, Node.VAR_ARGS_NAME);
1052:       assertEquals(40, Node.ORIGINALNAME_PROP);
1053:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1054:       assertEquals(43, Node.IS_CONSTANT_NAME);
1055:       assertEquals(50, Node.FREE_CALL);
1056:       assertEquals(54, Node.SLASH_V);
1057:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1058:       assertEquals(55, Node.INFERRED_FUNCTION);
1059:       assertEquals(4095, Node.COLUMN_MASK);
1060:       assertEquals(48, Node.DIRECTIVES);
1061:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1062:       assertEquals(39, Node.EMPTY_BLOCK);
1063:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1064:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1065:       assertEquals(57, Node.REFLECTED_OBJECT);
1066:       assertEquals(52, Node.LENGTH);
1067:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1068:       assertEquals(29, Node.JSDOC_INFO_PROP);
1069:       assertEquals(53, Node.INPUT_ID);
1070:       assertEquals(56, Node.CHANGE_TIME);
1071:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1072:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1073:       assertEquals(8, Node.FLAG_NO_THROWS);
1074:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1075:       assertEquals(36, Node.QUOTED_PROP);
1076:       
1077:       boolean boolean2 = node0.isVarArgs();
1078:       assertFalse(node0.equals((Object)node1));
1079:       assertTrue(boolean2 == boolean0);
1080:       assertTrue(boolean2 == boolean1);
1081:       assertFalse(node0.isBreak());
1082:       assertFalse(node0.isComma());
1083:       assertFalse(node0.isFalse());
1084:       assertFalse(node0.isGetProp());
1085:       assertFalse(node0.isObjectLit());
1086:       assertEquals((-1), node0.getCharno());
1087:       assertFalse(node0.isAnd());
1088:       assertFalse(node0.isString());
1089:       assertFalse(node0.isWith());
1090:       assertFalse(node0.isNot());
1091:       assertFalse(node0.isCase());
1092:       assertFalse(node0.isScript());
1093:       assertFalse(node0.isExprResult());
1094:       assertFalse(node0.isInstanceOf());
1095:       assertFalse(node0.hasOneChild());
1096:       assertFalse(node0.isHook());
1097:       assertTrue(node0.isNumber());
1098:       assertFalse(node0.isThis());
1099:       assertFalse(node0.isDec());
1100:       assertFalse(node0.hasChildren());
1101:       assertFalse(node0.isLabelName());
1102:       assertFalse(node0.isGetterDef());
1103:       assertFalse(node0.isDelProp());
1104:       assertFalse(node0.isAssign());
1105:       assertFalse(node0.isTypeOf());
1106:       assertFalse(node0.isGetElem());
1107:       assertFalse(node0.isEmpty());
1108:       assertFalse(node0.isArrayLit());
1109:       assertFalse(node0.isOr());
1110:       assertFalse(node0.isTrue());
1111:       assertFalse(node0.isDefaultCase());
1112:       assertFalse(node0.isSwitch());
1113:       assertFalse(node0.isDo());
1114:       assertFalse(node0.isNew());
1115:       assertFalse(node0.isAdd());
1116:       assertEquals(0, node0.getChildCount());
1117:       assertFalse(node0.isLabel());
1118:       assertFalse(node0.isAssignAdd());
1119:       assertFalse(node0.isVar());
1120:       assertFalse(node0.isName());
1121:       assertFalse(node0.isSetterDef());
1122:       assertFalse(node0.isCall());
1123:       assertFalse(node0.isStringKey());
1124:       assertFalse(node0.isParamList());
1125:       assertFalse(node0.isNull());
1126:       assertFalse(node0.isWhile());
1127:       assertFalse(node0.isRegExp());
1128:       assertFalse(node0.isVoid());
1129:       assertFalse(node0.isCatch());
1130:       assertFalse(node0.hasMoreThanOneChild());
1131:       assertFalse(node0.isTry());
1132:       assertFalse(node0.isBlock());
1133:       assertEquals(39, node0.getType());
1134:       assertFalse(node0.isReturn());
1135:       assertFalse(node0.isFor());
1136:       assertFalse(node0.isIf());
1137:       assertEquals((-1), node0.getSourcePosition());
1138:       assertFalse(node0.isCast());
1139:       assertFalse(node0.isIn());
1140:       assertEquals((-1), node0.getLineno());
1141:       assertFalse(node0.isDebugger());
1142:       assertFalse(node0.isNE());
1143:       assertFalse(node0.isFunction());
1144:       assertFalse(node0.isContinue());
1145:       assertFalse(node0.isInc());
1146:       assertFalse(node0.isThrow());
1147:       assertFalse(boolean2);
1148:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1149:       assertEquals(50, Node.FREE_CALL);
1150:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1151:       assertEquals(57, Node.REFLECTED_OBJECT);
1152:       assertEquals(48, Node.DIRECTIVES);
1153:       assertEquals(4095, Node.COLUMN_MASK);
1154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1155:       assertEquals(40, Node.ORIGINALNAME_PROP);
1156:       assertEquals(1, Node.DECR_FLAG);
1157:       assertEquals(12, Node.COLUMN_BITS);
1158:       assertEquals(43, Node.IS_CONSTANT_NAME);
1159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1160:       assertEquals(46, Node.IS_NAMESPACE);
1161:       assertEquals(54, Node.SLASH_V);
1162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1163:       assertEquals(32, Node.INCRDECR_PROP);
1164:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1165:       assertEquals(29, Node.JSDOC_INFO_PROP);
1166:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1167:       assertEquals(2, Node.POST_FLAG);
1168:       assertEquals(56, Node.CHANGE_TIME);
1169:       assertEquals(47, Node.IS_DISPATCHER);
1170:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1171:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1172:       assertEquals(37, Node.OPT_ARG_NAME);
1173:       assertEquals(30, Node.VAR_ARGS_NAME);
1174:       assertEquals(49, Node.DIRECT_EVAL);
1175:       assertEquals(57, Node.LAST_PROP);
1176:       assertEquals(36, Node.QUOTED_PROP);
1177:       assertEquals(52, Node.LENGTH);
1178:       assertEquals(8, Node.FLAG_NO_THROWS);
1179:       assertEquals(55, Node.INFERRED_FUNCTION);
1180:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1181:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1182:       assertEquals(39, Node.EMPTY_BLOCK);
1183:       assertEquals(53, Node.INPUT_ID);
1184:       
1185:       Iterable<Node> iterable0 = node0.children();
1186:       assertFalse(node0.equals((Object)node1));
1187:       assertFalse(node0.isBreak());
1188:       assertFalse(node0.isComma());
1189:       assertFalse(node0.isFalse());
1190:       assertFalse(node0.isGetProp());
1191:       assertFalse(node0.isObjectLit());
1192:       assertEquals((-1), node0.getCharno());
1193:       assertFalse(node0.isAnd());
1194:       assertFalse(node0.isString());
1195:       assertFalse(node0.isWith());
1196:       assertFalse(node0.isNot());
1197:       assertFalse(node0.isCase());
1198:       assertFalse(node0.isScript());
1199:       assertFalse(node0.isExprResult());
1200:       assertFalse(node0.isInstanceOf());
1201:       assertFalse(node0.hasOneChild());
1202:       assertFalse(node0.isHook());
1203:       assertTrue(node0.isNumber());
1204:       assertFalse(node0.isThis());
1205:       assertFalse(node0.isDec());
1206:       assertFalse(node0.hasChildren());
1207:       assertFalse(node0.isLabelName());
1208:       assertFalse(node0.isGetterDef());
1209:       assertFalse(node0.isDelProp());
1210:       assertFalse(node0.isAssign());
1211:       assertFalse(node0.isTypeOf());
1212:       assertFalse(node0.isGetElem());
1213:       assertFalse(node0.isEmpty());
1214:       assertFalse(node0.isArrayLit());
1215:       assertFalse(node0.isOr());
1216:       assertFalse(node0.isTrue());
1217:       assertFalse(node0.isDefaultCase());
1218:       assertFalse(node0.isSwitch());
1219:       assertFalse(node0.isDo());
1220:       assertFalse(node0.isNew());
1221:       assertFalse(node0.isAdd());
1222:       assertEquals(0, node0.getChildCount());
1223:       assertFalse(node0.isLabel());
1224:       assertFalse(node0.isAssignAdd());
1225:       assertFalse(node0.isVar());
1226:       assertFalse(node0.isName());
1227:       assertFalse(node0.isSetterDef());
1228:       assertFalse(node0.isCall());
1229:       assertFalse(node0.isStringKey());
1230:       assertFalse(node0.isParamList());
1231:       assertFalse(node0.isNull());
1232:       assertFalse(node0.isWhile());
1233:       assertFalse(node0.isRegExp());
1234:       assertFalse(node0.isVoid());
1235:       assertFalse(node0.isCatch());
1236:       assertFalse(node0.hasMoreThanOneChild());
1237:       assertFalse(node0.isTry());
1238:       assertFalse(node0.isBlock());
1239:       assertEquals(39, node0.getType());
1240:       assertFalse(node0.isReturn());
1241:       assertFalse(node0.isFor());
1242:       assertFalse(node0.isIf());
1243:       assertEquals((-1), node0.getSourcePosition());
1244:       assertFalse(node0.isCast());
1245:       assertFalse(node0.isIn());
1246:       assertEquals((-1), node0.getLineno());
1247:       assertFalse(node0.isDebugger());
1248:       assertFalse(node0.isNE());
1249:       assertFalse(node0.isFunction());
1250:       assertFalse(node0.isContinue());
1251:       assertFalse(node0.isInc());
1252:       assertFalse(node0.isThrow());
1253:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1254:       assertEquals(50, Node.FREE_CALL);
1255:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1256:       assertEquals(57, Node.REFLECTED_OBJECT);
1257:       assertEquals(48, Node.DIRECTIVES);
1258:       assertEquals(4095, Node.COLUMN_MASK);
1259:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1260:       assertEquals(40, Node.ORIGINALNAME_PROP);
1261:       assertEquals(1, Node.DECR_FLAG);
1262:       assertEquals(12, Node.COLUMN_BITS);
1263:       assertEquals(43, Node.IS_CONSTANT_NAME);
1264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1265:       assertEquals(46, Node.IS_NAMESPACE);
1266:       assertEquals(54, Node.SLASH_V);
1267:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1268:       assertEquals(32, Node.INCRDECR_PROP);
1269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1270:       assertEquals(29, Node.JSDOC_INFO_PROP);
1271:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1272:       assertEquals(2, Node.POST_FLAG);
1273:       assertEquals(56, Node.CHANGE_TIME);
1274:       assertEquals(47, Node.IS_DISPATCHER);
1275:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1276:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1277:       assertEquals(37, Node.OPT_ARG_NAME);
1278:       assertEquals(30, Node.VAR_ARGS_NAME);
1279:       assertEquals(49, Node.DIRECT_EVAL);
1280:       assertEquals(57, Node.LAST_PROP);
1281:       assertEquals(36, Node.QUOTED_PROP);
1282:       assertEquals(52, Node.LENGTH);
1283:       assertEquals(8, Node.FLAG_NO_THROWS);
1284:       assertEquals(55, Node.INFERRED_FUNCTION);
1285:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1286:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1287:       assertEquals(39, Node.EMPTY_BLOCK);
1288:       assertEquals(53, Node.INPUT_ID);
1289:       assertFalse(iterable0.contains(node1));
1290:       assertNotNull(iterable0);
1291:       
1292:       boolean boolean3 = node0.isIf();
1293:       assertFalse(node0.equals((Object)node1));
1294:       assertTrue(boolean3 == boolean2);
1295:       assertTrue(boolean3 == boolean0);
1296:       assertTrue(boolean3 == boolean1);
1297:       assertFalse(node0.isBreak());
1298:       assertFalse(node0.isComma());
1299:       assertFalse(node0.isFalse());
1300:       assertFalse(node0.isGetProp());
1301:       assertFalse(node0.isObjectLit());
1302:       assertEquals((-1), node0.getCharno());
1303:       assertFalse(node0.isAnd());
1304:       assertFalse(node0.isString());
1305:       assertFalse(node0.isWith());
1306:       assertFalse(node0.isNot());
1307:       assertFalse(node0.isCase());
1308:       assertFalse(node0.isScript());
1309:       assertFalse(node0.isExprResult());
1310:       assertFalse(node0.isInstanceOf());
1311:       assertFalse(node0.hasOneChild());
1312:       assertFalse(node0.isHook());
1313:       assertTrue(node0.isNumber());
1314:       assertFalse(node0.isThis());
1315:       assertFalse(node0.isDec());
1316:       assertFalse(node0.hasChildren());
1317:       assertFalse(node0.isLabelName());
1318:       assertFalse(node0.isGetterDef());
1319:       assertFalse(node0.isDelProp());
1320:       assertFalse(node0.isAssign());
1321:       assertFalse(node0.isTypeOf());
1322:       assertFalse(node0.isGetElem());
1323:       assertFalse(node0.isEmpty());
1324:       assertFalse(node0.isArrayLit());
1325:       assertFalse(node0.isOr());
1326:       assertFalse(node0.isTrue());
1327:       assertFalse(node0.isDefaultCase());
1328:       assertFalse(node0.isSwitch());
1329:       assertFalse(node0.isDo());
1330:       assertFalse(node0.isNew());
1331:       assertFalse(node0.isAdd());
1332:       assertEquals(0, node0.getChildCount());
1333:       assertFalse(node0.isLabel());
1334:       assertFalse(node0.isAssignAdd());
1335:       assertFalse(node0.isVar());
1336:       assertFalse(node0.isName());
1337:       assertFalse(node0.isSetterDef());
1338:       assertFalse(node0.isCall());
1339:       assertFalse(node0.isStringKey());
1340:       assertFalse(node0.isParamList());
1341:       assertFalse(node0.isNull());
1342:       assertFalse(node0.isWhile());
1343:       assertFalse(node0.isRegExp());
1344:       assertFalse(node0.isVoid());
1345:       assertFalse(node0.isCatch());
1346:       assertFalse(node0.hasMoreThanOneChild());
1347:       assertFalse(node0.isTry());
1348:       assertFalse(node0.isBlock());
1349:       assertEquals(39, node0.getType());
1350:       assertFalse(node0.isReturn());
1351:       assertFalse(node0.isFor());
1352:       assertFalse(node0.isIf());
1353:       assertEquals((-1), node0.getSourcePosition());
1354:       assertFalse(node0.isCast());
1355:       assertFalse(node0.isIn());
1356:       assertEquals((-1), node0.getLineno());
1357:       assertFalse(node0.isDebugger());
1358:       assertFalse(node0.isNE());
1359:       assertFalse(node0.isFunction());
1360:       assertFalse(node0.isContinue());
1361:       assertFalse(node0.isInc());
1362:       assertFalse(node0.isThrow());
1363:       assertFalse(boolean3);
1364:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1365:       assertEquals(50, Node.FREE_CALL);
1366:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1367:       assertEquals(57, Node.REFLECTED_OBJECT);
1368:       assertEquals(48, Node.DIRECTIVES);
1369:       assertEquals(4095, Node.COLUMN_MASK);
1370:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1371:       assertEquals(40, Node.ORIGINALNAME_PROP);
1372:       assertEquals(1, Node.DECR_FLAG);
1373:       assertEquals(12, Node.COLUMN_BITS);
1374:       assertEquals(43, Node.IS_CONSTANT_NAME);
1375:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1376:       assertEquals(46, Node.IS_NAMESPACE);
1377:       assertEquals(54, Node.SLASH_V);
1378:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1379:       assertEquals(32, Node.INCRDECR_PROP);
1380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1381:       assertEquals(29, Node.JSDOC_INFO_PROP);
1382:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1383:       assertEquals(2, Node.POST_FLAG);
1384:       assertEquals(56, Node.CHANGE_TIME);
1385:       assertEquals(47, Node.IS_DISPATCHER);
1386:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1387:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1388:       assertEquals(37, Node.OPT_ARG_NAME);
1389:       assertEquals(30, Node.VAR_ARGS_NAME);
1390:       assertEquals(49, Node.DIRECT_EVAL);
1391:       assertEquals(57, Node.LAST_PROP);
1392:       assertEquals(36, Node.QUOTED_PROP);
1393:       assertEquals(52, Node.LENGTH);
1394:       assertEquals(8, Node.FLAG_NO_THROWS);
1395:       assertEquals(55, Node.INFERRED_FUNCTION);
1396:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1397:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1398:       assertEquals(39, Node.EMPTY_BLOCK);
1399:       assertEquals(53, Node.INPUT_ID);
1400:       
1401:       boolean boolean4 = node1.isVoid();
1402:       assertFalse(node1.equals((Object)node0));
1403:       assertTrue(boolean4 == boolean1);
1404:       assertTrue(boolean4 == boolean3);
1405:       assertTrue(boolean4 == boolean0);
1406:       assertTrue(boolean4 == boolean2);
1407:       assertFalse(node1.isIn());
1408:       assertEquals(61504, node1.getSourcePosition());
1409:       assertFalse(node1.isNE());
1410:       assertFalse(node1.isSwitch());
1411:       assertFalse(node1.isIf());
1412:       assertFalse(node1.isDelProp());
1413:       assertFalse(node1.isGetterDef());
1414:       assertFalse(node1.isFor());
1415:       assertFalse(node1.isHook());
1416:       assertFalse(node1.isThis());
1417:       assertFalse(node1.isDebugger());
1418:       assertFalse(node1.isString());
1419:       assertFalse(node1.isTry());
1420:       assertFalse(node1.isCase());
1421:       assertFalse(node1.isGetProp());
1422:       assertFalse(node1.isObjectLit());
1423:       assertFalse(node1.isCatch());
1424:       assertFalse(node1.isInstanceOf());
1425:       assertFalse(node1.isWith());
1426:       assertFalse(node1.isAnd());
1427:       assertFalse(node1.isNot());
1428:       assertFalse(node1.isFunction());
1429:       assertFalse(node1.isRegExp());
1430:       assertFalse(node1.isThrow());
1431:       assertFalse(node1.isCast());
1432:       assertFalse(node1.isFalse());
1433:       assertFalse(node1.isSetterDef());
1434:       assertFalse(node1.isInc());
1435:       assertFalse(node1.isContinue());
1436:       assertFalse(node1.hasMoreThanOneChild());
1437:       assertFalse(node1.isWhile());
1438:       assertFalse(node1.isReturn());
1439:       assertFalse(node1.isOr());
1440:       assertFalse(node1.isLabel());
1441:       assertFalse(node1.isTypeOf());
1442:       assertFalse(node1.isLabelName());
1443:       assertFalse(node1.isGetElem());
1444:       assertFalse(node1.isCall());
1445:       assertFalse(node1.isStringKey());
1446:       assertFalse(node1.isAssign());
1447:       assertFalse(node1.isBlock());
1448:       assertFalse(node1.isDec());
1449:       assertFalse(node1.hasChildren());
1450:       assertFalse(node1.isScript());
1451:       assertFalse(node1.isNumber());
1452:       assertEquals(15, node1.getLineno());
1453:       assertFalse(node1.hasOneChild());
1454:       assertEquals((-1778), node1.getType());
1455:       assertEquals(0, node1.getChildCount());
1456:       assertFalse(node1.isParamList());
1457:       assertEquals(64, node1.getCharno());
1458:       assertFalse(node1.isExprResult());
1459:       assertFalse(node1.isTrue());
1460:       assertFalse(node1.isComma());
1461:       assertFalse(node1.isVoid());
1462:       assertFalse(node1.isArrayLit());
1463:       assertFalse(node1.isBreak());
1464:       assertFalse(node1.isVar());
1465:       assertFalse(node1.isName());
1466:       assertFalse(node1.isNull());
1467:       assertFalse(node1.isAssignAdd());
1468:       assertFalse(node1.isDefaultCase());
1469:       assertFalse(node1.isDo());
1470:       assertFalse(node1.isEmpty());
1471:       assertFalse(node1.isAdd());
1472:       assertFalse(node1.isNew());
1473:       assertFalse(boolean4);
1474:       assertEquals(12, Node.COLUMN_BITS);
1475:       assertEquals(32, Node.INCRDECR_PROP);
1476:       assertEquals(46, Node.IS_NAMESPACE);
1477:       assertEquals(1, Node.DECR_FLAG);
1478:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1479:       assertEquals(49, Node.DIRECT_EVAL);
1480:       assertEquals(37, Node.OPT_ARG_NAME);
1481:       assertEquals(57, Node.LAST_PROP);
1482:       assertEquals(47, Node.IS_DISPATCHER);
1483:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1484:       assertEquals(2, Node.POST_FLAG);
1485:       assertEquals(30, Node.VAR_ARGS_NAME);
1486:       assertEquals(40, Node.ORIGINALNAME_PROP);
1487:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1488:       assertEquals(43, Node.IS_CONSTANT_NAME);
1489:       assertEquals(50, Node.FREE_CALL);
1490:       assertEquals(54, Node.SLASH_V);
1491:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1492:       assertEquals(55, Node.INFERRED_FUNCTION);
1493:       assertEquals(4095, Node.COLUMN_MASK);
1494:       assertEquals(48, Node.DIRECTIVES);
1495:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1496:       assertEquals(39, Node.EMPTY_BLOCK);
1497:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1498:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1499:       assertEquals(57, Node.REFLECTED_OBJECT);
1500:       assertEquals(52, Node.LENGTH);
1501:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1502:       assertEquals(29, Node.JSDOC_INFO_PROP);
1503:       assertEquals(53, Node.INPUT_ID);
1504:       assertEquals(56, Node.CHANGE_TIME);
1505:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1506:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1507:       assertEquals(8, Node.FLAG_NO_THROWS);
1508:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1509:       assertEquals(36, Node.QUOTED_PROP);
1510:       
1511:       node0.setInputId((InputId) null);
1512:       assertFalse(node0.equals((Object)node1));
1513:       assertFalse(node0.isBreak());
1514:       assertFalse(node0.isComma());
1515:       assertFalse(node0.isFalse());
1516:       assertFalse(node0.isGetProp());
1517:       assertFalse(node0.isObjectLit());
1518:       assertEquals((-1), node0.getCharno());
1519:       assertFalse(node0.isAnd());
1520:       assertFalse(node0.isString());
1521:       assertFalse(node0.isWith());
1522:       assertFalse(node0.isNot());
1523:       assertFalse(node0.isCase());
1524:       assertFalse(node0.isScript());
1525:       assertFalse(node0.isExprResult());
1526:       assertFalse(node0.isInstanceOf());
1527:       assertFalse(node0.hasOneChild());
1528:       assertFalse(node0.isHook());
1529:       assertTrue(node0.isNumber());
1530:       assertFalse(node0.isThis());
1531:       assertFalse(node0.isDec());
1532:       assertFalse(node0.hasChildren());
1533:       assertFalse(node0.isLabelName());
1534:       assertFalse(node0.isGetterDef());
1535:       assertFalse(node0.isDelProp());
1536:       assertFalse(node0.isAssign());
1537:       assertFalse(node0.isTypeOf());
1538:       assertFalse(node0.isGetElem());
1539:       assertFalse(node0.isEmpty());
1540:       assertFalse(node0.isArrayLit());
1541:       assertFalse(node0.isOr());
1542:       assertFalse(node0.isTrue());
1543:       assertFalse(node0.isDefaultCase());
1544:       assertFalse(node0.isSwitch());
1545:       assertFalse(node0.isDo());
1546:       assertFalse(node0.isNew());
1547:       assertFalse(node0.isAdd());
1548:       assertEquals(0, node0.getChildCount());
1549:       assertFalse(node0.isLabel());
1550:       assertFalse(node0.isAssignAdd());
1551:       assertFalse(node0.isVar());
1552:       assertFalse(node0.isName());
1553:       assertFalse(node0.isSetterDef());
1554:       assertFalse(node0.isCall());
1555:       assertFalse(node0.isStringKey());
1556:       assertFalse(node0.isParamList());
1557:       assertFalse(node0.isNull());
1558:       assertFalse(node0.isWhile());
1559:       assertFalse(node0.isRegExp());
1560:       assertFalse(node0.isVoid());
1561:       assertFalse(node0.isCatch());
1562:       assertFalse(node0.hasMoreThanOneChild());
1563:       assertFalse(node0.isTry());
1564:       assertFalse(node0.isBlock());
1565:       assertEquals(39, node0.getType());
1566:       assertFalse(node0.isReturn());
1567:       assertFalse(node0.isFor());
1568:       assertFalse(node0.isIf());
1569:       assertEquals((-1), node0.getSourcePosition());
1570:       assertFalse(node0.isCast());
1571:       assertFalse(node0.isIn());
1572:       assertEquals((-1), node0.getLineno());
1573:       assertFalse(node0.isDebugger());
1574:       assertFalse(node0.isNE());
1575:       assertFalse(node0.isFunction());
1576:       assertFalse(node0.isContinue());
1577:       assertFalse(node0.isInc());
1578:       assertFalse(node0.isThrow());
1579:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1580:       assertEquals(50, Node.FREE_CALL);
1581:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1582:       assertEquals(57, Node.REFLECTED_OBJECT);
1583:       assertEquals(48, Node.DIRECTIVES);
1584:       assertEquals(4095, Node.COLUMN_MASK);
1585:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1586:       assertEquals(40, Node.ORIGINALNAME_PROP);
1587:       assertEquals(1, Node.DECR_FLAG);
1588:       assertEquals(12, Node.COLUMN_BITS);
1589:       assertEquals(43, Node.IS_CONSTANT_NAME);
1590:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1591:       assertEquals(46, Node.IS_NAMESPACE);
1592:       assertEquals(54, Node.SLASH_V);
1593:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1594:       assertEquals(32, Node.INCRDECR_PROP);
1595:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1596:       assertEquals(29, Node.JSDOC_INFO_PROP);
1597:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1598:       assertEquals(2, Node.POST_FLAG);
1599:       assertEquals(56, Node.CHANGE_TIME);
1600:       assertEquals(47, Node.IS_DISPATCHER);
1601:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1602:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1603:       assertEquals(37, Node.OPT_ARG_NAME);
1604:       assertEquals(30, Node.VAR_ARGS_NAME);
1605:       assertEquals(49, Node.DIRECT_EVAL);
1606:       assertEquals(57, Node.LAST_PROP);
1607:       assertEquals(36, Node.QUOTED_PROP);
1608:       assertEquals(52, Node.LENGTH);
1609:       assertEquals(8, Node.FLAG_NO_THROWS);
1610:       assertEquals(55, Node.INFERRED_FUNCTION);
1611:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1612:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1613:       assertEquals(39, Node.EMPTY_BLOCK);
1614:       assertEquals(53, Node.INPUT_ID);
1615:       
1616:       node1.setType(1895);
1617:       assertFalse(node1.equals((Object)node0));
1618:       assertFalse(node1.isIn());
1619:       assertEquals(1895, node1.getType());
1620:       assertEquals(61504, node1.getSourcePosition());
1621:       assertFalse(node1.isNE());
1622:       assertFalse(node1.isSwitch());
1623:       assertFalse(node1.isIf());
1624:       assertFalse(node1.isDelProp());
1625:       assertFalse(node1.isGetterDef());
1626:       assertFalse(node1.isFor());
1627:       assertFalse(node1.isHook());
1628:       assertFalse(node1.isThis());
1629:       assertFalse(node1.isDebugger());
1630:       assertFalse(node1.isString());
1631:       assertFalse(node1.isTry());
1632:       assertFalse(node1.isCase());
1633:       assertFalse(node1.isGetProp());
1634:       assertFalse(node1.isObjectLit());
1635:       assertFalse(node1.isCatch());
1636:       assertFalse(node1.isInstanceOf());
1637:       assertFalse(node1.isWith());
1638:       assertFalse(node1.isAnd());
1639:       assertFalse(node1.isNot());
1640:       assertFalse(node1.isFunction());
1641:       assertFalse(node1.isRegExp());
1642:       assertFalse(node1.isThrow());
1643:       assertFalse(node1.isCast());
1644:       assertFalse(node1.isFalse());
1645:       assertFalse(node1.isSetterDef());
1646:       assertFalse(node1.isInc());
1647:       assertFalse(node1.isContinue());
1648:       assertFalse(node1.hasMoreThanOneChild());
1649:       assertFalse(node1.isWhile());
1650:       assertFalse(node1.isReturn());
1651:       assertFalse(node1.isOr());
1652:       assertFalse(node1.isLabel());
1653:       assertFalse(node1.isTypeOf());
1654:       assertFalse(node1.isLabelName());
1655:       assertFalse(node1.isGetElem());
1656:       assertFalse(node1.isCall());
1657:       assertFalse(node1.isStringKey());
1658:       assertFalse(node1.isAssign());
1659:       assertFalse(node1.isBlock());
1660:       assertFalse(node1.isDec());
1661:       assertFalse(node1.hasChildren());
1662:       assertFalse(node1.isScript());
1663:       assertFalse(node1.isNumber());
1664:       assertEquals(15, node1.getLineno());
1665:       assertFalse(node1.hasOneChild());
1666:       assertEquals(0, node1.getChildCount());
1667:       assertFalse(node1.isParamList());
1668:       assertEquals(64, node1.getCharno());
1669:       assertFalse(node1.isExprResult());
1670:       assertFalse(node1.isTrue());
1671:       assertFalse(node1.isComma());
1672:       assertFalse(node1.isVoid());
1673:       assertFalse(node1.isArrayLit());
1674:       assertFalse(node1.isBreak());
1675:       assertFalse(node1.isVar());
1676:       assertFalse(node1.isName());
1677:       assertFalse(node1.isNull());
1678:       assertFalse(node1.isAssignAdd());
1679:       assertFalse(node1.isDefaultCase());
1680:       assertFalse(node1.isDo());
1681:       assertFalse(node1.isEmpty());
1682:       assertFalse(node1.isAdd());
1683:       assertFalse(node1.isNew());
1684:       assertEquals(12, Node.COLUMN_BITS);
1685:       assertEquals(32, Node.INCRDECR_PROP);
1686:       assertEquals(46, Node.IS_NAMESPACE);
1687:       assertEquals(1, Node.DECR_FLAG);
1688:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1689:       assertEquals(49, Node.DIRECT_EVAL);
1690:       assertEquals(37, Node.OPT_ARG_NAME);
1691:       assertEquals(57, Node.LAST_PROP);
1692:       assertEquals(47, Node.IS_DISPATCHER);
1693:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1694:       assertEquals(2, Node.POST_FLAG);
1695:       assertEquals(30, Node.VAR_ARGS_NAME);
1696:       assertEquals(40, Node.ORIGINALNAME_PROP);
1697:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1698:       assertEquals(43, Node.IS_CONSTANT_NAME);
1699:       assertEquals(50, Node.FREE_CALL);
1700:       assertEquals(54, Node.SLASH_V);
1701:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1702:       assertEquals(55, Node.INFERRED_FUNCTION);
1703:       assertEquals(4095, Node.COLUMN_MASK);
1704:       assertEquals(48, Node.DIRECTIVES);
1705:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1706:       assertEquals(39, Node.EMPTY_BLOCK);
1707:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1708:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1709:       assertEquals(57, Node.REFLECTED_OBJECT);
1710:       assertEquals(52, Node.LENGTH);
1711:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1712:       assertEquals(29, Node.JSDOC_INFO_PROP);
1713:       assertEquals(53, Node.INPUT_ID);
1714:       assertEquals(56, Node.CHANGE_TIME);
1715:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1717:       assertEquals(8, Node.FLAG_NO_THROWS);
1718:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1719:       assertEquals(36, Node.QUOTED_PROP);
1720:       
1721:       boolean boolean5 = node0.hasChildren();
1722:       assertFalse(node0.equals((Object)node1));
1723:       assertTrue(boolean5 == boolean3);
1724:       assertTrue(boolean5 == boolean4);
1725:       assertTrue(boolean5 == boolean2);
1726:       assertTrue(boolean5 == boolean0);
1727:       assertTrue(boolean5 == boolean1);
1728:       assertFalse(node0.isBreak());
1729:       assertFalse(node0.isComma());
1730:       assertFalse(node0.isFalse());
1731:       assertFalse(node0.isGetProp());
1732:       assertFalse(node0.isObjectLit());
1733:       assertEquals((-1), node0.getCharno());
1734:       assertFalse(node0.isAnd());
1735:       assertFalse(node0.isString());
1736:       assertFalse(node0.isWith());
1737:       assertFalse(node0.isNot());
1738:       assertFalse(node0.isCase());
1739:       assertFalse(node0.isScript());
1740:       assertFalse(node0.isExprResult());
1741:       assertFalse(node0.isInstanceOf());
1742:       assertFalse(node0.hasOneChild());
1743:       assertFalse(node0.isHook());
1744:       assertTrue(node0.isNumber());
1745:       assertFalse(node0.isThis());
1746:       assertFalse(node0.isDec());
1747:       assertFalse(node0.hasChildren());
1748:       assertFalse(node0.isLabelName());
1749:       assertFalse(node0.isGetterDef());
1750:       assertFalse(node0.isDelProp());
1751:       assertFalse(node0.isAssign());
1752:       assertFalse(node0.isTypeOf());
1753:       assertFalse(node0.isGetElem());
1754:       assertFalse(node0.isEmpty());
1755:       assertFalse(node0.isArrayLit());
1756:       assertFalse(node0.isOr());
1757:       assertFalse(node0.isTrue());
1758:       assertFalse(node0.isDefaultCase());
1759:       assertFalse(node0.isSwitch());
1760:       assertFalse(node0.isDo());
1761:       assertFalse(node0.isNew());
1762:       assertFalse(node0.isAdd());
1763:       assertEquals(0, node0.getChildCount());
1764:       assertFalse(node0.isLabel());
1765:       assertFalse(node0.isAssignAdd());
1766:       assertFalse(node0.isVar());
1767:       assertFalse(node0.isName());
1768:       assertFalse(node0.isSetterDef());
1769:       assertFalse(node0.isCall());
1770:       assertFalse(node0.isStringKey());
1771:       assertFalse(node0.isParamList());
1772:       assertFalse(node0.isNull());
1773:       assertFalse(node0.isWhile());
1774:       assertFalse(node0.isRegExp());
1775:       assertFalse(node0.isVoid());
1776:       assertFalse(node0.isCatch());
1777:       assertFalse(node0.hasMoreThanOneChild());
1778:       assertFalse(node0.isTry());
1779:       assertFalse(node0.isBlock());
1780:       assertEquals(39, node0.getType());
1781:       assertFalse(node0.isReturn());
1782:       assertFalse(node0.isFor());
1783:       assertFalse(node0.isIf());
1784:       assertEquals((-1), node0.getSourcePosition());
1785:       assertFalse(node0.isCast());
1786:       assertFalse(node0.isIn());
1787:       assertEquals((-1), node0.getLineno());
1788:       assertFalse(node0.isDebugger());
1789:       assertFalse(node0.isNE());
1790:       assertFalse(node0.isFunction());
1791:       assertFalse(node0.isContinue());
1792:       assertFalse(node0.isInc());
1793:       assertFalse(node0.isThrow());
1794:       assertFalse(boolean5);
1795:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1796:       assertEquals(50, Node.FREE_CALL);
1797:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1798:       assertEquals(57, Node.REFLECTED_OBJECT);
1799:       assertEquals(48, Node.DIRECTIVES);
1800:       assertEquals(4095, Node.COLUMN_MASK);
1801:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1802:       assertEquals(40, Node.ORIGINALNAME_PROP);
1803:       assertEquals(1, Node.DECR_FLAG);
1804:       assertEquals(12, Node.COLUMN_BITS);
1805:       assertEquals(43, Node.IS_CONSTANT_NAME);
1806:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1807:       assertEquals(46, Node.IS_NAMESPACE);
1808:       assertEquals(54, Node.SLASH_V);
1809:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1810:       assertEquals(32, Node.INCRDECR_PROP);
1811:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1812:       assertEquals(29, Node.JSDOC_INFO_PROP);
1813:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1814:       assertEquals(2, Node.POST_FLAG);
1815:       assertEquals(56, Node.CHANGE_TIME);
1816:       assertEquals(47, Node.IS_DISPATCHER);
1817:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1818:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1819:       assertEquals(37, Node.OPT_ARG_NAME);
1820:       assertEquals(30, Node.VAR_ARGS_NAME);
1821:       assertEquals(49, Node.DIRECT_EVAL);
1822:       assertEquals(57, Node.LAST_PROP);
1823:       assertEquals(36, Node.QUOTED_PROP);
1824:       assertEquals(52, Node.LENGTH);
1825:       assertEquals(8, Node.FLAG_NO_THROWS);
1826:       assertEquals(55, Node.INFERRED_FUNCTION);
1827:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1828:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1829:       assertEquals(39, Node.EMPTY_BLOCK);
1830:       assertEquals(53, Node.INPUT_ID);
1831:       
1832:       Node node2 = new Node(0, node0, 132, 4);
1833:       assertFalse(node0.equals((Object)node1));
1834:       assertFalse(node2.equals((Object)node0));
1835:       assertFalse(node2.equals((Object)node1));
1836:       assertFalse(node0.isBreak());
1837:       assertFalse(node0.isComma());
1838:       assertFalse(node0.isFalse());
1839:       assertFalse(node0.isGetProp());
1840:       assertFalse(node0.isObjectLit());
1841:       assertEquals((-1), node0.getCharno());
1842:       assertFalse(node0.isAnd());
1843:       assertFalse(node0.isString());
1844:       assertFalse(node0.isWith());
1845:       assertFalse(node0.isNot());
1846:       assertFalse(node0.isCase());
1847:       assertFalse(node0.isScript());
1848:       assertFalse(node0.isExprResult());
1849:       assertFalse(node0.isInstanceOf());
1850:       assertFalse(node0.hasOneChild());
1851:       assertFalse(node0.isHook());
1852:       assertTrue(node0.isNumber());
1853:       assertFalse(node0.isThis());
1854:       assertFalse(node0.isDec());
1855:       assertFalse(node0.hasChildren());
1856:       assertFalse(node0.isLabelName());
1857:       assertFalse(node0.isGetterDef());
1858:       assertFalse(node0.isDelProp());
1859:       assertFalse(node0.isAssign());
1860:       assertFalse(node0.isTypeOf());
1861:       assertFalse(node0.isGetElem());
1862:       assertFalse(node0.isEmpty());
1863:       assertFalse(node0.isArrayLit());
1864:       assertFalse(node0.isOr());
1865:       assertFalse(node0.isTrue());
1866:       assertFalse(node0.isDefaultCase());
1867:       assertFalse(node0.isSwitch());
1868:       assertFalse(node0.isDo());
1869:       assertFalse(node0.isNew());
1870:       assertFalse(node0.isAdd());
1871:       assertEquals(0, node0.getChildCount());
1872:       assertFalse(node0.isLabel());
1873:       assertFalse(node0.isAssignAdd());
1874:       assertFalse(node0.isVar());
1875:       assertFalse(node0.isName());
1876:       assertFalse(node0.isSetterDef());
1877:       assertFalse(node0.isCall());
1878:       assertFalse(node0.isStringKey());
1879:       assertFalse(node0.isParamList());
1880:       assertFalse(node0.isNull());
1881:       assertFalse(node0.isWhile());
1882:       assertFalse(node0.isRegExp());
1883:       assertFalse(node0.isVoid());
1884:       assertFalse(node0.isCatch());
1885:       assertFalse(node0.hasMoreThanOneChild());
1886:       assertFalse(node0.isTry());
1887:       assertFalse(node0.isBlock());
1888:       assertEquals(39, node0.getType());
1889:       assertFalse(node0.isReturn());
1890:       assertFalse(node0.isFor());
1891:       assertFalse(node0.isIf());
1892:       assertEquals((-1), node0.getSourcePosition());
1893:       assertFalse(node0.isCast());
1894:       assertFalse(node0.isIn());
1895:       assertEquals((-1), node0.getLineno());
1896:       assertFalse(node0.isDebugger());
1897:       assertFalse(node0.isNE());
1898:       assertFalse(node0.isFunction());
1899:       assertFalse(node0.isContinue());
1900:       assertFalse(node0.isInc());
1901:       assertFalse(node0.isThrow());
1902:       assertFalse(node2.isOr());
1903:       assertFalse(node2.isAssignAdd());
1904:       assertFalse(node2.isReturn());
1905:       assertFalse(node2.isLabel());
1906:       assertFalse(node2.isDo());
1907:       assertFalse(node2.isNumber());
1908:       assertFalse(node2.isBlock());
1909:       assertFalse(node2.isExprResult());
1910:       assertEquals(540676, node2.getSourcePosition());
1911:       assertFalse(node2.isName());
1912:       assertFalse(node2.isWith());
1913:       assertFalse(node2.isAssign());
1914:       assertFalse(node2.isWhile());
1915:       assertFalse(node2.isCall());
1916:       assertFalse(node2.isGetElem());
1917:       assertFalse(node2.hasMoreThanOneChild());
1918:       assertFalse(node2.isDec());
1919:       assertFalse(node2.isTypeOf());
1920:       assertFalse(node2.isParamList());
1921:       assertFalse(node2.isStringKey());
1922:       assertFalse(node2.isNull());
1923:       assertFalse(node2.isScript());
1924:       assertFalse(node2.isNew());
1925:       assertFalse(node2.isAdd());
1926:       assertFalse(node2.isVar());
1927:       assertFalse(node2.isSwitch());
1928:       assertFalse(node2.isArrayLit());
1929:       assertFalse(node2.isDefaultCase());
1930:       assertFalse(node2.isLabelName());
1931:       assertTrue(node2.hasChildren());
1932:       assertEquals(1, node2.getChildCount());
1933:       assertFalse(node2.isNE());
1934:       assertFalse(node2.isIf());
1935:       assertFalse(node2.isDelProp());
1936:       assertFalse(node2.isEmpty());
1937:       assertFalse(node2.isCase());
1938:       assertFalse(node2.isString());
1939:       assertFalse(node2.isIn());
1940:       assertFalse(node2.isGetterDef());
1941:       assertFalse(node2.isTry());
1942:       assertFalse(node2.isHook());
1943:       assertEquals(0, node2.getType());
1944:       assertFalse(node2.isTrue());
1945:       assertFalse(node2.isVoid());
1946:       assertTrue(node2.hasOneChild());
1947:       assertFalse(node2.isBreak());
1948:       assertFalse(node2.isFor());
1949:       assertFalse(node2.isCatch());
1950:       assertFalse(node2.isThis());
1951:       assertFalse(node2.isComma());
1952:       assertFalse(node2.isRegExp());
1953:       assertFalse(node2.isInstanceOf());
1954:       assertFalse(node2.isGetProp());
1955:       assertFalse(node2.isSetterDef());
1956:       assertFalse(node2.isAnd());
1957:       assertEquals(4, node2.getCharno());
1958:       assertFalse(node2.isNot());
1959:       assertFalse(node2.isDebugger());
1960:       assertFalse(node2.isObjectLit());
1961:       assertFalse(node2.isInc());
1962:       assertFalse(node2.isThrow());
1963:       assertEquals(132, node2.getLineno());
1964:       assertFalse(node2.isCast());
1965:       assertFalse(node2.isContinue());
1966:       assertFalse(node2.isFalse());
1967:       assertFalse(node2.isFunction());
1968:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1969:       assertEquals(50, Node.FREE_CALL);
1970:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1971:       assertEquals(57, Node.REFLECTED_OBJECT);
1972:       assertEquals(48, Node.DIRECTIVES);
1973:       assertEquals(4095, Node.COLUMN_MASK);
1974:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1975:       assertEquals(40, Node.ORIGINALNAME_PROP);
1976:       assertEquals(1, Node.DECR_FLAG);
1977:       assertEquals(12, Node.COLUMN_BITS);
1978:       assertEquals(43, Node.IS_CONSTANT_NAME);
1979:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1980:       assertEquals(46, Node.IS_NAMESPACE);
1981:       assertEquals(54, Node.SLASH_V);
1982:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1983:       assertEquals(32, Node.INCRDECR_PROP);
1984:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1985:       assertEquals(29, Node.JSDOC_INFO_PROP);
1986:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1987:       assertEquals(2, Node.POST_FLAG);
1988:       assertEquals(56, Node.CHANGE_TIME);
1989:       assertEquals(47, Node.IS_DISPATCHER);
1990:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1991:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1992:       assertEquals(37, Node.OPT_ARG_NAME);
1993:       assertEquals(30, Node.VAR_ARGS_NAME);
1994:       assertEquals(49, Node.DIRECT_EVAL);
1995:       assertEquals(57, Node.LAST_PROP);
1996:       assertEquals(36, Node.QUOTED_PROP);
1997:       assertEquals(52, Node.LENGTH);
1998:       assertEquals(8, Node.FLAG_NO_THROWS);
1999:       assertEquals(55, Node.INFERRED_FUNCTION);
2000:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2001:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2002:       assertEquals(39, Node.EMPTY_BLOCK);
2003:       assertEquals(53, Node.INPUT_ID);
2004:       assertEquals(37, Node.OPT_ARG_NAME);
2005:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2006:       assertEquals(47, Node.IS_DISPATCHER);
2007:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2008:       assertEquals(2, Node.POST_FLAG);
2009:       assertEquals(46, Node.IS_NAMESPACE);
2010:       assertEquals(56, Node.CHANGE_TIME);
2011:       assertEquals(49, Node.DIRECT_EVAL);
2012:       assertEquals(54, Node.SLASH_V);
2013:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2014:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2015:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2016:       assertEquals(1, Node.DECR_FLAG);
2017:       assertEquals(12, Node.COLUMN_BITS);
2018:       assertEquals(32, Node.INCRDECR_PROP);
2019:       assertEquals(48, Node.DIRECTIVES);
2020:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2021:       assertEquals(39, Node.EMPTY_BLOCK);
2022:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2023:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2024:       assertEquals(50, Node.FREE_CALL);
2025:       assertEquals(4095, Node.COLUMN_MASK);
2026:       assertEquals(8, Node.FLAG_NO_THROWS);
2027:       assertEquals(40, Node.ORIGINALNAME_PROP);
2028:       assertEquals(57, Node.REFLECTED_OBJECT);
2029:       assertEquals(43, Node.IS_CONSTANT_NAME);
2030:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2031:       assertEquals(36, Node.QUOTED_PROP);
2032:       assertEquals(53, Node.INPUT_ID);
2033:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2034:       assertEquals(30, Node.VAR_ARGS_NAME);
2035:       assertEquals(52, Node.LENGTH);
2036:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2037:       assertEquals(55, Node.INFERRED_FUNCTION);
2038:       assertEquals(29, Node.JSDOC_INFO_PROP);
2039:       assertEquals(57, Node.LAST_PROP);
2040:       assertNotNull(node2);
2041:       
2042:       Node node3 = node2.getChildBefore(node0);
2043:       assertFalse(node0.equals((Object)node2));
2044:       assertFalse(node0.equals((Object)node1));
2045:       assertFalse(node2.equals((Object)node0));
2046:       assertFalse(node2.equals((Object)node1));
2047:       assertFalse(node0.isBreak());
2048:       assertFalse(node0.isComma());
2049:       assertFalse(node0.isFalse());
2050:       assertFalse(node0.isGetProp());
2051:       assertFalse(node0.isObjectLit());
2052:       assertEquals((-1), node0.getCharno());
2053:       assertFalse(node0.isAnd());
2054:       assertFalse(node0.isString());
2055:       assertFalse(node0.isWith());
2056:       assertFalse(node0.isNot());
2057:       assertFalse(node0.isCase());
2058:       assertFalse(node0.isScript());
2059:       assertFalse(node0.isExprResult());
2060:       assertFalse(node0.isInstanceOf());
2061:       assertFalse(node0.hasOneChild());
2062:       assertFalse(node0.isHook());
2063:       assertTrue(node0.isNumber());
2064:       assertFalse(node0.isThis());
2065:       assertFalse(node0.isDec());
2066:       assertFalse(node0.hasChildren());
2067:       assertFalse(node0.isLabelName());
2068:       assertFalse(node0.isGetterDef());
2069:       assertFalse(node0.isDelProp());
2070:       assertFalse(node0.isAssign());
2071:       assertFalse(node0.isTypeOf());
2072:       assertFalse(node0.isGetElem());
2073:       assertFalse(node0.isEmpty());
2074:       assertFalse(node0.isArrayLit());
2075:       assertFalse(node0.isOr());
2076:       assertFalse(node0.isTrue());
2077:       assertFalse(node0.isDefaultCase());
2078:       assertFalse(node0.isSwitch());
2079:       assertFalse(node0.isDo());
2080:       assertFalse(node0.isNew());
2081:       assertFalse(node0.isAdd());
2082:       assertEquals(0, node0.getChildCount());
2083:       assertFalse(node0.isLabel());
2084:       assertFalse(node0.isAssignAdd());
2085:       assertFalse(node0.isVar());
2086:       assertFalse(node0.isName());
2087:       assertFalse(node0.isSetterDef());
2088:       assertFalse(node0.isCall());
2089:       assertFalse(node0.isStringKey());
2090:       assertFalse(node0.isParamList());
2091:       assertFalse(node0.isNull());
2092:       assertFalse(node0.isWhile());
2093:       assertFalse(node0.isRegExp());
2094:       assertFalse(node0.isVoid());
2095:       assertFalse(node0.isCatch());
2096:       assertFalse(node0.hasMoreThanOneChild());
2097:       assertFalse(node0.isTry());
2098:       assertFalse(node0.isBlock());
2099:       assertEquals(39, node0.getType());
2100:       assertFalse(node0.isReturn());
2101:       assertFalse(node0.isFor());
2102:       assertFalse(node0.isIf());
2103:       assertEquals((-1), node0.getSourcePosition());
2104:       assertFalse(node0.isCast());
2105:       assertFalse(node0.isIn());
2106:       assertEquals((-1), node0.getLineno());
2107:       assertFalse(node0.isDebugger());
2108:       assertFalse(node0.isNE());
2109:       assertFalse(node0.isFunction());
2110:       assertFalse(node0.isContinue());
2111:       assertFalse(node0.isInc());
2112:       assertFalse(node0.isThrow());
2113:       assertFalse(node2.isOr());
2114:       assertFalse(node2.isAssignAdd());
2115:       assertFalse(node2.isReturn());
2116:       assertFalse(node2.isLabel());
2117:       assertFalse(node2.isDo());
2118:       assertFalse(node2.isNumber());
2119:       assertFalse(node2.isBlock());
2120:       assertFalse(node2.isExprResult());
2121:       assertEquals(540676, node2.getSourcePosition());
2122:       assertFalse(node2.isName());
2123:       assertFalse(node2.isWith());
2124:       assertFalse(node2.isAssign());
2125:       assertFalse(node2.isWhile());
2126:       assertFalse(node2.isCall());
2127:       assertFalse(node2.isGetElem());
2128:       assertFalse(node2.hasMoreThanOneChild());
2129:       assertFalse(node2.isDec());
2130:       assertFalse(node2.isTypeOf());
2131:       assertFalse(node2.isParamList());
2132:       assertFalse(node2.isStringKey());
2133:       assertFalse(node2.isNull());
2134:       assertFalse(node2.isScript());
2135:       assertFalse(node2.isNew());
2136:       assertFalse(node2.isAdd());
2137:       assertFalse(node2.isVar());
2138:       assertFalse(node2.isSwitch());
2139:       assertFalse(node2.isArrayLit());
2140:       assertFalse(node2.isDefaultCase());
2141:       assertFalse(node2.isLabelName());
2142:       assertTrue(node2.hasChildren());
2143:       assertEquals(1, node2.getChildCount());
2144:       assertFalse(node2.isNE());
2145:       assertFalse(node2.isIf());
2146:       assertFalse(node2.isDelProp());
2147:       assertFalse(node2.isEmpty());
2148:       assertFalse(node2.isCase());
2149:       assertFalse(node2.isString());
2150:       assertFalse(node2.isIn());
2151:       assertFalse(node2.isGetterDef());
2152:       assertFalse(node2.isTry());
2153:       assertFalse(node2.isHook());
2154:       assertEquals(0, node2.getType());
2155:       assertFalse(node2.isTrue());
2156:       assertFalse(node2.isVoid());
2157:       assertTrue(node2.hasOneChild());
2158:       assertFalse(node2.isBreak());
2159:       assertFalse(node2.isFor());
2160:       assertFalse(node2.isCatch());
2161:       assertFalse(node2.isThis());
2162:       assertFalse(node2.isComma());
2163:       assertFalse(node2.isRegExp());
2164:       assertFalse(node2.isInstanceOf());
2165:       assertFalse(node2.isGetProp());
2166:       assertFalse(node2.isSetterDef());
2167:       assertFalse(node2.isAnd());
2168:       assertEquals(4, node2.getCharno());
2169:       assertFalse(node2.isNot());
2170:       assertFalse(node2.isDebugger());
2171:       assertFalse(node2.isObjectLit());
2172:       assertFalse(node2.isInc());
2173:       assertFalse(node2.isThrow());
2174:       assertEquals(132, node2.getLineno());
2175:       assertFalse(node2.isCast());
2176:       assertFalse(node2.isContinue());
2177:       assertFalse(node2.isFalse());
2178:       assertFalse(node2.isFunction());
2179:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2180:       assertEquals(50, Node.FREE_CALL);
2181:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2182:       assertEquals(57, Node.REFLECTED_OBJECT);
2183:       assertEquals(48, Node.DIRECTIVES);
2184:       assertEquals(4095, Node.COLUMN_MASK);
2185:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2186:       assertEquals(40, Node.ORIGINALNAME_PROP);
2187:       assertEquals(1, Node.DECR_FLAG);
2188:       assertEquals(12, Node.COLUMN_BITS);
2189:       assertEquals(43, Node.IS_CONSTANT_NAME);
2190:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2191:       assertEquals(46, Node.IS_NAMESPACE);
2192:       assertEquals(54, Node.SLASH_V);
2193:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2194:       assertEquals(32, Node.INCRDECR_PROP);
2195:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2196:       assertEquals(29, Node.JSDOC_INFO_PROP);
2197:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2198:       assertEquals(2, Node.POST_FLAG);
2199:       assertEquals(56, Node.CHANGE_TIME);
2200:       assertEquals(47, Node.IS_DISPATCHER);
2201:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2202:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2203:       assertEquals(37, Node.OPT_ARG_NAME);
2204:       assertEquals(30, Node.VAR_ARGS_NAME);
2205:       assertEquals(49, Node.DIRECT_EVAL);
2206:       assertEquals(57, Node.LAST_PROP);
2207:       assertEquals(36, Node.QUOTED_PROP);
2208:       assertEquals(52, Node.LENGTH);
2209:       assertEquals(8, Node.FLAG_NO_THROWS);
2210:       assertEquals(55, Node.INFERRED_FUNCTION);
2211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2213:       assertEquals(39, Node.EMPTY_BLOCK);
2214:       assertEquals(53, Node.INPUT_ID);
2215:       assertEquals(37, Node.OPT_ARG_NAME);
2216:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2217:       assertEquals(47, Node.IS_DISPATCHER);
2218:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2219:       assertEquals(2, Node.POST_FLAG);
2220:       assertEquals(46, Node.IS_NAMESPACE);
2221:       assertEquals(56, Node.CHANGE_TIME);
2222:       assertEquals(49, Node.DIRECT_EVAL);
2223:       assertEquals(54, Node.SLASH_V);
2224:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2225:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2227:       assertEquals(1, Node.DECR_FLAG);
2228:       assertEquals(12, Node.COLUMN_BITS);
2229:       assertEquals(32, Node.INCRDECR_PROP);
2230:       assertEquals(48, Node.DIRECTIVES);
2231:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2232:       assertEquals(39, Node.EMPTY_BLOCK);
2233:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2234:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2235:       assertEquals(50, Node.FREE_CALL);
2236:       assertEquals(4095, Node.COLUMN_MASK);
2237:       assertEquals(8, Node.FLAG_NO_THROWS);
2238:       assertEquals(40, Node.ORIGINALNAME_PROP);
2239:       assertEquals(57, Node.REFLECTED_OBJECT);
2240:       assertEquals(43, Node.IS_CONSTANT_NAME);
2241:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2242:       assertEquals(36, Node.QUOTED_PROP);
2243:       assertEquals(53, Node.INPUT_ID);
2244:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2245:       assertEquals(30, Node.VAR_ARGS_NAME);
2246:       assertEquals(52, Node.LENGTH);
2247:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2248:       assertEquals(55, Node.INFERRED_FUNCTION);
2249:       assertEquals(29, Node.JSDOC_INFO_PROP);
2250:       assertEquals(57, Node.LAST_PROP);
2251:       assertNull(node3);
2252:       
2253:       // Undeclared exception!
2254:       try { 
2255:         node0.checkTreeTypeAwareEqualsImpl((Node) null);
2256:         fail("Expecting exception: NullPointerException");
2257:       
2258:       } catch(NullPointerException e) {
2259:          //
2260:          // no message in exception (getMessage() returned null)
2261:          //
2262:          verifyException("com.google.javascript.rhino.Node", e);
2263:       }
2264:   }
2265: }
RegularFileObject[/tmp/EvoSuite_139_1629222900286/com/google/javascript/rhino/Node_139_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:55:00 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_139_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_139_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.common.collect.Iterables",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.common.collect.AbstractMultimap$Values",
132:       "com.google.javascript.rhino.jstype.ProxyObjectType",
133:       "com.google.common.collect.Sets$SetView",
134:       "com.google.common.collect.RegularImmutableAsList",
135:       "com.google.javascript.rhino.jstype.TemplateType",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMultimap$Entries",
190:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
191:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
192:       "com.google.javascript.rhino.jstype.EnumElementType",
193:       "com.google.javascript.rhino.jstype.UnionType",
194:       "com.google.common.base.Objects",
195:       "com.google.javascript.rhino.Node$NumberNode",
196:       "com.google.common.collect.SingletonImmutableList",
197:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
198:       "com.google.common.collect.ImmutableCollection$Builder",
199:       "com.google.javascript.rhino.jstype.StaticSlot",
200:       "com.google.common.collect.Iterators$6",
201:       "com.google.common.collect.BiMap",
202:       "com.google.common.collect.Iterators$7",
203:       "com.google.common.collect.AbstractSetMultimap",
204:       "com.google.common.base.Function",
205:       "com.google.common.collect.ImmutableSet",
206:       "com.google.common.collect.Lists$AbstractListWrapper",
207:       "com.google.common.collect.ImmutableMap",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.Maps$1",
211:       "com.google.javascript.rhino.jstype.EnumType",
212:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.Multimaps$Entries",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
236:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
237:       "com.google.common.collect.ImmutableList",
238:       "com.google.common.collect.SingletonImmutableBiMap",
239:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
240:       "com.google.javascript.rhino.jstype.StringType",
241:       "com.google.javascript.rhino.Node$AbstractPropListItem",
242:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
243:       "com.google.javascript.rhino.jstype.TemplatizedType",
244:       "com.google.javascript.rhino.jstype.Visitor",
245:       "com.google.javascript.rhino.jstype.NoResolvedType",
246:       "com.google.javascript.rhino.jstype.JSTypeNative",
247:       "com.google.javascript.rhino.jstype.AllType",
248:       "com.google.common.collect.Maps",
249:       "com.google.common.collect.SetMultimap",
250:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
251:       "com.google.common.collect.Maps$EntryTransformer",
252:       "com.google.javascript.rhino.JSTypeExpression",
253:       "com.google.common.collect.Iterators$MergingIterator"
254:     );
255:   } 
256: 
257:   private static void resetClasses() {
258:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_139_tmp__ESTest_scaffolding.class.getClassLoader()); 
259: 
260:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
261:       "com.google.javascript.rhino.Node",
262:       "com.google.javascript.rhino.Node$NumberNode",
263:       "com.google.javascript.rhino.Node$StringNode",
264:       "com.google.javascript.rhino.Node$AbstractPropListItem",
265:       "com.google.javascript.rhino.Node$ObjectPropListItem",
266:       "com.google.javascript.rhino.Node$IntPropListItem",
267:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
268:       "com.google.javascript.rhino.Node$AncestorIterable",
269:       "com.google.javascript.rhino.Node$NodeMismatch",
270:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
271:       "com.google.javascript.rhino.Node$SideEffectFlags",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.Token",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.base.Objects",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
352:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.common.collect.AbstractIndexedListIterator",
362:       "com.google.common.collect.Iterators$11",
363:       "com.google.javascript.rhino.Node$AncestorIterable$1",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.InputId",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.javascript.rhino.JSTypeExpression",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.Sets$ImprovedAbstractSet",
375:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
376:       "com.google.common.collect.Hashing",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
378:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
379:       "com.google.common.collect.Platform"
380:     );
381:   }
382: }

[MASTER] 17:55:01.243 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-1.0));
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node0);

Node node1 = Node.newString((-1778), "", 15, 64);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertEquals(61504, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals(15, node1.getLineno());
assertFalse(node1.hasOneChild());
assertEquals((-1778), node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertEquals(64, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBreak());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node1);

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node1.isIn());
assertEquals(61504, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals(15, node1.getLineno());
assertFalse(node1.hasOneChild());
assertEquals((-1778), node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertEquals(64, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBreak());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node_NodeMismatch0);

Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node1.isIn());
assertEquals(61504, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals(15, node1.getLineno());
assertFalse(node1.hasOneChild());
assertEquals((-1778), node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertEquals(64, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBreak());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node_NodeMismatch1);
assertNotSame(node_NodeMismatch1, node_NodeMismatch0);

Object object0 = new Object();
assertNotNull(object0);

boolean boolean0 = node_NodeMismatch1.equals(object0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node1.isIn());
assertEquals(61504, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals(15, node1.getLineno());
assertFalse(node1.hasOneChild());
assertEquals((-1778), node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertEquals(64, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBreak());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(boolean0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertNotSame(node_NodeMismatch1, node_NodeMismatch0);

boolean boolean1 = node0.isEquivalentTo(node1, true, true, false);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node1.isIn());
assertEquals(61504, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals(15, node1.getLineno());
assertFalse(node1.hasOneChild());
assertEquals((-1778), node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertEquals(64, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBreak());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(boolean1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean2 = node0.isVarArgs();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(boolean2);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);

boolean boolean3 = node0.isIf();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(boolean3);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

boolean boolean4 = node1.isVoid();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertFalse(node1.isIn());
assertEquals(61504, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals(15, node1.getLineno());
assertFalse(node1.hasOneChild());
assertEquals((-1778), node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertEquals(64, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBreak());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(boolean4);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);

node0.setInputId((InputId) null);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

node1.setType(1895);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertEquals(1895, node1.getType());
assertEquals(61504, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals(15, node1.getLineno());
assertFalse(node1.hasOneChild());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertEquals(64, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBreak());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean5 = node0.hasChildren();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(boolean5);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

Node node2 = new Node(0, node0, 132, 4);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isDo());
assertFalse(node2.isNumber());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertEquals(540676, node2.getSourcePosition());
assertFalse(node2.isName());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isScript());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabelName());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertEquals(0, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertTrue(node2.hasOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAnd());
assertEquals(4, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertEquals(132, node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node2);

Node node3 = node2.getChildBefore(node0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isDo());
assertFalse(node2.isNumber());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertEquals(540676, node2.getSourcePosition());
assertFalse(node2.isName());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isScript());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabelName());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertEquals(0, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertTrue(node2.hasOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAnd());
assertEquals(4, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertEquals(132, node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertNull(node3);

node0.checkTreeTypeAwareEqualsImpl((Node) null);

[MASTER] 17:55:01.536 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_140_1629222901244/com/google/javascript/rhino/Node_140_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_140_1629222901244/com/google/javascript/rhino/Node_140_tmp__ESTest_scaffolding.java]]
[MASTER] 17:55:01.536 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:01.536 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:01.537 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1073
[MASTER] 17:55:01.538 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_140_1629222901244/com/google/javascript/rhino/Node_140_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:55:01 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_140_tmp__ESTest extends Node_140_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(0.0);
23:       assertEquals(39, node0.getType());
24:       assertFalse(node0.isDo());
25:       assertFalse(node0.isWhile());
26:       assertFalse(node0.isContinue());
27:       assertFalse(node0.isBlock());
28:       assertFalse(node0.isReturn());
29:       assertFalse(node0.isLabel());
30:       assertEquals((-1), node0.getLineno());
31:       assertFalse(node0.hasMoreThanOneChild());
32:       assertFalse(node0.isCall());
33:       assertFalse(node0.isLabelName());
34:       assertFalse(node0.isAssign());
35:       assertFalse(node0.isStringKey());
36:       assertFalse(node0.isTypeOf());
37:       assertFalse(node0.isParamList());
38:       assertEquals((-1), node0.getSourcePosition());
39:       assertFalse(node0.isDec());
40:       assertFalse(node0.hasChildren());
41:       assertFalse(node0.isScript());
42:       assertFalse(node0.hasOneChild());
43:       assertFalse(node0.isDefaultCase());
44:       assertFalse(node0.isTrue());
45:       assertFalse(node0.isVoid());
46:       assertEquals(0, node0.getChildCount());
47:       assertFalse(node0.isArrayLit());
48:       assertFalse(node0.isBreak());
49:       assertFalse(node0.isExprResult());
50:       assertFalse(node0.isGetElem());
51:       assertFalse(node0.isEmpty());
52:       assertFalse(node0.isName());
53:       assertFalse(node0.isDelProp());
54:       assertFalse(node0.isVar());
55:       assertFalse(node0.isNull());
56:       assertFalse(node0.isOr());
57:       assertFalse(node0.isAssignAdd());
58:       assertFalse(node0.isNew());
59:       assertFalse(node0.isAdd());
60:       assertFalse(node0.isCase());
61:       assertFalse(node0.isString());
62:       assertFalse(node0.isSwitch());
63:       assertEquals((-1), node0.getCharno());
64:       assertFalse(node0.isFor());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isComma());
67:       assertFalse(node0.isThis());
68:       assertFalse(node0.isHook());
69:       assertFalse(node0.isTry());
70:       assertTrue(node0.isNumber());
71:       assertFalse(node0.isGetProp());
72:       assertFalse(node0.isWith());
73:       assertFalse(node0.isNot());
74:       assertFalse(node0.isRegExp());
75:       assertFalse(node0.isObjectLit());
76:       assertFalse(node0.isDebugger());
77:       assertFalse(node0.isAnd());
78:       assertFalse(node0.isFunction());
79:       assertFalse(node0.isCatch());
80:       assertFalse(node0.isCast());
81:       assertFalse(node0.isInstanceOf());
82:       assertFalse(node0.isIf());
83:       assertFalse(node0.isFalse());
84:       assertFalse(node0.isNE());
85:       assertFalse(node0.isThrow());
86:       assertFalse(node0.isIn());
87:       assertFalse(node0.isSetterDef());
88:       assertFalse(node0.isInc());
89:       assertEquals(1, Node.DECR_FLAG);
90:       assertEquals(32, Node.INCRDECR_PROP);
91:       assertEquals(49, Node.DIRECT_EVAL);
92:       assertEquals(15, Node.NO_SIDE_EFFECTS);
93:       assertEquals(2, Node.POST_FLAG);
94:       assertEquals(57, Node.LAST_PROP);
95:       assertEquals(30, Node.VAR_ARGS_NAME);
96:       assertEquals(12, Node.COLUMN_BITS);
97:       assertEquals(47, Node.IS_DISPATCHER);
98:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
99:       assertEquals(40, Node.ORIGINALNAME_PROP);
100:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
101:       assertEquals(50, Node.FREE_CALL);
102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
103:       assertEquals(54, Node.SLASH_V);
104:       assertEquals(43, Node.IS_CONSTANT_NAME);
105:       assertEquals(46, Node.IS_NAMESPACE);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
108:       assertEquals(55, Node.INFERRED_FUNCTION);
109:       assertEquals(4095, Node.COLUMN_MASK);
110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
111:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
112:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
114:       assertEquals(29, Node.JSDOC_INFO_PROP);
115:       assertEquals(53, Node.INPUT_ID);
116:       assertEquals(39, Node.EMPTY_BLOCK);
117:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
118:       assertEquals(37, Node.OPT_ARG_NAME);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(52, Node.LENGTH);
121:       assertEquals(8, Node.FLAG_NO_THROWS);
122:       assertEquals(56, Node.CHANGE_TIME);
123:       assertEquals(36, Node.QUOTED_PROP);
124:       assertEquals(57, Node.REFLECTED_OBJECT);
125:       assertNotNull(node0);
126:       
127:       Node node1 = Node.newString(0, "", 4, 38);
128:       assertFalse(node1.equals((Object)node0));
129:       assertFalse(node1.isCatch());
130:       assertEquals(0, node1.getChildCount());
131:       assertEquals(4, node1.getLineno());
132:       assertFalse(node1.isNull());
133:       assertEquals(16422, node1.getSourcePosition());
134:       assertFalse(node1.isTrue());
135:       assertFalse(node1.isDebugger());
136:       assertFalse(node1.isStringKey());
137:       assertFalse(node1.isName());
138:       assertFalse(node1.isVoid());
139:       assertFalse(node1.isParamList());
140:       assertFalse(node1.isCall());
141:       assertFalse(node1.isRegExp());
142:       assertFalse(node1.isBlock());
143:       assertFalse(node1.isFor());
144:       assertFalse(node1.isTry());
145:       assertFalse(node1.isWhile());
146:       assertFalse(node1.isString());
147:       assertFalse(node1.isContinue());
148:       assertFalse(node1.hasMoreThanOneChild());
149:       assertFalse(node1.isIn());
150:       assertFalse(node1.isNE());
151:       assertEquals(38, node1.getCharno());
152:       assertFalse(node1.isIf());
153:       assertFalse(node1.isCast());
154:       assertFalse(node1.isFalse());
155:       assertFalse(node1.isFunction());
156:       assertFalse(node1.isSetterDef());
157:       assertFalse(node1.isInc());
158:       assertFalse(node1.isThrow());
159:       assertFalse(node1.isInstanceOf());
160:       assertFalse(node1.isNot());
161:       assertFalse(node1.isObjectLit());
162:       assertFalse(node1.isWith());
163:       assertFalse(node1.isExprResult());
164:       assertFalse(node1.isBreak());
165:       assertFalse(node1.isAnd());
166:       assertFalse(node1.hasOneChild());
167:       assertFalse(node1.isHook());
168:       assertEquals(0, node1.getType());
169:       assertFalse(node1.isGetElem());
170:       assertFalse(node1.isAssign());
171:       assertFalse(node1.isDec());
172:       assertFalse(node1.isTypeOf());
173:       assertFalse(node1.isScript());
174:       assertFalse(node1.isThis());
175:       assertFalse(node1.isComma());
176:       assertFalse(node1.hasChildren());
177:       assertFalse(node1.isGetProp());
178:       assertFalse(node1.isCase());
179:       assertFalse(node1.isReturn());
180:       assertFalse(node1.isLabel());
181:       assertFalse(node1.isOr());
182:       assertFalse(node1.isNumber());
183:       assertFalse(node1.isGetterDef());
184:       assertFalse(node1.isDelProp());
185:       assertFalse(node1.isLabelName());
186:       assertFalse(node1.isSwitch());
187:       assertFalse(node1.isArrayLit());
188:       assertFalse(node1.isVar());
189:       assertFalse(node1.isAdd());
190:       assertFalse(node1.isEmpty());
191:       assertFalse(node1.isNew());
192:       assertFalse(node1.isDo());
193:       assertFalse(node1.isAssignAdd());
194:       assertFalse(node1.isDefaultCase());
195:       assertEquals(48, Node.DIRECTIVES);
196:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
197:       assertEquals(40, Node.ORIGINALNAME_PROP);
198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
199:       assertEquals(4095, Node.COLUMN_MASK);
200:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
201:       assertEquals(54, Node.SLASH_V);
202:       assertEquals(43, Node.IS_CONSTANT_NAME);
203:       assertEquals(50, Node.FREE_CALL);
204:       assertEquals(1, Node.DECR_FLAG);
205:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
207:       assertEquals(32, Node.INCRDECR_PROP);
208:       assertEquals(46, Node.IS_NAMESPACE);
209:       assertEquals(37, Node.OPT_ARG_NAME);
210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
211:       assertEquals(12, Node.COLUMN_BITS);
212:       assertEquals(56, Node.CHANGE_TIME);
213:       assertEquals(30, Node.VAR_ARGS_NAME);
214:       assertEquals(49, Node.DIRECT_EVAL);
215:       assertEquals(47, Node.IS_DISPATCHER);
216:       assertEquals(2, Node.POST_FLAG);
217:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
218:       assertEquals(52, Node.LENGTH);
219:       assertEquals(53, Node.INPUT_ID);
220:       assertEquals(57, Node.REFLECTED_OBJECT);
221:       assertEquals(57, Node.LAST_PROP);
222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
223:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
224:       assertEquals(29, Node.JSDOC_INFO_PROP);
225:       assertEquals(15, Node.NO_SIDE_EFFECTS);
226:       assertEquals(36, Node.QUOTED_PROP);
227:       assertEquals(55, Node.INFERRED_FUNCTION);
228:       assertEquals(8, Node.FLAG_NO_THROWS);
229:       assertEquals(39, Node.EMPTY_BLOCK);
230:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
231:       assertNotNull(node1);
232:       
233:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
234:       assertFalse(node0.equals((Object)node1));
235:       assertFalse(node1.equals((Object)node0));
236:       assertEquals(39, node0.getType());
237:       assertFalse(node0.isDo());
238:       assertFalse(node0.isWhile());
239:       assertFalse(node0.isContinue());
240:       assertFalse(node0.isBlock());
241:       assertFalse(node0.isReturn());
242:       assertFalse(node0.isLabel());
243:       assertEquals((-1), node0.getLineno());
244:       assertFalse(node0.hasMoreThanOneChild());
245:       assertFalse(node0.isCall());
246:       assertFalse(node0.isLabelName());
247:       assertFalse(node0.isAssign());
248:       assertFalse(node0.isStringKey());
249:       assertFalse(node0.isTypeOf());
250:       assertFalse(node0.isParamList());
251:       assertEquals((-1), node0.getSourcePosition());
252:       assertFalse(node0.isDec());
253:       assertFalse(node0.hasChildren());
254:       assertFalse(node0.isScript());
255:       assertFalse(node0.hasOneChild());
256:       assertFalse(node0.isDefaultCase());
257:       assertFalse(node0.isTrue());
258:       assertFalse(node0.isVoid());
259:       assertEquals(0, node0.getChildCount());
260:       assertFalse(node0.isArrayLit());
261:       assertFalse(node0.isBreak());
262:       assertFalse(node0.isExprResult());
263:       assertFalse(node0.isGetElem());
264:       assertFalse(node0.isEmpty());
265:       assertFalse(node0.isName());
266:       assertFalse(node0.isDelProp());
267:       assertFalse(node0.isVar());
268:       assertFalse(node0.isNull());
269:       assertFalse(node0.isOr());
270:       assertFalse(node0.isAssignAdd());
271:       assertFalse(node0.isNew());
272:       assertFalse(node0.isAdd());
273:       assertFalse(node0.isCase());
274:       assertFalse(node0.isString());
275:       assertFalse(node0.isSwitch());
276:       assertEquals((-1), node0.getCharno());
277:       assertFalse(node0.isFor());
278:       assertFalse(node0.isGetterDef());
279:       assertFalse(node0.isComma());
280:       assertFalse(node0.isThis());
281:       assertFalse(node0.isHook());
282:       assertFalse(node0.isTry());
283:       assertTrue(node0.isNumber());
284:       assertFalse(node0.isGetProp());
285:       assertFalse(node0.isWith());
286:       assertFalse(node0.isNot());
287:       assertFalse(node0.isRegExp());
288:       assertFalse(node0.isObjectLit());
289:       assertFalse(node0.isDebugger());
290:       assertFalse(node0.isAnd());
291:       assertFalse(node0.isFunction());
292:       assertFalse(node0.isCatch());
293:       assertFalse(node0.isCast());
294:       assertFalse(node0.isInstanceOf());
295:       assertFalse(node0.isIf());
296:       assertFalse(node0.isFalse());
297:       assertFalse(node0.isNE());
298:       assertFalse(node0.isThrow());
299:       assertFalse(node0.isIn());
300:       assertFalse(node0.isSetterDef());
301:       assertFalse(node0.isInc());
302:       assertFalse(node1.isCatch());
303:       assertEquals(0, node1.getChildCount());
304:       assertEquals(4, node1.getLineno());
305:       assertFalse(node1.isNull());
306:       assertEquals(16422, node1.getSourcePosition());
307:       assertFalse(node1.isTrue());
308:       assertFalse(node1.isDebugger());
309:       assertFalse(node1.isStringKey());
310:       assertFalse(node1.isName());
311:       assertFalse(node1.isVoid());
312:       assertFalse(node1.isParamList());
313:       assertFalse(node1.isCall());
314:       assertFalse(node1.isRegExp());
315:       assertFalse(node1.isBlock());
316:       assertFalse(node1.isFor());
317:       assertFalse(node1.isTry());
318:       assertFalse(node1.isWhile());
319:       assertFalse(node1.isString());
320:       assertFalse(node1.isContinue());
321:       assertFalse(node1.hasMoreThanOneChild());
322:       assertFalse(node1.isIn());
323:       assertFalse(node1.isNE());
324:       assertEquals(38, node1.getCharno());
325:       assertFalse(node1.isIf());
326:       assertFalse(node1.isCast());
327:       assertFalse(node1.isFalse());
328:       assertFalse(node1.isFunction());
329:       assertFalse(node1.isSetterDef());
330:       assertFalse(node1.isInc());
331:       assertFalse(node1.isThrow());
332:       assertFalse(node1.isInstanceOf());
333:       assertFalse(node1.isNot());
334:       assertFalse(node1.isObjectLit());
335:       assertFalse(node1.isWith());
336:       assertFalse(node1.isExprResult());
337:       assertFalse(node1.isBreak());
338:       assertFalse(node1.isAnd());
339:       assertFalse(node1.hasOneChild());
340:       assertFalse(node1.isHook());
341:       assertEquals(0, node1.getType());
342:       assertFalse(node1.isGetElem());
343:       assertFalse(node1.isAssign());
344:       assertFalse(node1.isDec());
345:       assertFalse(node1.isTypeOf());
346:       assertFalse(node1.isScript());
347:       assertFalse(node1.isThis());
348:       assertFalse(node1.isComma());
349:       assertFalse(node1.hasChildren());
350:       assertFalse(node1.isGetProp());
351:       assertFalse(node1.isCase());
352:       assertFalse(node1.isReturn());
353:       assertFalse(node1.isLabel());
354:       assertFalse(node1.isOr());
355:       assertFalse(node1.isNumber());
356:       assertFalse(node1.isGetterDef());
357:       assertFalse(node1.isDelProp());
358:       assertFalse(node1.isLabelName());
359:       assertFalse(node1.isSwitch());
360:       assertFalse(node1.isArrayLit());
361:       assertFalse(node1.isVar());
362:       assertFalse(node1.isAdd());
363:       assertFalse(node1.isEmpty());
364:       assertFalse(node1.isNew());
365:       assertFalse(node1.isDo());
366:       assertFalse(node1.isAssignAdd());
367:       assertFalse(node1.isDefaultCase());
368:       assertEquals(1, Node.DECR_FLAG);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(49, Node.DIRECT_EVAL);
371:       assertEquals(15, Node.NO_SIDE_EFFECTS);
372:       assertEquals(2, Node.POST_FLAG);
373:       assertEquals(57, Node.LAST_PROP);
374:       assertEquals(30, Node.VAR_ARGS_NAME);
375:       assertEquals(12, Node.COLUMN_BITS);
376:       assertEquals(47, Node.IS_DISPATCHER);
377:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
378:       assertEquals(40, Node.ORIGINALNAME_PROP);
379:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
380:       assertEquals(50, Node.FREE_CALL);
381:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
382:       assertEquals(54, Node.SLASH_V);
383:       assertEquals(43, Node.IS_CONSTANT_NAME);
384:       assertEquals(46, Node.IS_NAMESPACE);
385:       assertEquals(51, Node.STATIC_SOURCE_FILE);
386:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
387:       assertEquals(55, Node.INFERRED_FUNCTION);
388:       assertEquals(4095, Node.COLUMN_MASK);
389:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
390:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
391:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
392:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
393:       assertEquals(29, Node.JSDOC_INFO_PROP);
394:       assertEquals(53, Node.INPUT_ID);
395:       assertEquals(39, Node.EMPTY_BLOCK);
396:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
397:       assertEquals(37, Node.OPT_ARG_NAME);
398:       assertEquals(48, Node.DIRECTIVES);
399:       assertEquals(52, Node.LENGTH);
400:       assertEquals(8, Node.FLAG_NO_THROWS);
401:       assertEquals(56, Node.CHANGE_TIME);
402:       assertEquals(36, Node.QUOTED_PROP);
403:       assertEquals(57, Node.REFLECTED_OBJECT);
404:       assertEquals(48, Node.DIRECTIVES);
405:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
406:       assertEquals(40, Node.ORIGINALNAME_PROP);
407:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
408:       assertEquals(4095, Node.COLUMN_MASK);
409:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
410:       assertEquals(54, Node.SLASH_V);
411:       assertEquals(43, Node.IS_CONSTANT_NAME);
412:       assertEquals(50, Node.FREE_CALL);
413:       assertEquals(1, Node.DECR_FLAG);
414:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
415:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
416:       assertEquals(32, Node.INCRDECR_PROP);
417:       assertEquals(46, Node.IS_NAMESPACE);
418:       assertEquals(37, Node.OPT_ARG_NAME);
419:       assertEquals(51, Node.STATIC_SOURCE_FILE);
420:       assertEquals(12, Node.COLUMN_BITS);
421:       assertEquals(56, Node.CHANGE_TIME);
422:       assertEquals(30, Node.VAR_ARGS_NAME);
423:       assertEquals(49, Node.DIRECT_EVAL);
424:       assertEquals(47, Node.IS_DISPATCHER);
425:       assertEquals(2, Node.POST_FLAG);
426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
427:       assertEquals(52, Node.LENGTH);
428:       assertEquals(53, Node.INPUT_ID);
429:       assertEquals(57, Node.REFLECTED_OBJECT);
430:       assertEquals(57, Node.LAST_PROP);
431:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
432:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
433:       assertEquals(29, Node.JSDOC_INFO_PROP);
434:       assertEquals(15, Node.NO_SIDE_EFFECTS);
435:       assertEquals(36, Node.QUOTED_PROP);
436:       assertEquals(55, Node.INFERRED_FUNCTION);
437:       assertEquals(8, Node.FLAG_NO_THROWS);
438:       assertEquals(39, Node.EMPTY_BLOCK);
439:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
440:       assertNotNull(node_NodeMismatch0);
441:       
442:       boolean boolean0 = node_NodeMismatch0.equals("");
443:       assertFalse(node0.equals((Object)node1));
444:       assertFalse(node1.equals((Object)node0));
445:       assertEquals(39, node0.getType());
446:       assertFalse(node0.isDo());
447:       assertFalse(node0.isWhile());
448:       assertFalse(node0.isContinue());
449:       assertFalse(node0.isBlock());
450:       assertFalse(node0.isReturn());
451:       assertFalse(node0.isLabel());
452:       assertEquals((-1), node0.getLineno());
453:       assertFalse(node0.hasMoreThanOneChild());
454:       assertFalse(node0.isCall());
455:       assertFalse(node0.isLabelName());
456:       assertFalse(node0.isAssign());
457:       assertFalse(node0.isStringKey());
458:       assertFalse(node0.isTypeOf());
459:       assertFalse(node0.isParamList());
460:       assertEquals((-1), node0.getSourcePosition());
461:       assertFalse(node0.isDec());
462:       assertFalse(node0.hasChildren());
463:       assertFalse(node0.isScript());
464:       assertFalse(node0.hasOneChild());
465:       assertFalse(node0.isDefaultCase());
466:       assertFalse(node0.isTrue());
467:       assertFalse(node0.isVoid());
468:       assertEquals(0, node0.getChildCount());
469:       assertFalse(node0.isArrayLit());
470:       assertFalse(node0.isBreak());
471:       assertFalse(node0.isExprResult());
472:       assertFalse(node0.isGetElem());
473:       assertFalse(node0.isEmpty());
474:       assertFalse(node0.isName());
475:       assertFalse(node0.isDelProp());
476:       assertFalse(node0.isVar());
477:       assertFalse(node0.isNull());
478:       assertFalse(node0.isOr());
479:       assertFalse(node0.isAssignAdd());
480:       assertFalse(node0.isNew());
481:       assertFalse(node0.isAdd());
482:       assertFalse(node0.isCase());
483:       assertFalse(node0.isString());
484:       assertFalse(node0.isSwitch());
485:       assertEquals((-1), node0.getCharno());
486:       assertFalse(node0.isFor());
487:       assertFalse(node0.isGetterDef());
488:       assertFalse(node0.isComma());
489:       assertFalse(node0.isThis());
490:       assertFalse(node0.isHook());
491:       assertFalse(node0.isTry());
492:       assertTrue(node0.isNumber());
493:       assertFalse(node0.isGetProp());
494:       assertFalse(node0.isWith());
495:       assertFalse(node0.isNot());
496:       assertFalse(node0.isRegExp());
497:       assertFalse(node0.isObjectLit());
498:       assertFalse(node0.isDebugger());
499:       assertFalse(node0.isAnd());
500:       assertFalse(node0.isFunction());
501:       assertFalse(node0.isCatch());
502:       assertFalse(node0.isCast());
503:       assertFalse(node0.isInstanceOf());
504:       assertFalse(node0.isIf());
505:       assertFalse(node0.isFalse());
506:       assertFalse(node0.isNE());
507:       assertFalse(node0.isThrow());
508:       assertFalse(node0.isIn());
509:       assertFalse(node0.isSetterDef());
510:       assertFalse(node0.isInc());
511:       assertFalse(node1.isCatch());
512:       assertEquals(0, node1.getChildCount());
513:       assertEquals(4, node1.getLineno());
514:       assertFalse(node1.isNull());
515:       assertEquals(16422, node1.getSourcePosition());
516:       assertFalse(node1.isTrue());
517:       assertFalse(node1.isDebugger());
518:       assertFalse(node1.isStringKey());
519:       assertFalse(node1.isName());
520:       assertFalse(node1.isVoid());
521:       assertFalse(node1.isParamList());
522:       assertFalse(node1.isCall());
523:       assertFalse(node1.isRegExp());
524:       assertFalse(node1.isBlock());
525:       assertFalse(node1.isFor());
526:       assertFalse(node1.isTry());
527:       assertFalse(node1.isWhile());
528:       assertFalse(node1.isString());
529:       assertFalse(node1.isContinue());
530:       assertFalse(node1.hasMoreThanOneChild());
531:       assertFalse(node1.isIn());
532:       assertFalse(node1.isNE());
533:       assertEquals(38, node1.getCharno());
534:       assertFalse(node1.isIf());
535:       assertFalse(node1.isCast());
536:       assertFalse(node1.isFalse());
537:       assertFalse(node1.isFunction());
538:       assertFalse(node1.isSetterDef());
539:       assertFalse(node1.isInc());
540:       assertFalse(node1.isThrow());
541:       assertFalse(node1.isInstanceOf());
542:       assertFalse(node1.isNot());
543:       assertFalse(node1.isObjectLit());
544:       assertFalse(node1.isWith());
545:       assertFalse(node1.isExprResult());
546:       assertFalse(node1.isBreak());
547:       assertFalse(node1.isAnd());
548:       assertFalse(node1.hasOneChild());
549:       assertFalse(node1.isHook());
550:       assertEquals(0, node1.getType());
551:       assertFalse(node1.isGetElem());
552:       assertFalse(node1.isAssign());
553:       assertFalse(node1.isDec());
554:       assertFalse(node1.isTypeOf());
555:       assertFalse(node1.isScript());
556:       assertFalse(node1.isThis());
557:       assertFalse(node1.isComma());
558:       assertFalse(node1.hasChildren());
559:       assertFalse(node1.isGetProp());
560:       assertFalse(node1.isCase());
561:       assertFalse(node1.isReturn());
562:       assertFalse(node1.isLabel());
563:       assertFalse(node1.isOr());
564:       assertFalse(node1.isNumber());
565:       assertFalse(node1.isGetterDef());
566:       assertFalse(node1.isDelProp());
567:       assertFalse(node1.isLabelName());
568:       assertFalse(node1.isSwitch());
569:       assertFalse(node1.isArrayLit());
570:       assertFalse(node1.isVar());
571:       assertFalse(node1.isAdd());
572:       assertFalse(node1.isEmpty());
573:       assertFalse(node1.isNew());
574:       assertFalse(node1.isDo());
575:       assertFalse(node1.isAssignAdd());
576:       assertFalse(node1.isDefaultCase());
577:       assertFalse(boolean0);
578:       assertEquals(1, Node.DECR_FLAG);
579:       assertEquals(32, Node.INCRDECR_PROP);
580:       assertEquals(49, Node.DIRECT_EVAL);
581:       assertEquals(15, Node.NO_SIDE_EFFECTS);
582:       assertEquals(2, Node.POST_FLAG);
583:       assertEquals(57, Node.LAST_PROP);
584:       assertEquals(30, Node.VAR_ARGS_NAME);
585:       assertEquals(12, Node.COLUMN_BITS);
586:       assertEquals(47, Node.IS_DISPATCHER);
587:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
588:       assertEquals(40, Node.ORIGINALNAME_PROP);
589:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
590:       assertEquals(50, Node.FREE_CALL);
591:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
592:       assertEquals(54, Node.SLASH_V);
593:       assertEquals(43, Node.IS_CONSTANT_NAME);
594:       assertEquals(46, Node.IS_NAMESPACE);
595:       assertEquals(51, Node.STATIC_SOURCE_FILE);
596:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
597:       assertEquals(55, Node.INFERRED_FUNCTION);
598:       assertEquals(4095, Node.COLUMN_MASK);
599:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
600:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
601:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
602:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
603:       assertEquals(29, Node.JSDOC_INFO_PROP);
604:       assertEquals(53, Node.INPUT_ID);
605:       assertEquals(39, Node.EMPTY_BLOCK);
606:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
607:       assertEquals(37, Node.OPT_ARG_NAME);
608:       assertEquals(48, Node.DIRECTIVES);
609:       assertEquals(52, Node.LENGTH);
610:       assertEquals(8, Node.FLAG_NO_THROWS);
611:       assertEquals(56, Node.CHANGE_TIME);
612:       assertEquals(36, Node.QUOTED_PROP);
613:       assertEquals(57, Node.REFLECTED_OBJECT);
614:       assertEquals(48, Node.DIRECTIVES);
615:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
616:       assertEquals(40, Node.ORIGINALNAME_PROP);
617:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
618:       assertEquals(4095, Node.COLUMN_MASK);
619:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
620:       assertEquals(54, Node.SLASH_V);
621:       assertEquals(43, Node.IS_CONSTANT_NAME);
622:       assertEquals(50, Node.FREE_CALL);
623:       assertEquals(1, Node.DECR_FLAG);
624:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
625:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
626:       assertEquals(32, Node.INCRDECR_PROP);
627:       assertEquals(46, Node.IS_NAMESPACE);
628:       assertEquals(37, Node.OPT_ARG_NAME);
629:       assertEquals(51, Node.STATIC_SOURCE_FILE);
630:       assertEquals(12, Node.COLUMN_BITS);
631:       assertEquals(56, Node.CHANGE_TIME);
632:       assertEquals(30, Node.VAR_ARGS_NAME);
633:       assertEquals(49, Node.DIRECT_EVAL);
634:       assertEquals(47, Node.IS_DISPATCHER);
635:       assertEquals(2, Node.POST_FLAG);
636:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
637:       assertEquals(52, Node.LENGTH);
638:       assertEquals(53, Node.INPUT_ID);
639:       assertEquals(57, Node.REFLECTED_OBJECT);
640:       assertEquals(57, Node.LAST_PROP);
641:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
642:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
643:       assertEquals(29, Node.JSDOC_INFO_PROP);
644:       assertEquals(15, Node.NO_SIDE_EFFECTS);
645:       assertEquals(36, Node.QUOTED_PROP);
646:       assertEquals(55, Node.INFERRED_FUNCTION);
647:       assertEquals(8, Node.FLAG_NO_THROWS);
648:       assertEquals(39, Node.EMPTY_BLOCK);
649:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
650:       
651:       boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
652:       assertFalse(node0.equals((Object)node1));
653:       assertFalse(node1.equals((Object)node0));
654:       assertTrue(boolean1 == boolean0);
655:       assertEquals(39, node0.getType());
656:       assertFalse(node0.isDo());
657:       assertFalse(node0.isWhile());
658:       assertFalse(node0.isContinue());
659:       assertFalse(node0.isBlock());
660:       assertFalse(node0.isReturn());
661:       assertFalse(node0.isLabel());
662:       assertEquals((-1), node0.getLineno());
663:       assertFalse(node0.hasMoreThanOneChild());
664:       assertFalse(node0.isCall());
665:       assertFalse(node0.isLabelName());
666:       assertFalse(node0.isAssign());
667:       assertFalse(node0.isStringKey());
668:       assertFalse(node0.isTypeOf());
669:       assertFalse(node0.isParamList());
670:       assertEquals((-1), node0.getSourcePosition());
671:       assertFalse(node0.isDec());
672:       assertFalse(node0.hasChildren());
673:       assertFalse(node0.isScript());
674:       assertFalse(node0.hasOneChild());
675:       assertFalse(node0.isDefaultCase());
676:       assertFalse(node0.isTrue());
677:       assertFalse(node0.isVoid());
678:       assertEquals(0, node0.getChildCount());
679:       assertFalse(node0.isArrayLit());
680:       assertFalse(node0.isBreak());
681:       assertFalse(node0.isExprResult());
682:       assertFalse(node0.isGetElem());
683:       assertFalse(node0.isEmpty());
684:       assertFalse(node0.isName());
685:       assertFalse(node0.isDelProp());
686:       assertFalse(node0.isVar());
687:       assertFalse(node0.isNull());
688:       assertFalse(node0.isOr());
689:       assertFalse(node0.isAssignAdd());
690:       assertFalse(node0.isNew());
691:       assertFalse(node0.isAdd());
692:       assertFalse(node0.isCase());
693:       assertFalse(node0.isString());
694:       assertFalse(node0.isSwitch());
695:       assertEquals((-1), node0.getCharno());
696:       assertFalse(node0.isFor());
697:       assertFalse(node0.isGetterDef());
698:       assertFalse(node0.isComma());
699:       assertFalse(node0.isThis());
700:       assertFalse(node0.isHook());
701:       assertFalse(node0.isTry());
702:       assertTrue(node0.isNumber());
703:       assertFalse(node0.isGetProp());
704:       assertFalse(node0.isWith());
705:       assertFalse(node0.isNot());
706:       assertFalse(node0.isRegExp());
707:       assertFalse(node0.isObjectLit());
708:       assertFalse(node0.isDebugger());
709:       assertFalse(node0.isAnd());
710:       assertFalse(node0.isFunction());
711:       assertFalse(node0.isCatch());
712:       assertFalse(node0.isCast());
713:       assertFalse(node0.isInstanceOf());
714:       assertFalse(node0.isIf());
715:       assertFalse(node0.isFalse());
716:       assertFalse(node0.isNE());
717:       assertFalse(node0.isThrow());
718:       assertFalse(node0.isIn());
719:       assertFalse(node0.isSetterDef());
720:       assertFalse(node0.isInc());
721:       assertFalse(node1.isCatch());
722:       assertEquals(0, node1.getChildCount());
723:       assertEquals(4, node1.getLineno());
724:       assertFalse(node1.isNull());
725:       assertEquals(16422, node1.getSourcePosition());
726:       assertFalse(node1.isTrue());
727:       assertFalse(node1.isDebugger());
728:       assertFalse(node1.isStringKey());
729:       assertFalse(node1.isName());
730:       assertFalse(node1.isVoid());
731:       assertFalse(node1.isParamList());
732:       assertFalse(node1.isCall());
733:       assertFalse(node1.isRegExp());
734:       assertFalse(node1.isBlock());
735:       assertFalse(node1.isFor());
736:       assertFalse(node1.isTry());
737:       assertFalse(node1.isWhile());
738:       assertFalse(node1.isString());
739:       assertFalse(node1.isContinue());
740:       assertFalse(node1.hasMoreThanOneChild());
741:       assertFalse(node1.isIn());
742:       assertFalse(node1.isNE());
743:       assertEquals(38, node1.getCharno());
744:       assertFalse(node1.isIf());
745:       assertFalse(node1.isCast());
746:       assertFalse(node1.isFalse());
747:       assertFalse(node1.isFunction());
748:       assertFalse(node1.isSetterDef());
749:       assertFalse(node1.isInc());
750:       assertFalse(node1.isThrow());
751:       assertFalse(node1.isInstanceOf());
752:       assertFalse(node1.isNot());
753:       assertFalse(node1.isObjectLit());
754:       assertFalse(node1.isWith());
755:       assertFalse(node1.isExprResult());
756:       assertFalse(node1.isBreak());
757:       assertFalse(node1.isAnd());
758:       assertFalse(node1.hasOneChild());
759:       assertFalse(node1.isHook());
760:       assertEquals(0, node1.getType());
761:       assertFalse(node1.isGetElem());
762:       assertFalse(node1.isAssign());
763:       assertFalse(node1.isDec());
764:       assertFalse(node1.isTypeOf());
765:       assertFalse(node1.isScript());
766:       assertFalse(node1.isThis());
767:       assertFalse(node1.isComma());
768:       assertFalse(node1.hasChildren());
769:       assertFalse(node1.isGetProp());
770:       assertFalse(node1.isCase());
771:       assertFalse(node1.isReturn());
772:       assertFalse(node1.isLabel());
773:       assertFalse(node1.isOr());
774:       assertFalse(node1.isNumber());
775:       assertFalse(node1.isGetterDef());
776:       assertFalse(node1.isDelProp());
777:       assertFalse(node1.isLabelName());
778:       assertFalse(node1.isSwitch());
779:       assertFalse(node1.isArrayLit());
780:       assertFalse(node1.isVar());
781:       assertFalse(node1.isAdd());
782:       assertFalse(node1.isEmpty());
783:       assertFalse(node1.isNew());
784:       assertFalse(node1.isDo());
785:       assertFalse(node1.isAssignAdd());
786:       assertFalse(node1.isDefaultCase());
787:       assertFalse(boolean1);
788:       assertEquals(1, Node.DECR_FLAG);
789:       assertEquals(32, Node.INCRDECR_PROP);
790:       assertEquals(49, Node.DIRECT_EVAL);
791:       assertEquals(15, Node.NO_SIDE_EFFECTS);
792:       assertEquals(2, Node.POST_FLAG);
793:       assertEquals(57, Node.LAST_PROP);
794:       assertEquals(30, Node.VAR_ARGS_NAME);
795:       assertEquals(12, Node.COLUMN_BITS);
796:       assertEquals(47, Node.IS_DISPATCHER);
797:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
798:       assertEquals(40, Node.ORIGINALNAME_PROP);
799:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
800:       assertEquals(50, Node.FREE_CALL);
801:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
802:       assertEquals(54, Node.SLASH_V);
803:       assertEquals(43, Node.IS_CONSTANT_NAME);
804:       assertEquals(46, Node.IS_NAMESPACE);
805:       assertEquals(51, Node.STATIC_SOURCE_FILE);
806:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
807:       assertEquals(55, Node.INFERRED_FUNCTION);
808:       assertEquals(4095, Node.COLUMN_MASK);
809:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
810:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
811:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
812:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
813:       assertEquals(29, Node.JSDOC_INFO_PROP);
814:       assertEquals(53, Node.INPUT_ID);
815:       assertEquals(39, Node.EMPTY_BLOCK);
816:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
817:       assertEquals(37, Node.OPT_ARG_NAME);
818:       assertEquals(48, Node.DIRECTIVES);
819:       assertEquals(52, Node.LENGTH);
820:       assertEquals(8, Node.FLAG_NO_THROWS);
821:       assertEquals(56, Node.CHANGE_TIME);
822:       assertEquals(36, Node.QUOTED_PROP);
823:       assertEquals(57, Node.REFLECTED_OBJECT);
824:       assertEquals(48, Node.DIRECTIVES);
825:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
826:       assertEquals(40, Node.ORIGINALNAME_PROP);
827:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
828:       assertEquals(4095, Node.COLUMN_MASK);
829:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
830:       assertEquals(54, Node.SLASH_V);
831:       assertEquals(43, Node.IS_CONSTANT_NAME);
832:       assertEquals(50, Node.FREE_CALL);
833:       assertEquals(1, Node.DECR_FLAG);
834:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
835:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
836:       assertEquals(32, Node.INCRDECR_PROP);
837:       assertEquals(46, Node.IS_NAMESPACE);
838:       assertEquals(37, Node.OPT_ARG_NAME);
839:       assertEquals(51, Node.STATIC_SOURCE_FILE);
840:       assertEquals(12, Node.COLUMN_BITS);
841:       assertEquals(56, Node.CHANGE_TIME);
842:       assertEquals(30, Node.VAR_ARGS_NAME);
843:       assertEquals(49, Node.DIRECT_EVAL);
844:       assertEquals(47, Node.IS_DISPATCHER);
845:       assertEquals(2, Node.POST_FLAG);
846:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
847:       assertEquals(52, Node.LENGTH);
848:       assertEquals(53, Node.INPUT_ID);
849:       assertEquals(57, Node.REFLECTED_OBJECT);
850:       assertEquals(57, Node.LAST_PROP);
851:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
852:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
853:       assertEquals(29, Node.JSDOC_INFO_PROP);
854:       assertEquals(15, Node.NO_SIDE_EFFECTS);
855:       assertEquals(36, Node.QUOTED_PROP);
856:       assertEquals(55, Node.INFERRED_FUNCTION);
857:       assertEquals(8, Node.FLAG_NO_THROWS);
858:       assertEquals(39, Node.EMPTY_BLOCK);
859:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
860:       
861:       boolean boolean2 = node1.isDelProp();
862:       assertFalse(node1.equals((Object)node0));
863:       assertTrue(boolean2 == boolean1);
864:       assertTrue(boolean2 == boolean0);
865:       assertFalse(node1.isCatch());
866:       assertEquals(0, node1.getChildCount());
867:       assertEquals(4, node1.getLineno());
868:       assertFalse(node1.isNull());
869:       assertEquals(16422, node1.getSourcePosition());
870:       assertFalse(node1.isTrue());
871:       assertFalse(node1.isDebugger());
872:       assertFalse(node1.isStringKey());
873:       assertFalse(node1.isName());
874:       assertFalse(node1.isVoid());
875:       assertFalse(node1.isParamList());
876:       assertFalse(node1.isCall());
877:       assertFalse(node1.isRegExp());
878:       assertFalse(node1.isBlock());
879:       assertFalse(node1.isFor());
880:       assertFalse(node1.isTry());
881:       assertFalse(node1.isWhile());
882:       assertFalse(node1.isString());
883:       assertFalse(node1.isContinue());
884:       assertFalse(node1.hasMoreThanOneChild());
885:       assertFalse(node1.isIn());
886:       assertFalse(node1.isNE());
887:       assertEquals(38, node1.getCharno());
888:       assertFalse(node1.isIf());
889:       assertFalse(node1.isCast());
890:       assertFalse(node1.isFalse());
891:       assertFalse(node1.isFunction());
892:       assertFalse(node1.isSetterDef());
893:       assertFalse(node1.isInc());
894:       assertFalse(node1.isThrow());
895:       assertFalse(node1.isInstanceOf());
896:       assertFalse(node1.isNot());
897:       assertFalse(node1.isObjectLit());
898:       assertFalse(node1.isWith());
899:       assertFalse(node1.isExprResult());
900:       assertFalse(node1.isBreak());
901:       assertFalse(node1.isAnd());
902:       assertFalse(node1.hasOneChild());
903:       assertFalse(node1.isHook());
904:       assertEquals(0, node1.getType());
905:       assertFalse(node1.isGetElem());
906:       assertFalse(node1.isAssign());
907:       assertFalse(node1.isDec());
908:       assertFalse(node1.isTypeOf());
909:       assertFalse(node1.isScript());
910:       assertFalse(node1.isThis());
911:       assertFalse(node1.isComma());
912:       assertFalse(node1.hasChildren());
913:       assertFalse(node1.isGetProp());
914:       assertFalse(node1.isCase());
915:       assertFalse(node1.isReturn());
916:       assertFalse(node1.isLabel());
917:       assertFalse(node1.isOr());
918:       assertFalse(node1.isNumber());
919:       assertFalse(node1.isGetterDef());
920:       assertFalse(node1.isDelProp());
921:       assertFalse(node1.isLabelName());
922:       assertFalse(node1.isSwitch());
923:       assertFalse(node1.isArrayLit());
924:       assertFalse(node1.isVar());
925:       assertFalse(node1.isAdd());
926:       assertFalse(node1.isEmpty());
927:       assertFalse(node1.isNew());
928:       assertFalse(node1.isDo());
929:       assertFalse(node1.isAssignAdd());
930:       assertFalse(node1.isDefaultCase());
931:       assertFalse(boolean2);
932:       assertEquals(48, Node.DIRECTIVES);
933:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
934:       assertEquals(40, Node.ORIGINALNAME_PROP);
935:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
936:       assertEquals(4095, Node.COLUMN_MASK);
937:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
938:       assertEquals(54, Node.SLASH_V);
939:       assertEquals(43, Node.IS_CONSTANT_NAME);
940:       assertEquals(50, Node.FREE_CALL);
941:       assertEquals(1, Node.DECR_FLAG);
942:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
943:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
944:       assertEquals(32, Node.INCRDECR_PROP);
945:       assertEquals(46, Node.IS_NAMESPACE);
946:       assertEquals(37, Node.OPT_ARG_NAME);
947:       assertEquals(51, Node.STATIC_SOURCE_FILE);
948:       assertEquals(12, Node.COLUMN_BITS);
949:       assertEquals(56, Node.CHANGE_TIME);
950:       assertEquals(30, Node.VAR_ARGS_NAME);
951:       assertEquals(49, Node.DIRECT_EVAL);
952:       assertEquals(47, Node.IS_DISPATCHER);
953:       assertEquals(2, Node.POST_FLAG);
954:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
955:       assertEquals(52, Node.LENGTH);
956:       assertEquals(53, Node.INPUT_ID);
957:       assertEquals(57, Node.REFLECTED_OBJECT);
958:       assertEquals(57, Node.LAST_PROP);
959:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
960:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
961:       assertEquals(29, Node.JSDOC_INFO_PROP);
962:       assertEquals(15, Node.NO_SIDE_EFFECTS);
963:       assertEquals(36, Node.QUOTED_PROP);
964:       assertEquals(55, Node.INFERRED_FUNCTION);
965:       assertEquals(8, Node.FLAG_NO_THROWS);
966:       assertEquals(39, Node.EMPTY_BLOCK);
967:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
968:       
969:       Iterable<Node> iterable0 = node0.children();
970:       assertFalse(node0.equals((Object)node1));
971:       assertEquals(39, node0.getType());
972:       assertFalse(node0.isDo());
973:       assertFalse(node0.isWhile());
974:       assertFalse(node0.isContinue());
975:       assertFalse(node0.isBlock());
976:       assertFalse(node0.isReturn());
977:       assertFalse(node0.isLabel());
978:       assertEquals((-1), node0.getLineno());
979:       assertFalse(node0.hasMoreThanOneChild());
980:       assertFalse(node0.isCall());
981:       assertFalse(node0.isLabelName());
982:       assertFalse(node0.isAssign());
983:       assertFalse(node0.isStringKey());
984:       assertFalse(node0.isTypeOf());
985:       assertFalse(node0.isParamList());
986:       assertEquals((-1), node0.getSourcePosition());
987:       assertFalse(node0.isDec());
988:       assertFalse(node0.hasChildren());
989:       assertFalse(node0.isScript());
990:       assertFalse(node0.hasOneChild());
991:       assertFalse(node0.isDefaultCase());
992:       assertFalse(node0.isTrue());
993:       assertFalse(node0.isVoid());
994:       assertEquals(0, node0.getChildCount());
995:       assertFalse(node0.isArrayLit());
996:       assertFalse(node0.isBreak());
997:       assertFalse(node0.isExprResult());
998:       assertFalse(node0.isGetElem());
999:       assertFalse(node0.isEmpty());
1000:       assertFalse(node0.isName());
1001:       assertFalse(node0.isDelProp());
1002:       assertFalse(node0.isVar());
1003:       assertFalse(node0.isNull());
1004:       assertFalse(node0.isOr());
1005:       assertFalse(node0.isAssignAdd());
1006:       assertFalse(node0.isNew());
1007:       assertFalse(node0.isAdd());
1008:       assertFalse(node0.isCase());
1009:       assertFalse(node0.isString());
1010:       assertFalse(node0.isSwitch());
1011:       assertEquals((-1), node0.getCharno());
1012:       assertFalse(node0.isFor());
1013:       assertFalse(node0.isGetterDef());
1014:       assertFalse(node0.isComma());
1015:       assertFalse(node0.isThis());
1016:       assertFalse(node0.isHook());
1017:       assertFalse(node0.isTry());
1018:       assertTrue(node0.isNumber());
1019:       assertFalse(node0.isGetProp());
1020:       assertFalse(node0.isWith());
1021:       assertFalse(node0.isNot());
1022:       assertFalse(node0.isRegExp());
1023:       assertFalse(node0.isObjectLit());
1024:       assertFalse(node0.isDebugger());
1025:       assertFalse(node0.isAnd());
1026:       assertFalse(node0.isFunction());
1027:       assertFalse(node0.isCatch());
1028:       assertFalse(node0.isCast());
1029:       assertFalse(node0.isInstanceOf());
1030:       assertFalse(node0.isIf());
1031:       assertFalse(node0.isFalse());
1032:       assertFalse(node0.isNE());
1033:       assertFalse(node0.isThrow());
1034:       assertFalse(node0.isIn());
1035:       assertFalse(node0.isSetterDef());
1036:       assertFalse(node0.isInc());
1037:       assertEquals(1, Node.DECR_FLAG);
1038:       assertEquals(32, Node.INCRDECR_PROP);
1039:       assertEquals(49, Node.DIRECT_EVAL);
1040:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1041:       assertEquals(2, Node.POST_FLAG);
1042:       assertEquals(57, Node.LAST_PROP);
1043:       assertEquals(30, Node.VAR_ARGS_NAME);
1044:       assertEquals(12, Node.COLUMN_BITS);
1045:       assertEquals(47, Node.IS_DISPATCHER);
1046:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1047:       assertEquals(40, Node.ORIGINALNAME_PROP);
1048:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1049:       assertEquals(50, Node.FREE_CALL);
1050:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1051:       assertEquals(54, Node.SLASH_V);
1052:       assertEquals(43, Node.IS_CONSTANT_NAME);
1053:       assertEquals(46, Node.IS_NAMESPACE);
1054:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1055:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1056:       assertEquals(55, Node.INFERRED_FUNCTION);
1057:       assertEquals(4095, Node.COLUMN_MASK);
1058:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1059:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1060:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1061:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1062:       assertEquals(29, Node.JSDOC_INFO_PROP);
1063:       assertEquals(53, Node.INPUT_ID);
1064:       assertEquals(39, Node.EMPTY_BLOCK);
1065:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1066:       assertEquals(37, Node.OPT_ARG_NAME);
1067:       assertEquals(48, Node.DIRECTIVES);
1068:       assertEquals(52, Node.LENGTH);
1069:       assertEquals(8, Node.FLAG_NO_THROWS);
1070:       assertEquals(56, Node.CHANGE_TIME);
1071:       assertEquals(36, Node.QUOTED_PROP);
1072:       assertEquals(57, Node.REFLECTED_OBJECT);
1073:       assertFalse(iterable0.contains(node1));
1074:       assertNotNull(iterable0);
1075:       
1076:       boolean boolean3 = node0.isIf();
1077:       assertFalse(node0.equals((Object)node1));
1078:       assertTrue(boolean3 == boolean0);
1079:       assertTrue(boolean3 == boolean1);
1080:       assertTrue(boolean3 == boolean2);
1081:       assertEquals(39, node0.getType());
1082:       assertFalse(node0.isDo());
1083:       assertFalse(node0.isWhile());
1084:       assertFalse(node0.isContinue());
1085:       assertFalse(node0.isBlock());
1086:       assertFalse(node0.isReturn());
1087:       assertFalse(node0.isLabel());
1088:       assertEquals((-1), node0.getLineno());
1089:       assertFalse(node0.hasMoreThanOneChild());
1090:       assertFalse(node0.isCall());
1091:       assertFalse(node0.isLabelName());
1092:       assertFalse(node0.isAssign());
1093:       assertFalse(node0.isStringKey());
1094:       assertFalse(node0.isTypeOf());
1095:       assertFalse(node0.isParamList());
1096:       assertEquals((-1), node0.getSourcePosition());
1097:       assertFalse(node0.isDec());
1098:       assertFalse(node0.hasChildren());
1099:       assertFalse(node0.isScript());
1100:       assertFalse(node0.hasOneChild());
1101:       assertFalse(node0.isDefaultCase());
1102:       assertFalse(node0.isTrue());
1103:       assertFalse(node0.isVoid());
1104:       assertEquals(0, node0.getChildCount());
1105:       assertFalse(node0.isArrayLit());
1106:       assertFalse(node0.isBreak());
1107:       assertFalse(node0.isExprResult());
1108:       assertFalse(node0.isGetElem());
1109:       assertFalse(node0.isEmpty());
1110:       assertFalse(node0.isName());
1111:       assertFalse(node0.isDelProp());
1112:       assertFalse(node0.isVar());
1113:       assertFalse(node0.isNull());
1114:       assertFalse(node0.isOr());
1115:       assertFalse(node0.isAssignAdd());
1116:       assertFalse(node0.isNew());
1117:       assertFalse(node0.isAdd());
1118:       assertFalse(node0.isCase());
1119:       assertFalse(node0.isString());
1120:       assertFalse(node0.isSwitch());
1121:       assertEquals((-1), node0.getCharno());
1122:       assertFalse(node0.isFor());
1123:       assertFalse(node0.isGetterDef());
1124:       assertFalse(node0.isComma());
1125:       assertFalse(node0.isThis());
1126:       assertFalse(node0.isHook());
1127:       assertFalse(node0.isTry());
1128:       assertTrue(node0.isNumber());
1129:       assertFalse(node0.isGetProp());
1130:       assertFalse(node0.isWith());
1131:       assertFalse(node0.isNot());
1132:       assertFalse(node0.isRegExp());
1133:       assertFalse(node0.isObjectLit());
1134:       assertFalse(node0.isDebugger());
1135:       assertFalse(node0.isAnd());
1136:       assertFalse(node0.isFunction());
1137:       assertFalse(node0.isCatch());
1138:       assertFalse(node0.isCast());
1139:       assertFalse(node0.isInstanceOf());
1140:       assertFalse(node0.isIf());
1141:       assertFalse(node0.isFalse());
1142:       assertFalse(node0.isNE());
1143:       assertFalse(node0.isThrow());
1144:       assertFalse(node0.isIn());
1145:       assertFalse(node0.isSetterDef());
1146:       assertFalse(node0.isInc());
1147:       assertFalse(boolean3);
1148:       assertEquals(1, Node.DECR_FLAG);
1149:       assertEquals(32, Node.INCRDECR_PROP);
1150:       assertEquals(49, Node.DIRECT_EVAL);
1151:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1152:       assertEquals(2, Node.POST_FLAG);
1153:       assertEquals(57, Node.LAST_PROP);
1154:       assertEquals(30, Node.VAR_ARGS_NAME);
1155:       assertEquals(12, Node.COLUMN_BITS);
1156:       assertEquals(47, Node.IS_DISPATCHER);
1157:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1158:       assertEquals(40, Node.ORIGINALNAME_PROP);
1159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1160:       assertEquals(50, Node.FREE_CALL);
1161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1162:       assertEquals(54, Node.SLASH_V);
1163:       assertEquals(43, Node.IS_CONSTANT_NAME);
1164:       assertEquals(46, Node.IS_NAMESPACE);
1165:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1166:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1167:       assertEquals(55, Node.INFERRED_FUNCTION);
1168:       assertEquals(4095, Node.COLUMN_MASK);
1169:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1170:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1171:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1172:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1173:       assertEquals(29, Node.JSDOC_INFO_PROP);
1174:       assertEquals(53, Node.INPUT_ID);
1175:       assertEquals(39, Node.EMPTY_BLOCK);
1176:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1177:       assertEquals(37, Node.OPT_ARG_NAME);
1178:       assertEquals(48, Node.DIRECTIVES);
1179:       assertEquals(52, Node.LENGTH);
1180:       assertEquals(8, Node.FLAG_NO_THROWS);
1181:       assertEquals(56, Node.CHANGE_TIME);
1182:       assertEquals(36, Node.QUOTED_PROP);
1183:       assertEquals(57, Node.REFLECTED_OBJECT);
1184:       
1185:       boolean boolean4 = node1.isVoid();
1186:       assertFalse(node1.equals((Object)node0));
1187:       assertTrue(boolean4 == boolean1);
1188:       assertTrue(boolean4 == boolean0);
1189:       assertTrue(boolean4 == boolean3);
1190:       assertTrue(boolean4 == boolean2);
1191:       assertFalse(node1.isCatch());
1192:       assertEquals(0, node1.getChildCount());
1193:       assertEquals(4, node1.getLineno());
1194:       assertFalse(node1.isNull());
1195:       assertEquals(16422, node1.getSourcePosition());
1196:       assertFalse(node1.isTrue());
1197:       assertFalse(node1.isDebugger());
1198:       assertFalse(node1.isStringKey());
1199:       assertFalse(node1.isName());
1200:       assertFalse(node1.isVoid());
1201:       assertFalse(node1.isParamList());
1202:       assertFalse(node1.isCall());
1203:       assertFalse(node1.isRegExp());
1204:       assertFalse(node1.isBlock());
1205:       assertFalse(node1.isFor());
1206:       assertFalse(node1.isTry());
1207:       assertFalse(node1.isWhile());
1208:       assertFalse(node1.isString());
1209:       assertFalse(node1.isContinue());
1210:       assertFalse(node1.hasMoreThanOneChild());
1211:       assertFalse(node1.isIn());
1212:       assertFalse(node1.isNE());
1213:       assertEquals(38, node1.getCharno());
1214:       assertFalse(node1.isIf());
1215:       assertFalse(node1.isCast());
1216:       assertFalse(node1.isFalse());
1217:       assertFalse(node1.isFunction());
1218:       assertFalse(node1.isSetterDef());
1219:       assertFalse(node1.isInc());
1220:       assertFalse(node1.isThrow());
1221:       assertFalse(node1.isInstanceOf());
1222:       assertFalse(node1.isNot());
1223:       assertFalse(node1.isObjectLit());
1224:       assertFalse(node1.isWith());
1225:       assertFalse(node1.isExprResult());
1226:       assertFalse(node1.isBreak());
1227:       assertFalse(node1.isAnd());
1228:       assertFalse(node1.hasOneChild());
1229:       assertFalse(node1.isHook());
1230:       assertEquals(0, node1.getType());
1231:       assertFalse(node1.isGetElem());
1232:       assertFalse(node1.isAssign());
1233:       assertFalse(node1.isDec());
1234:       assertFalse(node1.isTypeOf());
1235:       assertFalse(node1.isScript());
1236:       assertFalse(node1.isThis());
1237:       assertFalse(node1.isComma());
1238:       assertFalse(node1.hasChildren());
1239:       assertFalse(node1.isGetProp());
1240:       assertFalse(node1.isCase());
1241:       assertFalse(node1.isReturn());
1242:       assertFalse(node1.isLabel());
1243:       assertFalse(node1.isOr());
1244:       assertFalse(node1.isNumber());
1245:       assertFalse(node1.isGetterDef());
1246:       assertFalse(node1.isDelProp());
1247:       assertFalse(node1.isLabelName());
1248:       assertFalse(node1.isSwitch());
1249:       assertFalse(node1.isArrayLit());
1250:       assertFalse(node1.isVar());
1251:       assertFalse(node1.isAdd());
1252:       assertFalse(node1.isEmpty());
1253:       assertFalse(node1.isNew());
1254:       assertFalse(node1.isDo());
1255:       assertFalse(node1.isAssignAdd());
1256:       assertFalse(node1.isDefaultCase());
1257:       assertFalse(boolean4);
1258:       assertEquals(48, Node.DIRECTIVES);
1259:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1260:       assertEquals(40, Node.ORIGINALNAME_PROP);
1261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1262:       assertEquals(4095, Node.COLUMN_MASK);
1263:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1264:       assertEquals(54, Node.SLASH_V);
1265:       assertEquals(43, Node.IS_CONSTANT_NAME);
1266:       assertEquals(50, Node.FREE_CALL);
1267:       assertEquals(1, Node.DECR_FLAG);
1268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1269:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1270:       assertEquals(32, Node.INCRDECR_PROP);
1271:       assertEquals(46, Node.IS_NAMESPACE);
1272:       assertEquals(37, Node.OPT_ARG_NAME);
1273:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1274:       assertEquals(12, Node.COLUMN_BITS);
1275:       assertEquals(56, Node.CHANGE_TIME);
1276:       assertEquals(30, Node.VAR_ARGS_NAME);
1277:       assertEquals(49, Node.DIRECT_EVAL);
1278:       assertEquals(47, Node.IS_DISPATCHER);
1279:       assertEquals(2, Node.POST_FLAG);
1280:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1281:       assertEquals(52, Node.LENGTH);
1282:       assertEquals(53, Node.INPUT_ID);
1283:       assertEquals(57, Node.REFLECTED_OBJECT);
1284:       assertEquals(57, Node.LAST_PROP);
1285:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1286:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1287:       assertEquals(29, Node.JSDOC_INFO_PROP);
1288:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1289:       assertEquals(36, Node.QUOTED_PROP);
1290:       assertEquals(55, Node.INFERRED_FUNCTION);
1291:       assertEquals(8, Node.FLAG_NO_THROWS);
1292:       assertEquals(39, Node.EMPTY_BLOCK);
1293:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1294:       
1295:       node0.setInputId((InputId) null);
1296:       assertFalse(node0.equals((Object)node1));
1297:       assertEquals(39, node0.getType());
1298:       assertFalse(node0.isDo());
1299:       assertFalse(node0.isWhile());
1300:       assertFalse(node0.isContinue());
1301:       assertFalse(node0.isBlock());
1302:       assertFalse(node0.isReturn());
1303:       assertFalse(node0.isLabel());
1304:       assertEquals((-1), node0.getLineno());
1305:       assertFalse(node0.hasMoreThanOneChild());
1306:       assertFalse(node0.isCall());
1307:       assertFalse(node0.isLabelName());
1308:       assertFalse(node0.isAssign());
1309:       assertFalse(node0.isStringKey());
1310:       assertFalse(node0.isTypeOf());
1311:       assertFalse(node0.isParamList());
1312:       assertEquals((-1), node0.getSourcePosition());
1313:       assertFalse(node0.isDec());
1314:       assertFalse(node0.hasChildren());
1315:       assertFalse(node0.isScript());
1316:       assertFalse(node0.hasOneChild());
1317:       assertFalse(node0.isDefaultCase());
1318:       assertFalse(node0.isTrue());
1319:       assertFalse(node0.isVoid());
1320:       assertEquals(0, node0.getChildCount());
1321:       assertFalse(node0.isArrayLit());
1322:       assertFalse(node0.isBreak());
1323:       assertFalse(node0.isExprResult());
1324:       assertFalse(node0.isGetElem());
1325:       assertFalse(node0.isEmpty());
1326:       assertFalse(node0.isName());
1327:       assertFalse(node0.isDelProp());
1328:       assertFalse(node0.isVar());
1329:       assertFalse(node0.isNull());
1330:       assertFalse(node0.isOr());
1331:       assertFalse(node0.isAssignAdd());
1332:       assertFalse(node0.isNew());
1333:       assertFalse(node0.isAdd());
1334:       assertFalse(node0.isCase());
1335:       assertFalse(node0.isString());
1336:       assertFalse(node0.isSwitch());
1337:       assertEquals((-1), node0.getCharno());
1338:       assertFalse(node0.isFor());
1339:       assertFalse(node0.isGetterDef());
1340:       assertFalse(node0.isComma());
1341:       assertFalse(node0.isThis());
1342:       assertFalse(node0.isHook());
1343:       assertFalse(node0.isTry());
1344:       assertTrue(node0.isNumber());
1345:       assertFalse(node0.isGetProp());
1346:       assertFalse(node0.isWith());
1347:       assertFalse(node0.isNot());
1348:       assertFalse(node0.isRegExp());
1349:       assertFalse(node0.isObjectLit());
1350:       assertFalse(node0.isDebugger());
1351:       assertFalse(node0.isAnd());
1352:       assertFalse(node0.isFunction());
1353:       assertFalse(node0.isCatch());
1354:       assertFalse(node0.isCast());
1355:       assertFalse(node0.isInstanceOf());
1356:       assertFalse(node0.isIf());
1357:       assertFalse(node0.isFalse());
1358:       assertFalse(node0.isNE());
1359:       assertFalse(node0.isThrow());
1360:       assertFalse(node0.isIn());
1361:       assertFalse(node0.isSetterDef());
1362:       assertFalse(node0.isInc());
1363:       assertEquals(1, Node.DECR_FLAG);
1364:       assertEquals(32, Node.INCRDECR_PROP);
1365:       assertEquals(49, Node.DIRECT_EVAL);
1366:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1367:       assertEquals(2, Node.POST_FLAG);
1368:       assertEquals(57, Node.LAST_PROP);
1369:       assertEquals(30, Node.VAR_ARGS_NAME);
1370:       assertEquals(12, Node.COLUMN_BITS);
1371:       assertEquals(47, Node.IS_DISPATCHER);
1372:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1373:       assertEquals(40, Node.ORIGINALNAME_PROP);
1374:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1375:       assertEquals(50, Node.FREE_CALL);
1376:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1377:       assertEquals(54, Node.SLASH_V);
1378:       assertEquals(43, Node.IS_CONSTANT_NAME);
1379:       assertEquals(46, Node.IS_NAMESPACE);
1380:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1381:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1382:       assertEquals(55, Node.INFERRED_FUNCTION);
1383:       assertEquals(4095, Node.COLUMN_MASK);
1384:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1385:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1386:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1387:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1388:       assertEquals(29, Node.JSDOC_INFO_PROP);
1389:       assertEquals(53, Node.INPUT_ID);
1390:       assertEquals(39, Node.EMPTY_BLOCK);
1391:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1392:       assertEquals(37, Node.OPT_ARG_NAME);
1393:       assertEquals(48, Node.DIRECTIVES);
1394:       assertEquals(52, Node.LENGTH);
1395:       assertEquals(8, Node.FLAG_NO_THROWS);
1396:       assertEquals(56, Node.CHANGE_TIME);
1397:       assertEquals(36, Node.QUOTED_PROP);
1398:       assertEquals(57, Node.REFLECTED_OBJECT);
1399:       
1400:       node0.setType(46);
1401:       assertFalse(node0.equals((Object)node1));
1402:       assertFalse(node0.isDo());
1403:       assertFalse(node0.isWhile());
1404:       assertFalse(node0.isContinue());
1405:       assertFalse(node0.isBlock());
1406:       assertFalse(node0.isReturn());
1407:       assertFalse(node0.isLabel());
1408:       assertEquals((-1), node0.getLineno());
1409:       assertFalse(node0.hasMoreThanOneChild());
1410:       assertFalse(node0.isCall());
1411:       assertFalse(node0.isLabelName());
1412:       assertFalse(node0.isAssign());
1413:       assertFalse(node0.isStringKey());
1414:       assertFalse(node0.isNumber());
1415:       assertFalse(node0.isTypeOf());
1416:       assertFalse(node0.isParamList());
1417:       assertEquals((-1), node0.getSourcePosition());
1418:       assertFalse(node0.isDec());
1419:       assertFalse(node0.hasChildren());
1420:       assertFalse(node0.isScript());
1421:       assertFalse(node0.hasOneChild());
1422:       assertFalse(node0.isDefaultCase());
1423:       assertFalse(node0.isTrue());
1424:       assertFalse(node0.isVoid());
1425:       assertEquals(0, node0.getChildCount());
1426:       assertFalse(node0.isArrayLit());
1427:       assertFalse(node0.isBreak());
1428:       assertFalse(node0.isExprResult());
1429:       assertFalse(node0.isGetElem());
1430:       assertFalse(node0.isEmpty());
1431:       assertFalse(node0.isName());
1432:       assertFalse(node0.isDelProp());
1433:       assertFalse(node0.isVar());
1434:       assertFalse(node0.isNull());
1435:       assertFalse(node0.isOr());
1436:       assertFalse(node0.isAssignAdd());
1437:       assertEquals(46, node0.getType());
1438:       assertFalse(node0.isNew());
1439:       assertFalse(node0.isAdd());
1440:       assertFalse(node0.isCase());
1441:       assertFalse(node0.isString());
1442:       assertFalse(node0.isSwitch());
1443:       assertEquals((-1), node0.getCharno());
1444:       assertFalse(node0.isFor());
1445:       assertFalse(node0.isGetterDef());
1446:       assertFalse(node0.isComma());
1447:       assertFalse(node0.isThis());
1448:       assertFalse(node0.isHook());
1449:       assertFalse(node0.isTry());
1450:       assertFalse(node0.isGetProp());
1451:       assertFalse(node0.isWith());
1452:       assertFalse(node0.isNot());
1453:       assertFalse(node0.isRegExp());
1454:       assertFalse(node0.isObjectLit());
1455:       assertFalse(node0.isDebugger());
1456:       assertFalse(node0.isAnd());
1457:       assertFalse(node0.isFunction());
1458:       assertFalse(node0.isCatch());
1459:       assertFalse(node0.isCast());
1460:       assertFalse(node0.isInstanceOf());
1461:       assertFalse(node0.isIf());
1462:       assertFalse(node0.isFalse());
1463:       assertFalse(node0.isNE());
1464:       assertFalse(node0.isThrow());
1465:       assertFalse(node0.isIn());
1466:       assertFalse(node0.isSetterDef());
1467:       assertFalse(node0.isInc());
1468:       assertEquals(1, Node.DECR_FLAG);
1469:       assertEquals(32, Node.INCRDECR_PROP);
1470:       assertEquals(49, Node.DIRECT_EVAL);
1471:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1472:       assertEquals(2, Node.POST_FLAG);
1473:       assertEquals(57, Node.LAST_PROP);
1474:       assertEquals(30, Node.VAR_ARGS_NAME);
1475:       assertEquals(12, Node.COLUMN_BITS);
1476:       assertEquals(47, Node.IS_DISPATCHER);
1477:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1478:       assertEquals(40, Node.ORIGINALNAME_PROP);
1479:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1480:       assertEquals(50, Node.FREE_CALL);
1481:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1482:       assertEquals(54, Node.SLASH_V);
1483:       assertEquals(43, Node.IS_CONSTANT_NAME);
1484:       assertEquals(46, Node.IS_NAMESPACE);
1485:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1486:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1487:       assertEquals(55, Node.INFERRED_FUNCTION);
1488:       assertEquals(4095, Node.COLUMN_MASK);
1489:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1491:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1492:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1493:       assertEquals(29, Node.JSDOC_INFO_PROP);
1494:       assertEquals(53, Node.INPUT_ID);
1495:       assertEquals(39, Node.EMPTY_BLOCK);
1496:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1497:       assertEquals(37, Node.OPT_ARG_NAME);
1498:       assertEquals(48, Node.DIRECTIVES);
1499:       assertEquals(52, Node.LENGTH);
1500:       assertEquals(8, Node.FLAG_NO_THROWS);
1501:       assertEquals(56, Node.CHANGE_TIME);
1502:       assertEquals(36, Node.QUOTED_PROP);
1503:       assertEquals(57, Node.REFLECTED_OBJECT);
1504:       
1505:       boolean boolean5 = node1.hasChildren();
1506:       assertFalse(node1.equals((Object)node0));
1507:       assertTrue(boolean5 == boolean0);
1508:       assertTrue(boolean5 == boolean3);
1509:       assertTrue(boolean5 == boolean4);
1510:       assertTrue(boolean5 == boolean1);
1511:       assertTrue(boolean5 == boolean2);
1512:       assertFalse(node1.isCatch());
1513:       assertEquals(0, node1.getChildCount());
1514:       assertEquals(4, node1.getLineno());
1515:       assertFalse(node1.isNull());
1516:       assertEquals(16422, node1.getSourcePosition());
1517:       assertFalse(node1.isTrue());
1518:       assertFalse(node1.isDebugger());
1519:       assertFalse(node1.isStringKey());
1520:       assertFalse(node1.isName());
1521:       assertFalse(node1.isVoid());
1522:       assertFalse(node1.isParamList());
1523:       assertFalse(node1.isCall());
1524:       assertFalse(node1.isRegExp());
1525:       assertFalse(node1.isBlock());
1526:       assertFalse(node1.isFor());
1527:       assertFalse(node1.isTry());
1528:       assertFalse(node1.isWhile());
1529:       assertFalse(node1.isString());
1530:       assertFalse(node1.isContinue());
1531:       assertFalse(node1.hasMoreThanOneChild());
1532:       assertFalse(node1.isIn());
1533:       assertFalse(node1.isNE());
1534:       assertEquals(38, node1.getCharno());
1535:       assertFalse(node1.isIf());
1536:       assertFalse(node1.isCast());
1537:       assertFalse(node1.isFalse());
1538:       assertFalse(node1.isFunction());
1539:       assertFalse(node1.isSetterDef());
1540:       assertFalse(node1.isInc());
1541:       assertFalse(node1.isThrow());
1542:       assertFalse(node1.isInstanceOf());
1543:       assertFalse(node1.isNot());
1544:       assertFalse(node1.isObjectLit());
1545:       assertFalse(node1.isWith());
1546:       assertFalse(node1.isExprResult());
1547:       assertFalse(node1.isBreak());
1548:       assertFalse(node1.isAnd());
1549:       assertFalse(node1.hasOneChild());
1550:       assertFalse(node1.isHook());
1551:       assertEquals(0, node1.getType());
1552:       assertFalse(node1.isGetElem());
1553:       assertFalse(node1.isAssign());
1554:       assertFalse(node1.isDec());
1555:       assertFalse(node1.isTypeOf());
1556:       assertFalse(node1.isScript());
1557:       assertFalse(node1.isThis());
1558:       assertFalse(node1.isComma());
1559:       assertFalse(node1.hasChildren());
1560:       assertFalse(node1.isGetProp());
1561:       assertFalse(node1.isCase());
1562:       assertFalse(node1.isReturn());
1563:       assertFalse(node1.isLabel());
1564:       assertFalse(node1.isOr());
1565:       assertFalse(node1.isNumber());
1566:       assertFalse(node1.isGetterDef());
1567:       assertFalse(node1.isDelProp());
1568:       assertFalse(node1.isLabelName());
1569:       assertFalse(node1.isSwitch());
1570:       assertFalse(node1.isArrayLit());
1571:       assertFalse(node1.isVar());
1572:       assertFalse(node1.isAdd());
1573:       assertFalse(node1.isEmpty());
1574:       assertFalse(node1.isNew());
1575:       assertFalse(node1.isDo());
1576:       assertFalse(node1.isAssignAdd());
1577:       assertFalse(node1.isDefaultCase());
1578:       assertFalse(boolean5);
1579:       assertEquals(48, Node.DIRECTIVES);
1580:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1581:       assertEquals(40, Node.ORIGINALNAME_PROP);
1582:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1583:       assertEquals(4095, Node.COLUMN_MASK);
1584:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1585:       assertEquals(54, Node.SLASH_V);
1586:       assertEquals(43, Node.IS_CONSTANT_NAME);
1587:       assertEquals(50, Node.FREE_CALL);
1588:       assertEquals(1, Node.DECR_FLAG);
1589:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1590:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1591:       assertEquals(32, Node.INCRDECR_PROP);
1592:       assertEquals(46, Node.IS_NAMESPACE);
1593:       assertEquals(37, Node.OPT_ARG_NAME);
1594:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1595:       assertEquals(12, Node.COLUMN_BITS);
1596:       assertEquals(56, Node.CHANGE_TIME);
1597:       assertEquals(30, Node.VAR_ARGS_NAME);
1598:       assertEquals(49, Node.DIRECT_EVAL);
1599:       assertEquals(47, Node.IS_DISPATCHER);
1600:       assertEquals(2, Node.POST_FLAG);
1601:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1602:       assertEquals(52, Node.LENGTH);
1603:       assertEquals(53, Node.INPUT_ID);
1604:       assertEquals(57, Node.REFLECTED_OBJECT);
1605:       assertEquals(57, Node.LAST_PROP);
1606:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1607:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1608:       assertEquals(29, Node.JSDOC_INFO_PROP);
1609:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1610:       assertEquals(36, Node.QUOTED_PROP);
1611:       assertEquals(55, Node.INFERRED_FUNCTION);
1612:       assertEquals(8, Node.FLAG_NO_THROWS);
1613:       assertEquals(39, Node.EMPTY_BLOCK);
1614:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1615:       
1616:       Node node2 = new Node((-1872), node1, (-264), 0);
1617:       assertFalse(node1.equals((Object)node0));
1618:       assertFalse(node2.equals((Object)node0));
1619:       assertFalse(node2.equals((Object)node1));
1620:       assertFalse(node1.isCatch());
1621:       assertEquals(0, node1.getChildCount());
1622:       assertEquals(4, node1.getLineno());
1623:       assertFalse(node1.isNull());
1624:       assertEquals(16422, node1.getSourcePosition());
1625:       assertFalse(node1.isTrue());
1626:       assertFalse(node1.isDebugger());
1627:       assertFalse(node1.isStringKey());
1628:       assertFalse(node1.isName());
1629:       assertFalse(node1.isVoid());
1630:       assertFalse(node1.isParamList());
1631:       assertFalse(node1.isCall());
1632:       assertFalse(node1.isRegExp());
1633:       assertFalse(node1.isBlock());
1634:       assertFalse(node1.isFor());
1635:       assertFalse(node1.isTry());
1636:       assertFalse(node1.isWhile());
1637:       assertFalse(node1.isString());
1638:       assertFalse(node1.isContinue());
1639:       assertFalse(node1.hasMoreThanOneChild());
1640:       assertFalse(node1.isIn());
1641:       assertFalse(node1.isNE());
1642:       assertEquals(38, node1.getCharno());
1643:       assertFalse(node1.isIf());
1644:       assertFalse(node1.isCast());
1645:       assertFalse(node1.isFalse());
1646:       assertFalse(node1.isFunction());
1647:       assertFalse(node1.isSetterDef());
1648:       assertFalse(node1.isInc());
1649:       assertFalse(node1.isThrow());
1650:       assertFalse(node1.isInstanceOf());
1651:       assertFalse(node1.isNot());
1652:       assertFalse(node1.isObjectLit());
1653:       assertFalse(node1.isWith());
1654:       assertFalse(node1.isExprResult());
1655:       assertFalse(node1.isBreak());
1656:       assertFalse(node1.isAnd());
1657:       assertFalse(node1.hasOneChild());
1658:       assertFalse(node1.isHook());
1659:       assertEquals(0, node1.getType());
1660:       assertFalse(node1.isGetElem());
1661:       assertFalse(node1.isAssign());
1662:       assertFalse(node1.isDec());
1663:       assertFalse(node1.isTypeOf());
1664:       assertFalse(node1.isScript());
1665:       assertFalse(node1.isThis());
1666:       assertFalse(node1.isComma());
1667:       assertFalse(node1.hasChildren());
1668:       assertFalse(node1.isGetProp());
1669:       assertFalse(node1.isCase());
1670:       assertFalse(node1.isReturn());
1671:       assertFalse(node1.isLabel());
1672:       assertFalse(node1.isOr());
1673:       assertFalse(node1.isNumber());
1674:       assertFalse(node1.isGetterDef());
1675:       assertFalse(node1.isDelProp());
1676:       assertFalse(node1.isLabelName());
1677:       assertFalse(node1.isSwitch());
1678:       assertFalse(node1.isArrayLit());
1679:       assertFalse(node1.isVar());
1680:       assertFalse(node1.isAdd());
1681:       assertFalse(node1.isEmpty());
1682:       assertFalse(node1.isNew());
1683:       assertFalse(node1.isDo());
1684:       assertFalse(node1.isAssignAdd());
1685:       assertFalse(node1.isDefaultCase());
1686:       assertEquals((-1872), node2.getType());
1687:       assertFalse(node2.isSetterDef());
1688:       assertFalse(node2.isCatch());
1689:       assertFalse(node2.isDefaultCase());
1690:       assertFalse(node2.isRegExp());
1691:       assertFalse(node2.isFunction());
1692:       assertFalse(node2.isVar());
1693:       assertFalse(node2.isArrayLit());
1694:       assertFalse(node2.isTry());
1695:       assertFalse(node2.isGetterDef());
1696:       assertFalse(node2.isStringKey());
1697:       assertFalse(node2.isParamList());
1698:       assertFalse(node2.isDebugger());
1699:       assertFalse(node2.isIn());
1700:       assertEquals((-1), node2.getLineno());
1701:       assertEquals(1, node2.getChildCount());
1702:       assertFalse(node2.hasMoreThanOneChild());
1703:       assertFalse(node2.isContinue());
1704:       assertFalse(node2.isCase());
1705:       assertTrue(node2.hasChildren());
1706:       assertFalse(node2.isFor());
1707:       assertFalse(node2.isBlock());
1708:       assertFalse(node2.isHook());
1709:       assertFalse(node2.isInc());
1710:       assertFalse(node2.isIf());
1711:       assertFalse(node2.isNE());
1712:       assertFalse(node2.isInstanceOf());
1713:       assertFalse(node2.isObjectLit());
1714:       assertFalse(node2.isGetProp());
1715:       assertFalse(node2.isWith());
1716:       assertFalse(node2.isComma());
1717:       assertFalse(node2.isThrow());
1718:       assertFalse(node2.isThis());
1719:       assertFalse(node2.isFalse());
1720:       assertFalse(node2.isCast());
1721:       assertFalse(node2.isScript());
1722:       assertFalse(node2.isNumber());
1723:       assertFalse(node2.isString());
1724:       assertEquals((-1), node2.getSourcePosition());
1725:       assertFalse(node2.isLabelName());
1726:       assertFalse(node2.isSwitch());
1727:       assertFalse(node2.isNot());
1728:       assertEquals((-1), node2.getCharno());
1729:       assertFalse(node2.isAnd());
1730:       assertFalse(node2.isOr());
1731:       assertFalse(node2.isAssignAdd());
1732:       assertFalse(node2.isDec());
1733:       assertFalse(node2.isWhile());
1734:       assertFalse(node2.isDo());
1735:       assertFalse(node2.isAssign());
1736:       assertFalse(node2.isTypeOf());
1737:       assertFalse(node2.isLabel());
1738:       assertTrue(node2.hasOneChild());
1739:       assertFalse(node2.isReturn());
1740:       assertFalse(node2.isVoid());
1741:       assertFalse(node2.isNew());
1742:       assertFalse(node2.isEmpty());
1743:       assertFalse(node2.isCall());
1744:       assertFalse(node2.isAdd());
1745:       assertFalse(node2.isExprResult());
1746:       assertFalse(node2.isGetElem());
1747:       assertFalse(node2.isBreak());
1748:       assertFalse(node2.isName());
1749:       assertFalse(node2.isDelProp());
1750:       assertFalse(node2.isNull());
1751:       assertFalse(node2.isTrue());
1752:       assertEquals(48, Node.DIRECTIVES);
1753:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1754:       assertEquals(40, Node.ORIGINALNAME_PROP);
1755:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1756:       assertEquals(4095, Node.COLUMN_MASK);
1757:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1758:       assertEquals(54, Node.SLASH_V);
1759:       assertEquals(43, Node.IS_CONSTANT_NAME);
1760:       assertEquals(50, Node.FREE_CALL);
1761:       assertEquals(1, Node.DECR_FLAG);
1762:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1763:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1764:       assertEquals(32, Node.INCRDECR_PROP);
1765:       assertEquals(46, Node.IS_NAMESPACE);
1766:       assertEquals(37, Node.OPT_ARG_NAME);
1767:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1768:       assertEquals(12, Node.COLUMN_BITS);
1769:       assertEquals(56, Node.CHANGE_TIME);
1770:       assertEquals(30, Node.VAR_ARGS_NAME);
1771:       assertEquals(49, Node.DIRECT_EVAL);
1772:       assertEquals(47, Node.IS_DISPATCHER);
1773:       assertEquals(2, Node.POST_FLAG);
1774:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1775:       assertEquals(52, Node.LENGTH);
1776:       assertEquals(53, Node.INPUT_ID);
1777:       assertEquals(57, Node.REFLECTED_OBJECT);
1778:       assertEquals(57, Node.LAST_PROP);
1779:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1780:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1781:       assertEquals(29, Node.JSDOC_INFO_PROP);
1782:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1783:       assertEquals(36, Node.QUOTED_PROP);
1784:       assertEquals(55, Node.INFERRED_FUNCTION);
1785:       assertEquals(8, Node.FLAG_NO_THROWS);
1786:       assertEquals(39, Node.EMPTY_BLOCK);
1787:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1788:       assertEquals(48, Node.DIRECTIVES);
1789:       assertEquals(8, Node.FLAG_NO_THROWS);
1790:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1791:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1792:       assertEquals(50, Node.FREE_CALL);
1793:       assertEquals(55, Node.INFERRED_FUNCTION);
1794:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1795:       assertEquals(39, Node.EMPTY_BLOCK);
1796:       assertEquals(43, Node.IS_CONSTANT_NAME);
1797:       assertEquals(54, Node.SLASH_V);
1798:       assertEquals(30, Node.VAR_ARGS_NAME);
1799:       assertEquals(40, Node.ORIGINALNAME_PROP);
1800:       assertEquals(32, Node.INCRDECR_PROP);
1801:       assertEquals(2, Node.POST_FLAG);
1802:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1803:       assertEquals(12, Node.COLUMN_BITS);
1804:       assertEquals(56, Node.CHANGE_TIME);
1805:       assertEquals(46, Node.IS_NAMESPACE);
1806:       assertEquals(47, Node.IS_DISPATCHER);
1807:       assertEquals(29, Node.JSDOC_INFO_PROP);
1808:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1809:       assertEquals(1, Node.DECR_FLAG);
1810:       assertEquals(57, Node.LAST_PROP);
1811:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1812:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1813:       assertEquals(53, Node.INPUT_ID);
1814:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1815:       assertEquals(52, Node.LENGTH);
1816:       assertEquals(36, Node.QUOTED_PROP);
1817:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1818:       assertEquals(57, Node.REFLECTED_OBJECT);
1819:       assertEquals(49, Node.DIRECT_EVAL);
1820:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1821:       assertEquals(4095, Node.COLUMN_MASK);
1822:       assertEquals(37, Node.OPT_ARG_NAME);
1823:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1824:       assertNotNull(node2);
1825:       
1826:       // Undeclared exception!
1827:       try { 
1828:         node2.getChildBefore(node0);
1829:         fail("Expecting exception: RuntimeException");
1830:       
1831:       } catch(RuntimeException e) {
1832:          //
1833:          // node is not a child
1834:          //
1835:          verifyException("com.google.javascript.rhino.Node", e);
1836:       }
1837:   }
1838: }
RegularFileObject[/tmp/EvoSuite_140_1629222901244/com/google/javascript/rhino/Node_140_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:55:01 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_140_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_140_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.common.collect.Iterables",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.common.collect.AbstractMultimap$Values",
132:       "com.google.javascript.rhino.jstype.ProxyObjectType",
133:       "com.google.common.collect.Sets$SetView",
134:       "com.google.common.collect.RegularImmutableAsList",
135:       "com.google.javascript.rhino.jstype.TemplateType",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMultimap$Entries",
190:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
191:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
192:       "com.google.javascript.rhino.jstype.EnumElementType",
193:       "com.google.javascript.rhino.jstype.UnionType",
194:       "com.google.common.base.Objects",
195:       "com.google.javascript.rhino.Node$NumberNode",
196:       "com.google.common.collect.SingletonImmutableList",
197:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
198:       "com.google.common.collect.ImmutableCollection$Builder",
199:       "com.google.javascript.rhino.jstype.StaticSlot",
200:       "com.google.common.collect.Iterators$6",
201:       "com.google.common.collect.BiMap",
202:       "com.google.common.collect.Iterators$7",
203:       "com.google.common.collect.AbstractSetMultimap",
204:       "com.google.common.base.Function",
205:       "com.google.common.collect.ImmutableSet",
206:       "com.google.common.collect.Lists$AbstractListWrapper",
207:       "com.google.common.collect.ImmutableMap",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.Maps$1",
211:       "com.google.javascript.rhino.jstype.EnumType",
212:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.Multimaps$Entries",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
236:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
237:       "com.google.common.collect.ImmutableList",
238:       "com.google.common.collect.SingletonImmutableBiMap",
239:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
240:       "com.google.javascript.rhino.jstype.StringType",
241:       "com.google.javascript.rhino.Node$AbstractPropListItem",
242:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
243:       "com.google.javascript.rhino.jstype.TemplatizedType",
244:       "com.google.javascript.rhino.jstype.Visitor",
245:       "com.google.javascript.rhino.jstype.NoResolvedType",
246:       "com.google.javascript.rhino.jstype.JSTypeNative",
247:       "com.google.javascript.rhino.jstype.AllType",
248:       "com.google.common.collect.Maps",
249:       "com.google.common.collect.SetMultimap",
250:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
251:       "com.google.common.collect.Maps$EntryTransformer",
252:       "com.google.javascript.rhino.JSTypeExpression",
253:       "com.google.common.collect.Iterators$MergingIterator"
254:     );
255:   } 
256: 
257:   private static void resetClasses() {
258:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_140_tmp__ESTest_scaffolding.class.getClassLoader()); 
259: 
260:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
261:       "com.google.javascript.rhino.Node",
262:       "com.google.javascript.rhino.Node$NumberNode",
263:       "com.google.javascript.rhino.Node$StringNode",
264:       "com.google.javascript.rhino.Node$AbstractPropListItem",
265:       "com.google.javascript.rhino.Node$ObjectPropListItem",
266:       "com.google.javascript.rhino.Node$IntPropListItem",
267:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
268:       "com.google.javascript.rhino.Node$AncestorIterable",
269:       "com.google.javascript.rhino.Node$NodeMismatch",
270:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
271:       "com.google.javascript.rhino.Node$SideEffectFlags",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.Token",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.base.Objects",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
352:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.common.collect.AbstractIndexedListIterator",
362:       "com.google.common.collect.Iterators$11",
363:       "com.google.javascript.rhino.Node$AncestorIterable$1",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.InputId",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.javascript.rhino.JSTypeExpression",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.Sets$ImprovedAbstractSet",
375:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
376:       "com.google.common.collect.Hashing",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
378:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
379:       "com.google.common.collect.Platform"
380:     );
381:   }
382: }

[MASTER] 17:55:01.715 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isStringKey());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(node0);

Node node1 = Node.newString(0, "", 4, 38);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isNull());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(38, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(node1);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isStringKey());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isNull());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(38, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(node_NodeMismatch0);

boolean boolean0 = node_NodeMismatch0.equals("");
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isStringKey());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isNull());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(38, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(boolean0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isStringKey());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isNull());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(38, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(boolean1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

boolean boolean2 = node1.isDelProp();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isNull());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(38, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(boolean2);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isStringKey());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);

boolean boolean3 = node0.isIf();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isStringKey());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(boolean3);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

boolean boolean4 = node1.isVoid();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isNull());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(38, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(boolean4);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

node0.setInputId((InputId) null);
assertFalse(node0.equals((Object)node1));
assertEquals(39, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isStringKey());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

node0.setType(46);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals(46, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isRegExp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

boolean boolean5 = node1.hasChildren();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isNull());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(38, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(boolean5);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

Node node2 = new Node((-1872), node1, (-264), 0);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertEquals(4, node1.getLineno());
assertFalse(node1.isNull());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(38, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertEquals((-1872), node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertEquals(1, node2.getChildCount());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCase());
assertTrue(node2.hasChildren());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isString());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabel());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isEmpty());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node2);

node2.getChildBefore(node0);

[MASTER] 17:55:03.875 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_147_1629222903329/com/google/javascript/rhino/Node_147_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_147_1629222903329/com/google/javascript/rhino/Node_147_tmp__ESTest_scaffolding.java]]
[MASTER] 17:55:03.875 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:03.875 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:03.876 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 965
[MASTER] 17:55:03.877 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_147_1629222903329/com/google/javascript/rhino/Node_147_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:55:03 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_147_tmp__ESTest extends Node_147_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("com.google.javascript.rhino.jstype.NumberType", 117, 117);
21:       assertFalse(node0.isNull());
22:       assertEquals(117, node0.getCharno());
23:       assertFalse(node0.isName());
24:       assertFalse(node0.isVar());
25:       assertFalse(node0.isStringKey());
26:       assertFalse(node0.isParamList());
27:       assertEquals(0, node0.getChildCount());
28:       assertFalse(node0.isCall());
29:       assertFalse(node0.isCatch());
30:       assertFalse(node0.isDefaultCase());
31:       assertFalse(node0.isDo());
32:       assertFalse(node0.isVoid());
33:       assertEquals(40, node0.getType());
34:       assertFalse(node0.isTrue());
35:       assertFalse(node0.isOr());
36:       assertFalse(node0.isNew());
37:       assertFalse(node0.isSetterDef());
38:       assertFalse(node0.isAdd());
39:       assertFalse(node0.isEmpty());
40:       assertFalse(node0.isDelProp());
41:       assertFalse(node0.hasChildren());
42:       assertFalse(node0.isTypeOf());
43:       assertFalse(node0.isAssign());
44:       assertFalse(node0.isDec());
45:       assertFalse(node0.isReturn());
46:       assertFalse(node0.isContinue());
47:       assertFalse(node0.isExprResult());
48:       assertFalse(node0.isFunction());
49:       assertFalse(node0.isGetElem());
50:       assertFalse(node0.isCast());
51:       assertFalse(node0.isNot());
52:       assertFalse(node0.isDebugger());
53:       assertFalse(node0.isAnd());
54:       assertFalse(node0.isWhile());
55:       assertFalse(node0.isObjectLit());
56:       assertFalse(node0.isGetProp());
57:       assertFalse(node0.isBreak());
58:       assertFalse(node0.isComma());
59:       assertFalse(node0.isThrow());
60:       assertFalse(node0.isThis());
61:       assertEquals(479349, node0.getSourcePosition());
62:       assertFalse(node0.isHook());
63:       assertFalse(node0.isFalse());
64:       assertFalse(node0.isInstanceOf());
65:       assertEquals(117, node0.getLineno());
66:       assertFalse(node0.isIn());
67:       assertFalse(node0.isInc());
68:       assertFalse(node0.isGetterDef());
69:       assertFalse(node0.isIf());
70:       assertFalse(node0.isNumber());
71:       assertFalse(node0.isLabelName());
72:       assertFalse(node0.isAssignAdd());
73:       assertFalse(node0.isFor());
74:       assertFalse(node0.isNE());
75:       assertFalse(node0.isLabel());
76:       assertFalse(node0.isArrayLit());
77:       assertFalse(node0.hasMoreThanOneChild());
78:       assertFalse(node0.isWith());
79:       assertFalse(node0.isRegExp());
80:       assertFalse(node0.isCase());
81:       assertFalse(node0.isBlock());
82:       assertTrue(node0.isString());
83:       assertFalse(node0.isSwitch());
84:       assertFalse(node0.isTry());
85:       assertFalse(node0.hasOneChild());
86:       assertFalse(node0.isScript());
87:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
88:       assertEquals(50, Node.FREE_CALL);
89:       assertEquals(40, Node.ORIGINALNAME_PROP);
90:       assertEquals(39, Node.EMPTY_BLOCK);
91:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
92:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
93:       assertEquals(57, Node.LAST_PROP);
94:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
95:       assertEquals(49, Node.DIRECT_EVAL);
96:       assertEquals(15, Node.NO_SIDE_EFFECTS);
97:       assertEquals(4095, Node.COLUMN_MASK);
98:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
99:       assertEquals(55, Node.INFERRED_FUNCTION);
100:       assertEquals(52, Node.LENGTH);
101:       assertEquals(37, Node.OPT_ARG_NAME);
102:       assertEquals(8, Node.FLAG_NO_THROWS);
103:       assertEquals(48, Node.DIRECTIVES);
104:       assertEquals(56, Node.CHANGE_TIME);
105:       assertEquals(36, Node.QUOTED_PROP);
106:       assertEquals(57, Node.REFLECTED_OBJECT);
107:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
109:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
110:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
111:       assertEquals(29, Node.JSDOC_INFO_PROP);
112:       assertEquals(53, Node.INPUT_ID);
113:       assertEquals(32, Node.INCRDECR_PROP);
114:       assertEquals(2, Node.POST_FLAG);
115:       assertEquals(12, Node.COLUMN_BITS);
116:       assertEquals(47, Node.IS_DISPATCHER);
117:       assertEquals(30, Node.VAR_ARGS_NAME);
118:       assertEquals(1, Node.DECR_FLAG);
119:       assertEquals(43, Node.IS_CONSTANT_NAME);
120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
121:       assertEquals(46, Node.IS_NAMESPACE);
122:       assertEquals(54, Node.SLASH_V);
123:       assertNotNull(node0);
124:       
125:       Node node1 = new Node(49, node0);
126:       assertFalse(node1.equals((Object)node0));
127:       assertFalse(node0.isNull());
128:       assertEquals(117, node0.getCharno());
129:       assertFalse(node0.isName());
130:       assertFalse(node0.isVar());
131:       assertFalse(node0.isStringKey());
132:       assertFalse(node0.isParamList());
133:       assertEquals(0, node0.getChildCount());
134:       assertFalse(node0.isCall());
135:       assertFalse(node0.isCatch());
136:       assertFalse(node0.isDefaultCase());
137:       assertFalse(node0.isDo());
138:       assertFalse(node0.isVoid());
139:       assertEquals(40, node0.getType());
140:       assertFalse(node0.isTrue());
141:       assertFalse(node0.isOr());
142:       assertFalse(node0.isNew());
143:       assertFalse(node0.isSetterDef());
144:       assertFalse(node0.isAdd());
145:       assertFalse(node0.isEmpty());
146:       assertFalse(node0.isDelProp());
147:       assertFalse(node0.hasChildren());
148:       assertFalse(node0.isTypeOf());
149:       assertFalse(node0.isAssign());
150:       assertFalse(node0.isDec());
151:       assertFalse(node0.isReturn());
152:       assertFalse(node0.isContinue());
153:       assertFalse(node0.isExprResult());
154:       assertFalse(node0.isFunction());
155:       assertFalse(node0.isGetElem());
156:       assertFalse(node0.isCast());
157:       assertFalse(node0.isNot());
158:       assertFalse(node0.isDebugger());
159:       assertFalse(node0.isAnd());
160:       assertFalse(node0.isWhile());
161:       assertFalse(node0.isObjectLit());
162:       assertFalse(node0.isGetProp());
163:       assertFalse(node0.isBreak());
164:       assertFalse(node0.isComma());
165:       assertFalse(node0.isThrow());
166:       assertFalse(node0.isThis());
167:       assertEquals(479349, node0.getSourcePosition());
168:       assertFalse(node0.isHook());
169:       assertFalse(node0.isFalse());
170:       assertFalse(node0.isInstanceOf());
171:       assertEquals(117, node0.getLineno());
172:       assertFalse(node0.isIn());
173:       assertFalse(node0.isInc());
174:       assertFalse(node0.isGetterDef());
175:       assertFalse(node0.isIf());
176:       assertFalse(node0.isNumber());
177:       assertFalse(node0.isLabelName());
178:       assertFalse(node0.isAssignAdd());
179:       assertFalse(node0.isFor());
180:       assertFalse(node0.isNE());
181:       assertFalse(node0.isLabel());
182:       assertFalse(node0.isArrayLit());
183:       assertFalse(node0.hasMoreThanOneChild());
184:       assertFalse(node0.isWith());
185:       assertFalse(node0.isRegExp());
186:       assertFalse(node0.isCase());
187:       assertFalse(node0.isBlock());
188:       assertTrue(node0.isString());
189:       assertFalse(node0.isSwitch());
190:       assertFalse(node0.isTry());
191:       assertFalse(node0.hasOneChild());
192:       assertFalse(node0.isScript());
193:       assertFalse(node1.isIn());
194:       assertTrue(node1.hasChildren());
195:       assertEquals(49, node1.getType());
196:       assertFalse(node1.isCase());
197:       assertFalse(node1.isIf());
198:       assertFalse(node1.isGetterDef());
199:       assertFalse(node1.isDelProp());
200:       assertFalse(node1.isSwitch());
201:       assertFalse(node1.isNE());
202:       assertFalse(node1.isString());
203:       assertEquals((-1), node1.getCharno());
204:       assertFalse(node1.isEmpty());
205:       assertFalse(node1.isInc());
206:       assertFalse(node1.isArrayLit());
207:       assertFalse(node1.isDefaultCase());
208:       assertFalse(node1.isFunction());
209:       assertFalse(node1.isFalse());
210:       assertFalse(node1.isAnd());
211:       assertFalse(node1.isGetProp());
212:       assertFalse(node1.isNull());
213:       assertFalse(node1.isTrue());
214:       assertFalse(node1.isObjectLit());
215:       assertFalse(node1.isNot());
216:       assertFalse(node1.isDebugger());
217:       assertFalse(node1.isGetElem());
218:       assertFalse(node1.isCall());
219:       assertFalse(node1.isName());
220:       assertFalse(node1.isExprResult());
221:       assertFalse(node1.isVoid());
222:       assertFalse(node1.isBreak());
223:       assertFalse(node1.isDec());
224:       assertFalse(node1.isTypeOf());
225:       assertFalse(node1.isWhile());
226:       assertTrue(node1.hasOneChild());
227:       assertFalse(node1.isComma());
228:       assertFalse(node1.isAssign());
229:       assertFalse(node1.isReturn());
230:       assertFalse(node1.hasMoreThanOneChild());
231:       assertFalse(node1.isAssignAdd());
232:       assertFalse(node1.isContinue());
233:       assertFalse(node1.isDo());
234:       assertEquals((-1), node1.getLineno());
235:       assertFalse(node1.isNumber());
236:       assertFalse(node1.isOr());
237:       assertEquals((-1), node1.getSourcePosition());
238:       assertFalse(node1.isVar());
239:       assertFalse(node1.isCast());
240:       assertFalse(node1.isAdd());
241:       assertFalse(node1.isLabelName());
242:       assertFalse(node1.isNew());
243:       assertTrue(node1.isThrow());
244:       assertFalse(node1.isLabel());
245:       assertFalse(node1.isInstanceOf());
246:       assertFalse(node1.isCatch());
247:       assertFalse(node1.isSetterDef());
248:       assertFalse(node1.isScript());
249:       assertFalse(node1.isParamList());
250:       assertFalse(node1.isStringKey());
251:       assertFalse(node1.isHook());
252:       assertFalse(node1.isTry());
253:       assertFalse(node1.isRegExp());
254:       assertFalse(node1.isWith());
255:       assertFalse(node1.isFor());
256:       assertFalse(node1.isBlock());
257:       assertFalse(node1.isThis());
258:       assertEquals(1, node1.getChildCount());
259:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
260:       assertEquals(50, Node.FREE_CALL);
261:       assertEquals(40, Node.ORIGINALNAME_PROP);
262:       assertEquals(39, Node.EMPTY_BLOCK);
263:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
264:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
265:       assertEquals(57, Node.LAST_PROP);
266:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
267:       assertEquals(49, Node.DIRECT_EVAL);
268:       assertEquals(15, Node.NO_SIDE_EFFECTS);
269:       assertEquals(4095, Node.COLUMN_MASK);
270:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
271:       assertEquals(55, Node.INFERRED_FUNCTION);
272:       assertEquals(52, Node.LENGTH);
273:       assertEquals(37, Node.OPT_ARG_NAME);
274:       assertEquals(8, Node.FLAG_NO_THROWS);
275:       assertEquals(48, Node.DIRECTIVES);
276:       assertEquals(56, Node.CHANGE_TIME);
277:       assertEquals(36, Node.QUOTED_PROP);
278:       assertEquals(57, Node.REFLECTED_OBJECT);
279:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
280:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
281:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
282:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
283:       assertEquals(29, Node.JSDOC_INFO_PROP);
284:       assertEquals(53, Node.INPUT_ID);
285:       assertEquals(32, Node.INCRDECR_PROP);
286:       assertEquals(2, Node.POST_FLAG);
287:       assertEquals(12, Node.COLUMN_BITS);
288:       assertEquals(47, Node.IS_DISPATCHER);
289:       assertEquals(30, Node.VAR_ARGS_NAME);
290:       assertEquals(1, Node.DECR_FLAG);
291:       assertEquals(43, Node.IS_CONSTANT_NAME);
292:       assertEquals(51, Node.STATIC_SOURCE_FILE);
293:       assertEquals(46, Node.IS_NAMESPACE);
294:       assertEquals(54, Node.SLASH_V);
295:       assertEquals(46, Node.IS_NAMESPACE);
296:       assertEquals(2, Node.POST_FLAG);
297:       assertEquals(12, Node.COLUMN_BITS);
298:       assertEquals(47, Node.IS_DISPATCHER);
299:       assertEquals(51, Node.STATIC_SOURCE_FILE);
300:       assertEquals(49, Node.DIRECT_EVAL);
301:       assertEquals(56, Node.CHANGE_TIME);
302:       assertEquals(37, Node.OPT_ARG_NAME);
303:       assertEquals(52, Node.LENGTH);
304:       assertEquals(53, Node.INPUT_ID);
305:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
306:       assertEquals(57, Node.REFLECTED_OBJECT);
307:       assertEquals(30, Node.VAR_ARGS_NAME);
308:       assertEquals(36, Node.QUOTED_PROP);
309:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
310:       assertEquals(29, Node.JSDOC_INFO_PROP);
311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
312:       assertEquals(57, Node.LAST_PROP);
313:       assertEquals(55, Node.INFERRED_FUNCTION);
314:       assertEquals(15, Node.NO_SIDE_EFFECTS);
315:       assertEquals(39, Node.EMPTY_BLOCK);
316:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
317:       assertEquals(4095, Node.COLUMN_MASK);
318:       assertEquals(8, Node.FLAG_NO_THROWS);
319:       assertEquals(40, Node.ORIGINALNAME_PROP);
320:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
321:       assertEquals(43, Node.IS_CONSTANT_NAME);
322:       assertEquals(48, Node.DIRECTIVES);
323:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
324:       assertEquals(54, Node.SLASH_V);
325:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
326:       assertEquals(50, Node.FREE_CALL);
327:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
329:       assertEquals(32, Node.INCRDECR_PROP);
330:       assertEquals(1, Node.DECR_FLAG);
331:       assertNotNull(node1);
332:       
333:       boolean boolean0 = node0.isEquivalentTo(node1, false, false, false);
334:       assertFalse(node0.equals((Object)node1));
335:       assertFalse(node1.equals((Object)node0));
336:       assertFalse(node0.isNull());
337:       assertEquals(117, node0.getCharno());
338:       assertFalse(node0.isName());
339:       assertFalse(node0.isVar());
340:       assertFalse(node0.isStringKey());
341:       assertFalse(node0.isParamList());
342:       assertEquals(0, node0.getChildCount());
343:       assertFalse(node0.isCall());
344:       assertFalse(node0.isCatch());
345:       assertFalse(node0.isDefaultCase());
346:       assertFalse(node0.isDo());
347:       assertFalse(node0.isVoid());
348:       assertEquals(40, node0.getType());
349:       assertFalse(node0.isTrue());
350:       assertFalse(node0.isOr());
351:       assertFalse(node0.isNew());
352:       assertFalse(node0.isSetterDef());
353:       assertFalse(node0.isAdd());
354:       assertFalse(node0.isEmpty());
355:       assertFalse(node0.isDelProp());
356:       assertFalse(node0.hasChildren());
357:       assertFalse(node0.isTypeOf());
358:       assertFalse(node0.isAssign());
359:       assertFalse(node0.isDec());
360:       assertFalse(node0.isReturn());
361:       assertFalse(node0.isContinue());
362:       assertFalse(node0.isExprResult());
363:       assertFalse(node0.isFunction());
364:       assertFalse(node0.isGetElem());
365:       assertFalse(node0.isCast());
366:       assertFalse(node0.isNot());
367:       assertFalse(node0.isDebugger());
368:       assertFalse(node0.isAnd());
369:       assertFalse(node0.isWhile());
370:       assertFalse(node0.isObjectLit());
371:       assertFalse(node0.isGetProp());
372:       assertFalse(node0.isBreak());
373:       assertFalse(node0.isComma());
374:       assertFalse(node0.isThrow());
375:       assertFalse(node0.isThis());
376:       assertEquals(479349, node0.getSourcePosition());
377:       assertFalse(node0.isHook());
378:       assertFalse(node0.isFalse());
379:       assertFalse(node0.isInstanceOf());
380:       assertEquals(117, node0.getLineno());
381:       assertFalse(node0.isIn());
382:       assertFalse(node0.isInc());
383:       assertFalse(node0.isGetterDef());
384:       assertFalse(node0.isIf());
385:       assertFalse(node0.isNumber());
386:       assertFalse(node0.isLabelName());
387:       assertFalse(node0.isAssignAdd());
388:       assertFalse(node0.isFor());
389:       assertFalse(node0.isNE());
390:       assertFalse(node0.isLabel());
391:       assertFalse(node0.isArrayLit());
392:       assertFalse(node0.hasMoreThanOneChild());
393:       assertFalse(node0.isWith());
394:       assertFalse(node0.isRegExp());
395:       assertFalse(node0.isCase());
396:       assertFalse(node0.isBlock());
397:       assertTrue(node0.isString());
398:       assertFalse(node0.isSwitch());
399:       assertFalse(node0.isTry());
400:       assertFalse(node0.hasOneChild());
401:       assertFalse(node0.isScript());
402:       assertFalse(node1.isIn());
403:       assertTrue(node1.hasChildren());
404:       assertEquals(49, node1.getType());
405:       assertFalse(node1.isCase());
406:       assertFalse(node1.isIf());
407:       assertFalse(node1.isGetterDef());
408:       assertFalse(node1.isDelProp());
409:       assertFalse(node1.isSwitch());
410:       assertFalse(node1.isNE());
411:       assertFalse(node1.isString());
412:       assertEquals((-1), node1.getCharno());
413:       assertFalse(node1.isEmpty());
414:       assertFalse(node1.isInc());
415:       assertFalse(node1.isArrayLit());
416:       assertFalse(node1.isDefaultCase());
417:       assertFalse(node1.isFunction());
418:       assertFalse(node1.isFalse());
419:       assertFalse(node1.isAnd());
420:       assertFalse(node1.isGetProp());
421:       assertFalse(node1.isNull());
422:       assertFalse(node1.isTrue());
423:       assertFalse(node1.isObjectLit());
424:       assertFalse(node1.isNot());
425:       assertFalse(node1.isDebugger());
426:       assertFalse(node1.isGetElem());
427:       assertFalse(node1.isCall());
428:       assertFalse(node1.isName());
429:       assertFalse(node1.isExprResult());
430:       assertFalse(node1.isVoid());
431:       assertFalse(node1.isBreak());
432:       assertFalse(node1.isDec());
433:       assertFalse(node1.isTypeOf());
434:       assertFalse(node1.isWhile());
435:       assertTrue(node1.hasOneChild());
436:       assertFalse(node1.isComma());
437:       assertFalse(node1.isAssign());
438:       assertFalse(node1.isReturn());
439:       assertFalse(node1.hasMoreThanOneChild());
440:       assertFalse(node1.isAssignAdd());
441:       assertFalse(node1.isContinue());
442:       assertFalse(node1.isDo());
443:       assertEquals((-1), node1.getLineno());
444:       assertFalse(node1.isNumber());
445:       assertFalse(node1.isOr());
446:       assertEquals((-1), node1.getSourcePosition());
447:       assertFalse(node1.isVar());
448:       assertFalse(node1.isCast());
449:       assertFalse(node1.isAdd());
450:       assertFalse(node1.isLabelName());
451:       assertFalse(node1.isNew());
452:       assertTrue(node1.isThrow());
453:       assertFalse(node1.isLabel());
454:       assertFalse(node1.isInstanceOf());
455:       assertFalse(node1.isCatch());
456:       assertFalse(node1.isSetterDef());
457:       assertFalse(node1.isScript());
458:       assertFalse(node1.isParamList());
459:       assertFalse(node1.isStringKey());
460:       assertFalse(node1.isHook());
461:       assertFalse(node1.isTry());
462:       assertFalse(node1.isRegExp());
463:       assertFalse(node1.isWith());
464:       assertFalse(node1.isFor());
465:       assertFalse(node1.isBlock());
466:       assertFalse(node1.isThis());
467:       assertEquals(1, node1.getChildCount());
468:       assertFalse(boolean0);
469:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
470:       assertEquals(50, Node.FREE_CALL);
471:       assertEquals(40, Node.ORIGINALNAME_PROP);
472:       assertEquals(39, Node.EMPTY_BLOCK);
473:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
474:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
475:       assertEquals(57, Node.LAST_PROP);
476:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
477:       assertEquals(49, Node.DIRECT_EVAL);
478:       assertEquals(15, Node.NO_SIDE_EFFECTS);
479:       assertEquals(4095, Node.COLUMN_MASK);
480:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
481:       assertEquals(55, Node.INFERRED_FUNCTION);
482:       assertEquals(52, Node.LENGTH);
483:       assertEquals(37, Node.OPT_ARG_NAME);
484:       assertEquals(8, Node.FLAG_NO_THROWS);
485:       assertEquals(48, Node.DIRECTIVES);
486:       assertEquals(56, Node.CHANGE_TIME);
487:       assertEquals(36, Node.QUOTED_PROP);
488:       assertEquals(57, Node.REFLECTED_OBJECT);
489:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
490:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
491:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
492:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
493:       assertEquals(29, Node.JSDOC_INFO_PROP);
494:       assertEquals(53, Node.INPUT_ID);
495:       assertEquals(32, Node.INCRDECR_PROP);
496:       assertEquals(2, Node.POST_FLAG);
497:       assertEquals(12, Node.COLUMN_BITS);
498:       assertEquals(47, Node.IS_DISPATCHER);
499:       assertEquals(30, Node.VAR_ARGS_NAME);
500:       assertEquals(1, Node.DECR_FLAG);
501:       assertEquals(43, Node.IS_CONSTANT_NAME);
502:       assertEquals(51, Node.STATIC_SOURCE_FILE);
503:       assertEquals(46, Node.IS_NAMESPACE);
504:       assertEquals(54, Node.SLASH_V);
505:       assertEquals(46, Node.IS_NAMESPACE);
506:       assertEquals(2, Node.POST_FLAG);
507:       assertEquals(12, Node.COLUMN_BITS);
508:       assertEquals(47, Node.IS_DISPATCHER);
509:       assertEquals(51, Node.STATIC_SOURCE_FILE);
510:       assertEquals(49, Node.DIRECT_EVAL);
511:       assertEquals(56, Node.CHANGE_TIME);
512:       assertEquals(37, Node.OPT_ARG_NAME);
513:       assertEquals(52, Node.LENGTH);
514:       assertEquals(53, Node.INPUT_ID);
515:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
516:       assertEquals(57, Node.REFLECTED_OBJECT);
517:       assertEquals(30, Node.VAR_ARGS_NAME);
518:       assertEquals(36, Node.QUOTED_PROP);
519:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
520:       assertEquals(29, Node.JSDOC_INFO_PROP);
521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
522:       assertEquals(57, Node.LAST_PROP);
523:       assertEquals(55, Node.INFERRED_FUNCTION);
524:       assertEquals(15, Node.NO_SIDE_EFFECTS);
525:       assertEquals(39, Node.EMPTY_BLOCK);
526:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
527:       assertEquals(4095, Node.COLUMN_MASK);
528:       assertEquals(8, Node.FLAG_NO_THROWS);
529:       assertEquals(40, Node.ORIGINALNAME_PROP);
530:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
531:       assertEquals(43, Node.IS_CONSTANT_NAME);
532:       assertEquals(48, Node.DIRECTIVES);
533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
534:       assertEquals(54, Node.SLASH_V);
535:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
536:       assertEquals(50, Node.FREE_CALL);
537:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
538:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
539:       assertEquals(32, Node.INCRDECR_PROP);
540:       assertEquals(1, Node.DECR_FLAG);
541:       
542:       boolean boolean1 = node1.isVarArgs();
543:       assertFalse(node0.equals((Object)node1));
544:       assertFalse(node1.equals((Object)node0));
545:       assertTrue(boolean1 == boolean0);
546:       assertFalse(node0.isNull());
547:       assertEquals(117, node0.getCharno());
548:       assertFalse(node0.isName());
549:       assertFalse(node0.isVar());
550:       assertFalse(node0.isStringKey());
551:       assertFalse(node0.isParamList());
552:       assertEquals(0, node0.getChildCount());
553:       assertFalse(node0.isCall());
554:       assertFalse(node0.isCatch());
555:       assertFalse(node0.isDefaultCase());
556:       assertFalse(node0.isDo());
557:       assertFalse(node0.isVoid());
558:       assertEquals(40, node0.getType());
559:       assertFalse(node0.isTrue());
560:       assertFalse(node0.isOr());
561:       assertFalse(node0.isNew());
562:       assertFalse(node0.isSetterDef());
563:       assertFalse(node0.isAdd());
564:       assertFalse(node0.isEmpty());
565:       assertFalse(node0.isDelProp());
566:       assertFalse(node0.hasChildren());
567:       assertFalse(node0.isTypeOf());
568:       assertFalse(node0.isAssign());
569:       assertFalse(node0.isDec());
570:       assertFalse(node0.isReturn());
571:       assertFalse(node0.isContinue());
572:       assertFalse(node0.isExprResult());
573:       assertFalse(node0.isFunction());
574:       assertFalse(node0.isGetElem());
575:       assertFalse(node0.isCast());
576:       assertFalse(node0.isNot());
577:       assertFalse(node0.isDebugger());
578:       assertFalse(node0.isAnd());
579:       assertFalse(node0.isWhile());
580:       assertFalse(node0.isObjectLit());
581:       assertFalse(node0.isGetProp());
582:       assertFalse(node0.isBreak());
583:       assertFalse(node0.isComma());
584:       assertFalse(node0.isThrow());
585:       assertFalse(node0.isThis());
586:       assertEquals(479349, node0.getSourcePosition());
587:       assertFalse(node0.isHook());
588:       assertFalse(node0.isFalse());
589:       assertFalse(node0.isInstanceOf());
590:       assertEquals(117, node0.getLineno());
591:       assertFalse(node0.isIn());
592:       assertFalse(node0.isInc());
593:       assertFalse(node0.isGetterDef());
594:       assertFalse(node0.isIf());
595:       assertFalse(node0.isNumber());
596:       assertFalse(node0.isLabelName());
597:       assertFalse(node0.isAssignAdd());
598:       assertFalse(node0.isFor());
599:       assertFalse(node0.isNE());
600:       assertFalse(node0.isLabel());
601:       assertFalse(node0.isArrayLit());
602:       assertFalse(node0.hasMoreThanOneChild());
603:       assertFalse(node0.isWith());
604:       assertFalse(node0.isRegExp());
605:       assertFalse(node0.isCase());
606:       assertFalse(node0.isBlock());
607:       assertTrue(node0.isString());
608:       assertFalse(node0.isSwitch());
609:       assertFalse(node0.isTry());
610:       assertFalse(node0.hasOneChild());
611:       assertFalse(node0.isScript());
612:       assertFalse(node1.isIn());
613:       assertTrue(node1.hasChildren());
614:       assertEquals(49, node1.getType());
615:       assertFalse(node1.isCase());
616:       assertFalse(node1.isIf());
617:       assertFalse(node1.isGetterDef());
618:       assertFalse(node1.isDelProp());
619:       assertFalse(node1.isSwitch());
620:       assertFalse(node1.isNE());
621:       assertFalse(node1.isString());
622:       assertEquals((-1), node1.getCharno());
623:       assertFalse(node1.isEmpty());
624:       assertFalse(node1.isInc());
625:       assertFalse(node1.isArrayLit());
626:       assertFalse(node1.isDefaultCase());
627:       assertFalse(node1.isFunction());
628:       assertFalse(node1.isFalse());
629:       assertFalse(node1.isAnd());
630:       assertFalse(node1.isGetProp());
631:       assertFalse(node1.isNull());
632:       assertFalse(node1.isTrue());
633:       assertFalse(node1.isObjectLit());
634:       assertFalse(node1.isNot());
635:       assertFalse(node1.isDebugger());
636:       assertFalse(node1.isGetElem());
637:       assertFalse(node1.isCall());
638:       assertFalse(node1.isName());
639:       assertFalse(node1.isExprResult());
640:       assertFalse(node1.isVoid());
641:       assertFalse(node1.isBreak());
642:       assertFalse(node1.isDec());
643:       assertFalse(node1.isTypeOf());
644:       assertFalse(node1.isWhile());
645:       assertTrue(node1.hasOneChild());
646:       assertFalse(node1.isComma());
647:       assertFalse(node1.isAssign());
648:       assertFalse(node1.isReturn());
649:       assertFalse(node1.hasMoreThanOneChild());
650:       assertFalse(node1.isAssignAdd());
651:       assertFalse(node1.isContinue());
652:       assertFalse(node1.isDo());
653:       assertEquals((-1), node1.getLineno());
654:       assertFalse(node1.isNumber());
655:       assertFalse(node1.isOr());
656:       assertEquals((-1), node1.getSourcePosition());
657:       assertFalse(node1.isVar());
658:       assertFalse(node1.isCast());
659:       assertFalse(node1.isAdd());
660:       assertFalse(node1.isLabelName());
661:       assertFalse(node1.isNew());
662:       assertTrue(node1.isThrow());
663:       assertFalse(node1.isLabel());
664:       assertFalse(node1.isInstanceOf());
665:       assertFalse(node1.isCatch());
666:       assertFalse(node1.isSetterDef());
667:       assertFalse(node1.isScript());
668:       assertFalse(node1.isParamList());
669:       assertFalse(node1.isStringKey());
670:       assertFalse(node1.isHook());
671:       assertFalse(node1.isTry());
672:       assertFalse(node1.isRegExp());
673:       assertFalse(node1.isWith());
674:       assertFalse(node1.isFor());
675:       assertFalse(node1.isBlock());
676:       assertFalse(node1.isThis());
677:       assertEquals(1, node1.getChildCount());
678:       assertFalse(boolean1);
679:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
680:       assertEquals(50, Node.FREE_CALL);
681:       assertEquals(40, Node.ORIGINALNAME_PROP);
682:       assertEquals(39, Node.EMPTY_BLOCK);
683:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
684:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
685:       assertEquals(57, Node.LAST_PROP);
686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
687:       assertEquals(49, Node.DIRECT_EVAL);
688:       assertEquals(15, Node.NO_SIDE_EFFECTS);
689:       assertEquals(4095, Node.COLUMN_MASK);
690:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
691:       assertEquals(55, Node.INFERRED_FUNCTION);
692:       assertEquals(52, Node.LENGTH);
693:       assertEquals(37, Node.OPT_ARG_NAME);
694:       assertEquals(8, Node.FLAG_NO_THROWS);
695:       assertEquals(48, Node.DIRECTIVES);
696:       assertEquals(56, Node.CHANGE_TIME);
697:       assertEquals(36, Node.QUOTED_PROP);
698:       assertEquals(57, Node.REFLECTED_OBJECT);
699:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
700:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
701:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
702:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
703:       assertEquals(29, Node.JSDOC_INFO_PROP);
704:       assertEquals(53, Node.INPUT_ID);
705:       assertEquals(32, Node.INCRDECR_PROP);
706:       assertEquals(2, Node.POST_FLAG);
707:       assertEquals(12, Node.COLUMN_BITS);
708:       assertEquals(47, Node.IS_DISPATCHER);
709:       assertEquals(30, Node.VAR_ARGS_NAME);
710:       assertEquals(1, Node.DECR_FLAG);
711:       assertEquals(43, Node.IS_CONSTANT_NAME);
712:       assertEquals(51, Node.STATIC_SOURCE_FILE);
713:       assertEquals(46, Node.IS_NAMESPACE);
714:       assertEquals(54, Node.SLASH_V);
715:       assertEquals(46, Node.IS_NAMESPACE);
716:       assertEquals(2, Node.POST_FLAG);
717:       assertEquals(12, Node.COLUMN_BITS);
718:       assertEquals(47, Node.IS_DISPATCHER);
719:       assertEquals(51, Node.STATIC_SOURCE_FILE);
720:       assertEquals(49, Node.DIRECT_EVAL);
721:       assertEquals(56, Node.CHANGE_TIME);
722:       assertEquals(37, Node.OPT_ARG_NAME);
723:       assertEquals(52, Node.LENGTH);
724:       assertEquals(53, Node.INPUT_ID);
725:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
726:       assertEquals(57, Node.REFLECTED_OBJECT);
727:       assertEquals(30, Node.VAR_ARGS_NAME);
728:       assertEquals(36, Node.QUOTED_PROP);
729:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
730:       assertEquals(29, Node.JSDOC_INFO_PROP);
731:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
732:       assertEquals(57, Node.LAST_PROP);
733:       assertEquals(55, Node.INFERRED_FUNCTION);
734:       assertEquals(15, Node.NO_SIDE_EFFECTS);
735:       assertEquals(39, Node.EMPTY_BLOCK);
736:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
737:       assertEquals(4095, Node.COLUMN_MASK);
738:       assertEquals(8, Node.FLAG_NO_THROWS);
739:       assertEquals(40, Node.ORIGINALNAME_PROP);
740:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
741:       assertEquals(43, Node.IS_CONSTANT_NAME);
742:       assertEquals(48, Node.DIRECTIVES);
743:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
744:       assertEquals(54, Node.SLASH_V);
745:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
746:       assertEquals(50, Node.FREE_CALL);
747:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
748:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
749:       assertEquals(32, Node.INCRDECR_PROP);
750:       assertEquals(1, Node.DECR_FLAG);
751:       
752:       Node node2 = Node.newString("com.google.javascript.rhino.jstype.NumberType");
753:       assertFalse(node2.equals((Object)node0));
754:       assertFalse(node2.equals((Object)node1));
755:       assertFalse(node2.isThrow());
756:       assertFalse(node2.isHook());
757:       assertFalse(node2.isComma());
758:       assertFalse(node2.isBreak());
759:       assertFalse(node2.isThis());
760:       assertFalse(node2.isFalse());
761:       assertFalse(node2.isCase());
762:       assertFalse(node2.isAnd());
763:       assertFalse(node2.isScript());
764:       assertFalse(node2.isSwitch());
765:       assertEquals((-1), node2.getCharno());
766:       assertFalse(node2.isGetProp());
767:       assertFalse(node2.isNot());
768:       assertFalse(node2.isGetterDef());
769:       assertFalse(node2.isObjectLit());
770:       assertFalse(node2.isCast());
771:       assertFalse(node2.hasOneChild());
772:       assertFalse(node2.isFor());
773:       assertFalse(node2.isTry());
774:       assertFalse(node2.isIf());
775:       assertFalse(node2.isWith());
776:       assertFalse(node2.isRegExp());
777:       assertFalse(node2.isFunction());
778:       assertFalse(node2.hasMoreThanOneChild());
779:       assertFalse(node2.isCatch());
780:       assertFalse(node2.isInstanceOf());
781:       assertEquals(40, node2.getType());
782:       assertEquals((-1), node2.getLineno());
783:       assertFalse(node2.isNE());
784:       assertFalse(node2.isSetterDef());
785:       assertFalse(node2.isInc());
786:       assertFalse(node2.isIn());
787:       assertFalse(node2.isVar());
788:       assertFalse(node2.isCall());
789:       assertFalse(node2.isStringKey());
790:       assertFalse(node2.isNew());
791:       assertFalse(node2.isName());
792:       assertTrue(node2.isString());
793:       assertFalse(node2.isBlock());
794:       assertFalse(node2.isContinue());
795:       assertEquals(0, node2.getChildCount());
796:       assertFalse(node2.isReturn());
797:       assertFalse(node2.isWhile());
798:       assertFalse(node2.isParamList());
799:       assertEquals((-1), node2.getSourcePosition());
800:       assertFalse(node2.isDebugger());
801:       assertFalse(node2.isNumber());
802:       assertFalse(node2.isArrayLit());
803:       assertFalse(node2.isGetElem());
804:       assertFalse(node2.isLabelName());
805:       assertFalse(node2.isVoid());
806:       assertFalse(node2.isDelProp());
807:       assertFalse(node2.isDec());
808:       assertFalse(node2.hasChildren());
809:       assertFalse(node2.isExprResult());
810:       assertFalse(node2.isLabel());
811:       assertFalse(node2.isAssign());
812:       assertFalse(node2.isTypeOf());
813:       assertFalse(node2.isAssignAdd());
814:       assertFalse(node2.isDo());
815:       assertFalse(node2.isDefaultCase());
816:       assertFalse(node2.isNull());
817:       assertFalse(node2.isTrue());
818:       assertFalse(node2.isOr());
819:       assertFalse(node2.isAdd());
820:       assertFalse(node2.isEmpty());
821:       assertEquals(57, Node.REFLECTED_OBJECT);
822:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
823:       assertEquals(40, Node.ORIGINALNAME_PROP);
824:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
825:       assertEquals(52, Node.LENGTH);
826:       assertEquals(30, Node.VAR_ARGS_NAME);
827:       assertEquals(15, Node.NO_SIDE_EFFECTS);
828:       assertEquals(39, Node.EMPTY_BLOCK);
829:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
830:       assertEquals(1, Node.DECR_FLAG);
831:       assertEquals(57, Node.LAST_PROP);
832:       assertEquals(32, Node.INCRDECR_PROP);
833:       assertEquals(46, Node.IS_NAMESPACE);
834:       assertEquals(51, Node.STATIC_SOURCE_FILE);
835:       assertEquals(2, Node.POST_FLAG);
836:       assertEquals(50, Node.FREE_CALL);
837:       assertEquals(54, Node.SLASH_V);
838:       assertEquals(43, Node.IS_CONSTANT_NAME);
839:       assertEquals(53, Node.INPUT_ID);
840:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
841:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
842:       assertEquals(29, Node.JSDOC_INFO_PROP);
843:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
844:       assertEquals(47, Node.IS_DISPATCHER);
845:       assertEquals(12, Node.COLUMN_BITS);
846:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
847:       assertEquals(55, Node.INFERRED_FUNCTION);
848:       assertEquals(4095, Node.COLUMN_MASK);
849:       assertEquals(8, Node.FLAG_NO_THROWS);
850:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
851:       assertEquals(49, Node.DIRECT_EVAL);
852:       assertEquals(36, Node.QUOTED_PROP);
853:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
854:       assertEquals(37, Node.OPT_ARG_NAME);
855:       assertEquals(48, Node.DIRECTIVES);
856:       assertEquals(56, Node.CHANGE_TIME);
857:       assertNotNull(node2);
858:       assertNotSame(node2, node0);
859:       
860:       Iterable<Node> iterable0 = node2.children();
861:       assertFalse(node2.equals((Object)node0));
862:       assertFalse(node2.equals((Object)node1));
863:       assertFalse(node2.isThrow());
864:       assertFalse(node2.isHook());
865:       assertFalse(node2.isComma());
866:       assertFalse(node2.isBreak());
867:       assertFalse(node2.isThis());
868:       assertFalse(node2.isFalse());
869:       assertFalse(node2.isCase());
870:       assertFalse(node2.isAnd());
871:       assertFalse(node2.isScript());
872:       assertFalse(node2.isSwitch());
873:       assertEquals((-1), node2.getCharno());
874:       assertFalse(node2.isGetProp());
875:       assertFalse(node2.isNot());
876:       assertFalse(node2.isGetterDef());
877:       assertFalse(node2.isObjectLit());
878:       assertFalse(node2.isCast());
879:       assertFalse(node2.hasOneChild());
880:       assertFalse(node2.isFor());
881:       assertFalse(node2.isTry());
882:       assertFalse(node2.isIf());
883:       assertFalse(node2.isWith());
884:       assertFalse(node2.isRegExp());
885:       assertFalse(node2.isFunction());
886:       assertFalse(node2.hasMoreThanOneChild());
887:       assertFalse(node2.isCatch());
888:       assertFalse(node2.isInstanceOf());
889:       assertEquals(40, node2.getType());
890:       assertEquals((-1), node2.getLineno());
891:       assertFalse(node2.isNE());
892:       assertFalse(node2.isSetterDef());
893:       assertFalse(node2.isInc());
894:       assertFalse(node2.isIn());
895:       assertFalse(node2.isVar());
896:       assertFalse(node2.isCall());
897:       assertFalse(node2.isStringKey());
898:       assertFalse(node2.isNew());
899:       assertFalse(node2.isName());
900:       assertTrue(node2.isString());
901:       assertFalse(node2.isBlock());
902:       assertFalse(node2.isContinue());
903:       assertEquals(0, node2.getChildCount());
904:       assertFalse(node2.isReturn());
905:       assertFalse(node2.isWhile());
906:       assertFalse(node2.isParamList());
907:       assertEquals((-1), node2.getSourcePosition());
908:       assertFalse(node2.isDebugger());
909:       assertFalse(node2.isNumber());
910:       assertFalse(node2.isArrayLit());
911:       assertFalse(node2.isGetElem());
912:       assertFalse(node2.isLabelName());
913:       assertFalse(node2.isVoid());
914:       assertFalse(node2.isDelProp());
915:       assertFalse(node2.isDec());
916:       assertFalse(node2.hasChildren());
917:       assertFalse(node2.isExprResult());
918:       assertFalse(node2.isLabel());
919:       assertFalse(node2.isAssign());
920:       assertFalse(node2.isTypeOf());
921:       assertFalse(node2.isAssignAdd());
922:       assertFalse(node2.isDo());
923:       assertFalse(node2.isDefaultCase());
924:       assertFalse(node2.isNull());
925:       assertFalse(node2.isTrue());
926:       assertFalse(node2.isOr());
927:       assertFalse(node2.isAdd());
928:       assertFalse(node2.isEmpty());
929:       assertEquals(57, Node.REFLECTED_OBJECT);
930:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
931:       assertEquals(40, Node.ORIGINALNAME_PROP);
932:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
933:       assertEquals(52, Node.LENGTH);
934:       assertEquals(30, Node.VAR_ARGS_NAME);
935:       assertEquals(15, Node.NO_SIDE_EFFECTS);
936:       assertEquals(39, Node.EMPTY_BLOCK);
937:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
938:       assertEquals(1, Node.DECR_FLAG);
939:       assertEquals(57, Node.LAST_PROP);
940:       assertEquals(32, Node.INCRDECR_PROP);
941:       assertEquals(46, Node.IS_NAMESPACE);
942:       assertEquals(51, Node.STATIC_SOURCE_FILE);
943:       assertEquals(2, Node.POST_FLAG);
944:       assertEquals(50, Node.FREE_CALL);
945:       assertEquals(54, Node.SLASH_V);
946:       assertEquals(43, Node.IS_CONSTANT_NAME);
947:       assertEquals(53, Node.INPUT_ID);
948:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
949:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
950:       assertEquals(29, Node.JSDOC_INFO_PROP);
951:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
952:       assertEquals(47, Node.IS_DISPATCHER);
953:       assertEquals(12, Node.COLUMN_BITS);
954:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
955:       assertEquals(55, Node.INFERRED_FUNCTION);
956:       assertEquals(4095, Node.COLUMN_MASK);
957:       assertEquals(8, Node.FLAG_NO_THROWS);
958:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
959:       assertEquals(49, Node.DIRECT_EVAL);
960:       assertEquals(36, Node.QUOTED_PROP);
961:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
962:       assertEquals(37, Node.OPT_ARG_NAME);
963:       assertEquals(48, Node.DIRECTIVES);
964:       assertEquals(56, Node.CHANGE_TIME);
965:       assertFalse(iterable0.contains(node2));
966:       assertNotNull(iterable0);
967:       assertNotSame(node2, node0);
968:       
969:       boolean boolean2 = node1.isIf();
970:       assertFalse(node0.equals((Object)node2));
971:       assertFalse(node0.equals((Object)node1));
972:       assertFalse(node1.equals((Object)node0));
973:       assertFalse(node1.equals((Object)node2));
974:       assertTrue(boolean2 == boolean0);
975:       assertTrue(boolean2 == boolean1);
976:       assertFalse(node0.isNull());
977:       assertEquals(117, node0.getCharno());
978:       assertFalse(node0.isName());
979:       assertFalse(node0.isVar());
980:       assertFalse(node0.isStringKey());
981:       assertFalse(node0.isParamList());
982:       assertEquals(0, node0.getChildCount());
983:       assertFalse(node0.isCall());
984:       assertFalse(node0.isCatch());
985:       assertFalse(node0.isDefaultCase());
986:       assertFalse(node0.isDo());
987:       assertFalse(node0.isVoid());
988:       assertEquals(40, node0.getType());
989:       assertFalse(node0.isTrue());
990:       assertFalse(node0.isOr());
991:       assertFalse(node0.isNew());
992:       assertFalse(node0.isSetterDef());
993:       assertFalse(node0.isAdd());
994:       assertFalse(node0.isEmpty());
995:       assertFalse(node0.isDelProp());
996:       assertFalse(node0.hasChildren());
997:       assertFalse(node0.isTypeOf());
998:       assertFalse(node0.isAssign());
999:       assertFalse(node0.isDec());
1000:       assertFalse(node0.isReturn());
1001:       assertFalse(node0.isContinue());
1002:       assertFalse(node0.isExprResult());
1003:       assertFalse(node0.isFunction());
1004:       assertFalse(node0.isGetElem());
1005:       assertFalse(node0.isCast());
1006:       assertFalse(node0.isNot());
1007:       assertFalse(node0.isDebugger());
1008:       assertFalse(node0.isAnd());
1009:       assertFalse(node0.isWhile());
1010:       assertFalse(node0.isObjectLit());
1011:       assertFalse(node0.isGetProp());
1012:       assertFalse(node0.isBreak());
1013:       assertFalse(node0.isComma());
1014:       assertFalse(node0.isThrow());
1015:       assertFalse(node0.isThis());
1016:       assertEquals(479349, node0.getSourcePosition());
1017:       assertFalse(node0.isHook());
1018:       assertFalse(node0.isFalse());
1019:       assertFalse(node0.isInstanceOf());
1020:       assertEquals(117, node0.getLineno());
1021:       assertFalse(node0.isIn());
1022:       assertFalse(node0.isInc());
1023:       assertFalse(node0.isGetterDef());
1024:       assertFalse(node0.isIf());
1025:       assertFalse(node0.isNumber());
1026:       assertFalse(node0.isLabelName());
1027:       assertFalse(node0.isAssignAdd());
1028:       assertFalse(node0.isFor());
1029:       assertFalse(node0.isNE());
1030:       assertFalse(node0.isLabel());
1031:       assertFalse(node0.isArrayLit());
1032:       assertFalse(node0.hasMoreThanOneChild());
1033:       assertFalse(node0.isWith());
1034:       assertFalse(node0.isRegExp());
1035:       assertFalse(node0.isCase());
1036:       assertFalse(node0.isBlock());
1037:       assertTrue(node0.isString());
1038:       assertFalse(node0.isSwitch());
1039:       assertFalse(node0.isTry());
1040:       assertFalse(node0.hasOneChild());
1041:       assertFalse(node0.isScript());
1042:       assertFalse(node1.isIn());
1043:       assertTrue(node1.hasChildren());
1044:       assertEquals(49, node1.getType());
1045:       assertFalse(node1.isCase());
1046:       assertFalse(node1.isIf());
1047:       assertFalse(node1.isGetterDef());
1048:       assertFalse(node1.isDelProp());
1049:       assertFalse(node1.isSwitch());
1050:       assertFalse(node1.isNE());
1051:       assertFalse(node1.isString());
1052:       assertEquals((-1), node1.getCharno());
1053:       assertFalse(node1.isEmpty());
1054:       assertFalse(node1.isInc());
1055:       assertFalse(node1.isArrayLit());
1056:       assertFalse(node1.isDefaultCase());
1057:       assertFalse(node1.isFunction());
1058:       assertFalse(node1.isFalse());
1059:       assertFalse(node1.isAnd());
1060:       assertFalse(node1.isGetProp());
1061:       assertFalse(node1.isNull());
1062:       assertFalse(node1.isTrue());
1063:       assertFalse(node1.isObjectLit());
1064:       assertFalse(node1.isNot());
1065:       assertFalse(node1.isDebugger());
1066:       assertFalse(node1.isGetElem());
1067:       assertFalse(node1.isCall());
1068:       assertFalse(node1.isName());
1069:       assertFalse(node1.isExprResult());
1070:       assertFalse(node1.isVoid());
1071:       assertFalse(node1.isBreak());
1072:       assertFalse(node1.isDec());
1073:       assertFalse(node1.isTypeOf());
1074:       assertFalse(node1.isWhile());
1075:       assertTrue(node1.hasOneChild());
1076:       assertFalse(node1.isComma());
1077:       assertFalse(node1.isAssign());
1078:       assertFalse(node1.isReturn());
1079:       assertFalse(node1.hasMoreThanOneChild());
1080:       assertFalse(node1.isAssignAdd());
1081:       assertFalse(node1.isContinue());
1082:       assertFalse(node1.isDo());
1083:       assertEquals((-1), node1.getLineno());
1084:       assertFalse(node1.isNumber());
1085:       assertFalse(node1.isOr());
1086:       assertEquals((-1), node1.getSourcePosition());
1087:       assertFalse(node1.isVar());
1088:       assertFalse(node1.isCast());
1089:       assertFalse(node1.isAdd());
1090:       assertFalse(node1.isLabelName());
1091:       assertFalse(node1.isNew());
1092:       assertTrue(node1.isThrow());
1093:       assertFalse(node1.isLabel());
1094:       assertFalse(node1.isInstanceOf());
1095:       assertFalse(node1.isCatch());
1096:       assertFalse(node1.isSetterDef());
1097:       assertFalse(node1.isScript());
1098:       assertFalse(node1.isParamList());
1099:       assertFalse(node1.isStringKey());
1100:       assertFalse(node1.isHook());
1101:       assertFalse(node1.isTry());
1102:       assertFalse(node1.isRegExp());
1103:       assertFalse(node1.isWith());
1104:       assertFalse(node1.isFor());
1105:       assertFalse(node1.isBlock());
1106:       assertFalse(node1.isThis());
1107:       assertEquals(1, node1.getChildCount());
1108:       assertFalse(boolean2);
1109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1110:       assertEquals(50, Node.FREE_CALL);
1111:       assertEquals(40, Node.ORIGINALNAME_PROP);
1112:       assertEquals(39, Node.EMPTY_BLOCK);
1113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1114:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1115:       assertEquals(57, Node.LAST_PROP);
1116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1117:       assertEquals(49, Node.DIRECT_EVAL);
1118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1119:       assertEquals(4095, Node.COLUMN_MASK);
1120:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1121:       assertEquals(55, Node.INFERRED_FUNCTION);
1122:       assertEquals(52, Node.LENGTH);
1123:       assertEquals(37, Node.OPT_ARG_NAME);
1124:       assertEquals(8, Node.FLAG_NO_THROWS);
1125:       assertEquals(48, Node.DIRECTIVES);
1126:       assertEquals(56, Node.CHANGE_TIME);
1127:       assertEquals(36, Node.QUOTED_PROP);
1128:       assertEquals(57, Node.REFLECTED_OBJECT);
1129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1130:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1131:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1133:       assertEquals(29, Node.JSDOC_INFO_PROP);
1134:       assertEquals(53, Node.INPUT_ID);
1135:       assertEquals(32, Node.INCRDECR_PROP);
1136:       assertEquals(2, Node.POST_FLAG);
1137:       assertEquals(12, Node.COLUMN_BITS);
1138:       assertEquals(47, Node.IS_DISPATCHER);
1139:       assertEquals(30, Node.VAR_ARGS_NAME);
1140:       assertEquals(1, Node.DECR_FLAG);
1141:       assertEquals(43, Node.IS_CONSTANT_NAME);
1142:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1143:       assertEquals(46, Node.IS_NAMESPACE);
1144:       assertEquals(54, Node.SLASH_V);
1145:       assertEquals(46, Node.IS_NAMESPACE);
1146:       assertEquals(2, Node.POST_FLAG);
1147:       assertEquals(12, Node.COLUMN_BITS);
1148:       assertEquals(47, Node.IS_DISPATCHER);
1149:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1150:       assertEquals(49, Node.DIRECT_EVAL);
1151:       assertEquals(56, Node.CHANGE_TIME);
1152:       assertEquals(37, Node.OPT_ARG_NAME);
1153:       assertEquals(52, Node.LENGTH);
1154:       assertEquals(53, Node.INPUT_ID);
1155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1156:       assertEquals(57, Node.REFLECTED_OBJECT);
1157:       assertEquals(30, Node.VAR_ARGS_NAME);
1158:       assertEquals(36, Node.QUOTED_PROP);
1159:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1160:       assertEquals(29, Node.JSDOC_INFO_PROP);
1161:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1162:       assertEquals(57, Node.LAST_PROP);
1163:       assertEquals(55, Node.INFERRED_FUNCTION);
1164:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1165:       assertEquals(39, Node.EMPTY_BLOCK);
1166:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1167:       assertEquals(4095, Node.COLUMN_MASK);
1168:       assertEquals(8, Node.FLAG_NO_THROWS);
1169:       assertEquals(40, Node.ORIGINALNAME_PROP);
1170:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1171:       assertEquals(43, Node.IS_CONSTANT_NAME);
1172:       assertEquals(48, Node.DIRECTIVES);
1173:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1174:       assertEquals(54, Node.SLASH_V);
1175:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1176:       assertEquals(50, Node.FREE_CALL);
1177:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1178:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1179:       assertEquals(32, Node.INCRDECR_PROP);
1180:       assertEquals(1, Node.DECR_FLAG);
1181:       assertNotSame(node0, node2);
1182:       
1183:       boolean boolean3 = node2.isVoid();
1184:       assertFalse(node2.equals((Object)node0));
1185:       assertFalse(node2.equals((Object)node1));
1186:       assertTrue(boolean3 == boolean1);
1187:       assertTrue(boolean3 == boolean2);
1188:       assertTrue(boolean3 == boolean0);
1189:       assertFalse(node2.isThrow());
1190:       assertFalse(node2.isHook());
1191:       assertFalse(node2.isComma());
1192:       assertFalse(node2.isBreak());
1193:       assertFalse(node2.isThis());
1194:       assertFalse(node2.isFalse());
1195:       assertFalse(node2.isCase());
1196:       assertFalse(node2.isAnd());
1197:       assertFalse(node2.isScript());
1198:       assertFalse(node2.isSwitch());
1199:       assertEquals((-1), node2.getCharno());
1200:       assertFalse(node2.isGetProp());
1201:       assertFalse(node2.isNot());
1202:       assertFalse(node2.isGetterDef());
1203:       assertFalse(node2.isObjectLit());
1204:       assertFalse(node2.isCast());
1205:       assertFalse(node2.hasOneChild());
1206:       assertFalse(node2.isFor());
1207:       assertFalse(node2.isTry());
1208:       assertFalse(node2.isIf());
1209:       assertFalse(node2.isWith());
1210:       assertFalse(node2.isRegExp());
1211:       assertFalse(node2.isFunction());
1212:       assertFalse(node2.hasMoreThanOneChild());
1213:       assertFalse(node2.isCatch());
1214:       assertFalse(node2.isInstanceOf());
1215:       assertEquals(40, node2.getType());
1216:       assertEquals((-1), node2.getLineno());
1217:       assertFalse(node2.isNE());
1218:       assertFalse(node2.isSetterDef());
1219:       assertFalse(node2.isInc());
1220:       assertFalse(node2.isIn());
1221:       assertFalse(node2.isVar());
1222:       assertFalse(node2.isCall());
1223:       assertFalse(node2.isStringKey());
1224:       assertFalse(node2.isNew());
1225:       assertFalse(node2.isName());
1226:       assertTrue(node2.isString());
1227:       assertFalse(node2.isBlock());
1228:       assertFalse(node2.isContinue());
1229:       assertEquals(0, node2.getChildCount());
1230:       assertFalse(node2.isReturn());
1231:       assertFalse(node2.isWhile());
1232:       assertFalse(node2.isParamList());
1233:       assertEquals((-1), node2.getSourcePosition());
1234:       assertFalse(node2.isDebugger());
1235:       assertFalse(node2.isNumber());
1236:       assertFalse(node2.isArrayLit());
1237:       assertFalse(node2.isGetElem());
1238:       assertFalse(node2.isLabelName());
1239:       assertFalse(node2.isVoid());
1240:       assertFalse(node2.isDelProp());
1241:       assertFalse(node2.isDec());
1242:       assertFalse(node2.hasChildren());
1243:       assertFalse(node2.isExprResult());
1244:       assertFalse(node2.isLabel());
1245:       assertFalse(node2.isAssign());
1246:       assertFalse(node2.isTypeOf());
1247:       assertFalse(node2.isAssignAdd());
1248:       assertFalse(node2.isDo());
1249:       assertFalse(node2.isDefaultCase());
1250:       assertFalse(node2.isNull());
1251:       assertFalse(node2.isTrue());
1252:       assertFalse(node2.isOr());
1253:       assertFalse(node2.isAdd());
1254:       assertFalse(node2.isEmpty());
1255:       assertFalse(boolean3);
1256:       assertEquals(57, Node.REFLECTED_OBJECT);
1257:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1258:       assertEquals(40, Node.ORIGINALNAME_PROP);
1259:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1260:       assertEquals(52, Node.LENGTH);
1261:       assertEquals(30, Node.VAR_ARGS_NAME);
1262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1263:       assertEquals(39, Node.EMPTY_BLOCK);
1264:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1265:       assertEquals(1, Node.DECR_FLAG);
1266:       assertEquals(57, Node.LAST_PROP);
1267:       assertEquals(32, Node.INCRDECR_PROP);
1268:       assertEquals(46, Node.IS_NAMESPACE);
1269:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1270:       assertEquals(2, Node.POST_FLAG);
1271:       assertEquals(50, Node.FREE_CALL);
1272:       assertEquals(54, Node.SLASH_V);
1273:       assertEquals(43, Node.IS_CONSTANT_NAME);
1274:       assertEquals(53, Node.INPUT_ID);
1275:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1276:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1277:       assertEquals(29, Node.JSDOC_INFO_PROP);
1278:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1279:       assertEquals(47, Node.IS_DISPATCHER);
1280:       assertEquals(12, Node.COLUMN_BITS);
1281:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1282:       assertEquals(55, Node.INFERRED_FUNCTION);
1283:       assertEquals(4095, Node.COLUMN_MASK);
1284:       assertEquals(8, Node.FLAG_NO_THROWS);
1285:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1286:       assertEquals(49, Node.DIRECT_EVAL);
1287:       assertEquals(36, Node.QUOTED_PROP);
1288:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1289:       assertEquals(37, Node.OPT_ARG_NAME);
1290:       assertEquals(48, Node.DIRECTIVES);
1291:       assertEquals(56, Node.CHANGE_TIME);
1292:       assertNotSame(node2, node0);
1293:       
1294:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3157);
1295:       assertEquals(3157, node_SideEffectFlags0.valueOf());
1296:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1297:       assertNotNull(node_SideEffectFlags0);
1298:       
1299:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
1300:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1301:       assertEquals(0, node_SideEffectFlags0.valueOf());
1302:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1303:       assertEquals(0, node_SideEffectFlags1.valueOf());
1304:       assertNotNull(node_SideEffectFlags1);
1305:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1306:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1307:       
1308:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
1309:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1310:       assertEquals(0, node_SideEffectFlags0.valueOf());
1311:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1312:       assertEquals(0, node_SideEffectFlags2.valueOf());
1313:       assertNotNull(node_SideEffectFlags2);
1314:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1315:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1316:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1317:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1318:       
1319:       int int0 = node_SideEffectFlags0.valueOf();
1320:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1321:       assertEquals(0, node_SideEffectFlags0.valueOf());
1322:       assertEquals(0, int0);
1323:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1324:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1325:       
1326:       Node node3 = Node.newString(",");
1327:       assertFalse(node3.equals((Object)node0));
1328:       assertFalse(node3.equals((Object)node2));
1329:       assertFalse(node3.equals((Object)node1));
1330:       assertFalse(node3.isCase());
1331:       assertFalse(node3.isIn());
1332:       assertEquals((-1), node3.getCharno());
1333:       assertFalse(node3.isNE());
1334:       assertFalse(node3.isSwitch());
1335:       assertFalse(node3.isIf());
1336:       assertFalse(node3.isDelProp());
1337:       assertFalse(node3.isFor());
1338:       assertFalse(node3.isHook());
1339:       assertFalse(node3.isGetterDef());
1340:       assertFalse(node3.isComma());
1341:       assertFalse(node3.isGetProp());
1342:       assertFalse(node3.isThis());
1343:       assertFalse(node3.isTry());
1344:       assertEquals(40, node3.getType());
1345:       assertFalse(node3.isWith());
1346:       assertFalse(node3.isAnd());
1347:       assertFalse(node3.isCatch());
1348:       assertFalse(node3.isRegExp());
1349:       assertFalse(node3.isDebugger());
1350:       assertFalse(node3.isFunction());
1351:       assertFalse(node3.isObjectLit());
1352:       assertFalse(node3.isNot());
1353:       assertFalse(node3.isInstanceOf());
1354:       assertFalse(node3.isFalse());
1355:       assertFalse(node3.isThrow());
1356:       assertFalse(node3.isCast());
1357:       assertFalse(node3.isInc());
1358:       assertFalse(node3.isSetterDef());
1359:       assertFalse(node3.isContinue());
1360:       assertFalse(node3.isWhile());
1361:       assertFalse(node3.hasMoreThanOneChild());
1362:       assertFalse(node3.isOr());
1363:       assertEquals((-1), node3.getLineno());
1364:       assertFalse(node3.isLabelName());
1365:       assertFalse(node3.isGetElem());
1366:       assertFalse(node3.isCall());
1367:       assertFalse(node3.isStringKey());
1368:       assertEquals((-1), node3.getSourcePosition());
1369:       assertFalse(node3.isTypeOf());
1370:       assertFalse(node3.isNumber());
1371:       assertFalse(node3.hasChildren());
1372:       assertFalse(node3.isDec());
1373:       assertFalse(node3.isAssign());
1374:       assertFalse(node3.isBlock());
1375:       assertTrue(node3.isString());
1376:       assertFalse(node3.isReturn());
1377:       assertFalse(node3.isScript());
1378:       assertFalse(node3.hasOneChild());
1379:       assertEquals(0, node3.getChildCount());
1380:       assertFalse(node3.isParamList());
1381:       assertFalse(node3.isExprResult());
1382:       assertFalse(node3.isTrue());
1383:       assertFalse(node3.isArrayLit());
1384:       assertFalse(node3.isBreak());
1385:       assertFalse(node3.isVoid());
1386:       assertFalse(node3.isName());
1387:       assertFalse(node3.isVar());
1388:       assertFalse(node3.isEmpty());
1389:       assertFalse(node3.isNull());
1390:       assertFalse(node3.isAdd());
1391:       assertFalse(node3.isNew());
1392:       assertFalse(node3.isLabel());
1393:       assertFalse(node3.isAssignAdd());
1394:       assertFalse(node3.isDefaultCase());
1395:       assertFalse(node3.isDo());
1396:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1397:       assertEquals(12, Node.COLUMN_BITS);
1398:       assertEquals(46, Node.IS_NAMESPACE);
1399:       assertEquals(57, Node.LAST_PROP);
1400:       assertEquals(1, Node.DECR_FLAG);
1401:       assertEquals(49, Node.DIRECT_EVAL);
1402:       assertEquals(32, Node.INCRDECR_PROP);
1403:       assertEquals(2, Node.POST_FLAG);
1404:       assertEquals(37, Node.OPT_ARG_NAME);
1405:       assertEquals(47, Node.IS_DISPATCHER);
1406:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1407:       assertEquals(30, Node.VAR_ARGS_NAME);
1408:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1409:       assertEquals(40, Node.ORIGINALNAME_PROP);
1410:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1411:       assertEquals(43, Node.IS_CONSTANT_NAME);
1412:       assertEquals(54, Node.SLASH_V);
1413:       assertEquals(50, Node.FREE_CALL);
1414:       assertEquals(55, Node.INFERRED_FUNCTION);
1415:       assertEquals(4095, Node.COLUMN_MASK);
1416:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1417:       assertEquals(48, Node.DIRECTIVES);
1418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1419:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1421:       assertEquals(57, Node.REFLECTED_OBJECT);
1422:       assertEquals(29, Node.JSDOC_INFO_PROP);
1423:       assertEquals(8, Node.FLAG_NO_THROWS);
1424:       assertEquals(39, Node.EMPTY_BLOCK);
1425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1426:       assertEquals(36, Node.QUOTED_PROP);
1427:       assertEquals(56, Node.CHANGE_TIME);
1428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1429:       assertEquals(53, Node.INPUT_ID);
1430:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1431:       assertEquals(52, Node.LENGTH);
1432:       assertNotNull(node3);
1433:       assertNotSame(node3, node0);
1434:       assertNotSame(node3, node2);
1435:       
1436:       boolean boolean4 = node1.isStringKey();
1437:       assertFalse(node0.equals((Object)node3));
1438:       assertFalse(node0.equals((Object)node2));
1439:       assertFalse(node0.equals((Object)node1));
1440:       assertFalse(node1.equals((Object)node0));
1441:       assertFalse(node1.equals((Object)node3));
1442:       assertFalse(node1.equals((Object)node2));
1443:       assertTrue(boolean4 == boolean1);
1444:       assertTrue(boolean4 == boolean2);
1445:       assertTrue(boolean4 == boolean0);
1446:       assertTrue(boolean4 == boolean3);
1447:       assertFalse(node0.isNull());
1448:       assertEquals(117, node0.getCharno());
1449:       assertFalse(node0.isName());
1450:       assertFalse(node0.isVar());
1451:       assertFalse(node0.isStringKey());
1452:       assertFalse(node0.isParamList());
1453:       assertEquals(0, node0.getChildCount());
1454:       assertFalse(node0.isCall());
1455:       assertFalse(node0.isCatch());
1456:       assertFalse(node0.isDefaultCase());
1457:       assertFalse(node0.isDo());
1458:       assertFalse(node0.isVoid());
1459:       assertEquals(40, node0.getType());
1460:       assertFalse(node0.isTrue());
1461:       assertFalse(node0.isOr());
1462:       assertFalse(node0.isNew());
1463:       assertFalse(node0.isSetterDef());
1464:       assertFalse(node0.isAdd());
1465:       assertFalse(node0.isEmpty());
1466:       assertFalse(node0.isDelProp());
1467:       assertFalse(node0.hasChildren());
1468:       assertFalse(node0.isTypeOf());
1469:       assertFalse(node0.isAssign());
1470:       assertFalse(node0.isDec());
1471:       assertFalse(node0.isReturn());
1472:       assertFalse(node0.isContinue());
1473:       assertFalse(node0.isExprResult());
1474:       assertFalse(node0.isFunction());
1475:       assertFalse(node0.isGetElem());
1476:       assertFalse(node0.isCast());
1477:       assertFalse(node0.isNot());
1478:       assertFalse(node0.isDebugger());
1479:       assertFalse(node0.isAnd());
1480:       assertFalse(node0.isWhile());
1481:       assertFalse(node0.isObjectLit());
1482:       assertFalse(node0.isGetProp());
1483:       assertFalse(node0.isBreak());
1484:       assertFalse(node0.isComma());
1485:       assertFalse(node0.isThrow());
1486:       assertFalse(node0.isThis());
1487:       assertEquals(479349, node0.getSourcePosition());
1488:       assertFalse(node0.isHook());
1489:       assertFalse(node0.isFalse());
1490:       assertFalse(node0.isInstanceOf());
1491:       assertEquals(117, node0.getLineno());
1492:       assertFalse(node0.isIn());
1493:       assertFalse(node0.isInc());
1494:       assertFalse(node0.isGetterDef());
1495:       assertFalse(node0.isIf());
1496:       assertFalse(node0.isNumber());
1497:       assertFalse(node0.isLabelName());
1498:       assertFalse(node0.isAssignAdd());
1499:       assertFalse(node0.isFor());
1500:       assertFalse(node0.isNE());
1501:       assertFalse(node0.isLabel());
1502:       assertFalse(node0.isArrayLit());
1503:       assertFalse(node0.hasMoreThanOneChild());
1504:       assertFalse(node0.isWith());
1505:       assertFalse(node0.isRegExp());
1506:       assertFalse(node0.isCase());
1507:       assertFalse(node0.isBlock());
1508:       assertTrue(node0.isString());
1509:       assertFalse(node0.isSwitch());
1510:       assertFalse(node0.isTry());
1511:       assertFalse(node0.hasOneChild());
1512:       assertFalse(node0.isScript());
1513:       assertFalse(node1.isIn());
1514:       assertTrue(node1.hasChildren());
1515:       assertEquals(49, node1.getType());
1516:       assertFalse(node1.isCase());
1517:       assertFalse(node1.isIf());
1518:       assertFalse(node1.isGetterDef());
1519:       assertFalse(node1.isDelProp());
1520:       assertFalse(node1.isSwitch());
1521:       assertFalse(node1.isNE());
1522:       assertFalse(node1.isString());
1523:       assertEquals((-1), node1.getCharno());
1524:       assertFalse(node1.isEmpty());
1525:       assertFalse(node1.isInc());
1526:       assertFalse(node1.isArrayLit());
1527:       assertFalse(node1.isDefaultCase());
1528:       assertFalse(node1.isFunction());
1529:       assertFalse(node1.isFalse());
1530:       assertFalse(node1.isAnd());
1531:       assertFalse(node1.isGetProp());
1532:       assertFalse(node1.isNull());
1533:       assertFalse(node1.isTrue());
1534:       assertFalse(node1.isObjectLit());
1535:       assertFalse(node1.isNot());
1536:       assertFalse(node1.isDebugger());
1537:       assertFalse(node1.isGetElem());
1538:       assertFalse(node1.isCall());
1539:       assertFalse(node1.isName());
1540:       assertFalse(node1.isExprResult());
1541:       assertFalse(node1.isVoid());
1542:       assertFalse(node1.isBreak());
1543:       assertFalse(node1.isDec());
1544:       assertFalse(node1.isTypeOf());
1545:       assertFalse(node1.isWhile());
1546:       assertTrue(node1.hasOneChild());
1547:       assertFalse(node1.isComma());
1548:       assertFalse(node1.isAssign());
1549:       assertFalse(node1.isReturn());
1550:       assertFalse(node1.hasMoreThanOneChild());
1551:       assertFalse(node1.isAssignAdd());
1552:       assertFalse(node1.isContinue());
1553:       assertFalse(node1.isDo());
1554:       assertEquals((-1), node1.getLineno());
1555:       assertFalse(node1.isNumber());
1556:       assertFalse(node1.isOr());
1557:       assertEquals((-1), node1.getSourcePosition());
1558:       assertFalse(node1.isVar());
1559:       assertFalse(node1.isCast());
1560:       assertFalse(node1.isAdd());
1561:       assertFalse(node1.isLabelName());
1562:       assertFalse(node1.isNew());
1563:       assertTrue(node1.isThrow());
1564:       assertFalse(node1.isLabel());
1565:       assertFalse(node1.isInstanceOf());
1566:       assertFalse(node1.isCatch());
1567:       assertFalse(node1.isSetterDef());
1568:       assertFalse(node1.isScript());
1569:       assertFalse(node1.isParamList());
1570:       assertFalse(node1.isStringKey());
1571:       assertFalse(node1.isHook());
1572:       assertFalse(node1.isTry());
1573:       assertFalse(node1.isRegExp());
1574:       assertFalse(node1.isWith());
1575:       assertFalse(node1.isFor());
1576:       assertFalse(node1.isBlock());
1577:       assertFalse(node1.isThis());
1578:       assertEquals(1, node1.getChildCount());
1579:       assertFalse(boolean4);
1580:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1581:       assertEquals(50, Node.FREE_CALL);
1582:       assertEquals(40, Node.ORIGINALNAME_PROP);
1583:       assertEquals(39, Node.EMPTY_BLOCK);
1584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1585:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1586:       assertEquals(57, Node.LAST_PROP);
1587:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1588:       assertEquals(49, Node.DIRECT_EVAL);
1589:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1590:       assertEquals(4095, Node.COLUMN_MASK);
1591:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1592:       assertEquals(55, Node.INFERRED_FUNCTION);
1593:       assertEquals(52, Node.LENGTH);
1594:       assertEquals(37, Node.OPT_ARG_NAME);
1595:       assertEquals(8, Node.FLAG_NO_THROWS);
1596:       assertEquals(48, Node.DIRECTIVES);
1597:       assertEquals(56, Node.CHANGE_TIME);
1598:       assertEquals(36, Node.QUOTED_PROP);
1599:       assertEquals(57, Node.REFLECTED_OBJECT);
1600:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1601:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1602:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1603:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1604:       assertEquals(29, Node.JSDOC_INFO_PROP);
1605:       assertEquals(53, Node.INPUT_ID);
1606:       assertEquals(32, Node.INCRDECR_PROP);
1607:       assertEquals(2, Node.POST_FLAG);
1608:       assertEquals(12, Node.COLUMN_BITS);
1609:       assertEquals(47, Node.IS_DISPATCHER);
1610:       assertEquals(30, Node.VAR_ARGS_NAME);
1611:       assertEquals(1, Node.DECR_FLAG);
1612:       assertEquals(43, Node.IS_CONSTANT_NAME);
1613:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1614:       assertEquals(46, Node.IS_NAMESPACE);
1615:       assertEquals(54, Node.SLASH_V);
1616:       assertEquals(46, Node.IS_NAMESPACE);
1617:       assertEquals(2, Node.POST_FLAG);
1618:       assertEquals(12, Node.COLUMN_BITS);
1619:       assertEquals(47, Node.IS_DISPATCHER);
1620:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1621:       assertEquals(49, Node.DIRECT_EVAL);
1622:       assertEquals(56, Node.CHANGE_TIME);
1623:       assertEquals(37, Node.OPT_ARG_NAME);
1624:       assertEquals(52, Node.LENGTH);
1625:       assertEquals(53, Node.INPUT_ID);
1626:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1627:       assertEquals(57, Node.REFLECTED_OBJECT);
1628:       assertEquals(30, Node.VAR_ARGS_NAME);
1629:       assertEquals(36, Node.QUOTED_PROP);
1630:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1631:       assertEquals(29, Node.JSDOC_INFO_PROP);
1632:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1633:       assertEquals(57, Node.LAST_PROP);
1634:       assertEquals(55, Node.INFERRED_FUNCTION);
1635:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1636:       assertEquals(39, Node.EMPTY_BLOCK);
1637:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1638:       assertEquals(4095, Node.COLUMN_MASK);
1639:       assertEquals(8, Node.FLAG_NO_THROWS);
1640:       assertEquals(40, Node.ORIGINALNAME_PROP);
1641:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1642:       assertEquals(43, Node.IS_CONSTANT_NAME);
1643:       assertEquals(48, Node.DIRECTIVES);
1644:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1645:       assertEquals(54, Node.SLASH_V);
1646:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1647:       assertEquals(50, Node.FREE_CALL);
1648:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1649:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1650:       assertEquals(32, Node.INCRDECR_PROP);
1651:       assertEquals(1, Node.DECR_FLAG);
1652:       assertNotSame(node0, node3);
1653:       assertNotSame(node0, node2);
1654:       
1655:       Node node4 = node1.copyInformationFromForTree(node2);
1656:       assertFalse(node0.equals((Object)node3));
1657:       assertFalse(node0.equals((Object)node2));
1658:       assertFalse(node0.equals((Object)node1));
1659:       assertFalse(node1.equals((Object)node0));
1660:       assertFalse(node1.equals((Object)node3));
1661:       assertFalse(node1.equals((Object)node2));
1662:       assertFalse(node2.equals((Object)node3));
1663:       assertFalse(node2.equals((Object)node0));
1664:       assertFalse(node2.equals((Object)node1));
1665:       assertFalse(node4.equals((Object)node3));
1666:       assertFalse(node4.equals((Object)node2));
1667:       assertFalse(node4.equals((Object)node0));
1668:       assertFalse(node0.isNull());
1669:       assertFalse(node0.isName());
1670:       assertFalse(node0.isVar());
1671:       assertFalse(node0.isStringKey());
1672:       assertFalse(node0.isParamList());
1673:       assertEquals(0, node0.getChildCount());
1674:       assertFalse(node0.isCall());
1675:       assertFalse(node0.isCatch());
1676:       assertFalse(node0.isDefaultCase());
1677:       assertFalse(node0.isDo());
1678:       assertFalse(node0.isVoid());
1679:       assertEquals(40, node0.getType());
1680:       assertFalse(node0.isTrue());
1681:       assertFalse(node0.isOr());
1682:       assertFalse(node0.isNew());
1683:       assertFalse(node0.isSetterDef());
1684:       assertFalse(node0.isAdd());
1685:       assertFalse(node0.isEmpty());
1686:       assertFalse(node0.isDelProp());
1687:       assertFalse(node0.hasChildren());
1688:       assertFalse(node0.isTypeOf());
1689:       assertFalse(node0.isAssign());
1690:       assertEquals((-1), node0.getSourcePosition());
1691:       assertFalse(node0.isDec());
1692:       assertFalse(node0.isReturn());
1693:       assertFalse(node0.isContinue());
1694:       assertFalse(node0.isExprResult());
1695:       assertFalse(node0.isFunction());
1696:       assertFalse(node0.isGetElem());
1697:       assertFalse(node0.isCast());
1698:       assertFalse(node0.isNot());
1699:       assertFalse(node0.isDebugger());
1700:       assertFalse(node0.isAnd());
1701:       assertFalse(node0.isWhile());
1702:       assertFalse(node0.isObjectLit());
1703:       assertFalse(node0.isGetProp());
1704:       assertFalse(node0.isBreak());
1705:       assertFalse(node0.isComma());
1706:       assertFalse(node0.isThrow());
1707:       assertFalse(node0.isThis());
1708:       assertFalse(node0.isHook());
1709:       assertFalse(node0.isFalse());
1710:       assertFalse(node0.isInstanceOf());
1711:       assertFalse(node0.isIn());
1712:       assertFalse(node0.isInc());
1713:       assertFalse(node0.isGetterDef());
1714:       assertFalse(node0.isIf());
1715:       assertFalse(node0.isNumber());
1716:       assertFalse(node0.isLabelName());
1717:       assertFalse(node0.isAssignAdd());
1718:       assertFalse(node0.isFor());
1719:       assertFalse(node0.isNE());
1720:       assertFalse(node0.isLabel());
1721:       assertFalse(node0.isArrayLit());
1722:       assertEquals((-1), node0.getLineno());
1723:       assertFalse(node0.hasMoreThanOneChild());
1724:       assertFalse(node0.isWith());
1725:       assertFalse(node0.isRegExp());
1726:       assertFalse(node0.isCase());
1727:       assertEquals((-1), node0.getCharno());
1728:       assertFalse(node0.isBlock());
1729:       assertTrue(node0.isString());
1730:       assertFalse(node0.isSwitch());
1731:       assertFalse(node0.isTry());
1732:       assertFalse(node0.hasOneChild());
1733:       assertFalse(node0.isScript());
1734:       assertFalse(node1.isIn());
1735:       assertTrue(node1.hasChildren());
1736:       assertEquals(49, node1.getType());
1737:       assertFalse(node1.isCase());
1738:       assertFalse(node1.isIf());
1739:       assertFalse(node1.isGetterDef());
1740:       assertFalse(node1.isDelProp());
1741:       assertFalse(node1.isSwitch());
1742:       assertFalse(node1.isNE());
1743:       assertFalse(node1.isString());
1744:       assertEquals((-1), node1.getCharno());
1745:       assertFalse(node1.isEmpty());
1746:       assertFalse(node1.isInc());
1747:       assertFalse(node1.isArrayLit());
1748:       assertFalse(node1.isDefaultCase());
1749:       assertFalse(node1.isFunction());
1750:       assertFalse(node1.isFalse());
1751:       assertFalse(node1.isAnd());
1752:       assertFalse(node1.isGetProp());
1753:       assertFalse(node1.isNull());
1754:       assertFalse(node1.isTrue());
1755:       assertFalse(node1.isObjectLit());
1756:       assertFalse(node1.isNot());
1757:       assertFalse(node1.isDebugger());
1758:       assertFalse(node1.isGetElem());
1759:       assertFalse(node1.isCall());
1760:       assertFalse(node1.isName());
1761:       assertFalse(node1.isExprResult());
1762:       assertFalse(node1.isVoid());
1763:       assertFalse(node1.isBreak());
1764:       assertFalse(node1.isDec());
1765:       assertFalse(node1.isTypeOf());
1766:       assertFalse(node1.isWhile());
1767:       assertTrue(node1.hasOneChild());
1768:       assertFalse(node1.isComma());
1769:       assertFalse(node1.isAssign());
1770:       assertFalse(node1.isReturn());
1771:       assertFalse(node1.hasMoreThanOneChild());
1772:       assertFalse(node1.isAssignAdd());
1773:       assertFalse(node1.isContinue());
1774:       assertFalse(node1.isDo());
1775:       assertEquals((-1), node1.getLineno());
1776:       assertFalse(node1.isNumber());
1777:       assertFalse(node1.isOr());
1778:       assertEquals((-1), node1.getSourcePosition());
1779:       assertFalse(node1.isVar());
1780:       assertFalse(node1.isCast());
1781:       assertFalse(node1.isAdd());
1782:       assertFalse(node1.isLabelName());
1783:       assertFalse(node1.isNew());
1784:       assertTrue(node1.isThrow());
1785:       assertFalse(node1.isLabel());
1786:       assertFalse(node1.isInstanceOf());
1787:       assertFalse(node1.isCatch());
1788:       assertFalse(node1.isSetterDef());
1789:       assertFalse(node1.isScript());
1790:       assertFalse(node1.isParamList());
1791:       assertFalse(node1.isStringKey());
1792:       assertFalse(node1.isHook());
1793:       assertFalse(node1.isTry());
1794:       assertFalse(node1.isRegExp());
1795:       assertFalse(node1.isWith());
1796:       assertFalse(node1.isFor());
1797:       assertFalse(node1.isBlock());
1798:       assertFalse(node1.isThis());
1799:       assertEquals(1, node1.getChildCount());
1800:       assertFalse(node2.isThrow());
1801:       assertFalse(node2.isHook());
1802:       assertFalse(node2.isComma());
1803:       assertFalse(node2.isBreak());
1804:       assertFalse(node2.isThis());
1805:       assertFalse(node2.isFalse());
1806:       assertFalse(node2.isCase());
1807:       assertFalse(node2.isAnd());
1808:       assertFalse(node2.isScript());
1809:       assertFalse(node2.isSwitch());
1810:       assertEquals((-1), node2.getCharno());
1811:       assertFalse(node2.isGetProp());
1812:       assertFalse(node2.isNot());
1813:       assertFalse(node2.isGetterDef());
1814:       assertFalse(node2.isObjectLit());
1815:       assertFalse(node2.isCast());
1816:       assertFalse(node2.hasOneChild());
1817:       assertFalse(node2.isFor());
1818:       assertFalse(node2.isTry());
1819:       assertFalse(node2.isIf());
1820:       assertFalse(node2.isWith());
1821:       assertFalse(node2.isRegExp());
1822:       assertFalse(node2.isFunction());
1823:       assertFalse(node2.hasMoreThanOneChild());
1824:       assertFalse(node2.isCatch());
1825:       assertFalse(node2.isInstanceOf());
1826:       assertEquals(40, node2.getType());
1827:       assertEquals((-1), node2.getLineno());
1828:       assertFalse(node2.isNE());
1829:       assertFalse(node2.isSetterDef());
1830:       assertFalse(node2.isInc());
1831:       assertFalse(node2.isIn());
1832:       assertFalse(node2.isVar());
1833:       assertFalse(node2.isCall());
1834:       assertFalse(node2.isStringKey());
1835:       assertFalse(node2.isNew());
1836:       assertFalse(node2.isName());
1837:       assertTrue(node2.isString());
1838:       assertFalse(node2.isBlock());
1839:       assertFalse(node2.isContinue());
1840:       assertEquals(0, node2.getChildCount());
1841:       assertFalse(node2.isReturn());
1842:       assertFalse(node2.isWhile());
1843:       assertFalse(node2.isParamList());
1844:       assertEquals((-1), node2.getSourcePosition());
1845:       assertFalse(node2.isDebugger());
1846:       assertFalse(node2.isNumber());
1847:       assertFalse(node2.isArrayLit());
1848:       assertFalse(node2.isGetElem());
1849:       assertFalse(node2.isLabelName());
1850:       assertFalse(node2.isVoid());
1851:       assertFalse(node2.isDelProp());
1852:       assertFalse(node2.isDec());
1853:       assertFalse(node2.hasChildren());
1854:       assertFalse(node2.isExprResult());
1855:       assertFalse(node2.isLabel());
1856:       assertFalse(node2.isAssign());
1857:       assertFalse(node2.isTypeOf());
1858:       assertFalse(node2.isAssignAdd());
1859:       assertFalse(node2.isDo());
1860:       assertFalse(node2.isDefaultCase());
1861:       assertFalse(node2.isNull());
1862:       assertFalse(node2.isTrue());
1863:       assertFalse(node2.isOr());
1864:       assertFalse(node2.isAdd());
1865:       assertFalse(node2.isEmpty());
1866:       assertFalse(node4.isFalse());
1867:       assertFalse(node4.isInc());
1868:       assertFalse(node4.isBreak());
1869:       assertFalse(node4.isString());
1870:       assertFalse(node4.isSwitch());
1871:       assertEquals((-1), node4.getCharno());
1872:       assertFalse(node4.isAnd());
1873:       assertFalse(node4.isIn());
1874:       assertFalse(node4.isCast());
1875:       assertFalse(node4.isEmpty());
1876:       assertFalse(node4.isGetElem());
1877:       assertFalse(node4.isExprResult());
1878:       assertEquals((-1), node4.getSourcePosition());
1879:       assertFalse(node4.isVoid());
1880:       assertFalse(node4.isDelProp());
1881:       assertFalse(node4.isOr());
1882:       assertFalse(node4.isNot());
1883:       assertFalse(node4.isTrue());
1884:       assertFalse(node4.isDebugger());
1885:       assertFalse(node4.isObjectLit());
1886:       assertEquals(49, node4.getType());
1887:       assertFalse(node4.isGetProp());
1888:       assertFalse(node4.isTypeOf());
1889:       assertFalse(node4.isDec());
1890:       assertFalse(node4.isComma());
1891:       assertFalse(node4.isWhile());
1892:       assertFalse(node4.isAssign());
1893:       assertTrue(node4.hasOneChild());
1894:       assertFalse(node4.isReturn());
1895:       assertFalse(node4.isVar());
1896:       assertFalse(node4.isName());
1897:       assertFalse(node4.isAdd());
1898:       assertFalse(node4.isNew());
1899:       assertFalse(node4.isCall());
1900:       assertFalse(node4.isNull());
1901:       assertFalse(node4.isParamList());
1902:       assertFalse(node4.isStringKey());
1903:       assertFalse(node4.isContinue());
1904:       assertFalse(node4.isAssignAdd());
1905:       assertFalse(node4.isDo());
1906:       assertFalse(node4.isSetterDef());
1907:       assertFalse(node4.isFunction());
1908:       assertFalse(node4.isDefaultCase());
1909:       assertTrue(node4.isThrow());
1910:       assertFalse(node4.isLabel());
1911:       assertFalse(node4.isArrayLit());
1912:       assertFalse(node4.isLabelName());
1913:       assertFalse(node4.isTry());
1914:       assertFalse(node4.isScript());
1915:       assertFalse(node4.isNE());
1916:       assertFalse(node4.isGetterDef());
1917:       assertFalse(node4.isNumber());
1918:       assertFalse(node4.isIf());
1919:       assertFalse(node4.isInstanceOf());
1920:       assertFalse(node4.isCatch());
1921:       assertFalse(node4.hasMoreThanOneChild());
1922:       assertFalse(node4.isCase());
1923:       assertTrue(node4.hasChildren());
1924:       assertEquals((-1), node4.getLineno());
1925:       assertFalse(node4.isRegExp());
1926:       assertFalse(node4.isWith());
1927:       assertFalse(node4.isFor());
1928:       assertFalse(node4.isBlock());
1929:       assertEquals(1, node4.getChildCount());
1930:       assertFalse(node4.isThis());
1931:       assertFalse(node4.isHook());
1932:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1933:       assertEquals(50, Node.FREE_CALL);
1934:       assertEquals(40, Node.ORIGINALNAME_PROP);
1935:       assertEquals(39, Node.EMPTY_BLOCK);
1936:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1937:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1938:       assertEquals(57, Node.LAST_PROP);
1939:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1940:       assertEquals(49, Node.DIRECT_EVAL);
1941:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1942:       assertEquals(4095, Node.COLUMN_MASK);
1943:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1944:       assertEquals(55, Node.INFERRED_FUNCTION);
1945:       assertEquals(52, Node.LENGTH);
1946:       assertEquals(37, Node.OPT_ARG_NAME);
1947:       assertEquals(8, Node.FLAG_NO_THROWS);
1948:       assertEquals(48, Node.DIRECTIVES);
1949:       assertEquals(56, Node.CHANGE_TIME);
1950:       assertEquals(36, Node.QUOTED_PROP);
1951:       assertEquals(57, Node.REFLECTED_OBJECT);
1952:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1953:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1954:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1955:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1956:       assertEquals(29, Node.JSDOC_INFO_PROP);
1957:       assertEquals(53, Node.INPUT_ID);
1958:       assertEquals(32, Node.INCRDECR_PROP);
1959:       assertEquals(2, Node.POST_FLAG);
1960:       assertEquals(12, Node.COLUMN_BITS);
1961:       assertEquals(47, Node.IS_DISPATCHER);
1962:       assertEquals(30, Node.VAR_ARGS_NAME);
1963:       assertEquals(1, Node.DECR_FLAG);
1964:       assertEquals(43, Node.IS_CONSTANT_NAME);
1965:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1966:       assertEquals(46, Node.IS_NAMESPACE);
1967:       assertEquals(54, Node.SLASH_V);
1968:       assertEquals(46, Node.IS_NAMESPACE);
1969:       assertEquals(2, Node.POST_FLAG);
1970:       assertEquals(12, Node.COLUMN_BITS);
1971:       assertEquals(47, Node.IS_DISPATCHER);
1972:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1973:       assertEquals(49, Node.DIRECT_EVAL);
1974:       assertEquals(56, Node.CHANGE_TIME);
1975:       assertEquals(37, Node.OPT_ARG_NAME);
1976:       assertEquals(52, Node.LENGTH);
1977:       assertEquals(53, Node.INPUT_ID);
1978:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1979:       assertEquals(57, Node.REFLECTED_OBJECT);
1980:       assertEquals(30, Node.VAR_ARGS_NAME);
1981:       assertEquals(36, Node.QUOTED_PROP);
1982:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1983:       assertEquals(29, Node.JSDOC_INFO_PROP);
1984:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1985:       assertEquals(57, Node.LAST_PROP);
1986:       assertEquals(55, Node.INFERRED_FUNCTION);
1987:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1988:       assertEquals(39, Node.EMPTY_BLOCK);
1989:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1990:       assertEquals(4095, Node.COLUMN_MASK);
1991:       assertEquals(8, Node.FLAG_NO_THROWS);
1992:       assertEquals(40, Node.ORIGINALNAME_PROP);
1993:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1994:       assertEquals(43, Node.IS_CONSTANT_NAME);
1995:       assertEquals(48, Node.DIRECTIVES);
1996:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1997:       assertEquals(54, Node.SLASH_V);
1998:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1999:       assertEquals(50, Node.FREE_CALL);
2000:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2001:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2002:       assertEquals(32, Node.INCRDECR_PROP);
2003:       assertEquals(1, Node.DECR_FLAG);
2004:       assertEquals(57, Node.REFLECTED_OBJECT);
2005:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2006:       assertEquals(40, Node.ORIGINALNAME_PROP);
2007:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2008:       assertEquals(52, Node.LENGTH);
2009:       assertEquals(30, Node.VAR_ARGS_NAME);
2010:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2011:       assertEquals(39, Node.EMPTY_BLOCK);
2012:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2013:       assertEquals(1, Node.DECR_FLAG);
2014:       assertEquals(57, Node.LAST_PROP);
2015:       assertEquals(32, Node.INCRDECR_PROP);
2016:       assertEquals(46, Node.IS_NAMESPACE);
2017:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2018:       assertEquals(2, Node.POST_FLAG);
2019:       assertEquals(50, Node.FREE_CALL);
2020:       assertEquals(54, Node.SLASH_V);
2021:       assertEquals(43, Node.IS_CONSTANT_NAME);
2022:       assertEquals(53, Node.INPUT_ID);
2023:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2024:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2025:       assertEquals(29, Node.JSDOC_INFO_PROP);
2026:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2027:       assertEquals(47, Node.IS_DISPATCHER);
2028:       assertEquals(12, Node.COLUMN_BITS);
2029:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2030:       assertEquals(55, Node.INFERRED_FUNCTION);
2031:       assertEquals(4095, Node.COLUMN_MASK);
2032:       assertEquals(8, Node.FLAG_NO_THROWS);
2033:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2034:       assertEquals(49, Node.DIRECT_EVAL);
2035:       assertEquals(36, Node.QUOTED_PROP);
2036:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2037:       assertEquals(37, Node.OPT_ARG_NAME);
2038:       assertEquals(48, Node.DIRECTIVES);
2039:       assertEquals(56, Node.CHANGE_TIME);
2040:       assertEquals(52, Node.LENGTH);
2041:       assertEquals(54, Node.SLASH_V);
2042:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2043:       assertEquals(57, Node.REFLECTED_OBJECT);
2044:       assertEquals(30, Node.VAR_ARGS_NAME);
2045:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2046:       assertEquals(49, Node.DIRECT_EVAL);
2047:       assertEquals(40, Node.ORIGINALNAME_PROP);
2048:       assertEquals(48, Node.DIRECTIVES);
2049:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2050:       assertEquals(8, Node.FLAG_NO_THROWS);
2051:       assertEquals(2, Node.POST_FLAG);
2052:       assertEquals(47, Node.IS_DISPATCHER);
2053:       assertEquals(29, Node.JSDOC_INFO_PROP);
2054:       assertEquals(57, Node.LAST_PROP);
2055:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2056:       assertEquals(55, Node.INFERRED_FUNCTION);
2057:       assertEquals(39, Node.EMPTY_BLOCK);
2058:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2059:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2060:       assertEquals(53, Node.INPUT_ID);
2061:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2062:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2063:       assertEquals(36, Node.QUOTED_PROP);
2064:       assertEquals(43, Node.IS_CONSTANT_NAME);
2065:       assertEquals(56, Node.CHANGE_TIME);
2066:       assertEquals(37, Node.OPT_ARG_NAME);
2067:       assertEquals(32, Node.INCRDECR_PROP);
2068:       assertEquals(46, Node.IS_NAMESPACE);
2069:       assertEquals(4095, Node.COLUMN_MASK);
2070:       assertEquals(12, Node.COLUMN_BITS);
2071:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2072:       assertEquals(50, Node.FREE_CALL);
2073:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2074:       assertEquals(1, Node.DECR_FLAG);
2075:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2076:       assertNotNull(node4);
2077:       assertNotSame(node0, node3);
2078:       assertNotSame(node0, node2);
2079:       assertSame(node1, node4);
2080:       assertNotSame(node2, node3);
2081:       assertNotSame(node2, node0);
2082:       assertSame(node4, node1);
2083:       
2084:       node1.setChangeTime(30);
2085:       assertFalse(node0.equals((Object)node4));
2086:       assertFalse(node0.equals((Object)node3));
2087:       assertFalse(node0.equals((Object)node2));
2088:       assertFalse(node0.equals((Object)node1));
2089:       assertFalse(node1.equals((Object)node0));
2090:       assertFalse(node1.equals((Object)node3));
2091:       assertFalse(node1.equals((Object)node2));
2092:       assertFalse(node0.isNull());
2093:       assertFalse(node0.isName());
2094:       assertFalse(node0.isVar());
2095:       assertFalse(node0.isStringKey());
2096:       assertFalse(node0.isParamList());
2097:       assertEquals(0, node0.getChildCount());
2098:       assertFalse(node0.isCall());
2099:       assertFalse(node0.isCatch());
2100:       assertFalse(node0.isDefaultCase());
2101:       assertFalse(node0.isDo());
2102:       assertFalse(node0.isVoid());
2103:       assertEquals(40, node0.getType());
2104:       assertFalse(node0.isTrue());
2105:       assertFalse(node0.isOr());
2106:       assertFalse(node0.isNew());
2107:       assertFalse(node0.isSetterDef());
2108:       assertFalse(node0.isAdd());
2109:       assertFalse(node0.isEmpty());
2110:       assertFalse(node0.isDelProp());
2111:       assertFalse(node0.hasChildren());
2112:       assertFalse(node0.isTypeOf());
2113:       assertFalse(node0.isAssign());
2114:       assertEquals((-1), node0.getSourcePosition());
2115:       assertFalse(node0.isDec());
2116:       assertFalse(node0.isReturn());
2117:       assertFalse(node0.isContinue());
2118:       assertFalse(node0.isExprResult());
2119:       assertFalse(node0.isFunction());
2120:       assertFalse(node0.isGetElem());
2121:       assertFalse(node0.isCast());
2122:       assertFalse(node0.isNot());
2123:       assertFalse(node0.isDebugger());
2124:       assertFalse(node0.isAnd());
2125:       assertFalse(node0.isWhile());
2126:       assertFalse(node0.isObjectLit());
2127:       assertFalse(node0.isGetProp());
2128:       assertFalse(node0.isBreak());
2129:       assertFalse(node0.isComma());
2130:       assertFalse(node0.isThrow());
2131:       assertFalse(node0.isThis());
2132:       assertFalse(node0.isHook());
2133:       assertFalse(node0.isFalse());
2134:       assertFalse(node0.isInstanceOf());
2135:       assertFalse(node0.isIn());
2136:       assertFalse(node0.isInc());
2137:       assertFalse(node0.isGetterDef());
2138:       assertFalse(node0.isIf());
2139:       assertFalse(node0.isNumber());
2140:       assertFalse(node0.isLabelName());
2141:       assertFalse(node0.isAssignAdd());
2142:       assertFalse(node0.isFor());
2143:       assertFalse(node0.isNE());
2144:       assertFalse(node0.isLabel());
2145:       assertFalse(node0.isArrayLit());
2146:       assertEquals((-1), node0.getLineno());
2147:       assertFalse(node0.hasMoreThanOneChild());
2148:       assertFalse(node0.isWith());
2149:       assertFalse(node0.isRegExp());
2150:       assertFalse(node0.isCase());
2151:       assertEquals((-1), node0.getCharno());
2152:       assertFalse(node0.isBlock());
2153:       assertTrue(node0.isString());
2154:       assertFalse(node0.isSwitch());
2155:       assertFalse(node0.isTry());
2156:       assertFalse(node0.hasOneChild());
2157:       assertFalse(node0.isScript());
2158:       assertFalse(node1.isIn());
2159:       assertTrue(node1.hasChildren());
2160:       assertEquals(49, node1.getType());
2161:       assertFalse(node1.isCase());
2162:       assertFalse(node1.isIf());
2163:       assertFalse(node1.isGetterDef());
2164:       assertFalse(node1.isDelProp());
2165:       assertFalse(node1.isSwitch());
2166:       assertFalse(node1.isNE());
2167:       assertFalse(node1.isString());
2168:       assertEquals((-1), node1.getCharno());
2169:       assertFalse(node1.isEmpty());
2170:       assertFalse(node1.isInc());
2171:       assertFalse(node1.isArrayLit());
2172:       assertFalse(node1.isDefaultCase());
2173:       assertFalse(node1.isFunction());
2174:       assertFalse(node1.isFalse());
2175:       assertFalse(node1.isAnd());
2176:       assertFalse(node1.isGetProp());
2177:       assertFalse(node1.isNull());
2178:       assertFalse(node1.isTrue());
2179:       assertFalse(node1.isObjectLit());
2180:       assertFalse(node1.isNot());
2181:       assertFalse(node1.isDebugger());
2182:       assertFalse(node1.isGetElem());
2183:       assertFalse(node1.isCall());
2184:       assertFalse(node1.isName());
2185:       assertFalse(node1.isExprResult());
2186:       assertFalse(node1.isVoid());
2187:       assertFalse(node1.isBreak());
2188:       assertFalse(node1.isDec());
2189:       assertFalse(node1.isTypeOf());
2190:       assertFalse(node1.isWhile());
2191:       assertTrue(node1.hasOneChild());
2192:       assertFalse(node1.isComma());
2193:       assertFalse(node1.isAssign());
2194:       assertFalse(node1.isReturn());
2195:       assertFalse(node1.hasMoreThanOneChild());
2196:       assertFalse(node1.isAssignAdd());
2197:       assertFalse(node1.isContinue());
2198:       assertFalse(node1.isDo());
2199:       assertEquals((-1), node1.getLineno());
2200:       assertFalse(node1.isNumber());
2201:       assertFalse(node1.isOr());
2202:       assertEquals((-1), node1.getSourcePosition());
2203:       assertFalse(node1.isVar());
2204:       assertFalse(node1.isCast());
2205:       assertFalse(node1.isAdd());
2206:       assertFalse(node1.isLabelName());
2207:       assertFalse(node1.isNew());
2208:       assertTrue(node1.isThrow());
2209:       assertFalse(node1.isLabel());
2210:       assertFalse(node1.isInstanceOf());
2211:       assertFalse(node1.isCatch());
2212:       assertFalse(node1.isSetterDef());
2213:       assertFalse(node1.isScript());
2214:       assertFalse(node1.isParamList());
2215:       assertFalse(node1.isStringKey());
2216:       assertFalse(node1.isHook());
2217:       assertFalse(node1.isTry());
2218:       assertFalse(node1.isRegExp());
2219:       assertFalse(node1.isWith());
2220:       assertFalse(node1.isFor());
2221:       assertFalse(node1.isBlock());
2222:       assertFalse(node1.isThis());
2223:       assertEquals(1, node1.getChildCount());
2224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2225:       assertEquals(50, Node.FREE_CALL);
2226:       assertEquals(40, Node.ORIGINALNAME_PROP);
2227:       assertEquals(39, Node.EMPTY_BLOCK);
2228:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2229:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2230:       assertEquals(57, Node.LAST_PROP);
2231:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2232:       assertEquals(49, Node.DIRECT_EVAL);
2233:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2234:       assertEquals(4095, Node.COLUMN_MASK);
2235:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2236:       assertEquals(55, Node.INFERRED_FUNCTION);
2237:       assertEquals(52, Node.LENGTH);
2238:       assertEquals(37, Node.OPT_ARG_NAME);
2239:       assertEquals(8, Node.FLAG_NO_THROWS);
2240:       assertEquals(48, Node.DIRECTIVES);
2241:       assertEquals(56, Node.CHANGE_TIME);
2242:       assertEquals(36, Node.QUOTED_PROP);
2243:       assertEquals(57, Node.REFLECTED_OBJECT);
2244:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2245:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2246:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2247:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2248:       assertEquals(29, Node.JSDOC_INFO_PROP);
2249:       assertEquals(53, Node.INPUT_ID);
2250:       assertEquals(32, Node.INCRDECR_PROP);
2251:       assertEquals(2, Node.POST_FLAG);
2252:       assertEquals(12, Node.COLUMN_BITS);
2253:       assertEquals(47, Node.IS_DISPATCHER);
2254:       assertEquals(30, Node.VAR_ARGS_NAME);
2255:       assertEquals(1, Node.DECR_FLAG);
2256:       assertEquals(43, Node.IS_CONSTANT_NAME);
2257:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2258:       assertEquals(46, Node.IS_NAMESPACE);
2259:       assertEquals(54, Node.SLASH_V);
2260:       assertEquals(46, Node.IS_NAMESPACE);
2261:       assertEquals(2, Node.POST_FLAG);
2262:       assertEquals(12, Node.COLUMN_BITS);
2263:       assertEquals(47, Node.IS_DISPATCHER);
2264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2265:       assertEquals(49, Node.DIRECT_EVAL);
2266:       assertEquals(56, Node.CHANGE_TIME);
2267:       assertEquals(37, Node.OPT_ARG_NAME);
2268:       assertEquals(52, Node.LENGTH);
2269:       assertEquals(53, Node.INPUT_ID);
2270:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2271:       assertEquals(57, Node.REFLECTED_OBJECT);
2272:       assertEquals(30, Node.VAR_ARGS_NAME);
2273:       assertEquals(36, Node.QUOTED_PROP);
2274:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2275:       assertEquals(29, Node.JSDOC_INFO_PROP);
2276:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2277:       assertEquals(57, Node.LAST_PROP);
2278:       assertEquals(55, Node.INFERRED_FUNCTION);
2279:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2280:       assertEquals(39, Node.EMPTY_BLOCK);
2281:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2282:       assertEquals(4095, Node.COLUMN_MASK);
2283:       assertEquals(8, Node.FLAG_NO_THROWS);
2284:       assertEquals(40, Node.ORIGINALNAME_PROP);
2285:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2286:       assertEquals(43, Node.IS_CONSTANT_NAME);
2287:       assertEquals(48, Node.DIRECTIVES);
2288:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2289:       assertEquals(54, Node.SLASH_V);
2290:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2291:       assertEquals(50, Node.FREE_CALL);
2292:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2293:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2294:       assertEquals(32, Node.INCRDECR_PROP);
2295:       assertEquals(1, Node.DECR_FLAG);
2296:       assertNotSame(node0, node3);
2297:       assertNotSame(node0, node2);
2298:       assertSame(node1, node4);
2299:       
2300:       String string0 = node2.toString(true, false, false);
2301:       assertFalse(node2.equals((Object)node4));
2302:       assertFalse(node2.equals((Object)node3));
2303:       assertFalse(node2.equals((Object)node0));
2304:       assertFalse(node2.equals((Object)node1));
2305:       assertFalse(node2.isThrow());
2306:       assertFalse(node2.isHook());
2307:       assertFalse(node2.isComma());
2308:       assertFalse(node2.isBreak());
2309:       assertFalse(node2.isThis());
2310:       assertFalse(node2.isFalse());
2311:       assertFalse(node2.isCase());
2312:       assertFalse(node2.isAnd());
2313:       assertFalse(node2.isScript());
2314:       assertFalse(node2.isSwitch());
2315:       assertEquals((-1), node2.getCharno());
2316:       assertFalse(node2.isGetProp());
2317:       assertFalse(node2.isNot());
2318:       assertFalse(node2.isGetterDef());
2319:       assertFalse(node2.isObjectLit());
2320:       assertFalse(node2.isCast());
2321:       assertFalse(node2.hasOneChild());
2322:       assertFalse(node2.isFor());
2323:       assertFalse(node2.isTry());
2324:       assertFalse(node2.isIf());
2325:       assertFalse(node2.isWith());
2326:       assertFalse(node2.isRegExp());
2327:       assertFalse(node2.isFunction());
2328:       assertFalse(node2.hasMoreThanOneChild());
2329:       assertFalse(node2.isCatch());
2330:       assertFalse(node2.isInstanceOf());
2331:       assertEquals(40, node2.getType());
2332:       assertEquals((-1), node2.getLineno());
2333:       assertFalse(node2.isNE());
2334:       assertFalse(node2.isSetterDef());
2335:       assertFalse(node2.isInc());
2336:       assertFalse(node2.isIn());
2337:       assertFalse(node2.isVar());
2338:       assertFalse(node2.isCall());
2339:       assertFalse(node2.isStringKey());
2340:       assertFalse(node2.isNew());
2341:       assertFalse(node2.isName());
2342:       assertTrue(node2.isString());
2343:       assertFalse(node2.isBlock());
2344:       assertFalse(node2.isContinue());
2345:       assertEquals(0, node2.getChildCount());
2346:       assertFalse(node2.isReturn());
2347:       assertFalse(node2.isWhile());
2348:       assertFalse(node2.isParamList());
2349:       assertEquals((-1), node2.getSourcePosition());
2350:       assertFalse(node2.isDebugger());
2351:       assertFalse(node2.isNumber());
2352:       assertFalse(node2.isArrayLit());
2353:       assertFalse(node2.isGetElem());
2354:       assertFalse(node2.isLabelName());
2355:       assertFalse(node2.isVoid());
2356:       assertFalse(node2.isDelProp());
2357:       assertFalse(node2.isDec());
2358:       assertFalse(node2.hasChildren());
2359:       assertFalse(node2.isExprResult());
2360:       assertFalse(node2.isLabel());
2361:       assertFalse(node2.isAssign());
2362:       assertFalse(node2.isTypeOf());
2363:       assertFalse(node2.isAssignAdd());
2364:       assertFalse(node2.isDo());
2365:       assertFalse(node2.isDefaultCase());
2366:       assertFalse(node2.isNull());
2367:       assertFalse(node2.isTrue());
2368:       assertFalse(node2.isOr());
2369:       assertFalse(node2.isAdd());
2370:       assertFalse(node2.isEmpty());
2371:       assertEquals("STRING com.google.javascript.rhino.jstype.NumberType", string0);
2372:       assertEquals(57, Node.REFLECTED_OBJECT);
2373:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2374:       assertEquals(40, Node.ORIGINALNAME_PROP);
2375:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2376:       assertEquals(52, Node.LENGTH);
2377:       assertEquals(30, Node.VAR_ARGS_NAME);
2378:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2379:       assertEquals(39, Node.EMPTY_BLOCK);
2380:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2381:       assertEquals(1, Node.DECR_FLAG);
2382:       assertEquals(57, Node.LAST_PROP);
2383:       assertEquals(32, Node.INCRDECR_PROP);
2384:       assertEquals(46, Node.IS_NAMESPACE);
2385:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2386:       assertEquals(2, Node.POST_FLAG);
2387:       assertEquals(50, Node.FREE_CALL);
2388:       assertEquals(54, Node.SLASH_V);
2389:       assertEquals(43, Node.IS_CONSTANT_NAME);
2390:       assertEquals(53, Node.INPUT_ID);
2391:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2392:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2393:       assertEquals(29, Node.JSDOC_INFO_PROP);
2394:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2395:       assertEquals(47, Node.IS_DISPATCHER);
2396:       assertEquals(12, Node.COLUMN_BITS);
2397:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2398:       assertEquals(55, Node.INFERRED_FUNCTION);
2399:       assertEquals(4095, Node.COLUMN_MASK);
2400:       assertEquals(8, Node.FLAG_NO_THROWS);
2401:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2402:       assertEquals(49, Node.DIRECT_EVAL);
2403:       assertEquals(36, Node.QUOTED_PROP);
2404:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2405:       assertEquals(37, Node.OPT_ARG_NAME);
2406:       assertEquals(48, Node.DIRECTIVES);
2407:       assertEquals(56, Node.CHANGE_TIME);
2408:       assertNotNull(string0);
2409:       assertNotSame(node2, node3);
2410:       assertNotSame(node2, node0);
2411:   }
2412: }
RegularFileObject[/tmp/EvoSuite_147_1629222903329/com/google/javascript/rhino/Node_147_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:55:03 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_147_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_147_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.common.collect.Iterables",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.common.collect.AbstractMultimap$Values",
132:       "com.google.javascript.rhino.jstype.ProxyObjectType",
133:       "com.google.common.collect.Sets$SetView",
134:       "com.google.common.collect.RegularImmutableAsList",
135:       "com.google.javascript.rhino.jstype.TemplateType",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
179:       "com.google.common.base.Joiner$1",
180:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
181:       "com.google.common.base.Joiner$2",
182:       "com.google.common.collect.ImmutableCollection",
183:       "com.google.common.collect.ImmutableEnumMap",
184:       "com.google.javascript.rhino.jstype.TernaryValue",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMultimap$Entries",
190:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
191:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
192:       "com.google.javascript.rhino.jstype.EnumElementType",
193:       "com.google.javascript.rhino.jstype.UnionType",
194:       "com.google.common.base.Objects",
195:       "com.google.javascript.rhino.Node$NumberNode",
196:       "com.google.common.collect.SingletonImmutableList",
197:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
198:       "com.google.common.collect.ImmutableCollection$Builder",
199:       "com.google.javascript.rhino.jstype.StaticSlot",
200:       "com.google.common.collect.Iterators$6",
201:       "com.google.common.collect.BiMap",
202:       "com.google.common.collect.Iterators$7",
203:       "com.google.common.collect.AbstractSetMultimap",
204:       "com.google.common.base.Function",
205:       "com.google.common.collect.ImmutableSet",
206:       "com.google.common.collect.Lists$AbstractListWrapper",
207:       "com.google.common.collect.ImmutableMap",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
210:       "com.google.common.collect.Maps$1",
211:       "com.google.javascript.rhino.jstype.EnumType",
212:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
213:       "com.google.common.collect.Iterators$1",
214:       "com.google.common.collect.Iterators$2",
215:       "com.google.javascript.rhino.jstype.NamespaceType",
216:       "com.google.common.collect.Iterators$3",
217:       "com.google.common.collect.Sets",
218:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
219:       "com.google.javascript.rhino.Node$ObjectPropListItem",
220:       "com.google.common.collect.Lists$StringAsImmutableList",
221:       "com.google.common.collect.Lists$2",
222:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
223:       "com.google.common.collect.ImmutableList$Builder",
224:       "com.google.common.collect.Lists$1",
225:       "com.google.javascript.rhino.jstype.StaticReference",
226:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
227:       "com.google.common.collect.Multiset",
228:       "com.google.common.collect.Multimaps$Entries",
229:       "com.google.common.collect.AbstractMultimap",
230:       "com.google.common.collect.Multimap",
231:       "com.google.common.collect.Iterators",
232:       "com.google.common.collect.Maps$ImprovedAbstractMap",
233:       "com.google.common.collect.ImmutableBiMap",
234:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
235:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
236:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
237:       "com.google.common.collect.ImmutableList",
238:       "com.google.common.collect.SingletonImmutableBiMap",
239:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
240:       "com.google.javascript.rhino.jstype.StringType",
241:       "com.google.javascript.rhino.Node$AbstractPropListItem",
242:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
243:       "com.google.javascript.rhino.jstype.TemplatizedType",
244:       "com.google.javascript.rhino.jstype.Visitor",
245:       "com.google.javascript.rhino.jstype.NoResolvedType",
246:       "com.google.javascript.rhino.jstype.JSTypeNative",
247:       "com.google.javascript.rhino.jstype.AllType",
248:       "com.google.common.collect.Maps",
249:       "com.google.common.collect.SetMultimap",
250:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
251:       "com.google.common.collect.Maps$EntryTransformer",
252:       "com.google.javascript.rhino.JSTypeExpression",
253:       "com.google.common.collect.Iterators$MergingIterator"
254:     );
255:   } 
256: 
257:   private static void resetClasses() {
258:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_147_tmp__ESTest_scaffolding.class.getClassLoader()); 
259: 
260:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
261:       "com.google.javascript.rhino.Node",
262:       "com.google.javascript.rhino.Node$NumberNode",
263:       "com.google.javascript.rhino.Node$StringNode",
264:       "com.google.javascript.rhino.Node$AbstractPropListItem",
265:       "com.google.javascript.rhino.Node$ObjectPropListItem",
266:       "com.google.javascript.rhino.Node$IntPropListItem",
267:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
268:       "com.google.javascript.rhino.Node$AncestorIterable",
269:       "com.google.javascript.rhino.Node$NodeMismatch",
270:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
271:       "com.google.javascript.rhino.Node$SideEffectFlags",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.Token",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.base.Objects",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
352:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.common.collect.AbstractIndexedListIterator",
362:       "com.google.common.collect.Iterators$11",
363:       "com.google.javascript.rhino.Node$AncestorIterable$1",
364:       "com.google.common.collect.ImmutableSet",
365:       "com.google.common.collect.EmptyImmutableSet",
366:       "com.google.javascript.rhino.InputId",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.javascript.rhino.JSTypeExpression",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.javascript.rhino.jstype.JSType$TypePair",
372:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
374:       "com.google.common.collect.Sets$ImprovedAbstractSet",
375:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
376:       "com.google.common.collect.Hashing",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
378:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
379:       "com.google.common.collect.Platform"
380:     );
381:   }
382: }

[MASTER] 17:55:04.145 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("com.google.javascript.rhino.jstype.NumberType", 117, 117);
assertFalse(node0.isNull());
assertEquals(117, node0.getCharno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertEquals(479349, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertEquals(117, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node0);

Node node1 = new Node(49, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isNull());
assertEquals(117, node0.getCharno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertEquals(479349, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertEquals(117, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertEquals(49, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertTrue(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node1);

boolean boolean0 = node0.isEquivalentTo(node1, false, false, false);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isNull());
assertEquals(117, node0.getCharno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertEquals(479349, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertEquals(117, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertEquals(49, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertTrue(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(boolean0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

boolean boolean1 = node1.isVarArgs();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isNull());
assertEquals(117, node0.getCharno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertEquals(479349, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertEquals(117, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertEquals(49, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertTrue(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(boolean1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

Node node2 = Node.newString("com.google.javascript.rhino.jstype.NumberType");
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isGetterDef());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals(40, node2.getType());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isContinue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(node2);
assertNotSame(node2, node0);

Iterable<Node> iterable0 = node2.children();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isGetterDef());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals(40, node2.getType());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isContinue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(iterable0.contains(node2));
assertNotNull(iterable0);
assertNotSame(node2, node0);

boolean boolean2 = node1.isIf();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isNull());
assertEquals(117, node0.getCharno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertEquals(479349, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertEquals(117, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertEquals(49, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertTrue(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(boolean2);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node0, node2);

boolean boolean3 = node2.isVoid();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isGetterDef());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals(40, node2.getType());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isContinue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(boolean3);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertNotSame(node2, node0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3157);
assertEquals(3157, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);

int int0 = node_SideEffectFlags0.valueOf();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, int0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);

Node node3 = Node.newString(",");
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNE());
assertFalse(node3.isSwitch());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isFor());
assertFalse(node3.isHook());
assertFalse(node3.isGetterDef());
assertFalse(node3.isComma());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isTry());
assertEquals(40, node3.getType());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isBlock());
assertTrue(node3.isString());
assertFalse(node3.isReturn());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isParamList());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isArrayLit());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());
assertFalse(node3.isName());
assertFalse(node3.isVar());
assertFalse(node3.isEmpty());
assertFalse(node3.isNull());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertNotNull(node3);
assertNotSame(node3, node0);
assertNotSame(node3, node2);

boolean boolean4 = node1.isStringKey();
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(node0.isNull());
assertEquals(117, node0.getCharno());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertEquals(479349, node0.getSourcePosition());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertEquals(117, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertEquals(49, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertTrue(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(boolean4);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node0, node3);
assertNotSame(node0, node2);

Node node4 = node1.copyInformationFromForTree(node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertEquals(49, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertTrue(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isGetterDef());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals(40, node2.getType());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isContinue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node4.isFalse());
assertFalse(node4.isInc());
assertFalse(node4.isBreak());
assertFalse(node4.isString());
assertFalse(node4.isSwitch());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isAnd());
assertFalse(node4.isIn());
assertFalse(node4.isCast());
assertFalse(node4.isEmpty());
assertFalse(node4.isGetElem());
assertFalse(node4.isExprResult());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isVoid());
assertFalse(node4.isDelProp());
assertFalse(node4.isOr());
assertFalse(node4.isNot());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isObjectLit());
assertEquals(49, node4.getType());
assertFalse(node4.isGetProp());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isComma());
assertFalse(node4.isWhile());
assertFalse(node4.isAssign());
assertTrue(node4.hasOneChild());
assertFalse(node4.isReturn());
assertFalse(node4.isVar());
assertFalse(node4.isName());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isCall());
assertFalse(node4.isNull());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isContinue());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isSetterDef());
assertFalse(node4.isFunction());
assertFalse(node4.isDefaultCase());
assertTrue(node4.isThrow());
assertFalse(node4.isLabel());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isTry());
assertFalse(node4.isScript());
assertFalse(node4.isNE());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isIf());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCatch());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCase());
assertTrue(node4.hasChildren());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isRegExp());
assertFalse(node4.isWith());
assertFalse(node4.isFor());
assertFalse(node4.isBlock());
assertEquals(1, node4.getChildCount());
assertFalse(node4.isThis());
assertFalse(node4.isHook());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node4);
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertSame(node1, node4);
assertNotSame(node2, node3);
assertNotSame(node2, node0);
assertSame(node4, node1);

node1.setChangeTime(30);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertEquals(49, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertTrue(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertSame(node1, node4);

String string0 = node2.toString(true, false, false);
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isGetterDef());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals(40, node2.getType());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isContinue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertEquals("STRING com.google.javascript.rhino.jstype.NumberType", string0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(string0);
assertNotSame(node2, node3);
assertNotSame(node2, node0);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/6
* Done!

* Computation finished
