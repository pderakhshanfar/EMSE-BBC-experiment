* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 3053
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 174990014
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 09:51:35.329 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 09:51:37.293 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 09:51:43.788 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 09:52:07.172 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.UnionType canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 09:54:13.291 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 130
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 30010
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 130
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 130
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 217
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 6560
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 525
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 195
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 499
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 525
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 400
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 4159
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 7544
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 400
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 130
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 400
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 4806
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 400
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 5845
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 1200
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 5026
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 16528
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 400
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 130
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 15944
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 221
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 916
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 7600
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 3
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 916
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 2898
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 22076
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 525
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 10431
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 388
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 3216
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 3899
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 628
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 29622
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I3 Branch 101 IFNONNULL L798 - true: 60
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 454
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 2177
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 1784
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 2898
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 916
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 1280
Number of times BBC is called for com.google.javascript.rhino.Node.mergeLineCharNo(II)I: I15 Branch 141 IFEQ L1197 - false: 104
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 130
Number of times BBC is called for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: Line 1323: 44
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 5820
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 2005
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 36105
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 2750
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 3125
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 130
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 23549
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 33
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 4524
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 2234
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 331
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 525
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1720
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 221
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 130
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 24293
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 4333
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 525
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 124
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 21183
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 130
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 221
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 4524
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 525
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 130
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 4524
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 462
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 130
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 5348
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 130
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 130
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 1134
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 7159
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 525
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 4330
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 8583
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 525
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 525
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 36972
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 916
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: Line 162: 645
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 146
Number of times BBC is called for com.google.javascript.rhino.Node$AbstractPropListItem.getType()I: Line 281: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 1670
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 645
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 1046
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 1824
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 1532
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 146
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 14754
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 2718
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 5888
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>(I)V: Line 2055: 44
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>(I)V: Line 2057: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 7288
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>(I)V: Line 2056: 44
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 40221
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 7824
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 305
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 1216
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 113470
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 49
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 44
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 409
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 217
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 136
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 37
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node$AbstractPropListItem.getNext()Lcom/google/javascript/rhino/Node$PropListItem;: Line 286: 44
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 16937
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 47257
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 413
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 2177
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 173
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 525
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 802
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 10654
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 50496
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 15944
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 1051
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 15944
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - true: 246
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 19097
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 44
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 38
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 11089
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 682
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 2538
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 130
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 388
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 237
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 222
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 9516
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 46921
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 11
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 14754
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 2866
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 525
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 3265
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 17416
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 130
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 15944
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 3419
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 60
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 35
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 221
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 221
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 130
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 1680
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 130
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 2538
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 130
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 58707
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 16148
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 130
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 1824
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 4469
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: Line 1144: 130
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 413
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 1077
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 17181
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 777
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 152
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 5496
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 1217
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 6848
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 16041
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 146
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 146
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 14754
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 2177
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 1797
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 130
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 46921
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 2718
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 130
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 113470
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 14754
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 930
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 2005
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 36050
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 51
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 28248
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 130
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 930
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 2718
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 2119
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 3369
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 130
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 130
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 687
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 69394
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 916
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 209
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 409
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 130
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 21183
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 254
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 1511
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 15944
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 29587
Number of times BBC is called for com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: Line 1881: 130
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 413
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 9570
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 14749
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 2777
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: root-Branch: 645
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - true: 60
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 2313
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 221
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 221
Number of times BBC is called for com.google.javascript.rhino.Node$AbstractPropListItem.getNext()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 22
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 35
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 221
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 5430
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 35
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 130
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 51
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 35
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 284
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 413
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 121
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 486
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 6998
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 1349
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 16220
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 7288
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 1423
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 198
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 44
Number of times BBC is called for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I8 Branch 97 IFNULL L764 - false: 14
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 6947
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 1302
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 9073
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 8938
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 6947
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 130
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 9732
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 2005
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 638
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 13691
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - false: 63
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 2379
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 525
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 525
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 221
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 424
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 11
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 221
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 1890
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 525
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 2898
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 556
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 2898
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 1354
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 100485
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 2898
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 648
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 777
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 2898
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 2898
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 2898
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 354
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 777
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 3655
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 1184
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 3804
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 3752
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 3752
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - true: 3
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 3752
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 16969
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 3752
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 21671
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 156
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 1051
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 334
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 2898
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 15983
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 10967
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 16
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>(I)V: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: root-Branch: 130
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 24104
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 41376
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 47453
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 10287
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 2177
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 130
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 3265
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 1335
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 130
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 130
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: Line 312: 130
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 916
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 305
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 1670
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 242
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 407
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1226
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 14754
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 3265
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 2511
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 221
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 1511
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 42958
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - true: 15
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 130
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 1117
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 22582
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 809
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 130
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 2025
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 1511
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 1836
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 645
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 17898
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 23516
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 44
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 23328
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: Line 1221: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 3655
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 21036
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 4906
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 822
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 525
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 1206
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 413
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 16
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 23321
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 1051
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 13660
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 305
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 2005
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 5669
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 305
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 29842
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 60
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 10428
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 14466
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 39
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 10428
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 9580
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 1046
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 99
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 2177
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 916
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 1077
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 1077
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 1077
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 10108
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 1502
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 1077
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 23585
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 130
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 1077
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 1077
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 289
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 130
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 10188
Number of times BBC is called for com.google.javascript.rhino.Node$AbstractPropListItem.getType()I: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 10188
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 3
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 2718
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 35
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 25444
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 17
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1858: 130
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 35
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 221
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 305
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 1030
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 487
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 44
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 4279
Number of times BBC is called for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - false: 31
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 1521
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 130
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 642
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 795
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: root-Branch: 130
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 447
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 9053
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 525
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 7169
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 916
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 130
Number of times BBC is called for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - true: 14
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 2005
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 130
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 2699
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 2177
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 130
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 866
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 7587
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 367
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 219
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 13961
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 4643
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 1335
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 8436
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 1335
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 305
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 647
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 305
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 168
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 44
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 242
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 130
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - false: 33
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 29718
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 3
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 413
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 509
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 17289
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 400
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 3110
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 2005
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 225
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 6347
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 6947
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 1092
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 1461
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 3979
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 14741
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 130
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 130
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 64912
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 413
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 64912
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 15863
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 10428
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 47453
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - true: 3
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 23398
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 221
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 221
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 221
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 2177
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 1521
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 1627
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 32985
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 1051
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 525
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 175
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 44
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 254
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 525
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 2804
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 468
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 455
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 291
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 2177
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 24572
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 240
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 10174
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 221
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 221
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 24572
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 221
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 99
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 221
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 290
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 123
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 290
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 64912
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 162
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 433
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 64912
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 993: 6
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 2898
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 64912
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 64912
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 7055
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 989: 6
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 8765
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 992: 6
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 64912
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 130
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 985: 6
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 64912
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 413
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 8765
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 987: 6
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 8765
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 40964
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 221
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 2177
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 4524
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 60
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 4524
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 16193
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: Line 1132: 44
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 16193
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 15510
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 14754
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 15722
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 305
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 413
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 192
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 413
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 37009
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 32364
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 305
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 52379
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: Line 2060: 44
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 11867
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 2647
Number of times BBC is called for com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;: I9 Branch 104 IFNONNULL L814 - true: 48
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 21798
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 41933
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 53
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 19338
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 777
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 777
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 7466
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 258
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 11299
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 525
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 8470
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 525
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 2684
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 296
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 2177
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 9069
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 1718
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 187
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 305
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 400
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 5210
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 221
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 15664
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 23804
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 130
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 466: 3
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 32991
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 3752
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 916
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 3265
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 33790
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 32991
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 221
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 24511
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 1836
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 467: 3
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 468: 3
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 2647
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 12418
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 203
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 326
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 44
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 525
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 23587
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 100485
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 525
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - true: 17
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 44
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1818: 63
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 44
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1813: 63
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 29391
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 916
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 246
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 549
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 916
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 25516
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 3740
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 113470
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 17015
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - true: 130
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 2898
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 1200
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 413
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 1511
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 2005
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 431
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 4817
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 1317
Number of times BBC is called in total: 5850355
* Search finished after 605s and 669 generations, 258612 statements, best individual has fitness: 2662.0
* Minimizing test suite
[MASTER] 10:02:53.495 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 806
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 714
* Number of covered goals: 627
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 102
* Number of covered goals: 102
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 466
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 4536
* Number of covered goals: 2368
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 588
* Generated 848 tests with total length 9112
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:04:00.495 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.68725% of time used, but only 52/848 tests minimized), falling back to using all assertions
[MASTER] 10:04:19.529 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 10:04:31.080 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 10:04:33.524 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_54_1628157873115/com/google/javascript/rhino/Node_54_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_54_1628157873115/com/google/javascript/rhino/Node_54_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:33.524 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:33.524 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:33.528 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 970
[MASTER] 10:04:33.530 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_54_1628157873115/com/google/javascript/rhino/Node_54_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:33 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_54_tmp__ESTest extends Node_54_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(0.0);
23:       assertEquals(49, Node.DIRECT_EVAL);
24:       assertEquals(30, Node.VAR_ARGS_NAME);
25:       assertEquals(1, Node.DECR_FLAG);
26:       assertEquals(57, Node.LAST_PROP);
27:       assertEquals(12, Node.COLUMN_BITS);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(54, Node.SLASH_V);
31:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
32:       assertEquals(32, Node.INCRDECR_PROP);
33:       assertEquals(52, Node.LENGTH);
34:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
37:       assertEquals(29, Node.JSDOC_INFO_PROP);
38:       assertEquals(56, Node.CHANGE_TIME);
39:       assertEquals(57, Node.REFLECTED_OBJECT);
40:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
41:       assertEquals(48, Node.DIRECTIVES);
42:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
43:       assertEquals(4095, Node.COLUMN_MASK);
44:       assertEquals(37, Node.OPT_ARG_NAME);
45:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
46:       assertEquals(43, Node.IS_CONSTANT_NAME);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(8, Node.FLAG_NO_THROWS);
49:       assertEquals(55, Node.INFERRED_FUNCTION);
50:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(53, Node.INPUT_ID);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
55:       assertEquals(2, Node.POST_FLAG);
56:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
57:       assertEquals(47, Node.IS_DISPATCHER);
58:       assertEquals(40, Node.ORIGINALNAME_PROP);
59:       assertNotNull(node0);
60:       assertFalse(node0.isName());
61:       assertFalse(node0.isStringKey());
62:       assertFalse(node0.isVar());
63:       assertFalse(node0.isBlock());
64:       assertFalse(node0.isNull());
65:       assertFalse(node0.isSetterDef());
66:       assertFalse(node0.isDo());
67:       assertFalse(node0.isNew());
68:       assertFalse(node0.isAdd());
69:       assertFalse(node0.hasMoreThanOneChild());
70:       assertFalse(node0.isCatch());
71:       assertFalse(node0.isReturn());
72:       assertFalse(node0.isOr());
73:       assertEquals(39, node0.getType());
74:       assertFalse(node0.isWhile());
75:       assertFalse(node0.isDec());
76:       assertFalse(node0.isVoid());
77:       assertFalse(node0.isTypeOf());
78:       assertFalse(node0.isRegExp());
79:       assertEquals((-1), node0.getLineno());
80:       assertFalse(node0.isGetElem());
81:       assertFalse(node0.isCall());
82:       assertFalse(node0.isArrayLit());
83:       assertFalse(node0.hasOneChild());
84:       assertFalse(node0.isLabelName());
85:       assertFalse(node0.isTrue());
86:       assertFalse(node0.isFor());
87:       assertFalse(node0.isDefaultCase());
88:       assertFalse(node0.isTry());
89:       assertFalse(node0.isGetterDef());
90:       assertFalse(node0.isEmpty());
91:       assertFalse(node0.isScript());
92:       assertEquals(0, node0.getChildCount());
93:       assertFalse(node0.isAssignAdd());
94:       assertFalse(node0.isLabel());
95:       assertFalse(node0.isSwitch());
96:       assertFalse(node0.isParamList());
97:       assertFalse(node0.isFalse());
98:       assertFalse(node0.isThrow());
99:       assertFalse(node0.isHook());
100:       assertFalse(node0.isInc());
101:       assertEquals((-1), node0.getCharno());
102:       assertFalse(node0.isString());
103:       assertFalse(node0.isCase());
104:       assertFalse(node0.isGetProp());
105:       assertFalse(node0.isIn());
106:       assertFalse(node0.isComma());
107:       assertFalse(node0.isThis());
108:       assertFalse(node0.isNE());
109:       assertFalse(node0.isIf());
110:       assertFalse(node0.isDelProp());
111:       assertFalse(node0.isWith());
112:       assertFalse(node0.isBreak());
113:       assertFalse(node0.isInstanceOf());
114:       assertFalse(node0.isExprResult());
115:       assertFalse(node0.isCast());
116:       assertFalse(node0.isAssign());
117:       assertFalse(node0.hasChildren());
118:       assertEquals((-1), node0.getSourcePosition());
119:       assertFalse(node0.isDebugger());
120:       assertTrue(node0.isNumber());
121:       assertFalse(node0.isAnd());
122:       assertFalse(node0.isContinue());
123:       assertFalse(node0.isObjectLit());
124:       assertFalse(node0.isNot());
125:       assertFalse(node0.isFunction());
126:       
127:       Node node1 = Node.newString(0, "", 4, 38);
128:       assertEquals(47, Node.IS_DISPATCHER);
129:       assertEquals(2, Node.POST_FLAG);
130:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
131:       assertEquals(37, Node.OPT_ARG_NAME);
132:       assertEquals(56, Node.CHANGE_TIME);
133:       assertEquals(12, Node.COLUMN_BITS);
134:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
136:       assertEquals(57, Node.LAST_PROP);
137:       assertEquals(30, Node.VAR_ARGS_NAME);
138:       assertEquals(49, Node.DIRECT_EVAL);
139:       assertEquals(36, Node.QUOTED_PROP);
140:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
141:       assertEquals(57, Node.REFLECTED_OBJECT);
142:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
143:       assertEquals(53, Node.INPUT_ID);
144:       assertEquals(55, Node.INFERRED_FUNCTION);
145:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
146:       assertEquals(29, Node.JSDOC_INFO_PROP);
147:       assertEquals(52, Node.LENGTH);
148:       assertEquals(8, Node.FLAG_NO_THROWS);
149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
150:       assertEquals(39, Node.EMPTY_BLOCK);
151:       assertEquals(50, Node.FREE_CALL);
152:       assertEquals(48, Node.DIRECTIVES);
153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
154:       assertEquals(40, Node.ORIGINALNAME_PROP);
155:       assertEquals(4095, Node.COLUMN_MASK);
156:       assertEquals(1, Node.DECR_FLAG);
157:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
158:       assertEquals(54, Node.SLASH_V);
159:       assertEquals(43, Node.IS_CONSTANT_NAME);
160:       assertEquals(32, Node.INCRDECR_PROP);
161:       assertEquals(46, Node.IS_NAMESPACE);
162:       assertEquals(51, Node.STATIC_SOURCE_FILE);
163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
164:       assertNotNull(node1);
165:       assertFalse(node1.equals((Object)node0));
166:       assertFalse(node1.isCase());
167:       assertFalse(node1.isSwitch());
168:       assertEquals(0, node1.getType());
169:       assertFalse(node1.isFalse());
170:       assertFalse(node1.isThrow());
171:       assertFalse(node1.isEmpty());
172:       assertFalse(node1.isBreak());
173:       assertFalse(node1.isNE());
174:       assertFalse(node1.isDelProp());
175:       assertFalse(node1.isIf());
176:       assertFalse(node1.isInc());
177:       assertFalse(node1.isTrue());
178:       assertFalse(node1.isIn());
179:       assertFalse(node1.isNot());
180:       assertFalse(node1.isAnd());
181:       assertFalse(node1.isVoid());
182:       assertFalse(node1.isComma());
183:       assertFalse(node1.isExprResult());
184:       assertFalse(node1.isCast());
185:       assertFalse(node1.isFunction());
186:       assertEquals(4, node1.getLineno());
187:       assertFalse(node1.isAssign());
188:       assertFalse(node1.hasChildren());
189:       assertFalse(node1.isDebugger());
190:       assertFalse(node1.isGetProp());
191:       assertFalse(node1.isString());
192:       assertFalse(node1.isObjectLit());
193:       assertEquals(38, node1.getCharno());
194:       assertFalse(node1.isDo());
195:       assertFalse(node1.isWhile());
196:       assertFalse(node1.isAssignAdd());
197:       assertFalse(node1.isBlock());
198:       assertFalse(node1.isReturn());
199:       assertFalse(node1.isLabel());
200:       assertFalse(node1.isDec());
201:       assertFalse(node1.isTypeOf());
202:       assertFalse(node1.isContinue());
203:       assertFalse(node1.hasMoreThanOneChild());
204:       assertFalse(node1.isGetElem());
205:       assertFalse(node1.isName());
206:       assertFalse(node1.isCall());
207:       assertFalse(node1.isNull());
208:       assertFalse(node1.isVar());
209:       assertFalse(node1.isNew());
210:       assertFalse(node1.isAdd());
211:       assertFalse(node1.isOr());
212:       assertFalse(node1.isSetterDef());
213:       assertFalse(node1.isDefaultCase());
214:       assertFalse(node1.isThis());
215:       assertFalse(node1.isInstanceOf());
216:       assertFalse(node1.isRegExp());
217:       assertEquals(0, node1.getChildCount());
218:       assertFalse(node1.isCatch());
219:       assertFalse(node1.isWith());
220:       assertFalse(node1.isStringKey());
221:       assertFalse(node1.isFor());
222:       assertFalse(node1.isLabelName());
223:       assertFalse(node1.isArrayLit());
224:       assertFalse(node1.isHook());
225:       assertFalse(node1.hasOneChild());
226:       assertFalse(node1.isParamList());
227:       assertFalse(node1.isTry());
228:       assertFalse(node1.isNumber());
229:       assertEquals(16422, node1.getSourcePosition());
230:       assertFalse(node1.isScript());
231:       assertFalse(node1.isGetterDef());
232:       
233:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
234:       assertEquals(49, Node.DIRECT_EVAL);
235:       assertEquals(30, Node.VAR_ARGS_NAME);
236:       assertEquals(1, Node.DECR_FLAG);
237:       assertEquals(57, Node.LAST_PROP);
238:       assertEquals(12, Node.COLUMN_BITS);
239:       assertEquals(51, Node.STATIC_SOURCE_FILE);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       assertEquals(54, Node.SLASH_V);
242:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
243:       assertEquals(32, Node.INCRDECR_PROP);
244:       assertEquals(52, Node.LENGTH);
245:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
246:       assertEquals(15, Node.NO_SIDE_EFFECTS);
247:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
248:       assertEquals(29, Node.JSDOC_INFO_PROP);
249:       assertEquals(56, Node.CHANGE_TIME);
250:       assertEquals(57, Node.REFLECTED_OBJECT);
251:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
252:       assertEquals(48, Node.DIRECTIVES);
253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
254:       assertEquals(4095, Node.COLUMN_MASK);
255:       assertEquals(37, Node.OPT_ARG_NAME);
256:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
257:       assertEquals(43, Node.IS_CONSTANT_NAME);
258:       assertEquals(36, Node.QUOTED_PROP);
259:       assertEquals(8, Node.FLAG_NO_THROWS);
260:       assertEquals(55, Node.INFERRED_FUNCTION);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(39, Node.EMPTY_BLOCK);
263:       assertEquals(53, Node.INPUT_ID);
264:       assertEquals(50, Node.FREE_CALL);
265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
266:       assertEquals(2, Node.POST_FLAG);
267:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
268:       assertEquals(47, Node.IS_DISPATCHER);
269:       assertEquals(40, Node.ORIGINALNAME_PROP);
270:       assertEquals(47, Node.IS_DISPATCHER);
271:       assertEquals(2, Node.POST_FLAG);
272:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
273:       assertEquals(37, Node.OPT_ARG_NAME);
274:       assertEquals(56, Node.CHANGE_TIME);
275:       assertEquals(12, Node.COLUMN_BITS);
276:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
277:       assertEquals(15, Node.NO_SIDE_EFFECTS);
278:       assertEquals(57, Node.LAST_PROP);
279:       assertEquals(30, Node.VAR_ARGS_NAME);
280:       assertEquals(49, Node.DIRECT_EVAL);
281:       assertEquals(36, Node.QUOTED_PROP);
282:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
283:       assertEquals(57, Node.REFLECTED_OBJECT);
284:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
285:       assertEquals(53, Node.INPUT_ID);
286:       assertEquals(55, Node.INFERRED_FUNCTION);
287:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
288:       assertEquals(29, Node.JSDOC_INFO_PROP);
289:       assertEquals(52, Node.LENGTH);
290:       assertEquals(8, Node.FLAG_NO_THROWS);
291:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
292:       assertEquals(39, Node.EMPTY_BLOCK);
293:       assertEquals(50, Node.FREE_CALL);
294:       assertEquals(48, Node.DIRECTIVES);
295:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
296:       assertEquals(40, Node.ORIGINALNAME_PROP);
297:       assertEquals(4095, Node.COLUMN_MASK);
298:       assertEquals(1, Node.DECR_FLAG);
299:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
300:       assertEquals(54, Node.SLASH_V);
301:       assertEquals(43, Node.IS_CONSTANT_NAME);
302:       assertEquals(32, Node.INCRDECR_PROP);
303:       assertEquals(46, Node.IS_NAMESPACE);
304:       assertEquals(51, Node.STATIC_SOURCE_FILE);
305:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
306:       assertNotNull(node_NodeMismatch0);
307:       assertFalse(node0.equals((Object)node1));
308:       assertFalse(node1.equals((Object)node0));
309:       assertFalse(node0.isName());
310:       assertFalse(node0.isStringKey());
311:       assertFalse(node0.isVar());
312:       assertFalse(node0.isBlock());
313:       assertFalse(node0.isNull());
314:       assertFalse(node0.isSetterDef());
315:       assertFalse(node0.isDo());
316:       assertFalse(node0.isNew());
317:       assertFalse(node0.isAdd());
318:       assertFalse(node0.hasMoreThanOneChild());
319:       assertFalse(node0.isCatch());
320:       assertFalse(node0.isReturn());
321:       assertFalse(node0.isOr());
322:       assertEquals(39, node0.getType());
323:       assertFalse(node0.isWhile());
324:       assertFalse(node0.isDec());
325:       assertFalse(node0.isVoid());
326:       assertFalse(node0.isTypeOf());
327:       assertFalse(node0.isRegExp());
328:       assertEquals((-1), node0.getLineno());
329:       assertFalse(node0.isGetElem());
330:       assertFalse(node0.isCall());
331:       assertFalse(node0.isArrayLit());
332:       assertFalse(node0.hasOneChild());
333:       assertFalse(node0.isLabelName());
334:       assertFalse(node0.isTrue());
335:       assertFalse(node0.isFor());
336:       assertFalse(node0.isDefaultCase());
337:       assertFalse(node0.isTry());
338:       assertFalse(node0.isGetterDef());
339:       assertFalse(node0.isEmpty());
340:       assertFalse(node0.isScript());
341:       assertEquals(0, node0.getChildCount());
342:       assertFalse(node0.isAssignAdd());
343:       assertFalse(node0.isLabel());
344:       assertFalse(node0.isSwitch());
345:       assertFalse(node0.isParamList());
346:       assertFalse(node0.isFalse());
347:       assertFalse(node0.isThrow());
348:       assertFalse(node0.isHook());
349:       assertFalse(node0.isInc());
350:       assertEquals((-1), node0.getCharno());
351:       assertFalse(node0.isString());
352:       assertFalse(node0.isCase());
353:       assertFalse(node0.isGetProp());
354:       assertFalse(node0.isIn());
355:       assertFalse(node0.isComma());
356:       assertFalse(node0.isThis());
357:       assertFalse(node0.isNE());
358:       assertFalse(node0.isIf());
359:       assertFalse(node0.isDelProp());
360:       assertFalse(node0.isWith());
361:       assertFalse(node0.isBreak());
362:       assertFalse(node0.isInstanceOf());
363:       assertFalse(node0.isExprResult());
364:       assertFalse(node0.isCast());
365:       assertFalse(node0.isAssign());
366:       assertFalse(node0.hasChildren());
367:       assertEquals((-1), node0.getSourcePosition());
368:       assertFalse(node0.isDebugger());
369:       assertTrue(node0.isNumber());
370:       assertFalse(node0.isAnd());
371:       assertFalse(node0.isContinue());
372:       assertFalse(node0.isObjectLit());
373:       assertFalse(node0.isNot());
374:       assertFalse(node0.isFunction());
375:       assertFalse(node1.isCase());
376:       assertFalse(node1.isSwitch());
377:       assertEquals(0, node1.getType());
378:       assertFalse(node1.isFalse());
379:       assertFalse(node1.isThrow());
380:       assertFalse(node1.isEmpty());
381:       assertFalse(node1.isBreak());
382:       assertFalse(node1.isNE());
383:       assertFalse(node1.isDelProp());
384:       assertFalse(node1.isIf());
385:       assertFalse(node1.isInc());
386:       assertFalse(node1.isTrue());
387:       assertFalse(node1.isIn());
388:       assertFalse(node1.isNot());
389:       assertFalse(node1.isAnd());
390:       assertFalse(node1.isVoid());
391:       assertFalse(node1.isComma());
392:       assertFalse(node1.isExprResult());
393:       assertFalse(node1.isCast());
394:       assertFalse(node1.isFunction());
395:       assertEquals(4, node1.getLineno());
396:       assertFalse(node1.isAssign());
397:       assertFalse(node1.hasChildren());
398:       assertFalse(node1.isDebugger());
399:       assertFalse(node1.isGetProp());
400:       assertFalse(node1.isString());
401:       assertFalse(node1.isObjectLit());
402:       assertEquals(38, node1.getCharno());
403:       assertFalse(node1.isDo());
404:       assertFalse(node1.isWhile());
405:       assertFalse(node1.isAssignAdd());
406:       assertFalse(node1.isBlock());
407:       assertFalse(node1.isReturn());
408:       assertFalse(node1.isLabel());
409:       assertFalse(node1.isDec());
410:       assertFalse(node1.isTypeOf());
411:       assertFalse(node1.isContinue());
412:       assertFalse(node1.hasMoreThanOneChild());
413:       assertFalse(node1.isGetElem());
414:       assertFalse(node1.isName());
415:       assertFalse(node1.isCall());
416:       assertFalse(node1.isNull());
417:       assertFalse(node1.isVar());
418:       assertFalse(node1.isNew());
419:       assertFalse(node1.isAdd());
420:       assertFalse(node1.isOr());
421:       assertFalse(node1.isSetterDef());
422:       assertFalse(node1.isDefaultCase());
423:       assertFalse(node1.isThis());
424:       assertFalse(node1.isInstanceOf());
425:       assertFalse(node1.isRegExp());
426:       assertEquals(0, node1.getChildCount());
427:       assertFalse(node1.isCatch());
428:       assertFalse(node1.isWith());
429:       assertFalse(node1.isStringKey());
430:       assertFalse(node1.isFor());
431:       assertFalse(node1.isLabelName());
432:       assertFalse(node1.isArrayLit());
433:       assertFalse(node1.isHook());
434:       assertFalse(node1.hasOneChild());
435:       assertFalse(node1.isParamList());
436:       assertFalse(node1.isTry());
437:       assertFalse(node1.isNumber());
438:       assertEquals(16422, node1.getSourcePosition());
439:       assertFalse(node1.isScript());
440:       assertFalse(node1.isGetterDef());
441:       
442:       boolean boolean0 = node_NodeMismatch0.equals("");
443:       assertFalse(boolean0);
444:       assertEquals(49, Node.DIRECT_EVAL);
445:       assertEquals(30, Node.VAR_ARGS_NAME);
446:       assertEquals(1, Node.DECR_FLAG);
447:       assertEquals(57, Node.LAST_PROP);
448:       assertEquals(12, Node.COLUMN_BITS);
449:       assertEquals(51, Node.STATIC_SOURCE_FILE);
450:       assertEquals(46, Node.IS_NAMESPACE);
451:       assertEquals(54, Node.SLASH_V);
452:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
453:       assertEquals(32, Node.INCRDECR_PROP);
454:       assertEquals(52, Node.LENGTH);
455:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
456:       assertEquals(15, Node.NO_SIDE_EFFECTS);
457:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
458:       assertEquals(29, Node.JSDOC_INFO_PROP);
459:       assertEquals(56, Node.CHANGE_TIME);
460:       assertEquals(57, Node.REFLECTED_OBJECT);
461:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
462:       assertEquals(48, Node.DIRECTIVES);
463:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
464:       assertEquals(4095, Node.COLUMN_MASK);
465:       assertEquals(37, Node.OPT_ARG_NAME);
466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
467:       assertEquals(43, Node.IS_CONSTANT_NAME);
468:       assertEquals(36, Node.QUOTED_PROP);
469:       assertEquals(8, Node.FLAG_NO_THROWS);
470:       assertEquals(55, Node.INFERRED_FUNCTION);
471:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
472:       assertEquals(39, Node.EMPTY_BLOCK);
473:       assertEquals(53, Node.INPUT_ID);
474:       assertEquals(50, Node.FREE_CALL);
475:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
476:       assertEquals(2, Node.POST_FLAG);
477:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
478:       assertEquals(47, Node.IS_DISPATCHER);
479:       assertEquals(40, Node.ORIGINALNAME_PROP);
480:       assertEquals(47, Node.IS_DISPATCHER);
481:       assertEquals(2, Node.POST_FLAG);
482:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
483:       assertEquals(37, Node.OPT_ARG_NAME);
484:       assertEquals(56, Node.CHANGE_TIME);
485:       assertEquals(12, Node.COLUMN_BITS);
486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
487:       assertEquals(15, Node.NO_SIDE_EFFECTS);
488:       assertEquals(57, Node.LAST_PROP);
489:       assertEquals(30, Node.VAR_ARGS_NAME);
490:       assertEquals(49, Node.DIRECT_EVAL);
491:       assertEquals(36, Node.QUOTED_PROP);
492:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
493:       assertEquals(57, Node.REFLECTED_OBJECT);
494:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
495:       assertEquals(53, Node.INPUT_ID);
496:       assertEquals(55, Node.INFERRED_FUNCTION);
497:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
498:       assertEquals(29, Node.JSDOC_INFO_PROP);
499:       assertEquals(52, Node.LENGTH);
500:       assertEquals(8, Node.FLAG_NO_THROWS);
501:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
502:       assertEquals(39, Node.EMPTY_BLOCK);
503:       assertEquals(50, Node.FREE_CALL);
504:       assertEquals(48, Node.DIRECTIVES);
505:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
506:       assertEquals(40, Node.ORIGINALNAME_PROP);
507:       assertEquals(4095, Node.COLUMN_MASK);
508:       assertEquals(1, Node.DECR_FLAG);
509:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
510:       assertEquals(54, Node.SLASH_V);
511:       assertEquals(43, Node.IS_CONSTANT_NAME);
512:       assertEquals(32, Node.INCRDECR_PROP);
513:       assertEquals(46, Node.IS_NAMESPACE);
514:       assertEquals(51, Node.STATIC_SOURCE_FILE);
515:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
516:       assertFalse(node0.equals((Object)node1));
517:       assertFalse(node1.equals((Object)node0));
518:       assertFalse(node0.isName());
519:       assertFalse(node0.isStringKey());
520:       assertFalse(node0.isVar());
521:       assertFalse(node0.isBlock());
522:       assertFalse(node0.isNull());
523:       assertFalse(node0.isSetterDef());
524:       assertFalse(node0.isDo());
525:       assertFalse(node0.isNew());
526:       assertFalse(node0.isAdd());
527:       assertFalse(node0.hasMoreThanOneChild());
528:       assertFalse(node0.isCatch());
529:       assertFalse(node0.isReturn());
530:       assertFalse(node0.isOr());
531:       assertEquals(39, node0.getType());
532:       assertFalse(node0.isWhile());
533:       assertFalse(node0.isDec());
534:       assertFalse(node0.isVoid());
535:       assertFalse(node0.isTypeOf());
536:       assertFalse(node0.isRegExp());
537:       assertEquals((-1), node0.getLineno());
538:       assertFalse(node0.isGetElem());
539:       assertFalse(node0.isCall());
540:       assertFalse(node0.isArrayLit());
541:       assertFalse(node0.hasOneChild());
542:       assertFalse(node0.isLabelName());
543:       assertFalse(node0.isTrue());
544:       assertFalse(node0.isFor());
545:       assertFalse(node0.isDefaultCase());
546:       assertFalse(node0.isTry());
547:       assertFalse(node0.isGetterDef());
548:       assertFalse(node0.isEmpty());
549:       assertFalse(node0.isScript());
550:       assertEquals(0, node0.getChildCount());
551:       assertFalse(node0.isAssignAdd());
552:       assertFalse(node0.isLabel());
553:       assertFalse(node0.isSwitch());
554:       assertFalse(node0.isParamList());
555:       assertFalse(node0.isFalse());
556:       assertFalse(node0.isThrow());
557:       assertFalse(node0.isHook());
558:       assertFalse(node0.isInc());
559:       assertEquals((-1), node0.getCharno());
560:       assertFalse(node0.isString());
561:       assertFalse(node0.isCase());
562:       assertFalse(node0.isGetProp());
563:       assertFalse(node0.isIn());
564:       assertFalse(node0.isComma());
565:       assertFalse(node0.isThis());
566:       assertFalse(node0.isNE());
567:       assertFalse(node0.isIf());
568:       assertFalse(node0.isDelProp());
569:       assertFalse(node0.isWith());
570:       assertFalse(node0.isBreak());
571:       assertFalse(node0.isInstanceOf());
572:       assertFalse(node0.isExprResult());
573:       assertFalse(node0.isCast());
574:       assertFalse(node0.isAssign());
575:       assertFalse(node0.hasChildren());
576:       assertEquals((-1), node0.getSourcePosition());
577:       assertFalse(node0.isDebugger());
578:       assertTrue(node0.isNumber());
579:       assertFalse(node0.isAnd());
580:       assertFalse(node0.isContinue());
581:       assertFalse(node0.isObjectLit());
582:       assertFalse(node0.isNot());
583:       assertFalse(node0.isFunction());
584:       assertFalse(node1.isCase());
585:       assertFalse(node1.isSwitch());
586:       assertEquals(0, node1.getType());
587:       assertFalse(node1.isFalse());
588:       assertFalse(node1.isThrow());
589:       assertFalse(node1.isEmpty());
590:       assertFalse(node1.isBreak());
591:       assertFalse(node1.isNE());
592:       assertFalse(node1.isDelProp());
593:       assertFalse(node1.isIf());
594:       assertFalse(node1.isInc());
595:       assertFalse(node1.isTrue());
596:       assertFalse(node1.isIn());
597:       assertFalse(node1.isNot());
598:       assertFalse(node1.isAnd());
599:       assertFalse(node1.isVoid());
600:       assertFalse(node1.isComma());
601:       assertFalse(node1.isExprResult());
602:       assertFalse(node1.isCast());
603:       assertFalse(node1.isFunction());
604:       assertEquals(4, node1.getLineno());
605:       assertFalse(node1.isAssign());
606:       assertFalse(node1.hasChildren());
607:       assertFalse(node1.isDebugger());
608:       assertFalse(node1.isGetProp());
609:       assertFalse(node1.isString());
610:       assertFalse(node1.isObjectLit());
611:       assertEquals(38, node1.getCharno());
612:       assertFalse(node1.isDo());
613:       assertFalse(node1.isWhile());
614:       assertFalse(node1.isAssignAdd());
615:       assertFalse(node1.isBlock());
616:       assertFalse(node1.isReturn());
617:       assertFalse(node1.isLabel());
618:       assertFalse(node1.isDec());
619:       assertFalse(node1.isTypeOf());
620:       assertFalse(node1.isContinue());
621:       assertFalse(node1.hasMoreThanOneChild());
622:       assertFalse(node1.isGetElem());
623:       assertFalse(node1.isName());
624:       assertFalse(node1.isCall());
625:       assertFalse(node1.isNull());
626:       assertFalse(node1.isVar());
627:       assertFalse(node1.isNew());
628:       assertFalse(node1.isAdd());
629:       assertFalse(node1.isOr());
630:       assertFalse(node1.isSetterDef());
631:       assertFalse(node1.isDefaultCase());
632:       assertFalse(node1.isThis());
633:       assertFalse(node1.isInstanceOf());
634:       assertFalse(node1.isRegExp());
635:       assertEquals(0, node1.getChildCount());
636:       assertFalse(node1.isCatch());
637:       assertFalse(node1.isWith());
638:       assertFalse(node1.isStringKey());
639:       assertFalse(node1.isFor());
640:       assertFalse(node1.isLabelName());
641:       assertFalse(node1.isArrayLit());
642:       assertFalse(node1.isHook());
643:       assertFalse(node1.hasOneChild());
644:       assertFalse(node1.isParamList());
645:       assertFalse(node1.isTry());
646:       assertFalse(node1.isNumber());
647:       assertEquals(16422, node1.getSourcePosition());
648:       assertFalse(node1.isScript());
649:       assertFalse(node1.isGetterDef());
650:       
651:       boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
652:       assertFalse(boolean1);
653:       assertEquals(49, Node.DIRECT_EVAL);
654:       assertEquals(30, Node.VAR_ARGS_NAME);
655:       assertEquals(1, Node.DECR_FLAG);
656:       assertEquals(57, Node.LAST_PROP);
657:       assertEquals(12, Node.COLUMN_BITS);
658:       assertEquals(51, Node.STATIC_SOURCE_FILE);
659:       assertEquals(46, Node.IS_NAMESPACE);
660:       assertEquals(54, Node.SLASH_V);
661:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
662:       assertEquals(32, Node.INCRDECR_PROP);
663:       assertEquals(52, Node.LENGTH);
664:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
665:       assertEquals(15, Node.NO_SIDE_EFFECTS);
666:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
667:       assertEquals(29, Node.JSDOC_INFO_PROP);
668:       assertEquals(56, Node.CHANGE_TIME);
669:       assertEquals(57, Node.REFLECTED_OBJECT);
670:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
671:       assertEquals(48, Node.DIRECTIVES);
672:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
673:       assertEquals(4095, Node.COLUMN_MASK);
674:       assertEquals(37, Node.OPT_ARG_NAME);
675:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
676:       assertEquals(43, Node.IS_CONSTANT_NAME);
677:       assertEquals(36, Node.QUOTED_PROP);
678:       assertEquals(8, Node.FLAG_NO_THROWS);
679:       assertEquals(55, Node.INFERRED_FUNCTION);
680:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
681:       assertEquals(39, Node.EMPTY_BLOCK);
682:       assertEquals(53, Node.INPUT_ID);
683:       assertEquals(50, Node.FREE_CALL);
684:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
685:       assertEquals(2, Node.POST_FLAG);
686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
687:       assertEquals(47, Node.IS_DISPATCHER);
688:       assertEquals(40, Node.ORIGINALNAME_PROP);
689:       assertEquals(47, Node.IS_DISPATCHER);
690:       assertEquals(2, Node.POST_FLAG);
691:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
692:       assertEquals(37, Node.OPT_ARG_NAME);
693:       assertEquals(56, Node.CHANGE_TIME);
694:       assertEquals(12, Node.COLUMN_BITS);
695:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
696:       assertEquals(15, Node.NO_SIDE_EFFECTS);
697:       assertEquals(57, Node.LAST_PROP);
698:       assertEquals(30, Node.VAR_ARGS_NAME);
699:       assertEquals(49, Node.DIRECT_EVAL);
700:       assertEquals(36, Node.QUOTED_PROP);
701:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
702:       assertEquals(57, Node.REFLECTED_OBJECT);
703:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
704:       assertEquals(53, Node.INPUT_ID);
705:       assertEquals(55, Node.INFERRED_FUNCTION);
706:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
707:       assertEquals(29, Node.JSDOC_INFO_PROP);
708:       assertEquals(52, Node.LENGTH);
709:       assertEquals(8, Node.FLAG_NO_THROWS);
710:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
711:       assertEquals(39, Node.EMPTY_BLOCK);
712:       assertEquals(50, Node.FREE_CALL);
713:       assertEquals(48, Node.DIRECTIVES);
714:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
715:       assertEquals(40, Node.ORIGINALNAME_PROP);
716:       assertEquals(4095, Node.COLUMN_MASK);
717:       assertEquals(1, Node.DECR_FLAG);
718:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
719:       assertEquals(54, Node.SLASH_V);
720:       assertEquals(43, Node.IS_CONSTANT_NAME);
721:       assertEquals(32, Node.INCRDECR_PROP);
722:       assertEquals(46, Node.IS_NAMESPACE);
723:       assertEquals(51, Node.STATIC_SOURCE_FILE);
724:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
725:       assertFalse(node0.equals((Object)node1));
726:       assertFalse(node1.equals((Object)node0));
727:       assertTrue(boolean1 == boolean0);
728:       assertFalse(node0.isName());
729:       assertFalse(node0.isStringKey());
730:       assertFalse(node0.isVar());
731:       assertFalse(node0.isBlock());
732:       assertFalse(node0.isNull());
733:       assertFalse(node0.isSetterDef());
734:       assertFalse(node0.isDo());
735:       assertFalse(node0.isNew());
736:       assertFalse(node0.isAdd());
737:       assertFalse(node0.hasMoreThanOneChild());
738:       assertFalse(node0.isCatch());
739:       assertFalse(node0.isReturn());
740:       assertFalse(node0.isOr());
741:       assertEquals(39, node0.getType());
742:       assertFalse(node0.isWhile());
743:       assertFalse(node0.isDec());
744:       assertFalse(node0.isVoid());
745:       assertFalse(node0.isTypeOf());
746:       assertFalse(node0.isRegExp());
747:       assertEquals((-1), node0.getLineno());
748:       assertFalse(node0.isGetElem());
749:       assertFalse(node0.isCall());
750:       assertFalse(node0.isArrayLit());
751:       assertFalse(node0.hasOneChild());
752:       assertFalse(node0.isLabelName());
753:       assertFalse(node0.isTrue());
754:       assertFalse(node0.isFor());
755:       assertFalse(node0.isDefaultCase());
756:       assertFalse(node0.isTry());
757:       assertFalse(node0.isGetterDef());
758:       assertFalse(node0.isEmpty());
759:       assertFalse(node0.isScript());
760:       assertEquals(0, node0.getChildCount());
761:       assertFalse(node0.isAssignAdd());
762:       assertFalse(node0.isLabel());
763:       assertFalse(node0.isSwitch());
764:       assertFalse(node0.isParamList());
765:       assertFalse(node0.isFalse());
766:       assertFalse(node0.isThrow());
767:       assertFalse(node0.isHook());
768:       assertFalse(node0.isInc());
769:       assertEquals((-1), node0.getCharno());
770:       assertFalse(node0.isString());
771:       assertFalse(node0.isCase());
772:       assertFalse(node0.isGetProp());
773:       assertFalse(node0.isIn());
774:       assertFalse(node0.isComma());
775:       assertFalse(node0.isThis());
776:       assertFalse(node0.isNE());
777:       assertFalse(node0.isIf());
778:       assertFalse(node0.isDelProp());
779:       assertFalse(node0.isWith());
780:       assertFalse(node0.isBreak());
781:       assertFalse(node0.isInstanceOf());
782:       assertFalse(node0.isExprResult());
783:       assertFalse(node0.isCast());
784:       assertFalse(node0.isAssign());
785:       assertFalse(node0.hasChildren());
786:       assertEquals((-1), node0.getSourcePosition());
787:       assertFalse(node0.isDebugger());
788:       assertTrue(node0.isNumber());
789:       assertFalse(node0.isAnd());
790:       assertFalse(node0.isContinue());
791:       assertFalse(node0.isObjectLit());
792:       assertFalse(node0.isNot());
793:       assertFalse(node0.isFunction());
794:       assertFalse(node1.isCase());
795:       assertFalse(node1.isSwitch());
796:       assertEquals(0, node1.getType());
797:       assertFalse(node1.isFalse());
798:       assertFalse(node1.isThrow());
799:       assertFalse(node1.isEmpty());
800:       assertFalse(node1.isBreak());
801:       assertFalse(node1.isNE());
802:       assertFalse(node1.isDelProp());
803:       assertFalse(node1.isIf());
804:       assertFalse(node1.isInc());
805:       assertFalse(node1.isTrue());
806:       assertFalse(node1.isIn());
807:       assertFalse(node1.isNot());
808:       assertFalse(node1.isAnd());
809:       assertFalse(node1.isVoid());
810:       assertFalse(node1.isComma());
811:       assertFalse(node1.isExprResult());
812:       assertFalse(node1.isCast());
813:       assertFalse(node1.isFunction());
814:       assertEquals(4, node1.getLineno());
815:       assertFalse(node1.isAssign());
816:       assertFalse(node1.hasChildren());
817:       assertFalse(node1.isDebugger());
818:       assertFalse(node1.isGetProp());
819:       assertFalse(node1.isString());
820:       assertFalse(node1.isObjectLit());
821:       assertEquals(38, node1.getCharno());
822:       assertFalse(node1.isDo());
823:       assertFalse(node1.isWhile());
824:       assertFalse(node1.isAssignAdd());
825:       assertFalse(node1.isBlock());
826:       assertFalse(node1.isReturn());
827:       assertFalse(node1.isLabel());
828:       assertFalse(node1.isDec());
829:       assertFalse(node1.isTypeOf());
830:       assertFalse(node1.isContinue());
831:       assertFalse(node1.hasMoreThanOneChild());
832:       assertFalse(node1.isGetElem());
833:       assertFalse(node1.isName());
834:       assertFalse(node1.isCall());
835:       assertFalse(node1.isNull());
836:       assertFalse(node1.isVar());
837:       assertFalse(node1.isNew());
838:       assertFalse(node1.isAdd());
839:       assertFalse(node1.isOr());
840:       assertFalse(node1.isSetterDef());
841:       assertFalse(node1.isDefaultCase());
842:       assertFalse(node1.isThis());
843:       assertFalse(node1.isInstanceOf());
844:       assertFalse(node1.isRegExp());
845:       assertEquals(0, node1.getChildCount());
846:       assertFalse(node1.isCatch());
847:       assertFalse(node1.isWith());
848:       assertFalse(node1.isStringKey());
849:       assertFalse(node1.isFor());
850:       assertFalse(node1.isLabelName());
851:       assertFalse(node1.isArrayLit());
852:       assertFalse(node1.isHook());
853:       assertFalse(node1.hasOneChild());
854:       assertFalse(node1.isParamList());
855:       assertFalse(node1.isTry());
856:       assertFalse(node1.isNumber());
857:       assertEquals(16422, node1.getSourcePosition());
858:       assertFalse(node1.isScript());
859:       assertFalse(node1.isGetterDef());
860:       
861:       boolean boolean2 = node1.isVarArgs();
862:       assertFalse(boolean2);
863:       assertEquals(47, Node.IS_DISPATCHER);
864:       assertEquals(2, Node.POST_FLAG);
865:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
866:       assertEquals(37, Node.OPT_ARG_NAME);
867:       assertEquals(56, Node.CHANGE_TIME);
868:       assertEquals(12, Node.COLUMN_BITS);
869:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
870:       assertEquals(15, Node.NO_SIDE_EFFECTS);
871:       assertEquals(57, Node.LAST_PROP);
872:       assertEquals(30, Node.VAR_ARGS_NAME);
873:       assertEquals(49, Node.DIRECT_EVAL);
874:       assertEquals(36, Node.QUOTED_PROP);
875:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
876:       assertEquals(57, Node.REFLECTED_OBJECT);
877:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
878:       assertEquals(53, Node.INPUT_ID);
879:       assertEquals(55, Node.INFERRED_FUNCTION);
880:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
881:       assertEquals(29, Node.JSDOC_INFO_PROP);
882:       assertEquals(52, Node.LENGTH);
883:       assertEquals(8, Node.FLAG_NO_THROWS);
884:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
885:       assertEquals(39, Node.EMPTY_BLOCK);
886:       assertEquals(50, Node.FREE_CALL);
887:       assertEquals(48, Node.DIRECTIVES);
888:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
889:       assertEquals(40, Node.ORIGINALNAME_PROP);
890:       assertEquals(4095, Node.COLUMN_MASK);
891:       assertEquals(1, Node.DECR_FLAG);
892:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
893:       assertEquals(54, Node.SLASH_V);
894:       assertEquals(43, Node.IS_CONSTANT_NAME);
895:       assertEquals(32, Node.INCRDECR_PROP);
896:       assertEquals(46, Node.IS_NAMESPACE);
897:       assertEquals(51, Node.STATIC_SOURCE_FILE);
898:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
899:       assertFalse(node1.equals((Object)node0));
900:       assertTrue(boolean2 == boolean1);
901:       assertTrue(boolean2 == boolean0);
902:       assertFalse(node1.isCase());
903:       assertFalse(node1.isSwitch());
904:       assertEquals(0, node1.getType());
905:       assertFalse(node1.isFalse());
906:       assertFalse(node1.isThrow());
907:       assertFalse(node1.isEmpty());
908:       assertFalse(node1.isBreak());
909:       assertFalse(node1.isNE());
910:       assertFalse(node1.isDelProp());
911:       assertFalse(node1.isIf());
912:       assertFalse(node1.isInc());
913:       assertFalse(node1.isTrue());
914:       assertFalse(node1.isIn());
915:       assertFalse(node1.isNot());
916:       assertFalse(node1.isAnd());
917:       assertFalse(node1.isVoid());
918:       assertFalse(node1.isComma());
919:       assertFalse(node1.isExprResult());
920:       assertFalse(node1.isCast());
921:       assertFalse(node1.isFunction());
922:       assertEquals(4, node1.getLineno());
923:       assertFalse(node1.isAssign());
924:       assertFalse(node1.hasChildren());
925:       assertFalse(node1.isDebugger());
926:       assertFalse(node1.isGetProp());
927:       assertFalse(node1.isString());
928:       assertFalse(node1.isObjectLit());
929:       assertEquals(38, node1.getCharno());
930:       assertFalse(node1.isDo());
931:       assertFalse(node1.isWhile());
932:       assertFalse(node1.isAssignAdd());
933:       assertFalse(node1.isBlock());
934:       assertFalse(node1.isReturn());
935:       assertFalse(node1.isLabel());
936:       assertFalse(node1.isDec());
937:       assertFalse(node1.isTypeOf());
938:       assertFalse(node1.isContinue());
939:       assertFalse(node1.hasMoreThanOneChild());
940:       assertFalse(node1.isGetElem());
941:       assertFalse(node1.isName());
942:       assertFalse(node1.isCall());
943:       assertFalse(node1.isNull());
944:       assertFalse(node1.isVar());
945:       assertFalse(node1.isNew());
946:       assertFalse(node1.isAdd());
947:       assertFalse(node1.isOr());
948:       assertFalse(node1.isSetterDef());
949:       assertFalse(node1.isDefaultCase());
950:       assertFalse(node1.isThis());
951:       assertFalse(node1.isInstanceOf());
952:       assertFalse(node1.isRegExp());
953:       assertEquals(0, node1.getChildCount());
954:       assertFalse(node1.isCatch());
955:       assertFalse(node1.isWith());
956:       assertFalse(node1.isStringKey());
957:       assertFalse(node1.isFor());
958:       assertFalse(node1.isLabelName());
959:       assertFalse(node1.isArrayLit());
960:       assertFalse(node1.isHook());
961:       assertFalse(node1.hasOneChild());
962:       assertFalse(node1.isParamList());
963:       assertFalse(node1.isTry());
964:       assertFalse(node1.isNumber());
965:       assertEquals(16422, node1.getSourcePosition());
966:       assertFalse(node1.isScript());
967:       assertFalse(node1.isGetterDef());
968:       
969:       Iterable<Node> iterable0 = node0.children();
970:       assertFalse(iterable0.contains(node0));
971:       assertEquals(49, Node.DIRECT_EVAL);
972:       assertEquals(30, Node.VAR_ARGS_NAME);
973:       assertEquals(1, Node.DECR_FLAG);
974:       assertEquals(57, Node.LAST_PROP);
975:       assertEquals(12, Node.COLUMN_BITS);
976:       assertEquals(51, Node.STATIC_SOURCE_FILE);
977:       assertEquals(46, Node.IS_NAMESPACE);
978:       assertEquals(54, Node.SLASH_V);
979:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
980:       assertEquals(32, Node.INCRDECR_PROP);
981:       assertEquals(52, Node.LENGTH);
982:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
983:       assertEquals(15, Node.NO_SIDE_EFFECTS);
984:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
985:       assertEquals(29, Node.JSDOC_INFO_PROP);
986:       assertEquals(56, Node.CHANGE_TIME);
987:       assertEquals(57, Node.REFLECTED_OBJECT);
988:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
989:       assertEquals(48, Node.DIRECTIVES);
990:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
991:       assertEquals(4095, Node.COLUMN_MASK);
992:       assertEquals(37, Node.OPT_ARG_NAME);
993:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
994:       assertEquals(43, Node.IS_CONSTANT_NAME);
995:       assertEquals(36, Node.QUOTED_PROP);
996:       assertEquals(8, Node.FLAG_NO_THROWS);
997:       assertEquals(55, Node.INFERRED_FUNCTION);
998:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
999:       assertEquals(39, Node.EMPTY_BLOCK);
1000:       assertEquals(53, Node.INPUT_ID);
1001:       assertEquals(50, Node.FREE_CALL);
1002:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1003:       assertEquals(2, Node.POST_FLAG);
1004:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1005:       assertEquals(47, Node.IS_DISPATCHER);
1006:       assertEquals(40, Node.ORIGINALNAME_PROP);
1007:       assertNotNull(iterable0);
1008:       assertFalse(node0.equals((Object)node1));
1009:       assertFalse(node0.isName());
1010:       assertFalse(node0.isStringKey());
1011:       assertFalse(node0.isVar());
1012:       assertFalse(node0.isBlock());
1013:       assertFalse(node0.isNull());
1014:       assertFalse(node0.isSetterDef());
1015:       assertFalse(node0.isDo());
1016:       assertFalse(node0.isNew());
1017:       assertFalse(node0.isAdd());
1018:       assertFalse(node0.hasMoreThanOneChild());
1019:       assertFalse(node0.isCatch());
1020:       assertFalse(node0.isReturn());
1021:       assertFalse(node0.isOr());
1022:       assertEquals(39, node0.getType());
1023:       assertFalse(node0.isWhile());
1024:       assertFalse(node0.isDec());
1025:       assertFalse(node0.isVoid());
1026:       assertFalse(node0.isTypeOf());
1027:       assertFalse(node0.isRegExp());
1028:       assertEquals((-1), node0.getLineno());
1029:       assertFalse(node0.isGetElem());
1030:       assertFalse(node0.isCall());
1031:       assertFalse(node0.isArrayLit());
1032:       assertFalse(node0.hasOneChild());
1033:       assertFalse(node0.isLabelName());
1034:       assertFalse(node0.isTrue());
1035:       assertFalse(node0.isFor());
1036:       assertFalse(node0.isDefaultCase());
1037:       assertFalse(node0.isTry());
1038:       assertFalse(node0.isGetterDef());
1039:       assertFalse(node0.isEmpty());
1040:       assertFalse(node0.isScript());
1041:       assertEquals(0, node0.getChildCount());
1042:       assertFalse(node0.isAssignAdd());
1043:       assertFalse(node0.isLabel());
1044:       assertFalse(node0.isSwitch());
1045:       assertFalse(node0.isParamList());
1046:       assertFalse(node0.isFalse());
1047:       assertFalse(node0.isThrow());
1048:       assertFalse(node0.isHook());
1049:       assertFalse(node0.isInc());
1050:       assertEquals((-1), node0.getCharno());
1051:       assertFalse(node0.isString());
1052:       assertFalse(node0.isCase());
1053:       assertFalse(node0.isGetProp());
1054:       assertFalse(node0.isIn());
1055:       assertFalse(node0.isComma());
1056:       assertFalse(node0.isThis());
1057:       assertFalse(node0.isNE());
1058:       assertFalse(node0.isIf());
1059:       assertFalse(node0.isDelProp());
1060:       assertFalse(node0.isWith());
1061:       assertFalse(node0.isBreak());
1062:       assertFalse(node0.isInstanceOf());
1063:       assertFalse(node0.isExprResult());
1064:       assertFalse(node0.isCast());
1065:       assertFalse(node0.isAssign());
1066:       assertFalse(node0.hasChildren());
1067:       assertEquals((-1), node0.getSourcePosition());
1068:       assertFalse(node0.isDebugger());
1069:       assertTrue(node0.isNumber());
1070:       assertFalse(node0.isAnd());
1071:       assertFalse(node0.isContinue());
1072:       assertFalse(node0.isObjectLit());
1073:       assertFalse(node0.isNot());
1074:       assertFalse(node0.isFunction());
1075:       
1076:       boolean boolean3 = node0.isIf();
1077:       assertFalse(boolean3);
1078:       assertEquals(49, Node.DIRECT_EVAL);
1079:       assertEquals(30, Node.VAR_ARGS_NAME);
1080:       assertEquals(1, Node.DECR_FLAG);
1081:       assertEquals(57, Node.LAST_PROP);
1082:       assertEquals(12, Node.COLUMN_BITS);
1083:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1084:       assertEquals(46, Node.IS_NAMESPACE);
1085:       assertEquals(54, Node.SLASH_V);
1086:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1087:       assertEquals(32, Node.INCRDECR_PROP);
1088:       assertEquals(52, Node.LENGTH);
1089:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1090:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1091:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1092:       assertEquals(29, Node.JSDOC_INFO_PROP);
1093:       assertEquals(56, Node.CHANGE_TIME);
1094:       assertEquals(57, Node.REFLECTED_OBJECT);
1095:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1096:       assertEquals(48, Node.DIRECTIVES);
1097:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1098:       assertEquals(4095, Node.COLUMN_MASK);
1099:       assertEquals(37, Node.OPT_ARG_NAME);
1100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1101:       assertEquals(43, Node.IS_CONSTANT_NAME);
1102:       assertEquals(36, Node.QUOTED_PROP);
1103:       assertEquals(8, Node.FLAG_NO_THROWS);
1104:       assertEquals(55, Node.INFERRED_FUNCTION);
1105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1106:       assertEquals(39, Node.EMPTY_BLOCK);
1107:       assertEquals(53, Node.INPUT_ID);
1108:       assertEquals(50, Node.FREE_CALL);
1109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1110:       assertEquals(2, Node.POST_FLAG);
1111:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1112:       assertEquals(47, Node.IS_DISPATCHER);
1113:       assertEquals(40, Node.ORIGINALNAME_PROP);
1114:       assertFalse(node0.equals((Object)node1));
1115:       assertTrue(boolean3 == boolean0);
1116:       assertTrue(boolean3 == boolean2);
1117:       assertTrue(boolean3 == boolean1);
1118:       assertFalse(node0.isName());
1119:       assertFalse(node0.isStringKey());
1120:       assertFalse(node0.isVar());
1121:       assertFalse(node0.isBlock());
1122:       assertFalse(node0.isNull());
1123:       assertFalse(node0.isSetterDef());
1124:       assertFalse(node0.isDo());
1125:       assertFalse(node0.isNew());
1126:       assertFalse(node0.isAdd());
1127:       assertFalse(node0.hasMoreThanOneChild());
1128:       assertFalse(node0.isCatch());
1129:       assertFalse(node0.isReturn());
1130:       assertFalse(node0.isOr());
1131:       assertEquals(39, node0.getType());
1132:       assertFalse(node0.isWhile());
1133:       assertFalse(node0.isDec());
1134:       assertFalse(node0.isVoid());
1135:       assertFalse(node0.isTypeOf());
1136:       assertFalse(node0.isRegExp());
1137:       assertEquals((-1), node0.getLineno());
1138:       assertFalse(node0.isGetElem());
1139:       assertFalse(node0.isCall());
1140:       assertFalse(node0.isArrayLit());
1141:       assertFalse(node0.hasOneChild());
1142:       assertFalse(node0.isLabelName());
1143:       assertFalse(node0.isTrue());
1144:       assertFalse(node0.isFor());
1145:       assertFalse(node0.isDefaultCase());
1146:       assertFalse(node0.isTry());
1147:       assertFalse(node0.isGetterDef());
1148:       assertFalse(node0.isEmpty());
1149:       assertFalse(node0.isScript());
1150:       assertEquals(0, node0.getChildCount());
1151:       assertFalse(node0.isAssignAdd());
1152:       assertFalse(node0.isLabel());
1153:       assertFalse(node0.isSwitch());
1154:       assertFalse(node0.isParamList());
1155:       assertFalse(node0.isFalse());
1156:       assertFalse(node0.isThrow());
1157:       assertFalse(node0.isHook());
1158:       assertFalse(node0.isInc());
1159:       assertEquals((-1), node0.getCharno());
1160:       assertFalse(node0.isString());
1161:       assertFalse(node0.isCase());
1162:       assertFalse(node0.isGetProp());
1163:       assertFalse(node0.isIn());
1164:       assertFalse(node0.isComma());
1165:       assertFalse(node0.isThis());
1166:       assertFalse(node0.isNE());
1167:       assertFalse(node0.isIf());
1168:       assertFalse(node0.isDelProp());
1169:       assertFalse(node0.isWith());
1170:       assertFalse(node0.isBreak());
1171:       assertFalse(node0.isInstanceOf());
1172:       assertFalse(node0.isExprResult());
1173:       assertFalse(node0.isCast());
1174:       assertFalse(node0.isAssign());
1175:       assertFalse(node0.hasChildren());
1176:       assertEquals((-1), node0.getSourcePosition());
1177:       assertFalse(node0.isDebugger());
1178:       assertTrue(node0.isNumber());
1179:       assertFalse(node0.isAnd());
1180:       assertFalse(node0.isContinue());
1181:       assertFalse(node0.isObjectLit());
1182:       assertFalse(node0.isNot());
1183:       assertFalse(node0.isFunction());
1184:       
1185:       boolean boolean4 = node1.isVoid();
1186:       assertFalse(boolean4);
1187:       assertEquals(47, Node.IS_DISPATCHER);
1188:       assertEquals(2, Node.POST_FLAG);
1189:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1190:       assertEquals(37, Node.OPT_ARG_NAME);
1191:       assertEquals(56, Node.CHANGE_TIME);
1192:       assertEquals(12, Node.COLUMN_BITS);
1193:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1194:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1195:       assertEquals(57, Node.LAST_PROP);
1196:       assertEquals(30, Node.VAR_ARGS_NAME);
1197:       assertEquals(49, Node.DIRECT_EVAL);
1198:       assertEquals(36, Node.QUOTED_PROP);
1199:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1200:       assertEquals(57, Node.REFLECTED_OBJECT);
1201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1202:       assertEquals(53, Node.INPUT_ID);
1203:       assertEquals(55, Node.INFERRED_FUNCTION);
1204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1205:       assertEquals(29, Node.JSDOC_INFO_PROP);
1206:       assertEquals(52, Node.LENGTH);
1207:       assertEquals(8, Node.FLAG_NO_THROWS);
1208:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1209:       assertEquals(39, Node.EMPTY_BLOCK);
1210:       assertEquals(50, Node.FREE_CALL);
1211:       assertEquals(48, Node.DIRECTIVES);
1212:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1213:       assertEquals(40, Node.ORIGINALNAME_PROP);
1214:       assertEquals(4095, Node.COLUMN_MASK);
1215:       assertEquals(1, Node.DECR_FLAG);
1216:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1217:       assertEquals(54, Node.SLASH_V);
1218:       assertEquals(43, Node.IS_CONSTANT_NAME);
1219:       assertEquals(32, Node.INCRDECR_PROP);
1220:       assertEquals(46, Node.IS_NAMESPACE);
1221:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1222:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1223:       assertFalse(node1.equals((Object)node0));
1224:       assertTrue(boolean4 == boolean0);
1225:       assertTrue(boolean4 == boolean1);
1226:       assertTrue(boolean4 == boolean2);
1227:       assertTrue(boolean4 == boolean3);
1228:       assertFalse(node1.isCase());
1229:       assertFalse(node1.isSwitch());
1230:       assertEquals(0, node1.getType());
1231:       assertFalse(node1.isFalse());
1232:       assertFalse(node1.isThrow());
1233:       assertFalse(node1.isEmpty());
1234:       assertFalse(node1.isBreak());
1235:       assertFalse(node1.isNE());
1236:       assertFalse(node1.isDelProp());
1237:       assertFalse(node1.isIf());
1238:       assertFalse(node1.isInc());
1239:       assertFalse(node1.isTrue());
1240:       assertFalse(node1.isIn());
1241:       assertFalse(node1.isNot());
1242:       assertFalse(node1.isAnd());
1243:       assertFalse(node1.isVoid());
1244:       assertFalse(node1.isComma());
1245:       assertFalse(node1.isExprResult());
1246:       assertFalse(node1.isCast());
1247:       assertFalse(node1.isFunction());
1248:       assertEquals(4, node1.getLineno());
1249:       assertFalse(node1.isAssign());
1250:       assertFalse(node1.hasChildren());
1251:       assertFalse(node1.isDebugger());
1252:       assertFalse(node1.isGetProp());
1253:       assertFalse(node1.isString());
1254:       assertFalse(node1.isObjectLit());
1255:       assertEquals(38, node1.getCharno());
1256:       assertFalse(node1.isDo());
1257:       assertFalse(node1.isWhile());
1258:       assertFalse(node1.isAssignAdd());
1259:       assertFalse(node1.isBlock());
1260:       assertFalse(node1.isReturn());
1261:       assertFalse(node1.isLabel());
1262:       assertFalse(node1.isDec());
1263:       assertFalse(node1.isTypeOf());
1264:       assertFalse(node1.isContinue());
1265:       assertFalse(node1.hasMoreThanOneChild());
1266:       assertFalse(node1.isGetElem());
1267:       assertFalse(node1.isName());
1268:       assertFalse(node1.isCall());
1269:       assertFalse(node1.isNull());
1270:       assertFalse(node1.isVar());
1271:       assertFalse(node1.isNew());
1272:       assertFalse(node1.isAdd());
1273:       assertFalse(node1.isOr());
1274:       assertFalse(node1.isSetterDef());
1275:       assertFalse(node1.isDefaultCase());
1276:       assertFalse(node1.isThis());
1277:       assertFalse(node1.isInstanceOf());
1278:       assertFalse(node1.isRegExp());
1279:       assertEquals(0, node1.getChildCount());
1280:       assertFalse(node1.isCatch());
1281:       assertFalse(node1.isWith());
1282:       assertFalse(node1.isStringKey());
1283:       assertFalse(node1.isFor());
1284:       assertFalse(node1.isLabelName());
1285:       assertFalse(node1.isArrayLit());
1286:       assertFalse(node1.isHook());
1287:       assertFalse(node1.hasOneChild());
1288:       assertFalse(node1.isParamList());
1289:       assertFalse(node1.isTry());
1290:       assertFalse(node1.isNumber());
1291:       assertEquals(16422, node1.getSourcePosition());
1292:       assertFalse(node1.isScript());
1293:       assertFalse(node1.isGetterDef());
1294:       
1295:       node0.setInputId((InputId) null);
1296:       assertEquals(49, Node.DIRECT_EVAL);
1297:       assertEquals(30, Node.VAR_ARGS_NAME);
1298:       assertEquals(1, Node.DECR_FLAG);
1299:       assertEquals(57, Node.LAST_PROP);
1300:       assertEquals(12, Node.COLUMN_BITS);
1301:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1302:       assertEquals(46, Node.IS_NAMESPACE);
1303:       assertEquals(54, Node.SLASH_V);
1304:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1305:       assertEquals(32, Node.INCRDECR_PROP);
1306:       assertEquals(52, Node.LENGTH);
1307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1308:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1309:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1310:       assertEquals(29, Node.JSDOC_INFO_PROP);
1311:       assertEquals(56, Node.CHANGE_TIME);
1312:       assertEquals(57, Node.REFLECTED_OBJECT);
1313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1314:       assertEquals(48, Node.DIRECTIVES);
1315:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1316:       assertEquals(4095, Node.COLUMN_MASK);
1317:       assertEquals(37, Node.OPT_ARG_NAME);
1318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1319:       assertEquals(43, Node.IS_CONSTANT_NAME);
1320:       assertEquals(36, Node.QUOTED_PROP);
1321:       assertEquals(8, Node.FLAG_NO_THROWS);
1322:       assertEquals(55, Node.INFERRED_FUNCTION);
1323:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1324:       assertEquals(39, Node.EMPTY_BLOCK);
1325:       assertEquals(53, Node.INPUT_ID);
1326:       assertEquals(50, Node.FREE_CALL);
1327:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1328:       assertEquals(2, Node.POST_FLAG);
1329:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1330:       assertEquals(47, Node.IS_DISPATCHER);
1331:       assertEquals(40, Node.ORIGINALNAME_PROP);
1332:       assertFalse(node0.equals((Object)node1));
1333:       assertFalse(node0.isName());
1334:       assertFalse(node0.isStringKey());
1335:       assertFalse(node0.isVar());
1336:       assertFalse(node0.isBlock());
1337:       assertFalse(node0.isNull());
1338:       assertFalse(node0.isSetterDef());
1339:       assertFalse(node0.isDo());
1340:       assertFalse(node0.isNew());
1341:       assertFalse(node0.isAdd());
1342:       assertFalse(node0.hasMoreThanOneChild());
1343:       assertFalse(node0.isCatch());
1344:       assertFalse(node0.isReturn());
1345:       assertFalse(node0.isOr());
1346:       assertEquals(39, node0.getType());
1347:       assertFalse(node0.isWhile());
1348:       assertFalse(node0.isDec());
1349:       assertFalse(node0.isVoid());
1350:       assertFalse(node0.isTypeOf());
1351:       assertFalse(node0.isRegExp());
1352:       assertEquals((-1), node0.getLineno());
1353:       assertFalse(node0.isGetElem());
1354:       assertFalse(node0.isCall());
1355:       assertFalse(node0.isArrayLit());
1356:       assertFalse(node0.hasOneChild());
1357:       assertFalse(node0.isLabelName());
1358:       assertFalse(node0.isTrue());
1359:       assertFalse(node0.isFor());
1360:       assertFalse(node0.isDefaultCase());
1361:       assertFalse(node0.isTry());
1362:       assertFalse(node0.isGetterDef());
1363:       assertFalse(node0.isEmpty());
1364:       assertFalse(node0.isScript());
1365:       assertEquals(0, node0.getChildCount());
1366:       assertFalse(node0.isAssignAdd());
1367:       assertFalse(node0.isLabel());
1368:       assertFalse(node0.isSwitch());
1369:       assertFalse(node0.isParamList());
1370:       assertFalse(node0.isFalse());
1371:       assertFalse(node0.isThrow());
1372:       assertFalse(node0.isHook());
1373:       assertFalse(node0.isInc());
1374:       assertEquals((-1), node0.getCharno());
1375:       assertFalse(node0.isString());
1376:       assertFalse(node0.isCase());
1377:       assertFalse(node0.isGetProp());
1378:       assertFalse(node0.isIn());
1379:       assertFalse(node0.isComma());
1380:       assertFalse(node0.isThis());
1381:       assertFalse(node0.isNE());
1382:       assertFalse(node0.isIf());
1383:       assertFalse(node0.isDelProp());
1384:       assertFalse(node0.isWith());
1385:       assertFalse(node0.isBreak());
1386:       assertFalse(node0.isInstanceOf());
1387:       assertFalse(node0.isExprResult());
1388:       assertFalse(node0.isCast());
1389:       assertFalse(node0.isAssign());
1390:       assertFalse(node0.hasChildren());
1391:       assertEquals((-1), node0.getSourcePosition());
1392:       assertFalse(node0.isDebugger());
1393:       assertTrue(node0.isNumber());
1394:       assertFalse(node0.isAnd());
1395:       assertFalse(node0.isContinue());
1396:       assertFalse(node0.isObjectLit());
1397:       assertFalse(node0.isNot());
1398:       assertFalse(node0.isFunction());
1399:       
1400:       node0.setType(46);
1401:       assertEquals(49, Node.DIRECT_EVAL);
1402:       assertEquals(30, Node.VAR_ARGS_NAME);
1403:       assertEquals(1, Node.DECR_FLAG);
1404:       assertEquals(57, Node.LAST_PROP);
1405:       assertEquals(12, Node.COLUMN_BITS);
1406:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1407:       assertEquals(46, Node.IS_NAMESPACE);
1408:       assertEquals(54, Node.SLASH_V);
1409:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1410:       assertEquals(32, Node.INCRDECR_PROP);
1411:       assertEquals(52, Node.LENGTH);
1412:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1413:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1414:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1415:       assertEquals(29, Node.JSDOC_INFO_PROP);
1416:       assertEquals(56, Node.CHANGE_TIME);
1417:       assertEquals(57, Node.REFLECTED_OBJECT);
1418:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1419:       assertEquals(48, Node.DIRECTIVES);
1420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1421:       assertEquals(4095, Node.COLUMN_MASK);
1422:       assertEquals(37, Node.OPT_ARG_NAME);
1423:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1424:       assertEquals(43, Node.IS_CONSTANT_NAME);
1425:       assertEquals(36, Node.QUOTED_PROP);
1426:       assertEquals(8, Node.FLAG_NO_THROWS);
1427:       assertEquals(55, Node.INFERRED_FUNCTION);
1428:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1429:       assertEquals(39, Node.EMPTY_BLOCK);
1430:       assertEquals(53, Node.INPUT_ID);
1431:       assertEquals(50, Node.FREE_CALL);
1432:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1433:       assertEquals(2, Node.POST_FLAG);
1434:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1435:       assertEquals(47, Node.IS_DISPATCHER);
1436:       assertEquals(40, Node.ORIGINALNAME_PROP);
1437:       assertFalse(node0.equals((Object)node1));
1438:       assertFalse(node0.isName());
1439:       assertFalse(node0.isStringKey());
1440:       assertFalse(node0.isVar());
1441:       assertFalse(node0.isBlock());
1442:       assertFalse(node0.isNull());
1443:       assertFalse(node0.isSetterDef());
1444:       assertFalse(node0.isDo());
1445:       assertFalse(node0.isNew());
1446:       assertFalse(node0.isAdd());
1447:       assertFalse(node0.hasMoreThanOneChild());
1448:       assertFalse(node0.isCatch());
1449:       assertFalse(node0.isReturn());
1450:       assertFalse(node0.isOr());
1451:       assertFalse(node0.isWhile());
1452:       assertFalse(node0.isDec());
1453:       assertFalse(node0.isVoid());
1454:       assertFalse(node0.isTypeOf());
1455:       assertFalse(node0.isRegExp());
1456:       assertEquals((-1), node0.getLineno());
1457:       assertFalse(node0.isGetElem());
1458:       assertFalse(node0.isCall());
1459:       assertFalse(node0.isArrayLit());
1460:       assertFalse(node0.hasOneChild());
1461:       assertFalse(node0.isLabelName());
1462:       assertFalse(node0.isTrue());
1463:       assertFalse(node0.isFor());
1464:       assertFalse(node0.isDefaultCase());
1465:       assertFalse(node0.isNumber());
1466:       assertFalse(node0.isTry());
1467:       assertFalse(node0.isGetterDef());
1468:       assertFalse(node0.isEmpty());
1469:       assertFalse(node0.isScript());
1470:       assertEquals(0, node0.getChildCount());
1471:       assertFalse(node0.isAssignAdd());
1472:       assertFalse(node0.isLabel());
1473:       assertFalse(node0.isSwitch());
1474:       assertFalse(node0.isParamList());
1475:       assertFalse(node0.isFalse());
1476:       assertFalse(node0.isThrow());
1477:       assertFalse(node0.isHook());
1478:       assertFalse(node0.isInc());
1479:       assertEquals((-1), node0.getCharno());
1480:       assertFalse(node0.isString());
1481:       assertEquals(46, node0.getType());
1482:       assertFalse(node0.isCase());
1483:       assertFalse(node0.isGetProp());
1484:       assertFalse(node0.isIn());
1485:       assertFalse(node0.isComma());
1486:       assertFalse(node0.isThis());
1487:       assertFalse(node0.isNE());
1488:       assertFalse(node0.isIf());
1489:       assertFalse(node0.isDelProp());
1490:       assertFalse(node0.isWith());
1491:       assertFalse(node0.isBreak());
1492:       assertFalse(node0.isInstanceOf());
1493:       assertFalse(node0.isExprResult());
1494:       assertFalse(node0.isCast());
1495:       assertFalse(node0.isAssign());
1496:       assertFalse(node0.hasChildren());
1497:       assertEquals((-1), node0.getSourcePosition());
1498:       assertFalse(node0.isDebugger());
1499:       assertFalse(node0.isAnd());
1500:       assertFalse(node0.isContinue());
1501:       assertFalse(node0.isObjectLit());
1502:       assertFalse(node0.isNot());
1503:       assertFalse(node0.isFunction());
1504:       
1505:       boolean boolean5 = node1.hasChildren();
1506:       assertFalse(boolean5);
1507:       assertEquals(47, Node.IS_DISPATCHER);
1508:       assertEquals(2, Node.POST_FLAG);
1509:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1510:       assertEquals(37, Node.OPT_ARG_NAME);
1511:       assertEquals(56, Node.CHANGE_TIME);
1512:       assertEquals(12, Node.COLUMN_BITS);
1513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1514:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1515:       assertEquals(57, Node.LAST_PROP);
1516:       assertEquals(30, Node.VAR_ARGS_NAME);
1517:       assertEquals(49, Node.DIRECT_EVAL);
1518:       assertEquals(36, Node.QUOTED_PROP);
1519:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1520:       assertEquals(57, Node.REFLECTED_OBJECT);
1521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1522:       assertEquals(53, Node.INPUT_ID);
1523:       assertEquals(55, Node.INFERRED_FUNCTION);
1524:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1525:       assertEquals(29, Node.JSDOC_INFO_PROP);
1526:       assertEquals(52, Node.LENGTH);
1527:       assertEquals(8, Node.FLAG_NO_THROWS);
1528:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1529:       assertEquals(39, Node.EMPTY_BLOCK);
1530:       assertEquals(50, Node.FREE_CALL);
1531:       assertEquals(48, Node.DIRECTIVES);
1532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1533:       assertEquals(40, Node.ORIGINALNAME_PROP);
1534:       assertEquals(4095, Node.COLUMN_MASK);
1535:       assertEquals(1, Node.DECR_FLAG);
1536:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1537:       assertEquals(54, Node.SLASH_V);
1538:       assertEquals(43, Node.IS_CONSTANT_NAME);
1539:       assertEquals(32, Node.INCRDECR_PROP);
1540:       assertEquals(46, Node.IS_NAMESPACE);
1541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1542:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1543:       assertFalse(node1.equals((Object)node0));
1544:       assertTrue(boolean5 == boolean2);
1545:       assertTrue(boolean5 == boolean4);
1546:       assertTrue(boolean5 == boolean0);
1547:       assertTrue(boolean5 == boolean3);
1548:       assertTrue(boolean5 == boolean1);
1549:       assertFalse(node1.isCase());
1550:       assertFalse(node1.isSwitch());
1551:       assertEquals(0, node1.getType());
1552:       assertFalse(node1.isFalse());
1553:       assertFalse(node1.isThrow());
1554:       assertFalse(node1.isEmpty());
1555:       assertFalse(node1.isBreak());
1556:       assertFalse(node1.isNE());
1557:       assertFalse(node1.isDelProp());
1558:       assertFalse(node1.isIf());
1559:       assertFalse(node1.isInc());
1560:       assertFalse(node1.isTrue());
1561:       assertFalse(node1.isIn());
1562:       assertFalse(node1.isNot());
1563:       assertFalse(node1.isAnd());
1564:       assertFalse(node1.isVoid());
1565:       assertFalse(node1.isComma());
1566:       assertFalse(node1.isExprResult());
1567:       assertFalse(node1.isCast());
1568:       assertFalse(node1.isFunction());
1569:       assertEquals(4, node1.getLineno());
1570:       assertFalse(node1.isAssign());
1571:       assertFalse(node1.hasChildren());
1572:       assertFalse(node1.isDebugger());
1573:       assertFalse(node1.isGetProp());
1574:       assertFalse(node1.isString());
1575:       assertFalse(node1.isObjectLit());
1576:       assertEquals(38, node1.getCharno());
1577:       assertFalse(node1.isDo());
1578:       assertFalse(node1.isWhile());
1579:       assertFalse(node1.isAssignAdd());
1580:       assertFalse(node1.isBlock());
1581:       assertFalse(node1.isReturn());
1582:       assertFalse(node1.isLabel());
1583:       assertFalse(node1.isDec());
1584:       assertFalse(node1.isTypeOf());
1585:       assertFalse(node1.isContinue());
1586:       assertFalse(node1.hasMoreThanOneChild());
1587:       assertFalse(node1.isGetElem());
1588:       assertFalse(node1.isName());
1589:       assertFalse(node1.isCall());
1590:       assertFalse(node1.isNull());
1591:       assertFalse(node1.isVar());
1592:       assertFalse(node1.isNew());
1593:       assertFalse(node1.isAdd());
1594:       assertFalse(node1.isOr());
1595:       assertFalse(node1.isSetterDef());
1596:       assertFalse(node1.isDefaultCase());
1597:       assertFalse(node1.isThis());
1598:       assertFalse(node1.isInstanceOf());
1599:       assertFalse(node1.isRegExp());
1600:       assertEquals(0, node1.getChildCount());
1601:       assertFalse(node1.isCatch());
1602:       assertFalse(node1.isWith());
1603:       assertFalse(node1.isStringKey());
1604:       assertFalse(node1.isFor());
1605:       assertFalse(node1.isLabelName());
1606:       assertFalse(node1.isArrayLit());
1607:       assertFalse(node1.isHook());
1608:       assertFalse(node1.hasOneChild());
1609:       assertFalse(node1.isParamList());
1610:       assertFalse(node1.isTry());
1611:       assertFalse(node1.isNumber());
1612:       assertEquals(16422, node1.getSourcePosition());
1613:       assertFalse(node1.isScript());
1614:       assertFalse(node1.isGetterDef());
1615:       
1616:       InputId inputId0 = node0.getInputId();
1617:       assertEquals(49, Node.DIRECT_EVAL);
1618:       assertEquals(30, Node.VAR_ARGS_NAME);
1619:       assertEquals(1, Node.DECR_FLAG);
1620:       assertEquals(57, Node.LAST_PROP);
1621:       assertEquals(12, Node.COLUMN_BITS);
1622:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1623:       assertEquals(46, Node.IS_NAMESPACE);
1624:       assertEquals(54, Node.SLASH_V);
1625:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1626:       assertEquals(32, Node.INCRDECR_PROP);
1627:       assertEquals(52, Node.LENGTH);
1628:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1629:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1630:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1631:       assertEquals(29, Node.JSDOC_INFO_PROP);
1632:       assertEquals(56, Node.CHANGE_TIME);
1633:       assertEquals(57, Node.REFLECTED_OBJECT);
1634:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1635:       assertEquals(48, Node.DIRECTIVES);
1636:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1637:       assertEquals(4095, Node.COLUMN_MASK);
1638:       assertEquals(37, Node.OPT_ARG_NAME);
1639:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1640:       assertEquals(43, Node.IS_CONSTANT_NAME);
1641:       assertEquals(36, Node.QUOTED_PROP);
1642:       assertEquals(8, Node.FLAG_NO_THROWS);
1643:       assertEquals(55, Node.INFERRED_FUNCTION);
1644:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1645:       assertEquals(39, Node.EMPTY_BLOCK);
1646:       assertEquals(53, Node.INPUT_ID);
1647:       assertEquals(50, Node.FREE_CALL);
1648:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1649:       assertEquals(2, Node.POST_FLAG);
1650:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1651:       assertEquals(47, Node.IS_DISPATCHER);
1652:       assertEquals(40, Node.ORIGINALNAME_PROP);
1653:       assertNull(inputId0);
1654:       assertFalse(node0.equals((Object)node1));
1655:       assertFalse(node0.isName());
1656:       assertFalse(node0.isStringKey());
1657:       assertFalse(node0.isVar());
1658:       assertFalse(node0.isBlock());
1659:       assertFalse(node0.isNull());
1660:       assertFalse(node0.isSetterDef());
1661:       assertFalse(node0.isDo());
1662:       assertFalse(node0.isNew());
1663:       assertFalse(node0.isAdd());
1664:       assertFalse(node0.hasMoreThanOneChild());
1665:       assertFalse(node0.isCatch());
1666:       assertFalse(node0.isReturn());
1667:       assertFalse(node0.isOr());
1668:       assertFalse(node0.isWhile());
1669:       assertFalse(node0.isDec());
1670:       assertFalse(node0.isVoid());
1671:       assertFalse(node0.isTypeOf());
1672:       assertFalse(node0.isRegExp());
1673:       assertEquals((-1), node0.getLineno());
1674:       assertFalse(node0.isGetElem());
1675:       assertFalse(node0.isCall());
1676:       assertFalse(node0.isArrayLit());
1677:       assertFalse(node0.hasOneChild());
1678:       assertFalse(node0.isLabelName());
1679:       assertFalse(node0.isTrue());
1680:       assertFalse(node0.isFor());
1681:       assertFalse(node0.isDefaultCase());
1682:       assertFalse(node0.isNumber());
1683:       assertFalse(node0.isTry());
1684:       assertFalse(node0.isGetterDef());
1685:       assertFalse(node0.isEmpty());
1686:       assertFalse(node0.isScript());
1687:       assertEquals(0, node0.getChildCount());
1688:       assertFalse(node0.isAssignAdd());
1689:       assertFalse(node0.isLabel());
1690:       assertFalse(node0.isSwitch());
1691:       assertFalse(node0.isParamList());
1692:       assertFalse(node0.isFalse());
1693:       assertFalse(node0.isThrow());
1694:       assertFalse(node0.isHook());
1695:       assertFalse(node0.isInc());
1696:       assertEquals((-1), node0.getCharno());
1697:       assertFalse(node0.isString());
1698:       assertEquals(46, node0.getType());
1699:       assertFalse(node0.isCase());
1700:       assertFalse(node0.isGetProp());
1701:       assertFalse(node0.isIn());
1702:       assertFalse(node0.isComma());
1703:       assertFalse(node0.isThis());
1704:       assertFalse(node0.isNE());
1705:       assertFalse(node0.isIf());
1706:       assertFalse(node0.isDelProp());
1707:       assertFalse(node0.isWith());
1708:       assertFalse(node0.isBreak());
1709:       assertFalse(node0.isInstanceOf());
1710:       assertFalse(node0.isExprResult());
1711:       assertFalse(node0.isCast());
1712:       assertFalse(node0.isAssign());
1713:       assertFalse(node0.hasChildren());
1714:       assertEquals((-1), node0.getSourcePosition());
1715:       assertFalse(node0.isDebugger());
1716:       assertFalse(node0.isAnd());
1717:       assertFalse(node0.isContinue());
1718:       assertFalse(node0.isObjectLit());
1719:       assertFalse(node0.isNot());
1720:       assertFalse(node0.isFunction());
1721:       
1722:       // Undeclared exception!
1723:       try { 
1724:         node0.setSideEffectFlags(49);
1725:         fail("Expecting exception: IllegalArgumentException");
1726:       
1727:       } catch(IllegalArgumentException e) {
1728:          //
1729:          // setIsNoSideEffectsCall only supports CALL and NEW nodes, got SHNE
1730:          //
1731:          verifyException("com.google.common.base.Preconditions", e);
1732:       }
1733:   }
1734: }
RegularFileObject[/tmp/EvoSuite_54_1628157873115/com/google/javascript/rhino/Node_54_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:33 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_54_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_54_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_54_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:33.768 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());

Node node1 = Node.newString(0, "", 4, 38);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertEquals(4, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertEquals(4, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

boolean boolean0 = node_NodeMismatch0.equals("");
assertFalse(boolean0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertEquals(4, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
assertFalse(boolean1);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertEquals(4, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

boolean boolean2 = node1.isVarArgs();
assertFalse(boolean2);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertEquals(4, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());

boolean boolean3 = node0.isIf();
assertFalse(boolean3);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());

boolean boolean4 = node1.isVoid();
assertFalse(boolean4);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertEquals(4, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

node0.setInputId((InputId) null);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());

node0.setType(46);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertEquals(46, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());

boolean boolean5 = node1.hasChildren();
assertFalse(boolean5);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertEquals(4, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(38, node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

InputId inputId0 = node0.getInputId();
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNull(inputId0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertEquals(46, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());

node0.setSideEffectFlags(49);

[MASTER] 10:04:34.300 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_63_1628157874173/com/google/javascript/rhino/Node_63_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_63_1628157874173/com/google/javascript/rhino/Node_63_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:34.301 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:34.301 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:34.301 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 549
[MASTER] 10:04:34.303 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_63_1628157874173/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:34 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_63_tmp__ESTest extends Node_63_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(308, 308, 308);
21:       assertEquals(32, Node.INCRDECR_PROP);
22:       assertEquals(46, Node.IS_NAMESPACE);
23:       assertEquals(2, Node.POST_FLAG);
24:       assertEquals(12, Node.COLUMN_BITS);
25:       assertEquals(51, Node.STATIC_SOURCE_FILE);
26:       assertEquals(47, Node.IS_DISPATCHER);
27:       assertEquals(29, Node.JSDOC_INFO_PROP);
28:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
29:       assertEquals(57, Node.LAST_PROP);
30:       assertEquals(15, Node.NO_SIDE_EFFECTS);
31:       assertEquals(1, Node.DECR_FLAG);
32:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
33:       assertEquals(54, Node.SLASH_V);
34:       assertEquals(30, Node.VAR_ARGS_NAME);
35:       assertEquals(43, Node.IS_CONSTANT_NAME);
36:       assertEquals(40, Node.ORIGINALNAME_PROP);
37:       assertEquals(4095, Node.COLUMN_MASK);
38:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
39:       assertEquals(8, Node.FLAG_NO_THROWS);
40:       assertEquals(50, Node.FREE_CALL);
41:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
42:       assertEquals(55, Node.INFERRED_FUNCTION);
43:       assertEquals(39, Node.EMPTY_BLOCK);
44:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
45:       assertEquals(53, Node.INPUT_ID);
46:       assertEquals(52, Node.LENGTH);
47:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
48:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
49:       assertEquals(36, Node.QUOTED_PROP);
50:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
51:       assertEquals(57, Node.REFLECTED_OBJECT);
52:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
53:       assertEquals(49, Node.DIRECT_EVAL);
54:       assertEquals(56, Node.CHANGE_TIME);
55:       assertEquals(37, Node.OPT_ARG_NAME);
56:       assertEquals(48, Node.DIRECTIVES);
57:       assertNotNull(node0);
58:       assertFalse(node0.isSwitch());
59:       assertFalse(node0.isHook());
60:       assertFalse(node0.isThrow());
61:       assertFalse(node0.isIn());
62:       assertFalse(node0.isString());
63:       assertFalse(node0.isCase());
64:       assertFalse(node0.isInc());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isAnd());
67:       assertFalse(node0.isFalse());
68:       assertFalse(node0.isArrayLit());
69:       assertFalse(node0.isTry());
70:       assertFalse(node0.isRegExp());
71:       assertEquals(308, node0.getLineno());
72:       assertFalse(node0.isFunction());
73:       assertFalse(node0.hasOneChild());
74:       assertFalse(node0.isScript());
75:       assertFalse(node0.isNE());
76:       assertEquals(308, node0.getType());
77:       assertFalse(node0.isIf());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.isThis());
80:       assertFalse(node0.isCatch());
81:       assertFalse(node0.hasMoreThanOneChild());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.isInstanceOf());
84:       assertFalse(node0.isNew());
85:       assertEquals(1261876, node0.getSourcePosition());
86:       assertFalse(node0.isWhile());
87:       assertFalse(node0.isVar());
88:       assertFalse(node0.isBlock());
89:       assertFalse(node0.isDo());
90:       assertFalse(node0.isAdd());
91:       assertFalse(node0.isSetterDef());
92:       assertFalse(node0.isParamList());
93:       assertFalse(node0.isAssignAdd());
94:       assertFalse(node0.isNumber());
95:       assertEquals(0, node0.getChildCount());
96:       assertFalse(node0.isLabel());
97:       assertFalse(node0.isContinue());
98:       assertFalse(node0.isCast());
99:       assertFalse(node0.isStringKey());
100:       assertFalse(node0.isLabelName());
101:       assertFalse(node0.isVoid());
102:       assertFalse(node0.isExprResult());
103:       assertFalse(node0.isDebugger());
104:       assertFalse(node0.isTrue());
105:       assertFalse(node0.isDefaultCase());
106:       assertFalse(node0.isObjectLit());
107:       assertFalse(node0.isNot());
108:       assertEquals(308, node0.getCharno());
109:       assertFalse(node0.isEmpty());
110:       assertFalse(node0.isGetProp());
111:       assertFalse(node0.isComma());
112:       assertFalse(node0.isTypeOf());
113:       assertFalse(node0.hasChildren());
114:       assertFalse(node0.isDec());
115:       assertFalse(node0.isAssign());
116:       assertFalse(node0.isOr());
117:       assertFalse(node0.isNull());
118:       assertFalse(node0.isReturn());
119:       assertFalse(node0.isCall());
120:       assertFalse(node0.isName());
121:       assertFalse(node0.isBreak());
122:       assertFalse(node0.isDelProp());
123:       assertFalse(node0.isGetElem());
124:       
125:       Node node1 = new Node(0, node0, 40, 41);
126:       assertEquals(32, Node.INCRDECR_PROP);
127:       assertEquals(46, Node.IS_NAMESPACE);
128:       assertEquals(2, Node.POST_FLAG);
129:       assertEquals(12, Node.COLUMN_BITS);
130:       assertEquals(51, Node.STATIC_SOURCE_FILE);
131:       assertEquals(47, Node.IS_DISPATCHER);
132:       assertEquals(29, Node.JSDOC_INFO_PROP);
133:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
134:       assertEquals(57, Node.LAST_PROP);
135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
136:       assertEquals(1, Node.DECR_FLAG);
137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
138:       assertEquals(54, Node.SLASH_V);
139:       assertEquals(30, Node.VAR_ARGS_NAME);
140:       assertEquals(43, Node.IS_CONSTANT_NAME);
141:       assertEquals(40, Node.ORIGINALNAME_PROP);
142:       assertEquals(4095, Node.COLUMN_MASK);
143:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
144:       assertEquals(8, Node.FLAG_NO_THROWS);
145:       assertEquals(50, Node.FREE_CALL);
146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
147:       assertEquals(55, Node.INFERRED_FUNCTION);
148:       assertEquals(39, Node.EMPTY_BLOCK);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(53, Node.INPUT_ID);
151:       assertEquals(52, Node.LENGTH);
152:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
153:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
156:       assertEquals(57, Node.REFLECTED_OBJECT);
157:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
158:       assertEquals(49, Node.DIRECT_EVAL);
159:       assertEquals(56, Node.CHANGE_TIME);
160:       assertEquals(37, Node.OPT_ARG_NAME);
161:       assertEquals(48, Node.DIRECTIVES);
162:       assertEquals(30, Node.VAR_ARGS_NAME);
163:       assertEquals(49, Node.DIRECT_EVAL);
164:       assertEquals(57, Node.LAST_PROP);
165:       assertEquals(54, Node.SLASH_V);
166:       assertEquals(51, Node.STATIC_SOURCE_FILE);
167:       assertEquals(12, Node.COLUMN_BITS);
168:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
169:       assertEquals(46, Node.IS_NAMESPACE);
170:       assertEquals(40, Node.ORIGINALNAME_PROP);
171:       assertEquals(37, Node.OPT_ARG_NAME);
172:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
173:       assertEquals(50, Node.FREE_CALL);
174:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
175:       assertEquals(32, Node.INCRDECR_PROP);
176:       assertEquals(1, Node.DECR_FLAG);
177:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
178:       assertEquals(43, Node.IS_CONSTANT_NAME);
179:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
180:       assertEquals(36, Node.QUOTED_PROP);
181:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
182:       assertEquals(4095, Node.COLUMN_MASK);
183:       assertEquals(48, Node.DIRECTIVES);
184:       assertEquals(29, Node.JSDOC_INFO_PROP);
185:       assertEquals(56, Node.CHANGE_TIME);
186:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
187:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
188:       assertEquals(8, Node.FLAG_NO_THROWS);
189:       assertEquals(2, Node.POST_FLAG);
190:       assertEquals(57, Node.REFLECTED_OBJECT);
191:       assertEquals(47, Node.IS_DISPATCHER);
192:       assertEquals(52, Node.LENGTH);
193:       assertEquals(39, Node.EMPTY_BLOCK);
194:       assertEquals(55, Node.INFERRED_FUNCTION);
195:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
196:       assertEquals(53, Node.INPUT_ID);
197:       assertEquals(15, Node.NO_SIDE_EFFECTS);
198:       assertNotNull(node1);
199:       assertFalse(node1.equals((Object)node0));
200:       assertFalse(node0.isSwitch());
201:       assertFalse(node0.isHook());
202:       assertFalse(node0.isThrow());
203:       assertFalse(node0.isIn());
204:       assertFalse(node0.isString());
205:       assertFalse(node0.isCase());
206:       assertFalse(node0.isInc());
207:       assertFalse(node0.isGetterDef());
208:       assertFalse(node0.isAnd());
209:       assertFalse(node0.isFalse());
210:       assertFalse(node0.isArrayLit());
211:       assertFalse(node0.isTry());
212:       assertFalse(node0.isRegExp());
213:       assertEquals(308, node0.getLineno());
214:       assertFalse(node0.isFunction());
215:       assertFalse(node0.hasOneChild());
216:       assertFalse(node0.isScript());
217:       assertFalse(node0.isNE());
218:       assertEquals(308, node0.getType());
219:       assertFalse(node0.isIf());
220:       assertFalse(node0.isFor());
221:       assertFalse(node0.isThis());
222:       assertFalse(node0.isCatch());
223:       assertFalse(node0.hasMoreThanOneChild());
224:       assertFalse(node0.isWith());
225:       assertFalse(node0.isInstanceOf());
226:       assertFalse(node0.isNew());
227:       assertEquals(1261876, node0.getSourcePosition());
228:       assertFalse(node0.isWhile());
229:       assertFalse(node0.isVar());
230:       assertFalse(node0.isBlock());
231:       assertFalse(node0.isDo());
232:       assertFalse(node0.isAdd());
233:       assertFalse(node0.isSetterDef());
234:       assertFalse(node0.isParamList());
235:       assertFalse(node0.isAssignAdd());
236:       assertFalse(node0.isNumber());
237:       assertEquals(0, node0.getChildCount());
238:       assertFalse(node0.isLabel());
239:       assertFalse(node0.isContinue());
240:       assertFalse(node0.isCast());
241:       assertFalse(node0.isStringKey());
242:       assertFalse(node0.isLabelName());
243:       assertFalse(node0.isVoid());
244:       assertFalse(node0.isExprResult());
245:       assertFalse(node0.isDebugger());
246:       assertFalse(node0.isTrue());
247:       assertFalse(node0.isDefaultCase());
248:       assertFalse(node0.isObjectLit());
249:       assertFalse(node0.isNot());
250:       assertEquals(308, node0.getCharno());
251:       assertFalse(node0.isEmpty());
252:       assertFalse(node0.isGetProp());
253:       assertFalse(node0.isComma());
254:       assertFalse(node0.isTypeOf());
255:       assertFalse(node0.hasChildren());
256:       assertFalse(node0.isDec());
257:       assertFalse(node0.isAssign());
258:       assertFalse(node0.isOr());
259:       assertFalse(node0.isNull());
260:       assertFalse(node0.isReturn());
261:       assertFalse(node0.isCall());
262:       assertFalse(node0.isName());
263:       assertFalse(node0.isBreak());
264:       assertFalse(node0.isDelProp());
265:       assertFalse(node0.isGetElem());
266:       assertFalse(node1.isStringKey());
267:       assertFalse(node1.isName());
268:       assertFalse(node1.isVar());
269:       assertFalse(node1.isNull());
270:       assertFalse(node1.isBlock());
271:       assertFalse(node1.isParamList());
272:       assertFalse(node1.isCall());
273:       assertFalse(node1.isCatch());
274:       assertFalse(node1.hasMoreThanOneChild());
275:       assertFalse(node1.isWhile());
276:       assertFalse(node1.isReturn());
277:       assertFalse(node1.isDebugger());
278:       assertFalse(node1.isTry());
279:       assertFalse(node1.isNumber());
280:       assertFalse(node1.isIf());
281:       assertFalse(node1.isNE());
282:       assertFalse(node1.isFor());
283:       assertEquals(40, node1.getLineno());
284:       assertFalse(node1.isRegExp());
285:       assertFalse(node1.isFunction());
286:       assertFalse(node1.isCast());
287:       assertTrue(node1.hasChildren());
288:       assertFalse(node1.isContinue());
289:       assertEquals(163881, node1.getSourcePosition());
290:       assertFalse(node1.isIn());
291:       assertFalse(node1.isInc());
292:       assertFalse(node1.isSetterDef());
293:       assertFalse(node1.isThrow());
294:       assertFalse(node1.isFalse());
295:       assertFalse(node1.isHook());
296:       assertFalse(node1.isThis());
297:       assertFalse(node1.isComma());
298:       assertFalse(node1.isSwitch());
299:       assertFalse(node1.isBreak());
300:       assertFalse(node1.isInstanceOf());
301:       assertEquals(41, node1.getCharno());
302:       assertEquals(0, node1.getType());
303:       assertFalse(node1.isAnd());
304:       assertFalse(node1.isObjectLit());
305:       assertFalse(node1.isCase());
306:       assertFalse(node1.isNot());
307:       assertFalse(node1.isWith());
308:       assertEquals(1, node1.getChildCount());
309:       assertFalse(node1.isGetProp());
310:       assertFalse(node1.isString());
311:       assertFalse(node1.isScript());
312:       assertFalse(node1.isAssign());
313:       assertFalse(node1.isLabelName());
314:       assertFalse(node1.isGetterDef());
315:       assertFalse(node1.isDec());
316:       assertTrue(node1.hasOneChild());
317:       assertFalse(node1.isVoid());
318:       assertFalse(node1.isExprResult());
319:       assertFalse(node1.isTypeOf());
320:       assertFalse(node1.isDelProp());
321:       assertFalse(node1.isArrayLit());
322:       assertFalse(node1.isGetElem());
323:       assertFalse(node1.isDo());
324:       assertFalse(node1.isLabel());
325:       assertFalse(node1.isTrue());
326:       assertFalse(node1.isNew());
327:       assertFalse(node1.isAssignAdd());
328:       assertFalse(node1.isOr());
329:       assertFalse(node1.isDefaultCase());
330:       assertFalse(node1.isEmpty());
331:       assertFalse(node1.isAdd());
332:       
333:       boolean boolean0 = node0.hasOneChild();
334:       assertFalse(boolean0);
335:       assertEquals(32, Node.INCRDECR_PROP);
336:       assertEquals(46, Node.IS_NAMESPACE);
337:       assertEquals(2, Node.POST_FLAG);
338:       assertEquals(12, Node.COLUMN_BITS);
339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
340:       assertEquals(47, Node.IS_DISPATCHER);
341:       assertEquals(29, Node.JSDOC_INFO_PROP);
342:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
343:       assertEquals(57, Node.LAST_PROP);
344:       assertEquals(15, Node.NO_SIDE_EFFECTS);
345:       assertEquals(1, Node.DECR_FLAG);
346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
347:       assertEquals(54, Node.SLASH_V);
348:       assertEquals(30, Node.VAR_ARGS_NAME);
349:       assertEquals(43, Node.IS_CONSTANT_NAME);
350:       assertEquals(40, Node.ORIGINALNAME_PROP);
351:       assertEquals(4095, Node.COLUMN_MASK);
352:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
353:       assertEquals(8, Node.FLAG_NO_THROWS);
354:       assertEquals(50, Node.FREE_CALL);
355:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
356:       assertEquals(55, Node.INFERRED_FUNCTION);
357:       assertEquals(39, Node.EMPTY_BLOCK);
358:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
359:       assertEquals(53, Node.INPUT_ID);
360:       assertEquals(52, Node.LENGTH);
361:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
362:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
363:       assertEquals(36, Node.QUOTED_PROP);
364:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
365:       assertEquals(57, Node.REFLECTED_OBJECT);
366:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
367:       assertEquals(49, Node.DIRECT_EVAL);
368:       assertEquals(56, Node.CHANGE_TIME);
369:       assertEquals(37, Node.OPT_ARG_NAME);
370:       assertEquals(48, Node.DIRECTIVES);
371:       assertNotSame(node0, node1);
372:       assertFalse(node0.equals((Object)node1));
373:       assertFalse(node0.isSwitch());
374:       assertFalse(node0.isHook());
375:       assertFalse(node0.isThrow());
376:       assertFalse(node0.isIn());
377:       assertFalse(node0.isString());
378:       assertFalse(node0.isCase());
379:       assertFalse(node0.isInc());
380:       assertFalse(node0.isGetterDef());
381:       assertFalse(node0.isAnd());
382:       assertFalse(node0.isFalse());
383:       assertFalse(node0.isArrayLit());
384:       assertFalse(node0.isTry());
385:       assertFalse(node0.isRegExp());
386:       assertEquals(308, node0.getLineno());
387:       assertFalse(node0.isFunction());
388:       assertFalse(node0.hasOneChild());
389:       assertFalse(node0.isScript());
390:       assertFalse(node0.isNE());
391:       assertEquals(308, node0.getType());
392:       assertFalse(node0.isIf());
393:       assertFalse(node0.isFor());
394:       assertFalse(node0.isThis());
395:       assertFalse(node0.isCatch());
396:       assertFalse(node0.hasMoreThanOneChild());
397:       assertFalse(node0.isWith());
398:       assertFalse(node0.isInstanceOf());
399:       assertFalse(node0.isNew());
400:       assertEquals(1261876, node0.getSourcePosition());
401:       assertFalse(node0.isWhile());
402:       assertFalse(node0.isVar());
403:       assertFalse(node0.isBlock());
404:       assertFalse(node0.isDo());
405:       assertFalse(node0.isAdd());
406:       assertFalse(node0.isSetterDef());
407:       assertFalse(node0.isParamList());
408:       assertFalse(node0.isAssignAdd());
409:       assertFalse(node0.isNumber());
410:       assertEquals(0, node0.getChildCount());
411:       assertFalse(node0.isLabel());
412:       assertFalse(node0.isContinue());
413:       assertFalse(node0.isCast());
414:       assertFalse(node0.isStringKey());
415:       assertFalse(node0.isLabelName());
416:       assertFalse(node0.isVoid());
417:       assertFalse(node0.isExprResult());
418:       assertFalse(node0.isDebugger());
419:       assertFalse(node0.isTrue());
420:       assertFalse(node0.isDefaultCase());
421:       assertFalse(node0.isObjectLit());
422:       assertFalse(node0.isNot());
423:       assertEquals(308, node0.getCharno());
424:       assertFalse(node0.isEmpty());
425:       assertFalse(node0.isGetProp());
426:       assertFalse(node0.isComma());
427:       assertFalse(node0.isTypeOf());
428:       assertFalse(node0.hasChildren());
429:       assertFalse(node0.isDec());
430:       assertFalse(node0.isAssign());
431:       assertFalse(node0.isOr());
432:       assertFalse(node0.isNull());
433:       assertFalse(node0.isReturn());
434:       assertFalse(node0.isCall());
435:       assertFalse(node0.isName());
436:       assertFalse(node0.isBreak());
437:       assertFalse(node0.isDelProp());
438:       assertFalse(node0.isGetElem());
439:       
440:       boolean boolean1 = node0.isDo();
441:       assertFalse(boolean1);
442:       assertEquals(32, Node.INCRDECR_PROP);
443:       assertEquals(46, Node.IS_NAMESPACE);
444:       assertEquals(2, Node.POST_FLAG);
445:       assertEquals(12, Node.COLUMN_BITS);
446:       assertEquals(51, Node.STATIC_SOURCE_FILE);
447:       assertEquals(47, Node.IS_DISPATCHER);
448:       assertEquals(29, Node.JSDOC_INFO_PROP);
449:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
450:       assertEquals(57, Node.LAST_PROP);
451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
452:       assertEquals(1, Node.DECR_FLAG);
453:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
454:       assertEquals(54, Node.SLASH_V);
455:       assertEquals(30, Node.VAR_ARGS_NAME);
456:       assertEquals(43, Node.IS_CONSTANT_NAME);
457:       assertEquals(40, Node.ORIGINALNAME_PROP);
458:       assertEquals(4095, Node.COLUMN_MASK);
459:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
460:       assertEquals(8, Node.FLAG_NO_THROWS);
461:       assertEquals(50, Node.FREE_CALL);
462:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
463:       assertEquals(55, Node.INFERRED_FUNCTION);
464:       assertEquals(39, Node.EMPTY_BLOCK);
465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
466:       assertEquals(53, Node.INPUT_ID);
467:       assertEquals(52, Node.LENGTH);
468:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
469:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
470:       assertEquals(36, Node.QUOTED_PROP);
471:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
472:       assertEquals(57, Node.REFLECTED_OBJECT);
473:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
474:       assertEquals(49, Node.DIRECT_EVAL);
475:       assertEquals(56, Node.CHANGE_TIME);
476:       assertEquals(37, Node.OPT_ARG_NAME);
477:       assertEquals(48, Node.DIRECTIVES);
478:       assertNotSame(node0, node1);
479:       assertFalse(node0.equals((Object)node1));
480:       assertTrue(boolean1 == boolean0);
481:       assertFalse(node0.isSwitch());
482:       assertFalse(node0.isHook());
483:       assertFalse(node0.isThrow());
484:       assertFalse(node0.isIn());
485:       assertFalse(node0.isString());
486:       assertFalse(node0.isCase());
487:       assertFalse(node0.isInc());
488:       assertFalse(node0.isGetterDef());
489:       assertFalse(node0.isAnd());
490:       assertFalse(node0.isFalse());
491:       assertFalse(node0.isArrayLit());
492:       assertFalse(node0.isTry());
493:       assertFalse(node0.isRegExp());
494:       assertEquals(308, node0.getLineno());
495:       assertFalse(node0.isFunction());
496:       assertFalse(node0.hasOneChild());
497:       assertFalse(node0.isScript());
498:       assertFalse(node0.isNE());
499:       assertEquals(308, node0.getType());
500:       assertFalse(node0.isIf());
501:       assertFalse(node0.isFor());
502:       assertFalse(node0.isThis());
503:       assertFalse(node0.isCatch());
504:       assertFalse(node0.hasMoreThanOneChild());
505:       assertFalse(node0.isWith());
506:       assertFalse(node0.isInstanceOf());
507:       assertFalse(node0.isNew());
508:       assertEquals(1261876, node0.getSourcePosition());
509:       assertFalse(node0.isWhile());
510:       assertFalse(node0.isVar());
511:       assertFalse(node0.isBlock());
512:       assertFalse(node0.isDo());
513:       assertFalse(node0.isAdd());
514:       assertFalse(node0.isSetterDef());
515:       assertFalse(node0.isParamList());
516:       assertFalse(node0.isAssignAdd());
517:       assertFalse(node0.isNumber());
518:       assertEquals(0, node0.getChildCount());
519:       assertFalse(node0.isLabel());
520:       assertFalse(node0.isContinue());
521:       assertFalse(node0.isCast());
522:       assertFalse(node0.isStringKey());
523:       assertFalse(node0.isLabelName());
524:       assertFalse(node0.isVoid());
525:       assertFalse(node0.isExprResult());
526:       assertFalse(node0.isDebugger());
527:       assertFalse(node0.isTrue());
528:       assertFalse(node0.isDefaultCase());
529:       assertFalse(node0.isObjectLit());
530:       assertFalse(node0.isNot());
531:       assertEquals(308, node0.getCharno());
532:       assertFalse(node0.isEmpty());
533:       assertFalse(node0.isGetProp());
534:       assertFalse(node0.isComma());
535:       assertFalse(node0.isTypeOf());
536:       assertFalse(node0.hasChildren());
537:       assertFalse(node0.isDec());
538:       assertFalse(node0.isAssign());
539:       assertFalse(node0.isOr());
540:       assertFalse(node0.isNull());
541:       assertFalse(node0.isReturn());
542:       assertFalse(node0.isCall());
543:       assertFalse(node0.isName());
544:       assertFalse(node0.isBreak());
545:       assertFalse(node0.isDelProp());
546:       assertFalse(node0.isGetElem());
547:       
548:       Iterable<Node> iterable0 = node0.children();
549:       assertFalse(iterable0.contains(node1));
550:       assertEquals(32, Node.INCRDECR_PROP);
551:       assertEquals(46, Node.IS_NAMESPACE);
552:       assertEquals(2, Node.POST_FLAG);
553:       assertEquals(12, Node.COLUMN_BITS);
554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
555:       assertEquals(47, Node.IS_DISPATCHER);
556:       assertEquals(29, Node.JSDOC_INFO_PROP);
557:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
558:       assertEquals(57, Node.LAST_PROP);
559:       assertEquals(15, Node.NO_SIDE_EFFECTS);
560:       assertEquals(1, Node.DECR_FLAG);
561:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
562:       assertEquals(54, Node.SLASH_V);
563:       assertEquals(30, Node.VAR_ARGS_NAME);
564:       assertEquals(43, Node.IS_CONSTANT_NAME);
565:       assertEquals(40, Node.ORIGINALNAME_PROP);
566:       assertEquals(4095, Node.COLUMN_MASK);
567:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
568:       assertEquals(8, Node.FLAG_NO_THROWS);
569:       assertEquals(50, Node.FREE_CALL);
570:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
571:       assertEquals(55, Node.INFERRED_FUNCTION);
572:       assertEquals(39, Node.EMPTY_BLOCK);
573:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
574:       assertEquals(53, Node.INPUT_ID);
575:       assertEquals(52, Node.LENGTH);
576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
577:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
578:       assertEquals(36, Node.QUOTED_PROP);
579:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
580:       assertEquals(57, Node.REFLECTED_OBJECT);
581:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
582:       assertEquals(49, Node.DIRECT_EVAL);
583:       assertEquals(56, Node.CHANGE_TIME);
584:       assertEquals(37, Node.OPT_ARG_NAME);
585:       assertEquals(48, Node.DIRECTIVES);
586:       assertNotSame(node0, node1);
587:       assertNotNull(iterable0);
588:       assertFalse(node0.equals((Object)node1));
589:       assertFalse(node0.isSwitch());
590:       assertFalse(node0.isHook());
591:       assertFalse(node0.isThrow());
592:       assertFalse(node0.isIn());
593:       assertFalse(node0.isString());
594:       assertFalse(node0.isCase());
595:       assertFalse(node0.isInc());
596:       assertFalse(node0.isGetterDef());
597:       assertFalse(node0.isAnd());
598:       assertFalse(node0.isFalse());
599:       assertFalse(node0.isArrayLit());
600:       assertFalse(node0.isTry());
601:       assertFalse(node0.isRegExp());
602:       assertEquals(308, node0.getLineno());
603:       assertFalse(node0.isFunction());
604:       assertFalse(node0.hasOneChild());
605:       assertFalse(node0.isScript());
606:       assertFalse(node0.isNE());
607:       assertEquals(308, node0.getType());
608:       assertFalse(node0.isIf());
609:       assertFalse(node0.isFor());
610:       assertFalse(node0.isThis());
611:       assertFalse(node0.isCatch());
612:       assertFalse(node0.hasMoreThanOneChild());
613:       assertFalse(node0.isWith());
614:       assertFalse(node0.isInstanceOf());
615:       assertFalse(node0.isNew());
616:       assertEquals(1261876, node0.getSourcePosition());
617:       assertFalse(node0.isWhile());
618:       assertFalse(node0.isVar());
619:       assertFalse(node0.isBlock());
620:       assertFalse(node0.isDo());
621:       assertFalse(node0.isAdd());
622:       assertFalse(node0.isSetterDef());
623:       assertFalse(node0.isParamList());
624:       assertFalse(node0.isAssignAdd());
625:       assertFalse(node0.isNumber());
626:       assertEquals(0, node0.getChildCount());
627:       assertFalse(node0.isLabel());
628:       assertFalse(node0.isContinue());
629:       assertFalse(node0.isCast());
630:       assertFalse(node0.isStringKey());
631:       assertFalse(node0.isLabelName());
632:       assertFalse(node0.isVoid());
633:       assertFalse(node0.isExprResult());
634:       assertFalse(node0.isDebugger());
635:       assertFalse(node0.isTrue());
636:       assertFalse(node0.isDefaultCase());
637:       assertFalse(node0.isObjectLit());
638:       assertFalse(node0.isNot());
639:       assertEquals(308, node0.getCharno());
640:       assertFalse(node0.isEmpty());
641:       assertFalse(node0.isGetProp());
642:       assertFalse(node0.isComma());
643:       assertFalse(node0.isTypeOf());
644:       assertFalse(node0.hasChildren());
645:       assertFalse(node0.isDec());
646:       assertFalse(node0.isAssign());
647:       assertFalse(node0.isOr());
648:       assertFalse(node0.isNull());
649:       assertFalse(node0.isReturn());
650:       assertFalse(node0.isCall());
651:       assertFalse(node0.isName());
652:       assertFalse(node0.isBreak());
653:       assertFalse(node0.isDelProp());
654:       assertFalse(node0.isGetElem());
655:       
656:       boolean boolean2 = node0.isHook();
657:       assertFalse(boolean2);
658:       assertEquals(32, Node.INCRDECR_PROP);
659:       assertEquals(46, Node.IS_NAMESPACE);
660:       assertEquals(2, Node.POST_FLAG);
661:       assertEquals(12, Node.COLUMN_BITS);
662:       assertEquals(51, Node.STATIC_SOURCE_FILE);
663:       assertEquals(47, Node.IS_DISPATCHER);
664:       assertEquals(29, Node.JSDOC_INFO_PROP);
665:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
666:       assertEquals(57, Node.LAST_PROP);
667:       assertEquals(15, Node.NO_SIDE_EFFECTS);
668:       assertEquals(1, Node.DECR_FLAG);
669:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
670:       assertEquals(54, Node.SLASH_V);
671:       assertEquals(30, Node.VAR_ARGS_NAME);
672:       assertEquals(43, Node.IS_CONSTANT_NAME);
673:       assertEquals(40, Node.ORIGINALNAME_PROP);
674:       assertEquals(4095, Node.COLUMN_MASK);
675:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
676:       assertEquals(8, Node.FLAG_NO_THROWS);
677:       assertEquals(50, Node.FREE_CALL);
678:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
679:       assertEquals(55, Node.INFERRED_FUNCTION);
680:       assertEquals(39, Node.EMPTY_BLOCK);
681:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
682:       assertEquals(53, Node.INPUT_ID);
683:       assertEquals(52, Node.LENGTH);
684:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
685:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
686:       assertEquals(36, Node.QUOTED_PROP);
687:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
688:       assertEquals(57, Node.REFLECTED_OBJECT);
689:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
690:       assertEquals(49, Node.DIRECT_EVAL);
691:       assertEquals(56, Node.CHANGE_TIME);
692:       assertEquals(37, Node.OPT_ARG_NAME);
693:       assertEquals(48, Node.DIRECTIVES);
694:       assertNotSame(node0, node1);
695:       assertFalse(node0.equals((Object)node1));
696:       assertTrue(boolean2 == boolean1);
697:       assertTrue(boolean2 == boolean0);
698:       assertFalse(node0.isSwitch());
699:       assertFalse(node0.isHook());
700:       assertFalse(node0.isThrow());
701:       assertFalse(node0.isIn());
702:       assertFalse(node0.isString());
703:       assertFalse(node0.isCase());
704:       assertFalse(node0.isInc());
705:       assertFalse(node0.isGetterDef());
706:       assertFalse(node0.isAnd());
707:       assertFalse(node0.isFalse());
708:       assertFalse(node0.isArrayLit());
709:       assertFalse(node0.isTry());
710:       assertFalse(node0.isRegExp());
711:       assertEquals(308, node0.getLineno());
712:       assertFalse(node0.isFunction());
713:       assertFalse(node0.hasOneChild());
714:       assertFalse(node0.isScript());
715:       assertFalse(node0.isNE());
716:       assertEquals(308, node0.getType());
717:       assertFalse(node0.isIf());
718:       assertFalse(node0.isFor());
719:       assertFalse(node0.isThis());
720:       assertFalse(node0.isCatch());
721:       assertFalse(node0.hasMoreThanOneChild());
722:       assertFalse(node0.isWith());
723:       assertFalse(node0.isInstanceOf());
724:       assertFalse(node0.isNew());
725:       assertEquals(1261876, node0.getSourcePosition());
726:       assertFalse(node0.isWhile());
727:       assertFalse(node0.isVar());
728:       assertFalse(node0.isBlock());
729:       assertFalse(node0.isDo());
730:       assertFalse(node0.isAdd());
731:       assertFalse(node0.isSetterDef());
732:       assertFalse(node0.isParamList());
733:       assertFalse(node0.isAssignAdd());
734:       assertFalse(node0.isNumber());
735:       assertEquals(0, node0.getChildCount());
736:       assertFalse(node0.isLabel());
737:       assertFalse(node0.isContinue());
738:       assertFalse(node0.isCast());
739:       assertFalse(node0.isStringKey());
740:       assertFalse(node0.isLabelName());
741:       assertFalse(node0.isVoid());
742:       assertFalse(node0.isExprResult());
743:       assertFalse(node0.isDebugger());
744:       assertFalse(node0.isTrue());
745:       assertFalse(node0.isDefaultCase());
746:       assertFalse(node0.isObjectLit());
747:       assertFalse(node0.isNot());
748:       assertEquals(308, node0.getCharno());
749:       assertFalse(node0.isEmpty());
750:       assertFalse(node0.isGetProp());
751:       assertFalse(node0.isComma());
752:       assertFalse(node0.isTypeOf());
753:       assertFalse(node0.hasChildren());
754:       assertFalse(node0.isDec());
755:       assertFalse(node0.isAssign());
756:       assertFalse(node0.isOr());
757:       assertFalse(node0.isNull());
758:       assertFalse(node0.isReturn());
759:       assertFalse(node0.isCall());
760:       assertFalse(node0.isName());
761:       assertFalse(node0.isBreak());
762:       assertFalse(node0.isDelProp());
763:       assertFalse(node0.isGetElem());
764:       
765:       boolean boolean3 = node0.isOnlyModifiesThisCall();
766:       assertFalse(boolean3);
767:       assertEquals(32, Node.INCRDECR_PROP);
768:       assertEquals(46, Node.IS_NAMESPACE);
769:       assertEquals(2, Node.POST_FLAG);
770:       assertEquals(12, Node.COLUMN_BITS);
771:       assertEquals(51, Node.STATIC_SOURCE_FILE);
772:       assertEquals(47, Node.IS_DISPATCHER);
773:       assertEquals(29, Node.JSDOC_INFO_PROP);
774:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
775:       assertEquals(57, Node.LAST_PROP);
776:       assertEquals(15, Node.NO_SIDE_EFFECTS);
777:       assertEquals(1, Node.DECR_FLAG);
778:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
779:       assertEquals(54, Node.SLASH_V);
780:       assertEquals(30, Node.VAR_ARGS_NAME);
781:       assertEquals(43, Node.IS_CONSTANT_NAME);
782:       assertEquals(40, Node.ORIGINALNAME_PROP);
783:       assertEquals(4095, Node.COLUMN_MASK);
784:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
785:       assertEquals(8, Node.FLAG_NO_THROWS);
786:       assertEquals(50, Node.FREE_CALL);
787:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
788:       assertEquals(55, Node.INFERRED_FUNCTION);
789:       assertEquals(39, Node.EMPTY_BLOCK);
790:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
791:       assertEquals(53, Node.INPUT_ID);
792:       assertEquals(52, Node.LENGTH);
793:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
794:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
795:       assertEquals(36, Node.QUOTED_PROP);
796:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
797:       assertEquals(57, Node.REFLECTED_OBJECT);
798:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
799:       assertEquals(49, Node.DIRECT_EVAL);
800:       assertEquals(56, Node.CHANGE_TIME);
801:       assertEquals(37, Node.OPT_ARG_NAME);
802:       assertEquals(48, Node.DIRECTIVES);
803:       assertNotSame(node0, node1);
804:       assertFalse(node0.equals((Object)node1));
805:       assertTrue(boolean3 == boolean1);
806:       assertTrue(boolean3 == boolean0);
807:       assertTrue(boolean3 == boolean2);
808:       assertFalse(node0.isSwitch());
809:       assertFalse(node0.isHook());
810:       assertFalse(node0.isThrow());
811:       assertFalse(node0.isIn());
812:       assertFalse(node0.isString());
813:       assertFalse(node0.isCase());
814:       assertFalse(node0.isInc());
815:       assertFalse(node0.isGetterDef());
816:       assertFalse(node0.isAnd());
817:       assertFalse(node0.isFalse());
818:       assertFalse(node0.isArrayLit());
819:       assertFalse(node0.isTry());
820:       assertFalse(node0.isRegExp());
821:       assertEquals(308, node0.getLineno());
822:       assertFalse(node0.isFunction());
823:       assertFalse(node0.hasOneChild());
824:       assertFalse(node0.isScript());
825:       assertFalse(node0.isNE());
826:       assertEquals(308, node0.getType());
827:       assertFalse(node0.isIf());
828:       assertFalse(node0.isFor());
829:       assertFalse(node0.isThis());
830:       assertFalse(node0.isCatch());
831:       assertFalse(node0.hasMoreThanOneChild());
832:       assertFalse(node0.isWith());
833:       assertFalse(node0.isInstanceOf());
834:       assertFalse(node0.isNew());
835:       assertEquals(1261876, node0.getSourcePosition());
836:       assertFalse(node0.isWhile());
837:       assertFalse(node0.isVar());
838:       assertFalse(node0.isBlock());
839:       assertFalse(node0.isDo());
840:       assertFalse(node0.isAdd());
841:       assertFalse(node0.isSetterDef());
842:       assertFalse(node0.isParamList());
843:       assertFalse(node0.isAssignAdd());
844:       assertFalse(node0.isNumber());
845:       assertEquals(0, node0.getChildCount());
846:       assertFalse(node0.isLabel());
847:       assertFalse(node0.isContinue());
848:       assertFalse(node0.isCast());
849:       assertFalse(node0.isStringKey());
850:       assertFalse(node0.isLabelName());
851:       assertFalse(node0.isVoid());
852:       assertFalse(node0.isExprResult());
853:       assertFalse(node0.isDebugger());
854:       assertFalse(node0.isTrue());
855:       assertFalse(node0.isDefaultCase());
856:       assertFalse(node0.isObjectLit());
857:       assertFalse(node0.isNot());
858:       assertEquals(308, node0.getCharno());
859:       assertFalse(node0.isEmpty());
860:       assertFalse(node0.isGetProp());
861:       assertFalse(node0.isComma());
862:       assertFalse(node0.isTypeOf());
863:       assertFalse(node0.hasChildren());
864:       assertFalse(node0.isDec());
865:       assertFalse(node0.isAssign());
866:       assertFalse(node0.isOr());
867:       assertFalse(node0.isNull());
868:       assertFalse(node0.isReturn());
869:       assertFalse(node0.isCall());
870:       assertFalse(node0.isName());
871:       assertFalse(node0.isBreak());
872:       assertFalse(node0.isDelProp());
873:       assertFalse(node0.isGetElem());
874:   }
875: }
RegularFileObject[/tmp/EvoSuite_63_1628157874173/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:34 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_63_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_63_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_63_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:34.317 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(308, 308, 308);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotNull(node0);
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(308, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertEquals(308, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNew());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(308, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());

Node node1 = new Node(0, node0, 40, 41);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(308, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertEquals(308, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNew());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(308, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isBlock());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertEquals(40, node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertTrue(node1.hasChildren());
assertFalse(node1.isContinue());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertEquals(41, node1.getCharno());
assertEquals(0, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDec());
assertTrue(node1.hasOneChild());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());

boolean boolean0 = node0.hasOneChild();
assertFalse(boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(308, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertEquals(308, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNew());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(308, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());

boolean boolean1 = node0.isDo();
assertFalse(boolean1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(308, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertEquals(308, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNew());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(308, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotSame(node0, node1);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(308, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertEquals(308, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNew());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(308, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());

boolean boolean2 = node0.isHook();
assertFalse(boolean2);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(308, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertEquals(308, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNew());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(308, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());

boolean boolean3 = node0.isOnlyModifiesThisCall();
assertFalse(boolean3);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(308, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertEquals(308, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNew());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(308, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());


[MASTER] 10:04:37.273 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_86_1628157877158/com/google/javascript/rhino/Node_86_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_86_1628157877158/com/google/javascript/rhino/Node_86_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:37.273 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:37.273 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:37.273 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 553
[MASTER] 10:04:37.274 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_86_1628157877158/com/google/javascript/rhino/Node_86_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:37 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.FileSystemHandling;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_86_tmp__ESTest extends Node_86_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
22:       assertNotNull(fileSystemHandling0);
23:       
24:       Node node0 = new Node(308, 308, 308);
25:       assertEquals(12, Node.COLUMN_BITS);
26:       assertEquals(46, Node.IS_NAMESPACE);
27:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
28:       assertEquals(37, Node.OPT_ARG_NAME);
29:       assertEquals(1, Node.DECR_FLAG);
30:       assertEquals(32, Node.INCRDECR_PROP);
31:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
32:       assertEquals(56, Node.CHANGE_TIME);
33:       assertEquals(15, Node.NO_SIDE_EFFECTS);
34:       assertEquals(29, Node.JSDOC_INFO_PROP);
35:       assertEquals(51, Node.STATIC_SOURCE_FILE);
36:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
37:       assertEquals(57, Node.REFLECTED_OBJECT);
38:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
39:       assertEquals(49, Node.DIRECT_EVAL);
40:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
41:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
42:       assertEquals(4095, Node.COLUMN_MASK);
43:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
44:       assertEquals(39, Node.EMPTY_BLOCK);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
47:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
48:       assertEquals(55, Node.INFERRED_FUNCTION);
49:       assertEquals(8, Node.FLAG_NO_THROWS);
50:       assertEquals(36, Node.QUOTED_PROP);
51:       assertEquals(50, Node.FREE_CALL);
52:       assertEquals(52, Node.LENGTH);
53:       assertEquals(53, Node.INPUT_ID);
54:       assertEquals(54, Node.SLASH_V);
55:       assertEquals(43, Node.IS_CONSTANT_NAME);
56:       assertEquals(57, Node.LAST_PROP);
57:       assertEquals(30, Node.VAR_ARGS_NAME);
58:       assertEquals(47, Node.IS_DISPATCHER);
59:       assertEquals(40, Node.ORIGINALNAME_PROP);
60:       assertEquals(2, Node.POST_FLAG);
61:       assertNotNull(node0);
62:       assertFalse(node0.isInc());
63:       assertFalse(node0.isSwitch());
64:       assertFalse(node0.isCase());
65:       assertFalse(node0.isString());
66:       assertFalse(node0.isIn());
67:       assertFalse(node0.isComma());
68:       assertFalse(node0.isThis());
69:       assertFalse(node0.isGetProp());
70:       assertFalse(node0.isNE());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isBreak());
73:       assertFalse(node0.isIf());
74:       assertFalse(node0.isHook());
75:       assertFalse(node0.isInstanceOf());
76:       assertFalse(node0.isFor());
77:       assertFalse(node0.isWith());
78:       assertFalse(node0.isFunction());
79:       assertFalse(node0.isDebugger());
80:       assertFalse(node0.isObjectLit());
81:       assertFalse(node0.isAnd());
82:       assertFalse(node0.isNot());
83:       assertFalse(node0.isSetterDef());
84:       assertFalse(node0.isContinue());
85:       assertFalse(node0.isThrow());
86:       assertFalse(node0.isCast());
87:       assertFalse(node0.isFalse());
88:       assertFalse(node0.isBlock());
89:       assertFalse(node0.isAdd());
90:       assertFalse(node0.isWhile());
91:       assertFalse(node0.isNew());
92:       assertFalse(node0.isDo());
93:       assertFalse(node0.isStringKey());
94:       assertEquals(1261876, node0.getSourcePosition());
95:       assertEquals(308, node0.getType());
96:       assertFalse(node0.isOr());
97:       assertFalse(node0.isNull());
98:       assertFalse(node0.isName());
99:       assertFalse(node0.isCall());
100:       assertFalse(node0.hasMoreThanOneChild());
101:       assertFalse(node0.isGetElem());
102:       assertFalse(node0.isCatch());
103:       assertFalse(node0.isReturn());
104:       assertFalse(node0.hasChildren());
105:       assertFalse(node0.isDec());
106:       assertFalse(node0.isTypeOf());
107:       assertFalse(node0.isRegExp());
108:       assertFalse(node0.isAssign());
109:       assertFalse(node0.isExprResult());
110:       assertFalse(node0.isTrue());
111:       assertEquals(308, node0.getLineno());
112:       assertFalse(node0.isScript());
113:       assertFalse(node0.isDefaultCase());
114:       assertFalse(node0.hasOneChild());
115:       assertFalse(node0.isArrayLit());
116:       assertFalse(node0.isVoid());
117:       assertFalse(node0.isTry());
118:       assertFalse(node0.isEmpty());
119:       assertFalse(node0.isNumber());
120:       assertFalse(node0.isGetterDef());
121:       assertFalse(node0.isParamList());
122:       assertEquals(308, node0.getCharno());
123:       assertFalse(node0.isAssignAdd());
124:       assertFalse(node0.isLabelName());
125:       assertFalse(node0.isVar());
126:       assertFalse(node0.isLabel());
127:       assertEquals(0, node0.getChildCount());
128:       
129:       Node node1 = new Node(0, node0, 40, 41);
130:       assertEquals(12, Node.COLUMN_BITS);
131:       assertEquals(46, Node.IS_NAMESPACE);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(37, Node.OPT_ARG_NAME);
134:       assertEquals(1, Node.DECR_FLAG);
135:       assertEquals(32, Node.INCRDECR_PROP);
136:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
137:       assertEquals(56, Node.CHANGE_TIME);
138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
139:       assertEquals(29, Node.JSDOC_INFO_PROP);
140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
141:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
142:       assertEquals(57, Node.REFLECTED_OBJECT);
143:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
144:       assertEquals(49, Node.DIRECT_EVAL);
145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
147:       assertEquals(4095, Node.COLUMN_MASK);
148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
149:       assertEquals(39, Node.EMPTY_BLOCK);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(8, Node.FLAG_NO_THROWS);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(50, Node.FREE_CALL);
157:       assertEquals(52, Node.LENGTH);
158:       assertEquals(53, Node.INPUT_ID);
159:       assertEquals(54, Node.SLASH_V);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(57, Node.LAST_PROP);
162:       assertEquals(30, Node.VAR_ARGS_NAME);
163:       assertEquals(47, Node.IS_DISPATCHER);
164:       assertEquals(40, Node.ORIGINALNAME_PROP);
165:       assertEquals(2, Node.POST_FLAG);
166:       assertEquals(47, Node.IS_DISPATCHER);
167:       assertEquals(29, Node.JSDOC_INFO_PROP);
168:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
169:       assertEquals(56, Node.CHANGE_TIME);
170:       assertEquals(2, Node.POST_FLAG);
171:       assertEquals(46, Node.IS_NAMESPACE);
172:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
173:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
174:       assertEquals(37, Node.OPT_ARG_NAME);
175:       assertEquals(49, Node.DIRECT_EVAL);
176:       assertEquals(43, Node.IS_CONSTANT_NAME);
177:       assertEquals(54, Node.SLASH_V);
178:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
179:       assertEquals(51, Node.STATIC_SOURCE_FILE);
180:       assertEquals(32, Node.INCRDECR_PROP);
181:       assertEquals(12, Node.COLUMN_BITS);
182:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
183:       assertEquals(1, Node.DECR_FLAG);
184:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
185:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
186:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
187:       assertEquals(8, Node.FLAG_NO_THROWS);
188:       assertEquals(50, Node.FREE_CALL);
189:       assertEquals(57, Node.REFLECTED_OBJECT);
190:       assertEquals(4095, Node.COLUMN_MASK);
191:       assertEquals(40, Node.ORIGINALNAME_PROP);
192:       assertEquals(48, Node.DIRECTIVES);
193:       assertEquals(15, Node.NO_SIDE_EFFECTS);
194:       assertEquals(57, Node.LAST_PROP);
195:       assertEquals(36, Node.QUOTED_PROP);
196:       assertEquals(30, Node.VAR_ARGS_NAME);
197:       assertEquals(52, Node.LENGTH);
198:       assertEquals(53, Node.INPUT_ID);
199:       assertEquals(55, Node.INFERRED_FUNCTION);
200:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
201:       assertEquals(39, Node.EMPTY_BLOCK);
202:       assertNotNull(node1);
203:       assertFalse(node1.equals((Object)node0));
204:       assertFalse(node0.isInc());
205:       assertFalse(node0.isSwitch());
206:       assertFalse(node0.isCase());
207:       assertFalse(node0.isString());
208:       assertFalse(node0.isIn());
209:       assertFalse(node0.isComma());
210:       assertFalse(node0.isThis());
211:       assertFalse(node0.isGetProp());
212:       assertFalse(node0.isNE());
213:       assertFalse(node0.isDelProp());
214:       assertFalse(node0.isBreak());
215:       assertFalse(node0.isIf());
216:       assertFalse(node0.isHook());
217:       assertFalse(node0.isInstanceOf());
218:       assertFalse(node0.isFor());
219:       assertFalse(node0.isWith());
220:       assertFalse(node0.isFunction());
221:       assertFalse(node0.isDebugger());
222:       assertFalse(node0.isObjectLit());
223:       assertFalse(node0.isAnd());
224:       assertFalse(node0.isNot());
225:       assertFalse(node0.isSetterDef());
226:       assertFalse(node0.isContinue());
227:       assertFalse(node0.isThrow());
228:       assertFalse(node0.isCast());
229:       assertFalse(node0.isFalse());
230:       assertFalse(node0.isBlock());
231:       assertFalse(node0.isAdd());
232:       assertFalse(node0.isWhile());
233:       assertFalse(node0.isNew());
234:       assertFalse(node0.isDo());
235:       assertFalse(node0.isStringKey());
236:       assertEquals(1261876, node0.getSourcePosition());
237:       assertEquals(308, node0.getType());
238:       assertFalse(node0.isOr());
239:       assertFalse(node0.isNull());
240:       assertFalse(node0.isName());
241:       assertFalse(node0.isCall());
242:       assertFalse(node0.hasMoreThanOneChild());
243:       assertFalse(node0.isGetElem());
244:       assertFalse(node0.isCatch());
245:       assertFalse(node0.isReturn());
246:       assertFalse(node0.hasChildren());
247:       assertFalse(node0.isDec());
248:       assertFalse(node0.isTypeOf());
249:       assertFalse(node0.isRegExp());
250:       assertFalse(node0.isAssign());
251:       assertFalse(node0.isExprResult());
252:       assertFalse(node0.isTrue());
253:       assertEquals(308, node0.getLineno());
254:       assertFalse(node0.isScript());
255:       assertFalse(node0.isDefaultCase());
256:       assertFalse(node0.hasOneChild());
257:       assertFalse(node0.isArrayLit());
258:       assertFalse(node0.isVoid());
259:       assertFalse(node0.isTry());
260:       assertFalse(node0.isEmpty());
261:       assertFalse(node0.isNumber());
262:       assertFalse(node0.isGetterDef());
263:       assertFalse(node0.isParamList());
264:       assertEquals(308, node0.getCharno());
265:       assertFalse(node0.isAssignAdd());
266:       assertFalse(node0.isLabelName());
267:       assertFalse(node0.isVar());
268:       assertFalse(node0.isLabel());
269:       assertEquals(0, node0.getChildCount());
270:       assertEquals(163881, node1.getSourcePosition());
271:       assertFalse(node1.isString());
272:       assertFalse(node1.isIn());
273:       assertEquals(1, node1.getChildCount());
274:       assertEquals(0, node1.getType());
275:       assertFalse(node1.isNE());
276:       assertTrue(node1.hasChildren());
277:       assertFalse(node1.isSwitch());
278:       assertFalse(node1.isIf());
279:       assertFalse(node1.isDelProp());
280:       assertFalse(node1.isFor());
281:       assertFalse(node1.isGetterDef());
282:       assertFalse(node1.isHook());
283:       assertTrue(node1.hasOneChild());
284:       assertFalse(node1.isComma());
285:       assertFalse(node1.isGetProp());
286:       assertFalse(node1.isThis());
287:       assertFalse(node1.isTry());
288:       assertFalse(node1.isCase());
289:       assertFalse(node1.isObjectLit());
290:       assertFalse(node1.isCatch());
291:       assertEquals(41, node1.getCharno());
292:       assertFalse(node1.isWith());
293:       assertFalse(node1.isInstanceOf());
294:       assertFalse(node1.isAnd());
295:       assertFalse(node1.isRegExp());
296:       assertFalse(node1.isNot());
297:       assertFalse(node1.isDebugger());
298:       assertFalse(node1.isFunction());
299:       assertFalse(node1.isThrow());
300:       assertFalse(node1.isFalse());
301:       assertFalse(node1.isCast());
302:       assertFalse(node1.isInc());
303:       assertFalse(node1.isSetterDef());
304:       assertFalse(node1.isContinue());
305:       assertFalse(node1.hasMoreThanOneChild());
306:       assertFalse(node1.isWhile());
307:       assertFalse(node1.isReturn());
308:       assertFalse(node1.isOr());
309:       assertFalse(node1.isLabel());
310:       assertFalse(node1.isLabelName());
311:       assertFalse(node1.isGetElem());
312:       assertFalse(node1.isCall());
313:       assertFalse(node1.isStringKey());
314:       assertFalse(node1.isDec());
315:       assertFalse(node1.isTypeOf());
316:       assertFalse(node1.isNumber());
317:       assertFalse(node1.isAssign());
318:       assertEquals(40, node1.getLineno());
319:       assertFalse(node1.isBlock());
320:       assertFalse(node1.isScript());
321:       assertFalse(node1.isVoid());
322:       assertFalse(node1.isExprResult());
323:       assertFalse(node1.isTrue());
324:       assertFalse(node1.isParamList());
325:       assertFalse(node1.isBreak());
326:       assertFalse(node1.isArrayLit());
327:       assertFalse(node1.isName());
328:       assertFalse(node1.isEmpty());
329:       assertFalse(node1.isVar());
330:       assertFalse(node1.isNull());
331:       assertFalse(node1.isAdd());
332:       assertFalse(node1.isAssignAdd());
333:       assertFalse(node1.isDefaultCase());
334:       assertFalse(node1.isDo());
335:       assertFalse(node1.isNew());
336:       
337:       boolean boolean0 = node0.hasOneChild();
338:       assertFalse(boolean0);
339:       assertEquals(12, Node.COLUMN_BITS);
340:       assertEquals(46, Node.IS_NAMESPACE);
341:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
342:       assertEquals(37, Node.OPT_ARG_NAME);
343:       assertEquals(1, Node.DECR_FLAG);
344:       assertEquals(32, Node.INCRDECR_PROP);
345:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
346:       assertEquals(56, Node.CHANGE_TIME);
347:       assertEquals(15, Node.NO_SIDE_EFFECTS);
348:       assertEquals(29, Node.JSDOC_INFO_PROP);
349:       assertEquals(51, Node.STATIC_SOURCE_FILE);
350:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
351:       assertEquals(57, Node.REFLECTED_OBJECT);
352:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
353:       assertEquals(49, Node.DIRECT_EVAL);
354:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
355:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
356:       assertEquals(4095, Node.COLUMN_MASK);
357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
358:       assertEquals(39, Node.EMPTY_BLOCK);
359:       assertEquals(48, Node.DIRECTIVES);
360:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
361:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
362:       assertEquals(55, Node.INFERRED_FUNCTION);
363:       assertEquals(8, Node.FLAG_NO_THROWS);
364:       assertEquals(36, Node.QUOTED_PROP);
365:       assertEquals(50, Node.FREE_CALL);
366:       assertEquals(52, Node.LENGTH);
367:       assertEquals(53, Node.INPUT_ID);
368:       assertEquals(54, Node.SLASH_V);
369:       assertEquals(43, Node.IS_CONSTANT_NAME);
370:       assertEquals(57, Node.LAST_PROP);
371:       assertEquals(30, Node.VAR_ARGS_NAME);
372:       assertEquals(47, Node.IS_DISPATCHER);
373:       assertEquals(40, Node.ORIGINALNAME_PROP);
374:       assertEquals(2, Node.POST_FLAG);
375:       assertNotSame(node0, node1);
376:       assertFalse(node0.equals((Object)node1));
377:       assertFalse(node0.isInc());
378:       assertFalse(node0.isSwitch());
379:       assertFalse(node0.isCase());
380:       assertFalse(node0.isString());
381:       assertFalse(node0.isIn());
382:       assertFalse(node0.isComma());
383:       assertFalse(node0.isThis());
384:       assertFalse(node0.isGetProp());
385:       assertFalse(node0.isNE());
386:       assertFalse(node0.isDelProp());
387:       assertFalse(node0.isBreak());
388:       assertFalse(node0.isIf());
389:       assertFalse(node0.isHook());
390:       assertFalse(node0.isInstanceOf());
391:       assertFalse(node0.isFor());
392:       assertFalse(node0.isWith());
393:       assertFalse(node0.isFunction());
394:       assertFalse(node0.isDebugger());
395:       assertFalse(node0.isObjectLit());
396:       assertFalse(node0.isAnd());
397:       assertFalse(node0.isNot());
398:       assertFalse(node0.isSetterDef());
399:       assertFalse(node0.isContinue());
400:       assertFalse(node0.isThrow());
401:       assertFalse(node0.isCast());
402:       assertFalse(node0.isFalse());
403:       assertFalse(node0.isBlock());
404:       assertFalse(node0.isAdd());
405:       assertFalse(node0.isWhile());
406:       assertFalse(node0.isNew());
407:       assertFalse(node0.isDo());
408:       assertFalse(node0.isStringKey());
409:       assertEquals(1261876, node0.getSourcePosition());
410:       assertEquals(308, node0.getType());
411:       assertFalse(node0.isOr());
412:       assertFalse(node0.isNull());
413:       assertFalse(node0.isName());
414:       assertFalse(node0.isCall());
415:       assertFalse(node0.hasMoreThanOneChild());
416:       assertFalse(node0.isGetElem());
417:       assertFalse(node0.isCatch());
418:       assertFalse(node0.isReturn());
419:       assertFalse(node0.hasChildren());
420:       assertFalse(node0.isDec());
421:       assertFalse(node0.isTypeOf());
422:       assertFalse(node0.isRegExp());
423:       assertFalse(node0.isAssign());
424:       assertFalse(node0.isExprResult());
425:       assertFalse(node0.isTrue());
426:       assertEquals(308, node0.getLineno());
427:       assertFalse(node0.isScript());
428:       assertFalse(node0.isDefaultCase());
429:       assertFalse(node0.hasOneChild());
430:       assertFalse(node0.isArrayLit());
431:       assertFalse(node0.isVoid());
432:       assertFalse(node0.isTry());
433:       assertFalse(node0.isEmpty());
434:       assertFalse(node0.isNumber());
435:       assertFalse(node0.isGetterDef());
436:       assertFalse(node0.isParamList());
437:       assertEquals(308, node0.getCharno());
438:       assertFalse(node0.isAssignAdd());
439:       assertFalse(node0.isLabelName());
440:       assertFalse(node0.isVar());
441:       assertFalse(node0.isLabel());
442:       assertEquals(0, node0.getChildCount());
443:       
444:       boolean boolean1 = node0.isDo();
445:       assertFalse(boolean1);
446:       assertEquals(12, Node.COLUMN_BITS);
447:       assertEquals(46, Node.IS_NAMESPACE);
448:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
449:       assertEquals(37, Node.OPT_ARG_NAME);
450:       assertEquals(1, Node.DECR_FLAG);
451:       assertEquals(32, Node.INCRDECR_PROP);
452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
453:       assertEquals(56, Node.CHANGE_TIME);
454:       assertEquals(15, Node.NO_SIDE_EFFECTS);
455:       assertEquals(29, Node.JSDOC_INFO_PROP);
456:       assertEquals(51, Node.STATIC_SOURCE_FILE);
457:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
460:       assertEquals(49, Node.DIRECT_EVAL);
461:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
462:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
463:       assertEquals(4095, Node.COLUMN_MASK);
464:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
465:       assertEquals(39, Node.EMPTY_BLOCK);
466:       assertEquals(48, Node.DIRECTIVES);
467:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
468:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
469:       assertEquals(55, Node.INFERRED_FUNCTION);
470:       assertEquals(8, Node.FLAG_NO_THROWS);
471:       assertEquals(36, Node.QUOTED_PROP);
472:       assertEquals(50, Node.FREE_CALL);
473:       assertEquals(52, Node.LENGTH);
474:       assertEquals(53, Node.INPUT_ID);
475:       assertEquals(54, Node.SLASH_V);
476:       assertEquals(43, Node.IS_CONSTANT_NAME);
477:       assertEquals(57, Node.LAST_PROP);
478:       assertEquals(30, Node.VAR_ARGS_NAME);
479:       assertEquals(47, Node.IS_DISPATCHER);
480:       assertEquals(40, Node.ORIGINALNAME_PROP);
481:       assertEquals(2, Node.POST_FLAG);
482:       assertNotSame(node0, node1);
483:       assertFalse(node0.equals((Object)node1));
484:       assertTrue(boolean1 == boolean0);
485:       assertFalse(node0.isInc());
486:       assertFalse(node0.isSwitch());
487:       assertFalse(node0.isCase());
488:       assertFalse(node0.isString());
489:       assertFalse(node0.isIn());
490:       assertFalse(node0.isComma());
491:       assertFalse(node0.isThis());
492:       assertFalse(node0.isGetProp());
493:       assertFalse(node0.isNE());
494:       assertFalse(node0.isDelProp());
495:       assertFalse(node0.isBreak());
496:       assertFalse(node0.isIf());
497:       assertFalse(node0.isHook());
498:       assertFalse(node0.isInstanceOf());
499:       assertFalse(node0.isFor());
500:       assertFalse(node0.isWith());
501:       assertFalse(node0.isFunction());
502:       assertFalse(node0.isDebugger());
503:       assertFalse(node0.isObjectLit());
504:       assertFalse(node0.isAnd());
505:       assertFalse(node0.isNot());
506:       assertFalse(node0.isSetterDef());
507:       assertFalse(node0.isContinue());
508:       assertFalse(node0.isThrow());
509:       assertFalse(node0.isCast());
510:       assertFalse(node0.isFalse());
511:       assertFalse(node0.isBlock());
512:       assertFalse(node0.isAdd());
513:       assertFalse(node0.isWhile());
514:       assertFalse(node0.isNew());
515:       assertFalse(node0.isDo());
516:       assertFalse(node0.isStringKey());
517:       assertEquals(1261876, node0.getSourcePosition());
518:       assertEquals(308, node0.getType());
519:       assertFalse(node0.isOr());
520:       assertFalse(node0.isNull());
521:       assertFalse(node0.isName());
522:       assertFalse(node0.isCall());
523:       assertFalse(node0.hasMoreThanOneChild());
524:       assertFalse(node0.isGetElem());
525:       assertFalse(node0.isCatch());
526:       assertFalse(node0.isReturn());
527:       assertFalse(node0.hasChildren());
528:       assertFalse(node0.isDec());
529:       assertFalse(node0.isTypeOf());
530:       assertFalse(node0.isRegExp());
531:       assertFalse(node0.isAssign());
532:       assertFalse(node0.isExprResult());
533:       assertFalse(node0.isTrue());
534:       assertEquals(308, node0.getLineno());
535:       assertFalse(node0.isScript());
536:       assertFalse(node0.isDefaultCase());
537:       assertFalse(node0.hasOneChild());
538:       assertFalse(node0.isArrayLit());
539:       assertFalse(node0.isVoid());
540:       assertFalse(node0.isTry());
541:       assertFalse(node0.isEmpty());
542:       assertFalse(node0.isNumber());
543:       assertFalse(node0.isGetterDef());
544:       assertFalse(node0.isParamList());
545:       assertEquals(308, node0.getCharno());
546:       assertFalse(node0.isAssignAdd());
547:       assertFalse(node0.isLabelName());
548:       assertFalse(node0.isVar());
549:       assertFalse(node0.isLabel());
550:       assertEquals(0, node0.getChildCount());
551:       
552:       Iterable<Node> iterable0 = node0.children();
553:       assertFalse(iterable0.contains(node0));
554:       assertEquals(12, Node.COLUMN_BITS);
555:       assertEquals(46, Node.IS_NAMESPACE);
556:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
557:       assertEquals(37, Node.OPT_ARG_NAME);
558:       assertEquals(1, Node.DECR_FLAG);
559:       assertEquals(32, Node.INCRDECR_PROP);
560:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
561:       assertEquals(56, Node.CHANGE_TIME);
562:       assertEquals(15, Node.NO_SIDE_EFFECTS);
563:       assertEquals(29, Node.JSDOC_INFO_PROP);
564:       assertEquals(51, Node.STATIC_SOURCE_FILE);
565:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
566:       assertEquals(57, Node.REFLECTED_OBJECT);
567:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
568:       assertEquals(49, Node.DIRECT_EVAL);
569:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
570:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
571:       assertEquals(4095, Node.COLUMN_MASK);
572:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
573:       assertEquals(39, Node.EMPTY_BLOCK);
574:       assertEquals(48, Node.DIRECTIVES);
575:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
576:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
577:       assertEquals(55, Node.INFERRED_FUNCTION);
578:       assertEquals(8, Node.FLAG_NO_THROWS);
579:       assertEquals(36, Node.QUOTED_PROP);
580:       assertEquals(50, Node.FREE_CALL);
581:       assertEquals(52, Node.LENGTH);
582:       assertEquals(53, Node.INPUT_ID);
583:       assertEquals(54, Node.SLASH_V);
584:       assertEquals(43, Node.IS_CONSTANT_NAME);
585:       assertEquals(57, Node.LAST_PROP);
586:       assertEquals(30, Node.VAR_ARGS_NAME);
587:       assertEquals(47, Node.IS_DISPATCHER);
588:       assertEquals(40, Node.ORIGINALNAME_PROP);
589:       assertEquals(2, Node.POST_FLAG);
590:       assertNotSame(node0, node1);
591:       assertNotNull(iterable0);
592:       assertFalse(node0.equals((Object)node1));
593:       assertFalse(node0.isInc());
594:       assertFalse(node0.isSwitch());
595:       assertFalse(node0.isCase());
596:       assertFalse(node0.isString());
597:       assertFalse(node0.isIn());
598:       assertFalse(node0.isComma());
599:       assertFalse(node0.isThis());
600:       assertFalse(node0.isGetProp());
601:       assertFalse(node0.isNE());
602:       assertFalse(node0.isDelProp());
603:       assertFalse(node0.isBreak());
604:       assertFalse(node0.isIf());
605:       assertFalse(node0.isHook());
606:       assertFalse(node0.isInstanceOf());
607:       assertFalse(node0.isFor());
608:       assertFalse(node0.isWith());
609:       assertFalse(node0.isFunction());
610:       assertFalse(node0.isDebugger());
611:       assertFalse(node0.isObjectLit());
612:       assertFalse(node0.isAnd());
613:       assertFalse(node0.isNot());
614:       assertFalse(node0.isSetterDef());
615:       assertFalse(node0.isContinue());
616:       assertFalse(node0.isThrow());
617:       assertFalse(node0.isCast());
618:       assertFalse(node0.isFalse());
619:       assertFalse(node0.isBlock());
620:       assertFalse(node0.isAdd());
621:       assertFalse(node0.isWhile());
622:       assertFalse(node0.isNew());
623:       assertFalse(node0.isDo());
624:       assertFalse(node0.isStringKey());
625:       assertEquals(1261876, node0.getSourcePosition());
626:       assertEquals(308, node0.getType());
627:       assertFalse(node0.isOr());
628:       assertFalse(node0.isNull());
629:       assertFalse(node0.isName());
630:       assertFalse(node0.isCall());
631:       assertFalse(node0.hasMoreThanOneChild());
632:       assertFalse(node0.isGetElem());
633:       assertFalse(node0.isCatch());
634:       assertFalse(node0.isReturn());
635:       assertFalse(node0.hasChildren());
636:       assertFalse(node0.isDec());
637:       assertFalse(node0.isTypeOf());
638:       assertFalse(node0.isRegExp());
639:       assertFalse(node0.isAssign());
640:       assertFalse(node0.isExprResult());
641:       assertFalse(node0.isTrue());
642:       assertEquals(308, node0.getLineno());
643:       assertFalse(node0.isScript());
644:       assertFalse(node0.isDefaultCase());
645:       assertFalse(node0.hasOneChild());
646:       assertFalse(node0.isArrayLit());
647:       assertFalse(node0.isVoid());
648:       assertFalse(node0.isTry());
649:       assertFalse(node0.isEmpty());
650:       assertFalse(node0.isNumber());
651:       assertFalse(node0.isGetterDef());
652:       assertFalse(node0.isParamList());
653:       assertEquals(308, node0.getCharno());
654:       assertFalse(node0.isAssignAdd());
655:       assertFalse(node0.isLabelName());
656:       assertFalse(node0.isVar());
657:       assertFalse(node0.isLabel());
658:       assertEquals(0, node0.getChildCount());
659:       
660:       boolean boolean2 = node0.isHook();
661:       assertFalse(boolean2);
662:       assertEquals(12, Node.COLUMN_BITS);
663:       assertEquals(46, Node.IS_NAMESPACE);
664:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
665:       assertEquals(37, Node.OPT_ARG_NAME);
666:       assertEquals(1, Node.DECR_FLAG);
667:       assertEquals(32, Node.INCRDECR_PROP);
668:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
669:       assertEquals(56, Node.CHANGE_TIME);
670:       assertEquals(15, Node.NO_SIDE_EFFECTS);
671:       assertEquals(29, Node.JSDOC_INFO_PROP);
672:       assertEquals(51, Node.STATIC_SOURCE_FILE);
673:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
674:       assertEquals(57, Node.REFLECTED_OBJECT);
675:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
676:       assertEquals(49, Node.DIRECT_EVAL);
677:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
678:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
679:       assertEquals(4095, Node.COLUMN_MASK);
680:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
681:       assertEquals(39, Node.EMPTY_BLOCK);
682:       assertEquals(48, Node.DIRECTIVES);
683:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
684:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
685:       assertEquals(55, Node.INFERRED_FUNCTION);
686:       assertEquals(8, Node.FLAG_NO_THROWS);
687:       assertEquals(36, Node.QUOTED_PROP);
688:       assertEquals(50, Node.FREE_CALL);
689:       assertEquals(52, Node.LENGTH);
690:       assertEquals(53, Node.INPUT_ID);
691:       assertEquals(54, Node.SLASH_V);
692:       assertEquals(43, Node.IS_CONSTANT_NAME);
693:       assertEquals(57, Node.LAST_PROP);
694:       assertEquals(30, Node.VAR_ARGS_NAME);
695:       assertEquals(47, Node.IS_DISPATCHER);
696:       assertEquals(40, Node.ORIGINALNAME_PROP);
697:       assertEquals(2, Node.POST_FLAG);
698:       assertNotSame(node0, node1);
699:       assertFalse(node0.equals((Object)node1));
700:       assertTrue(boolean2 == boolean0);
701:       assertTrue(boolean2 == boolean1);
702:       assertFalse(node0.isInc());
703:       assertFalse(node0.isSwitch());
704:       assertFalse(node0.isCase());
705:       assertFalse(node0.isString());
706:       assertFalse(node0.isIn());
707:       assertFalse(node0.isComma());
708:       assertFalse(node0.isThis());
709:       assertFalse(node0.isGetProp());
710:       assertFalse(node0.isNE());
711:       assertFalse(node0.isDelProp());
712:       assertFalse(node0.isBreak());
713:       assertFalse(node0.isIf());
714:       assertFalse(node0.isHook());
715:       assertFalse(node0.isInstanceOf());
716:       assertFalse(node0.isFor());
717:       assertFalse(node0.isWith());
718:       assertFalse(node0.isFunction());
719:       assertFalse(node0.isDebugger());
720:       assertFalse(node0.isObjectLit());
721:       assertFalse(node0.isAnd());
722:       assertFalse(node0.isNot());
723:       assertFalse(node0.isSetterDef());
724:       assertFalse(node0.isContinue());
725:       assertFalse(node0.isThrow());
726:       assertFalse(node0.isCast());
727:       assertFalse(node0.isFalse());
728:       assertFalse(node0.isBlock());
729:       assertFalse(node0.isAdd());
730:       assertFalse(node0.isWhile());
731:       assertFalse(node0.isNew());
732:       assertFalse(node0.isDo());
733:       assertFalse(node0.isStringKey());
734:       assertEquals(1261876, node0.getSourcePosition());
735:       assertEquals(308, node0.getType());
736:       assertFalse(node0.isOr());
737:       assertFalse(node0.isNull());
738:       assertFalse(node0.isName());
739:       assertFalse(node0.isCall());
740:       assertFalse(node0.hasMoreThanOneChild());
741:       assertFalse(node0.isGetElem());
742:       assertFalse(node0.isCatch());
743:       assertFalse(node0.isReturn());
744:       assertFalse(node0.hasChildren());
745:       assertFalse(node0.isDec());
746:       assertFalse(node0.isTypeOf());
747:       assertFalse(node0.isRegExp());
748:       assertFalse(node0.isAssign());
749:       assertFalse(node0.isExprResult());
750:       assertFalse(node0.isTrue());
751:       assertEquals(308, node0.getLineno());
752:       assertFalse(node0.isScript());
753:       assertFalse(node0.isDefaultCase());
754:       assertFalse(node0.hasOneChild());
755:       assertFalse(node0.isArrayLit());
756:       assertFalse(node0.isVoid());
757:       assertFalse(node0.isTry());
758:       assertFalse(node0.isEmpty());
759:       assertFalse(node0.isNumber());
760:       assertFalse(node0.isGetterDef());
761:       assertFalse(node0.isParamList());
762:       assertEquals(308, node0.getCharno());
763:       assertFalse(node0.isAssignAdd());
764:       assertFalse(node0.isLabelName());
765:       assertFalse(node0.isVar());
766:       assertFalse(node0.isLabel());
767:       assertEquals(0, node0.getChildCount());
768:       
769:       Node node2 = new Node(1, 32, 37);
770:       assertEquals(32, Node.INCRDECR_PROP);
771:       assertEquals(51, Node.STATIC_SOURCE_FILE);
772:       assertEquals(37, Node.OPT_ARG_NAME);
773:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
774:       assertEquals(15, Node.NO_SIDE_EFFECTS);
775:       assertEquals(57, Node.LAST_PROP);
776:       assertEquals(47, Node.IS_DISPATCHER);
777:       assertEquals(2, Node.POST_FLAG);
778:       assertEquals(30, Node.VAR_ARGS_NAME);
779:       assertEquals(1, Node.DECR_FLAG);
780:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
781:       assertEquals(12, Node.COLUMN_BITS);
782:       assertEquals(52, Node.LENGTH);
783:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
784:       assertEquals(53, Node.INPUT_ID);
785:       assertEquals(29, Node.JSDOC_INFO_PROP);
786:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
787:       assertEquals(36, Node.QUOTED_PROP);
788:       assertEquals(49, Node.DIRECT_EVAL);
789:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
790:       assertEquals(56, Node.CHANGE_TIME);
791:       assertEquals(57, Node.REFLECTED_OBJECT);
792:       assertEquals(48, Node.DIRECTIVES);
793:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
794:       assertEquals(8, Node.FLAG_NO_THROWS);
795:       assertEquals(39, Node.EMPTY_BLOCK);
796:       assertEquals(4095, Node.COLUMN_MASK);
797:       assertEquals(55, Node.INFERRED_FUNCTION);
798:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
799:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
800:       assertEquals(40, Node.ORIGINALNAME_PROP);
801:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
802:       assertEquals(50, Node.FREE_CALL);
803:       assertEquals(43, Node.IS_CONSTANT_NAME);
804:       assertEquals(46, Node.IS_NAMESPACE);
805:       assertEquals(54, Node.SLASH_V);
806:       assertNotNull(node2);
807:       assertFalse(node2.equals((Object)node0));
808:       assertFalse(node2.equals((Object)node1));
809:       assertFalse(node2.isBlock());
810:       assertFalse(node2.isNew());
811:       assertFalse(node2.isAdd());
812:       assertFalse(node2.isContinue());
813:       assertFalse(node2.hasMoreThanOneChild());
814:       assertFalse(node2.isDo());
815:       assertFalse(node2.isReturn());
816:       assertFalse(node2.isVar());
817:       assertFalse(node2.isAssignAdd());
818:       assertFalse(node2.isWhile());
819:       assertFalse(node2.isSetterDef());
820:       assertFalse(node2.isOr());
821:       assertEquals(32, node2.getLineno());
822:       assertFalse(node2.isDec());
823:       assertFalse(node2.isTypeOf());
824:       assertFalse(node2.isCatch());
825:       assertFalse(node2.isGetElem());
826:       assertFalse(node2.isCall());
827:       assertFalse(node2.isName());
828:       assertFalse(node2.isNull());
829:       assertFalse(node2.isVoid());
830:       assertFalse(node2.isDebugger());
831:       assertFalse(node2.isExprResult());
832:       assertFalse(node2.isFunction());
833:       assertFalse(node2.isCast());
834:       assertFalse(node2.isAssign());
835:       assertFalse(node2.hasChildren());
836:       assertFalse(node2.isGetProp());
837:       assertFalse(node2.isAnd());
838:       assertFalse(node2.isObjectLit());
839:       assertFalse(node2.isNot());
840:       assertFalse(node2.isInc());
841:       assertFalse(node2.isString());
842:       assertFalse(node2.isThrow());
843:       assertFalse(node2.isFalse());
844:       assertFalse(node2.isCase());
845:       assertFalse(node2.isHook());
846:       assertFalse(node2.isThis());
847:       assertFalse(node2.isComma());
848:       assertFalse(node2.isBreak());
849:       assertFalse(node2.isIn());
850:       assertFalse(node2.isEmpty());
851:       assertFalse(node2.isInstanceOf());
852:       assertEquals(37, node2.getCharno());
853:       assertEquals(131109, node2.getSourcePosition());
854:       assertFalse(node2.isDelProp());
855:       assertFalse(node2.isIf());
856:       assertFalse(node2.isNE());
857:       assertEquals(1, node2.getType());
858:       assertFalse(node2.isTrue());
859:       assertFalse(node2.isTry());
860:       assertFalse(node2.isRegExp());
861:       assertFalse(node2.isWith());
862:       assertFalse(node2.isScript());
863:       assertFalse(node2.hasOneChild());
864:       assertFalse(node2.isDefaultCase());
865:       assertFalse(node2.isFor());
866:       assertFalse(node2.isLabel());
867:       assertEquals(0, node2.getChildCount());
868:       assertFalse(node2.isGetterDef());
869:       assertFalse(node2.isNumber());
870:       assertFalse(node2.isArrayLit());
871:       assertFalse(node2.isLabelName());
872:       assertFalse(node2.isSwitch());
873:       assertFalse(node2.isStringKey());
874:       assertFalse(node2.isParamList());
875:       
876:       boolean boolean3 = node2.isAssign();
877:       assertFalse(boolean3);
878:       assertEquals(32, Node.INCRDECR_PROP);
879:       assertEquals(51, Node.STATIC_SOURCE_FILE);
880:       assertEquals(37, Node.OPT_ARG_NAME);
881:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
882:       assertEquals(15, Node.NO_SIDE_EFFECTS);
883:       assertEquals(57, Node.LAST_PROP);
884:       assertEquals(47, Node.IS_DISPATCHER);
885:       assertEquals(2, Node.POST_FLAG);
886:       assertEquals(30, Node.VAR_ARGS_NAME);
887:       assertEquals(1, Node.DECR_FLAG);
888:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
889:       assertEquals(12, Node.COLUMN_BITS);
890:       assertEquals(52, Node.LENGTH);
891:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
892:       assertEquals(53, Node.INPUT_ID);
893:       assertEquals(29, Node.JSDOC_INFO_PROP);
894:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
895:       assertEquals(36, Node.QUOTED_PROP);
896:       assertEquals(49, Node.DIRECT_EVAL);
897:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
898:       assertEquals(56, Node.CHANGE_TIME);
899:       assertEquals(57, Node.REFLECTED_OBJECT);
900:       assertEquals(48, Node.DIRECTIVES);
901:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
902:       assertEquals(8, Node.FLAG_NO_THROWS);
903:       assertEquals(39, Node.EMPTY_BLOCK);
904:       assertEquals(4095, Node.COLUMN_MASK);
905:       assertEquals(55, Node.INFERRED_FUNCTION);
906:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
907:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
908:       assertEquals(40, Node.ORIGINALNAME_PROP);
909:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
910:       assertEquals(50, Node.FREE_CALL);
911:       assertEquals(43, Node.IS_CONSTANT_NAME);
912:       assertEquals(46, Node.IS_NAMESPACE);
913:       assertEquals(54, Node.SLASH_V);
914:       assertNotSame(node2, node0);
915:       assertNotSame(node2, node1);
916:       assertFalse(node2.equals((Object)node0));
917:       assertFalse(node2.equals((Object)node1));
918:       assertTrue(boolean3 == boolean1);
919:       assertTrue(boolean3 == boolean2);
920:       assertTrue(boolean3 == boolean0);
921:       assertFalse(node2.isBlock());
922:       assertFalse(node2.isNew());
923:       assertFalse(node2.isAdd());
924:       assertFalse(node2.isContinue());
925:       assertFalse(node2.hasMoreThanOneChild());
926:       assertFalse(node2.isDo());
927:       assertFalse(node2.isReturn());
928:       assertFalse(node2.isVar());
929:       assertFalse(node2.isAssignAdd());
930:       assertFalse(node2.isWhile());
931:       assertFalse(node2.isSetterDef());
932:       assertFalse(node2.isOr());
933:       assertEquals(32, node2.getLineno());
934:       assertFalse(node2.isDec());
935:       assertFalse(node2.isTypeOf());
936:       assertFalse(node2.isCatch());
937:       assertFalse(node2.isGetElem());
938:       assertFalse(node2.isCall());
939:       assertFalse(node2.isName());
940:       assertFalse(node2.isNull());
941:       assertFalse(node2.isVoid());
942:       assertFalse(node2.isDebugger());
943:       assertFalse(node2.isExprResult());
944:       assertFalse(node2.isFunction());
945:       assertFalse(node2.isCast());
946:       assertFalse(node2.isAssign());
947:       assertFalse(node2.hasChildren());
948:       assertFalse(node2.isGetProp());
949:       assertFalse(node2.isAnd());
950:       assertFalse(node2.isObjectLit());
951:       assertFalse(node2.isNot());
952:       assertFalse(node2.isInc());
953:       assertFalse(node2.isString());
954:       assertFalse(node2.isThrow());
955:       assertFalse(node2.isFalse());
956:       assertFalse(node2.isCase());
957:       assertFalse(node2.isHook());
958:       assertFalse(node2.isThis());
959:       assertFalse(node2.isComma());
960:       assertFalse(node2.isBreak());
961:       assertFalse(node2.isIn());
962:       assertFalse(node2.isEmpty());
963:       assertFalse(node2.isInstanceOf());
964:       assertEquals(37, node2.getCharno());
965:       assertEquals(131109, node2.getSourcePosition());
966:       assertFalse(node2.isDelProp());
967:       assertFalse(node2.isIf());
968:       assertFalse(node2.isNE());
969:       assertEquals(1, node2.getType());
970:       assertFalse(node2.isTrue());
971:       assertFalse(node2.isTry());
972:       assertFalse(node2.isRegExp());
973:       assertFalse(node2.isWith());
974:       assertFalse(node2.isScript());
975:       assertFalse(node2.hasOneChild());
976:       assertFalse(node2.isDefaultCase());
977:       assertFalse(node2.isFor());
978:       assertFalse(node2.isLabel());
979:       assertEquals(0, node2.getChildCount());
980:       assertFalse(node2.isGetterDef());
981:       assertFalse(node2.isNumber());
982:       assertFalse(node2.isArrayLit());
983:       assertFalse(node2.isLabelName());
984:       assertFalse(node2.isSwitch());
985:       assertFalse(node2.isStringKey());
986:       assertFalse(node2.isParamList());
987:   }
988: }
RegularFileObject[/tmp/EvoSuite_86_1628157877158/com/google/javascript/rhino/Node_86_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:37 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_86_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_86_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_86_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:37.297 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Node node0 = new Node(308, 308, 308);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node0);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertEquals(1261876, node0.getSourcePosition());
assertEquals(308, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertEquals(308, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertEquals(308, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

Node node1 = new Node(0, node0, 40, 41);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertEquals(1261876, node0.getSourcePosition());
assertEquals(308, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertEquals(308, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertEquals(308, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertEquals(0, node1.getType());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertEquals(41, node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isRegExp());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertEquals(40, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isNew());

boolean boolean0 = node0.hasOneChild();
assertFalse(boolean0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertEquals(1261876, node0.getSourcePosition());
assertEquals(308, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertEquals(308, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertEquals(308, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

boolean boolean1 = node0.isDo();
assertFalse(boolean1);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertEquals(1261876, node0.getSourcePosition());
assertEquals(308, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertEquals(308, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertEquals(308, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotSame(node0, node1);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertEquals(1261876, node0.getSourcePosition());
assertEquals(308, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertEquals(308, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertEquals(308, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

boolean boolean2 = node0.isHook();
assertFalse(boolean2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isStringKey());
assertEquals(1261876, node0.getSourcePosition());
assertEquals(308, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertEquals(308, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertEquals(308, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

Node node2 = new Node(1, 32, 37);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isReturn());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isSetterDef());
assertFalse(node2.isOr());
assertEquals(32, node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCatch());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isInstanceOf());
assertEquals(37, node2.getCharno());
assertEquals(131109, node2.getSourcePosition());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals(1, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());

boolean boolean3 = node2.isAssign();
assertFalse(boolean3);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isReturn());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isSetterDef());
assertFalse(node2.isOr());
assertEquals(32, node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCatch());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isInstanceOf());
assertEquals(37, node2.getCharno());
assertEquals(131109, node2.getSourcePosition());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals(1, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());


[MASTER] 10:04:38.137 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_90_1628157877802/com/google/javascript/rhino/Node_90_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_90_1628157877802/com/google/javascript/rhino/Node_90_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:38.137 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:38.137 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:38.138 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 861
[MASTER] 10:04:38.140 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_90_1628157877802/com/google/javascript/rhino/Node_90_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:37 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_90_tmp__ESTest extends Node_90_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(0.0);
22:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
23:       assertEquals(50, Node.FREE_CALL);
24:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
25:       assertEquals(39, Node.EMPTY_BLOCK);
26:       assertEquals(40, Node.ORIGINALNAME_PROP);
27:       assertEquals(48, Node.DIRECTIVES);
28:       assertEquals(4095, Node.COLUMN_MASK);
29:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
30:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
31:       assertEquals(30, Node.VAR_ARGS_NAME);
32:       assertEquals(43, Node.IS_CONSTANT_NAME);
33:       assertEquals(1, Node.DECR_FLAG);
34:       assertEquals(46, Node.IS_NAMESPACE);
35:       assertEquals(54, Node.SLASH_V);
36:       assertEquals(51, Node.STATIC_SOURCE_FILE);
37:       assertEquals(29, Node.JSDOC_INFO_PROP);
38:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
39:       assertEquals(56, Node.CHANGE_TIME);
40:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
41:       assertEquals(37, Node.OPT_ARG_NAME);
42:       assertEquals(32, Node.INCRDECR_PROP);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(2, Node.POST_FLAG);
45:       assertEquals(12, Node.COLUMN_BITS);
46:       assertEquals(47, Node.IS_DISPATCHER);
47:       assertEquals(49, Node.DIRECT_EVAL);
48:       assertEquals(57, Node.LAST_PROP);
49:       assertEquals(55, Node.INFERRED_FUNCTION);
50:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(52, Node.LENGTH);
53:       assertEquals(53, Node.INPUT_ID);
54:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
55:       assertEquals(8, Node.FLAG_NO_THROWS);
56:       assertEquals(57, Node.REFLECTED_OBJECT);
57:       assertEquals(36, Node.QUOTED_PROP);
58:       assertNotNull(node0);
59:       assertFalse(node0.isCatch());
60:       assertFalse(node0.isFunction());
61:       assertFalse(node0.isRegExp());
62:       assertFalse(node0.isDefaultCase());
63:       assertEquals(0, node0.getChildCount());
64:       assertFalse(node0.isStringKey());
65:       assertFalse(node0.isTry());
66:       assertFalse(node0.isArrayLit());
67:       assertFalse(node0.isDebugger());
68:       assertFalse(node0.isParamList());
69:       assertFalse(node0.isGetterDef());
70:       assertFalse(node0.isString());
71:       assertFalse(node0.isDo());
72:       assertTrue(node0.isNumber());
73:       assertFalse(node0.isTypeOf());
74:       assertFalse(node0.isAssignAdd());
75:       assertFalse(node0.isReturn());
76:       assertFalse(node0.isWhile());
77:       assertFalse(node0.isDec());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.hasChildren());
80:       assertFalse(node0.isLabel());
81:       assertFalse(node0.isCall());
82:       assertFalse(node0.isVar());
83:       assertFalse(node0.isName());
84:       assertFalse(node0.isDelProp());
85:       assertFalse(node0.isEmpty());
86:       assertFalse(node0.isGetElem());
87:       assertFalse(node0.isNew());
88:       assertFalse(node0.isAdd());
89:       assertFalse(node0.isBreak());
90:       assertFalse(node0.isTrue());
91:       assertFalse(node0.isVoid());
92:       assertFalse(node0.isOr());
93:       assertFalse(node0.isNull());
94:       assertFalse(node0.isAnd());
95:       assertFalse(node0.isObjectLit());
96:       assertFalse(node0.isWith());
97:       assertFalse(node0.isInstanceOf());
98:       assertFalse(node0.isScript());
99:       assertFalse(node0.isGetProp());
100:       assertFalse(node0.isThis());
101:       assertFalse(node0.isExprResult());
102:       assertFalse(node0.isComma());
103:       assertFalse(node0.isCast());
104:       assertFalse(node0.isFalse());
105:       assertFalse(node0.isLabelName());
106:       assertFalse(node0.hasOneChild());
107:       assertEquals((-1), node0.getCharno());
108:       assertFalse(node0.isSwitch());
109:       assertFalse(node0.isNot());
110:       assertEquals((-1), node0.getSourcePosition());
111:       assertFalse(node0.isContinue());
112:       assertFalse(node0.isIn());
113:       assertFalse(node0.hasMoreThanOneChild());
114:       assertEquals((-1), node0.getLineno());
115:       assertFalse(node0.isCase());
116:       assertFalse(node0.isBlock());
117:       assertFalse(node0.isFor());
118:       assertFalse(node0.isHook());
119:       assertEquals(39, node0.getType());
120:       assertFalse(node0.isThrow());
121:       assertFalse(node0.isSetterDef());
122:       assertFalse(node0.isInc());
123:       assertFalse(node0.isNE());
124:       assertFalse(node0.isIf());
125:       
126:       Node node1 = Node.newString(0, "", 4, 38);
127:       assertEquals(8, Node.FLAG_NO_THROWS);
128:       assertEquals(39, Node.EMPTY_BLOCK);
129:       assertEquals(48, Node.DIRECTIVES);
130:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
131:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
132:       assertEquals(4095, Node.COLUMN_MASK);
133:       assertEquals(55, Node.INFERRED_FUNCTION);
134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
135:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
136:       assertEquals(54, Node.SLASH_V);
137:       assertEquals(40, Node.ORIGINALNAME_PROP);
138:       assertEquals(51, Node.STATIC_SOURCE_FILE);
139:       assertEquals(50, Node.FREE_CALL);
140:       assertEquals(46, Node.IS_NAMESPACE);
141:       assertEquals(43, Node.IS_CONSTANT_NAME);
142:       assertEquals(37, Node.OPT_ARG_NAME);
143:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
144:       assertEquals(2, Node.POST_FLAG);
145:       assertEquals(29, Node.JSDOC_INFO_PROP);
146:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
147:       assertEquals(30, Node.VAR_ARGS_NAME);
148:       assertEquals(1, Node.DECR_FLAG);
149:       assertEquals(32, Node.INCRDECR_PROP);
150:       assertEquals(57, Node.LAST_PROP);
151:       assertEquals(47, Node.IS_DISPATCHER);
152:       assertEquals(12, Node.COLUMN_BITS);
153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
154:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(52, Node.LENGTH);
157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(53, Node.INPUT_ID);
160:       assertEquals(49, Node.DIRECT_EVAL);
161:       assertEquals(57, Node.REFLECTED_OBJECT);
162:       assertEquals(56, Node.CHANGE_TIME);
163:       assertNotNull(node1);
164:       assertFalse(node1.equals((Object)node0));
165:       assertFalse(node1.isScript());
166:       assertFalse(node1.isNot());
167:       assertFalse(node1.isExprResult());
168:       assertFalse(node1.isObjectLit());
169:       assertFalse(node1.isWith());
170:       assertFalse(node1.hasOneChild());
171:       assertFalse(node1.isThis());
172:       assertFalse(node1.isNumber());
173:       assertFalse(node1.isLabelName());
174:       assertFalse(node1.isFalse());
175:       assertFalse(node1.isGetProp());
176:       assertFalse(node1.isCast());
177:       assertFalse(node1.isSwitch());
178:       assertFalse(node1.isAnd());
179:       assertFalse(node1.isDo());
180:       assertFalse(node1.isAdd());
181:       assertEquals(0, node1.getType());
182:       assertFalse(node1.isString());
183:       assertFalse(node1.isReturn());
184:       assertFalse(node1.isLabel());
185:       assertFalse(node1.isNew());
186:       assertFalse(node1.isVar());
187:       assertFalse(node1.isAssignAdd());
188:       assertFalse(node1.isWhile());
189:       assertFalse(node1.isBreak());
190:       assertFalse(node1.isDec());
191:       assertFalse(node1.hasChildren());
192:       assertFalse(node1.isDelProp());
193:       assertFalse(node1.isTypeOf());
194:       assertFalse(node1.isNull());
195:       assertFalse(node1.isAssign());
196:       assertFalse(node1.isComma());
197:       assertFalse(node1.isGetElem());
198:       assertFalse(node1.isCall());
199:       assertFalse(node1.isEmpty());
200:       assertFalse(node1.isOr());
201:       assertFalse(node1.isVoid());
202:       assertFalse(node1.isName());
203:       assertFalse(node1.isTrue());
204:       assertFalse(node1.isDefaultCase());
205:       assertFalse(node1.isRegExp());
206:       assertEquals(16422, node1.getSourcePosition());
207:       assertFalse(node1.isDebugger());
208:       assertFalse(node1.isFunction());
209:       assertFalse(node1.isCatch());
210:       assertEquals(0, node1.getChildCount());
211:       assertFalse(node1.isTry());
212:       assertFalse(node1.isFor());
213:       assertFalse(node1.isGetterDef());
214:       assertEquals(4, node1.getLineno());
215:       assertFalse(node1.isArrayLit());
216:       assertFalse(node1.isStringKey());
217:       assertFalse(node1.isParamList());
218:       assertEquals(38, node1.getCharno());
219:       assertFalse(node1.isCase());
220:       assertFalse(node1.isContinue());
221:       assertFalse(node1.isInc());
222:       assertFalse(node1.hasMoreThanOneChild());
223:       assertFalse(node1.isHook());
224:       assertFalse(node1.isThrow());
225:       assertFalse(node1.isBlock());
226:       assertFalse(node1.isIf());
227:       assertFalse(node1.isSetterDef());
228:       assertFalse(node1.isInstanceOf());
229:       assertFalse(node1.isIn());
230:       assertFalse(node1.isNE());
231:       
232:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
233:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
234:       assertEquals(50, Node.FREE_CALL);
235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
236:       assertEquals(39, Node.EMPTY_BLOCK);
237:       assertEquals(40, Node.ORIGINALNAME_PROP);
238:       assertEquals(48, Node.DIRECTIVES);
239:       assertEquals(4095, Node.COLUMN_MASK);
240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
241:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
242:       assertEquals(30, Node.VAR_ARGS_NAME);
243:       assertEquals(43, Node.IS_CONSTANT_NAME);
244:       assertEquals(1, Node.DECR_FLAG);
245:       assertEquals(46, Node.IS_NAMESPACE);
246:       assertEquals(54, Node.SLASH_V);
247:       assertEquals(51, Node.STATIC_SOURCE_FILE);
248:       assertEquals(29, Node.JSDOC_INFO_PROP);
249:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
250:       assertEquals(56, Node.CHANGE_TIME);
251:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
252:       assertEquals(37, Node.OPT_ARG_NAME);
253:       assertEquals(32, Node.INCRDECR_PROP);
254:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
255:       assertEquals(2, Node.POST_FLAG);
256:       assertEquals(12, Node.COLUMN_BITS);
257:       assertEquals(47, Node.IS_DISPATCHER);
258:       assertEquals(49, Node.DIRECT_EVAL);
259:       assertEquals(57, Node.LAST_PROP);
260:       assertEquals(55, Node.INFERRED_FUNCTION);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(52, Node.LENGTH);
264:       assertEquals(53, Node.INPUT_ID);
265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
266:       assertEquals(8, Node.FLAG_NO_THROWS);
267:       assertEquals(57, Node.REFLECTED_OBJECT);
268:       assertEquals(36, Node.QUOTED_PROP);
269:       assertEquals(8, Node.FLAG_NO_THROWS);
270:       assertEquals(39, Node.EMPTY_BLOCK);
271:       assertEquals(48, Node.DIRECTIVES);
272:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
273:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
274:       assertEquals(4095, Node.COLUMN_MASK);
275:       assertEquals(55, Node.INFERRED_FUNCTION);
276:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
277:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
278:       assertEquals(54, Node.SLASH_V);
279:       assertEquals(40, Node.ORIGINALNAME_PROP);
280:       assertEquals(51, Node.STATIC_SOURCE_FILE);
281:       assertEquals(50, Node.FREE_CALL);
282:       assertEquals(46, Node.IS_NAMESPACE);
283:       assertEquals(43, Node.IS_CONSTANT_NAME);
284:       assertEquals(37, Node.OPT_ARG_NAME);
285:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
286:       assertEquals(2, Node.POST_FLAG);
287:       assertEquals(29, Node.JSDOC_INFO_PROP);
288:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
289:       assertEquals(30, Node.VAR_ARGS_NAME);
290:       assertEquals(1, Node.DECR_FLAG);
291:       assertEquals(32, Node.INCRDECR_PROP);
292:       assertEquals(57, Node.LAST_PROP);
293:       assertEquals(47, Node.IS_DISPATCHER);
294:       assertEquals(12, Node.COLUMN_BITS);
295:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
296:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
297:       assertEquals(36, Node.QUOTED_PROP);
298:       assertEquals(52, Node.LENGTH);
299:       assertEquals(15, Node.NO_SIDE_EFFECTS);
300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
301:       assertEquals(53, Node.INPUT_ID);
302:       assertEquals(49, Node.DIRECT_EVAL);
303:       assertEquals(57, Node.REFLECTED_OBJECT);
304:       assertEquals(56, Node.CHANGE_TIME);
305:       assertNotNull(node_NodeMismatch0);
306:       assertFalse(node0.equals((Object)node1));
307:       assertFalse(node1.equals((Object)node0));
308:       assertFalse(node0.isCatch());
309:       assertFalse(node0.isFunction());
310:       assertFalse(node0.isRegExp());
311:       assertFalse(node0.isDefaultCase());
312:       assertEquals(0, node0.getChildCount());
313:       assertFalse(node0.isStringKey());
314:       assertFalse(node0.isTry());
315:       assertFalse(node0.isArrayLit());
316:       assertFalse(node0.isDebugger());
317:       assertFalse(node0.isParamList());
318:       assertFalse(node0.isGetterDef());
319:       assertFalse(node0.isString());
320:       assertFalse(node0.isDo());
321:       assertTrue(node0.isNumber());
322:       assertFalse(node0.isTypeOf());
323:       assertFalse(node0.isAssignAdd());
324:       assertFalse(node0.isReturn());
325:       assertFalse(node0.isWhile());
326:       assertFalse(node0.isDec());
327:       assertFalse(node0.isAssign());
328:       assertFalse(node0.hasChildren());
329:       assertFalse(node0.isLabel());
330:       assertFalse(node0.isCall());
331:       assertFalse(node0.isVar());
332:       assertFalse(node0.isName());
333:       assertFalse(node0.isDelProp());
334:       assertFalse(node0.isEmpty());
335:       assertFalse(node0.isGetElem());
336:       assertFalse(node0.isNew());
337:       assertFalse(node0.isAdd());
338:       assertFalse(node0.isBreak());
339:       assertFalse(node0.isTrue());
340:       assertFalse(node0.isVoid());
341:       assertFalse(node0.isOr());
342:       assertFalse(node0.isNull());
343:       assertFalse(node0.isAnd());
344:       assertFalse(node0.isObjectLit());
345:       assertFalse(node0.isWith());
346:       assertFalse(node0.isInstanceOf());
347:       assertFalse(node0.isScript());
348:       assertFalse(node0.isGetProp());
349:       assertFalse(node0.isThis());
350:       assertFalse(node0.isExprResult());
351:       assertFalse(node0.isComma());
352:       assertFalse(node0.isCast());
353:       assertFalse(node0.isFalse());
354:       assertFalse(node0.isLabelName());
355:       assertFalse(node0.hasOneChild());
356:       assertEquals((-1), node0.getCharno());
357:       assertFalse(node0.isSwitch());
358:       assertFalse(node0.isNot());
359:       assertEquals((-1), node0.getSourcePosition());
360:       assertFalse(node0.isContinue());
361:       assertFalse(node0.isIn());
362:       assertFalse(node0.hasMoreThanOneChild());
363:       assertEquals((-1), node0.getLineno());
364:       assertFalse(node0.isCase());
365:       assertFalse(node0.isBlock());
366:       assertFalse(node0.isFor());
367:       assertFalse(node0.isHook());
368:       assertEquals(39, node0.getType());
369:       assertFalse(node0.isThrow());
370:       assertFalse(node0.isSetterDef());
371:       assertFalse(node0.isInc());
372:       assertFalse(node0.isNE());
373:       assertFalse(node0.isIf());
374:       assertFalse(node1.isScript());
375:       assertFalse(node1.isNot());
376:       assertFalse(node1.isExprResult());
377:       assertFalse(node1.isObjectLit());
378:       assertFalse(node1.isWith());
379:       assertFalse(node1.hasOneChild());
380:       assertFalse(node1.isThis());
381:       assertFalse(node1.isNumber());
382:       assertFalse(node1.isLabelName());
383:       assertFalse(node1.isFalse());
384:       assertFalse(node1.isGetProp());
385:       assertFalse(node1.isCast());
386:       assertFalse(node1.isSwitch());
387:       assertFalse(node1.isAnd());
388:       assertFalse(node1.isDo());
389:       assertFalse(node1.isAdd());
390:       assertEquals(0, node1.getType());
391:       assertFalse(node1.isString());
392:       assertFalse(node1.isReturn());
393:       assertFalse(node1.isLabel());
394:       assertFalse(node1.isNew());
395:       assertFalse(node1.isVar());
396:       assertFalse(node1.isAssignAdd());
397:       assertFalse(node1.isWhile());
398:       assertFalse(node1.isBreak());
399:       assertFalse(node1.isDec());
400:       assertFalse(node1.hasChildren());
401:       assertFalse(node1.isDelProp());
402:       assertFalse(node1.isTypeOf());
403:       assertFalse(node1.isNull());
404:       assertFalse(node1.isAssign());
405:       assertFalse(node1.isComma());
406:       assertFalse(node1.isGetElem());
407:       assertFalse(node1.isCall());
408:       assertFalse(node1.isEmpty());
409:       assertFalse(node1.isOr());
410:       assertFalse(node1.isVoid());
411:       assertFalse(node1.isName());
412:       assertFalse(node1.isTrue());
413:       assertFalse(node1.isDefaultCase());
414:       assertFalse(node1.isRegExp());
415:       assertEquals(16422, node1.getSourcePosition());
416:       assertFalse(node1.isDebugger());
417:       assertFalse(node1.isFunction());
418:       assertFalse(node1.isCatch());
419:       assertEquals(0, node1.getChildCount());
420:       assertFalse(node1.isTry());
421:       assertFalse(node1.isFor());
422:       assertFalse(node1.isGetterDef());
423:       assertEquals(4, node1.getLineno());
424:       assertFalse(node1.isArrayLit());
425:       assertFalse(node1.isStringKey());
426:       assertFalse(node1.isParamList());
427:       assertEquals(38, node1.getCharno());
428:       assertFalse(node1.isCase());
429:       assertFalse(node1.isContinue());
430:       assertFalse(node1.isInc());
431:       assertFalse(node1.hasMoreThanOneChild());
432:       assertFalse(node1.isHook());
433:       assertFalse(node1.isThrow());
434:       assertFalse(node1.isBlock());
435:       assertFalse(node1.isIf());
436:       assertFalse(node1.isSetterDef());
437:       assertFalse(node1.isInstanceOf());
438:       assertFalse(node1.isIn());
439:       assertFalse(node1.isNE());
440:       
441:       boolean boolean0 = node_NodeMismatch0.equals("");
442:       assertFalse(boolean0);
443:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
444:       assertEquals(50, Node.FREE_CALL);
445:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
446:       assertEquals(39, Node.EMPTY_BLOCK);
447:       assertEquals(40, Node.ORIGINALNAME_PROP);
448:       assertEquals(48, Node.DIRECTIVES);
449:       assertEquals(4095, Node.COLUMN_MASK);
450:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
451:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
452:       assertEquals(30, Node.VAR_ARGS_NAME);
453:       assertEquals(43, Node.IS_CONSTANT_NAME);
454:       assertEquals(1, Node.DECR_FLAG);
455:       assertEquals(46, Node.IS_NAMESPACE);
456:       assertEquals(54, Node.SLASH_V);
457:       assertEquals(51, Node.STATIC_SOURCE_FILE);
458:       assertEquals(29, Node.JSDOC_INFO_PROP);
459:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
460:       assertEquals(56, Node.CHANGE_TIME);
461:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
462:       assertEquals(37, Node.OPT_ARG_NAME);
463:       assertEquals(32, Node.INCRDECR_PROP);
464:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
465:       assertEquals(2, Node.POST_FLAG);
466:       assertEquals(12, Node.COLUMN_BITS);
467:       assertEquals(47, Node.IS_DISPATCHER);
468:       assertEquals(49, Node.DIRECT_EVAL);
469:       assertEquals(57, Node.LAST_PROP);
470:       assertEquals(55, Node.INFERRED_FUNCTION);
471:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
472:       assertEquals(15, Node.NO_SIDE_EFFECTS);
473:       assertEquals(52, Node.LENGTH);
474:       assertEquals(53, Node.INPUT_ID);
475:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
476:       assertEquals(8, Node.FLAG_NO_THROWS);
477:       assertEquals(57, Node.REFLECTED_OBJECT);
478:       assertEquals(36, Node.QUOTED_PROP);
479:       assertEquals(8, Node.FLAG_NO_THROWS);
480:       assertEquals(39, Node.EMPTY_BLOCK);
481:       assertEquals(48, Node.DIRECTIVES);
482:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
483:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
484:       assertEquals(4095, Node.COLUMN_MASK);
485:       assertEquals(55, Node.INFERRED_FUNCTION);
486:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
487:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
488:       assertEquals(54, Node.SLASH_V);
489:       assertEquals(40, Node.ORIGINALNAME_PROP);
490:       assertEquals(51, Node.STATIC_SOURCE_FILE);
491:       assertEquals(50, Node.FREE_CALL);
492:       assertEquals(46, Node.IS_NAMESPACE);
493:       assertEquals(43, Node.IS_CONSTANT_NAME);
494:       assertEquals(37, Node.OPT_ARG_NAME);
495:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
496:       assertEquals(2, Node.POST_FLAG);
497:       assertEquals(29, Node.JSDOC_INFO_PROP);
498:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
499:       assertEquals(30, Node.VAR_ARGS_NAME);
500:       assertEquals(1, Node.DECR_FLAG);
501:       assertEquals(32, Node.INCRDECR_PROP);
502:       assertEquals(57, Node.LAST_PROP);
503:       assertEquals(47, Node.IS_DISPATCHER);
504:       assertEquals(12, Node.COLUMN_BITS);
505:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
506:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
507:       assertEquals(36, Node.QUOTED_PROP);
508:       assertEquals(52, Node.LENGTH);
509:       assertEquals(15, Node.NO_SIDE_EFFECTS);
510:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
511:       assertEquals(53, Node.INPUT_ID);
512:       assertEquals(49, Node.DIRECT_EVAL);
513:       assertEquals(57, Node.REFLECTED_OBJECT);
514:       assertEquals(56, Node.CHANGE_TIME);
515:       assertFalse(node0.equals((Object)node1));
516:       assertFalse(node1.equals((Object)node0));
517:       assertFalse(node0.isCatch());
518:       assertFalse(node0.isFunction());
519:       assertFalse(node0.isRegExp());
520:       assertFalse(node0.isDefaultCase());
521:       assertEquals(0, node0.getChildCount());
522:       assertFalse(node0.isStringKey());
523:       assertFalse(node0.isTry());
524:       assertFalse(node0.isArrayLit());
525:       assertFalse(node0.isDebugger());
526:       assertFalse(node0.isParamList());
527:       assertFalse(node0.isGetterDef());
528:       assertFalse(node0.isString());
529:       assertFalse(node0.isDo());
530:       assertTrue(node0.isNumber());
531:       assertFalse(node0.isTypeOf());
532:       assertFalse(node0.isAssignAdd());
533:       assertFalse(node0.isReturn());
534:       assertFalse(node0.isWhile());
535:       assertFalse(node0.isDec());
536:       assertFalse(node0.isAssign());
537:       assertFalse(node0.hasChildren());
538:       assertFalse(node0.isLabel());
539:       assertFalse(node0.isCall());
540:       assertFalse(node0.isVar());
541:       assertFalse(node0.isName());
542:       assertFalse(node0.isDelProp());
543:       assertFalse(node0.isEmpty());
544:       assertFalse(node0.isGetElem());
545:       assertFalse(node0.isNew());
546:       assertFalse(node0.isAdd());
547:       assertFalse(node0.isBreak());
548:       assertFalse(node0.isTrue());
549:       assertFalse(node0.isVoid());
550:       assertFalse(node0.isOr());
551:       assertFalse(node0.isNull());
552:       assertFalse(node0.isAnd());
553:       assertFalse(node0.isObjectLit());
554:       assertFalse(node0.isWith());
555:       assertFalse(node0.isInstanceOf());
556:       assertFalse(node0.isScript());
557:       assertFalse(node0.isGetProp());
558:       assertFalse(node0.isThis());
559:       assertFalse(node0.isExprResult());
560:       assertFalse(node0.isComma());
561:       assertFalse(node0.isCast());
562:       assertFalse(node0.isFalse());
563:       assertFalse(node0.isLabelName());
564:       assertFalse(node0.hasOneChild());
565:       assertEquals((-1), node0.getCharno());
566:       assertFalse(node0.isSwitch());
567:       assertFalse(node0.isNot());
568:       assertEquals((-1), node0.getSourcePosition());
569:       assertFalse(node0.isContinue());
570:       assertFalse(node0.isIn());
571:       assertFalse(node0.hasMoreThanOneChild());
572:       assertEquals((-1), node0.getLineno());
573:       assertFalse(node0.isCase());
574:       assertFalse(node0.isBlock());
575:       assertFalse(node0.isFor());
576:       assertFalse(node0.isHook());
577:       assertEquals(39, node0.getType());
578:       assertFalse(node0.isThrow());
579:       assertFalse(node0.isSetterDef());
580:       assertFalse(node0.isInc());
581:       assertFalse(node0.isNE());
582:       assertFalse(node0.isIf());
583:       assertFalse(node1.isScript());
584:       assertFalse(node1.isNot());
585:       assertFalse(node1.isExprResult());
586:       assertFalse(node1.isObjectLit());
587:       assertFalse(node1.isWith());
588:       assertFalse(node1.hasOneChild());
589:       assertFalse(node1.isThis());
590:       assertFalse(node1.isNumber());
591:       assertFalse(node1.isLabelName());
592:       assertFalse(node1.isFalse());
593:       assertFalse(node1.isGetProp());
594:       assertFalse(node1.isCast());
595:       assertFalse(node1.isSwitch());
596:       assertFalse(node1.isAnd());
597:       assertFalse(node1.isDo());
598:       assertFalse(node1.isAdd());
599:       assertEquals(0, node1.getType());
600:       assertFalse(node1.isString());
601:       assertFalse(node1.isReturn());
602:       assertFalse(node1.isLabel());
603:       assertFalse(node1.isNew());
604:       assertFalse(node1.isVar());
605:       assertFalse(node1.isAssignAdd());
606:       assertFalse(node1.isWhile());
607:       assertFalse(node1.isBreak());
608:       assertFalse(node1.isDec());
609:       assertFalse(node1.hasChildren());
610:       assertFalse(node1.isDelProp());
611:       assertFalse(node1.isTypeOf());
612:       assertFalse(node1.isNull());
613:       assertFalse(node1.isAssign());
614:       assertFalse(node1.isComma());
615:       assertFalse(node1.isGetElem());
616:       assertFalse(node1.isCall());
617:       assertFalse(node1.isEmpty());
618:       assertFalse(node1.isOr());
619:       assertFalse(node1.isVoid());
620:       assertFalse(node1.isName());
621:       assertFalse(node1.isTrue());
622:       assertFalse(node1.isDefaultCase());
623:       assertFalse(node1.isRegExp());
624:       assertEquals(16422, node1.getSourcePosition());
625:       assertFalse(node1.isDebugger());
626:       assertFalse(node1.isFunction());
627:       assertFalse(node1.isCatch());
628:       assertEquals(0, node1.getChildCount());
629:       assertFalse(node1.isTry());
630:       assertFalse(node1.isFor());
631:       assertFalse(node1.isGetterDef());
632:       assertEquals(4, node1.getLineno());
633:       assertFalse(node1.isArrayLit());
634:       assertFalse(node1.isStringKey());
635:       assertFalse(node1.isParamList());
636:       assertEquals(38, node1.getCharno());
637:       assertFalse(node1.isCase());
638:       assertFalse(node1.isContinue());
639:       assertFalse(node1.isInc());
640:       assertFalse(node1.hasMoreThanOneChild());
641:       assertFalse(node1.isHook());
642:       assertFalse(node1.isThrow());
643:       assertFalse(node1.isBlock());
644:       assertFalse(node1.isIf());
645:       assertFalse(node1.isSetterDef());
646:       assertFalse(node1.isInstanceOf());
647:       assertFalse(node1.isIn());
648:       assertFalse(node1.isNE());
649:       
650:       boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
651:       assertFalse(boolean1);
652:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
653:       assertEquals(50, Node.FREE_CALL);
654:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
655:       assertEquals(39, Node.EMPTY_BLOCK);
656:       assertEquals(40, Node.ORIGINALNAME_PROP);
657:       assertEquals(48, Node.DIRECTIVES);
658:       assertEquals(4095, Node.COLUMN_MASK);
659:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
660:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
661:       assertEquals(30, Node.VAR_ARGS_NAME);
662:       assertEquals(43, Node.IS_CONSTANT_NAME);
663:       assertEquals(1, Node.DECR_FLAG);
664:       assertEquals(46, Node.IS_NAMESPACE);
665:       assertEquals(54, Node.SLASH_V);
666:       assertEquals(51, Node.STATIC_SOURCE_FILE);
667:       assertEquals(29, Node.JSDOC_INFO_PROP);
668:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
669:       assertEquals(56, Node.CHANGE_TIME);
670:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
671:       assertEquals(37, Node.OPT_ARG_NAME);
672:       assertEquals(32, Node.INCRDECR_PROP);
673:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
674:       assertEquals(2, Node.POST_FLAG);
675:       assertEquals(12, Node.COLUMN_BITS);
676:       assertEquals(47, Node.IS_DISPATCHER);
677:       assertEquals(49, Node.DIRECT_EVAL);
678:       assertEquals(57, Node.LAST_PROP);
679:       assertEquals(55, Node.INFERRED_FUNCTION);
680:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
681:       assertEquals(15, Node.NO_SIDE_EFFECTS);
682:       assertEquals(52, Node.LENGTH);
683:       assertEquals(53, Node.INPUT_ID);
684:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
685:       assertEquals(8, Node.FLAG_NO_THROWS);
686:       assertEquals(57, Node.REFLECTED_OBJECT);
687:       assertEquals(36, Node.QUOTED_PROP);
688:       assertEquals(8, Node.FLAG_NO_THROWS);
689:       assertEquals(39, Node.EMPTY_BLOCK);
690:       assertEquals(48, Node.DIRECTIVES);
691:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
692:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
693:       assertEquals(4095, Node.COLUMN_MASK);
694:       assertEquals(55, Node.INFERRED_FUNCTION);
695:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
696:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
697:       assertEquals(54, Node.SLASH_V);
698:       assertEquals(40, Node.ORIGINALNAME_PROP);
699:       assertEquals(51, Node.STATIC_SOURCE_FILE);
700:       assertEquals(50, Node.FREE_CALL);
701:       assertEquals(46, Node.IS_NAMESPACE);
702:       assertEquals(43, Node.IS_CONSTANT_NAME);
703:       assertEquals(37, Node.OPT_ARG_NAME);
704:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
705:       assertEquals(2, Node.POST_FLAG);
706:       assertEquals(29, Node.JSDOC_INFO_PROP);
707:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
708:       assertEquals(30, Node.VAR_ARGS_NAME);
709:       assertEquals(1, Node.DECR_FLAG);
710:       assertEquals(32, Node.INCRDECR_PROP);
711:       assertEquals(57, Node.LAST_PROP);
712:       assertEquals(47, Node.IS_DISPATCHER);
713:       assertEquals(12, Node.COLUMN_BITS);
714:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
715:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
716:       assertEquals(36, Node.QUOTED_PROP);
717:       assertEquals(52, Node.LENGTH);
718:       assertEquals(15, Node.NO_SIDE_EFFECTS);
719:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
720:       assertEquals(53, Node.INPUT_ID);
721:       assertEquals(49, Node.DIRECT_EVAL);
722:       assertEquals(57, Node.REFLECTED_OBJECT);
723:       assertEquals(56, Node.CHANGE_TIME);
724:       assertFalse(node0.equals((Object)node1));
725:       assertFalse(node1.equals((Object)node0));
726:       assertTrue(boolean1 == boolean0);
727:       assertFalse(node0.isCatch());
728:       assertFalse(node0.isFunction());
729:       assertFalse(node0.isRegExp());
730:       assertFalse(node0.isDefaultCase());
731:       assertEquals(0, node0.getChildCount());
732:       assertFalse(node0.isStringKey());
733:       assertFalse(node0.isTry());
734:       assertFalse(node0.isArrayLit());
735:       assertFalse(node0.isDebugger());
736:       assertFalse(node0.isParamList());
737:       assertFalse(node0.isGetterDef());
738:       assertFalse(node0.isString());
739:       assertFalse(node0.isDo());
740:       assertTrue(node0.isNumber());
741:       assertFalse(node0.isTypeOf());
742:       assertFalse(node0.isAssignAdd());
743:       assertFalse(node0.isReturn());
744:       assertFalse(node0.isWhile());
745:       assertFalse(node0.isDec());
746:       assertFalse(node0.isAssign());
747:       assertFalse(node0.hasChildren());
748:       assertFalse(node0.isLabel());
749:       assertFalse(node0.isCall());
750:       assertFalse(node0.isVar());
751:       assertFalse(node0.isName());
752:       assertFalse(node0.isDelProp());
753:       assertFalse(node0.isEmpty());
754:       assertFalse(node0.isGetElem());
755:       assertFalse(node0.isNew());
756:       assertFalse(node0.isAdd());
757:       assertFalse(node0.isBreak());
758:       assertFalse(node0.isTrue());
759:       assertFalse(node0.isVoid());
760:       assertFalse(node0.isOr());
761:       assertFalse(node0.isNull());
762:       assertFalse(node0.isAnd());
763:       assertFalse(node0.isObjectLit());
764:       assertFalse(node0.isWith());
765:       assertFalse(node0.isInstanceOf());
766:       assertFalse(node0.isScript());
767:       assertFalse(node0.isGetProp());
768:       assertFalse(node0.isThis());
769:       assertFalse(node0.isExprResult());
770:       assertFalse(node0.isComma());
771:       assertFalse(node0.isCast());
772:       assertFalse(node0.isFalse());
773:       assertFalse(node0.isLabelName());
774:       assertFalse(node0.hasOneChild());
775:       assertEquals((-1), node0.getCharno());
776:       assertFalse(node0.isSwitch());
777:       assertFalse(node0.isNot());
778:       assertEquals((-1), node0.getSourcePosition());
779:       assertFalse(node0.isContinue());
780:       assertFalse(node0.isIn());
781:       assertFalse(node0.hasMoreThanOneChild());
782:       assertEquals((-1), node0.getLineno());
783:       assertFalse(node0.isCase());
784:       assertFalse(node0.isBlock());
785:       assertFalse(node0.isFor());
786:       assertFalse(node0.isHook());
787:       assertEquals(39, node0.getType());
788:       assertFalse(node0.isThrow());
789:       assertFalse(node0.isSetterDef());
790:       assertFalse(node0.isInc());
791:       assertFalse(node0.isNE());
792:       assertFalse(node0.isIf());
793:       assertFalse(node1.isScript());
794:       assertFalse(node1.isNot());
795:       assertFalse(node1.isExprResult());
796:       assertFalse(node1.isObjectLit());
797:       assertFalse(node1.isWith());
798:       assertFalse(node1.hasOneChild());
799:       assertFalse(node1.isThis());
800:       assertFalse(node1.isNumber());
801:       assertFalse(node1.isLabelName());
802:       assertFalse(node1.isFalse());
803:       assertFalse(node1.isGetProp());
804:       assertFalse(node1.isCast());
805:       assertFalse(node1.isSwitch());
806:       assertFalse(node1.isAnd());
807:       assertFalse(node1.isDo());
808:       assertFalse(node1.isAdd());
809:       assertEquals(0, node1.getType());
810:       assertFalse(node1.isString());
811:       assertFalse(node1.isReturn());
812:       assertFalse(node1.isLabel());
813:       assertFalse(node1.isNew());
814:       assertFalse(node1.isVar());
815:       assertFalse(node1.isAssignAdd());
816:       assertFalse(node1.isWhile());
817:       assertFalse(node1.isBreak());
818:       assertFalse(node1.isDec());
819:       assertFalse(node1.hasChildren());
820:       assertFalse(node1.isDelProp());
821:       assertFalse(node1.isTypeOf());
822:       assertFalse(node1.isNull());
823:       assertFalse(node1.isAssign());
824:       assertFalse(node1.isComma());
825:       assertFalse(node1.isGetElem());
826:       assertFalse(node1.isCall());
827:       assertFalse(node1.isEmpty());
828:       assertFalse(node1.isOr());
829:       assertFalse(node1.isVoid());
830:       assertFalse(node1.isName());
831:       assertFalse(node1.isTrue());
832:       assertFalse(node1.isDefaultCase());
833:       assertFalse(node1.isRegExp());
834:       assertEquals(16422, node1.getSourcePosition());
835:       assertFalse(node1.isDebugger());
836:       assertFalse(node1.isFunction());
837:       assertFalse(node1.isCatch());
838:       assertEquals(0, node1.getChildCount());
839:       assertFalse(node1.isTry());
840:       assertFalse(node1.isFor());
841:       assertFalse(node1.isGetterDef());
842:       assertEquals(4, node1.getLineno());
843:       assertFalse(node1.isArrayLit());
844:       assertFalse(node1.isStringKey());
845:       assertFalse(node1.isParamList());
846:       assertEquals(38, node1.getCharno());
847:       assertFalse(node1.isCase());
848:       assertFalse(node1.isContinue());
849:       assertFalse(node1.isInc());
850:       assertFalse(node1.hasMoreThanOneChild());
851:       assertFalse(node1.isHook());
852:       assertFalse(node1.isThrow());
853:       assertFalse(node1.isBlock());
854:       assertFalse(node1.isIf());
855:       assertFalse(node1.isSetterDef());
856:       assertFalse(node1.isInstanceOf());
857:       assertFalse(node1.isIn());
858:       assertFalse(node1.isNE());
859:       
860:       Iterable<Node> iterable0 = node0.children();
861:       assertFalse(iterable0.contains(node1));
862:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
863:       assertEquals(50, Node.FREE_CALL);
864:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
865:       assertEquals(39, Node.EMPTY_BLOCK);
866:       assertEquals(40, Node.ORIGINALNAME_PROP);
867:       assertEquals(48, Node.DIRECTIVES);
868:       assertEquals(4095, Node.COLUMN_MASK);
869:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
870:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
871:       assertEquals(30, Node.VAR_ARGS_NAME);
872:       assertEquals(43, Node.IS_CONSTANT_NAME);
873:       assertEquals(1, Node.DECR_FLAG);
874:       assertEquals(46, Node.IS_NAMESPACE);
875:       assertEquals(54, Node.SLASH_V);
876:       assertEquals(51, Node.STATIC_SOURCE_FILE);
877:       assertEquals(29, Node.JSDOC_INFO_PROP);
878:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
879:       assertEquals(56, Node.CHANGE_TIME);
880:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
881:       assertEquals(37, Node.OPT_ARG_NAME);
882:       assertEquals(32, Node.INCRDECR_PROP);
883:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
884:       assertEquals(2, Node.POST_FLAG);
885:       assertEquals(12, Node.COLUMN_BITS);
886:       assertEquals(47, Node.IS_DISPATCHER);
887:       assertEquals(49, Node.DIRECT_EVAL);
888:       assertEquals(57, Node.LAST_PROP);
889:       assertEquals(55, Node.INFERRED_FUNCTION);
890:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
891:       assertEquals(15, Node.NO_SIDE_EFFECTS);
892:       assertEquals(52, Node.LENGTH);
893:       assertEquals(53, Node.INPUT_ID);
894:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
895:       assertEquals(8, Node.FLAG_NO_THROWS);
896:       assertEquals(57, Node.REFLECTED_OBJECT);
897:       assertEquals(36, Node.QUOTED_PROP);
898:       assertNotNull(iterable0);
899:       assertFalse(node0.equals((Object)node1));
900:       assertFalse(node0.isCatch());
901:       assertFalse(node0.isFunction());
902:       assertFalse(node0.isRegExp());
903:       assertFalse(node0.isDefaultCase());
904:       assertEquals(0, node0.getChildCount());
905:       assertFalse(node0.isStringKey());
906:       assertFalse(node0.isTry());
907:       assertFalse(node0.isArrayLit());
908:       assertFalse(node0.isDebugger());
909:       assertFalse(node0.isParamList());
910:       assertFalse(node0.isGetterDef());
911:       assertFalse(node0.isString());
912:       assertFalse(node0.isDo());
913:       assertTrue(node0.isNumber());
914:       assertFalse(node0.isTypeOf());
915:       assertFalse(node0.isAssignAdd());
916:       assertFalse(node0.isReturn());
917:       assertFalse(node0.isWhile());
918:       assertFalse(node0.isDec());
919:       assertFalse(node0.isAssign());
920:       assertFalse(node0.hasChildren());
921:       assertFalse(node0.isLabel());
922:       assertFalse(node0.isCall());
923:       assertFalse(node0.isVar());
924:       assertFalse(node0.isName());
925:       assertFalse(node0.isDelProp());
926:       assertFalse(node0.isEmpty());
927:       assertFalse(node0.isGetElem());
928:       assertFalse(node0.isNew());
929:       assertFalse(node0.isAdd());
930:       assertFalse(node0.isBreak());
931:       assertFalse(node0.isTrue());
932:       assertFalse(node0.isVoid());
933:       assertFalse(node0.isOr());
934:       assertFalse(node0.isNull());
935:       assertFalse(node0.isAnd());
936:       assertFalse(node0.isObjectLit());
937:       assertFalse(node0.isWith());
938:       assertFalse(node0.isInstanceOf());
939:       assertFalse(node0.isScript());
940:       assertFalse(node0.isGetProp());
941:       assertFalse(node0.isThis());
942:       assertFalse(node0.isExprResult());
943:       assertFalse(node0.isComma());
944:       assertFalse(node0.isCast());
945:       assertFalse(node0.isFalse());
946:       assertFalse(node0.isLabelName());
947:       assertFalse(node0.hasOneChild());
948:       assertEquals((-1), node0.getCharno());
949:       assertFalse(node0.isSwitch());
950:       assertFalse(node0.isNot());
951:       assertEquals((-1), node0.getSourcePosition());
952:       assertFalse(node0.isContinue());
953:       assertFalse(node0.isIn());
954:       assertFalse(node0.hasMoreThanOneChild());
955:       assertEquals((-1), node0.getLineno());
956:       assertFalse(node0.isCase());
957:       assertFalse(node0.isBlock());
958:       assertFalse(node0.isFor());
959:       assertFalse(node0.isHook());
960:       assertEquals(39, node0.getType());
961:       assertFalse(node0.isThrow());
962:       assertFalse(node0.isSetterDef());
963:       assertFalse(node0.isInc());
964:       assertFalse(node0.isNE());
965:       assertFalse(node0.isIf());
966:       
967:       boolean boolean2 = node0.isIf();
968:       assertFalse(boolean2);
969:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
970:       assertEquals(50, Node.FREE_CALL);
971:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
972:       assertEquals(39, Node.EMPTY_BLOCK);
973:       assertEquals(40, Node.ORIGINALNAME_PROP);
974:       assertEquals(48, Node.DIRECTIVES);
975:       assertEquals(4095, Node.COLUMN_MASK);
976:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
977:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
978:       assertEquals(30, Node.VAR_ARGS_NAME);
979:       assertEquals(43, Node.IS_CONSTANT_NAME);
980:       assertEquals(1, Node.DECR_FLAG);
981:       assertEquals(46, Node.IS_NAMESPACE);
982:       assertEquals(54, Node.SLASH_V);
983:       assertEquals(51, Node.STATIC_SOURCE_FILE);
984:       assertEquals(29, Node.JSDOC_INFO_PROP);
985:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
986:       assertEquals(56, Node.CHANGE_TIME);
987:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
988:       assertEquals(37, Node.OPT_ARG_NAME);
989:       assertEquals(32, Node.INCRDECR_PROP);
990:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
991:       assertEquals(2, Node.POST_FLAG);
992:       assertEquals(12, Node.COLUMN_BITS);
993:       assertEquals(47, Node.IS_DISPATCHER);
994:       assertEquals(49, Node.DIRECT_EVAL);
995:       assertEquals(57, Node.LAST_PROP);
996:       assertEquals(55, Node.INFERRED_FUNCTION);
997:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
998:       assertEquals(15, Node.NO_SIDE_EFFECTS);
999:       assertEquals(52, Node.LENGTH);
1000:       assertEquals(53, Node.INPUT_ID);
1001:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1002:       assertEquals(8, Node.FLAG_NO_THROWS);
1003:       assertEquals(57, Node.REFLECTED_OBJECT);
1004:       assertEquals(36, Node.QUOTED_PROP);
1005:       assertFalse(node0.equals((Object)node1));
1006:       assertTrue(boolean2 == boolean0);
1007:       assertTrue(boolean2 == boolean1);
1008:       assertFalse(node0.isCatch());
1009:       assertFalse(node0.isFunction());
1010:       assertFalse(node0.isRegExp());
1011:       assertFalse(node0.isDefaultCase());
1012:       assertEquals(0, node0.getChildCount());
1013:       assertFalse(node0.isStringKey());
1014:       assertFalse(node0.isTry());
1015:       assertFalse(node0.isArrayLit());
1016:       assertFalse(node0.isDebugger());
1017:       assertFalse(node0.isParamList());
1018:       assertFalse(node0.isGetterDef());
1019:       assertFalse(node0.isString());
1020:       assertFalse(node0.isDo());
1021:       assertTrue(node0.isNumber());
1022:       assertFalse(node0.isTypeOf());
1023:       assertFalse(node0.isAssignAdd());
1024:       assertFalse(node0.isReturn());
1025:       assertFalse(node0.isWhile());
1026:       assertFalse(node0.isDec());
1027:       assertFalse(node0.isAssign());
1028:       assertFalse(node0.hasChildren());
1029:       assertFalse(node0.isLabel());
1030:       assertFalse(node0.isCall());
1031:       assertFalse(node0.isVar());
1032:       assertFalse(node0.isName());
1033:       assertFalse(node0.isDelProp());
1034:       assertFalse(node0.isEmpty());
1035:       assertFalse(node0.isGetElem());
1036:       assertFalse(node0.isNew());
1037:       assertFalse(node0.isAdd());
1038:       assertFalse(node0.isBreak());
1039:       assertFalse(node0.isTrue());
1040:       assertFalse(node0.isVoid());
1041:       assertFalse(node0.isOr());
1042:       assertFalse(node0.isNull());
1043:       assertFalse(node0.isAnd());
1044:       assertFalse(node0.isObjectLit());
1045:       assertFalse(node0.isWith());
1046:       assertFalse(node0.isInstanceOf());
1047:       assertFalse(node0.isScript());
1048:       assertFalse(node0.isGetProp());
1049:       assertFalse(node0.isThis());
1050:       assertFalse(node0.isExprResult());
1051:       assertFalse(node0.isComma());
1052:       assertFalse(node0.isCast());
1053:       assertFalse(node0.isFalse());
1054:       assertFalse(node0.isLabelName());
1055:       assertFalse(node0.hasOneChild());
1056:       assertEquals((-1), node0.getCharno());
1057:       assertFalse(node0.isSwitch());
1058:       assertFalse(node0.isNot());
1059:       assertEquals((-1), node0.getSourcePosition());
1060:       assertFalse(node0.isContinue());
1061:       assertFalse(node0.isIn());
1062:       assertFalse(node0.hasMoreThanOneChild());
1063:       assertEquals((-1), node0.getLineno());
1064:       assertFalse(node0.isCase());
1065:       assertFalse(node0.isBlock());
1066:       assertFalse(node0.isFor());
1067:       assertFalse(node0.isHook());
1068:       assertEquals(39, node0.getType());
1069:       assertFalse(node0.isThrow());
1070:       assertFalse(node0.isSetterDef());
1071:       assertFalse(node0.isInc());
1072:       assertFalse(node0.isNE());
1073:       assertFalse(node0.isIf());
1074:       
1075:       boolean boolean3 = node1.isEquivalentTo(node0);
1076:       assertFalse(boolean3);
1077:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1078:       assertEquals(50, Node.FREE_CALL);
1079:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1080:       assertEquals(39, Node.EMPTY_BLOCK);
1081:       assertEquals(40, Node.ORIGINALNAME_PROP);
1082:       assertEquals(48, Node.DIRECTIVES);
1083:       assertEquals(4095, Node.COLUMN_MASK);
1084:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1085:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1086:       assertEquals(30, Node.VAR_ARGS_NAME);
1087:       assertEquals(43, Node.IS_CONSTANT_NAME);
1088:       assertEquals(1, Node.DECR_FLAG);
1089:       assertEquals(46, Node.IS_NAMESPACE);
1090:       assertEquals(54, Node.SLASH_V);
1091:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1092:       assertEquals(29, Node.JSDOC_INFO_PROP);
1093:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1094:       assertEquals(56, Node.CHANGE_TIME);
1095:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1096:       assertEquals(37, Node.OPT_ARG_NAME);
1097:       assertEquals(32, Node.INCRDECR_PROP);
1098:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1099:       assertEquals(2, Node.POST_FLAG);
1100:       assertEquals(12, Node.COLUMN_BITS);
1101:       assertEquals(47, Node.IS_DISPATCHER);
1102:       assertEquals(49, Node.DIRECT_EVAL);
1103:       assertEquals(57, Node.LAST_PROP);
1104:       assertEquals(55, Node.INFERRED_FUNCTION);
1105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1107:       assertEquals(52, Node.LENGTH);
1108:       assertEquals(53, Node.INPUT_ID);
1109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1110:       assertEquals(8, Node.FLAG_NO_THROWS);
1111:       assertEquals(57, Node.REFLECTED_OBJECT);
1112:       assertEquals(36, Node.QUOTED_PROP);
1113:       assertEquals(8, Node.FLAG_NO_THROWS);
1114:       assertEquals(39, Node.EMPTY_BLOCK);
1115:       assertEquals(48, Node.DIRECTIVES);
1116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1118:       assertEquals(4095, Node.COLUMN_MASK);
1119:       assertEquals(55, Node.INFERRED_FUNCTION);
1120:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1122:       assertEquals(54, Node.SLASH_V);
1123:       assertEquals(40, Node.ORIGINALNAME_PROP);
1124:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1125:       assertEquals(50, Node.FREE_CALL);
1126:       assertEquals(46, Node.IS_NAMESPACE);
1127:       assertEquals(43, Node.IS_CONSTANT_NAME);
1128:       assertEquals(37, Node.OPT_ARG_NAME);
1129:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1130:       assertEquals(2, Node.POST_FLAG);
1131:       assertEquals(29, Node.JSDOC_INFO_PROP);
1132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1133:       assertEquals(30, Node.VAR_ARGS_NAME);
1134:       assertEquals(1, Node.DECR_FLAG);
1135:       assertEquals(32, Node.INCRDECR_PROP);
1136:       assertEquals(57, Node.LAST_PROP);
1137:       assertEquals(47, Node.IS_DISPATCHER);
1138:       assertEquals(12, Node.COLUMN_BITS);
1139:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1141:       assertEquals(36, Node.QUOTED_PROP);
1142:       assertEquals(52, Node.LENGTH);
1143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1144:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1145:       assertEquals(53, Node.INPUT_ID);
1146:       assertEquals(49, Node.DIRECT_EVAL);
1147:       assertEquals(57, Node.REFLECTED_OBJECT);
1148:       assertEquals(56, Node.CHANGE_TIME);
1149:       assertFalse(node0.equals((Object)node1));
1150:       assertFalse(node1.equals((Object)node0));
1151:       assertTrue(boolean3 == boolean1);
1152:       assertTrue(boolean3 == boolean0);
1153:       assertTrue(boolean3 == boolean2);
1154:       assertFalse(node0.isCatch());
1155:       assertFalse(node0.isFunction());
1156:       assertFalse(node0.isRegExp());
1157:       assertFalse(node0.isDefaultCase());
1158:       assertEquals(0, node0.getChildCount());
1159:       assertFalse(node0.isStringKey());
1160:       assertFalse(node0.isTry());
1161:       assertFalse(node0.isArrayLit());
1162:       assertFalse(node0.isDebugger());
1163:       assertFalse(node0.isParamList());
1164:       assertFalse(node0.isGetterDef());
1165:       assertFalse(node0.isString());
1166:       assertFalse(node0.isDo());
1167:       assertTrue(node0.isNumber());
1168:       assertFalse(node0.isTypeOf());
1169:       assertFalse(node0.isAssignAdd());
1170:       assertFalse(node0.isReturn());
1171:       assertFalse(node0.isWhile());
1172:       assertFalse(node0.isDec());
1173:       assertFalse(node0.isAssign());
1174:       assertFalse(node0.hasChildren());
1175:       assertFalse(node0.isLabel());
1176:       assertFalse(node0.isCall());
1177:       assertFalse(node0.isVar());
1178:       assertFalse(node0.isName());
1179:       assertFalse(node0.isDelProp());
1180:       assertFalse(node0.isEmpty());
1181:       assertFalse(node0.isGetElem());
1182:       assertFalse(node0.isNew());
1183:       assertFalse(node0.isAdd());
1184:       assertFalse(node0.isBreak());
1185:       assertFalse(node0.isTrue());
1186:       assertFalse(node0.isVoid());
1187:       assertFalse(node0.isOr());
1188:       assertFalse(node0.isNull());
1189:       assertFalse(node0.isAnd());
1190:       assertFalse(node0.isObjectLit());
1191:       assertFalse(node0.isWith());
1192:       assertFalse(node0.isInstanceOf());
1193:       assertFalse(node0.isScript());
1194:       assertFalse(node0.isGetProp());
1195:       assertFalse(node0.isThis());
1196:       assertFalse(node0.isExprResult());
1197:       assertFalse(node0.isComma());
1198:       assertFalse(node0.isCast());
1199:       assertFalse(node0.isFalse());
1200:       assertFalse(node0.isLabelName());
1201:       assertFalse(node0.hasOneChild());
1202:       assertEquals((-1), node0.getCharno());
1203:       assertFalse(node0.isSwitch());
1204:       assertFalse(node0.isNot());
1205:       assertEquals((-1), node0.getSourcePosition());
1206:       assertFalse(node0.isContinue());
1207:       assertFalse(node0.isIn());
1208:       assertFalse(node0.hasMoreThanOneChild());
1209:       assertEquals((-1), node0.getLineno());
1210:       assertFalse(node0.isCase());
1211:       assertFalse(node0.isBlock());
1212:       assertFalse(node0.isFor());
1213:       assertFalse(node0.isHook());
1214:       assertEquals(39, node0.getType());
1215:       assertFalse(node0.isThrow());
1216:       assertFalse(node0.isSetterDef());
1217:       assertFalse(node0.isInc());
1218:       assertFalse(node0.isNE());
1219:       assertFalse(node0.isIf());
1220:       assertFalse(node1.isScript());
1221:       assertFalse(node1.isNot());
1222:       assertFalse(node1.isExprResult());
1223:       assertFalse(node1.isObjectLit());
1224:       assertFalse(node1.isWith());
1225:       assertFalse(node1.hasOneChild());
1226:       assertFalse(node1.isThis());
1227:       assertFalse(node1.isNumber());
1228:       assertFalse(node1.isLabelName());
1229:       assertFalse(node1.isFalse());
1230:       assertFalse(node1.isGetProp());
1231:       assertFalse(node1.isCast());
1232:       assertFalse(node1.isSwitch());
1233:       assertFalse(node1.isAnd());
1234:       assertFalse(node1.isDo());
1235:       assertFalse(node1.isAdd());
1236:       assertEquals(0, node1.getType());
1237:       assertFalse(node1.isString());
1238:       assertFalse(node1.isReturn());
1239:       assertFalse(node1.isLabel());
1240:       assertFalse(node1.isNew());
1241:       assertFalse(node1.isVar());
1242:       assertFalse(node1.isAssignAdd());
1243:       assertFalse(node1.isWhile());
1244:       assertFalse(node1.isBreak());
1245:       assertFalse(node1.isDec());
1246:       assertFalse(node1.hasChildren());
1247:       assertFalse(node1.isDelProp());
1248:       assertFalse(node1.isTypeOf());
1249:       assertFalse(node1.isNull());
1250:       assertFalse(node1.isAssign());
1251:       assertFalse(node1.isComma());
1252:       assertFalse(node1.isGetElem());
1253:       assertFalse(node1.isCall());
1254:       assertFalse(node1.isEmpty());
1255:       assertFalse(node1.isOr());
1256:       assertFalse(node1.isVoid());
1257:       assertFalse(node1.isName());
1258:       assertFalse(node1.isTrue());
1259:       assertFalse(node1.isDefaultCase());
1260:       assertFalse(node1.isRegExp());
1261:       assertEquals(16422, node1.getSourcePosition());
1262:       assertFalse(node1.isDebugger());
1263:       assertFalse(node1.isFunction());
1264:       assertFalse(node1.isCatch());
1265:       assertEquals(0, node1.getChildCount());
1266:       assertFalse(node1.isTry());
1267:       assertFalse(node1.isFor());
1268:       assertFalse(node1.isGetterDef());
1269:       assertEquals(4, node1.getLineno());
1270:       assertFalse(node1.isArrayLit());
1271:       assertFalse(node1.isStringKey());
1272:       assertFalse(node1.isParamList());
1273:       assertEquals(38, node1.getCharno());
1274:       assertFalse(node1.isCase());
1275:       assertFalse(node1.isContinue());
1276:       assertFalse(node1.isInc());
1277:       assertFalse(node1.hasMoreThanOneChild());
1278:       assertFalse(node1.isHook());
1279:       assertFalse(node1.isThrow());
1280:       assertFalse(node1.isBlock());
1281:       assertFalse(node1.isIf());
1282:       assertFalse(node1.isSetterDef());
1283:       assertFalse(node1.isInstanceOf());
1284:       assertFalse(node1.isIn());
1285:       assertFalse(node1.isNE());
1286:       
1287:       node0.setInputId((InputId) null);
1288:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1289:       assertEquals(50, Node.FREE_CALL);
1290:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1291:       assertEquals(39, Node.EMPTY_BLOCK);
1292:       assertEquals(40, Node.ORIGINALNAME_PROP);
1293:       assertEquals(48, Node.DIRECTIVES);
1294:       assertEquals(4095, Node.COLUMN_MASK);
1295:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1296:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1297:       assertEquals(30, Node.VAR_ARGS_NAME);
1298:       assertEquals(43, Node.IS_CONSTANT_NAME);
1299:       assertEquals(1, Node.DECR_FLAG);
1300:       assertEquals(46, Node.IS_NAMESPACE);
1301:       assertEquals(54, Node.SLASH_V);
1302:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1303:       assertEquals(29, Node.JSDOC_INFO_PROP);
1304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1305:       assertEquals(56, Node.CHANGE_TIME);
1306:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1307:       assertEquals(37, Node.OPT_ARG_NAME);
1308:       assertEquals(32, Node.INCRDECR_PROP);
1309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1310:       assertEquals(2, Node.POST_FLAG);
1311:       assertEquals(12, Node.COLUMN_BITS);
1312:       assertEquals(47, Node.IS_DISPATCHER);
1313:       assertEquals(49, Node.DIRECT_EVAL);
1314:       assertEquals(57, Node.LAST_PROP);
1315:       assertEquals(55, Node.INFERRED_FUNCTION);
1316:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1317:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1318:       assertEquals(52, Node.LENGTH);
1319:       assertEquals(53, Node.INPUT_ID);
1320:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1321:       assertEquals(8, Node.FLAG_NO_THROWS);
1322:       assertEquals(57, Node.REFLECTED_OBJECT);
1323:       assertEquals(36, Node.QUOTED_PROP);
1324:       assertFalse(node0.equals((Object)node1));
1325:       assertFalse(node0.isCatch());
1326:       assertFalse(node0.isFunction());
1327:       assertFalse(node0.isRegExp());
1328:       assertFalse(node0.isDefaultCase());
1329:       assertEquals(0, node0.getChildCount());
1330:       assertFalse(node0.isStringKey());
1331:       assertFalse(node0.isTry());
1332:       assertFalse(node0.isArrayLit());
1333:       assertFalse(node0.isDebugger());
1334:       assertFalse(node0.isParamList());
1335:       assertFalse(node0.isGetterDef());
1336:       assertFalse(node0.isString());
1337:       assertFalse(node0.isDo());
1338:       assertTrue(node0.isNumber());
1339:       assertFalse(node0.isTypeOf());
1340:       assertFalse(node0.isAssignAdd());
1341:       assertFalse(node0.isReturn());
1342:       assertFalse(node0.isWhile());
1343:       assertFalse(node0.isDec());
1344:       assertFalse(node0.isAssign());
1345:       assertFalse(node0.hasChildren());
1346:       assertFalse(node0.isLabel());
1347:       assertFalse(node0.isCall());
1348:       assertFalse(node0.isVar());
1349:       assertFalse(node0.isName());
1350:       assertFalse(node0.isDelProp());
1351:       assertFalse(node0.isEmpty());
1352:       assertFalse(node0.isGetElem());
1353:       assertFalse(node0.isNew());
1354:       assertFalse(node0.isAdd());
1355:       assertFalse(node0.isBreak());
1356:       assertFalse(node0.isTrue());
1357:       assertFalse(node0.isVoid());
1358:       assertFalse(node0.isOr());
1359:       assertFalse(node0.isNull());
1360:       assertFalse(node0.isAnd());
1361:       assertFalse(node0.isObjectLit());
1362:       assertFalse(node0.isWith());
1363:       assertFalse(node0.isInstanceOf());
1364:       assertFalse(node0.isScript());
1365:       assertFalse(node0.isGetProp());
1366:       assertFalse(node0.isThis());
1367:       assertFalse(node0.isExprResult());
1368:       assertFalse(node0.isComma());
1369:       assertFalse(node0.isCast());
1370:       assertFalse(node0.isFalse());
1371:       assertFalse(node0.isLabelName());
1372:       assertFalse(node0.hasOneChild());
1373:       assertEquals((-1), node0.getCharno());
1374:       assertFalse(node0.isSwitch());
1375:       assertFalse(node0.isNot());
1376:       assertEquals((-1), node0.getSourcePosition());
1377:       assertFalse(node0.isContinue());
1378:       assertFalse(node0.isIn());
1379:       assertFalse(node0.hasMoreThanOneChild());
1380:       assertEquals((-1), node0.getLineno());
1381:       assertFalse(node0.isCase());
1382:       assertFalse(node0.isBlock());
1383:       assertFalse(node0.isFor());
1384:       assertFalse(node0.isHook());
1385:       assertEquals(39, node0.getType());
1386:       assertFalse(node0.isThrow());
1387:       assertFalse(node0.isSetterDef());
1388:       assertFalse(node0.isInc());
1389:       assertFalse(node0.isNE());
1390:       assertFalse(node0.isIf());
1391:       
1392:       node0.setType(46);
1393:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1394:       assertEquals(50, Node.FREE_CALL);
1395:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1396:       assertEquals(39, Node.EMPTY_BLOCK);
1397:       assertEquals(40, Node.ORIGINALNAME_PROP);
1398:       assertEquals(48, Node.DIRECTIVES);
1399:       assertEquals(4095, Node.COLUMN_MASK);
1400:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1401:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1402:       assertEquals(30, Node.VAR_ARGS_NAME);
1403:       assertEquals(43, Node.IS_CONSTANT_NAME);
1404:       assertEquals(1, Node.DECR_FLAG);
1405:       assertEquals(46, Node.IS_NAMESPACE);
1406:       assertEquals(54, Node.SLASH_V);
1407:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1408:       assertEquals(29, Node.JSDOC_INFO_PROP);
1409:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1410:       assertEquals(56, Node.CHANGE_TIME);
1411:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1412:       assertEquals(37, Node.OPT_ARG_NAME);
1413:       assertEquals(32, Node.INCRDECR_PROP);
1414:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1415:       assertEquals(2, Node.POST_FLAG);
1416:       assertEquals(12, Node.COLUMN_BITS);
1417:       assertEquals(47, Node.IS_DISPATCHER);
1418:       assertEquals(49, Node.DIRECT_EVAL);
1419:       assertEquals(57, Node.LAST_PROP);
1420:       assertEquals(55, Node.INFERRED_FUNCTION);
1421:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1422:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1423:       assertEquals(52, Node.LENGTH);
1424:       assertEquals(53, Node.INPUT_ID);
1425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1426:       assertEquals(8, Node.FLAG_NO_THROWS);
1427:       assertEquals(57, Node.REFLECTED_OBJECT);
1428:       assertEquals(36, Node.QUOTED_PROP);
1429:       assertFalse(node0.equals((Object)node1));
1430:       assertFalse(node0.isCatch());
1431:       assertFalse(node0.isFunction());
1432:       assertFalse(node0.isRegExp());
1433:       assertFalse(node0.isDefaultCase());
1434:       assertEquals(0, node0.getChildCount());
1435:       assertFalse(node0.isStringKey());
1436:       assertFalse(node0.isTry());
1437:       assertFalse(node0.isArrayLit());
1438:       assertFalse(node0.isDebugger());
1439:       assertFalse(node0.isParamList());
1440:       assertFalse(node0.isGetterDef());
1441:       assertFalse(node0.isString());
1442:       assertFalse(node0.isDo());
1443:       assertFalse(node0.isTypeOf());
1444:       assertFalse(node0.isAssignAdd());
1445:       assertFalse(node0.isReturn());
1446:       assertFalse(node0.isWhile());
1447:       assertFalse(node0.isDec());
1448:       assertFalse(node0.isAssign());
1449:       assertFalse(node0.hasChildren());
1450:       assertFalse(node0.isLabel());
1451:       assertFalse(node0.isCall());
1452:       assertFalse(node0.isVar());
1453:       assertFalse(node0.isName());
1454:       assertFalse(node0.isDelProp());
1455:       assertFalse(node0.isEmpty());
1456:       assertFalse(node0.isGetElem());
1457:       assertFalse(node0.isNew());
1458:       assertFalse(node0.isAdd());
1459:       assertFalse(node0.isBreak());
1460:       assertFalse(node0.isTrue());
1461:       assertFalse(node0.isVoid());
1462:       assertFalse(node0.isOr());
1463:       assertFalse(node0.isNull());
1464:       assertFalse(node0.isAnd());
1465:       assertFalse(node0.isObjectLit());
1466:       assertFalse(node0.isWith());
1467:       assertEquals(46, node0.getType());
1468:       assertFalse(node0.isInstanceOf());
1469:       assertFalse(node0.isScript());
1470:       assertFalse(node0.isGetProp());
1471:       assertFalse(node0.isThis());
1472:       assertFalse(node0.isExprResult());
1473:       assertFalse(node0.isComma());
1474:       assertFalse(node0.isCast());
1475:       assertFalse(node0.isFalse());
1476:       assertFalse(node0.isLabelName());
1477:       assertFalse(node0.hasOneChild());
1478:       assertEquals((-1), node0.getCharno());
1479:       assertFalse(node0.isSwitch());
1480:       assertFalse(node0.isNumber());
1481:       assertFalse(node0.isNot());
1482:       assertEquals((-1), node0.getSourcePosition());
1483:       assertFalse(node0.isContinue());
1484:       assertFalse(node0.isIn());
1485:       assertFalse(node0.hasMoreThanOneChild());
1486:       assertEquals((-1), node0.getLineno());
1487:       assertFalse(node0.isCase());
1488:       assertFalse(node0.isBlock());
1489:       assertFalse(node0.isFor());
1490:       assertFalse(node0.isHook());
1491:       assertFalse(node0.isThrow());
1492:       assertFalse(node0.isSetterDef());
1493:       assertFalse(node0.isInc());
1494:       assertFalse(node0.isNE());
1495:       assertFalse(node0.isIf());
1496:       
1497:       boolean boolean4 = node0.isSetterDef();
1498:       assertFalse(boolean4);
1499:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1500:       assertEquals(50, Node.FREE_CALL);
1501:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1502:       assertEquals(39, Node.EMPTY_BLOCK);
1503:       assertEquals(40, Node.ORIGINALNAME_PROP);
1504:       assertEquals(48, Node.DIRECTIVES);
1505:       assertEquals(4095, Node.COLUMN_MASK);
1506:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1507:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1508:       assertEquals(30, Node.VAR_ARGS_NAME);
1509:       assertEquals(43, Node.IS_CONSTANT_NAME);
1510:       assertEquals(1, Node.DECR_FLAG);
1511:       assertEquals(46, Node.IS_NAMESPACE);
1512:       assertEquals(54, Node.SLASH_V);
1513:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1514:       assertEquals(29, Node.JSDOC_INFO_PROP);
1515:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1516:       assertEquals(56, Node.CHANGE_TIME);
1517:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1518:       assertEquals(37, Node.OPT_ARG_NAME);
1519:       assertEquals(32, Node.INCRDECR_PROP);
1520:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1521:       assertEquals(2, Node.POST_FLAG);
1522:       assertEquals(12, Node.COLUMN_BITS);
1523:       assertEquals(47, Node.IS_DISPATCHER);
1524:       assertEquals(49, Node.DIRECT_EVAL);
1525:       assertEquals(57, Node.LAST_PROP);
1526:       assertEquals(55, Node.INFERRED_FUNCTION);
1527:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1528:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1529:       assertEquals(52, Node.LENGTH);
1530:       assertEquals(53, Node.INPUT_ID);
1531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1532:       assertEquals(8, Node.FLAG_NO_THROWS);
1533:       assertEquals(57, Node.REFLECTED_OBJECT);
1534:       assertEquals(36, Node.QUOTED_PROP);
1535:       assertFalse(node0.equals((Object)node1));
1536:       assertTrue(boolean4 == boolean0);
1537:       assertTrue(boolean4 == boolean1);
1538:       assertTrue(boolean4 == boolean3);
1539:       assertTrue(boolean4 == boolean2);
1540:       assertFalse(node0.isCatch());
1541:       assertFalse(node0.isFunction());
1542:       assertFalse(node0.isRegExp());
1543:       assertFalse(node0.isDefaultCase());
1544:       assertEquals(0, node0.getChildCount());
1545:       assertFalse(node0.isStringKey());
1546:       assertFalse(node0.isTry());
1547:       assertFalse(node0.isArrayLit());
1548:       assertFalse(node0.isDebugger());
1549:       assertFalse(node0.isParamList());
1550:       assertFalse(node0.isGetterDef());
1551:       assertFalse(node0.isString());
1552:       assertFalse(node0.isDo());
1553:       assertFalse(node0.isTypeOf());
1554:       assertFalse(node0.isAssignAdd());
1555:       assertFalse(node0.isReturn());
1556:       assertFalse(node0.isWhile());
1557:       assertFalse(node0.isDec());
1558:       assertFalse(node0.isAssign());
1559:       assertFalse(node0.hasChildren());
1560:       assertFalse(node0.isLabel());
1561:       assertFalse(node0.isCall());
1562:       assertFalse(node0.isVar());
1563:       assertFalse(node0.isName());
1564:       assertFalse(node0.isDelProp());
1565:       assertFalse(node0.isEmpty());
1566:       assertFalse(node0.isGetElem());
1567:       assertFalse(node0.isNew());
1568:       assertFalse(node0.isAdd());
1569:       assertFalse(node0.isBreak());
1570:       assertFalse(node0.isTrue());
1571:       assertFalse(node0.isVoid());
1572:       assertFalse(node0.isOr());
1573:       assertFalse(node0.isNull());
1574:       assertFalse(node0.isAnd());
1575:       assertFalse(node0.isObjectLit());
1576:       assertFalse(node0.isWith());
1577:       assertEquals(46, node0.getType());
1578:       assertFalse(node0.isInstanceOf());
1579:       assertFalse(node0.isScript());
1580:       assertFalse(node0.isGetProp());
1581:       assertFalse(node0.isThis());
1582:       assertFalse(node0.isExprResult());
1583:       assertFalse(node0.isComma());
1584:       assertFalse(node0.isCast());
1585:       assertFalse(node0.isFalse());
1586:       assertFalse(node0.isLabelName());
1587:       assertFalse(node0.hasOneChild());
1588:       assertEquals((-1), node0.getCharno());
1589:       assertFalse(node0.isSwitch());
1590:       assertFalse(node0.isNumber());
1591:       assertFalse(node0.isNot());
1592:       assertEquals((-1), node0.getSourcePosition());
1593:       assertFalse(node0.isContinue());
1594:       assertFalse(node0.isIn());
1595:       assertFalse(node0.hasMoreThanOneChild());
1596:       assertEquals((-1), node0.getLineno());
1597:       assertFalse(node0.isCase());
1598:       assertFalse(node0.isBlock());
1599:       assertFalse(node0.isFor());
1600:       assertFalse(node0.isHook());
1601:       assertFalse(node0.isThrow());
1602:       assertFalse(node0.isSetterDef());
1603:       assertFalse(node0.isInc());
1604:       assertFalse(node0.isNE());
1605:       assertFalse(node0.isIf());
1606:       
1607:       boolean boolean5 = node1.isHook();
1608:       assertFalse(boolean5);
1609:       assertEquals(8, Node.FLAG_NO_THROWS);
1610:       assertEquals(39, Node.EMPTY_BLOCK);
1611:       assertEquals(48, Node.DIRECTIVES);
1612:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1613:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1614:       assertEquals(4095, Node.COLUMN_MASK);
1615:       assertEquals(55, Node.INFERRED_FUNCTION);
1616:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1617:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1618:       assertEquals(54, Node.SLASH_V);
1619:       assertEquals(40, Node.ORIGINALNAME_PROP);
1620:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1621:       assertEquals(50, Node.FREE_CALL);
1622:       assertEquals(46, Node.IS_NAMESPACE);
1623:       assertEquals(43, Node.IS_CONSTANT_NAME);
1624:       assertEquals(37, Node.OPT_ARG_NAME);
1625:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1626:       assertEquals(2, Node.POST_FLAG);
1627:       assertEquals(29, Node.JSDOC_INFO_PROP);
1628:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1629:       assertEquals(30, Node.VAR_ARGS_NAME);
1630:       assertEquals(1, Node.DECR_FLAG);
1631:       assertEquals(32, Node.INCRDECR_PROP);
1632:       assertEquals(57, Node.LAST_PROP);
1633:       assertEquals(47, Node.IS_DISPATCHER);
1634:       assertEquals(12, Node.COLUMN_BITS);
1635:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1636:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1637:       assertEquals(36, Node.QUOTED_PROP);
1638:       assertEquals(52, Node.LENGTH);
1639:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1640:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1641:       assertEquals(53, Node.INPUT_ID);
1642:       assertEquals(49, Node.DIRECT_EVAL);
1643:       assertEquals(57, Node.REFLECTED_OBJECT);
1644:       assertEquals(56, Node.CHANGE_TIME);
1645:       assertFalse(node1.equals((Object)node0));
1646:       assertTrue(boolean5 == boolean0);
1647:       assertTrue(boolean5 == boolean2);
1648:       assertTrue(boolean5 == boolean3);
1649:       assertTrue(boolean5 == boolean1);
1650:       assertTrue(boolean5 == boolean4);
1651:       assertFalse(node1.isScript());
1652:       assertFalse(node1.isNot());
1653:       assertFalse(node1.isExprResult());
1654:       assertFalse(node1.isObjectLit());
1655:       assertFalse(node1.isWith());
1656:       assertFalse(node1.hasOneChild());
1657:       assertFalse(node1.isThis());
1658:       assertFalse(node1.isNumber());
1659:       assertFalse(node1.isLabelName());
1660:       assertFalse(node1.isFalse());
1661:       assertFalse(node1.isGetProp());
1662:       assertFalse(node1.isCast());
1663:       assertFalse(node1.isSwitch());
1664:       assertFalse(node1.isAnd());
1665:       assertFalse(node1.isDo());
1666:       assertFalse(node1.isAdd());
1667:       assertEquals(0, node1.getType());
1668:       assertFalse(node1.isString());
1669:       assertFalse(node1.isReturn());
1670:       assertFalse(node1.isLabel());
1671:       assertFalse(node1.isNew());
1672:       assertFalse(node1.isVar());
1673:       assertFalse(node1.isAssignAdd());
1674:       assertFalse(node1.isWhile());
1675:       assertFalse(node1.isBreak());
1676:       assertFalse(node1.isDec());
1677:       assertFalse(node1.hasChildren());
1678:       assertFalse(node1.isDelProp());
1679:       assertFalse(node1.isTypeOf());
1680:       assertFalse(node1.isNull());
1681:       assertFalse(node1.isAssign());
1682:       assertFalse(node1.isComma());
1683:       assertFalse(node1.isGetElem());
1684:       assertFalse(node1.isCall());
1685:       assertFalse(node1.isEmpty());
1686:       assertFalse(node1.isOr());
1687:       assertFalse(node1.isVoid());
1688:       assertFalse(node1.isName());
1689:       assertFalse(node1.isTrue());
1690:       assertFalse(node1.isDefaultCase());
1691:       assertFalse(node1.isRegExp());
1692:       assertEquals(16422, node1.getSourcePosition());
1693:       assertFalse(node1.isDebugger());
1694:       assertFalse(node1.isFunction());
1695:       assertFalse(node1.isCatch());
1696:       assertEquals(0, node1.getChildCount());
1697:       assertFalse(node1.isTry());
1698:       assertFalse(node1.isFor());
1699:       assertFalse(node1.isGetterDef());
1700:       assertEquals(4, node1.getLineno());
1701:       assertFalse(node1.isArrayLit());
1702:       assertFalse(node1.isStringKey());
1703:       assertFalse(node1.isParamList());
1704:       assertEquals(38, node1.getCharno());
1705:       assertFalse(node1.isCase());
1706:       assertFalse(node1.isContinue());
1707:       assertFalse(node1.isInc());
1708:       assertFalse(node1.hasMoreThanOneChild());
1709:       assertFalse(node1.isHook());
1710:       assertFalse(node1.isThrow());
1711:       assertFalse(node1.isBlock());
1712:       assertFalse(node1.isIf());
1713:       assertFalse(node1.isSetterDef());
1714:       assertFalse(node1.isInstanceOf());
1715:       assertFalse(node1.isIn());
1716:       assertFalse(node1.isNE());
1717:       
1718:       Node node2 = new Node(4095, 44, 31);
1719:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1720:       assertEquals(57, Node.LAST_PROP);
1721:       assertEquals(32, Node.INCRDECR_PROP);
1722:       assertEquals(49, Node.DIRECT_EVAL);
1723:       assertEquals(1, Node.DECR_FLAG);
1724:       assertEquals(52, Node.LENGTH);
1725:       assertEquals(46, Node.IS_NAMESPACE);
1726:       assertEquals(54, Node.SLASH_V);
1727:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1728:       assertEquals(57, Node.REFLECTED_OBJECT);
1729:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1730:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1731:       assertEquals(56, Node.CHANGE_TIME);
1732:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1733:       assertEquals(37, Node.OPT_ARG_NAME);
1734:       assertEquals(48, Node.DIRECTIVES);
1735:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1736:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1737:       assertEquals(12, Node.COLUMN_BITS);
1738:       assertEquals(4095, Node.COLUMN_MASK);
1739:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1740:       assertEquals(55, Node.INFERRED_FUNCTION);
1741:       assertEquals(43, Node.IS_CONSTANT_NAME);
1742:       assertEquals(53, Node.INPUT_ID);
1743:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1744:       assertEquals(36, Node.QUOTED_PROP);
1745:       assertEquals(8, Node.FLAG_NO_THROWS);
1746:       assertEquals(50, Node.FREE_CALL);
1747:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1748:       assertEquals(40, Node.ORIGINALNAME_PROP);
1749:       assertEquals(29, Node.JSDOC_INFO_PROP);
1750:       assertEquals(39, Node.EMPTY_BLOCK);
1751:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1752:       assertEquals(47, Node.IS_DISPATCHER);
1753:       assertEquals(2, Node.POST_FLAG);
1754:       assertEquals(30, Node.VAR_ARGS_NAME);
1755:       assertNotNull(node2);
1756:       assertFalse(node2.equals((Object)node1));
1757:       assertFalse(node2.equals((Object)node0));
1758:       assertFalse(node2.isHook());
1759:       assertFalse(node2.isThrow());
1760:       assertFalse(node2.isBreak());
1761:       assertFalse(node2.isSwitch());
1762:       assertFalse(node2.isInc());
1763:       assertFalse(node2.isString());
1764:       assertFalse(node2.isInstanceOf());
1765:       assertFalse(node2.isGetProp());
1766:       assertFalse(node2.isCase());
1767:       assertFalse(node2.isThis());
1768:       assertFalse(node2.isExprResult());
1769:       assertFalse(node2.isFor());
1770:       assertFalse(node2.isWith());
1771:       assertFalse(node2.isComma());
1772:       assertFalse(node2.isCast());
1773:       assertEquals(4095, node2.getType());
1774:       assertFalse(node2.isNE());
1775:       assertFalse(node2.isIf());
1776:       assertFalse(node2.isNot());
1777:       assertFalse(node2.isDebugger());
1778:       assertFalse(node2.isObjectLit());
1779:       assertFalse(node2.isIn());
1780:       assertFalse(node2.isAnd());
1781:       assertFalse(node2.isContinue());
1782:       assertFalse(node2.isFunction());
1783:       assertFalse(node2.isFalse());
1784:       assertFalse(node2.isVar());
1785:       assertFalse(node2.isCall());
1786:       assertFalse(node2.isStringKey());
1787:       assertFalse(node2.isAdd());
1788:       assertFalse(node2.isName());
1789:       assertFalse(node2.isNew());
1790:       assertFalse(node2.isSetterDef());
1791:       assertFalse(node2.isNull());
1792:       assertFalse(node2.isParamList());
1793:       assertFalse(node2.hasMoreThanOneChild());
1794:       assertFalse(node2.isCatch());
1795:       assertFalse(node2.isRegExp());
1796:       assertFalse(node2.isTypeOf());
1797:       assertFalse(node2.isWhile());
1798:       assertFalse(node2.isAssign());
1799:       assertFalse(node2.isReturn());
1800:       assertFalse(node2.isBlock());
1801:       assertFalse(node2.hasChildren());
1802:       assertFalse(node2.isDec());
1803:       assertFalse(node2.isArrayLit());
1804:       assertEquals(44, node2.getLineno());
1805:       assertFalse(node2.isEmpty());
1806:       assertFalse(node2.isLabelName());
1807:       assertFalse(node2.isTry());
1808:       assertFalse(node2.isGetElem());
1809:       assertFalse(node2.isDelProp());
1810:       assertFalse(node2.isVoid());
1811:       assertFalse(node2.hasOneChild());
1812:       assertFalse(node2.isScript());
1813:       assertFalse(node2.isTrue());
1814:       assertFalse(node2.isNumber());
1815:       assertFalse(node2.isOr());
1816:       assertEquals(31, node2.getCharno());
1817:       assertFalse(node2.isGetterDef());
1818:       assertEquals(180255, node2.getSourcePosition());
1819:       assertFalse(node2.isAssignAdd());
1820:       assertFalse(node2.isDo());
1821:       assertFalse(node2.isDefaultCase());
1822:       assertFalse(node2.isLabel());
1823:       assertEquals(0, node2.getChildCount());
1824:       
1825:       boolean boolean6 = node0.isEquivalentToShallow(node2);
1826:       assertFalse(boolean6);
1827:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1828:       assertEquals(50, Node.FREE_CALL);
1829:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1830:       assertEquals(39, Node.EMPTY_BLOCK);
1831:       assertEquals(40, Node.ORIGINALNAME_PROP);
1832:       assertEquals(48, Node.DIRECTIVES);
1833:       assertEquals(4095, Node.COLUMN_MASK);
1834:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1835:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1836:       assertEquals(30, Node.VAR_ARGS_NAME);
1837:       assertEquals(43, Node.IS_CONSTANT_NAME);
1838:       assertEquals(1, Node.DECR_FLAG);
1839:       assertEquals(46, Node.IS_NAMESPACE);
1840:       assertEquals(54, Node.SLASH_V);
1841:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1842:       assertEquals(29, Node.JSDOC_INFO_PROP);
1843:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1844:       assertEquals(56, Node.CHANGE_TIME);
1845:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1846:       assertEquals(37, Node.OPT_ARG_NAME);
1847:       assertEquals(32, Node.INCRDECR_PROP);
1848:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1849:       assertEquals(2, Node.POST_FLAG);
1850:       assertEquals(12, Node.COLUMN_BITS);
1851:       assertEquals(47, Node.IS_DISPATCHER);
1852:       assertEquals(49, Node.DIRECT_EVAL);
1853:       assertEquals(57, Node.LAST_PROP);
1854:       assertEquals(55, Node.INFERRED_FUNCTION);
1855:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1856:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1857:       assertEquals(52, Node.LENGTH);
1858:       assertEquals(53, Node.INPUT_ID);
1859:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1860:       assertEquals(8, Node.FLAG_NO_THROWS);
1861:       assertEquals(57, Node.REFLECTED_OBJECT);
1862:       assertEquals(36, Node.QUOTED_PROP);
1863:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1864:       assertEquals(57, Node.LAST_PROP);
1865:       assertEquals(32, Node.INCRDECR_PROP);
1866:       assertEquals(49, Node.DIRECT_EVAL);
1867:       assertEquals(1, Node.DECR_FLAG);
1868:       assertEquals(52, Node.LENGTH);
1869:       assertEquals(46, Node.IS_NAMESPACE);
1870:       assertEquals(54, Node.SLASH_V);
1871:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1872:       assertEquals(57, Node.REFLECTED_OBJECT);
1873:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1874:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1875:       assertEquals(56, Node.CHANGE_TIME);
1876:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1877:       assertEquals(37, Node.OPT_ARG_NAME);
1878:       assertEquals(48, Node.DIRECTIVES);
1879:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1880:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1881:       assertEquals(12, Node.COLUMN_BITS);
1882:       assertEquals(4095, Node.COLUMN_MASK);
1883:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1884:       assertEquals(55, Node.INFERRED_FUNCTION);
1885:       assertEquals(43, Node.IS_CONSTANT_NAME);
1886:       assertEquals(53, Node.INPUT_ID);
1887:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1888:       assertEquals(36, Node.QUOTED_PROP);
1889:       assertEquals(8, Node.FLAG_NO_THROWS);
1890:       assertEquals(50, Node.FREE_CALL);
1891:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1892:       assertEquals(40, Node.ORIGINALNAME_PROP);
1893:       assertEquals(29, Node.JSDOC_INFO_PROP);
1894:       assertEquals(39, Node.EMPTY_BLOCK);
1895:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1896:       assertEquals(47, Node.IS_DISPATCHER);
1897:       assertEquals(2, Node.POST_FLAG);
1898:       assertEquals(30, Node.VAR_ARGS_NAME);
1899:       assertFalse(node0.equals((Object)node1));
1900:       assertFalse(node0.equals((Object)node2));
1901:       assertFalse(node2.equals((Object)node1));
1902:       assertFalse(node2.equals((Object)node0));
1903:       assertTrue(boolean6 == boolean4);
1904:       assertTrue(boolean6 == boolean2);
1905:       assertTrue(boolean6 == boolean5);
1906:       assertTrue(boolean6 == boolean0);
1907:       assertTrue(boolean6 == boolean1);
1908:       assertTrue(boolean6 == boolean3);
1909:       assertFalse(node0.isCatch());
1910:       assertFalse(node0.isFunction());
1911:       assertFalse(node0.isRegExp());
1912:       assertFalse(node0.isDefaultCase());
1913:       assertEquals(0, node0.getChildCount());
1914:       assertFalse(node0.isStringKey());
1915:       assertFalse(node0.isTry());
1916:       assertFalse(node0.isArrayLit());
1917:       assertFalse(node0.isDebugger());
1918:       assertFalse(node0.isParamList());
1919:       assertFalse(node0.isGetterDef());
1920:       assertFalse(node0.isString());
1921:       assertFalse(node0.isDo());
1922:       assertFalse(node0.isTypeOf());
1923:       assertFalse(node0.isAssignAdd());
1924:       assertFalse(node0.isReturn());
1925:       assertFalse(node0.isWhile());
1926:       assertFalse(node0.isDec());
1927:       assertFalse(node0.isAssign());
1928:       assertFalse(node0.hasChildren());
1929:       assertFalse(node0.isLabel());
1930:       assertFalse(node0.isCall());
1931:       assertFalse(node0.isVar());
1932:       assertFalse(node0.isName());
1933:       assertFalse(node0.isDelProp());
1934:       assertFalse(node0.isEmpty());
1935:       assertFalse(node0.isGetElem());
1936:       assertFalse(node0.isNew());
1937:       assertFalse(node0.isAdd());
1938:       assertFalse(node0.isBreak());
1939:       assertFalse(node0.isTrue());
1940:       assertFalse(node0.isVoid());
1941:       assertFalse(node0.isOr());
1942:       assertFalse(node0.isNull());
1943:       assertFalse(node0.isAnd());
1944:       assertFalse(node0.isObjectLit());
1945:       assertFalse(node0.isWith());
1946:       assertEquals(46, node0.getType());
1947:       assertFalse(node0.isInstanceOf());
1948:       assertFalse(node0.isScript());
1949:       assertFalse(node0.isGetProp());
1950:       assertFalse(node0.isThis());
1951:       assertFalse(node0.isExprResult());
1952:       assertFalse(node0.isComma());
1953:       assertFalse(node0.isCast());
1954:       assertFalse(node0.isFalse());
1955:       assertFalse(node0.isLabelName());
1956:       assertFalse(node0.hasOneChild());
1957:       assertEquals((-1), node0.getCharno());
1958:       assertFalse(node0.isSwitch());
1959:       assertFalse(node0.isNumber());
1960:       assertFalse(node0.isNot());
1961:       assertEquals((-1), node0.getSourcePosition());
1962:       assertFalse(node0.isContinue());
1963:       assertFalse(node0.isIn());
1964:       assertFalse(node0.hasMoreThanOneChild());
1965:       assertEquals((-1), node0.getLineno());
1966:       assertFalse(node0.isCase());
1967:       assertFalse(node0.isBlock());
1968:       assertFalse(node0.isFor());
1969:       assertFalse(node0.isHook());
1970:       assertFalse(node0.isThrow());
1971:       assertFalse(node0.isSetterDef());
1972:       assertFalse(node0.isInc());
1973:       assertFalse(node0.isNE());
1974:       assertFalse(node0.isIf());
1975:       assertFalse(node2.isHook());
1976:       assertFalse(node2.isThrow());
1977:       assertFalse(node2.isBreak());
1978:       assertFalse(node2.isSwitch());
1979:       assertFalse(node2.isInc());
1980:       assertFalse(node2.isString());
1981:       assertFalse(node2.isInstanceOf());
1982:       assertFalse(node2.isGetProp());
1983:       assertFalse(node2.isCase());
1984:       assertFalse(node2.isThis());
1985:       assertFalse(node2.isExprResult());
1986:       assertFalse(node2.isFor());
1987:       assertFalse(node2.isWith());
1988:       assertFalse(node2.isComma());
1989:       assertFalse(node2.isCast());
1990:       assertEquals(4095, node2.getType());
1991:       assertFalse(node2.isNE());
1992:       assertFalse(node2.isIf());
1993:       assertFalse(node2.isNot());
1994:       assertFalse(node2.isDebugger());
1995:       assertFalse(node2.isObjectLit());
1996:       assertFalse(node2.isIn());
1997:       assertFalse(node2.isAnd());
1998:       assertFalse(node2.isContinue());
1999:       assertFalse(node2.isFunction());
2000:       assertFalse(node2.isFalse());
2001:       assertFalse(node2.isVar());
2002:       assertFalse(node2.isCall());
2003:       assertFalse(node2.isStringKey());
2004:       assertFalse(node2.isAdd());
2005:       assertFalse(node2.isName());
2006:       assertFalse(node2.isNew());
2007:       assertFalse(node2.isSetterDef());
2008:       assertFalse(node2.isNull());
2009:       assertFalse(node2.isParamList());
2010:       assertFalse(node2.hasMoreThanOneChild());
2011:       assertFalse(node2.isCatch());
2012:       assertFalse(node2.isRegExp());
2013:       assertFalse(node2.isTypeOf());
2014:       assertFalse(node2.isWhile());
2015:       assertFalse(node2.isAssign());
2016:       assertFalse(node2.isReturn());
2017:       assertFalse(node2.isBlock());
2018:       assertFalse(node2.hasChildren());
2019:       assertFalse(node2.isDec());
2020:       assertFalse(node2.isArrayLit());
2021:       assertEquals(44, node2.getLineno());
2022:       assertFalse(node2.isEmpty());
2023:       assertFalse(node2.isLabelName());
2024:       assertFalse(node2.isTry());
2025:       assertFalse(node2.isGetElem());
2026:       assertFalse(node2.isDelProp());
2027:       assertFalse(node2.isVoid());
2028:       assertFalse(node2.hasOneChild());
2029:       assertFalse(node2.isScript());
2030:       assertFalse(node2.isTrue());
2031:       assertFalse(node2.isNumber());
2032:       assertFalse(node2.isOr());
2033:       assertEquals(31, node2.getCharno());
2034:       assertFalse(node2.isGetterDef());
2035:       assertEquals(180255, node2.getSourcePosition());
2036:       assertFalse(node2.isAssignAdd());
2037:       assertFalse(node2.isDo());
2038:       assertFalse(node2.isDefaultCase());
2039:       assertFalse(node2.isLabel());
2040:       assertEquals(0, node2.getChildCount());
2041:   }
2042: }
RegularFileObject[/tmp/EvoSuite_90_1628157877802/com/google/javascript/rhino/Node_90_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_90_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_90_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_90_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:38.271 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node0);
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

Node node1 = Node.newString(0, "", 4, 38);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(4, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isNE());

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(4, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isNE());

boolean boolean0 = node_NodeMismatch0.equals("");
assertFalse(boolean0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(4, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isNE());

boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
assertFalse(boolean1);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(4, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isNE());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

boolean boolean2 = node0.isIf();
assertFalse(boolean2);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

boolean boolean3 = node1.isEquivalentTo(node0);
assertFalse(boolean3);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(4, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isNE());

node0.setInputId((InputId) null);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

node0.setType(46);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertEquals(46, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

boolean boolean4 = node0.isSetterDef();
assertFalse(boolean4);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertEquals(46, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

boolean boolean5 = node1.isHook();
assertFalse(boolean5);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals(0, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertEquals(4, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isNE());

Node node2 = new Node(4095, 44, 31);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isExprResult());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isCast());
assertEquals(4095, node2.getType());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isIn());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isArrayLit());
assertEquals(44, node2.getLineno());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isTrue());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertEquals(31, node2.getCharno());
assertFalse(node2.isGetterDef());
assertEquals(180255, node2.getSourcePosition());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());

boolean boolean6 = node0.isEquivalentToShallow(node2);
assertFalse(boolean6);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean3);
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertEquals(46, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isExprResult());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isComma());
assertFalse(node2.isCast());
assertEquals(4095, node2.getType());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isIn());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isArrayLit());
assertEquals(44, node2.getLineno());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isTrue());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertEquals(31, node2.getCharno());
assertFalse(node2.isGetterDef());
assertEquals(180255, node2.getSourcePosition());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());


[MASTER] 10:04:38.360 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_91_1628157878272/com/google/javascript/rhino/Node_91_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_91_1628157878272/com/google/javascript/rhino/Node_91_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:38.360 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:38.360 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:38.360 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 554
[MASTER] 10:04:38.361 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_91_1628157878272/com/google/javascript/rhino/Node_91_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_91_tmp__ESTest extends Node_91_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
23:       assertNotNull(fileSystemHandling0);
24:       
25:       Node node0 = new Node(308, 308, 308);
26:       assertEquals(40, Node.ORIGINALNAME_PROP);
27:       assertEquals(50, Node.FREE_CALL);
28:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
29:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
30:       assertEquals(52, Node.LENGTH);
31:       assertEquals(54, Node.SLASH_V);
32:       assertEquals(8, Node.FLAG_NO_THROWS);
33:       assertEquals(48, Node.DIRECTIVES);
34:       assertEquals(57, Node.REFLECTED_OBJECT);
35:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
36:       assertEquals(30, Node.VAR_ARGS_NAME);
37:       assertEquals(15, Node.NO_SIDE_EFFECTS);
38:       assertEquals(55, Node.INFERRED_FUNCTION);
39:       assertEquals(39, Node.EMPTY_BLOCK);
40:       assertEquals(2, Node.POST_FLAG);
41:       assertEquals(57, Node.LAST_PROP);
42:       assertEquals(47, Node.IS_DISPATCHER);
43:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
44:       assertEquals(29, Node.JSDOC_INFO_PROP);
45:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
46:       assertEquals(53, Node.INPUT_ID);
47:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(37, Node.OPT_ARG_NAME);
50:       assertEquals(36, Node.QUOTED_PROP);
51:       assertEquals(46, Node.IS_NAMESPACE);
52:       assertEquals(43, Node.IS_CONSTANT_NAME);
53:       assertEquals(56, Node.CHANGE_TIME);
54:       assertEquals(51, Node.STATIC_SOURCE_FILE);
55:       assertEquals(49, Node.DIRECT_EVAL);
56:       assertEquals(1, Node.DECR_FLAG);
57:       assertEquals(4095, Node.COLUMN_MASK);
58:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
59:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
60:       assertEquals(32, Node.INCRDECR_PROP);
61:       assertEquals(12, Node.COLUMN_BITS);
62:       assertNotNull(node0);
63:       assertEquals(0, node0.getChildCount());
64:       assertFalse(node0.isCatch());
65:       assertFalse(node0.isNull());
66:       assertEquals(308, node0.getType());
67:       assertFalse(node0.isDebugger());
68:       assertFalse(node0.isVoid());
69:       assertFalse(node0.isStringKey());
70:       assertFalse(node0.isName());
71:       assertFalse(node0.isTrue());
72:       assertFalse(node0.isParamList());
73:       assertFalse(node0.isNew());
74:       assertFalse(node0.isArrayLit());
75:       assertFalse(node0.isFunction());
76:       assertFalse(node0.isAdd());
77:       assertFalse(node0.isEmpty());
78:       assertFalse(node0.isDefaultCase());
79:       assertFalse(node0.isDo());
80:       assertFalse(node0.isSetterDef());
81:       assertFalse(node0.isVar());
82:       assertEquals(308, node0.getCharno());
83:       assertFalse(node0.isIn());
84:       assertFalse(node0.isLabel());
85:       assertFalse(node0.hasMoreThanOneChild());
86:       assertFalse(node0.isIf());
87:       assertFalse(node0.isGetterDef());
88:       assertFalse(node0.isNumber());
89:       assertFalse(node0.isLabelName());
90:       assertFalse(node0.isNE());
91:       assertFalse(node0.isSwitch());
92:       assertFalse(node0.isHook());
93:       assertFalse(node0.isTry());
94:       assertEquals(1261876, node0.getSourcePosition());
95:       assertFalse(node0.hasOneChild());
96:       assertEquals(308, node0.getLineno());
97:       assertFalse(node0.isRegExp());
98:       assertFalse(node0.isScript());
99:       assertFalse(node0.isCase());
100:       assertFalse(node0.isThis());
101:       assertFalse(node0.isBlock());
102:       assertFalse(node0.isFor());
103:       assertFalse(node0.isGetProp());
104:       assertFalse(node0.isObjectLit());
105:       assertFalse(node0.isWith());
106:       assertFalse(node0.isInstanceOf());
107:       assertFalse(node0.isBreak());
108:       assertFalse(node0.isNot());
109:       assertFalse(node0.isAnd());
110:       assertFalse(node0.isFalse());
111:       assertFalse(node0.isInc());
112:       assertFalse(node0.isCast());
113:       assertFalse(node0.isThrow());
114:       assertFalse(node0.isAssignAdd());
115:       assertFalse(node0.isReturn());
116:       assertFalse(node0.isOr());
117:       assertFalse(node0.isContinue());
118:       assertFalse(node0.isString());
119:       assertFalse(node0.isDelProp());
120:       assertFalse(node0.isGetElem());
121:       assertFalse(node0.isExprResult());
122:       assertFalse(node0.isCall());
123:       assertFalse(node0.isDec());
124:       assertFalse(node0.hasChildren());
125:       assertFalse(node0.isTypeOf());
126:       assertFalse(node0.isAssign());
127:       assertFalse(node0.isComma());
128:       assertFalse(node0.isWhile());
129:       
130:       Node node1 = new Node(0, node0, 40, 41);
131:       assertEquals(40, Node.ORIGINALNAME_PROP);
132:       assertEquals(50, Node.FREE_CALL);
133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
134:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
135:       assertEquals(52, Node.LENGTH);
136:       assertEquals(54, Node.SLASH_V);
137:       assertEquals(8, Node.FLAG_NO_THROWS);
138:       assertEquals(48, Node.DIRECTIVES);
139:       assertEquals(57, Node.REFLECTED_OBJECT);
140:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
141:       assertEquals(30, Node.VAR_ARGS_NAME);
142:       assertEquals(15, Node.NO_SIDE_EFFECTS);
143:       assertEquals(55, Node.INFERRED_FUNCTION);
144:       assertEquals(39, Node.EMPTY_BLOCK);
145:       assertEquals(2, Node.POST_FLAG);
146:       assertEquals(57, Node.LAST_PROP);
147:       assertEquals(47, Node.IS_DISPATCHER);
148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
149:       assertEquals(29, Node.JSDOC_INFO_PROP);
150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
151:       assertEquals(53, Node.INPUT_ID);
152:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
154:       assertEquals(37, Node.OPT_ARG_NAME);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(46, Node.IS_NAMESPACE);
157:       assertEquals(43, Node.IS_CONSTANT_NAME);
158:       assertEquals(56, Node.CHANGE_TIME);
159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
160:       assertEquals(49, Node.DIRECT_EVAL);
161:       assertEquals(1, Node.DECR_FLAG);
162:       assertEquals(4095, Node.COLUMN_MASK);
163:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
164:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
165:       assertEquals(32, Node.INCRDECR_PROP);
166:       assertEquals(12, Node.COLUMN_BITS);
167:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
168:       assertEquals(53, Node.INPUT_ID);
169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
170:       assertEquals(36, Node.QUOTED_PROP);
171:       assertEquals(43, Node.IS_CONSTANT_NAME);
172:       assertEquals(56, Node.CHANGE_TIME);
173:       assertEquals(48, Node.DIRECTIVES);
174:       assertEquals(37, Node.OPT_ARG_NAME);
175:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
176:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
177:       assertEquals(51, Node.STATIC_SOURCE_FILE);
178:       assertEquals(50, Node.FREE_CALL);
179:       assertEquals(4095, Node.COLUMN_MASK);
180:       assertEquals(1, Node.DECR_FLAG);
181:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
182:       assertEquals(12, Node.COLUMN_BITS);
183:       assertEquals(32, Node.INCRDECR_PROP);
184:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
185:       assertEquals(54, Node.SLASH_V);
186:       assertEquals(30, Node.VAR_ARGS_NAME);
187:       assertEquals(52, Node.LENGTH);
188:       assertEquals(40, Node.ORIGINALNAME_PROP);
189:       assertEquals(57, Node.REFLECTED_OBJECT);
190:       assertEquals(46, Node.IS_NAMESPACE);
191:       assertEquals(49, Node.DIRECT_EVAL);
192:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
193:       assertEquals(39, Node.EMPTY_BLOCK);
194:       assertEquals(47, Node.IS_DISPATCHER);
195:       assertEquals(2, Node.POST_FLAG);
196:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
197:       assertEquals(8, Node.FLAG_NO_THROWS);
198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
199:       assertEquals(55, Node.INFERRED_FUNCTION);
200:       assertEquals(29, Node.JSDOC_INFO_PROP);
201:       assertEquals(15, Node.NO_SIDE_EFFECTS);
202:       assertEquals(57, Node.LAST_PROP);
203:       assertNotNull(node1);
204:       assertFalse(node1.equals((Object)node0));
205:       assertEquals(0, node0.getChildCount());
206:       assertFalse(node0.isCatch());
207:       assertFalse(node0.isNull());
208:       assertEquals(308, node0.getType());
209:       assertFalse(node0.isDebugger());
210:       assertFalse(node0.isVoid());
211:       assertFalse(node0.isStringKey());
212:       assertFalse(node0.isName());
213:       assertFalse(node0.isTrue());
214:       assertFalse(node0.isParamList());
215:       assertFalse(node0.isNew());
216:       assertFalse(node0.isArrayLit());
217:       assertFalse(node0.isFunction());
218:       assertFalse(node0.isAdd());
219:       assertFalse(node0.isEmpty());
220:       assertFalse(node0.isDefaultCase());
221:       assertFalse(node0.isDo());
222:       assertFalse(node0.isSetterDef());
223:       assertFalse(node0.isVar());
224:       assertEquals(308, node0.getCharno());
225:       assertFalse(node0.isIn());
226:       assertFalse(node0.isLabel());
227:       assertFalse(node0.hasMoreThanOneChild());
228:       assertFalse(node0.isIf());
229:       assertFalse(node0.isGetterDef());
230:       assertFalse(node0.isNumber());
231:       assertFalse(node0.isLabelName());
232:       assertFalse(node0.isNE());
233:       assertFalse(node0.isSwitch());
234:       assertFalse(node0.isHook());
235:       assertFalse(node0.isTry());
236:       assertEquals(1261876, node0.getSourcePosition());
237:       assertFalse(node0.hasOneChild());
238:       assertEquals(308, node0.getLineno());
239:       assertFalse(node0.isRegExp());
240:       assertFalse(node0.isScript());
241:       assertFalse(node0.isCase());
242:       assertFalse(node0.isThis());
243:       assertFalse(node0.isBlock());
244:       assertFalse(node0.isFor());
245:       assertFalse(node0.isGetProp());
246:       assertFalse(node0.isObjectLit());
247:       assertFalse(node0.isWith());
248:       assertFalse(node0.isInstanceOf());
249:       assertFalse(node0.isBreak());
250:       assertFalse(node0.isNot());
251:       assertFalse(node0.isAnd());
252:       assertFalse(node0.isFalse());
253:       assertFalse(node0.isInc());
254:       assertFalse(node0.isCast());
255:       assertFalse(node0.isThrow());
256:       assertFalse(node0.isAssignAdd());
257:       assertFalse(node0.isReturn());
258:       assertFalse(node0.isOr());
259:       assertFalse(node0.isContinue());
260:       assertFalse(node0.isString());
261:       assertFalse(node0.isDelProp());
262:       assertFalse(node0.isGetElem());
263:       assertFalse(node0.isExprResult());
264:       assertFalse(node0.isCall());
265:       assertFalse(node0.isDec());
266:       assertFalse(node0.hasChildren());
267:       assertFalse(node0.isTypeOf());
268:       assertFalse(node0.isAssign());
269:       assertFalse(node0.isComma());
270:       assertFalse(node0.isWhile());
271:       assertFalse(node1.isIf());
272:       assertTrue(node1.hasOneChild());
273:       assertFalse(node1.isNE());
274:       assertFalse(node1.isEmpty());
275:       assertFalse(node1.isFor());
276:       assertEquals(1, node1.getChildCount());
277:       assertFalse(node1.isGetterDef());
278:       assertFalse(node1.isArrayLit());
279:       assertTrue(node1.hasChildren());
280:       assertFalse(node1.isDelProp());
281:       assertFalse(node1.isVoid());
282:       assertFalse(node1.isString());
283:       assertFalse(node1.isDebugger());
284:       assertFalse(node1.isRegExp());
285:       assertFalse(node1.isHook());
286:       assertFalse(node1.isCase());
287:       assertFalse(node1.isTry());
288:       assertFalse(node1.isNull());
289:       assertFalse(node1.isBreak());
290:       assertFalse(node1.isParamList());
291:       assertFalse(node1.isComma());
292:       assertFalse(node1.isCall());
293:       assertFalse(node1.isStringKey());
294:       assertFalse(node1.isName());
295:       assertEquals(0, node1.getType());
296:       assertFalse(node1.isSwitch());
297:       assertFalse(node1.isDefaultCase());
298:       assertFalse(node1.isTrue());
299:       assertFalse(node1.isVar());
300:       assertFalse(node1.isAdd());
301:       assertFalse(node1.isNew());
302:       assertFalse(node1.isAssignAdd());
303:       assertFalse(node1.isDo());
304:       assertFalse(node1.isDec());
305:       assertFalse(node1.isNumber());
306:       assertFalse(node1.isLabel());
307:       assertEquals(40, node1.getLineno());
308:       assertFalse(node1.isAssign());
309:       assertFalse(node1.isTypeOf());
310:       assertFalse(node1.isOr());
311:       assertFalse(node1.isCast());
312:       assertFalse(node1.isGetElem());
313:       assertFalse(node1.isLabelName());
314:       assertFalse(node1.isExprResult());
315:       assertFalse(node1.isWhile());
316:       assertFalse(node1.isScript());
317:       assertFalse(node1.isBlock());
318:       assertFalse(node1.hasMoreThanOneChild());
319:       assertFalse(node1.isWith());
320:       assertFalse(node1.isNot());
321:       assertFalse(node1.isObjectLit());
322:       assertFalse(node1.isReturn());
323:       assertFalse(node1.isGetProp());
324:       assertFalse(node1.isThis());
325:       assertFalse(node1.isSetterDef());
326:       assertFalse(node1.isFalse());
327:       assertFalse(node1.isInstanceOf());
328:       assertFalse(node1.isCatch());
329:       assertEquals(41, node1.getCharno());
330:       assertFalse(node1.isAnd());
331:       assertFalse(node1.isInc());
332:       assertFalse(node1.isContinue());
333:       assertFalse(node1.isFunction());
334:       assertEquals(163881, node1.getSourcePosition());
335:       assertFalse(node1.isIn());
336:       assertFalse(node1.isThrow());
337:       
338:       boolean boolean0 = node0.hasOneChild();
339:       assertFalse(boolean0);
340:       assertEquals(40, Node.ORIGINALNAME_PROP);
341:       assertEquals(50, Node.FREE_CALL);
342:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
343:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
344:       assertEquals(52, Node.LENGTH);
345:       assertEquals(54, Node.SLASH_V);
346:       assertEquals(8, Node.FLAG_NO_THROWS);
347:       assertEquals(48, Node.DIRECTIVES);
348:       assertEquals(57, Node.REFLECTED_OBJECT);
349:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
350:       assertEquals(30, Node.VAR_ARGS_NAME);
351:       assertEquals(15, Node.NO_SIDE_EFFECTS);
352:       assertEquals(55, Node.INFERRED_FUNCTION);
353:       assertEquals(39, Node.EMPTY_BLOCK);
354:       assertEquals(2, Node.POST_FLAG);
355:       assertEquals(57, Node.LAST_PROP);
356:       assertEquals(47, Node.IS_DISPATCHER);
357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
358:       assertEquals(29, Node.JSDOC_INFO_PROP);
359:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
360:       assertEquals(53, Node.INPUT_ID);
361:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
362:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
363:       assertEquals(37, Node.OPT_ARG_NAME);
364:       assertEquals(36, Node.QUOTED_PROP);
365:       assertEquals(46, Node.IS_NAMESPACE);
366:       assertEquals(43, Node.IS_CONSTANT_NAME);
367:       assertEquals(56, Node.CHANGE_TIME);
368:       assertEquals(51, Node.STATIC_SOURCE_FILE);
369:       assertEquals(49, Node.DIRECT_EVAL);
370:       assertEquals(1, Node.DECR_FLAG);
371:       assertEquals(4095, Node.COLUMN_MASK);
372:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
373:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
374:       assertEquals(32, Node.INCRDECR_PROP);
375:       assertEquals(12, Node.COLUMN_BITS);
376:       assertNotSame(node0, node1);
377:       assertFalse(node0.equals((Object)node1));
378:       assertEquals(0, node0.getChildCount());
379:       assertFalse(node0.isCatch());
380:       assertFalse(node0.isNull());
381:       assertEquals(308, node0.getType());
382:       assertFalse(node0.isDebugger());
383:       assertFalse(node0.isVoid());
384:       assertFalse(node0.isStringKey());
385:       assertFalse(node0.isName());
386:       assertFalse(node0.isTrue());
387:       assertFalse(node0.isParamList());
388:       assertFalse(node0.isNew());
389:       assertFalse(node0.isArrayLit());
390:       assertFalse(node0.isFunction());
391:       assertFalse(node0.isAdd());
392:       assertFalse(node0.isEmpty());
393:       assertFalse(node0.isDefaultCase());
394:       assertFalse(node0.isDo());
395:       assertFalse(node0.isSetterDef());
396:       assertFalse(node0.isVar());
397:       assertEquals(308, node0.getCharno());
398:       assertFalse(node0.isIn());
399:       assertFalse(node0.isLabel());
400:       assertFalse(node0.hasMoreThanOneChild());
401:       assertFalse(node0.isIf());
402:       assertFalse(node0.isGetterDef());
403:       assertFalse(node0.isNumber());
404:       assertFalse(node0.isLabelName());
405:       assertFalse(node0.isNE());
406:       assertFalse(node0.isSwitch());
407:       assertFalse(node0.isHook());
408:       assertFalse(node0.isTry());
409:       assertEquals(1261876, node0.getSourcePosition());
410:       assertFalse(node0.hasOneChild());
411:       assertEquals(308, node0.getLineno());
412:       assertFalse(node0.isRegExp());
413:       assertFalse(node0.isScript());
414:       assertFalse(node0.isCase());
415:       assertFalse(node0.isThis());
416:       assertFalse(node0.isBlock());
417:       assertFalse(node0.isFor());
418:       assertFalse(node0.isGetProp());
419:       assertFalse(node0.isObjectLit());
420:       assertFalse(node0.isWith());
421:       assertFalse(node0.isInstanceOf());
422:       assertFalse(node0.isBreak());
423:       assertFalse(node0.isNot());
424:       assertFalse(node0.isAnd());
425:       assertFalse(node0.isFalse());
426:       assertFalse(node0.isInc());
427:       assertFalse(node0.isCast());
428:       assertFalse(node0.isThrow());
429:       assertFalse(node0.isAssignAdd());
430:       assertFalse(node0.isReturn());
431:       assertFalse(node0.isOr());
432:       assertFalse(node0.isContinue());
433:       assertFalse(node0.isString());
434:       assertFalse(node0.isDelProp());
435:       assertFalse(node0.isGetElem());
436:       assertFalse(node0.isExprResult());
437:       assertFalse(node0.isCall());
438:       assertFalse(node0.isDec());
439:       assertFalse(node0.hasChildren());
440:       assertFalse(node0.isTypeOf());
441:       assertFalse(node0.isAssign());
442:       assertFalse(node0.isComma());
443:       assertFalse(node0.isWhile());
444:       
445:       boolean boolean1 = node0.isDo();
446:       assertFalse(boolean1);
447:       assertEquals(40, Node.ORIGINALNAME_PROP);
448:       assertEquals(50, Node.FREE_CALL);
449:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
450:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
451:       assertEquals(52, Node.LENGTH);
452:       assertEquals(54, Node.SLASH_V);
453:       assertEquals(8, Node.FLAG_NO_THROWS);
454:       assertEquals(48, Node.DIRECTIVES);
455:       assertEquals(57, Node.REFLECTED_OBJECT);
456:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
457:       assertEquals(30, Node.VAR_ARGS_NAME);
458:       assertEquals(15, Node.NO_SIDE_EFFECTS);
459:       assertEquals(55, Node.INFERRED_FUNCTION);
460:       assertEquals(39, Node.EMPTY_BLOCK);
461:       assertEquals(2, Node.POST_FLAG);
462:       assertEquals(57, Node.LAST_PROP);
463:       assertEquals(47, Node.IS_DISPATCHER);
464:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
465:       assertEquals(29, Node.JSDOC_INFO_PROP);
466:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
467:       assertEquals(53, Node.INPUT_ID);
468:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
470:       assertEquals(37, Node.OPT_ARG_NAME);
471:       assertEquals(36, Node.QUOTED_PROP);
472:       assertEquals(46, Node.IS_NAMESPACE);
473:       assertEquals(43, Node.IS_CONSTANT_NAME);
474:       assertEquals(56, Node.CHANGE_TIME);
475:       assertEquals(51, Node.STATIC_SOURCE_FILE);
476:       assertEquals(49, Node.DIRECT_EVAL);
477:       assertEquals(1, Node.DECR_FLAG);
478:       assertEquals(4095, Node.COLUMN_MASK);
479:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
480:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
481:       assertEquals(32, Node.INCRDECR_PROP);
482:       assertEquals(12, Node.COLUMN_BITS);
483:       assertNotSame(node0, node1);
484:       assertFalse(node0.equals((Object)node1));
485:       assertTrue(boolean1 == boolean0);
486:       assertEquals(0, node0.getChildCount());
487:       assertFalse(node0.isCatch());
488:       assertFalse(node0.isNull());
489:       assertEquals(308, node0.getType());
490:       assertFalse(node0.isDebugger());
491:       assertFalse(node0.isVoid());
492:       assertFalse(node0.isStringKey());
493:       assertFalse(node0.isName());
494:       assertFalse(node0.isTrue());
495:       assertFalse(node0.isParamList());
496:       assertFalse(node0.isNew());
497:       assertFalse(node0.isArrayLit());
498:       assertFalse(node0.isFunction());
499:       assertFalse(node0.isAdd());
500:       assertFalse(node0.isEmpty());
501:       assertFalse(node0.isDefaultCase());
502:       assertFalse(node0.isDo());
503:       assertFalse(node0.isSetterDef());
504:       assertFalse(node0.isVar());
505:       assertEquals(308, node0.getCharno());
506:       assertFalse(node0.isIn());
507:       assertFalse(node0.isLabel());
508:       assertFalse(node0.hasMoreThanOneChild());
509:       assertFalse(node0.isIf());
510:       assertFalse(node0.isGetterDef());
511:       assertFalse(node0.isNumber());
512:       assertFalse(node0.isLabelName());
513:       assertFalse(node0.isNE());
514:       assertFalse(node0.isSwitch());
515:       assertFalse(node0.isHook());
516:       assertFalse(node0.isTry());
517:       assertEquals(1261876, node0.getSourcePosition());
518:       assertFalse(node0.hasOneChild());
519:       assertEquals(308, node0.getLineno());
520:       assertFalse(node0.isRegExp());
521:       assertFalse(node0.isScript());
522:       assertFalse(node0.isCase());
523:       assertFalse(node0.isThis());
524:       assertFalse(node0.isBlock());
525:       assertFalse(node0.isFor());
526:       assertFalse(node0.isGetProp());
527:       assertFalse(node0.isObjectLit());
528:       assertFalse(node0.isWith());
529:       assertFalse(node0.isInstanceOf());
530:       assertFalse(node0.isBreak());
531:       assertFalse(node0.isNot());
532:       assertFalse(node0.isAnd());
533:       assertFalse(node0.isFalse());
534:       assertFalse(node0.isInc());
535:       assertFalse(node0.isCast());
536:       assertFalse(node0.isThrow());
537:       assertFalse(node0.isAssignAdd());
538:       assertFalse(node0.isReturn());
539:       assertFalse(node0.isOr());
540:       assertFalse(node0.isContinue());
541:       assertFalse(node0.isString());
542:       assertFalse(node0.isDelProp());
543:       assertFalse(node0.isGetElem());
544:       assertFalse(node0.isExprResult());
545:       assertFalse(node0.isCall());
546:       assertFalse(node0.isDec());
547:       assertFalse(node0.hasChildren());
548:       assertFalse(node0.isTypeOf());
549:       assertFalse(node0.isAssign());
550:       assertFalse(node0.isComma());
551:       assertFalse(node0.isWhile());
552:       
553:       Iterable<Node> iterable0 = node0.children();
554:       assertFalse(iterable0.contains(node1));
555:       assertEquals(40, Node.ORIGINALNAME_PROP);
556:       assertEquals(50, Node.FREE_CALL);
557:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
558:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
559:       assertEquals(52, Node.LENGTH);
560:       assertEquals(54, Node.SLASH_V);
561:       assertEquals(8, Node.FLAG_NO_THROWS);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(57, Node.REFLECTED_OBJECT);
564:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
565:       assertEquals(30, Node.VAR_ARGS_NAME);
566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
567:       assertEquals(55, Node.INFERRED_FUNCTION);
568:       assertEquals(39, Node.EMPTY_BLOCK);
569:       assertEquals(2, Node.POST_FLAG);
570:       assertEquals(57, Node.LAST_PROP);
571:       assertEquals(47, Node.IS_DISPATCHER);
572:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
573:       assertEquals(29, Node.JSDOC_INFO_PROP);
574:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
575:       assertEquals(53, Node.INPUT_ID);
576:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
577:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
578:       assertEquals(37, Node.OPT_ARG_NAME);
579:       assertEquals(36, Node.QUOTED_PROP);
580:       assertEquals(46, Node.IS_NAMESPACE);
581:       assertEquals(43, Node.IS_CONSTANT_NAME);
582:       assertEquals(56, Node.CHANGE_TIME);
583:       assertEquals(51, Node.STATIC_SOURCE_FILE);
584:       assertEquals(49, Node.DIRECT_EVAL);
585:       assertEquals(1, Node.DECR_FLAG);
586:       assertEquals(4095, Node.COLUMN_MASK);
587:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
588:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
589:       assertEquals(32, Node.INCRDECR_PROP);
590:       assertEquals(12, Node.COLUMN_BITS);
591:       assertNotSame(node0, node1);
592:       assertNotNull(iterable0);
593:       assertFalse(node0.equals((Object)node1));
594:       assertEquals(0, node0.getChildCount());
595:       assertFalse(node0.isCatch());
596:       assertFalse(node0.isNull());
597:       assertEquals(308, node0.getType());
598:       assertFalse(node0.isDebugger());
599:       assertFalse(node0.isVoid());
600:       assertFalse(node0.isStringKey());
601:       assertFalse(node0.isName());
602:       assertFalse(node0.isTrue());
603:       assertFalse(node0.isParamList());
604:       assertFalse(node0.isNew());
605:       assertFalse(node0.isArrayLit());
606:       assertFalse(node0.isFunction());
607:       assertFalse(node0.isAdd());
608:       assertFalse(node0.isEmpty());
609:       assertFalse(node0.isDefaultCase());
610:       assertFalse(node0.isDo());
611:       assertFalse(node0.isSetterDef());
612:       assertFalse(node0.isVar());
613:       assertEquals(308, node0.getCharno());
614:       assertFalse(node0.isIn());
615:       assertFalse(node0.isLabel());
616:       assertFalse(node0.hasMoreThanOneChild());
617:       assertFalse(node0.isIf());
618:       assertFalse(node0.isGetterDef());
619:       assertFalse(node0.isNumber());
620:       assertFalse(node0.isLabelName());
621:       assertFalse(node0.isNE());
622:       assertFalse(node0.isSwitch());
623:       assertFalse(node0.isHook());
624:       assertFalse(node0.isTry());
625:       assertEquals(1261876, node0.getSourcePosition());
626:       assertFalse(node0.hasOneChild());
627:       assertEquals(308, node0.getLineno());
628:       assertFalse(node0.isRegExp());
629:       assertFalse(node0.isScript());
630:       assertFalse(node0.isCase());
631:       assertFalse(node0.isThis());
632:       assertFalse(node0.isBlock());
633:       assertFalse(node0.isFor());
634:       assertFalse(node0.isGetProp());
635:       assertFalse(node0.isObjectLit());
636:       assertFalse(node0.isWith());
637:       assertFalse(node0.isInstanceOf());
638:       assertFalse(node0.isBreak());
639:       assertFalse(node0.isNot());
640:       assertFalse(node0.isAnd());
641:       assertFalse(node0.isFalse());
642:       assertFalse(node0.isInc());
643:       assertFalse(node0.isCast());
644:       assertFalse(node0.isThrow());
645:       assertFalse(node0.isAssignAdd());
646:       assertFalse(node0.isReturn());
647:       assertFalse(node0.isOr());
648:       assertFalse(node0.isContinue());
649:       assertFalse(node0.isString());
650:       assertFalse(node0.isDelProp());
651:       assertFalse(node0.isGetElem());
652:       assertFalse(node0.isExprResult());
653:       assertFalse(node0.isCall());
654:       assertFalse(node0.isDec());
655:       assertFalse(node0.hasChildren());
656:       assertFalse(node0.isTypeOf());
657:       assertFalse(node0.isAssign());
658:       assertFalse(node0.isComma());
659:       assertFalse(node0.isWhile());
660:       
661:       int int0 = 2988;
662:       Node[] nodeArray0 = new Node[8];
663:       nodeArray0[0] = node1;
664:       nodeArray0[1] = node0;
665:       nodeArray0[2] = node1;
666:       nodeArray0[3] = node0;
667:       nodeArray0[4] = node1;
668:       Node node2 = Node.newNumber((-3400.1088), 38, 42);
669:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
670:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
671:       assertEquals(29, Node.JSDOC_INFO_PROP);
672:       assertEquals(53, Node.INPUT_ID);
673:       assertEquals(2, Node.POST_FLAG);
674:       assertEquals(47, Node.IS_DISPATCHER);
675:       assertEquals(12, Node.COLUMN_BITS);
676:       assertEquals(46, Node.IS_NAMESPACE);
677:       assertEquals(32, Node.INCRDECR_PROP);
678:       assertEquals(1, Node.DECR_FLAG);
679:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
680:       assertEquals(54, Node.SLASH_V);
681:       assertEquals(43, Node.IS_CONSTANT_NAME);
682:       assertEquals(50, Node.FREE_CALL);
683:       assertEquals(51, Node.STATIC_SOURCE_FILE);
684:       assertEquals(40, Node.ORIGINALNAME_PROP);
685:       assertEquals(57, Node.REFLECTED_OBJECT);
686:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
687:       assertEquals(57, Node.LAST_PROP);
688:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
689:       assertEquals(30, Node.VAR_ARGS_NAME);
690:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
691:       assertEquals(55, Node.INFERRED_FUNCTION);
692:       assertEquals(4095, Node.COLUMN_MASK);
693:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
694:       assertEquals(49, Node.DIRECT_EVAL);
695:       assertEquals(48, Node.DIRECTIVES);
696:       assertEquals(15, Node.NO_SIDE_EFFECTS);
697:       assertEquals(37, Node.OPT_ARG_NAME);
698:       assertEquals(8, Node.FLAG_NO_THROWS);
699:       assertEquals(39, Node.EMPTY_BLOCK);
700:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
701:       assertEquals(56, Node.CHANGE_TIME);
702:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
703:       assertEquals(52, Node.LENGTH);
704:       assertEquals(36, Node.QUOTED_PROP);
705:       assertNotNull(node2);
706:       assertFalse(node2.equals((Object)node0));
707:       assertFalse(node2.equals((Object)node1));
708:       assertTrue(node2.isNumber());
709:       assertFalse(node2.isIn());
710:       assertFalse(node2.isCase());
711:       assertFalse(node2.isFor());
712:       assertEquals(38, node2.getLineno());
713:       assertFalse(node2.isTry());
714:       assertFalse(node2.isSwitch());
715:       assertFalse(node2.isArrayLit());
716:       assertFalse(node2.isString());
717:       assertFalse(node2.isGetterDef());
718:       assertFalse(node2.isDebugger());
719:       assertEquals(0, node2.getChildCount());
720:       assertFalse(node2.isBreak());
721:       assertFalse(node2.isGetProp());
722:       assertFalse(node2.isDefaultCase());
723:       assertFalse(node2.isComma());
724:       assertFalse(node2.isVar());
725:       assertFalse(node2.isAdd());
726:       assertFalse(node2.isExprResult());
727:       assertFalse(node2.isCall());
728:       assertFalse(node2.isVoid());
729:       assertFalse(node2.isGetElem());
730:       assertFalse(node2.isNew());
731:       assertFalse(node2.isEmpty());
732:       assertFalse(node2.isDelProp());
733:       assertFalse(node2.isName());
734:       assertFalse(node2.isTrue());
735:       assertFalse(node2.isNull());
736:       assertFalse(node2.isReturn());
737:       assertFalse(node2.isOr());
738:       assertEquals(42, node2.getCharno());
739:       assertFalse(node2.isAssignAdd());
740:       assertFalse(node2.isWhile());
741:       assertFalse(node2.isAssign());
742:       assertFalse(node2.isDo());
743:       assertFalse(node2.isContinue());
744:       assertFalse(node2.hasMoreThanOneChild());
745:       assertFalse(node2.isTypeOf());
746:       assertFalse(node2.isDec());
747:       assertFalse(node2.isBlock());
748:       assertFalse(node2.hasChildren());
749:       assertEquals(39, node2.getType());
750:       assertFalse(node2.isLabel());
751:       assertFalse(node2.isCast());
752:       assertFalse(node2.isScript());
753:       assertFalse(node2.hasOneChild());
754:       assertFalse(node2.isNot());
755:       assertFalse(node2.isLabelName());
756:       assertFalse(node2.isStringKey());
757:       assertFalse(node2.isAnd());
758:       assertFalse(node2.isParamList());
759:       assertFalse(node2.isObjectLit());
760:       assertEquals(155690, node2.getSourcePosition());
761:       assertFalse(node2.isInstanceOf());
762:       assertFalse(node2.isCatch());
763:       assertFalse(node2.isSetterDef());
764:       assertFalse(node2.isWith());
765:       assertFalse(node2.isFalse());
766:       assertFalse(node2.isThis());
767:       assertFalse(node2.isFunction());
768:       assertFalse(node2.isThrow());
769:       assertFalse(node2.isRegExp());
770:       assertFalse(node2.isHook());
771:       assertFalse(node2.isInc());
772:       assertFalse(node2.isIf());
773:       assertFalse(node2.isNE());
774:       
775:       nodeArray0[5] = node2;
776:       nodeArray0[6] = node1;
777:       nodeArray0[7] = node0;
778:       Node node3 = null;
779:       try {
780:         node3 = new Node(43, nodeArray0, 5760, 39);
781:         fail("Expecting exception: IllegalArgumentException");
782:       
783:       } catch(IllegalArgumentException e) {
784:          //
785:          // no message in exception (getMessage() returned null)
786:          //
787:          verifyException("com.google.common.base.Preconditions", e);
788:       }
789:   }
790: }
RegularFileObject[/tmp/EvoSuite_91_1628157878272/com/google/javascript/rhino/Node_91_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_91_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_91_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_91_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:38.382 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Node node0 = new Node(308, 308, 308);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertEquals(308, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertEquals(308, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertEquals(308, node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());

Node node1 = new Node(0, node0, 40, 41);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertEquals(308, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertEquals(308, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertEquals(308, node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node1.isIf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertEquals(0, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertEquals(40, node1.getLineno());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(41, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(163881, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());

boolean boolean0 = node0.hasOneChild();
assertFalse(boolean0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertEquals(308, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertEquals(308, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertEquals(308, node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());

boolean boolean1 = node0.isDo();
assertFalse(boolean1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertEquals(308, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertEquals(308, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertEquals(308, node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node0, node1);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertEquals(308, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertEquals(308, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertEquals(308, node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());

int int0 = 2988;
Node[] nodeArray0 = new Node[8];
nodeArray0[0] = node1;
nodeArray0[1] = node0;
nodeArray0[2] = node1;
nodeArray0[3] = node0;
nodeArray0[4] = node1;
Node node2 = Node.newNumber((-3400.1088), 38, 42);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertEquals(38, node2.getLineno());
assertFalse(node2.isTry());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isNew());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertEquals(42, node2.getCharno());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isBlock());
assertFalse(node2.hasChildren());
assertEquals(39, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isAnd());
assertFalse(node2.isParamList());
assertFalse(node2.isObjectLit());
assertEquals(155690, node2.getSourcePosition());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isWith());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isIf());
assertFalse(node2.isNE());

nodeArray0[5] = node2;
nodeArray0[6] = node1;
nodeArray0[7] = node0;
Node node3 = new Node(43, nodeArray0, 5760, 39);

[MASTER] 10:04:39.004 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_94_1628157878717/com/google/javascript/rhino/Node_94_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_94_1628157878717/com/google/javascript/rhino/Node_94_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:39.004 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:39.004 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:39.005 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 340
[MASTER] 10:04:39.006 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_94_1628157878717/com/google/javascript/rhino/Node_94_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.HashSet;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_94_tmp__ESTest extends Node_94_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
24:       assertTrue(boolean0);
25:       
26:       Node node0 = new Node((-1707));
27:       assertEquals(40, Node.ORIGINALNAME_PROP);
28:       assertEquals(57, Node.REFLECTED_OBJECT);
29:       assertEquals(54, Node.SLASH_V);
30:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
31:       assertEquals(57, Node.LAST_PROP);
32:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
33:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
34:       assertEquals(30, Node.VAR_ARGS_NAME);
35:       assertEquals(46, Node.IS_NAMESPACE);
36:       assertEquals(51, Node.STATIC_SOURCE_FILE);
37:       assertEquals(12, Node.COLUMN_BITS);
38:       assertEquals(1, Node.DECR_FLAG);
39:       assertEquals(32, Node.INCRDECR_PROP);
40:       assertEquals(43, Node.IS_CONSTANT_NAME);
41:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
42:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
43:       assertEquals(50, Node.FREE_CALL);
44:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
45:       assertEquals(53, Node.INPUT_ID);
46:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
47:       assertEquals(47, Node.IS_DISPATCHER);
48:       assertEquals(2, Node.POST_FLAG);
49:       assertEquals(4095, Node.COLUMN_MASK);
50:       assertEquals(55, Node.INFERRED_FUNCTION);
51:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
52:       assertEquals(48, Node.DIRECTIVES);
53:       assertEquals(37, Node.OPT_ARG_NAME);
54:       assertEquals(49, Node.DIRECT_EVAL);
55:       assertEquals(15, Node.NO_SIDE_EFFECTS);
56:       assertEquals(56, Node.CHANGE_TIME);
57:       assertEquals(36, Node.QUOTED_PROP);
58:       assertEquals(29, Node.JSDOC_INFO_PROP);
59:       assertEquals(39, Node.EMPTY_BLOCK);
60:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
61:       assertEquals(52, Node.LENGTH);
62:       assertEquals(8, Node.FLAG_NO_THROWS);
63:       assertNotNull(node0);
64:       assertFalse(node0.isSetterDef());
65:       assertFalse(node0.isParamList());
66:       assertFalse(node0.isCall());
67:       assertFalse(node0.isCatch());
68:       assertFalse(node0.isVar());
69:       assertFalse(node0.isFunction());
70:       assertEquals(0, node0.getChildCount());
71:       assertFalse(node0.isRegExp());
72:       assertFalse(node0.isBlock());
73:       assertFalse(node0.isDebugger());
74:       assertFalse(node0.isArrayLit());
75:       assertFalse(node0.isTry());
76:       assertFalse(node0.isStringKey());
77:       assertFalse(node0.isGetterDef());
78:       assertFalse(node0.isNE());
79:       assertFalse(node0.isIf());
80:       assertEquals((-1), node0.getLineno());
81:       assertFalse(node0.isContinue());
82:       assertFalse(node0.isCast());
83:       assertFalse(node0.isFor());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isInc());
86:       assertEquals((-1707), node0.getType());
87:       assertFalse(node0.isIn());
88:       assertFalse(node0.isGetProp());
89:       assertFalse(node0.isThis());
90:       assertFalse(node0.isBreak());
91:       assertFalse(node0.isFalse());
92:       assertFalse(node0.isThrow());
93:       assertFalse(node0.isHook());
94:       assertFalse(node0.isInstanceOf());
95:       assertFalse(node0.isComma());
96:       assertFalse(node0.isWith());
97:       assertEquals((-1), node0.getCharno());
98:       assertFalse(node0.isScript());
99:       assertFalse(node0.hasOneChild());
100:       assertFalse(node0.isSwitch());
101:       assertFalse(node0.isCase());
102:       assertFalse(node0.isAnd());
103:       assertFalse(node0.isString());
104:       assertEquals((-1), node0.getSourcePosition());
105:       assertFalse(node0.isNumber());
106:       assertFalse(node0.isNot());
107:       assertFalse(node0.isObjectLit());
108:       assertFalse(node0.isAssignAdd());
109:       assertFalse(node0.isLabel());
110:       assertFalse(node0.isReturn());
111:       assertFalse(node0.isDelProp());
112:       assertFalse(node0.isLabelName());
113:       assertFalse(node0.isGetElem());
114:       assertFalse(node0.isWhile());
115:       assertFalse(node0.isDec());
116:       assertFalse(node0.isTypeOf());
117:       assertFalse(node0.hasChildren());
118:       assertFalse(node0.isAssign());
119:       assertFalse(node0.isNew());
120:       assertFalse(node0.isExprResult());
121:       assertFalse(node0.isTrue());
122:       assertFalse(node0.isAdd());
123:       assertFalse(node0.isDefaultCase());
124:       assertFalse(node0.isVoid());
125:       assertFalse(node0.isDo());
126:       assertFalse(node0.isName());
127:       assertFalse(node0.isEmpty());
128:       assertFalse(node0.isNull());
129:       assertFalse(node0.isOr());
130:       
131:       Node node1 = new Node((-1707), node0, node0, node0, 39, 40);
132:       assertEquals(40, Node.ORIGINALNAME_PROP);
133:       assertEquals(57, Node.REFLECTED_OBJECT);
134:       assertEquals(54, Node.SLASH_V);
135:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
136:       assertEquals(57, Node.LAST_PROP);
137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
139:       assertEquals(30, Node.VAR_ARGS_NAME);
140:       assertEquals(46, Node.IS_NAMESPACE);
141:       assertEquals(51, Node.STATIC_SOURCE_FILE);
142:       assertEquals(12, Node.COLUMN_BITS);
143:       assertEquals(1, Node.DECR_FLAG);
144:       assertEquals(32, Node.INCRDECR_PROP);
145:       assertEquals(43, Node.IS_CONSTANT_NAME);
146:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
148:       assertEquals(50, Node.FREE_CALL);
149:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
150:       assertEquals(53, Node.INPUT_ID);
151:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
152:       assertEquals(47, Node.IS_DISPATCHER);
153:       assertEquals(2, Node.POST_FLAG);
154:       assertEquals(4095, Node.COLUMN_MASK);
155:       assertEquals(55, Node.INFERRED_FUNCTION);
156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
157:       assertEquals(48, Node.DIRECTIVES);
158:       assertEquals(37, Node.OPT_ARG_NAME);
159:       assertEquals(49, Node.DIRECT_EVAL);
160:       assertEquals(15, Node.NO_SIDE_EFFECTS);
161:       assertEquals(56, Node.CHANGE_TIME);
162:       assertEquals(36, Node.QUOTED_PROP);
163:       assertEquals(29, Node.JSDOC_INFO_PROP);
164:       assertEquals(39, Node.EMPTY_BLOCK);
165:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
166:       assertEquals(52, Node.LENGTH);
167:       assertEquals(8, Node.FLAG_NO_THROWS);
168:       assertEquals(12, Node.COLUMN_BITS);
169:       assertEquals(46, Node.IS_NAMESPACE);
170:       assertEquals(30, Node.VAR_ARGS_NAME);
171:       assertEquals(51, Node.STATIC_SOURCE_FILE);
172:       assertEquals(54, Node.SLASH_V);
173:       assertEquals(56, Node.CHANGE_TIME);
174:       assertEquals(49, Node.DIRECT_EVAL);
175:       assertEquals(37, Node.OPT_ARG_NAME);
176:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
177:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
178:       assertEquals(50, Node.FREE_CALL);
179:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
180:       assertEquals(32, Node.INCRDECR_PROP);
181:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
182:       assertEquals(1, Node.DECR_FLAG);
183:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
184:       assertEquals(4095, Node.COLUMN_MASK);
185:       assertEquals(55, Node.INFERRED_FUNCTION);
186:       assertEquals(36, Node.QUOTED_PROP);
187:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
188:       assertEquals(48, Node.DIRECTIVES);
189:       assertEquals(43, Node.IS_CONSTANT_NAME);
190:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
191:       assertEquals(40, Node.ORIGINALNAME_PROP);
192:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
193:       assertEquals(29, Node.JSDOC_INFO_PROP);
194:       assertEquals(47, Node.IS_DISPATCHER);
195:       assertEquals(52, Node.LENGTH);
196:       assertEquals(57, Node.REFLECTED_OBJECT);
197:       assertEquals(2, Node.POST_FLAG);
198:       assertEquals(8, Node.FLAG_NO_THROWS);
199:       assertEquals(39, Node.EMPTY_BLOCK);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
202:       assertEquals(57, Node.LAST_PROP);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertNotNull(node1);
205:       assertFalse(node1.equals((Object)node0));
206:       assertFalse(node0.isSetterDef());
207:       assertFalse(node0.isParamList());
208:       assertFalse(node0.isCall());
209:       assertFalse(node0.isCatch());
210:       assertFalse(node0.isVar());
211:       assertFalse(node0.isFunction());
212:       assertEquals(0, node0.getChildCount());
213:       assertFalse(node0.isRegExp());
214:       assertFalse(node0.isBlock());
215:       assertFalse(node0.isDebugger());
216:       assertFalse(node0.isArrayLit());
217:       assertFalse(node0.isTry());
218:       assertFalse(node0.isStringKey());
219:       assertFalse(node0.isGetterDef());
220:       assertFalse(node0.isNE());
221:       assertFalse(node0.isIf());
222:       assertEquals((-1), node0.getLineno());
223:       assertFalse(node0.isContinue());
224:       assertFalse(node0.isCast());
225:       assertFalse(node0.isFor());
226:       assertFalse(node0.hasMoreThanOneChild());
227:       assertFalse(node0.isInc());
228:       assertEquals((-1707), node0.getType());
229:       assertFalse(node0.isIn());
230:       assertFalse(node0.isGetProp());
231:       assertFalse(node0.isThis());
232:       assertFalse(node0.isBreak());
233:       assertFalse(node0.isFalse());
234:       assertFalse(node0.isThrow());
235:       assertFalse(node0.isHook());
236:       assertFalse(node0.isInstanceOf());
237:       assertFalse(node0.isComma());
238:       assertFalse(node0.isWith());
239:       assertEquals((-1), node0.getCharno());
240:       assertFalse(node0.isScript());
241:       assertFalse(node0.hasOneChild());
242:       assertFalse(node0.isSwitch());
243:       assertFalse(node0.isCase());
244:       assertFalse(node0.isAnd());
245:       assertFalse(node0.isString());
246:       assertEquals((-1), node0.getSourcePosition());
247:       assertFalse(node0.isNumber());
248:       assertFalse(node0.isNot());
249:       assertFalse(node0.isObjectLit());
250:       assertFalse(node0.isAssignAdd());
251:       assertFalse(node0.isLabel());
252:       assertFalse(node0.isReturn());
253:       assertFalse(node0.isDelProp());
254:       assertFalse(node0.isLabelName());
255:       assertFalse(node0.isGetElem());
256:       assertFalse(node0.isWhile());
257:       assertFalse(node0.isDec());
258:       assertFalse(node0.isTypeOf());
259:       assertFalse(node0.hasChildren());
260:       assertFalse(node0.isAssign());
261:       assertFalse(node0.isNew());
262:       assertFalse(node0.isExprResult());
263:       assertFalse(node0.isTrue());
264:       assertFalse(node0.isAdd());
265:       assertFalse(node0.isDefaultCase());
266:       assertFalse(node0.isVoid());
267:       assertFalse(node0.isDo());
268:       assertFalse(node0.isName());
269:       assertFalse(node0.isEmpty());
270:       assertFalse(node0.isNull());
271:       assertFalse(node0.isOr());
272:       assertFalse(node1.isVar());
273:       assertFalse(node1.isStringKey());
274:       assertFalse(node1.isBlock());
275:       assertFalse(node1.isNull());
276:       assertFalse(node1.isParamList());
277:       assertFalse(node1.isCall());
278:       assertFalse(node1.isName());
279:       assertFalse(node1.hasMoreThanOneChild());
280:       assertFalse(node1.isCatch());
281:       assertEquals(159784, node1.getSourcePosition());
282:       assertFalse(node1.isReturn());
283:       assertFalse(node1.isNumber());
284:       assertFalse(node1.isWhile());
285:       assertFalse(node1.isTry());
286:       assertFalse(node1.isAssign());
287:       assertFalse(node1.isTrue());
288:       assertTrue(node1.hasOneChild());
289:       assertFalse(node1.isDec());
290:       assertFalse(node1.isDelProp());
291:       assertFalse(node1.isTypeOf());
292:       assertFalse(node1.isGetElem());
293:       assertFalse(node1.isVoid());
294:       assertFalse(node1.isExprResult());
295:       assertFalse(node1.isLabelName());
296:       assertFalse(node1.isArrayLit());
297:       assertFalse(node1.isAssignAdd());
298:       assertFalse(node1.isOr());
299:       assertFalse(node1.isLabel());
300:       assertFalse(node1.isDefaultCase());
301:       assertFalse(node1.isNew());
302:       assertFalse(node1.isEmpty());
303:       assertFalse(node1.isDo());
304:       assertFalse(node1.isAdd());
305:       assertFalse(node1.isHook());
306:       assertFalse(node1.isThrow());
307:       assertFalse(node1.isFalse());
308:       assertEquals(39, node1.getLineno());
309:       assertFalse(node1.isSwitch());
310:       assertEquals(40, node1.getCharno());
311:       assertFalse(node1.isBreak());
312:       assertFalse(node1.isInstanceOf());
313:       assertFalse(node1.isAnd());
314:       assertFalse(node1.isNot());
315:       assertFalse(node1.isObjectLit());
316:       assertFalse(node1.isComma());
317:       assertFalse(node1.isThis());
318:       assertEquals(1, node1.getChildCount());
319:       assertFalse(node1.isScript());
320:       assertFalse(node1.isGetterDef());
321:       assertFalse(node1.isString());
322:       assertFalse(node1.isGetProp());
323:       assertFalse(node1.isCase());
324:       assertFalse(node1.isCast());
325:       assertFalse(node1.isFor());
326:       assertFalse(node1.isDebugger());
327:       assertFalse(node1.isRegExp());
328:       assertFalse(node1.isNE());
329:       assertFalse(node1.isFunction());
330:       assertFalse(node1.isWith());
331:       assertFalse(node1.isIf());
332:       assertTrue(node1.hasChildren());
333:       assertFalse(node1.isIn());
334:       assertFalse(node1.isContinue());
335:       assertEquals((-1707), node1.getType());
336:       assertFalse(node1.isInc());
337:       assertFalse(node1.isSetterDef());
338:       
339:       Iterable<Node> iterable0 = new HashSet<Node>();
340:       assertFalse(iterable0.contains(node1));
341:       assertNotNull(iterable0);
342:       
343:       boolean boolean1 = node1.mayMutateGlobalStateOrThrow();
344:       assertTrue(boolean1);
345:       assertEquals(40, Node.ORIGINALNAME_PROP);
346:       assertEquals(57, Node.REFLECTED_OBJECT);
347:       assertEquals(54, Node.SLASH_V);
348:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
349:       assertEquals(57, Node.LAST_PROP);
350:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
351:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
352:       assertEquals(30, Node.VAR_ARGS_NAME);
353:       assertEquals(46, Node.IS_NAMESPACE);
354:       assertEquals(51, Node.STATIC_SOURCE_FILE);
355:       assertEquals(12, Node.COLUMN_BITS);
356:       assertEquals(1, Node.DECR_FLAG);
357:       assertEquals(32, Node.INCRDECR_PROP);
358:       assertEquals(43, Node.IS_CONSTANT_NAME);
359:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
360:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
361:       assertEquals(50, Node.FREE_CALL);
362:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
363:       assertEquals(53, Node.INPUT_ID);
364:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
365:       assertEquals(47, Node.IS_DISPATCHER);
366:       assertEquals(2, Node.POST_FLAG);
367:       assertEquals(4095, Node.COLUMN_MASK);
368:       assertEquals(55, Node.INFERRED_FUNCTION);
369:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
370:       assertEquals(48, Node.DIRECTIVES);
371:       assertEquals(37, Node.OPT_ARG_NAME);
372:       assertEquals(49, Node.DIRECT_EVAL);
373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
374:       assertEquals(56, Node.CHANGE_TIME);
375:       assertEquals(36, Node.QUOTED_PROP);
376:       assertEquals(29, Node.JSDOC_INFO_PROP);
377:       assertEquals(39, Node.EMPTY_BLOCK);
378:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
379:       assertEquals(52, Node.LENGTH);
380:       assertEquals(8, Node.FLAG_NO_THROWS);
381:       assertEquals(12, Node.COLUMN_BITS);
382:       assertEquals(46, Node.IS_NAMESPACE);
383:       assertEquals(30, Node.VAR_ARGS_NAME);
384:       assertEquals(51, Node.STATIC_SOURCE_FILE);
385:       assertEquals(54, Node.SLASH_V);
386:       assertEquals(56, Node.CHANGE_TIME);
387:       assertEquals(49, Node.DIRECT_EVAL);
388:       assertEquals(37, Node.OPT_ARG_NAME);
389:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
390:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
391:       assertEquals(50, Node.FREE_CALL);
392:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
393:       assertEquals(32, Node.INCRDECR_PROP);
394:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
395:       assertEquals(1, Node.DECR_FLAG);
396:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
397:       assertEquals(4095, Node.COLUMN_MASK);
398:       assertEquals(55, Node.INFERRED_FUNCTION);
399:       assertEquals(36, Node.QUOTED_PROP);
400:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
401:       assertEquals(48, Node.DIRECTIVES);
402:       assertEquals(43, Node.IS_CONSTANT_NAME);
403:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
404:       assertEquals(40, Node.ORIGINALNAME_PROP);
405:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
406:       assertEquals(29, Node.JSDOC_INFO_PROP);
407:       assertEquals(47, Node.IS_DISPATCHER);
408:       assertEquals(52, Node.LENGTH);
409:       assertEquals(57, Node.REFLECTED_OBJECT);
410:       assertEquals(2, Node.POST_FLAG);
411:       assertEquals(8, Node.FLAG_NO_THROWS);
412:       assertEquals(39, Node.EMPTY_BLOCK);
413:       assertEquals(53, Node.INPUT_ID);
414:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
415:       assertEquals(57, Node.LAST_PROP);
416:       assertEquals(15, Node.NO_SIDE_EFFECTS);
417:       assertNotSame(node0, node1);
418:       assertNotSame(node1, node0);
419:       assertFalse(node0.equals((Object)node1));
420:       assertFalse(node1.equals((Object)node0));
421:       assertTrue(boolean1 == boolean0);
422:       assertFalse(node0.isSetterDef());
423:       assertFalse(node0.isParamList());
424:       assertFalse(node0.isCall());
425:       assertFalse(node0.isCatch());
426:       assertFalse(node0.isVar());
427:       assertFalse(node0.isFunction());
428:       assertEquals(0, node0.getChildCount());
429:       assertFalse(node0.isRegExp());
430:       assertFalse(node0.isBlock());
431:       assertFalse(node0.isDebugger());
432:       assertFalse(node0.isArrayLit());
433:       assertFalse(node0.isTry());
434:       assertFalse(node0.isStringKey());
435:       assertFalse(node0.isGetterDef());
436:       assertFalse(node0.isNE());
437:       assertFalse(node0.isIf());
438:       assertEquals((-1), node0.getLineno());
439:       assertFalse(node0.isContinue());
440:       assertFalse(node0.isCast());
441:       assertFalse(node0.isFor());
442:       assertFalse(node0.hasMoreThanOneChild());
443:       assertFalse(node0.isInc());
444:       assertEquals((-1707), node0.getType());
445:       assertFalse(node0.isIn());
446:       assertFalse(node0.isGetProp());
447:       assertFalse(node0.isThis());
448:       assertFalse(node0.isBreak());
449:       assertFalse(node0.isFalse());
450:       assertFalse(node0.isThrow());
451:       assertFalse(node0.isHook());
452:       assertFalse(node0.isInstanceOf());
453:       assertFalse(node0.isComma());
454:       assertFalse(node0.isWith());
455:       assertEquals((-1), node0.getCharno());
456:       assertFalse(node0.isScript());
457:       assertFalse(node0.hasOneChild());
458:       assertFalse(node0.isSwitch());
459:       assertFalse(node0.isCase());
460:       assertFalse(node0.isAnd());
461:       assertFalse(node0.isString());
462:       assertEquals((-1), node0.getSourcePosition());
463:       assertFalse(node0.isNumber());
464:       assertFalse(node0.isNot());
465:       assertFalse(node0.isObjectLit());
466:       assertFalse(node0.isAssignAdd());
467:       assertFalse(node0.isLabel());
468:       assertFalse(node0.isReturn());
469:       assertFalse(node0.isDelProp());
470:       assertFalse(node0.isLabelName());
471:       assertFalse(node0.isGetElem());
472:       assertFalse(node0.isWhile());
473:       assertFalse(node0.isDec());
474:       assertFalse(node0.isTypeOf());
475:       assertFalse(node0.hasChildren());
476:       assertFalse(node0.isAssign());
477:       assertFalse(node0.isNew());
478:       assertFalse(node0.isExprResult());
479:       assertFalse(node0.isTrue());
480:       assertFalse(node0.isAdd());
481:       assertFalse(node0.isDefaultCase());
482:       assertFalse(node0.isVoid());
483:       assertFalse(node0.isDo());
484:       assertFalse(node0.isName());
485:       assertFalse(node0.isEmpty());
486:       assertFalse(node0.isNull());
487:       assertFalse(node0.isOr());
488:       assertFalse(node1.isVar());
489:       assertFalse(node1.isStringKey());
490:       assertFalse(node1.isBlock());
491:       assertFalse(node1.isNull());
492:       assertFalse(node1.isParamList());
493:       assertFalse(node1.isCall());
494:       assertFalse(node1.isName());
495:       assertFalse(node1.hasMoreThanOneChild());
496:       assertFalse(node1.isCatch());
497:       assertEquals(159784, node1.getSourcePosition());
498:       assertFalse(node1.isReturn());
499:       assertFalse(node1.isNumber());
500:       assertFalse(node1.isWhile());
501:       assertFalse(node1.isTry());
502:       assertFalse(node1.isAssign());
503:       assertFalse(node1.isTrue());
504:       assertTrue(node1.hasOneChild());
505:       assertFalse(node1.isDec());
506:       assertFalse(node1.isDelProp());
507:       assertFalse(node1.isTypeOf());
508:       assertFalse(node1.isGetElem());
509:       assertFalse(node1.isVoid());
510:       assertFalse(node1.isExprResult());
511:       assertFalse(node1.isLabelName());
512:       assertFalse(node1.isArrayLit());
513:       assertFalse(node1.isAssignAdd());
514:       assertFalse(node1.isOr());
515:       assertFalse(node1.isLabel());
516:       assertFalse(node1.isDefaultCase());
517:       assertFalse(node1.isNew());
518:       assertFalse(node1.isEmpty());
519:       assertFalse(node1.isDo());
520:       assertFalse(node1.isAdd());
521:       assertFalse(node1.isHook());
522:       assertFalse(node1.isThrow());
523:       assertFalse(node1.isFalse());
524:       assertEquals(39, node1.getLineno());
525:       assertFalse(node1.isSwitch());
526:       assertEquals(40, node1.getCharno());
527:       assertFalse(node1.isBreak());
528:       assertFalse(node1.isInstanceOf());
529:       assertFalse(node1.isAnd());
530:       assertFalse(node1.isNot());
531:       assertFalse(node1.isObjectLit());
532:       assertFalse(node1.isComma());
533:       assertFalse(node1.isThis());
534:       assertEquals(1, node1.getChildCount());
535:       assertFalse(node1.isScript());
536:       assertFalse(node1.isGetterDef());
537:       assertFalse(node1.isString());
538:       assertFalse(node1.isGetProp());
539:       assertFalse(node1.isCase());
540:       assertFalse(node1.isCast());
541:       assertFalse(node1.isFor());
542:       assertFalse(node1.isDebugger());
543:       assertFalse(node1.isRegExp());
544:       assertFalse(node1.isNE());
545:       assertFalse(node1.isFunction());
546:       assertFalse(node1.isWith());
547:       assertFalse(node1.isIf());
548:       assertTrue(node1.hasChildren());
549:       assertFalse(node1.isIn());
550:       assertFalse(node1.isContinue());
551:       assertEquals((-1707), node1.getType());
552:       assertFalse(node1.isInc());
553:       assertFalse(node1.isSetterDef());
554:       
555:       Node node2 = node1.clonePropsFrom(node0);
556:       assertEquals(40, Node.ORIGINALNAME_PROP);
557:       assertEquals(57, Node.REFLECTED_OBJECT);
558:       assertEquals(54, Node.SLASH_V);
559:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
560:       assertEquals(57, Node.LAST_PROP);
561:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
562:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
563:       assertEquals(30, Node.VAR_ARGS_NAME);
564:       assertEquals(46, Node.IS_NAMESPACE);
565:       assertEquals(51, Node.STATIC_SOURCE_FILE);
566:       assertEquals(12, Node.COLUMN_BITS);
567:       assertEquals(1, Node.DECR_FLAG);
568:       assertEquals(32, Node.INCRDECR_PROP);
569:       assertEquals(43, Node.IS_CONSTANT_NAME);
570:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
571:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
572:       assertEquals(50, Node.FREE_CALL);
573:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
574:       assertEquals(53, Node.INPUT_ID);
575:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
576:       assertEquals(47, Node.IS_DISPATCHER);
577:       assertEquals(2, Node.POST_FLAG);
578:       assertEquals(4095, Node.COLUMN_MASK);
579:       assertEquals(55, Node.INFERRED_FUNCTION);
580:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
581:       assertEquals(48, Node.DIRECTIVES);
582:       assertEquals(37, Node.OPT_ARG_NAME);
583:       assertEquals(49, Node.DIRECT_EVAL);
584:       assertEquals(15, Node.NO_SIDE_EFFECTS);
585:       assertEquals(56, Node.CHANGE_TIME);
586:       assertEquals(36, Node.QUOTED_PROP);
587:       assertEquals(29, Node.JSDOC_INFO_PROP);
588:       assertEquals(39, Node.EMPTY_BLOCK);
589:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
590:       assertEquals(52, Node.LENGTH);
591:       assertEquals(8, Node.FLAG_NO_THROWS);
592:       assertEquals(12, Node.COLUMN_BITS);
593:       assertEquals(46, Node.IS_NAMESPACE);
594:       assertEquals(30, Node.VAR_ARGS_NAME);
595:       assertEquals(51, Node.STATIC_SOURCE_FILE);
596:       assertEquals(54, Node.SLASH_V);
597:       assertEquals(56, Node.CHANGE_TIME);
598:       assertEquals(49, Node.DIRECT_EVAL);
599:       assertEquals(37, Node.OPT_ARG_NAME);
600:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
601:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
602:       assertEquals(50, Node.FREE_CALL);
603:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
604:       assertEquals(32, Node.INCRDECR_PROP);
605:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
606:       assertEquals(1, Node.DECR_FLAG);
607:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
608:       assertEquals(4095, Node.COLUMN_MASK);
609:       assertEquals(55, Node.INFERRED_FUNCTION);
610:       assertEquals(36, Node.QUOTED_PROP);
611:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
612:       assertEquals(48, Node.DIRECTIVES);
613:       assertEquals(43, Node.IS_CONSTANT_NAME);
614:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
615:       assertEquals(40, Node.ORIGINALNAME_PROP);
616:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
617:       assertEquals(29, Node.JSDOC_INFO_PROP);
618:       assertEquals(47, Node.IS_DISPATCHER);
619:       assertEquals(52, Node.LENGTH);
620:       assertEquals(57, Node.REFLECTED_OBJECT);
621:       assertEquals(2, Node.POST_FLAG);
622:       assertEquals(8, Node.FLAG_NO_THROWS);
623:       assertEquals(39, Node.EMPTY_BLOCK);
624:       assertEquals(53, Node.INPUT_ID);
625:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
626:       assertEquals(57, Node.LAST_PROP);
627:       assertEquals(15, Node.NO_SIDE_EFFECTS);
628:       assertEquals(30, Node.VAR_ARGS_NAME);
629:       assertEquals(49, Node.DIRECT_EVAL);
630:       assertEquals(57, Node.LAST_PROP);
631:       assertEquals(1, Node.DECR_FLAG);
632:       assertEquals(51, Node.STATIC_SOURCE_FILE);
633:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
634:       assertEquals(54, Node.SLASH_V);
635:       assertEquals(12, Node.COLUMN_BITS);
636:       assertEquals(46, Node.IS_NAMESPACE);
637:       assertEquals(37, Node.OPT_ARG_NAME);
638:       assertEquals(40, Node.ORIGINALNAME_PROP);
639:       assertEquals(50, Node.FREE_CALL);
640:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
641:       assertEquals(32, Node.INCRDECR_PROP);
642:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
643:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
644:       assertEquals(43, Node.IS_CONSTANT_NAME);
645:       assertEquals(36, Node.QUOTED_PROP);
646:       assertEquals(48, Node.DIRECTIVES);
647:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
648:       assertEquals(4095, Node.COLUMN_MASK);
649:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
650:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
651:       assertEquals(29, Node.JSDOC_INFO_PROP);
652:       assertEquals(2, Node.POST_FLAG);
653:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
654:       assertEquals(56, Node.CHANGE_TIME);
655:       assertEquals(47, Node.IS_DISPATCHER);
656:       assertEquals(57, Node.REFLECTED_OBJECT);
657:       assertEquals(52, Node.LENGTH);
658:       assertEquals(55, Node.INFERRED_FUNCTION);
659:       assertEquals(8, Node.FLAG_NO_THROWS);
660:       assertEquals(39, Node.EMPTY_BLOCK);
661:       assertEquals(15, Node.NO_SIDE_EFFECTS);
662:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
663:       assertEquals(53, Node.INPUT_ID);
664:       assertNotSame(node0, node1);
665:       assertNotSame(node0, node2);
666:       assertSame(node1, node2);
667:       assertNotSame(node1, node0);
668:       assertNotSame(node2, node0);
669:       assertSame(node2, node1);
670:       assertNotNull(node2);
671:       assertFalse(node0.equals((Object)node1));
672:       assertFalse(node1.equals((Object)node0));
673:       assertFalse(node2.equals((Object)node0));
674:       assertFalse(node0.isSetterDef());
675:       assertFalse(node0.isParamList());
676:       assertFalse(node0.isCall());
677:       assertFalse(node0.isCatch());
678:       assertFalse(node0.isVar());
679:       assertFalse(node0.isFunction());
680:       assertEquals(0, node0.getChildCount());
681:       assertFalse(node0.isRegExp());
682:       assertFalse(node0.isBlock());
683:       assertFalse(node0.isDebugger());
684:       assertFalse(node0.isArrayLit());
685:       assertFalse(node0.isTry());
686:       assertFalse(node0.isStringKey());
687:       assertFalse(node0.isGetterDef());
688:       assertFalse(node0.isNE());
689:       assertFalse(node0.isIf());
690:       assertEquals((-1), node0.getLineno());
691:       assertFalse(node0.isContinue());
692:       assertFalse(node0.isCast());
693:       assertFalse(node0.isFor());
694:       assertFalse(node0.hasMoreThanOneChild());
695:       assertFalse(node0.isInc());
696:       assertEquals((-1707), node0.getType());
697:       assertFalse(node0.isIn());
698:       assertFalse(node0.isGetProp());
699:       assertFalse(node0.isThis());
700:       assertFalse(node0.isBreak());
701:       assertFalse(node0.isFalse());
702:       assertFalse(node0.isThrow());
703:       assertFalse(node0.isHook());
704:       assertFalse(node0.isInstanceOf());
705:       assertFalse(node0.isComma());
706:       assertFalse(node0.isWith());
707:       assertEquals((-1), node0.getCharno());
708:       assertFalse(node0.isScript());
709:       assertFalse(node0.hasOneChild());
710:       assertFalse(node0.isSwitch());
711:       assertFalse(node0.isCase());
712:       assertFalse(node0.isAnd());
713:       assertFalse(node0.isString());
714:       assertEquals((-1), node0.getSourcePosition());
715:       assertFalse(node0.isNumber());
716:       assertFalse(node0.isNot());
717:       assertFalse(node0.isObjectLit());
718:       assertFalse(node0.isAssignAdd());
719:       assertFalse(node0.isLabel());
720:       assertFalse(node0.isReturn());
721:       assertFalse(node0.isDelProp());
722:       assertFalse(node0.isLabelName());
723:       assertFalse(node0.isGetElem());
724:       assertFalse(node0.isWhile());
725:       assertFalse(node0.isDec());
726:       assertFalse(node0.isTypeOf());
727:       assertFalse(node0.hasChildren());
728:       assertFalse(node0.isAssign());
729:       assertFalse(node0.isNew());
730:       assertFalse(node0.isExprResult());
731:       assertFalse(node0.isTrue());
732:       assertFalse(node0.isAdd());
733:       assertFalse(node0.isDefaultCase());
734:       assertFalse(node0.isVoid());
735:       assertFalse(node0.isDo());
736:       assertFalse(node0.isName());
737:       assertFalse(node0.isEmpty());
738:       assertFalse(node0.isNull());
739:       assertFalse(node0.isOr());
740:       assertFalse(node1.isVar());
741:       assertFalse(node1.isStringKey());
742:       assertFalse(node1.isBlock());
743:       assertFalse(node1.isNull());
744:       assertFalse(node1.isParamList());
745:       assertFalse(node1.isCall());
746:       assertFalse(node1.isName());
747:       assertFalse(node1.hasMoreThanOneChild());
748:       assertFalse(node1.isCatch());
749:       assertEquals(159784, node1.getSourcePosition());
750:       assertFalse(node1.isReturn());
751:       assertFalse(node1.isNumber());
752:       assertFalse(node1.isWhile());
753:       assertFalse(node1.isTry());
754:       assertFalse(node1.isAssign());
755:       assertFalse(node1.isTrue());
756:       assertTrue(node1.hasOneChild());
757:       assertFalse(node1.isDec());
758:       assertFalse(node1.isDelProp());
759:       assertFalse(node1.isTypeOf());
760:       assertFalse(node1.isGetElem());
761:       assertFalse(node1.isVoid());
762:       assertFalse(node1.isExprResult());
763:       assertFalse(node1.isLabelName());
764:       assertFalse(node1.isArrayLit());
765:       assertFalse(node1.isAssignAdd());
766:       assertFalse(node1.isOr());
767:       assertFalse(node1.isLabel());
768:       assertFalse(node1.isDefaultCase());
769:       assertFalse(node1.isNew());
770:       assertFalse(node1.isEmpty());
771:       assertFalse(node1.isDo());
772:       assertFalse(node1.isAdd());
773:       assertFalse(node1.isHook());
774:       assertFalse(node1.isThrow());
775:       assertFalse(node1.isFalse());
776:       assertEquals(39, node1.getLineno());
777:       assertFalse(node1.isSwitch());
778:       assertEquals(40, node1.getCharno());
779:       assertFalse(node1.isBreak());
780:       assertFalse(node1.isInstanceOf());
781:       assertFalse(node1.isAnd());
782:       assertFalse(node1.isNot());
783:       assertFalse(node1.isObjectLit());
784:       assertFalse(node1.isComma());
785:       assertFalse(node1.isThis());
786:       assertEquals(1, node1.getChildCount());
787:       assertFalse(node1.isScript());
788:       assertFalse(node1.isGetterDef());
789:       assertFalse(node1.isString());
790:       assertFalse(node1.isGetProp());
791:       assertFalse(node1.isCase());
792:       assertFalse(node1.isCast());
793:       assertFalse(node1.isFor());
794:       assertFalse(node1.isDebugger());
795:       assertFalse(node1.isRegExp());
796:       assertFalse(node1.isNE());
797:       assertFalse(node1.isFunction());
798:       assertFalse(node1.isWith());
799:       assertFalse(node1.isIf());
800:       assertTrue(node1.hasChildren());
801:       assertFalse(node1.isIn());
802:       assertFalse(node1.isContinue());
803:       assertEquals((-1707), node1.getType());
804:       assertFalse(node1.isInc());
805:       assertFalse(node1.isSetterDef());
806:       assertFalse(node2.isCall());
807:       assertFalse(node2.isName());
808:       assertFalse(node2.isStringKey());
809:       assertFalse(node2.isBlock());
810:       assertFalse(node2.isNull());
811:       assertFalse(node2.isVar());
812:       assertFalse(node2.isParamList());
813:       assertFalse(node2.isCatch());
814:       assertFalse(node2.hasMoreThanOneChild());
815:       assertEquals(159784, node2.getSourcePosition());
816:       assertFalse(node2.isReturn());
817:       assertFalse(node2.isWhile());
818:       assertFalse(node2.isDebugger());
819:       assertFalse(node2.isNumber());
820:       assertFalse(node2.isTry());
821:       assertFalse(node2.isArrayLit());
822:       assertFalse(node2.isAssign());
823:       assertFalse(node2.isLabelName());
824:       assertTrue(node2.hasOneChild());
825:       assertFalse(node2.isExprResult());
826:       assertFalse(node2.isDec());
827:       assertFalse(node2.isTypeOf());
828:       assertFalse(node2.isDelProp());
829:       assertFalse(node2.isVoid());
830:       assertFalse(node2.isGetElem());
831:       assertFalse(node2.isDo());
832:       assertFalse(node2.isAssignAdd());
833:       assertFalse(node2.isDefaultCase());
834:       assertFalse(node2.isLabel());
835:       assertFalse(node2.isTrue());
836:       assertFalse(node2.isNew());
837:       assertFalse(node2.isOr());
838:       assertFalse(node2.isEmpty());
839:       assertFalse(node2.isAdd());
840:       assertFalse(node2.isFalse());
841:       assertEquals(39, node2.getLineno());
842:       assertFalse(node2.isHook());
843:       assertFalse(node2.isThrow());
844:       assertFalse(node2.isComma());
845:       assertFalse(node2.isThis());
846:       assertFalse(node2.isSwitch());
847:       assertFalse(node2.isBreak());
848:       assertFalse(node2.isInstanceOf());
849:       assertFalse(node2.isObjectLit());
850:       assertEquals(40, node2.getCharno());
851:       assertFalse(node2.isAnd());
852:       assertFalse(node2.isCase());
853:       assertFalse(node2.isNot());
854:       assertEquals(1, node2.getChildCount());
855:       assertFalse(node2.isGetProp());
856:       assertFalse(node2.isGetterDef());
857:       assertFalse(node2.isString());
858:       assertFalse(node2.isScript());
859:       assertFalse(node2.isIf());
860:       assertFalse(node2.isNE());
861:       assertFalse(node2.isFor());
862:       assertFalse(node2.isFunction());
863:       assertFalse(node2.isRegExp());
864:       assertFalse(node2.isWith());
865:       assertFalse(node2.isCast());
866:       assertTrue(node2.hasChildren());
867:       assertFalse(node2.isContinue());
868:       assertFalse(node2.isInc());
869:       assertFalse(node2.isSetterDef());
870:       assertEquals((-1707), node2.getType());
871:       assertFalse(node2.isIn());
872:       
873:       Node node3 = node2.clonePropsFrom(node1);
874:       assertEquals(40, Node.ORIGINALNAME_PROP);
875:       assertEquals(57, Node.REFLECTED_OBJECT);
876:       assertEquals(54, Node.SLASH_V);
877:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
878:       assertEquals(57, Node.LAST_PROP);
879:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
880:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
881:       assertEquals(30, Node.VAR_ARGS_NAME);
882:       assertEquals(46, Node.IS_NAMESPACE);
883:       assertEquals(51, Node.STATIC_SOURCE_FILE);
884:       assertEquals(12, Node.COLUMN_BITS);
885:       assertEquals(1, Node.DECR_FLAG);
886:       assertEquals(32, Node.INCRDECR_PROP);
887:       assertEquals(43, Node.IS_CONSTANT_NAME);
888:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
889:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
890:       assertEquals(50, Node.FREE_CALL);
891:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
892:       assertEquals(53, Node.INPUT_ID);
893:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
894:       assertEquals(47, Node.IS_DISPATCHER);
895:       assertEquals(2, Node.POST_FLAG);
896:       assertEquals(4095, Node.COLUMN_MASK);
897:       assertEquals(55, Node.INFERRED_FUNCTION);
898:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
899:       assertEquals(48, Node.DIRECTIVES);
900:       assertEquals(37, Node.OPT_ARG_NAME);
901:       assertEquals(49, Node.DIRECT_EVAL);
902:       assertEquals(15, Node.NO_SIDE_EFFECTS);
903:       assertEquals(56, Node.CHANGE_TIME);
904:       assertEquals(36, Node.QUOTED_PROP);
905:       assertEquals(29, Node.JSDOC_INFO_PROP);
906:       assertEquals(39, Node.EMPTY_BLOCK);
907:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
908:       assertEquals(52, Node.LENGTH);
909:       assertEquals(8, Node.FLAG_NO_THROWS);
910:       assertEquals(12, Node.COLUMN_BITS);
911:       assertEquals(46, Node.IS_NAMESPACE);
912:       assertEquals(30, Node.VAR_ARGS_NAME);
913:       assertEquals(51, Node.STATIC_SOURCE_FILE);
914:       assertEquals(54, Node.SLASH_V);
915:       assertEquals(56, Node.CHANGE_TIME);
916:       assertEquals(49, Node.DIRECT_EVAL);
917:       assertEquals(37, Node.OPT_ARG_NAME);
918:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
919:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
920:       assertEquals(50, Node.FREE_CALL);
921:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
922:       assertEquals(32, Node.INCRDECR_PROP);
923:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
924:       assertEquals(1, Node.DECR_FLAG);
925:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
926:       assertEquals(4095, Node.COLUMN_MASK);
927:       assertEquals(55, Node.INFERRED_FUNCTION);
928:       assertEquals(36, Node.QUOTED_PROP);
929:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
930:       assertEquals(48, Node.DIRECTIVES);
931:       assertEquals(43, Node.IS_CONSTANT_NAME);
932:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
933:       assertEquals(40, Node.ORIGINALNAME_PROP);
934:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
935:       assertEquals(29, Node.JSDOC_INFO_PROP);
936:       assertEquals(47, Node.IS_DISPATCHER);
937:       assertEquals(52, Node.LENGTH);
938:       assertEquals(57, Node.REFLECTED_OBJECT);
939:       assertEquals(2, Node.POST_FLAG);
940:       assertEquals(8, Node.FLAG_NO_THROWS);
941:       assertEquals(39, Node.EMPTY_BLOCK);
942:       assertEquals(53, Node.INPUT_ID);
943:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
944:       assertEquals(57, Node.LAST_PROP);
945:       assertEquals(15, Node.NO_SIDE_EFFECTS);
946:       assertEquals(30, Node.VAR_ARGS_NAME);
947:       assertEquals(49, Node.DIRECT_EVAL);
948:       assertEquals(57, Node.LAST_PROP);
949:       assertEquals(1, Node.DECR_FLAG);
950:       assertEquals(51, Node.STATIC_SOURCE_FILE);
951:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
952:       assertEquals(54, Node.SLASH_V);
953:       assertEquals(12, Node.COLUMN_BITS);
954:       assertEquals(46, Node.IS_NAMESPACE);
955:       assertEquals(37, Node.OPT_ARG_NAME);
956:       assertEquals(40, Node.ORIGINALNAME_PROP);
957:       assertEquals(50, Node.FREE_CALL);
958:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
959:       assertEquals(32, Node.INCRDECR_PROP);
960:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
961:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
962:       assertEquals(43, Node.IS_CONSTANT_NAME);
963:       assertEquals(36, Node.QUOTED_PROP);
964:       assertEquals(48, Node.DIRECTIVES);
965:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
966:       assertEquals(4095, Node.COLUMN_MASK);
967:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
968:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
969:       assertEquals(29, Node.JSDOC_INFO_PROP);
970:       assertEquals(2, Node.POST_FLAG);
971:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
972:       assertEquals(56, Node.CHANGE_TIME);
973:       assertEquals(47, Node.IS_DISPATCHER);
974:       assertEquals(57, Node.REFLECTED_OBJECT);
975:       assertEquals(52, Node.LENGTH);
976:       assertEquals(55, Node.INFERRED_FUNCTION);
977:       assertEquals(8, Node.FLAG_NO_THROWS);
978:       assertEquals(39, Node.EMPTY_BLOCK);
979:       assertEquals(15, Node.NO_SIDE_EFFECTS);
980:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
981:       assertEquals(53, Node.INPUT_ID);
982:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
983:       assertEquals(43, Node.IS_CONSTANT_NAME);
984:       assertEquals(36, Node.QUOTED_PROP);
985:       assertEquals(29, Node.JSDOC_INFO_PROP);
986:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
987:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
988:       assertEquals(55, Node.INFERRED_FUNCTION);
989:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
990:       assertEquals(53, Node.INPUT_ID);
991:       assertEquals(2, Node.POST_FLAG);
992:       assertEquals(51, Node.STATIC_SOURCE_FILE);
993:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
994:       assertEquals(46, Node.IS_NAMESPACE);
995:       assertEquals(47, Node.IS_DISPATCHER);
996:       assertEquals(30, Node.VAR_ARGS_NAME);
997:       assertEquals(40, Node.ORIGINALNAME_PROP);
998:       assertEquals(52, Node.LENGTH);
999:       assertEquals(54, Node.SLASH_V);
1000:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1001:       assertEquals(57, Node.REFLECTED_OBJECT);
1002:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1003:       assertEquals(50, Node.FREE_CALL);
1004:       assertEquals(1, Node.DECR_FLAG);
1005:       assertEquals(57, Node.LAST_PROP);
1006:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1007:       assertEquals(39, Node.EMPTY_BLOCK);
1008:       assertEquals(48, Node.DIRECTIVES);
1009:       assertEquals(32, Node.INCRDECR_PROP);
1010:       assertEquals(8, Node.FLAG_NO_THROWS);
1011:       assertEquals(12, Node.COLUMN_BITS);
1012:       assertEquals(56, Node.CHANGE_TIME);
1013:       assertEquals(49, Node.DIRECT_EVAL);
1014:       assertEquals(4095, Node.COLUMN_MASK);
1015:       assertEquals(37, Node.OPT_ARG_NAME);
1016:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1017:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1018:       assertNotSame(node0, node1);
1019:       assertNotSame(node0, node2);
1020:       assertNotSame(node0, node3);
1021:       assertSame(node1, node2);
1022:       assertNotSame(node1, node0);
1023:       assertSame(node1, node3);
1024:       assertSame(node2, node3);
1025:       assertNotSame(node2, node0);
1026:       assertSame(node2, node1);
1027:       assertNotSame(node3, node0);
1028:       assertSame(node3, node1);
1029:       assertSame(node3, node2);
1030:       assertNotNull(node3);
1031:       assertFalse(node0.equals((Object)node1));
1032:       assertFalse(node0.equals((Object)node2));
1033:       assertFalse(node1.equals((Object)node0));
1034:       assertFalse(node2.equals((Object)node0));
1035:       assertFalse(node3.equals((Object)node0));
1036:       assertFalse(node0.isSetterDef());
1037:       assertFalse(node0.isParamList());
1038:       assertFalse(node0.isCall());
1039:       assertFalse(node0.isCatch());
1040:       assertFalse(node0.isVar());
1041:       assertFalse(node0.isFunction());
1042:       assertEquals(0, node0.getChildCount());
1043:       assertFalse(node0.isRegExp());
1044:       assertFalse(node0.isBlock());
1045:       assertFalse(node0.isDebugger());
1046:       assertFalse(node0.isArrayLit());
1047:       assertFalse(node0.isTry());
1048:       assertFalse(node0.isStringKey());
1049:       assertFalse(node0.isGetterDef());
1050:       assertFalse(node0.isNE());
1051:       assertFalse(node0.isIf());
1052:       assertEquals((-1), node0.getLineno());
1053:       assertFalse(node0.isContinue());
1054:       assertFalse(node0.isCast());
1055:       assertFalse(node0.isFor());
1056:       assertFalse(node0.hasMoreThanOneChild());
1057:       assertFalse(node0.isInc());
1058:       assertEquals((-1707), node0.getType());
1059:       assertFalse(node0.isIn());
1060:       assertFalse(node0.isGetProp());
1061:       assertFalse(node0.isThis());
1062:       assertFalse(node0.isBreak());
1063:       assertFalse(node0.isFalse());
1064:       assertFalse(node0.isThrow());
1065:       assertFalse(node0.isHook());
1066:       assertFalse(node0.isInstanceOf());
1067:       assertFalse(node0.isComma());
1068:       assertFalse(node0.isWith());
1069:       assertEquals((-1), node0.getCharno());
1070:       assertFalse(node0.isScript());
1071:       assertFalse(node0.hasOneChild());
1072:       assertFalse(node0.isSwitch());
1073:       assertFalse(node0.isCase());
1074:       assertFalse(node0.isAnd());
1075:       assertFalse(node0.isString());
1076:       assertEquals((-1), node0.getSourcePosition());
1077:       assertFalse(node0.isNumber());
1078:       assertFalse(node0.isNot());
1079:       assertFalse(node0.isObjectLit());
1080:       assertFalse(node0.isAssignAdd());
1081:       assertFalse(node0.isLabel());
1082:       assertFalse(node0.isReturn());
1083:       assertFalse(node0.isDelProp());
1084:       assertFalse(node0.isLabelName());
1085:       assertFalse(node0.isGetElem());
1086:       assertFalse(node0.isWhile());
1087:       assertFalse(node0.isDec());
1088:       assertFalse(node0.isTypeOf());
1089:       assertFalse(node0.hasChildren());
1090:       assertFalse(node0.isAssign());
1091:       assertFalse(node0.isNew());
1092:       assertFalse(node0.isExprResult());
1093:       assertFalse(node0.isTrue());
1094:       assertFalse(node0.isAdd());
1095:       assertFalse(node0.isDefaultCase());
1096:       assertFalse(node0.isVoid());
1097:       assertFalse(node0.isDo());
1098:       assertFalse(node0.isName());
1099:       assertFalse(node0.isEmpty());
1100:       assertFalse(node0.isNull());
1101:       assertFalse(node0.isOr());
1102:       assertFalse(node1.isVar());
1103:       assertFalse(node1.isStringKey());
1104:       assertFalse(node1.isBlock());
1105:       assertFalse(node1.isNull());
1106:       assertFalse(node1.isParamList());
1107:       assertFalse(node1.isCall());
1108:       assertFalse(node1.isName());
1109:       assertFalse(node1.hasMoreThanOneChild());
1110:       assertFalse(node1.isCatch());
1111:       assertEquals(159784, node1.getSourcePosition());
1112:       assertFalse(node1.isReturn());
1113:       assertFalse(node1.isNumber());
1114:       assertFalse(node1.isWhile());
1115:       assertFalse(node1.isTry());
1116:       assertFalse(node1.isAssign());
1117:       assertFalse(node1.isTrue());
1118:       assertTrue(node1.hasOneChild());
1119:       assertFalse(node1.isDec());
1120:       assertFalse(node1.isDelProp());
1121:       assertFalse(node1.isTypeOf());
1122:       assertFalse(node1.isGetElem());
1123:       assertFalse(node1.isVoid());
1124:       assertFalse(node1.isExprResult());
1125:       assertFalse(node1.isLabelName());
1126:       assertFalse(node1.isArrayLit());
1127:       assertFalse(node1.isAssignAdd());
1128:       assertFalse(node1.isOr());
1129:       assertFalse(node1.isLabel());
1130:       assertFalse(node1.isDefaultCase());
1131:       assertFalse(node1.isNew());
1132:       assertFalse(node1.isEmpty());
1133:       assertFalse(node1.isDo());
1134:       assertFalse(node1.isAdd());
1135:       assertFalse(node1.isHook());
1136:       assertFalse(node1.isThrow());
1137:       assertFalse(node1.isFalse());
1138:       assertEquals(39, node1.getLineno());
1139:       assertFalse(node1.isSwitch());
1140:       assertEquals(40, node1.getCharno());
1141:       assertFalse(node1.isBreak());
1142:       assertFalse(node1.isInstanceOf());
1143:       assertFalse(node1.isAnd());
1144:       assertFalse(node1.isNot());
1145:       assertFalse(node1.isObjectLit());
1146:       assertFalse(node1.isComma());
1147:       assertFalse(node1.isThis());
1148:       assertEquals(1, node1.getChildCount());
1149:       assertFalse(node1.isScript());
1150:       assertFalse(node1.isGetterDef());
1151:       assertFalse(node1.isString());
1152:       assertFalse(node1.isGetProp());
1153:       assertFalse(node1.isCase());
1154:       assertFalse(node1.isCast());
1155:       assertFalse(node1.isFor());
1156:       assertFalse(node1.isDebugger());
1157:       assertFalse(node1.isRegExp());
1158:       assertFalse(node1.isNE());
1159:       assertFalse(node1.isFunction());
1160:       assertFalse(node1.isWith());
1161:       assertFalse(node1.isIf());
1162:       assertTrue(node1.hasChildren());
1163:       assertFalse(node1.isIn());
1164:       assertFalse(node1.isContinue());
1165:       assertEquals((-1707), node1.getType());
1166:       assertFalse(node1.isInc());
1167:       assertFalse(node1.isSetterDef());
1168:       assertFalse(node2.isCall());
1169:       assertFalse(node2.isName());
1170:       assertFalse(node2.isStringKey());
1171:       assertFalse(node2.isBlock());
1172:       assertFalse(node2.isNull());
1173:       assertFalse(node2.isVar());
1174:       assertFalse(node2.isParamList());
1175:       assertFalse(node2.isCatch());
1176:       assertFalse(node2.hasMoreThanOneChild());
1177:       assertEquals(159784, node2.getSourcePosition());
1178:       assertFalse(node2.isReturn());
1179:       assertFalse(node2.isWhile());
1180:       assertFalse(node2.isDebugger());
1181:       assertFalse(node2.isNumber());
1182:       assertFalse(node2.isTry());
1183:       assertFalse(node2.isArrayLit());
1184:       assertFalse(node2.isAssign());
1185:       assertFalse(node2.isLabelName());
1186:       assertTrue(node2.hasOneChild());
1187:       assertFalse(node2.isExprResult());
1188:       assertFalse(node2.isDec());
1189:       assertFalse(node2.isTypeOf());
1190:       assertFalse(node2.isDelProp());
1191:       assertFalse(node2.isVoid());
1192:       assertFalse(node2.isGetElem());
1193:       assertFalse(node2.isDo());
1194:       assertFalse(node2.isAssignAdd());
1195:       assertFalse(node2.isDefaultCase());
1196:       assertFalse(node2.isLabel());
1197:       assertFalse(node2.isTrue());
1198:       assertFalse(node2.isNew());
1199:       assertFalse(node2.isOr());
1200:       assertFalse(node2.isEmpty());
1201:       assertFalse(node2.isAdd());
1202:       assertFalse(node2.isFalse());
1203:       assertEquals(39, node2.getLineno());
1204:       assertFalse(node2.isHook());
1205:       assertFalse(node2.isThrow());
1206:       assertFalse(node2.isComma());
1207:       assertFalse(node2.isThis());
1208:       assertFalse(node2.isSwitch());
1209:       assertFalse(node2.isBreak());
1210:       assertFalse(node2.isInstanceOf());
1211:       assertFalse(node2.isObjectLit());
1212:       assertEquals(40, node2.getCharno());
1213:       assertFalse(node2.isAnd());
1214:       assertFalse(node2.isCase());
1215:       assertFalse(node2.isNot());
1216:       assertEquals(1, node2.getChildCount());
1217:       assertFalse(node2.isGetProp());
1218:       assertFalse(node2.isGetterDef());
1219:       assertFalse(node2.isString());
1220:       assertFalse(node2.isScript());
1221:       assertFalse(node2.isIf());
1222:       assertFalse(node2.isNE());
1223:       assertFalse(node2.isFor());
1224:       assertFalse(node2.isFunction());
1225:       assertFalse(node2.isRegExp());
1226:       assertFalse(node2.isWith());
1227:       assertFalse(node2.isCast());
1228:       assertTrue(node2.hasChildren());
1229:       assertFalse(node2.isContinue());
1230:       assertFalse(node2.isInc());
1231:       assertFalse(node2.isSetterDef());
1232:       assertEquals((-1707), node2.getType());
1233:       assertFalse(node2.isIn());
1234:       assertFalse(node3.isDec());
1235:       assertFalse(node3.isNumber());
1236:       assertFalse(node3.isTypeOf());
1237:       assertFalse(node3.isReturn());
1238:       assertFalse(node3.isOr());
1239:       assertFalse(node3.isAssignAdd());
1240:       assertFalse(node3.isLabel());
1241:       assertFalse(node3.isDo());
1242:       assertFalse(node3.isNew());
1243:       assertFalse(node3.isVar());
1244:       assertFalse(node3.isCast());
1245:       assertFalse(node3.isAnd());
1246:       assertFalse(node3.isContinue());
1247:       assertFalse(node3.isLabelName());
1248:       assertFalse(node3.isThis());
1249:       assertFalse(node3.isSetterDef());
1250:       assertFalse(node3.isParamList());
1251:       assertEquals((-1707), node3.getType());
1252:       assertFalse(node3.isThrow());
1253:       assertFalse(node3.isStringKey());
1254:       assertEquals(159784, node3.getSourcePosition());
1255:       assertFalse(node3.isScript());
1256:       assertFalse(node3.isTry());
1257:       assertFalse(node3.isRegExp());
1258:       assertFalse(node3.isHook());
1259:       assertFalse(node3.isBlock());
1260:       assertFalse(node3.hasMoreThanOneChild());
1261:       assertFalse(node3.isCatch());
1262:       assertFalse(node3.isWith());
1263:       assertFalse(node3.isInstanceOf());
1264:       assertTrue(node3.hasChildren());
1265:       assertFalse(node3.isNE());
1266:       assertFalse(node3.isDelProp());
1267:       assertFalse(node3.isGetterDef());
1268:       assertTrue(node3.hasOneChild());
1269:       assertEquals(1, node3.getChildCount());
1270:       assertFalse(node3.isIf());
1271:       assertFalse(node3.isFor());
1272:       assertFalse(node3.isIn());
1273:       assertFalse(node3.isString());
1274:       assertFalse(node3.isCase());
1275:       assertFalse(node3.isEmpty());
1276:       assertFalse(node3.isInc());
1277:       assertFalse(node3.isFunction());
1278:       assertFalse(node3.isSwitch());
1279:       assertFalse(node3.isDebugger());
1280:       assertFalse(node3.isDefaultCase());
1281:       assertEquals(40, node3.getCharno());
1282:       assertFalse(node3.isArrayLit());
1283:       assertFalse(node3.isFalse());
1284:       assertFalse(node3.isComma());
1285:       assertEquals(39, node3.getLineno());
1286:       assertFalse(node3.isNull());
1287:       assertFalse(node3.isNot());
1288:       assertFalse(node3.isObjectLit());
1289:       assertFalse(node3.isGetProp());
1290:       assertFalse(node3.isAdd());
1291:       assertFalse(node3.isVoid());
1292:       assertFalse(node3.isWhile());
1293:       assertFalse(node3.isTrue());
1294:       assertFalse(node3.isAssign());
1295:       assertFalse(node3.isName());
1296:       assertFalse(node3.isBreak());
1297:       assertFalse(node3.isGetElem());
1298:       assertFalse(node3.isExprResult());
1299:       assertFalse(node3.isCall());
1300:       
1301:       int int0 = node3.getIntProp((-251));
1302:       assertEquals(0, int0);
1303:       assertEquals(40, Node.ORIGINALNAME_PROP);
1304:       assertEquals(57, Node.REFLECTED_OBJECT);
1305:       assertEquals(54, Node.SLASH_V);
1306:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1307:       assertEquals(57, Node.LAST_PROP);
1308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1309:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1310:       assertEquals(30, Node.VAR_ARGS_NAME);
1311:       assertEquals(46, Node.IS_NAMESPACE);
1312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1313:       assertEquals(12, Node.COLUMN_BITS);
1314:       assertEquals(1, Node.DECR_FLAG);
1315:       assertEquals(32, Node.INCRDECR_PROP);
1316:       assertEquals(43, Node.IS_CONSTANT_NAME);
1317:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1318:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1319:       assertEquals(50, Node.FREE_CALL);
1320:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1321:       assertEquals(53, Node.INPUT_ID);
1322:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1323:       assertEquals(47, Node.IS_DISPATCHER);
1324:       assertEquals(2, Node.POST_FLAG);
1325:       assertEquals(4095, Node.COLUMN_MASK);
1326:       assertEquals(55, Node.INFERRED_FUNCTION);
1327:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1328:       assertEquals(48, Node.DIRECTIVES);
1329:       assertEquals(37, Node.OPT_ARG_NAME);
1330:       assertEquals(49, Node.DIRECT_EVAL);
1331:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1332:       assertEquals(56, Node.CHANGE_TIME);
1333:       assertEquals(36, Node.QUOTED_PROP);
1334:       assertEquals(29, Node.JSDOC_INFO_PROP);
1335:       assertEquals(39, Node.EMPTY_BLOCK);
1336:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1337:       assertEquals(52, Node.LENGTH);
1338:       assertEquals(8, Node.FLAG_NO_THROWS);
1339:       assertEquals(12, Node.COLUMN_BITS);
1340:       assertEquals(46, Node.IS_NAMESPACE);
1341:       assertEquals(30, Node.VAR_ARGS_NAME);
1342:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1343:       assertEquals(54, Node.SLASH_V);
1344:       assertEquals(56, Node.CHANGE_TIME);
1345:       assertEquals(49, Node.DIRECT_EVAL);
1346:       assertEquals(37, Node.OPT_ARG_NAME);
1347:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1348:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1349:       assertEquals(50, Node.FREE_CALL);
1350:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1351:       assertEquals(32, Node.INCRDECR_PROP);
1352:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1353:       assertEquals(1, Node.DECR_FLAG);
1354:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1355:       assertEquals(4095, Node.COLUMN_MASK);
1356:       assertEquals(55, Node.INFERRED_FUNCTION);
1357:       assertEquals(36, Node.QUOTED_PROP);
1358:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1359:       assertEquals(48, Node.DIRECTIVES);
1360:       assertEquals(43, Node.IS_CONSTANT_NAME);
1361:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1362:       assertEquals(40, Node.ORIGINALNAME_PROP);
1363:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1364:       assertEquals(29, Node.JSDOC_INFO_PROP);
1365:       assertEquals(47, Node.IS_DISPATCHER);
1366:       assertEquals(52, Node.LENGTH);
1367:       assertEquals(57, Node.REFLECTED_OBJECT);
1368:       assertEquals(2, Node.POST_FLAG);
1369:       assertEquals(8, Node.FLAG_NO_THROWS);
1370:       assertEquals(39, Node.EMPTY_BLOCK);
1371:       assertEquals(53, Node.INPUT_ID);
1372:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1373:       assertEquals(57, Node.LAST_PROP);
1374:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1375:       assertEquals(30, Node.VAR_ARGS_NAME);
1376:       assertEquals(49, Node.DIRECT_EVAL);
1377:       assertEquals(57, Node.LAST_PROP);
1378:       assertEquals(1, Node.DECR_FLAG);
1379:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1380:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1381:       assertEquals(54, Node.SLASH_V);
1382:       assertEquals(12, Node.COLUMN_BITS);
1383:       assertEquals(46, Node.IS_NAMESPACE);
1384:       assertEquals(37, Node.OPT_ARG_NAME);
1385:       assertEquals(40, Node.ORIGINALNAME_PROP);
1386:       assertEquals(50, Node.FREE_CALL);
1387:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1388:       assertEquals(32, Node.INCRDECR_PROP);
1389:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1390:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1391:       assertEquals(43, Node.IS_CONSTANT_NAME);
1392:       assertEquals(36, Node.QUOTED_PROP);
1393:       assertEquals(48, Node.DIRECTIVES);
1394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1395:       assertEquals(4095, Node.COLUMN_MASK);
1396:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1397:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1398:       assertEquals(29, Node.JSDOC_INFO_PROP);
1399:       assertEquals(2, Node.POST_FLAG);
1400:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1401:       assertEquals(56, Node.CHANGE_TIME);
1402:       assertEquals(47, Node.IS_DISPATCHER);
1403:       assertEquals(57, Node.REFLECTED_OBJECT);
1404:       assertEquals(52, Node.LENGTH);
1405:       assertEquals(55, Node.INFERRED_FUNCTION);
1406:       assertEquals(8, Node.FLAG_NO_THROWS);
1407:       assertEquals(39, Node.EMPTY_BLOCK);
1408:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1409:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1410:       assertEquals(53, Node.INPUT_ID);
1411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1412:       assertEquals(43, Node.IS_CONSTANT_NAME);
1413:       assertEquals(36, Node.QUOTED_PROP);
1414:       assertEquals(29, Node.JSDOC_INFO_PROP);
1415:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1417:       assertEquals(55, Node.INFERRED_FUNCTION);
1418:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1419:       assertEquals(53, Node.INPUT_ID);
1420:       assertEquals(2, Node.POST_FLAG);
1421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1423:       assertEquals(46, Node.IS_NAMESPACE);
1424:       assertEquals(47, Node.IS_DISPATCHER);
1425:       assertEquals(30, Node.VAR_ARGS_NAME);
1426:       assertEquals(40, Node.ORIGINALNAME_PROP);
1427:       assertEquals(52, Node.LENGTH);
1428:       assertEquals(54, Node.SLASH_V);
1429:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1430:       assertEquals(57, Node.REFLECTED_OBJECT);
1431:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1432:       assertEquals(50, Node.FREE_CALL);
1433:       assertEquals(1, Node.DECR_FLAG);
1434:       assertEquals(57, Node.LAST_PROP);
1435:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1436:       assertEquals(39, Node.EMPTY_BLOCK);
1437:       assertEquals(48, Node.DIRECTIVES);
1438:       assertEquals(32, Node.INCRDECR_PROP);
1439:       assertEquals(8, Node.FLAG_NO_THROWS);
1440:       assertEquals(12, Node.COLUMN_BITS);
1441:       assertEquals(56, Node.CHANGE_TIME);
1442:       assertEquals(49, Node.DIRECT_EVAL);
1443:       assertEquals(4095, Node.COLUMN_MASK);
1444:       assertEquals(37, Node.OPT_ARG_NAME);
1445:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1446:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1447:       assertNotSame(node0, node1);
1448:       assertNotSame(node0, node2);
1449:       assertNotSame(node0, node3);
1450:       assertSame(node1, node2);
1451:       assertNotSame(node1, node0);
1452:       assertSame(node1, node3);
1453:       assertSame(node2, node3);
1454:       assertNotSame(node2, node0);
1455:       assertSame(node2, node1);
1456:       assertNotSame(node3, node0);
1457:       assertSame(node3, node1);
1458:       assertSame(node3, node2);
1459:       assertFalse(node0.equals((Object)node1));
1460:       assertFalse(node0.equals((Object)node2));
1461:       assertFalse(node0.equals((Object)node3));
1462:       assertFalse(node1.equals((Object)node0));
1463:       assertFalse(node2.equals((Object)node0));
1464:       assertFalse(node3.equals((Object)node0));
1465:       assertFalse(node0.isSetterDef());
1466:       assertFalse(node0.isParamList());
1467:       assertFalse(node0.isCall());
1468:       assertFalse(node0.isCatch());
1469:       assertFalse(node0.isVar());
1470:       assertFalse(node0.isFunction());
1471:       assertEquals(0, node0.getChildCount());
1472:       assertFalse(node0.isRegExp());
1473:       assertFalse(node0.isBlock());
1474:       assertFalse(node0.isDebugger());
1475:       assertFalse(node0.isArrayLit());
1476:       assertFalse(node0.isTry());
1477:       assertFalse(node0.isStringKey());
1478:       assertFalse(node0.isGetterDef());
1479:       assertFalse(node0.isNE());
1480:       assertFalse(node0.isIf());
1481:       assertEquals((-1), node0.getLineno());
1482:       assertFalse(node0.isContinue());
1483:       assertFalse(node0.isCast());
1484:       assertFalse(node0.isFor());
1485:       assertFalse(node0.hasMoreThanOneChild());
1486:       assertFalse(node0.isInc());
1487:       assertEquals((-1707), node0.getType());
1488:       assertFalse(node0.isIn());
1489:       assertFalse(node0.isGetProp());
1490:       assertFalse(node0.isThis());
1491:       assertFalse(node0.isBreak());
1492:       assertFalse(node0.isFalse());
1493:       assertFalse(node0.isThrow());
1494:       assertFalse(node0.isHook());
1495:       assertFalse(node0.isInstanceOf());
1496:       assertFalse(node0.isComma());
1497:       assertFalse(node0.isWith());
1498:       assertEquals((-1), node0.getCharno());
1499:       assertFalse(node0.isScript());
1500:       assertFalse(node0.hasOneChild());
1501:       assertFalse(node0.isSwitch());
1502:       assertFalse(node0.isCase());
1503:       assertFalse(node0.isAnd());
1504:       assertFalse(node0.isString());
1505:       assertEquals((-1), node0.getSourcePosition());
1506:       assertFalse(node0.isNumber());
1507:       assertFalse(node0.isNot());
1508:       assertFalse(node0.isObjectLit());
1509:       assertFalse(node0.isAssignAdd());
1510:       assertFalse(node0.isLabel());
1511:       assertFalse(node0.isReturn());
1512:       assertFalse(node0.isDelProp());
1513:       assertFalse(node0.isLabelName());
1514:       assertFalse(node0.isGetElem());
1515:       assertFalse(node0.isWhile());
1516:       assertFalse(node0.isDec());
1517:       assertFalse(node0.isTypeOf());
1518:       assertFalse(node0.hasChildren());
1519:       assertFalse(node0.isAssign());
1520:       assertFalse(node0.isNew());
1521:       assertFalse(node0.isExprResult());
1522:       assertFalse(node0.isTrue());
1523:       assertFalse(node0.isAdd());
1524:       assertFalse(node0.isDefaultCase());
1525:       assertFalse(node0.isVoid());
1526:       assertFalse(node0.isDo());
1527:       assertFalse(node0.isName());
1528:       assertFalse(node0.isEmpty());
1529:       assertFalse(node0.isNull());
1530:       assertFalse(node0.isOr());
1531:       assertFalse(node1.isVar());
1532:       assertFalse(node1.isStringKey());
1533:       assertFalse(node1.isBlock());
1534:       assertFalse(node1.isNull());
1535:       assertFalse(node1.isParamList());
1536:       assertFalse(node1.isCall());
1537:       assertFalse(node1.isName());
1538:       assertFalse(node1.hasMoreThanOneChild());
1539:       assertFalse(node1.isCatch());
1540:       assertEquals(159784, node1.getSourcePosition());
1541:       assertFalse(node1.isReturn());
1542:       assertFalse(node1.isNumber());
1543:       assertFalse(node1.isWhile());
1544:       assertFalse(node1.isTry());
1545:       assertFalse(node1.isAssign());
1546:       assertFalse(node1.isTrue());
1547:       assertTrue(node1.hasOneChild());
1548:       assertFalse(node1.isDec());
1549:       assertFalse(node1.isDelProp());
1550:       assertFalse(node1.isTypeOf());
1551:       assertFalse(node1.isGetElem());
1552:       assertFalse(node1.isVoid());
1553:       assertFalse(node1.isExprResult());
1554:       assertFalse(node1.isLabelName());
1555:       assertFalse(node1.isArrayLit());
1556:       assertFalse(node1.isAssignAdd());
1557:       assertFalse(node1.isOr());
1558:       assertFalse(node1.isLabel());
1559:       assertFalse(node1.isDefaultCase());
1560:       assertFalse(node1.isNew());
1561:       assertFalse(node1.isEmpty());
1562:       assertFalse(node1.isDo());
1563:       assertFalse(node1.isAdd());
1564:       assertFalse(node1.isHook());
1565:       assertFalse(node1.isThrow());
1566:       assertFalse(node1.isFalse());
1567:       assertEquals(39, node1.getLineno());
1568:       assertFalse(node1.isSwitch());
1569:       assertEquals(40, node1.getCharno());
1570:       assertFalse(node1.isBreak());
1571:       assertFalse(node1.isInstanceOf());
1572:       assertFalse(node1.isAnd());
1573:       assertFalse(node1.isNot());
1574:       assertFalse(node1.isObjectLit());
1575:       assertFalse(node1.isComma());
1576:       assertFalse(node1.isThis());
1577:       assertEquals(1, node1.getChildCount());
1578:       assertFalse(node1.isScript());
1579:       assertFalse(node1.isGetterDef());
1580:       assertFalse(node1.isString());
1581:       assertFalse(node1.isGetProp());
1582:       assertFalse(node1.isCase());
1583:       assertFalse(node1.isCast());
1584:       assertFalse(node1.isFor());
1585:       assertFalse(node1.isDebugger());
1586:       assertFalse(node1.isRegExp());
1587:       assertFalse(node1.isNE());
1588:       assertFalse(node1.isFunction());
1589:       assertFalse(node1.isWith());
1590:       assertFalse(node1.isIf());
1591:       assertTrue(node1.hasChildren());
1592:       assertFalse(node1.isIn());
1593:       assertFalse(node1.isContinue());
1594:       assertEquals((-1707), node1.getType());
1595:       assertFalse(node1.isInc());
1596:       assertFalse(node1.isSetterDef());
1597:       assertFalse(node2.isCall());
1598:       assertFalse(node2.isName());
1599:       assertFalse(node2.isStringKey());
1600:       assertFalse(node2.isBlock());
1601:       assertFalse(node2.isNull());
1602:       assertFalse(node2.isVar());
1603:       assertFalse(node2.isParamList());
1604:       assertFalse(node2.isCatch());
1605:       assertFalse(node2.hasMoreThanOneChild());
1606:       assertEquals(159784, node2.getSourcePosition());
1607:       assertFalse(node2.isReturn());
1608:       assertFalse(node2.isWhile());
1609:       assertFalse(node2.isDebugger());
1610:       assertFalse(node2.isNumber());
1611:       assertFalse(node2.isTry());
1612:       assertFalse(node2.isArrayLit());
1613:       assertFalse(node2.isAssign());
1614:       assertFalse(node2.isLabelName());
1615:       assertTrue(node2.hasOneChild());
1616:       assertFalse(node2.isExprResult());
1617:       assertFalse(node2.isDec());
1618:       assertFalse(node2.isTypeOf());
1619:       assertFalse(node2.isDelProp());
1620:       assertFalse(node2.isVoid());
1621:       assertFalse(node2.isGetElem());
1622:       assertFalse(node2.isDo());
1623:       assertFalse(node2.isAssignAdd());
1624:       assertFalse(node2.isDefaultCase());
1625:       assertFalse(node2.isLabel());
1626:       assertFalse(node2.isTrue());
1627:       assertFalse(node2.isNew());
1628:       assertFalse(node2.isOr());
1629:       assertFalse(node2.isEmpty());
1630:       assertFalse(node2.isAdd());
1631:       assertFalse(node2.isFalse());
1632:       assertEquals(39, node2.getLineno());
1633:       assertFalse(node2.isHook());
1634:       assertFalse(node2.isThrow());
1635:       assertFalse(node2.isComma());
1636:       assertFalse(node2.isThis());
1637:       assertFalse(node2.isSwitch());
1638:       assertFalse(node2.isBreak());
1639:       assertFalse(node2.isInstanceOf());
1640:       assertFalse(node2.isObjectLit());
1641:       assertEquals(40, node2.getCharno());
1642:       assertFalse(node2.isAnd());
1643:       assertFalse(node2.isCase());
1644:       assertFalse(node2.isNot());
1645:       assertEquals(1, node2.getChildCount());
1646:       assertFalse(node2.isGetProp());
1647:       assertFalse(node2.isGetterDef());
1648:       assertFalse(node2.isString());
1649:       assertFalse(node2.isScript());
1650:       assertFalse(node2.isIf());
1651:       assertFalse(node2.isNE());
1652:       assertFalse(node2.isFor());
1653:       assertFalse(node2.isFunction());
1654:       assertFalse(node2.isRegExp());
1655:       assertFalse(node2.isWith());
1656:       assertFalse(node2.isCast());
1657:       assertTrue(node2.hasChildren());
1658:       assertFalse(node2.isContinue());
1659:       assertFalse(node2.isInc());
1660:       assertFalse(node2.isSetterDef());
1661:       assertEquals((-1707), node2.getType());
1662:       assertFalse(node2.isIn());
1663:       assertFalse(node3.isDec());
1664:       assertFalse(node3.isNumber());
1665:       assertFalse(node3.isTypeOf());
1666:       assertFalse(node3.isReturn());
1667:       assertFalse(node3.isOr());
1668:       assertFalse(node3.isAssignAdd());
1669:       assertFalse(node3.isLabel());
1670:       assertFalse(node3.isDo());
1671:       assertFalse(node3.isNew());
1672:       assertFalse(node3.isVar());
1673:       assertFalse(node3.isCast());
1674:       assertFalse(node3.isAnd());
1675:       assertFalse(node3.isContinue());
1676:       assertFalse(node3.isLabelName());
1677:       assertFalse(node3.isThis());
1678:       assertFalse(node3.isSetterDef());
1679:       assertFalse(node3.isParamList());
1680:       assertEquals((-1707), node3.getType());
1681:       assertFalse(node3.isThrow());
1682:       assertFalse(node3.isStringKey());
1683:       assertEquals(159784, node3.getSourcePosition());
1684:       assertFalse(node3.isScript());
1685:       assertFalse(node3.isTry());
1686:       assertFalse(node3.isRegExp());
1687:       assertFalse(node3.isHook());
1688:       assertFalse(node3.isBlock());
1689:       assertFalse(node3.hasMoreThanOneChild());
1690:       assertFalse(node3.isCatch());
1691:       assertFalse(node3.isWith());
1692:       assertFalse(node3.isInstanceOf());
1693:       assertTrue(node3.hasChildren());
1694:       assertFalse(node3.isNE());
1695:       assertFalse(node3.isDelProp());
1696:       assertFalse(node3.isGetterDef());
1697:       assertTrue(node3.hasOneChild());
1698:       assertEquals(1, node3.getChildCount());
1699:       assertFalse(node3.isIf());
1700:       assertFalse(node3.isFor());
1701:       assertFalse(node3.isIn());
1702:       assertFalse(node3.isString());
1703:       assertFalse(node3.isCase());
1704:       assertFalse(node3.isEmpty());
1705:       assertFalse(node3.isInc());
1706:       assertFalse(node3.isFunction());
1707:       assertFalse(node3.isSwitch());
1708:       assertFalse(node3.isDebugger());
1709:       assertFalse(node3.isDefaultCase());
1710:       assertEquals(40, node3.getCharno());
1711:       assertFalse(node3.isArrayLit());
1712:       assertFalse(node3.isFalse());
1713:       assertFalse(node3.isComma());
1714:       assertEquals(39, node3.getLineno());
1715:       assertFalse(node3.isNull());
1716:       assertFalse(node3.isNot());
1717:       assertFalse(node3.isObjectLit());
1718:       assertFalse(node3.isGetProp());
1719:       assertFalse(node3.isAdd());
1720:       assertFalse(node3.isVoid());
1721:       assertFalse(node3.isWhile());
1722:       assertFalse(node3.isTrue());
1723:       assertFalse(node3.isAssign());
1724:       assertFalse(node3.isName());
1725:       assertFalse(node3.isBreak());
1726:       assertFalse(node3.isGetElem());
1727:       assertFalse(node3.isExprResult());
1728:       assertFalse(node3.isCall());
1729:       
1730:       String string0 = null;
1731:       // Undeclared exception!
1732:       try { 
1733:         Node.newString((String) null, 55, 16043852);
1734:         fail("Expecting exception: IllegalArgumentException");
1735:       
1736:       } catch(IllegalArgumentException e) {
1737:          //
1738:          // StringNode: str is null
1739:          //
1740:          verifyException("com.google.javascript.rhino.Node$StringNode", e);
1741:       }
1742:   }
1743: }
RegularFileObject[/tmp/EvoSuite_94_1628157878717/com/google/javascript/rhino/Node_94_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_94_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_94_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_94_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:39.134 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

Node node0 = new Node((-1707));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals((-1707), node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());

Node node1 = new Node((-1707), node0, node0, node0, 39, 40);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals((-1707), node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals(159784, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isAssign());
assertFalse(node1.isTrue());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(39, node1.getLineno());
assertFalse(node1.isSwitch());
assertEquals(40, node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertEquals((-1707), node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

Iterable<Node> iterable0 = new HashSet<Node>();
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);

boolean boolean1 = node1.mayMutateGlobalStateOrThrow();
assertTrue(boolean1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals((-1707), node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals(159784, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isAssign());
assertFalse(node1.isTrue());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(39, node1.getLineno());
assertFalse(node1.isSwitch());
assertEquals(40, node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertEquals((-1707), node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

Node node2 = node1.clonePropsFrom(node0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertSame(node2, node1);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals((-1707), node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals(159784, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isAssign());
assertFalse(node1.isTrue());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(39, node1.getLineno());
assertFalse(node1.isSwitch());
assertEquals(40, node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertEquals((-1707), node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(159784, node2.getSourcePosition());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isDebugger());
assertFalse(node2.isNumber());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertTrue(node2.hasOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isTrue());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isFalse());
assertEquals(39, node2.getLineno());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertEquals(40, node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isNot());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertTrue(node2.hasChildren());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertEquals((-1707), node2.getType());
assertFalse(node2.isIn());

Node node3 = node2.clonePropsFrom(node1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node0, node3);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertSame(node2, node3);
assertNotSame(node2, node0);
assertSame(node2, node1);
assertNotSame(node3, node0);
assertSame(node3, node1);
assertSame(node3, node2);
assertNotNull(node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals((-1707), node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals(159784, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isAssign());
assertFalse(node1.isTrue());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(39, node1.getLineno());
assertFalse(node1.isSwitch());
assertEquals(40, node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertEquals((-1707), node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(159784, node2.getSourcePosition());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isDebugger());
assertFalse(node2.isNumber());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertTrue(node2.hasOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isTrue());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isFalse());
assertEquals(39, node2.getLineno());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertEquals(40, node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isNot());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertTrue(node2.hasChildren());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertEquals((-1707), node2.getType());
assertFalse(node2.isIn());
assertFalse(node3.isDec());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isLabelName());
assertFalse(node3.isThis());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertEquals((-1707), node3.getType());
assertFalse(node3.isThrow());
assertFalse(node3.isStringKey());
assertEquals(159784, node3.getSourcePosition());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertTrue(node3.hasChildren());
assertFalse(node3.isNE());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertTrue(node3.hasOneChild());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isFunction());
assertFalse(node3.isSwitch());
assertFalse(node3.isDebugger());
assertFalse(node3.isDefaultCase());
assertEquals(40, node3.getCharno());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertEquals(39, node3.getLineno());
assertFalse(node3.isNull());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isAdd());
assertFalse(node3.isVoid());
assertFalse(node3.isWhile());
assertFalse(node3.isTrue());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());

int int0 = node3.getIntProp((-251));
assertEquals(0, int0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node0, node3);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertSame(node2, node3);
assertNotSame(node2, node0);
assertSame(node2, node1);
assertNotSame(node3, node0);
assertSame(node3, node1);
assertSame(node3, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals((-1707), node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertEquals(159784, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isAssign());
assertFalse(node1.isTrue());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(39, node1.getLineno());
assertFalse(node1.isSwitch());
assertEquals(40, node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertEquals((-1707), node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(159784, node2.getSourcePosition());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isDebugger());
assertFalse(node2.isNumber());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertTrue(node2.hasOneChild());
assertFalse(node2.isExprResult());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isTrue());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isFalse());
assertEquals(39, node2.getLineno());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertEquals(40, node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isNot());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertTrue(node2.hasChildren());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertEquals((-1707), node2.getType());
assertFalse(node2.isIn());
assertFalse(node3.isDec());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isLabelName());
assertFalse(node3.isThis());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertEquals((-1707), node3.getType());
assertFalse(node3.isThrow());
assertFalse(node3.isStringKey());
assertEquals(159784, node3.getSourcePosition());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertTrue(node3.hasChildren());
assertFalse(node3.isNE());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertTrue(node3.hasOneChild());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isFunction());
assertFalse(node3.isSwitch());
assertFalse(node3.isDebugger());
assertFalse(node3.isDefaultCase());
assertEquals(40, node3.getCharno());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertEquals(39, node3.getLineno());
assertFalse(node3.isNull());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isAdd());
assertFalse(node3.isVoid());
assertFalse(node3.isWhile());
assertFalse(node3.isTrue());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());

String string0 = null;
Node.newString((String) null, 55, 16043852);

[MASTER] 10:04:39.472 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_99_1628157879369/com/google/javascript/rhino/Node_99_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_99_1628157879369/com/google/javascript/rhino/Node_99_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:39.472 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:39.472 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:39.473 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 665
[MASTER] 10:04:39.474 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_99_1628157879369/com/google/javascript/rhino/Node_99_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:39 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.FileSystemHandling;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_99_tmp__ESTest extends Node_99_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
22:       assertNotNull(fileSystemHandling0);
23:       
24:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
25:       assertTrue(boolean0);
26:       
27:       Node node0 = Node.newString("com.google.javascript.rhino.jstype.NumberType", 117, 117);
28:       assertEquals(40, Node.ORIGINALNAME_PROP);
29:       assertEquals(57, Node.REFLECTED_OBJECT);
30:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
31:       assertEquals(50, Node.FREE_CALL);
32:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
33:       assertEquals(52, Node.LENGTH);
34:       assertEquals(8, Node.FLAG_NO_THROWS);
35:       assertEquals(48, Node.DIRECTIVES);
36:       assertEquals(54, Node.SLASH_V);
37:       assertEquals(49, Node.DIRECT_EVAL);
38:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
39:       assertEquals(55, Node.INFERRED_FUNCTION);
40:       assertEquals(30, Node.VAR_ARGS_NAME);
41:       assertEquals(2, Node.POST_FLAG);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(53, Node.INPUT_ID);
44:       assertEquals(15, Node.NO_SIDE_EFFECTS);
45:       assertEquals(39, Node.EMPTY_BLOCK);
46:       assertEquals(47, Node.IS_DISPATCHER);
47:       assertEquals(57, Node.LAST_PROP);
48:       assertEquals(29, Node.JSDOC_INFO_PROP);
49:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
50:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
51:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
52:       assertEquals(37, Node.OPT_ARG_NAME);
53:       assertEquals(36, Node.QUOTED_PROP);
54:       assertEquals(46, Node.IS_NAMESPACE);
55:       assertEquals(43, Node.IS_CONSTANT_NAME);
56:       assertEquals(56, Node.CHANGE_TIME);
57:       assertEquals(1, Node.DECR_FLAG);
58:       assertEquals(51, Node.STATIC_SOURCE_FILE);
59:       assertEquals(12, Node.COLUMN_BITS);
60:       assertEquals(4095, Node.COLUMN_MASK);
61:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
62:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
63:       assertEquals(32, Node.INCRDECR_PROP);
64:       assertNotNull(node0);
65:       assertFalse(node0.isInstanceOf());
66:       assertEquals(479349, node0.getSourcePosition());
67:       assertFalse(node0.isObjectLit());
68:       assertFalse(node0.isComma());
69:       assertFalse(node0.isNot());
70:       assertFalse(node0.isWith());
71:       assertFalse(node0.isBreak());
72:       assertFalse(node0.isExprResult());
73:       assertFalse(node0.isAnd());
74:       assertFalse(node0.isCast());
75:       assertFalse(node0.isFalse());
76:       assertEquals(117, node0.getLineno());
77:       assertFalse(node0.isInc());
78:       assertFalse(node0.isThrow());
79:       assertFalse(node0.isAssignAdd());
80:       assertFalse(node0.isReturn());
81:       assertFalse(node0.isContinue());
82:       assertFalse(node0.isOr());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.isDelProp());
85:       assertFalse(node0.isGetElem());
86:       assertFalse(node0.isCall());
87:       assertFalse(node0.isDebugger());
88:       assertFalse(node0.isAssign());
89:       assertFalse(node0.hasChildren());
90:       assertFalse(node0.isDec());
91:       assertFalse(node0.isWhile());
92:       assertFalse(node0.isGetProp());
93:       assertEquals(117, node0.getCharno());
94:       assertEquals(0, node0.getChildCount());
95:       assertFalse(node0.isCatch());
96:       assertFalse(node0.isTrue());
97:       assertFalse(node0.isNull());
98:       assertFalse(node0.isVoid());
99:       assertFalse(node0.isStringKey());
100:       assertFalse(node0.isParamList());
101:       assertFalse(node0.isName());
102:       assertFalse(node0.isVar());
103:       assertFalse(node0.isAdd());
104:       assertFalse(node0.isArrayLit());
105:       assertFalse(node0.isFunction());
106:       assertFalse(node0.isDefaultCase());
107:       assertFalse(node0.isEmpty());
108:       assertFalse(node0.isSetterDef());
109:       assertEquals(40, node0.getType());
110:       assertFalse(node0.isNew());
111:       assertFalse(node0.isDo());
112:       assertFalse(node0.isIn());
113:       assertFalse(node0.isLabel());
114:       assertFalse(node0.hasMoreThanOneChild());
115:       assertFalse(node0.isNumber());
116:       assertFalse(node0.isIf());
117:       assertFalse(node0.isGetterDef());
118:       assertFalse(node0.isNE());
119:       assertFalse(node0.isLabelName());
120:       assertFalse(node0.isSwitch());
121:       assertFalse(node0.hasOneChild());
122:       assertFalse(node0.isHook());
123:       assertFalse(node0.isBlock());
124:       assertFalse(node0.isRegExp());
125:       assertFalse(node0.isFor());
126:       assertFalse(node0.isScript());
127:       assertFalse(node0.isThis());
128:       assertFalse(node0.isCase());
129:       assertFalse(node0.isTry());
130:       assertTrue(node0.isString());
131:       
132:       node0.detachChildren();
133:       assertEquals(40, Node.ORIGINALNAME_PROP);
134:       assertEquals(57, Node.REFLECTED_OBJECT);
135:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
136:       assertEquals(50, Node.FREE_CALL);
137:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
138:       assertEquals(52, Node.LENGTH);
139:       assertEquals(8, Node.FLAG_NO_THROWS);
140:       assertEquals(48, Node.DIRECTIVES);
141:       assertEquals(54, Node.SLASH_V);
142:       assertEquals(49, Node.DIRECT_EVAL);
143:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
144:       assertEquals(55, Node.INFERRED_FUNCTION);
145:       assertEquals(30, Node.VAR_ARGS_NAME);
146:       assertEquals(2, Node.POST_FLAG);
147:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
148:       assertEquals(53, Node.INPUT_ID);
149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
150:       assertEquals(39, Node.EMPTY_BLOCK);
151:       assertEquals(47, Node.IS_DISPATCHER);
152:       assertEquals(57, Node.LAST_PROP);
153:       assertEquals(29, Node.JSDOC_INFO_PROP);
154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
155:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
157:       assertEquals(37, Node.OPT_ARG_NAME);
158:       assertEquals(36, Node.QUOTED_PROP);
159:       assertEquals(46, Node.IS_NAMESPACE);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(56, Node.CHANGE_TIME);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertEquals(51, Node.STATIC_SOURCE_FILE);
164:       assertEquals(12, Node.COLUMN_BITS);
165:       assertEquals(4095, Node.COLUMN_MASK);
166:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
167:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
168:       assertEquals(32, Node.INCRDECR_PROP);
169:       assertFalse(node0.isInstanceOf());
170:       assertEquals(479349, node0.getSourcePosition());
171:       assertFalse(node0.isObjectLit());
172:       assertFalse(node0.isComma());
173:       assertFalse(node0.isNot());
174:       assertFalse(node0.isWith());
175:       assertFalse(node0.isBreak());
176:       assertFalse(node0.isExprResult());
177:       assertFalse(node0.isAnd());
178:       assertFalse(node0.isCast());
179:       assertFalse(node0.isFalse());
180:       assertEquals(117, node0.getLineno());
181:       assertFalse(node0.isInc());
182:       assertFalse(node0.isThrow());
183:       assertFalse(node0.isAssignAdd());
184:       assertFalse(node0.isReturn());
185:       assertFalse(node0.isContinue());
186:       assertFalse(node0.isOr());
187:       assertFalse(node0.isTypeOf());
188:       assertFalse(node0.isDelProp());
189:       assertFalse(node0.isGetElem());
190:       assertFalse(node0.isCall());
191:       assertFalse(node0.isDebugger());
192:       assertFalse(node0.isAssign());
193:       assertFalse(node0.hasChildren());
194:       assertFalse(node0.isDec());
195:       assertFalse(node0.isWhile());
196:       assertFalse(node0.isGetProp());
197:       assertEquals(117, node0.getCharno());
198:       assertEquals(0, node0.getChildCount());
199:       assertFalse(node0.isCatch());
200:       assertFalse(node0.isTrue());
201:       assertFalse(node0.isNull());
202:       assertFalse(node0.isVoid());
203:       assertFalse(node0.isStringKey());
204:       assertFalse(node0.isParamList());
205:       assertFalse(node0.isName());
206:       assertFalse(node0.isVar());
207:       assertFalse(node0.isAdd());
208:       assertFalse(node0.isArrayLit());
209:       assertFalse(node0.isFunction());
210:       assertFalse(node0.isDefaultCase());
211:       assertFalse(node0.isEmpty());
212:       assertFalse(node0.isSetterDef());
213:       assertEquals(40, node0.getType());
214:       assertFalse(node0.isNew());
215:       assertFalse(node0.isDo());
216:       assertFalse(node0.isIn());
217:       assertFalse(node0.isLabel());
218:       assertFalse(node0.hasMoreThanOneChild());
219:       assertFalse(node0.isNumber());
220:       assertFalse(node0.isIf());
221:       assertFalse(node0.isGetterDef());
222:       assertFalse(node0.isNE());
223:       assertFalse(node0.isLabelName());
224:       assertFalse(node0.isSwitch());
225:       assertFalse(node0.hasOneChild());
226:       assertFalse(node0.isHook());
227:       assertFalse(node0.isBlock());
228:       assertFalse(node0.isRegExp());
229:       assertFalse(node0.isFor());
230:       assertFalse(node0.isScript());
231:       assertFalse(node0.isThis());
232:       assertFalse(node0.isCase());
233:       assertFalse(node0.isTry());
234:       assertTrue(node0.isString());
235:       
236:       Node node1 = Node.newString("", 12, 54);
237:       assertEquals(40, Node.ORIGINALNAME_PROP);
238:       assertEquals(50, Node.FREE_CALL);
239:       assertEquals(57, Node.REFLECTED_OBJECT);
240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
241:       assertEquals(54, Node.SLASH_V);
242:       assertEquals(8, Node.FLAG_NO_THROWS);
243:       assertEquals(39, Node.EMPTY_BLOCK);
244:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
245:       assertEquals(52, Node.LENGTH);
246:       assertEquals(15, Node.NO_SIDE_EFFECTS);
247:       assertEquals(55, Node.INFERRED_FUNCTION);
248:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
249:       assertEquals(51, Node.STATIC_SOURCE_FILE);
250:       assertEquals(30, Node.VAR_ARGS_NAME);
251:       assertEquals(46, Node.IS_NAMESPACE);
252:       assertEquals(57, Node.LAST_PROP);
253:       assertEquals(43, Node.IS_CONSTANT_NAME);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(47, Node.IS_DISPATCHER);
256:       assertEquals(56, Node.CHANGE_TIME);
257:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
258:       assertEquals(36, Node.QUOTED_PROP);
259:       assertEquals(29, Node.JSDOC_INFO_PROP);
260:       assertEquals(53, Node.INPUT_ID);
261:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
262:       assertEquals(49, Node.DIRECT_EVAL);
263:       assertEquals(1, Node.DECR_FLAG);
264:       assertEquals(32, Node.INCRDECR_PROP);
265:       assertEquals(12, Node.COLUMN_BITS);
266:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
267:       assertEquals(37, Node.OPT_ARG_NAME);
268:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
269:       assertEquals(48, Node.DIRECTIVES);
270:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
271:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
272:       assertEquals(4095, Node.COLUMN_MASK);
273:       assertNotSame(node1, node0);
274:       assertNotNull(node1);
275:       assertFalse(node1.equals((Object)node0));
276:       assertFalse(node1.isInstanceOf());
277:       assertFalse(node1.isThis());
278:       assertFalse(node1.isAnd());
279:       assertFalse(node1.isScript());
280:       assertFalse(node1.isNot());
281:       assertFalse(node1.isGetProp());
282:       assertFalse(node1.isObjectLit());
283:       assertFalse(node1.isThrow());
284:       assertFalse(node1.isSwitch());
285:       assertFalse(node1.isLabelName());
286:       assertFalse(node1.isFalse());
287:       assertFalse(node1.isCast());
288:       assertFalse(node1.isIn());
289:       assertFalse(node1.isNE());
290:       assertFalse(node1.isGetterDef());
291:       assertFalse(node1.isNumber());
292:       assertEquals(49206, node1.getSourcePosition());
293:       assertEquals(54, node1.getCharno());
294:       assertFalse(node1.isCase());
295:       assertFalse(node1.isInc());
296:       assertFalse(node1.isHook());
297:       assertFalse(node1.isTry());
298:       assertFalse(node1.hasOneChild());
299:       assertTrue(node1.isString());
300:       assertFalse(node1.isBlock());
301:       assertFalse(node1.isFor());
302:       assertFalse(node1.isIf());
303:       assertFalse(node1.isRegExp());
304:       assertFalse(node1.hasMoreThanOneChild());
305:       assertFalse(node1.isCatch());
306:       assertFalse(node1.isWith());
307:       assertEquals(0, node1.getChildCount());
308:       assertEquals(40, node1.getType());
309:       assertFalse(node1.isParamList());
310:       assertFalse(node1.isDefaultCase());
311:       assertFalse(node1.isNull());
312:       assertFalse(node1.isSetterDef());
313:       assertFalse(node1.isDebugger());
314:       assertFalse(node1.isNew());
315:       assertFalse(node1.isArrayLit());
316:       assertFalse(node1.isStringKey());
317:       assertFalse(node1.isVar());
318:       assertEquals(12, node1.getLineno());
319:       assertFalse(node1.isContinue());
320:       assertFalse(node1.isFunction());
321:       assertFalse(node1.isReturn());
322:       assertFalse(node1.isOr());
323:       assertFalse(node1.isLabel());
324:       assertFalse(node1.isAssignAdd());
325:       assertFalse(node1.isWhile());
326:       assertFalse(node1.isDo());
327:       assertFalse(node1.isAdd());
328:       assertFalse(node1.isEmpty());
329:       assertFalse(node1.isVoid());
330:       assertFalse(node1.isName());
331:       assertFalse(node1.isTrue());
332:       assertFalse(node1.isBreak());
333:       assertFalse(node1.isDec());
334:       assertFalse(node1.hasChildren());
335:       assertFalse(node1.isDelProp());
336:       assertFalse(node1.isTypeOf());
337:       assertFalse(node1.isAssign());
338:       assertFalse(node1.isComma());
339:       assertFalse(node1.isGetElem());
340:       assertFalse(node1.isExprResult());
341:       assertFalse(node1.isCall());
342:       
343:       boolean boolean1 = node0.isEquivalentTo(node1, true, true, true);
344:       assertFalse(boolean1);
345:       assertEquals(40, Node.ORIGINALNAME_PROP);
346:       assertEquals(57, Node.REFLECTED_OBJECT);
347:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
348:       assertEquals(50, Node.FREE_CALL);
349:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
350:       assertEquals(52, Node.LENGTH);
351:       assertEquals(8, Node.FLAG_NO_THROWS);
352:       assertEquals(48, Node.DIRECTIVES);
353:       assertEquals(54, Node.SLASH_V);
354:       assertEquals(49, Node.DIRECT_EVAL);
355:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
356:       assertEquals(55, Node.INFERRED_FUNCTION);
357:       assertEquals(30, Node.VAR_ARGS_NAME);
358:       assertEquals(2, Node.POST_FLAG);
359:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
360:       assertEquals(53, Node.INPUT_ID);
361:       assertEquals(15, Node.NO_SIDE_EFFECTS);
362:       assertEquals(39, Node.EMPTY_BLOCK);
363:       assertEquals(47, Node.IS_DISPATCHER);
364:       assertEquals(57, Node.LAST_PROP);
365:       assertEquals(29, Node.JSDOC_INFO_PROP);
366:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
367:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
368:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
369:       assertEquals(37, Node.OPT_ARG_NAME);
370:       assertEquals(36, Node.QUOTED_PROP);
371:       assertEquals(46, Node.IS_NAMESPACE);
372:       assertEquals(43, Node.IS_CONSTANT_NAME);
373:       assertEquals(56, Node.CHANGE_TIME);
374:       assertEquals(1, Node.DECR_FLAG);
375:       assertEquals(51, Node.STATIC_SOURCE_FILE);
376:       assertEquals(12, Node.COLUMN_BITS);
377:       assertEquals(4095, Node.COLUMN_MASK);
378:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
379:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
380:       assertEquals(32, Node.INCRDECR_PROP);
381:       assertEquals(40, Node.ORIGINALNAME_PROP);
382:       assertEquals(50, Node.FREE_CALL);
383:       assertEquals(57, Node.REFLECTED_OBJECT);
384:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
385:       assertEquals(54, Node.SLASH_V);
386:       assertEquals(8, Node.FLAG_NO_THROWS);
387:       assertEquals(39, Node.EMPTY_BLOCK);
388:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
389:       assertEquals(52, Node.LENGTH);
390:       assertEquals(15, Node.NO_SIDE_EFFECTS);
391:       assertEquals(55, Node.INFERRED_FUNCTION);
392:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
393:       assertEquals(51, Node.STATIC_SOURCE_FILE);
394:       assertEquals(30, Node.VAR_ARGS_NAME);
395:       assertEquals(46, Node.IS_NAMESPACE);
396:       assertEquals(57, Node.LAST_PROP);
397:       assertEquals(43, Node.IS_CONSTANT_NAME);
398:       assertEquals(2, Node.POST_FLAG);
399:       assertEquals(47, Node.IS_DISPATCHER);
400:       assertEquals(56, Node.CHANGE_TIME);
401:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
402:       assertEquals(36, Node.QUOTED_PROP);
403:       assertEquals(29, Node.JSDOC_INFO_PROP);
404:       assertEquals(53, Node.INPUT_ID);
405:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
406:       assertEquals(49, Node.DIRECT_EVAL);
407:       assertEquals(1, Node.DECR_FLAG);
408:       assertEquals(32, Node.INCRDECR_PROP);
409:       assertEquals(12, Node.COLUMN_BITS);
410:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
411:       assertEquals(37, Node.OPT_ARG_NAME);
412:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
413:       assertEquals(48, Node.DIRECTIVES);
414:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
415:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
416:       assertEquals(4095, Node.COLUMN_MASK);
417:       assertNotSame(node0, node1);
418:       assertNotSame(node1, node0);
419:       assertFalse(node0.equals((Object)node1));
420:       assertFalse(node1.equals((Object)node0));
421:       assertFalse(boolean1 == boolean0);
422:       assertFalse(node0.isInstanceOf());
423:       assertEquals(479349, node0.getSourcePosition());
424:       assertFalse(node0.isObjectLit());
425:       assertFalse(node0.isComma());
426:       assertFalse(node0.isNot());
427:       assertFalse(node0.isWith());
428:       assertFalse(node0.isBreak());
429:       assertFalse(node0.isExprResult());
430:       assertFalse(node0.isAnd());
431:       assertFalse(node0.isCast());
432:       assertFalse(node0.isFalse());
433:       assertEquals(117, node0.getLineno());
434:       assertFalse(node0.isInc());
435:       assertFalse(node0.isThrow());
436:       assertFalse(node0.isAssignAdd());
437:       assertFalse(node0.isReturn());
438:       assertFalse(node0.isContinue());
439:       assertFalse(node0.isOr());
440:       assertFalse(node0.isTypeOf());
441:       assertFalse(node0.isDelProp());
442:       assertFalse(node0.isGetElem());
443:       assertFalse(node0.isCall());
444:       assertFalse(node0.isDebugger());
445:       assertFalse(node0.isAssign());
446:       assertFalse(node0.hasChildren());
447:       assertFalse(node0.isDec());
448:       assertFalse(node0.isWhile());
449:       assertFalse(node0.isGetProp());
450:       assertEquals(117, node0.getCharno());
451:       assertEquals(0, node0.getChildCount());
452:       assertFalse(node0.isCatch());
453:       assertFalse(node0.isTrue());
454:       assertFalse(node0.isNull());
455:       assertFalse(node0.isVoid());
456:       assertFalse(node0.isStringKey());
457:       assertFalse(node0.isParamList());
458:       assertFalse(node0.isName());
459:       assertFalse(node0.isVar());
460:       assertFalse(node0.isAdd());
461:       assertFalse(node0.isArrayLit());
462:       assertFalse(node0.isFunction());
463:       assertFalse(node0.isDefaultCase());
464:       assertFalse(node0.isEmpty());
465:       assertFalse(node0.isSetterDef());
466:       assertEquals(40, node0.getType());
467:       assertFalse(node0.isNew());
468:       assertFalse(node0.isDo());
469:       assertFalse(node0.isIn());
470:       assertFalse(node0.isLabel());
471:       assertFalse(node0.hasMoreThanOneChild());
472:       assertFalse(node0.isNumber());
473:       assertFalse(node0.isIf());
474:       assertFalse(node0.isGetterDef());
475:       assertFalse(node0.isNE());
476:       assertFalse(node0.isLabelName());
477:       assertFalse(node0.isSwitch());
478:       assertFalse(node0.hasOneChild());
479:       assertFalse(node0.isHook());
480:       assertFalse(node0.isBlock());
481:       assertFalse(node0.isRegExp());
482:       assertFalse(node0.isFor());
483:       assertFalse(node0.isScript());
484:       assertFalse(node0.isThis());
485:       assertFalse(node0.isCase());
486:       assertFalse(node0.isTry());
487:       assertTrue(node0.isString());
488:       assertFalse(node1.isInstanceOf());
489:       assertFalse(node1.isThis());
490:       assertFalse(node1.isAnd());
491:       assertFalse(node1.isScript());
492:       assertFalse(node1.isNot());
493:       assertFalse(node1.isGetProp());
494:       assertFalse(node1.isObjectLit());
495:       assertFalse(node1.isThrow());
496:       assertFalse(node1.isSwitch());
497:       assertFalse(node1.isLabelName());
498:       assertFalse(node1.isFalse());
499:       assertFalse(node1.isCast());
500:       assertFalse(node1.isIn());
501:       assertFalse(node1.isNE());
502:       assertFalse(node1.isGetterDef());
503:       assertFalse(node1.isNumber());
504:       assertEquals(49206, node1.getSourcePosition());
505:       assertEquals(54, node1.getCharno());
506:       assertFalse(node1.isCase());
507:       assertFalse(node1.isInc());
508:       assertFalse(node1.isHook());
509:       assertFalse(node1.isTry());
510:       assertFalse(node1.hasOneChild());
511:       assertTrue(node1.isString());
512:       assertFalse(node1.isBlock());
513:       assertFalse(node1.isFor());
514:       assertFalse(node1.isIf());
515:       assertFalse(node1.isRegExp());
516:       assertFalse(node1.hasMoreThanOneChild());
517:       assertFalse(node1.isCatch());
518:       assertFalse(node1.isWith());
519:       assertEquals(0, node1.getChildCount());
520:       assertEquals(40, node1.getType());
521:       assertFalse(node1.isParamList());
522:       assertFalse(node1.isDefaultCase());
523:       assertFalse(node1.isNull());
524:       assertFalse(node1.isSetterDef());
525:       assertFalse(node1.isDebugger());
526:       assertFalse(node1.isNew());
527:       assertFalse(node1.isArrayLit());
528:       assertFalse(node1.isStringKey());
529:       assertFalse(node1.isVar());
530:       assertEquals(12, node1.getLineno());
531:       assertFalse(node1.isContinue());
532:       assertFalse(node1.isFunction());
533:       assertFalse(node1.isReturn());
534:       assertFalse(node1.isOr());
535:       assertFalse(node1.isLabel());
536:       assertFalse(node1.isAssignAdd());
537:       assertFalse(node1.isWhile());
538:       assertFalse(node1.isDo());
539:       assertFalse(node1.isAdd());
540:       assertFalse(node1.isEmpty());
541:       assertFalse(node1.isVoid());
542:       assertFalse(node1.isName());
543:       assertFalse(node1.isTrue());
544:       assertFalse(node1.isBreak());
545:       assertFalse(node1.isDec());
546:       assertFalse(node1.hasChildren());
547:       assertFalse(node1.isDelProp());
548:       assertFalse(node1.isTypeOf());
549:       assertFalse(node1.isAssign());
550:       assertFalse(node1.isComma());
551:       assertFalse(node1.isGetElem());
552:       assertFalse(node1.isExprResult());
553:       assertFalse(node1.isCall());
554:       
555:       boolean boolean2 = node1.isDo();
556:       assertFalse(boolean2);
557:       assertEquals(40, Node.ORIGINALNAME_PROP);
558:       assertEquals(50, Node.FREE_CALL);
559:       assertEquals(57, Node.REFLECTED_OBJECT);
560:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
561:       assertEquals(54, Node.SLASH_V);
562:       assertEquals(8, Node.FLAG_NO_THROWS);
563:       assertEquals(39, Node.EMPTY_BLOCK);
564:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
565:       assertEquals(52, Node.LENGTH);
566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
567:       assertEquals(55, Node.INFERRED_FUNCTION);
568:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
569:       assertEquals(51, Node.STATIC_SOURCE_FILE);
570:       assertEquals(30, Node.VAR_ARGS_NAME);
571:       assertEquals(46, Node.IS_NAMESPACE);
572:       assertEquals(57, Node.LAST_PROP);
573:       assertEquals(43, Node.IS_CONSTANT_NAME);
574:       assertEquals(2, Node.POST_FLAG);
575:       assertEquals(47, Node.IS_DISPATCHER);
576:       assertEquals(56, Node.CHANGE_TIME);
577:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
578:       assertEquals(36, Node.QUOTED_PROP);
579:       assertEquals(29, Node.JSDOC_INFO_PROP);
580:       assertEquals(53, Node.INPUT_ID);
581:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
582:       assertEquals(49, Node.DIRECT_EVAL);
583:       assertEquals(1, Node.DECR_FLAG);
584:       assertEquals(32, Node.INCRDECR_PROP);
585:       assertEquals(12, Node.COLUMN_BITS);
586:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
587:       assertEquals(37, Node.OPT_ARG_NAME);
588:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
589:       assertEquals(48, Node.DIRECTIVES);
590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
591:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
592:       assertEquals(4095, Node.COLUMN_MASK);
593:       assertNotSame(node1, node0);
594:       assertFalse(node1.equals((Object)node0));
595:       assertTrue(boolean2 == boolean1);
596:       assertFalse(boolean2 == boolean0);
597:       assertFalse(node1.isInstanceOf());
598:       assertFalse(node1.isThis());
599:       assertFalse(node1.isAnd());
600:       assertFalse(node1.isScript());
601:       assertFalse(node1.isNot());
602:       assertFalse(node1.isGetProp());
603:       assertFalse(node1.isObjectLit());
604:       assertFalse(node1.isThrow());
605:       assertFalse(node1.isSwitch());
606:       assertFalse(node1.isLabelName());
607:       assertFalse(node1.isFalse());
608:       assertFalse(node1.isCast());
609:       assertFalse(node1.isIn());
610:       assertFalse(node1.isNE());
611:       assertFalse(node1.isGetterDef());
612:       assertFalse(node1.isNumber());
613:       assertEquals(49206, node1.getSourcePosition());
614:       assertEquals(54, node1.getCharno());
615:       assertFalse(node1.isCase());
616:       assertFalse(node1.isInc());
617:       assertFalse(node1.isHook());
618:       assertFalse(node1.isTry());
619:       assertFalse(node1.hasOneChild());
620:       assertTrue(node1.isString());
621:       assertFalse(node1.isBlock());
622:       assertFalse(node1.isFor());
623:       assertFalse(node1.isIf());
624:       assertFalse(node1.isRegExp());
625:       assertFalse(node1.hasMoreThanOneChild());
626:       assertFalse(node1.isCatch());
627:       assertFalse(node1.isWith());
628:       assertEquals(0, node1.getChildCount());
629:       assertEquals(40, node1.getType());
630:       assertFalse(node1.isParamList());
631:       assertFalse(node1.isDefaultCase());
632:       assertFalse(node1.isNull());
633:       assertFalse(node1.isSetterDef());
634:       assertFalse(node1.isDebugger());
635:       assertFalse(node1.isNew());
636:       assertFalse(node1.isArrayLit());
637:       assertFalse(node1.isStringKey());
638:       assertFalse(node1.isVar());
639:       assertEquals(12, node1.getLineno());
640:       assertFalse(node1.isContinue());
641:       assertFalse(node1.isFunction());
642:       assertFalse(node1.isReturn());
643:       assertFalse(node1.isOr());
644:       assertFalse(node1.isLabel());
645:       assertFalse(node1.isAssignAdd());
646:       assertFalse(node1.isWhile());
647:       assertFalse(node1.isDo());
648:       assertFalse(node1.isAdd());
649:       assertFalse(node1.isEmpty());
650:       assertFalse(node1.isVoid());
651:       assertFalse(node1.isName());
652:       assertFalse(node1.isTrue());
653:       assertFalse(node1.isBreak());
654:       assertFalse(node1.isDec());
655:       assertFalse(node1.hasChildren());
656:       assertFalse(node1.isDelProp());
657:       assertFalse(node1.isTypeOf());
658:       assertFalse(node1.isAssign());
659:       assertFalse(node1.isComma());
660:       assertFalse(node1.isGetElem());
661:       assertFalse(node1.isExprResult());
662:       assertFalse(node1.isCall());
663:       
664:       Iterable<Node> iterable0 = node1.children();
665:       assertFalse(iterable0.contains(node1));
666:       assertEquals(40, Node.ORIGINALNAME_PROP);
667:       assertEquals(50, Node.FREE_CALL);
668:       assertEquals(57, Node.REFLECTED_OBJECT);
669:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
670:       assertEquals(54, Node.SLASH_V);
671:       assertEquals(8, Node.FLAG_NO_THROWS);
672:       assertEquals(39, Node.EMPTY_BLOCK);
673:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
674:       assertEquals(52, Node.LENGTH);
675:       assertEquals(15, Node.NO_SIDE_EFFECTS);
676:       assertEquals(55, Node.INFERRED_FUNCTION);
677:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
678:       assertEquals(51, Node.STATIC_SOURCE_FILE);
679:       assertEquals(30, Node.VAR_ARGS_NAME);
680:       assertEquals(46, Node.IS_NAMESPACE);
681:       assertEquals(57, Node.LAST_PROP);
682:       assertEquals(43, Node.IS_CONSTANT_NAME);
683:       assertEquals(2, Node.POST_FLAG);
684:       assertEquals(47, Node.IS_DISPATCHER);
685:       assertEquals(56, Node.CHANGE_TIME);
686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
687:       assertEquals(36, Node.QUOTED_PROP);
688:       assertEquals(29, Node.JSDOC_INFO_PROP);
689:       assertEquals(53, Node.INPUT_ID);
690:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
691:       assertEquals(49, Node.DIRECT_EVAL);
692:       assertEquals(1, Node.DECR_FLAG);
693:       assertEquals(32, Node.INCRDECR_PROP);
694:       assertEquals(12, Node.COLUMN_BITS);
695:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
696:       assertEquals(37, Node.OPT_ARG_NAME);
697:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
698:       assertEquals(48, Node.DIRECTIVES);
699:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
700:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
701:       assertEquals(4095, Node.COLUMN_MASK);
702:       assertNotSame(node1, node0);
703:       assertNotNull(iterable0);
704:       assertFalse(node1.equals((Object)node0));
705:       assertFalse(node1.isInstanceOf());
706:       assertFalse(node1.isThis());
707:       assertFalse(node1.isAnd());
708:       assertFalse(node1.isScript());
709:       assertFalse(node1.isNot());
710:       assertFalse(node1.isGetProp());
711:       assertFalse(node1.isObjectLit());
712:       assertFalse(node1.isThrow());
713:       assertFalse(node1.isSwitch());
714:       assertFalse(node1.isLabelName());
715:       assertFalse(node1.isFalse());
716:       assertFalse(node1.isCast());
717:       assertFalse(node1.isIn());
718:       assertFalse(node1.isNE());
719:       assertFalse(node1.isGetterDef());
720:       assertFalse(node1.isNumber());
721:       assertEquals(49206, node1.getSourcePosition());
722:       assertEquals(54, node1.getCharno());
723:       assertFalse(node1.isCase());
724:       assertFalse(node1.isInc());
725:       assertFalse(node1.isHook());
726:       assertFalse(node1.isTry());
727:       assertFalse(node1.hasOneChild());
728:       assertTrue(node1.isString());
729:       assertFalse(node1.isBlock());
730:       assertFalse(node1.isFor());
731:       assertFalse(node1.isIf());
732:       assertFalse(node1.isRegExp());
733:       assertFalse(node1.hasMoreThanOneChild());
734:       assertFalse(node1.isCatch());
735:       assertFalse(node1.isWith());
736:       assertEquals(0, node1.getChildCount());
737:       assertEquals(40, node1.getType());
738:       assertFalse(node1.isParamList());
739:       assertFalse(node1.isDefaultCase());
740:       assertFalse(node1.isNull());
741:       assertFalse(node1.isSetterDef());
742:       assertFalse(node1.isDebugger());
743:       assertFalse(node1.isNew());
744:       assertFalse(node1.isArrayLit());
745:       assertFalse(node1.isStringKey());
746:       assertFalse(node1.isVar());
747:       assertEquals(12, node1.getLineno());
748:       assertFalse(node1.isContinue());
749:       assertFalse(node1.isFunction());
750:       assertFalse(node1.isReturn());
751:       assertFalse(node1.isOr());
752:       assertFalse(node1.isLabel());
753:       assertFalse(node1.isAssignAdd());
754:       assertFalse(node1.isWhile());
755:       assertFalse(node1.isDo());
756:       assertFalse(node1.isAdd());
757:       assertFalse(node1.isEmpty());
758:       assertFalse(node1.isVoid());
759:       assertFalse(node1.isName());
760:       assertFalse(node1.isTrue());
761:       assertFalse(node1.isBreak());
762:       assertFalse(node1.isDec());
763:       assertFalse(node1.hasChildren());
764:       assertFalse(node1.isDelProp());
765:       assertFalse(node1.isTypeOf());
766:       assertFalse(node1.isAssign());
767:       assertFalse(node1.isComma());
768:       assertFalse(node1.isGetElem());
769:       assertFalse(node1.isExprResult());
770:       assertFalse(node1.isCall());
771:       
772:       boolean boolean3 = node1.isHook();
773:       assertFalse(boolean3);
774:       assertEquals(40, Node.ORIGINALNAME_PROP);
775:       assertEquals(50, Node.FREE_CALL);
776:       assertEquals(57, Node.REFLECTED_OBJECT);
777:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
778:       assertEquals(54, Node.SLASH_V);
779:       assertEquals(8, Node.FLAG_NO_THROWS);
780:       assertEquals(39, Node.EMPTY_BLOCK);
781:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
782:       assertEquals(52, Node.LENGTH);
783:       assertEquals(15, Node.NO_SIDE_EFFECTS);
784:       assertEquals(55, Node.INFERRED_FUNCTION);
785:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
786:       assertEquals(51, Node.STATIC_SOURCE_FILE);
787:       assertEquals(30, Node.VAR_ARGS_NAME);
788:       assertEquals(46, Node.IS_NAMESPACE);
789:       assertEquals(57, Node.LAST_PROP);
790:       assertEquals(43, Node.IS_CONSTANT_NAME);
791:       assertEquals(2, Node.POST_FLAG);
792:       assertEquals(47, Node.IS_DISPATCHER);
793:       assertEquals(56, Node.CHANGE_TIME);
794:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
795:       assertEquals(36, Node.QUOTED_PROP);
796:       assertEquals(29, Node.JSDOC_INFO_PROP);
797:       assertEquals(53, Node.INPUT_ID);
798:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
799:       assertEquals(49, Node.DIRECT_EVAL);
800:       assertEquals(1, Node.DECR_FLAG);
801:       assertEquals(32, Node.INCRDECR_PROP);
802:       assertEquals(12, Node.COLUMN_BITS);
803:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
804:       assertEquals(37, Node.OPT_ARG_NAME);
805:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
806:       assertEquals(48, Node.DIRECTIVES);
807:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
808:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
809:       assertEquals(4095, Node.COLUMN_MASK);
810:       assertNotSame(node1, node0);
811:       assertFalse(node1.equals((Object)node0));
812:       assertFalse(boolean3 == boolean0);
813:       assertTrue(boolean3 == boolean2);
814:       assertTrue(boolean3 == boolean1);
815:       assertFalse(node1.isInstanceOf());
816:       assertFalse(node1.isThis());
817:       assertFalse(node1.isAnd());
818:       assertFalse(node1.isScript());
819:       assertFalse(node1.isNot());
820:       assertFalse(node1.isGetProp());
821:       assertFalse(node1.isObjectLit());
822:       assertFalse(node1.isThrow());
823:       assertFalse(node1.isSwitch());
824:       assertFalse(node1.isLabelName());
825:       assertFalse(node1.isFalse());
826:       assertFalse(node1.isCast());
827:       assertFalse(node1.isIn());
828:       assertFalse(node1.isNE());
829:       assertFalse(node1.isGetterDef());
830:       assertFalse(node1.isNumber());
831:       assertEquals(49206, node1.getSourcePosition());
832:       assertEquals(54, node1.getCharno());
833:       assertFalse(node1.isCase());
834:       assertFalse(node1.isInc());
835:       assertFalse(node1.isHook());
836:       assertFalse(node1.isTry());
837:       assertFalse(node1.hasOneChild());
838:       assertTrue(node1.isString());
839:       assertFalse(node1.isBlock());
840:       assertFalse(node1.isFor());
841:       assertFalse(node1.isIf());
842:       assertFalse(node1.isRegExp());
843:       assertFalse(node1.hasMoreThanOneChild());
844:       assertFalse(node1.isCatch());
845:       assertFalse(node1.isWith());
846:       assertEquals(0, node1.getChildCount());
847:       assertEquals(40, node1.getType());
848:       assertFalse(node1.isParamList());
849:       assertFalse(node1.isDefaultCase());
850:       assertFalse(node1.isNull());
851:       assertFalse(node1.isSetterDef());
852:       assertFalse(node1.isDebugger());
853:       assertFalse(node1.isNew());
854:       assertFalse(node1.isArrayLit());
855:       assertFalse(node1.isStringKey());
856:       assertFalse(node1.isVar());
857:       assertEquals(12, node1.getLineno());
858:       assertFalse(node1.isContinue());
859:       assertFalse(node1.isFunction());
860:       assertFalse(node1.isReturn());
861:       assertFalse(node1.isOr());
862:       assertFalse(node1.isLabel());
863:       assertFalse(node1.isAssignAdd());
864:       assertFalse(node1.isWhile());
865:       assertFalse(node1.isDo());
866:       assertFalse(node1.isAdd());
867:       assertFalse(node1.isEmpty());
868:       assertFalse(node1.isVoid());
869:       assertFalse(node1.isName());
870:       assertFalse(node1.isTrue());
871:       assertFalse(node1.isBreak());
872:       assertFalse(node1.isDec());
873:       assertFalse(node1.hasChildren());
874:       assertFalse(node1.isDelProp());
875:       assertFalse(node1.isTypeOf());
876:       assertFalse(node1.isAssign());
877:       assertFalse(node1.isComma());
878:       assertFalse(node1.isGetElem());
879:       assertFalse(node1.isExprResult());
880:       assertFalse(node1.isCall());
881:       
882:       boolean boolean4 = node1.isCall();
883:       assertFalse(boolean4);
884:       assertEquals(40, Node.ORIGINALNAME_PROP);
885:       assertEquals(50, Node.FREE_CALL);
886:       assertEquals(57, Node.REFLECTED_OBJECT);
887:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
888:       assertEquals(54, Node.SLASH_V);
889:       assertEquals(8, Node.FLAG_NO_THROWS);
890:       assertEquals(39, Node.EMPTY_BLOCK);
891:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
892:       assertEquals(52, Node.LENGTH);
893:       assertEquals(15, Node.NO_SIDE_EFFECTS);
894:       assertEquals(55, Node.INFERRED_FUNCTION);
895:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
896:       assertEquals(51, Node.STATIC_SOURCE_FILE);
897:       assertEquals(30, Node.VAR_ARGS_NAME);
898:       assertEquals(46, Node.IS_NAMESPACE);
899:       assertEquals(57, Node.LAST_PROP);
900:       assertEquals(43, Node.IS_CONSTANT_NAME);
901:       assertEquals(2, Node.POST_FLAG);
902:       assertEquals(47, Node.IS_DISPATCHER);
903:       assertEquals(56, Node.CHANGE_TIME);
904:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
905:       assertEquals(36, Node.QUOTED_PROP);
906:       assertEquals(29, Node.JSDOC_INFO_PROP);
907:       assertEquals(53, Node.INPUT_ID);
908:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
909:       assertEquals(49, Node.DIRECT_EVAL);
910:       assertEquals(1, Node.DECR_FLAG);
911:       assertEquals(32, Node.INCRDECR_PROP);
912:       assertEquals(12, Node.COLUMN_BITS);
913:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
914:       assertEquals(37, Node.OPT_ARG_NAME);
915:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
916:       assertEquals(48, Node.DIRECTIVES);
917:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
918:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
919:       assertEquals(4095, Node.COLUMN_MASK);
920:       assertNotSame(node1, node0);
921:       assertFalse(node1.equals((Object)node0));
922:       assertFalse(boolean4 == boolean0);
923:       assertTrue(boolean4 == boolean1);
924:       assertTrue(boolean4 == boolean3);
925:       assertTrue(boolean4 == boolean2);
926:       assertFalse(node1.isInstanceOf());
927:       assertFalse(node1.isThis());
928:       assertFalse(node1.isAnd());
929:       assertFalse(node1.isScript());
930:       assertFalse(node1.isNot());
931:       assertFalse(node1.isGetProp());
932:       assertFalse(node1.isObjectLit());
933:       assertFalse(node1.isThrow());
934:       assertFalse(node1.isSwitch());
935:       assertFalse(node1.isLabelName());
936:       assertFalse(node1.isFalse());
937:       assertFalse(node1.isCast());
938:       assertFalse(node1.isIn());
939:       assertFalse(node1.isNE());
940:       assertFalse(node1.isGetterDef());
941:       assertFalse(node1.isNumber());
942:       assertEquals(49206, node1.getSourcePosition());
943:       assertEquals(54, node1.getCharno());
944:       assertFalse(node1.isCase());
945:       assertFalse(node1.isInc());
946:       assertFalse(node1.isHook());
947:       assertFalse(node1.isTry());
948:       assertFalse(node1.hasOneChild());
949:       assertTrue(node1.isString());
950:       assertFalse(node1.isBlock());
951:       assertFalse(node1.isFor());
952:       assertFalse(node1.isIf());
953:       assertFalse(node1.isRegExp());
954:       assertFalse(node1.hasMoreThanOneChild());
955:       assertFalse(node1.isCatch());
956:       assertFalse(node1.isWith());
957:       assertEquals(0, node1.getChildCount());
958:       assertEquals(40, node1.getType());
959:       assertFalse(node1.isParamList());
960:       assertFalse(node1.isDefaultCase());
961:       assertFalse(node1.isNull());
962:       assertFalse(node1.isSetterDef());
963:       assertFalse(node1.isDebugger());
964:       assertFalse(node1.isNew());
965:       assertFalse(node1.isArrayLit());
966:       assertFalse(node1.isStringKey());
967:       assertFalse(node1.isVar());
968:       assertEquals(12, node1.getLineno());
969:       assertFalse(node1.isContinue());
970:       assertFalse(node1.isFunction());
971:       assertFalse(node1.isReturn());
972:       assertFalse(node1.isOr());
973:       assertFalse(node1.isLabel());
974:       assertFalse(node1.isAssignAdd());
975:       assertFalse(node1.isWhile());
976:       assertFalse(node1.isDo());
977:       assertFalse(node1.isAdd());
978:       assertFalse(node1.isEmpty());
979:       assertFalse(node1.isVoid());
980:       assertFalse(node1.isName());
981:       assertFalse(node1.isTrue());
982:       assertFalse(node1.isBreak());
983:       assertFalse(node1.isDec());
984:       assertFalse(node1.hasChildren());
985:       assertFalse(node1.isDelProp());
986:       assertFalse(node1.isTypeOf());
987:       assertFalse(node1.isAssign());
988:       assertFalse(node1.isComma());
989:       assertFalse(node1.isGetElem());
990:       assertFalse(node1.isExprResult());
991:       assertFalse(node1.isCall());
992:   }
993: }
RegularFileObject[/tmp/EvoSuite_99_1628157879369/com/google/javascript/rhino/Node_99_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:39 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_99_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_99_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_99_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:39.496 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

Node node0 = Node.newString("com.google.javascript.rhino.jstype.NumberType", 117, 117);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node0);
assertFalse(node0.isInstanceOf());
assertEquals(479349, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(117, node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(117, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());

node0.detachChildren();
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isInstanceOf());
assertEquals(479349, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(117, node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(117, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());

Node node1 = Node.newString("", 12, 54);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertEquals(49206, node1.getSourcePosition());
assertEquals(54, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(12, node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());

boolean boolean1 = node0.isEquivalentTo(node1, true, true, true);
assertFalse(boolean1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertFalse(node0.isInstanceOf());
assertEquals(479349, node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(117, node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(117, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertEquals(40, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isIn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertEquals(49206, node1.getSourcePosition());
assertEquals(54, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(12, node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());

boolean boolean2 = node1.isDo();
assertFalse(boolean2);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertEquals(49206, node1.getSourcePosition());
assertEquals(54, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(12, node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node1));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node1, node0);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertEquals(49206, node1.getSourcePosition());
assertEquals(54, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(12, node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());

boolean boolean3 = node1.isHook();
assertFalse(boolean3);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertEquals(49206, node1.getSourcePosition());
assertEquals(54, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(12, node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());

boolean boolean4 = node1.isCall();
assertFalse(boolean4);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertEquals(49206, node1.getSourcePosition());
assertEquals(54, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(12, node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());


[MASTER] 10:04:41.865 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_119_1628157881542/com/google/javascript/rhino/Node_119_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_119_1628157881542/com/google/javascript/rhino/Node_119_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:41.865 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:41.865 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:41.865 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 550
[MASTER] 10:04:41.866 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_119_1628157881542/com/google/javascript/rhino/Node_119_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_119_tmp__ESTest extends Node_119_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(114, (-1707), (-1871));
21:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
22:       assertEquals(43, Node.IS_CONSTANT_NAME);
23:       assertEquals(36, Node.QUOTED_PROP);
24:       assertEquals(4095, Node.COLUMN_MASK);
25:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
26:       assertEquals(48, Node.DIRECTIVES);
27:       assertEquals(2, Node.POST_FLAG);
28:       assertEquals(8, Node.FLAG_NO_THROWS);
29:       assertEquals(39, Node.EMPTY_BLOCK);
30:       assertEquals(56, Node.CHANGE_TIME);
31:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
32:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
33:       assertEquals(47, Node.IS_DISPATCHER);
34:       assertEquals(55, Node.INFERRED_FUNCTION);
35:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
36:       assertEquals(29, Node.JSDOC_INFO_PROP);
37:       assertEquals(53, Node.INPUT_ID);
38:       assertEquals(15, Node.NO_SIDE_EFFECTS);
39:       assertEquals(57, Node.LAST_PROP);
40:       assertEquals(54, Node.SLASH_V);
41:       assertEquals(30, Node.VAR_ARGS_NAME);
42:       assertEquals(52, Node.LENGTH);
43:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
44:       assertEquals(40, Node.ORIGINALNAME_PROP);
45:       assertEquals(57, Node.REFLECTED_OBJECT);
46:       assertEquals(46, Node.IS_NAMESPACE);
47:       assertEquals(49, Node.DIRECT_EVAL);
48:       assertEquals(37, Node.OPT_ARG_NAME);
49:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
50:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
51:       assertEquals(50, Node.FREE_CALL);
52:       assertEquals(51, Node.STATIC_SOURCE_FILE);
53:       assertEquals(12, Node.COLUMN_BITS);
54:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(1, Node.DECR_FLAG);
57:       assertNotNull(node0);
58:       assertFalse(node0.isEmpty());
59:       assertFalse(node0.isDelProp());
60:       assertFalse(node0.isFor());
61:       assertFalse(node0.isGetterDef());
62:       assertFalse(node0.isIf());
63:       assertFalse(node0.isNE());
64:       assertFalse(node0.isVoid());
65:       assertFalse(node0.isArrayLit());
66:       assertFalse(node0.isDefaultCase());
67:       assertFalse(node0.isFunction());
68:       assertFalse(node0.isTrue());
69:       assertEquals(0, node0.getChildCount());
70:       assertTrue(node0.isDo());
71:       assertFalse(node0.isIn());
72:       assertFalse(node0.isInc());
73:       assertFalse(node0.isSetterDef());
74:       assertEquals(114, node0.getType());
75:       assertFalse(node0.isStringKey());
76:       assertFalse(node0.isThis());
77:       assertFalse(node0.isParamList());
78:       assertFalse(node0.isVar());
79:       assertFalse(node0.isHook());
80:       assertFalse(node0.isInstanceOf());
81:       assertFalse(node0.isCatch());
82:       assertFalse(node0.isSwitch());
83:       assertFalse(node0.isWith());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isRegExp());
86:       assertFalse(node0.isBlock());
87:       assertEquals((-1), node0.getCharno());
88:       assertFalse(node0.isTry());
89:       assertFalse(node0.isScript());
90:       assertFalse(node0.hasOneChild());
91:       assertFalse(node0.isCase());
92:       assertFalse(node0.isAssign());
93:       assertFalse(node0.isLabelName());
94:       assertFalse(node0.isNumber());
95:       assertFalse(node0.isTypeOf());
96:       assertEquals((-1), node0.getSourcePosition());
97:       assertFalse(node0.isDec());
98:       assertFalse(node0.hasChildren());
99:       assertFalse(node0.isLabel());
100:       assertEquals((-1), node0.getLineno());
101:       assertFalse(node0.isCast());
102:       assertFalse(node0.isExprResult());
103:       assertFalse(node0.isGetElem());
104:       assertFalse(node0.isContinue());
105:       assertFalse(node0.isAdd());
106:       assertFalse(node0.isOr());
107:       assertFalse(node0.isAssignAdd());
108:       assertFalse(node0.isNew());
109:       assertFalse(node0.isName());
110:       assertFalse(node0.isThrow());
111:       assertFalse(node0.isFalse());
112:       assertFalse(node0.isComma());
113:       assertFalse(node0.isNull());
114:       assertFalse(node0.isCall());
115:       assertFalse(node0.isBreak());
116:       assertFalse(node0.isWhile());
117:       assertFalse(node0.isNot());
118:       assertFalse(node0.isAnd());
119:       assertFalse(node0.isString());
120:       assertFalse(node0.isObjectLit());
121:       assertFalse(node0.isDebugger());
122:       assertFalse(node0.isReturn());
123:       assertFalse(node0.isGetProp());
124:       
125:       Node node1 = Node.newString("", (-277), (-1707));
126:       assertEquals(43, Node.IS_CONSTANT_NAME);
127:       assertEquals(36, Node.QUOTED_PROP);
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(55, Node.INFERRED_FUNCTION);
130:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
131:       assertEquals(53, Node.INPUT_ID);
132:       assertEquals(29, Node.JSDOC_INFO_PROP);
133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
134:       assertEquals(39, Node.EMPTY_BLOCK);
135:       assertEquals(56, Node.CHANGE_TIME);
136:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
137:       assertEquals(8, Node.FLAG_NO_THROWS);
138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
139:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
140:       assertEquals(57, Node.REFLECTED_OBJECT);
141:       assertEquals(4095, Node.COLUMN_MASK);
142:       assertEquals(48, Node.DIRECTIVES);
143:       assertEquals(49, Node.DIRECT_EVAL);
144:       assertEquals(37, Node.OPT_ARG_NAME);
145:       assertEquals(15, Node.NO_SIDE_EFFECTS);
146:       assertEquals(57, Node.LAST_PROP);
147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
148:       assertEquals(30, Node.VAR_ARGS_NAME);
149:       assertEquals(54, Node.SLASH_V);
150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
151:       assertEquals(12, Node.COLUMN_BITS);
152:       assertEquals(32, Node.INCRDECR_PROP);
153:       assertEquals(52, Node.LENGTH);
154:       assertEquals(1, Node.DECR_FLAG);
155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
156:       assertEquals(2, Node.POST_FLAG);
157:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
158:       assertEquals(50, Node.FREE_CALL);
159:       assertEquals(47, Node.IS_DISPATCHER);
160:       assertEquals(46, Node.IS_NAMESPACE);
161:       assertEquals(40, Node.ORIGINALNAME_PROP);
162:       assertNotNull(node1);
163:       assertFalse(node1.equals((Object)node0));
164:       assertFalse(node1.isEmpty());
165:       assertFalse(node1.isFor());
166:       assertFalse(node1.isDelProp());
167:       assertFalse(node1.isIf());
168:       assertFalse(node1.isGetterDef());
169:       assertFalse(node1.isNE());
170:       assertFalse(node1.isTry());
171:       assertFalse(node1.isIn());
172:       assertFalse(node1.isCase());
173:       assertFalse(node1.isRegExp());
174:       assertFalse(node1.isTrue());
175:       assertFalse(node1.isVoid());
176:       assertFalse(node1.isCatch());
177:       assertFalse(node1.isThrow());
178:       assertFalse(node1.isFalse());
179:       assertFalse(node1.isComma());
180:       assertFalse(node1.isInc());
181:       assertFalse(node1.isGetProp());
182:       assertFalse(node1.isSetterDef());
183:       assertFalse(node1.isNot());
184:       assertEquals(40, node1.getType());
185:       assertFalse(node1.isAnd());
186:       assertFalse(node1.isObjectLit());
187:       assertFalse(node1.isContinue());
188:       assertFalse(node1.isDebugger());
189:       assertFalse(node1.isFunction());
190:       assertFalse(node1.isCast());
191:       assertFalse(node1.isAssign());
192:       assertFalse(node1.isLabelName());
193:       assertFalse(node1.isNumber());
194:       assertEquals((-1), node1.getSourcePosition());
195:       assertFalse(node1.isTypeOf());
196:       assertFalse(node1.isDec());
197:       assertFalse(node1.hasChildren());
198:       assertFalse(node1.isAssignAdd());
199:       assertFalse(node1.isOr());
200:       assertFalse(node1.isScript());
201:       assertFalse(node1.hasOneChild());
202:       assertFalse(node1.isWhile());
203:       assertFalse(node1.hasMoreThanOneChild());
204:       assertFalse(node1.isWith());
205:       assertFalse(node1.isReturn());
206:       assertFalse(node1.isBlock());
207:       assertEquals((-1), node1.getLineno());
208:       assertFalse(node1.isInstanceOf());
209:       assertFalse(node1.isBreak());
210:       assertFalse(node1.isExprResult());
211:       assertFalse(node1.isCall());
212:       assertFalse(node1.isGetElem());
213:       assertFalse(node1.isName());
214:       assertFalse(node1.isStringKey());
215:       assertFalse(node1.isVar());
216:       assertFalse(node1.isNull());
217:       assertFalse(node1.isParamList());
218:       assertFalse(node1.isHook());
219:       assertFalse(node1.isThis());
220:       assertTrue(node1.isString());
221:       assertFalse(node1.isAdd());
222:       assertFalse(node1.isNew());
223:       assertFalse(node1.isDo());
224:       assertFalse(node1.isDefaultCase());
225:       assertEquals(0, node1.getChildCount());
226:       assertEquals((-1), node1.getCharno());
227:       assertFalse(node1.isLabel());
228:       assertFalse(node1.isSwitch());
229:       assertFalse(node1.isArrayLit());
230:       
231:       Node node2 = new Node(2497, node0, node0, node0, 0, 30);
232:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
233:       assertEquals(43, Node.IS_CONSTANT_NAME);
234:       assertEquals(36, Node.QUOTED_PROP);
235:       assertEquals(4095, Node.COLUMN_MASK);
236:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
237:       assertEquals(48, Node.DIRECTIVES);
238:       assertEquals(2, Node.POST_FLAG);
239:       assertEquals(8, Node.FLAG_NO_THROWS);
240:       assertEquals(39, Node.EMPTY_BLOCK);
241:       assertEquals(56, Node.CHANGE_TIME);
242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
243:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
244:       assertEquals(47, Node.IS_DISPATCHER);
245:       assertEquals(55, Node.INFERRED_FUNCTION);
246:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
247:       assertEquals(29, Node.JSDOC_INFO_PROP);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(15, Node.NO_SIDE_EFFECTS);
250:       assertEquals(57, Node.LAST_PROP);
251:       assertEquals(54, Node.SLASH_V);
252:       assertEquals(30, Node.VAR_ARGS_NAME);
253:       assertEquals(52, Node.LENGTH);
254:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
255:       assertEquals(40, Node.ORIGINALNAME_PROP);
256:       assertEquals(57, Node.REFLECTED_OBJECT);
257:       assertEquals(46, Node.IS_NAMESPACE);
258:       assertEquals(49, Node.DIRECT_EVAL);
259:       assertEquals(37, Node.OPT_ARG_NAME);
260:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
262:       assertEquals(50, Node.FREE_CALL);
263:       assertEquals(51, Node.STATIC_SOURCE_FILE);
264:       assertEquals(12, Node.COLUMN_BITS);
265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
266:       assertEquals(32, Node.INCRDECR_PROP);
267:       assertEquals(1, Node.DECR_FLAG);
268:       assertEquals(4095, Node.COLUMN_MASK);
269:       assertEquals(55, Node.INFERRED_FUNCTION);
270:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
271:       assertEquals(53, Node.INPUT_ID);
272:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
273:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
274:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
275:       assertEquals(39, Node.EMPTY_BLOCK);
276:       assertEquals(29, Node.JSDOC_INFO_PROP);
277:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
278:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
279:       assertEquals(37, Node.OPT_ARG_NAME);
280:       assertEquals(52, Node.LENGTH);
281:       assertEquals(8, Node.FLAG_NO_THROWS);
282:       assertEquals(48, Node.DIRECTIVES);
283:       assertEquals(56, Node.CHANGE_TIME);
284:       assertEquals(36, Node.QUOTED_PROP);
285:       assertEquals(57, Node.REFLECTED_OBJECT);
286:       assertEquals(1, Node.DECR_FLAG);
287:       assertEquals(30, Node.VAR_ARGS_NAME);
288:       assertEquals(49, Node.DIRECT_EVAL);
289:       assertEquals(15, Node.NO_SIDE_EFFECTS);
290:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
291:       assertEquals(2, Node.POST_FLAG);
292:       assertEquals(32, Node.INCRDECR_PROP);
293:       assertEquals(57, Node.LAST_PROP);
294:       assertEquals(47, Node.IS_DISPATCHER);
295:       assertEquals(12, Node.COLUMN_BITS);
296:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
297:       assertEquals(50, Node.FREE_CALL);
298:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
299:       assertEquals(40, Node.ORIGINALNAME_PROP);
300:       assertEquals(43, Node.IS_CONSTANT_NAME);
301:       assertEquals(51, Node.STATIC_SOURCE_FILE);
302:       assertEquals(46, Node.IS_NAMESPACE);
303:       assertEquals(54, Node.SLASH_V);
304:       assertNotNull(node2);
305:       assertFalse(node0.equals((Object)node1));
306:       assertFalse(node2.equals((Object)node1));
307:       assertFalse(node2.equals((Object)node0));
308:       assertFalse(node0.isEmpty());
309:       assertFalse(node0.isDelProp());
310:       assertFalse(node0.isFor());
311:       assertFalse(node0.isGetterDef());
312:       assertFalse(node0.isIf());
313:       assertFalse(node0.isNE());
314:       assertFalse(node0.isVoid());
315:       assertFalse(node0.isArrayLit());
316:       assertFalse(node0.isDefaultCase());
317:       assertFalse(node0.isFunction());
318:       assertFalse(node0.isTrue());
319:       assertEquals(0, node0.getChildCount());
320:       assertTrue(node0.isDo());
321:       assertFalse(node0.isIn());
322:       assertFalse(node0.isInc());
323:       assertFalse(node0.isSetterDef());
324:       assertEquals(114, node0.getType());
325:       assertFalse(node0.isStringKey());
326:       assertFalse(node0.isThis());
327:       assertFalse(node0.isParamList());
328:       assertFalse(node0.isVar());
329:       assertFalse(node0.isHook());
330:       assertFalse(node0.isInstanceOf());
331:       assertFalse(node0.isCatch());
332:       assertFalse(node0.isSwitch());
333:       assertFalse(node0.isWith());
334:       assertFalse(node0.hasMoreThanOneChild());
335:       assertFalse(node0.isRegExp());
336:       assertFalse(node0.isBlock());
337:       assertEquals((-1), node0.getCharno());
338:       assertFalse(node0.isTry());
339:       assertFalse(node0.isScript());
340:       assertFalse(node0.hasOneChild());
341:       assertFalse(node0.isCase());
342:       assertFalse(node0.isAssign());
343:       assertFalse(node0.isLabelName());
344:       assertFalse(node0.isNumber());
345:       assertFalse(node0.isTypeOf());
346:       assertEquals((-1), node0.getSourcePosition());
347:       assertFalse(node0.isDec());
348:       assertFalse(node0.hasChildren());
349:       assertFalse(node0.isLabel());
350:       assertEquals((-1), node0.getLineno());
351:       assertFalse(node0.isCast());
352:       assertFalse(node0.isExprResult());
353:       assertFalse(node0.isGetElem());
354:       assertFalse(node0.isContinue());
355:       assertFalse(node0.isAdd());
356:       assertFalse(node0.isOr());
357:       assertFalse(node0.isAssignAdd());
358:       assertFalse(node0.isNew());
359:       assertFalse(node0.isName());
360:       assertFalse(node0.isThrow());
361:       assertFalse(node0.isFalse());
362:       assertFalse(node0.isComma());
363:       assertFalse(node0.isNull());
364:       assertFalse(node0.isCall());
365:       assertFalse(node0.isBreak());
366:       assertFalse(node0.isWhile());
367:       assertFalse(node0.isNot());
368:       assertFalse(node0.isAnd());
369:       assertFalse(node0.isString());
370:       assertFalse(node0.isObjectLit());
371:       assertFalse(node0.isDebugger());
372:       assertFalse(node0.isReturn());
373:       assertFalse(node0.isGetProp());
374:       assertFalse(node2.isAssign());
375:       assertFalse(node2.isGetElem());
376:       assertFalse(node2.isExprResult());
377:       assertFalse(node2.isCast());
378:       assertFalse(node2.isTypeOf());
379:       assertFalse(node2.isScript());
380:       assertFalse(node2.isDec());
381:       assertFalse(node2.isAssignAdd());
382:       assertFalse(node2.isLabel());
383:       assertFalse(node2.isReturn());
384:       assertFalse(node2.hasMoreThanOneChild());
385:       assertFalse(node2.isOr());
386:       assertFalse(node2.isWith());
387:       assertFalse(node2.isInstanceOf());
388:       assertFalse(node2.isBreak());
389:       assertFalse(node2.isFalse());
390:       assertFalse(node2.isCall());
391:       assertFalse(node2.isInc());
392:       assertFalse(node2.isSetterDef());
393:       assertFalse(node2.isComma());
394:       assertFalse(node2.isWhile());
395:       assertFalse(node2.isThrow());
396:       assertFalse(node2.isObjectLit());
397:       assertFalse(node2.isNot());
398:       assertEquals(0, node2.getLineno());
399:       assertFalse(node2.isGetProp());
400:       assertFalse(node2.isString());
401:       assertFalse(node2.isContinue());
402:       assertEquals(2497, node2.getType());
403:       assertFalse(node2.isDebugger());
404:       assertEquals(30, node2.getCharno());
405:       assertFalse(node2.isAnd());
406:       assertFalse(node2.isArrayLit());
407:       assertFalse(node2.isEmpty());
408:       assertFalse(node2.isRegExp());
409:       assertFalse(node2.isFunction());
410:       assertFalse(node2.isDefaultCase());
411:       assertFalse(node2.isFor());
412:       assertFalse(node2.isTry());
413:       assertTrue(node2.hasOneChild());
414:       assertEquals(1, node2.getChildCount());
415:       assertTrue(node2.hasChildren());
416:       assertFalse(node2.isIn());
417:       assertFalse(node2.isCatch());
418:       assertFalse(node2.isNull());
419:       assertFalse(node2.isDelProp());
420:       assertFalse(node2.isVoid());
421:       assertFalse(node2.isName());
422:       assertFalse(node2.isTrue());
423:       assertFalse(node2.isIf());
424:       assertFalse(node2.isNE());
425:       assertFalse(node2.isVar());
426:       assertFalse(node2.isHook());
427:       assertFalse(node2.isAdd());
428:       assertFalse(node2.isThis());
429:       assertFalse(node2.isNew());
430:       assertFalse(node2.isDo());
431:       assertFalse(node2.isBlock());
432:       assertFalse(node2.isCase());
433:       assertFalse(node2.isSwitch());
434:       assertFalse(node2.isNumber());
435:       assertFalse(node2.isGetterDef());
436:       assertEquals(30, node2.getSourcePosition());
437:       assertFalse(node2.isLabelName());
438:       assertFalse(node2.isStringKey());
439:       assertFalse(node2.isParamList());
440:       
441:       Node node3 = node0.removeChildren();
442:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
443:       assertEquals(43, Node.IS_CONSTANT_NAME);
444:       assertEquals(36, Node.QUOTED_PROP);
445:       assertEquals(4095, Node.COLUMN_MASK);
446:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
447:       assertEquals(48, Node.DIRECTIVES);
448:       assertEquals(2, Node.POST_FLAG);
449:       assertEquals(8, Node.FLAG_NO_THROWS);
450:       assertEquals(39, Node.EMPTY_BLOCK);
451:       assertEquals(56, Node.CHANGE_TIME);
452:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
453:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
454:       assertEquals(47, Node.IS_DISPATCHER);
455:       assertEquals(55, Node.INFERRED_FUNCTION);
456:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
457:       assertEquals(29, Node.JSDOC_INFO_PROP);
458:       assertEquals(53, Node.INPUT_ID);
459:       assertEquals(15, Node.NO_SIDE_EFFECTS);
460:       assertEquals(57, Node.LAST_PROP);
461:       assertEquals(54, Node.SLASH_V);
462:       assertEquals(30, Node.VAR_ARGS_NAME);
463:       assertEquals(52, Node.LENGTH);
464:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
465:       assertEquals(40, Node.ORIGINALNAME_PROP);
466:       assertEquals(57, Node.REFLECTED_OBJECT);
467:       assertEquals(46, Node.IS_NAMESPACE);
468:       assertEquals(49, Node.DIRECT_EVAL);
469:       assertEquals(37, Node.OPT_ARG_NAME);
470:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
472:       assertEquals(50, Node.FREE_CALL);
473:       assertEquals(51, Node.STATIC_SOURCE_FILE);
474:       assertEquals(12, Node.COLUMN_BITS);
475:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
476:       assertEquals(32, Node.INCRDECR_PROP);
477:       assertEquals(1, Node.DECR_FLAG);
478:       assertNotSame(node0, node2);
479:       assertNull(node3);
480:       assertFalse(node0.equals((Object)node1));
481:       assertFalse(node0.equals((Object)node2));
482:       assertFalse(node0.isEmpty());
483:       assertFalse(node0.isDelProp());
484:       assertFalse(node0.isFor());
485:       assertFalse(node0.isGetterDef());
486:       assertFalse(node0.isIf());
487:       assertFalse(node0.isNE());
488:       assertFalse(node0.isVoid());
489:       assertFalse(node0.isArrayLit());
490:       assertFalse(node0.isDefaultCase());
491:       assertFalse(node0.isFunction());
492:       assertFalse(node0.isTrue());
493:       assertEquals(0, node0.getChildCount());
494:       assertTrue(node0.isDo());
495:       assertFalse(node0.isIn());
496:       assertFalse(node0.isInc());
497:       assertFalse(node0.isSetterDef());
498:       assertEquals(114, node0.getType());
499:       assertFalse(node0.isStringKey());
500:       assertFalse(node0.isThis());
501:       assertFalse(node0.isParamList());
502:       assertFalse(node0.isVar());
503:       assertFalse(node0.isHook());
504:       assertFalse(node0.isInstanceOf());
505:       assertFalse(node0.isCatch());
506:       assertFalse(node0.isSwitch());
507:       assertFalse(node0.isWith());
508:       assertFalse(node0.hasMoreThanOneChild());
509:       assertFalse(node0.isRegExp());
510:       assertFalse(node0.isBlock());
511:       assertEquals((-1), node0.getCharno());
512:       assertFalse(node0.isTry());
513:       assertFalse(node0.isScript());
514:       assertFalse(node0.hasOneChild());
515:       assertFalse(node0.isCase());
516:       assertFalse(node0.isAssign());
517:       assertFalse(node0.isLabelName());
518:       assertFalse(node0.isNumber());
519:       assertFalse(node0.isTypeOf());
520:       assertEquals((-1), node0.getSourcePosition());
521:       assertFalse(node0.isDec());
522:       assertFalse(node0.hasChildren());
523:       assertFalse(node0.isLabel());
524:       assertEquals((-1), node0.getLineno());
525:       assertFalse(node0.isCast());
526:       assertFalse(node0.isExprResult());
527:       assertFalse(node0.isGetElem());
528:       assertFalse(node0.isContinue());
529:       assertFalse(node0.isAdd());
530:       assertFalse(node0.isOr());
531:       assertFalse(node0.isAssignAdd());
532:       assertFalse(node0.isNew());
533:       assertFalse(node0.isName());
534:       assertFalse(node0.isThrow());
535:       assertFalse(node0.isFalse());
536:       assertFalse(node0.isComma());
537:       assertFalse(node0.isNull());
538:       assertFalse(node0.isCall());
539:       assertFalse(node0.isBreak());
540:       assertFalse(node0.isWhile());
541:       assertFalse(node0.isNot());
542:       assertFalse(node0.isAnd());
543:       assertFalse(node0.isString());
544:       assertFalse(node0.isObjectLit());
545:       assertFalse(node0.isDebugger());
546:       assertFalse(node0.isReturn());
547:       assertFalse(node0.isGetProp());
548:       
549:       Iterable<Node> iterable0 = node0.children();
550:       assertFalse(iterable0.contains(node2));
551:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
552:       assertEquals(43, Node.IS_CONSTANT_NAME);
553:       assertEquals(36, Node.QUOTED_PROP);
554:       assertEquals(4095, Node.COLUMN_MASK);
555:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
556:       assertEquals(48, Node.DIRECTIVES);
557:       assertEquals(2, Node.POST_FLAG);
558:       assertEquals(8, Node.FLAG_NO_THROWS);
559:       assertEquals(39, Node.EMPTY_BLOCK);
560:       assertEquals(56, Node.CHANGE_TIME);
561:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
562:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
563:       assertEquals(47, Node.IS_DISPATCHER);
564:       assertEquals(55, Node.INFERRED_FUNCTION);
565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
566:       assertEquals(29, Node.JSDOC_INFO_PROP);
567:       assertEquals(53, Node.INPUT_ID);
568:       assertEquals(15, Node.NO_SIDE_EFFECTS);
569:       assertEquals(57, Node.LAST_PROP);
570:       assertEquals(54, Node.SLASH_V);
571:       assertEquals(30, Node.VAR_ARGS_NAME);
572:       assertEquals(52, Node.LENGTH);
573:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
574:       assertEquals(40, Node.ORIGINALNAME_PROP);
575:       assertEquals(57, Node.REFLECTED_OBJECT);
576:       assertEquals(46, Node.IS_NAMESPACE);
577:       assertEquals(49, Node.DIRECT_EVAL);
578:       assertEquals(37, Node.OPT_ARG_NAME);
579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
580:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
581:       assertEquals(50, Node.FREE_CALL);
582:       assertEquals(51, Node.STATIC_SOURCE_FILE);
583:       assertEquals(12, Node.COLUMN_BITS);
584:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
585:       assertEquals(32, Node.INCRDECR_PROP);
586:       assertEquals(1, Node.DECR_FLAG);
587:       assertNotSame(node0, node2);
588:       assertNotNull(iterable0);
589:       assertFalse(node0.equals((Object)node1));
590:       assertFalse(node0.equals((Object)node2));
591:       assertFalse(node0.isEmpty());
592:       assertFalse(node0.isDelProp());
593:       assertFalse(node0.isFor());
594:       assertFalse(node0.isGetterDef());
595:       assertFalse(node0.isIf());
596:       assertFalse(node0.isNE());
597:       assertFalse(node0.isVoid());
598:       assertFalse(node0.isArrayLit());
599:       assertFalse(node0.isDefaultCase());
600:       assertFalse(node0.isFunction());
601:       assertFalse(node0.isTrue());
602:       assertEquals(0, node0.getChildCount());
603:       assertTrue(node0.isDo());
604:       assertFalse(node0.isIn());
605:       assertFalse(node0.isInc());
606:       assertFalse(node0.isSetterDef());
607:       assertEquals(114, node0.getType());
608:       assertFalse(node0.isStringKey());
609:       assertFalse(node0.isThis());
610:       assertFalse(node0.isParamList());
611:       assertFalse(node0.isVar());
612:       assertFalse(node0.isHook());
613:       assertFalse(node0.isInstanceOf());
614:       assertFalse(node0.isCatch());
615:       assertFalse(node0.isSwitch());
616:       assertFalse(node0.isWith());
617:       assertFalse(node0.hasMoreThanOneChild());
618:       assertFalse(node0.isRegExp());
619:       assertFalse(node0.isBlock());
620:       assertEquals((-1), node0.getCharno());
621:       assertFalse(node0.isTry());
622:       assertFalse(node0.isScript());
623:       assertFalse(node0.hasOneChild());
624:       assertFalse(node0.isCase());
625:       assertFalse(node0.isAssign());
626:       assertFalse(node0.isLabelName());
627:       assertFalse(node0.isNumber());
628:       assertFalse(node0.isTypeOf());
629:       assertEquals((-1), node0.getSourcePosition());
630:       assertFalse(node0.isDec());
631:       assertFalse(node0.hasChildren());
632:       assertFalse(node0.isLabel());
633:       assertEquals((-1), node0.getLineno());
634:       assertFalse(node0.isCast());
635:       assertFalse(node0.isExprResult());
636:       assertFalse(node0.isGetElem());
637:       assertFalse(node0.isContinue());
638:       assertFalse(node0.isAdd());
639:       assertFalse(node0.isOr());
640:       assertFalse(node0.isAssignAdd());
641:       assertFalse(node0.isNew());
642:       assertFalse(node0.isName());
643:       assertFalse(node0.isThrow());
644:       assertFalse(node0.isFalse());
645:       assertFalse(node0.isComma());
646:       assertFalse(node0.isNull());
647:       assertFalse(node0.isCall());
648:       assertFalse(node0.isBreak());
649:       assertFalse(node0.isWhile());
650:       assertFalse(node0.isNot());
651:       assertFalse(node0.isAnd());
652:       assertFalse(node0.isString());
653:       assertFalse(node0.isObjectLit());
654:       assertFalse(node0.isDebugger());
655:       assertFalse(node0.isReturn());
656:       assertFalse(node0.isGetProp());
657:       
658:       node1.addSuppression("q=lvL_oht *_!ep^i");
659:       assertEquals(43, Node.IS_CONSTANT_NAME);
660:       assertEquals(36, Node.QUOTED_PROP);
661:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
662:       assertEquals(55, Node.INFERRED_FUNCTION);
663:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
664:       assertEquals(53, Node.INPUT_ID);
665:       assertEquals(29, Node.JSDOC_INFO_PROP);
666:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
667:       assertEquals(39, Node.EMPTY_BLOCK);
668:       assertEquals(56, Node.CHANGE_TIME);
669:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
670:       assertEquals(8, Node.FLAG_NO_THROWS);
671:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
672:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
673:       assertEquals(57, Node.REFLECTED_OBJECT);
674:       assertEquals(4095, Node.COLUMN_MASK);
675:       assertEquals(48, Node.DIRECTIVES);
676:       assertEquals(49, Node.DIRECT_EVAL);
677:       assertEquals(37, Node.OPT_ARG_NAME);
678:       assertEquals(15, Node.NO_SIDE_EFFECTS);
679:       assertEquals(57, Node.LAST_PROP);
680:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
681:       assertEquals(30, Node.VAR_ARGS_NAME);
682:       assertEquals(54, Node.SLASH_V);
683:       assertEquals(51, Node.STATIC_SOURCE_FILE);
684:       assertEquals(12, Node.COLUMN_BITS);
685:       assertEquals(32, Node.INCRDECR_PROP);
686:       assertEquals(52, Node.LENGTH);
687:       assertEquals(1, Node.DECR_FLAG);
688:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
689:       assertEquals(2, Node.POST_FLAG);
690:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
691:       assertEquals(50, Node.FREE_CALL);
692:       assertEquals(47, Node.IS_DISPATCHER);
693:       assertEquals(46, Node.IS_NAMESPACE);
694:       assertEquals(40, Node.ORIGINALNAME_PROP);
695:       assertFalse(node1.equals((Object)node0));
696:       assertFalse(node1.equals((Object)node2));
697:       assertFalse(node1.isEmpty());
698:       assertFalse(node1.isFor());
699:       assertFalse(node1.isDelProp());
700:       assertFalse(node1.isIf());
701:       assertFalse(node1.isGetterDef());
702:       assertFalse(node1.isNE());
703:       assertFalse(node1.isTry());
704:       assertFalse(node1.isIn());
705:       assertFalse(node1.isCase());
706:       assertFalse(node1.isRegExp());
707:       assertFalse(node1.isTrue());
708:       assertFalse(node1.isVoid());
709:       assertFalse(node1.isCatch());
710:       assertFalse(node1.isThrow());
711:       assertFalse(node1.isFalse());
712:       assertFalse(node1.isComma());
713:       assertFalse(node1.isInc());
714:       assertFalse(node1.isGetProp());
715:       assertFalse(node1.isSetterDef());
716:       assertFalse(node1.isNot());
717:       assertEquals(40, node1.getType());
718:       assertFalse(node1.isAnd());
719:       assertFalse(node1.isObjectLit());
720:       assertFalse(node1.isContinue());
721:       assertFalse(node1.isDebugger());
722:       assertFalse(node1.isFunction());
723:       assertFalse(node1.isCast());
724:       assertFalse(node1.isAssign());
725:       assertFalse(node1.isLabelName());
726:       assertFalse(node1.isNumber());
727:       assertEquals((-1), node1.getSourcePosition());
728:       assertFalse(node1.isTypeOf());
729:       assertFalse(node1.isDec());
730:       assertFalse(node1.hasChildren());
731:       assertFalse(node1.isAssignAdd());
732:       assertFalse(node1.isOr());
733:       assertFalse(node1.isScript());
734:       assertFalse(node1.hasOneChild());
735:       assertFalse(node1.isWhile());
736:       assertFalse(node1.hasMoreThanOneChild());
737:       assertFalse(node1.isWith());
738:       assertFalse(node1.isReturn());
739:       assertFalse(node1.isBlock());
740:       assertEquals((-1), node1.getLineno());
741:       assertFalse(node1.isInstanceOf());
742:       assertFalse(node1.isBreak());
743:       assertFalse(node1.isExprResult());
744:       assertFalse(node1.isCall());
745:       assertFalse(node1.isGetElem());
746:       assertFalse(node1.isName());
747:       assertFalse(node1.isStringKey());
748:       assertFalse(node1.isVar());
749:       assertFalse(node1.isNull());
750:       assertFalse(node1.isParamList());
751:       assertFalse(node1.isHook());
752:       assertFalse(node1.isThis());
753:       assertTrue(node1.isString());
754:       assertFalse(node1.isAdd());
755:       assertFalse(node1.isNew());
756:       assertFalse(node1.isDo());
757:       assertFalse(node1.isDefaultCase());
758:       assertEquals(0, node1.getChildCount());
759:       assertEquals((-1), node1.getCharno());
760:       assertFalse(node1.isLabel());
761:       assertFalse(node1.isSwitch());
762:       assertFalse(node1.isArrayLit());
763:       
764:       int int0 = node2.getLineno();
765:       assertEquals(0, int0);
766:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
767:       assertEquals(43, Node.IS_CONSTANT_NAME);
768:       assertEquals(36, Node.QUOTED_PROP);
769:       assertEquals(4095, Node.COLUMN_MASK);
770:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
771:       assertEquals(48, Node.DIRECTIVES);
772:       assertEquals(2, Node.POST_FLAG);
773:       assertEquals(8, Node.FLAG_NO_THROWS);
774:       assertEquals(39, Node.EMPTY_BLOCK);
775:       assertEquals(56, Node.CHANGE_TIME);
776:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
777:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
778:       assertEquals(47, Node.IS_DISPATCHER);
779:       assertEquals(55, Node.INFERRED_FUNCTION);
780:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
781:       assertEquals(29, Node.JSDOC_INFO_PROP);
782:       assertEquals(53, Node.INPUT_ID);
783:       assertEquals(15, Node.NO_SIDE_EFFECTS);
784:       assertEquals(57, Node.LAST_PROP);
785:       assertEquals(54, Node.SLASH_V);
786:       assertEquals(30, Node.VAR_ARGS_NAME);
787:       assertEquals(52, Node.LENGTH);
788:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
789:       assertEquals(40, Node.ORIGINALNAME_PROP);
790:       assertEquals(57, Node.REFLECTED_OBJECT);
791:       assertEquals(46, Node.IS_NAMESPACE);
792:       assertEquals(49, Node.DIRECT_EVAL);
793:       assertEquals(37, Node.OPT_ARG_NAME);
794:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
795:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
796:       assertEquals(50, Node.FREE_CALL);
797:       assertEquals(51, Node.STATIC_SOURCE_FILE);
798:       assertEquals(12, Node.COLUMN_BITS);
799:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
800:       assertEquals(32, Node.INCRDECR_PROP);
801:       assertEquals(1, Node.DECR_FLAG);
802:       assertEquals(4095, Node.COLUMN_MASK);
803:       assertEquals(55, Node.INFERRED_FUNCTION);
804:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
805:       assertEquals(53, Node.INPUT_ID);
806:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
807:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
808:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
809:       assertEquals(39, Node.EMPTY_BLOCK);
810:       assertEquals(29, Node.JSDOC_INFO_PROP);
811:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
812:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
813:       assertEquals(37, Node.OPT_ARG_NAME);
814:       assertEquals(52, Node.LENGTH);
815:       assertEquals(8, Node.FLAG_NO_THROWS);
816:       assertEquals(48, Node.DIRECTIVES);
817:       assertEquals(56, Node.CHANGE_TIME);
818:       assertEquals(36, Node.QUOTED_PROP);
819:       assertEquals(57, Node.REFLECTED_OBJECT);
820:       assertEquals(1, Node.DECR_FLAG);
821:       assertEquals(30, Node.VAR_ARGS_NAME);
822:       assertEquals(49, Node.DIRECT_EVAL);
823:       assertEquals(15, Node.NO_SIDE_EFFECTS);
824:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
825:       assertEquals(2, Node.POST_FLAG);
826:       assertEquals(32, Node.INCRDECR_PROP);
827:       assertEquals(57, Node.LAST_PROP);
828:       assertEquals(47, Node.IS_DISPATCHER);
829:       assertEquals(12, Node.COLUMN_BITS);
830:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
831:       assertEquals(50, Node.FREE_CALL);
832:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
833:       assertEquals(40, Node.ORIGINALNAME_PROP);
834:       assertEquals(43, Node.IS_CONSTANT_NAME);
835:       assertEquals(51, Node.STATIC_SOURCE_FILE);
836:       assertEquals(46, Node.IS_NAMESPACE);
837:       assertEquals(54, Node.SLASH_V);
838:       assertNotSame(node0, node2);
839:       assertNotSame(node2, node0);
840:       assertFalse(node0.equals((Object)node1));
841:       assertFalse(node0.equals((Object)node2));
842:       assertFalse(node2.equals((Object)node1));
843:       assertFalse(node2.equals((Object)node0));
844:       assertFalse(node0.isEmpty());
845:       assertFalse(node0.isDelProp());
846:       assertFalse(node0.isFor());
847:       assertFalse(node0.isGetterDef());
848:       assertFalse(node0.isIf());
849:       assertFalse(node0.isNE());
850:       assertFalse(node0.isVoid());
851:       assertFalse(node0.isArrayLit());
852:       assertFalse(node0.isDefaultCase());
853:       assertFalse(node0.isFunction());
854:       assertFalse(node0.isTrue());
855:       assertEquals(0, node0.getChildCount());
856:       assertTrue(node0.isDo());
857:       assertFalse(node0.isIn());
858:       assertFalse(node0.isInc());
859:       assertFalse(node0.isSetterDef());
860:       assertEquals(114, node0.getType());
861:       assertFalse(node0.isStringKey());
862:       assertFalse(node0.isThis());
863:       assertFalse(node0.isParamList());
864:       assertFalse(node0.isVar());
865:       assertFalse(node0.isHook());
866:       assertFalse(node0.isInstanceOf());
867:       assertFalse(node0.isCatch());
868:       assertFalse(node0.isSwitch());
869:       assertFalse(node0.isWith());
870:       assertFalse(node0.hasMoreThanOneChild());
871:       assertFalse(node0.isRegExp());
872:       assertFalse(node0.isBlock());
873:       assertEquals((-1), node0.getCharno());
874:       assertFalse(node0.isTry());
875:       assertFalse(node0.isScript());
876:       assertFalse(node0.hasOneChild());
877:       assertFalse(node0.isCase());
878:       assertFalse(node0.isAssign());
879:       assertFalse(node0.isLabelName());
880:       assertFalse(node0.isNumber());
881:       assertFalse(node0.isTypeOf());
882:       assertEquals((-1), node0.getSourcePosition());
883:       assertFalse(node0.isDec());
884:       assertFalse(node0.hasChildren());
885:       assertFalse(node0.isLabel());
886:       assertEquals((-1), node0.getLineno());
887:       assertFalse(node0.isCast());
888:       assertFalse(node0.isExprResult());
889:       assertFalse(node0.isGetElem());
890:       assertFalse(node0.isContinue());
891:       assertFalse(node0.isAdd());
892:       assertFalse(node0.isOr());
893:       assertFalse(node0.isAssignAdd());
894:       assertFalse(node0.isNew());
895:       assertFalse(node0.isName());
896:       assertFalse(node0.isThrow());
897:       assertFalse(node0.isFalse());
898:       assertFalse(node0.isComma());
899:       assertFalse(node0.isNull());
900:       assertFalse(node0.isCall());
901:       assertFalse(node0.isBreak());
902:       assertFalse(node0.isWhile());
903:       assertFalse(node0.isNot());
904:       assertFalse(node0.isAnd());
905:       assertFalse(node0.isString());
906:       assertFalse(node0.isObjectLit());
907:       assertFalse(node0.isDebugger());
908:       assertFalse(node0.isReturn());
909:       assertFalse(node0.isGetProp());
910:       assertFalse(node2.isAssign());
911:       assertFalse(node2.isGetElem());
912:       assertFalse(node2.isExprResult());
913:       assertFalse(node2.isCast());
914:       assertFalse(node2.isTypeOf());
915:       assertFalse(node2.isScript());
916:       assertFalse(node2.isDec());
917:       assertFalse(node2.isAssignAdd());
918:       assertFalse(node2.isLabel());
919:       assertFalse(node2.isReturn());
920:       assertFalse(node2.hasMoreThanOneChild());
921:       assertFalse(node2.isOr());
922:       assertFalse(node2.isWith());
923:       assertFalse(node2.isInstanceOf());
924:       assertFalse(node2.isBreak());
925:       assertFalse(node2.isFalse());
926:       assertFalse(node2.isCall());
927:       assertFalse(node2.isInc());
928:       assertFalse(node2.isSetterDef());
929:       assertFalse(node2.isComma());
930:       assertFalse(node2.isWhile());
931:       assertFalse(node2.isThrow());
932:       assertFalse(node2.isObjectLit());
933:       assertFalse(node2.isNot());
934:       assertEquals(0, node2.getLineno());
935:       assertFalse(node2.isGetProp());
936:       assertFalse(node2.isString());
937:       assertFalse(node2.isContinue());
938:       assertEquals(2497, node2.getType());
939:       assertFalse(node2.isDebugger());
940:       assertEquals(30, node2.getCharno());
941:       assertFalse(node2.isAnd());
942:       assertFalse(node2.isArrayLit());
943:       assertFalse(node2.isEmpty());
944:       assertFalse(node2.isRegExp());
945:       assertFalse(node2.isFunction());
946:       assertFalse(node2.isDefaultCase());
947:       assertFalse(node2.isFor());
948:       assertFalse(node2.isTry());
949:       assertTrue(node2.hasOneChild());
950:       assertEquals(1, node2.getChildCount());
951:       assertTrue(node2.hasChildren());
952:       assertFalse(node2.isIn());
953:       assertFalse(node2.isCatch());
954:       assertFalse(node2.isNull());
955:       assertFalse(node2.isDelProp());
956:       assertFalse(node2.isVoid());
957:       assertFalse(node2.isName());
958:       assertFalse(node2.isTrue());
959:       assertFalse(node2.isIf());
960:       assertFalse(node2.isNE());
961:       assertFalse(node2.isVar());
962:       assertFalse(node2.isHook());
963:       assertFalse(node2.isAdd());
964:       assertFalse(node2.isThis());
965:       assertFalse(node2.isNew());
966:       assertFalse(node2.isDo());
967:       assertFalse(node2.isBlock());
968:       assertFalse(node2.isCase());
969:       assertFalse(node2.isSwitch());
970:       assertFalse(node2.isNumber());
971:       assertFalse(node2.isGetterDef());
972:       assertEquals(30, node2.getSourcePosition());
973:       assertFalse(node2.isLabelName());
974:       assertFalse(node2.isStringKey());
975:       assertFalse(node2.isParamList());
976:       
977:       boolean boolean0 = node1.isGetElem();
978:       assertFalse(boolean0);
979:       assertEquals(43, Node.IS_CONSTANT_NAME);
980:       assertEquals(36, Node.QUOTED_PROP);
981:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
982:       assertEquals(55, Node.INFERRED_FUNCTION);
983:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
984:       assertEquals(53, Node.INPUT_ID);
985:       assertEquals(29, Node.JSDOC_INFO_PROP);
986:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
987:       assertEquals(39, Node.EMPTY_BLOCK);
988:       assertEquals(56, Node.CHANGE_TIME);
989:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
990:       assertEquals(8, Node.FLAG_NO_THROWS);
991:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
992:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
993:       assertEquals(57, Node.REFLECTED_OBJECT);
994:       assertEquals(4095, Node.COLUMN_MASK);
995:       assertEquals(48, Node.DIRECTIVES);
996:       assertEquals(49, Node.DIRECT_EVAL);
997:       assertEquals(37, Node.OPT_ARG_NAME);
998:       assertEquals(15, Node.NO_SIDE_EFFECTS);
999:       assertEquals(57, Node.LAST_PROP);
1000:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1001:       assertEquals(30, Node.VAR_ARGS_NAME);
1002:       assertEquals(54, Node.SLASH_V);
1003:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1004:       assertEquals(12, Node.COLUMN_BITS);
1005:       assertEquals(32, Node.INCRDECR_PROP);
1006:       assertEquals(52, Node.LENGTH);
1007:       assertEquals(1, Node.DECR_FLAG);
1008:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1009:       assertEquals(2, Node.POST_FLAG);
1010:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1011:       assertEquals(50, Node.FREE_CALL);
1012:       assertEquals(47, Node.IS_DISPATCHER);
1013:       assertEquals(46, Node.IS_NAMESPACE);
1014:       assertEquals(40, Node.ORIGINALNAME_PROP);
1015:       assertFalse(node1.equals((Object)node0));
1016:       assertFalse(node1.equals((Object)node2));
1017:       assertFalse(node1.isEmpty());
1018:       assertFalse(node1.isFor());
1019:       assertFalse(node1.isDelProp());
1020:       assertFalse(node1.isIf());
1021:       assertFalse(node1.isGetterDef());
1022:       assertFalse(node1.isNE());
1023:       assertFalse(node1.isTry());
1024:       assertFalse(node1.isIn());
1025:       assertFalse(node1.isCase());
1026:       assertFalse(node1.isRegExp());
1027:       assertFalse(node1.isTrue());
1028:       assertFalse(node1.isVoid());
1029:       assertFalse(node1.isCatch());
1030:       assertFalse(node1.isThrow());
1031:       assertFalse(node1.isFalse());
1032:       assertFalse(node1.isComma());
1033:       assertFalse(node1.isInc());
1034:       assertFalse(node1.isGetProp());
1035:       assertFalse(node1.isSetterDef());
1036:       assertFalse(node1.isNot());
1037:       assertEquals(40, node1.getType());
1038:       assertFalse(node1.isAnd());
1039:       assertFalse(node1.isObjectLit());
1040:       assertFalse(node1.isContinue());
1041:       assertFalse(node1.isDebugger());
1042:       assertFalse(node1.isFunction());
1043:       assertFalse(node1.isCast());
1044:       assertFalse(node1.isAssign());
1045:       assertFalse(node1.isLabelName());
1046:       assertFalse(node1.isNumber());
1047:       assertEquals((-1), node1.getSourcePosition());
1048:       assertFalse(node1.isTypeOf());
1049:       assertFalse(node1.isDec());
1050:       assertFalse(node1.hasChildren());
1051:       assertFalse(node1.isAssignAdd());
1052:       assertFalse(node1.isOr());
1053:       assertFalse(node1.isScript());
1054:       assertFalse(node1.hasOneChild());
1055:       assertFalse(node1.isWhile());
1056:       assertFalse(node1.hasMoreThanOneChild());
1057:       assertFalse(node1.isWith());
1058:       assertFalse(node1.isReturn());
1059:       assertFalse(node1.isBlock());
1060:       assertEquals((-1), node1.getLineno());
1061:       assertFalse(node1.isInstanceOf());
1062:       assertFalse(node1.isBreak());
1063:       assertFalse(node1.isExprResult());
1064:       assertFalse(node1.isCall());
1065:       assertFalse(node1.isGetElem());
1066:       assertFalse(node1.isName());
1067:       assertFalse(node1.isStringKey());
1068:       assertFalse(node1.isVar());
1069:       assertFalse(node1.isNull());
1070:       assertFalse(node1.isParamList());
1071:       assertFalse(node1.isHook());
1072:       assertFalse(node1.isThis());
1073:       assertTrue(node1.isString());
1074:       assertFalse(node1.isAdd());
1075:       assertFalse(node1.isNew());
1076:       assertFalse(node1.isDo());
1077:       assertFalse(node1.isDefaultCase());
1078:       assertEquals(0, node1.getChildCount());
1079:       assertEquals((-1), node1.getCharno());
1080:       assertFalse(node1.isLabel());
1081:       assertFalse(node1.isSwitch());
1082:       assertFalse(node1.isArrayLit());
1083:   }
1084: }
RegularFileObject[/tmp/EvoSuite_119_1628157881542/com/google/javascript/rhino/Node_119_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_119_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_119_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_119_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:41.897 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(114, (-1707), (-1871));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node0);
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertTrue(node0.isDo());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(114, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isSwitch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());

Node node1 = Node.newString("", (-277), (-1707));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertEquals(40, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());

Node node2 = new Node(2497, node0, node0, node0, 0, 30);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertTrue(node0.isDo());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(114, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isSwitch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isScript());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isCall());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(0, node2.getLineno());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertEquals(2497, node2.getType());
assertFalse(node2.isDebugger());
assertEquals(30, node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertTrue(node2.hasOneChild());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isAdd());
assertFalse(node2.isThis());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals(30, node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());

Node node3 = node0.removeChildren();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node0, node2);
assertNull(node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertTrue(node0.isDo());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(114, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isSwitch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node2));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node0, node2);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertTrue(node0.isDo());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(114, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isSwitch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());

node1.addSuppression("q=lvL_oht *_!ep^i");
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertEquals(40, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());

int int0 = node2.getLineno();
assertEquals(0, int0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertTrue(node0.isDo());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(114, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isSwitch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isScript());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isCall());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals(0, node2.getLineno());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertEquals(2497, node2.getType());
assertFalse(node2.isDebugger());
assertEquals(30, node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertTrue(node2.hasOneChild());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isAdd());
assertFalse(node2.isThis());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals(30, node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());

boolean boolean0 = node1.isGetElem();
assertFalse(boolean0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertEquals(40, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertTrue(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());


[MASTER] 10:04:42.788 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_124_1628157882696/com/google/javascript/rhino/Node_124_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_124_1628157882696/com/google/javascript/rhino/Node_124_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:42.788 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:42.788 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:42.788 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 759
[MASTER] 10:04:42.789 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_124_1628157882696/com/google/javascript/rhino/Node_124_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:42 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_124_tmp__ESTest extends Node_124_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node((-872), (-872), 89);
21:       assertEquals(32, Node.INCRDECR_PROP);
22:       assertEquals(46, Node.IS_NAMESPACE);
23:       assertEquals(2, Node.POST_FLAG);
24:       assertEquals(12, Node.COLUMN_BITS);
25:       assertEquals(47, Node.IS_DISPATCHER);
26:       assertEquals(51, Node.STATIC_SOURCE_FILE);
27:       assertEquals(30, Node.VAR_ARGS_NAME);
28:       assertEquals(49, Node.DIRECT_EVAL);
29:       assertEquals(56, Node.CHANGE_TIME);
30:       assertEquals(37, Node.OPT_ARG_NAME);
31:       assertEquals(52, Node.LENGTH);
32:       assertEquals(53, Node.INPUT_ID);
33:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
34:       assertEquals(57, Node.REFLECTED_OBJECT);
35:       assertEquals(36, Node.QUOTED_PROP);
36:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
37:       assertEquals(29, Node.JSDOC_INFO_PROP);
38:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
39:       assertEquals(57, Node.LAST_PROP);
40:       assertEquals(55, Node.INFERRED_FUNCTION);
41:       assertEquals(39, Node.EMPTY_BLOCK);
42:       assertEquals(15, Node.NO_SIDE_EFFECTS);
43:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
44:       assertEquals(4095, Node.COLUMN_MASK);
45:       assertEquals(8, Node.FLAG_NO_THROWS);
46:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
47:       assertEquals(43, Node.IS_CONSTANT_NAME);
48:       assertEquals(40, Node.ORIGINALNAME_PROP);
49:       assertEquals(48, Node.DIRECTIVES);
50:       assertEquals(54, Node.SLASH_V);
51:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
52:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
55:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
56:       assertEquals(1, Node.DECR_FLAG);
57:       assertNotNull(node0);
58:       assertFalse(node0.isInc());
59:       assertFalse(node0.isSwitch());
60:       assertFalse(node0.isHook());
61:       assertEquals((-1), node0.getCharno());
62:       assertFalse(node0.isFalse());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isNE());
65:       assertFalse(node0.isIf());
66:       assertFalse(node0.isThrow());
67:       assertFalse(node0.isIn());
68:       assertFalse(node0.isEmpty());
69:       assertFalse(node0.isRegExp());
70:       assertFalse(node0.isScript());
71:       assertFalse(node0.isDefaultCase());
72:       assertFalse(node0.isWith());
73:       assertFalse(node0.isCatch());
74:       assertFalse(node0.isInstanceOf());
75:       assertFalse(node0.isLabelName());
76:       assertFalse(node0.isArrayLit());
77:       assertFalse(node0.isThis());
78:       assertFalse(node0.isParamList());
79:       assertFalse(node0.isNumber());
80:       assertFalse(node0.isFor());
81:       assertFalse(node0.isGetterDef());
82:       assertFalse(node0.isTry());
83:       assertFalse(node0.hasOneChild());
84:       assertFalse(node0.isCase());
85:       assertFalse(node0.isWhile());
86:       assertFalse(node0.isBlock());
87:       assertFalse(node0.isCall());
88:       assertFalse(node0.hasMoreThanOneChild());
89:       assertFalse(node0.isStringKey());
90:       assertFalse(node0.isName());
91:       assertFalse(node0.isContinue());
92:       assertEquals((-1), node0.getLineno());
93:       assertFalse(node0.isSetterDef());
94:       assertFalse(node0.isAssignAdd());
95:       assertEquals(0, node0.getChildCount());
96:       assertFalse(node0.isOr());
97:       assertFalse(node0.isNull());
98:       assertFalse(node0.isLabel());
99:       assertFalse(node0.isVar());
100:       assertFalse(node0.isDo());
101:       assertFalse(node0.isAdd());
102:       assertFalse(node0.isNew());
103:       assertFalse(node0.isExprResult());
104:       assertFalse(node0.isFunction());
105:       assertFalse(node0.isTrue());
106:       assertFalse(node0.isVoid());
107:       assertFalse(node0.isNot());
108:       assertFalse(node0.isDebugger());
109:       assertFalse(node0.isCast());
110:       assertFalse(node0.isAnd());
111:       assertFalse(node0.isDelProp());
112:       assertFalse(node0.isGetElem());
113:       assertFalse(node0.isComma());
114:       assertFalse(node0.isTypeOf());
115:       assertFalse(node0.isReturn());
116:       assertFalse(node0.isAssign());
117:       assertEquals((-872), node0.getType());
118:       assertEquals((-1), node0.getSourcePosition());
119:       assertFalse(node0.isDec());
120:       assertFalse(node0.hasChildren());
121:       assertFalse(node0.isObjectLit());
122:       assertFalse(node0.isString());
123:       assertFalse(node0.isGetProp());
124:       
125:       Node node1 = new Node((-205), node0, 16, 53);
126:       assertEquals(32, Node.INCRDECR_PROP);
127:       assertEquals(46, Node.IS_NAMESPACE);
128:       assertEquals(2, Node.POST_FLAG);
129:       assertEquals(12, Node.COLUMN_BITS);
130:       assertEquals(47, Node.IS_DISPATCHER);
131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
132:       assertEquals(30, Node.VAR_ARGS_NAME);
133:       assertEquals(49, Node.DIRECT_EVAL);
134:       assertEquals(56, Node.CHANGE_TIME);
135:       assertEquals(37, Node.OPT_ARG_NAME);
136:       assertEquals(52, Node.LENGTH);
137:       assertEquals(53, Node.INPUT_ID);
138:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
139:       assertEquals(57, Node.REFLECTED_OBJECT);
140:       assertEquals(36, Node.QUOTED_PROP);
141:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
142:       assertEquals(29, Node.JSDOC_INFO_PROP);
143:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
144:       assertEquals(57, Node.LAST_PROP);
145:       assertEquals(55, Node.INFERRED_FUNCTION);
146:       assertEquals(39, Node.EMPTY_BLOCK);
147:       assertEquals(15, Node.NO_SIDE_EFFECTS);
148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
149:       assertEquals(4095, Node.COLUMN_MASK);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
152:       assertEquals(43, Node.IS_CONSTANT_NAME);
153:       assertEquals(40, Node.ORIGINALNAME_PROP);
154:       assertEquals(48, Node.DIRECTIVES);
155:       assertEquals(54, Node.SLASH_V);
156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
157:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
158:       assertEquals(50, Node.FREE_CALL);
159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
160:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
161:       assertEquals(1, Node.DECR_FLAG);
162:       assertEquals(56, Node.CHANGE_TIME);
163:       assertEquals(29, Node.JSDOC_INFO_PROP);
164:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
165:       assertEquals(47, Node.IS_DISPATCHER);
166:       assertEquals(37, Node.OPT_ARG_NAME);
167:       assertEquals(32, Node.INCRDECR_PROP);
168:       assertEquals(46, Node.IS_NAMESPACE);
169:       assertEquals(51, Node.STATIC_SOURCE_FILE);
170:       assertEquals(53, Node.INPUT_ID);
171:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
172:       assertEquals(49, Node.DIRECT_EVAL);
173:       assertEquals(36, Node.QUOTED_PROP);
174:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
175:       assertEquals(1, Node.DECR_FLAG);
176:       assertEquals(12, Node.COLUMN_BITS);
177:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
178:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
179:       assertEquals(4095, Node.COLUMN_MASK);
180:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
181:       assertEquals(39, Node.EMPTY_BLOCK);
182:       assertEquals(48, Node.DIRECTIVES);
183:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
184:       assertEquals(57, Node.REFLECTED_OBJECT);
185:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
186:       assertEquals(55, Node.INFERRED_FUNCTION);
187:       assertEquals(50, Node.FREE_CALL);
188:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
189:       assertEquals(52, Node.LENGTH);
190:       assertEquals(8, Node.FLAG_NO_THROWS);
191:       assertEquals(30, Node.VAR_ARGS_NAME);
192:       assertEquals(15, Node.NO_SIDE_EFFECTS);
193:       assertEquals(54, Node.SLASH_V);
194:       assertEquals(43, Node.IS_CONSTANT_NAME);
195:       assertEquals(57, Node.LAST_PROP);
196:       assertEquals(40, Node.ORIGINALNAME_PROP);
197:       assertEquals(2, Node.POST_FLAG);
198:       assertNotNull(node1);
199:       assertFalse(node1.equals((Object)node0));
200:       assertFalse(node0.isInc());
201:       assertFalse(node0.isSwitch());
202:       assertFalse(node0.isHook());
203:       assertEquals((-1), node0.getCharno());
204:       assertFalse(node0.isFalse());
205:       assertFalse(node0.isBreak());
206:       assertFalse(node0.isNE());
207:       assertFalse(node0.isIf());
208:       assertFalse(node0.isThrow());
209:       assertFalse(node0.isIn());
210:       assertFalse(node0.isEmpty());
211:       assertFalse(node0.isRegExp());
212:       assertFalse(node0.isScript());
213:       assertFalse(node0.isDefaultCase());
214:       assertFalse(node0.isWith());
215:       assertFalse(node0.isCatch());
216:       assertFalse(node0.isInstanceOf());
217:       assertFalse(node0.isLabelName());
218:       assertFalse(node0.isArrayLit());
219:       assertFalse(node0.isThis());
220:       assertFalse(node0.isParamList());
221:       assertFalse(node0.isNumber());
222:       assertFalse(node0.isFor());
223:       assertFalse(node0.isGetterDef());
224:       assertFalse(node0.isTry());
225:       assertFalse(node0.hasOneChild());
226:       assertFalse(node0.isCase());
227:       assertFalse(node0.isWhile());
228:       assertFalse(node0.isBlock());
229:       assertFalse(node0.isCall());
230:       assertFalse(node0.hasMoreThanOneChild());
231:       assertFalse(node0.isStringKey());
232:       assertFalse(node0.isName());
233:       assertFalse(node0.isContinue());
234:       assertEquals((-1), node0.getLineno());
235:       assertFalse(node0.isSetterDef());
236:       assertFalse(node0.isAssignAdd());
237:       assertEquals(0, node0.getChildCount());
238:       assertFalse(node0.isOr());
239:       assertFalse(node0.isNull());
240:       assertFalse(node0.isLabel());
241:       assertFalse(node0.isVar());
242:       assertFalse(node0.isDo());
243:       assertFalse(node0.isAdd());
244:       assertFalse(node0.isNew());
245:       assertFalse(node0.isExprResult());
246:       assertFalse(node0.isFunction());
247:       assertFalse(node0.isTrue());
248:       assertFalse(node0.isVoid());
249:       assertFalse(node0.isNot());
250:       assertFalse(node0.isDebugger());
251:       assertFalse(node0.isCast());
252:       assertFalse(node0.isAnd());
253:       assertFalse(node0.isDelProp());
254:       assertFalse(node0.isGetElem());
255:       assertFalse(node0.isComma());
256:       assertFalse(node0.isTypeOf());
257:       assertFalse(node0.isReturn());
258:       assertFalse(node0.isAssign());
259:       assertEquals((-872), node0.getType());
260:       assertEquals((-1), node0.getSourcePosition());
261:       assertFalse(node0.isDec());
262:       assertFalse(node0.hasChildren());
263:       assertFalse(node0.isObjectLit());
264:       assertFalse(node0.isString());
265:       assertFalse(node0.isGetProp());
266:       assertFalse(node1.isContinue());
267:       assertFalse(node1.isWhile());
268:       assertFalse(node1.isAssignAdd());
269:       assertFalse(node1.isDo());
270:       assertFalse(node1.isNew());
271:       assertEquals(16, node1.getLineno());
272:       assertFalse(node1.isAdd());
273:       assertFalse(node1.isOr());
274:       assertEquals((-205), node1.getType());
275:       assertFalse(node1.isNumber());
276:       assertFalse(node1.isGetElem());
277:       assertFalse(node1.isCall());
278:       assertFalse(node1.isName());
279:       assertFalse(node1.isExprResult());
280:       assertFalse(node1.isReturn());
281:       assertFalse(node1.isBlock());
282:       assertFalse(node1.isDec());
283:       assertFalse(node1.isAssign());
284:       assertFalse(node1.hasMoreThanOneChild());
285:       assertFalse(node1.isWith());
286:       assertFalse(node1.isTypeOf());
287:       assertFalse(node1.isAnd());
288:       assertFalse(node1.isCatch());
289:       assertFalse(node1.isGetProp());
290:       assertFalse(node1.isDebugger());
291:       assertFalse(node1.isSetterDef());
292:       assertFalse(node1.isNot());
293:       assertFalse(node1.isObjectLit());
294:       assertFalse(node1.isThrow());
295:       assertFalse(node1.isCast());
296:       assertFalse(node1.isFalse());
297:       assertFalse(node1.isFunction());
298:       assertFalse(node1.isCase());
299:       assertFalse(node1.isSwitch());
300:       assertFalse(node1.isNE());
301:       assertFalse(node1.isInc());
302:       assertFalse(node1.isIn());
303:       assertFalse(node1.isGetterDef());
304:       assertFalse(node1.isString());
305:       assertFalse(node1.isFor());
306:       assertFalse(node1.isHook());
307:       assertTrue(node1.hasOneChild());
308:       assertFalse(node1.isBreak());
309:       assertFalse(node1.isIf());
310:       assertFalse(node1.isTry());
311:       assertEquals(53, node1.getCharno());
312:       assertFalse(node1.isDelProp());
313:       assertFalse(node1.isVoid());
314:       assertFalse(node1.isComma());
315:       assertTrue(node1.hasChildren());
316:       assertFalse(node1.isThis());
317:       assertFalse(node1.isInstanceOf());
318:       assertEquals(1, node1.getChildCount());
319:       assertFalse(node1.isRegExp());
320:       assertEquals(65589, node1.getSourcePosition());
321:       assertFalse(node1.isDefaultCase());
322:       assertFalse(node1.isParamList());
323:       assertFalse(node1.isScript());
324:       assertFalse(node1.isTrue());
325:       assertFalse(node1.isNull());
326:       assertFalse(node1.isStringKey());
327:       assertFalse(node1.isEmpty());
328:       assertFalse(node1.isVar());
329:       assertFalse(node1.isArrayLit());
330:       assertFalse(node1.isLabelName());
331:       assertFalse(node1.isLabel());
332:       
333:       node0.setSourceFileForTesting("o(QL");
334:       assertEquals(32, Node.INCRDECR_PROP);
335:       assertEquals(46, Node.IS_NAMESPACE);
336:       assertEquals(2, Node.POST_FLAG);
337:       assertEquals(12, Node.COLUMN_BITS);
338:       assertEquals(47, Node.IS_DISPATCHER);
339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
340:       assertEquals(30, Node.VAR_ARGS_NAME);
341:       assertEquals(49, Node.DIRECT_EVAL);
342:       assertEquals(56, Node.CHANGE_TIME);
343:       assertEquals(37, Node.OPT_ARG_NAME);
344:       assertEquals(52, Node.LENGTH);
345:       assertEquals(53, Node.INPUT_ID);
346:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
347:       assertEquals(57, Node.REFLECTED_OBJECT);
348:       assertEquals(36, Node.QUOTED_PROP);
349:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
350:       assertEquals(29, Node.JSDOC_INFO_PROP);
351:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
352:       assertEquals(57, Node.LAST_PROP);
353:       assertEquals(55, Node.INFERRED_FUNCTION);
354:       assertEquals(39, Node.EMPTY_BLOCK);
355:       assertEquals(15, Node.NO_SIDE_EFFECTS);
356:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
357:       assertEquals(4095, Node.COLUMN_MASK);
358:       assertEquals(8, Node.FLAG_NO_THROWS);
359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
360:       assertEquals(43, Node.IS_CONSTANT_NAME);
361:       assertEquals(40, Node.ORIGINALNAME_PROP);
362:       assertEquals(48, Node.DIRECTIVES);
363:       assertEquals(54, Node.SLASH_V);
364:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
365:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
366:       assertEquals(50, Node.FREE_CALL);
367:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
368:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
369:       assertEquals(1, Node.DECR_FLAG);
370:       assertNotSame(node0, node1);
371:       assertFalse(node0.equals((Object)node1));
372:       assertFalse(node0.isInc());
373:       assertFalse(node0.isSwitch());
374:       assertFalse(node0.isHook());
375:       assertEquals((-1), node0.getCharno());
376:       assertFalse(node0.isFalse());
377:       assertFalse(node0.isBreak());
378:       assertFalse(node0.isNE());
379:       assertFalse(node0.isIf());
380:       assertFalse(node0.isThrow());
381:       assertFalse(node0.isIn());
382:       assertFalse(node0.isEmpty());
383:       assertFalse(node0.isRegExp());
384:       assertFalse(node0.isScript());
385:       assertFalse(node0.isDefaultCase());
386:       assertFalse(node0.isWith());
387:       assertFalse(node0.isCatch());
388:       assertFalse(node0.isInstanceOf());
389:       assertFalse(node0.isLabelName());
390:       assertFalse(node0.isArrayLit());
391:       assertFalse(node0.isThis());
392:       assertFalse(node0.isParamList());
393:       assertFalse(node0.isNumber());
394:       assertFalse(node0.isFor());
395:       assertFalse(node0.isGetterDef());
396:       assertFalse(node0.isTry());
397:       assertFalse(node0.hasOneChild());
398:       assertFalse(node0.isCase());
399:       assertFalse(node0.isWhile());
400:       assertFalse(node0.isBlock());
401:       assertFalse(node0.isCall());
402:       assertFalse(node0.hasMoreThanOneChild());
403:       assertFalse(node0.isStringKey());
404:       assertFalse(node0.isName());
405:       assertFalse(node0.isContinue());
406:       assertEquals((-1), node0.getLineno());
407:       assertFalse(node0.isSetterDef());
408:       assertFalse(node0.isAssignAdd());
409:       assertEquals(0, node0.getChildCount());
410:       assertFalse(node0.isOr());
411:       assertFalse(node0.isNull());
412:       assertFalse(node0.isLabel());
413:       assertFalse(node0.isVar());
414:       assertFalse(node0.isDo());
415:       assertFalse(node0.isAdd());
416:       assertFalse(node0.isNew());
417:       assertFalse(node0.isExprResult());
418:       assertFalse(node0.isFunction());
419:       assertFalse(node0.isTrue());
420:       assertFalse(node0.isVoid());
421:       assertFalse(node0.isNot());
422:       assertFalse(node0.isDebugger());
423:       assertFalse(node0.isCast());
424:       assertFalse(node0.isAnd());
425:       assertFalse(node0.isDelProp());
426:       assertFalse(node0.isGetElem());
427:       assertFalse(node0.isComma());
428:       assertFalse(node0.isTypeOf());
429:       assertFalse(node0.isReturn());
430:       assertFalse(node0.isAssign());
431:       assertEquals((-872), node0.getType());
432:       assertEquals((-1), node0.getSourcePosition());
433:       assertFalse(node0.isDec());
434:       assertFalse(node0.hasChildren());
435:       assertFalse(node0.isObjectLit());
436:       assertFalse(node0.isString());
437:       assertFalse(node0.isGetProp());
438:       
439:       boolean boolean0 = node1.isEquivalentTo(node0, true, false, false);
440:       assertFalse(boolean0);
441:       assertEquals(32, Node.INCRDECR_PROP);
442:       assertEquals(46, Node.IS_NAMESPACE);
443:       assertEquals(2, Node.POST_FLAG);
444:       assertEquals(12, Node.COLUMN_BITS);
445:       assertEquals(47, Node.IS_DISPATCHER);
446:       assertEquals(51, Node.STATIC_SOURCE_FILE);
447:       assertEquals(30, Node.VAR_ARGS_NAME);
448:       assertEquals(49, Node.DIRECT_EVAL);
449:       assertEquals(56, Node.CHANGE_TIME);
450:       assertEquals(37, Node.OPT_ARG_NAME);
451:       assertEquals(52, Node.LENGTH);
452:       assertEquals(53, Node.INPUT_ID);
453:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
454:       assertEquals(57, Node.REFLECTED_OBJECT);
455:       assertEquals(36, Node.QUOTED_PROP);
456:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
457:       assertEquals(29, Node.JSDOC_INFO_PROP);
458:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
459:       assertEquals(57, Node.LAST_PROP);
460:       assertEquals(55, Node.INFERRED_FUNCTION);
461:       assertEquals(39, Node.EMPTY_BLOCK);
462:       assertEquals(15, Node.NO_SIDE_EFFECTS);
463:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
464:       assertEquals(4095, Node.COLUMN_MASK);
465:       assertEquals(8, Node.FLAG_NO_THROWS);
466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
467:       assertEquals(43, Node.IS_CONSTANT_NAME);
468:       assertEquals(40, Node.ORIGINALNAME_PROP);
469:       assertEquals(48, Node.DIRECTIVES);
470:       assertEquals(54, Node.SLASH_V);
471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
472:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
473:       assertEquals(50, Node.FREE_CALL);
474:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
475:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
476:       assertEquals(1, Node.DECR_FLAG);
477:       assertEquals(56, Node.CHANGE_TIME);
478:       assertEquals(29, Node.JSDOC_INFO_PROP);
479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
480:       assertEquals(47, Node.IS_DISPATCHER);
481:       assertEquals(37, Node.OPT_ARG_NAME);
482:       assertEquals(32, Node.INCRDECR_PROP);
483:       assertEquals(46, Node.IS_NAMESPACE);
484:       assertEquals(51, Node.STATIC_SOURCE_FILE);
485:       assertEquals(53, Node.INPUT_ID);
486:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
487:       assertEquals(49, Node.DIRECT_EVAL);
488:       assertEquals(36, Node.QUOTED_PROP);
489:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
490:       assertEquals(1, Node.DECR_FLAG);
491:       assertEquals(12, Node.COLUMN_BITS);
492:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
493:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
494:       assertEquals(4095, Node.COLUMN_MASK);
495:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
496:       assertEquals(39, Node.EMPTY_BLOCK);
497:       assertEquals(48, Node.DIRECTIVES);
498:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
499:       assertEquals(57, Node.REFLECTED_OBJECT);
500:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
501:       assertEquals(55, Node.INFERRED_FUNCTION);
502:       assertEquals(50, Node.FREE_CALL);
503:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
504:       assertEquals(52, Node.LENGTH);
505:       assertEquals(8, Node.FLAG_NO_THROWS);
506:       assertEquals(30, Node.VAR_ARGS_NAME);
507:       assertEquals(15, Node.NO_SIDE_EFFECTS);
508:       assertEquals(54, Node.SLASH_V);
509:       assertEquals(43, Node.IS_CONSTANT_NAME);
510:       assertEquals(57, Node.LAST_PROP);
511:       assertEquals(40, Node.ORIGINALNAME_PROP);
512:       assertEquals(2, Node.POST_FLAG);
513:       assertNotSame(node0, node1);
514:       assertNotSame(node1, node0);
515:       assertFalse(node0.equals((Object)node1));
516:       assertFalse(node1.equals((Object)node0));
517:       assertFalse(node0.isInc());
518:       assertFalse(node0.isSwitch());
519:       assertFalse(node0.isHook());
520:       assertEquals((-1), node0.getCharno());
521:       assertFalse(node0.isFalse());
522:       assertFalse(node0.isBreak());
523:       assertFalse(node0.isNE());
524:       assertFalse(node0.isIf());
525:       assertFalse(node0.isThrow());
526:       assertFalse(node0.isIn());
527:       assertFalse(node0.isEmpty());
528:       assertFalse(node0.isRegExp());
529:       assertFalse(node0.isScript());
530:       assertFalse(node0.isDefaultCase());
531:       assertFalse(node0.isWith());
532:       assertFalse(node0.isCatch());
533:       assertFalse(node0.isInstanceOf());
534:       assertFalse(node0.isLabelName());
535:       assertFalse(node0.isArrayLit());
536:       assertFalse(node0.isThis());
537:       assertFalse(node0.isParamList());
538:       assertFalse(node0.isNumber());
539:       assertFalse(node0.isFor());
540:       assertFalse(node0.isGetterDef());
541:       assertFalse(node0.isTry());
542:       assertFalse(node0.hasOneChild());
543:       assertFalse(node0.isCase());
544:       assertFalse(node0.isWhile());
545:       assertFalse(node0.isBlock());
546:       assertFalse(node0.isCall());
547:       assertFalse(node0.hasMoreThanOneChild());
548:       assertFalse(node0.isStringKey());
549:       assertFalse(node0.isName());
550:       assertFalse(node0.isContinue());
551:       assertEquals((-1), node0.getLineno());
552:       assertFalse(node0.isSetterDef());
553:       assertFalse(node0.isAssignAdd());
554:       assertEquals(0, node0.getChildCount());
555:       assertFalse(node0.isOr());
556:       assertFalse(node0.isNull());
557:       assertFalse(node0.isLabel());
558:       assertFalse(node0.isVar());
559:       assertFalse(node0.isDo());
560:       assertFalse(node0.isAdd());
561:       assertFalse(node0.isNew());
562:       assertFalse(node0.isExprResult());
563:       assertFalse(node0.isFunction());
564:       assertFalse(node0.isTrue());
565:       assertFalse(node0.isVoid());
566:       assertFalse(node0.isNot());
567:       assertFalse(node0.isDebugger());
568:       assertFalse(node0.isCast());
569:       assertFalse(node0.isAnd());
570:       assertFalse(node0.isDelProp());
571:       assertFalse(node0.isGetElem());
572:       assertFalse(node0.isComma());
573:       assertFalse(node0.isTypeOf());
574:       assertFalse(node0.isReturn());
575:       assertFalse(node0.isAssign());
576:       assertEquals((-872), node0.getType());
577:       assertEquals((-1), node0.getSourcePosition());
578:       assertFalse(node0.isDec());
579:       assertFalse(node0.hasChildren());
580:       assertFalse(node0.isObjectLit());
581:       assertFalse(node0.isString());
582:       assertFalse(node0.isGetProp());
583:       assertFalse(node1.isContinue());
584:       assertFalse(node1.isWhile());
585:       assertFalse(node1.isAssignAdd());
586:       assertFalse(node1.isDo());
587:       assertFalse(node1.isNew());
588:       assertEquals(16, node1.getLineno());
589:       assertFalse(node1.isAdd());
590:       assertFalse(node1.isOr());
591:       assertEquals((-205), node1.getType());
592:       assertFalse(node1.isNumber());
593:       assertFalse(node1.isGetElem());
594:       assertFalse(node1.isCall());
595:       assertFalse(node1.isName());
596:       assertFalse(node1.isExprResult());
597:       assertFalse(node1.isReturn());
598:       assertFalse(node1.isBlock());
599:       assertFalse(node1.isDec());
600:       assertFalse(node1.isAssign());
601:       assertFalse(node1.hasMoreThanOneChild());
602:       assertFalse(node1.isWith());
603:       assertFalse(node1.isTypeOf());
604:       assertFalse(node1.isAnd());
605:       assertFalse(node1.isCatch());
606:       assertFalse(node1.isGetProp());
607:       assertFalse(node1.isDebugger());
608:       assertFalse(node1.isSetterDef());
609:       assertFalse(node1.isNot());
610:       assertFalse(node1.isObjectLit());
611:       assertFalse(node1.isThrow());
612:       assertFalse(node1.isCast());
613:       assertFalse(node1.isFalse());
614:       assertFalse(node1.isFunction());
615:       assertFalse(node1.isCase());
616:       assertFalse(node1.isSwitch());
617:       assertFalse(node1.isNE());
618:       assertFalse(node1.isInc());
619:       assertFalse(node1.isIn());
620:       assertFalse(node1.isGetterDef());
621:       assertFalse(node1.isString());
622:       assertFalse(node1.isFor());
623:       assertFalse(node1.isHook());
624:       assertTrue(node1.hasOneChild());
625:       assertFalse(node1.isBreak());
626:       assertFalse(node1.isIf());
627:       assertFalse(node1.isTry());
628:       assertEquals(53, node1.getCharno());
629:       assertFalse(node1.isDelProp());
630:       assertFalse(node1.isVoid());
631:       assertFalse(node1.isComma());
632:       assertTrue(node1.hasChildren());
633:       assertFalse(node1.isThis());
634:       assertFalse(node1.isInstanceOf());
635:       assertEquals(1, node1.getChildCount());
636:       assertFalse(node1.isRegExp());
637:       assertEquals(65589, node1.getSourcePosition());
638:       assertFalse(node1.isDefaultCase());
639:       assertFalse(node1.isParamList());
640:       assertFalse(node1.isScript());
641:       assertFalse(node1.isTrue());
642:       assertFalse(node1.isNull());
643:       assertFalse(node1.isStringKey());
644:       assertFalse(node1.isEmpty());
645:       assertFalse(node1.isVar());
646:       assertFalse(node1.isArrayLit());
647:       assertFalse(node1.isLabelName());
648:       assertFalse(node1.isLabel());
649:       
650:       boolean boolean1 = node0.isDo();
651:       assertFalse(boolean1);
652:       assertEquals(32, Node.INCRDECR_PROP);
653:       assertEquals(46, Node.IS_NAMESPACE);
654:       assertEquals(2, Node.POST_FLAG);
655:       assertEquals(12, Node.COLUMN_BITS);
656:       assertEquals(47, Node.IS_DISPATCHER);
657:       assertEquals(51, Node.STATIC_SOURCE_FILE);
658:       assertEquals(30, Node.VAR_ARGS_NAME);
659:       assertEquals(49, Node.DIRECT_EVAL);
660:       assertEquals(56, Node.CHANGE_TIME);
661:       assertEquals(37, Node.OPT_ARG_NAME);
662:       assertEquals(52, Node.LENGTH);
663:       assertEquals(53, Node.INPUT_ID);
664:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
665:       assertEquals(57, Node.REFLECTED_OBJECT);
666:       assertEquals(36, Node.QUOTED_PROP);
667:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
668:       assertEquals(29, Node.JSDOC_INFO_PROP);
669:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
670:       assertEquals(57, Node.LAST_PROP);
671:       assertEquals(55, Node.INFERRED_FUNCTION);
672:       assertEquals(39, Node.EMPTY_BLOCK);
673:       assertEquals(15, Node.NO_SIDE_EFFECTS);
674:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
675:       assertEquals(4095, Node.COLUMN_MASK);
676:       assertEquals(8, Node.FLAG_NO_THROWS);
677:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
678:       assertEquals(43, Node.IS_CONSTANT_NAME);
679:       assertEquals(40, Node.ORIGINALNAME_PROP);
680:       assertEquals(48, Node.DIRECTIVES);
681:       assertEquals(54, Node.SLASH_V);
682:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
683:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
684:       assertEquals(50, Node.FREE_CALL);
685:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
687:       assertEquals(1, Node.DECR_FLAG);
688:       assertNotSame(node0, node1);
689:       assertFalse(node0.equals((Object)node1));
690:       assertTrue(boolean1 == boolean0);
691:       assertFalse(node0.isInc());
692:       assertFalse(node0.isSwitch());
693:       assertFalse(node0.isHook());
694:       assertEquals((-1), node0.getCharno());
695:       assertFalse(node0.isFalse());
696:       assertFalse(node0.isBreak());
697:       assertFalse(node0.isNE());
698:       assertFalse(node0.isIf());
699:       assertFalse(node0.isThrow());
700:       assertFalse(node0.isIn());
701:       assertFalse(node0.isEmpty());
702:       assertFalse(node0.isRegExp());
703:       assertFalse(node0.isScript());
704:       assertFalse(node0.isDefaultCase());
705:       assertFalse(node0.isWith());
706:       assertFalse(node0.isCatch());
707:       assertFalse(node0.isInstanceOf());
708:       assertFalse(node0.isLabelName());
709:       assertFalse(node0.isArrayLit());
710:       assertFalse(node0.isThis());
711:       assertFalse(node0.isParamList());
712:       assertFalse(node0.isNumber());
713:       assertFalse(node0.isFor());
714:       assertFalse(node0.isGetterDef());
715:       assertFalse(node0.isTry());
716:       assertFalse(node0.hasOneChild());
717:       assertFalse(node0.isCase());
718:       assertFalse(node0.isWhile());
719:       assertFalse(node0.isBlock());
720:       assertFalse(node0.isCall());
721:       assertFalse(node0.hasMoreThanOneChild());
722:       assertFalse(node0.isStringKey());
723:       assertFalse(node0.isName());
724:       assertFalse(node0.isContinue());
725:       assertEquals((-1), node0.getLineno());
726:       assertFalse(node0.isSetterDef());
727:       assertFalse(node0.isAssignAdd());
728:       assertEquals(0, node0.getChildCount());
729:       assertFalse(node0.isOr());
730:       assertFalse(node0.isNull());
731:       assertFalse(node0.isLabel());
732:       assertFalse(node0.isVar());
733:       assertFalse(node0.isDo());
734:       assertFalse(node0.isAdd());
735:       assertFalse(node0.isNew());
736:       assertFalse(node0.isExprResult());
737:       assertFalse(node0.isFunction());
738:       assertFalse(node0.isTrue());
739:       assertFalse(node0.isVoid());
740:       assertFalse(node0.isNot());
741:       assertFalse(node0.isDebugger());
742:       assertFalse(node0.isCast());
743:       assertFalse(node0.isAnd());
744:       assertFalse(node0.isDelProp());
745:       assertFalse(node0.isGetElem());
746:       assertFalse(node0.isComma());
747:       assertFalse(node0.isTypeOf());
748:       assertFalse(node0.isReturn());
749:       assertFalse(node0.isAssign());
750:       assertEquals((-872), node0.getType());
751:       assertEquals((-1), node0.getSourcePosition());
752:       assertFalse(node0.isDec());
753:       assertFalse(node0.hasChildren());
754:       assertFalse(node0.isObjectLit());
755:       assertFalse(node0.isString());
756:       assertFalse(node0.isGetProp());
757:       
758:       Iterable<Node> iterable0 = node0.children();
759:       assertFalse(iterable0.contains(node0));
760:       assertEquals(32, Node.INCRDECR_PROP);
761:       assertEquals(46, Node.IS_NAMESPACE);
762:       assertEquals(2, Node.POST_FLAG);
763:       assertEquals(12, Node.COLUMN_BITS);
764:       assertEquals(47, Node.IS_DISPATCHER);
765:       assertEquals(51, Node.STATIC_SOURCE_FILE);
766:       assertEquals(30, Node.VAR_ARGS_NAME);
767:       assertEquals(49, Node.DIRECT_EVAL);
768:       assertEquals(56, Node.CHANGE_TIME);
769:       assertEquals(37, Node.OPT_ARG_NAME);
770:       assertEquals(52, Node.LENGTH);
771:       assertEquals(53, Node.INPUT_ID);
772:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
773:       assertEquals(57, Node.REFLECTED_OBJECT);
774:       assertEquals(36, Node.QUOTED_PROP);
775:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
776:       assertEquals(29, Node.JSDOC_INFO_PROP);
777:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
778:       assertEquals(57, Node.LAST_PROP);
779:       assertEquals(55, Node.INFERRED_FUNCTION);
780:       assertEquals(39, Node.EMPTY_BLOCK);
781:       assertEquals(15, Node.NO_SIDE_EFFECTS);
782:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
783:       assertEquals(4095, Node.COLUMN_MASK);
784:       assertEquals(8, Node.FLAG_NO_THROWS);
785:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
786:       assertEquals(43, Node.IS_CONSTANT_NAME);
787:       assertEquals(40, Node.ORIGINALNAME_PROP);
788:       assertEquals(48, Node.DIRECTIVES);
789:       assertEquals(54, Node.SLASH_V);
790:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
791:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
792:       assertEquals(50, Node.FREE_CALL);
793:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
794:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
795:       assertEquals(1, Node.DECR_FLAG);
796:       assertNotSame(node0, node1);
797:       assertNotNull(iterable0);
798:       assertFalse(node0.equals((Object)node1));
799:       assertFalse(node0.isInc());
800:       assertFalse(node0.isSwitch());
801:       assertFalse(node0.isHook());
802:       assertEquals((-1), node0.getCharno());
803:       assertFalse(node0.isFalse());
804:       assertFalse(node0.isBreak());
805:       assertFalse(node0.isNE());
806:       assertFalse(node0.isIf());
807:       assertFalse(node0.isThrow());
808:       assertFalse(node0.isIn());
809:       assertFalse(node0.isEmpty());
810:       assertFalse(node0.isRegExp());
811:       assertFalse(node0.isScript());
812:       assertFalse(node0.isDefaultCase());
813:       assertFalse(node0.isWith());
814:       assertFalse(node0.isCatch());
815:       assertFalse(node0.isInstanceOf());
816:       assertFalse(node0.isLabelName());
817:       assertFalse(node0.isArrayLit());
818:       assertFalse(node0.isThis());
819:       assertFalse(node0.isParamList());
820:       assertFalse(node0.isNumber());
821:       assertFalse(node0.isFor());
822:       assertFalse(node0.isGetterDef());
823:       assertFalse(node0.isTry());
824:       assertFalse(node0.hasOneChild());
825:       assertFalse(node0.isCase());
826:       assertFalse(node0.isWhile());
827:       assertFalse(node0.isBlock());
828:       assertFalse(node0.isCall());
829:       assertFalse(node0.hasMoreThanOneChild());
830:       assertFalse(node0.isStringKey());
831:       assertFalse(node0.isName());
832:       assertFalse(node0.isContinue());
833:       assertEquals((-1), node0.getLineno());
834:       assertFalse(node0.isSetterDef());
835:       assertFalse(node0.isAssignAdd());
836:       assertEquals(0, node0.getChildCount());
837:       assertFalse(node0.isOr());
838:       assertFalse(node0.isNull());
839:       assertFalse(node0.isLabel());
840:       assertFalse(node0.isVar());
841:       assertFalse(node0.isDo());
842:       assertFalse(node0.isAdd());
843:       assertFalse(node0.isNew());
844:       assertFalse(node0.isExprResult());
845:       assertFalse(node0.isFunction());
846:       assertFalse(node0.isTrue());
847:       assertFalse(node0.isVoid());
848:       assertFalse(node0.isNot());
849:       assertFalse(node0.isDebugger());
850:       assertFalse(node0.isCast());
851:       assertFalse(node0.isAnd());
852:       assertFalse(node0.isDelProp());
853:       assertFalse(node0.isGetElem());
854:       assertFalse(node0.isComma());
855:       assertFalse(node0.isTypeOf());
856:       assertFalse(node0.isReturn());
857:       assertFalse(node0.isAssign());
858:       assertEquals((-872), node0.getType());
859:       assertEquals((-1), node0.getSourcePosition());
860:       assertFalse(node0.isDec());
861:       assertFalse(node0.hasChildren());
862:       assertFalse(node0.isObjectLit());
863:       assertFalse(node0.isString());
864:       assertFalse(node0.isGetProp());
865:       
866:       boolean boolean2 = node1.isHook();
867:       assertFalse(boolean2);
868:       assertEquals(32, Node.INCRDECR_PROP);
869:       assertEquals(46, Node.IS_NAMESPACE);
870:       assertEquals(2, Node.POST_FLAG);
871:       assertEquals(12, Node.COLUMN_BITS);
872:       assertEquals(47, Node.IS_DISPATCHER);
873:       assertEquals(51, Node.STATIC_SOURCE_FILE);
874:       assertEquals(30, Node.VAR_ARGS_NAME);
875:       assertEquals(49, Node.DIRECT_EVAL);
876:       assertEquals(56, Node.CHANGE_TIME);
877:       assertEquals(37, Node.OPT_ARG_NAME);
878:       assertEquals(52, Node.LENGTH);
879:       assertEquals(53, Node.INPUT_ID);
880:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
881:       assertEquals(57, Node.REFLECTED_OBJECT);
882:       assertEquals(36, Node.QUOTED_PROP);
883:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
884:       assertEquals(29, Node.JSDOC_INFO_PROP);
885:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
886:       assertEquals(57, Node.LAST_PROP);
887:       assertEquals(55, Node.INFERRED_FUNCTION);
888:       assertEquals(39, Node.EMPTY_BLOCK);
889:       assertEquals(15, Node.NO_SIDE_EFFECTS);
890:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
891:       assertEquals(4095, Node.COLUMN_MASK);
892:       assertEquals(8, Node.FLAG_NO_THROWS);
893:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
894:       assertEquals(43, Node.IS_CONSTANT_NAME);
895:       assertEquals(40, Node.ORIGINALNAME_PROP);
896:       assertEquals(48, Node.DIRECTIVES);
897:       assertEquals(54, Node.SLASH_V);
898:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
899:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
900:       assertEquals(50, Node.FREE_CALL);
901:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
902:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
903:       assertEquals(1, Node.DECR_FLAG);
904:       assertEquals(56, Node.CHANGE_TIME);
905:       assertEquals(29, Node.JSDOC_INFO_PROP);
906:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
907:       assertEquals(47, Node.IS_DISPATCHER);
908:       assertEquals(37, Node.OPT_ARG_NAME);
909:       assertEquals(32, Node.INCRDECR_PROP);
910:       assertEquals(46, Node.IS_NAMESPACE);
911:       assertEquals(51, Node.STATIC_SOURCE_FILE);
912:       assertEquals(53, Node.INPUT_ID);
913:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
914:       assertEquals(49, Node.DIRECT_EVAL);
915:       assertEquals(36, Node.QUOTED_PROP);
916:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
917:       assertEquals(1, Node.DECR_FLAG);
918:       assertEquals(12, Node.COLUMN_BITS);
919:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
920:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
921:       assertEquals(4095, Node.COLUMN_MASK);
922:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
923:       assertEquals(39, Node.EMPTY_BLOCK);
924:       assertEquals(48, Node.DIRECTIVES);
925:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
926:       assertEquals(57, Node.REFLECTED_OBJECT);
927:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
928:       assertEquals(55, Node.INFERRED_FUNCTION);
929:       assertEquals(50, Node.FREE_CALL);
930:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
931:       assertEquals(52, Node.LENGTH);
932:       assertEquals(8, Node.FLAG_NO_THROWS);
933:       assertEquals(30, Node.VAR_ARGS_NAME);
934:       assertEquals(15, Node.NO_SIDE_EFFECTS);
935:       assertEquals(54, Node.SLASH_V);
936:       assertEquals(43, Node.IS_CONSTANT_NAME);
937:       assertEquals(57, Node.LAST_PROP);
938:       assertEquals(40, Node.ORIGINALNAME_PROP);
939:       assertEquals(2, Node.POST_FLAG);
940:       assertNotSame(node0, node1);
941:       assertNotSame(node1, node0);
942:       assertFalse(node0.equals((Object)node1));
943:       assertFalse(node1.equals((Object)node0));
944:       assertTrue(boolean2 == boolean1);
945:       assertTrue(boolean2 == boolean0);
946:       assertFalse(node0.isInc());
947:       assertFalse(node0.isSwitch());
948:       assertFalse(node0.isHook());
949:       assertEquals((-1), node0.getCharno());
950:       assertFalse(node0.isFalse());
951:       assertFalse(node0.isBreak());
952:       assertFalse(node0.isNE());
953:       assertFalse(node0.isIf());
954:       assertFalse(node0.isThrow());
955:       assertFalse(node0.isIn());
956:       assertFalse(node0.isEmpty());
957:       assertFalse(node0.isRegExp());
958:       assertFalse(node0.isScript());
959:       assertFalse(node0.isDefaultCase());
960:       assertFalse(node0.isWith());
961:       assertFalse(node0.isCatch());
962:       assertFalse(node0.isInstanceOf());
963:       assertFalse(node0.isLabelName());
964:       assertFalse(node0.isArrayLit());
965:       assertFalse(node0.isThis());
966:       assertFalse(node0.isParamList());
967:       assertFalse(node0.isNumber());
968:       assertFalse(node0.isFor());
969:       assertFalse(node0.isGetterDef());
970:       assertFalse(node0.isTry());
971:       assertFalse(node0.hasOneChild());
972:       assertFalse(node0.isCase());
973:       assertFalse(node0.isWhile());
974:       assertFalse(node0.isBlock());
975:       assertFalse(node0.isCall());
976:       assertFalse(node0.hasMoreThanOneChild());
977:       assertFalse(node0.isStringKey());
978:       assertFalse(node0.isName());
979:       assertFalse(node0.isContinue());
980:       assertEquals((-1), node0.getLineno());
981:       assertFalse(node0.isSetterDef());
982:       assertFalse(node0.isAssignAdd());
983:       assertEquals(0, node0.getChildCount());
984:       assertFalse(node0.isOr());
985:       assertFalse(node0.isNull());
986:       assertFalse(node0.isLabel());
987:       assertFalse(node0.isVar());
988:       assertFalse(node0.isDo());
989:       assertFalse(node0.isAdd());
990:       assertFalse(node0.isNew());
991:       assertFalse(node0.isExprResult());
992:       assertFalse(node0.isFunction());
993:       assertFalse(node0.isTrue());
994:       assertFalse(node0.isVoid());
995:       assertFalse(node0.isNot());
996:       assertFalse(node0.isDebugger());
997:       assertFalse(node0.isCast());
998:       assertFalse(node0.isAnd());
999:       assertFalse(node0.isDelProp());
1000:       assertFalse(node0.isGetElem());
1001:       assertFalse(node0.isComma());
1002:       assertFalse(node0.isTypeOf());
1003:       assertFalse(node0.isReturn());
1004:       assertFalse(node0.isAssign());
1005:       assertEquals((-872), node0.getType());
1006:       assertEquals((-1), node0.getSourcePosition());
1007:       assertFalse(node0.isDec());
1008:       assertFalse(node0.hasChildren());
1009:       assertFalse(node0.isObjectLit());
1010:       assertFalse(node0.isString());
1011:       assertFalse(node0.isGetProp());
1012:       assertFalse(node1.isContinue());
1013:       assertFalse(node1.isWhile());
1014:       assertFalse(node1.isAssignAdd());
1015:       assertFalse(node1.isDo());
1016:       assertFalse(node1.isNew());
1017:       assertEquals(16, node1.getLineno());
1018:       assertFalse(node1.isAdd());
1019:       assertFalse(node1.isOr());
1020:       assertEquals((-205), node1.getType());
1021:       assertFalse(node1.isNumber());
1022:       assertFalse(node1.isGetElem());
1023:       assertFalse(node1.isCall());
1024:       assertFalse(node1.isName());
1025:       assertFalse(node1.isExprResult());
1026:       assertFalse(node1.isReturn());
1027:       assertFalse(node1.isBlock());
1028:       assertFalse(node1.isDec());
1029:       assertFalse(node1.isAssign());
1030:       assertFalse(node1.hasMoreThanOneChild());
1031:       assertFalse(node1.isWith());
1032:       assertFalse(node1.isTypeOf());
1033:       assertFalse(node1.isAnd());
1034:       assertFalse(node1.isCatch());
1035:       assertFalse(node1.isGetProp());
1036:       assertFalse(node1.isDebugger());
1037:       assertFalse(node1.isSetterDef());
1038:       assertFalse(node1.isNot());
1039:       assertFalse(node1.isObjectLit());
1040:       assertFalse(node1.isThrow());
1041:       assertFalse(node1.isCast());
1042:       assertFalse(node1.isFalse());
1043:       assertFalse(node1.isFunction());
1044:       assertFalse(node1.isCase());
1045:       assertFalse(node1.isSwitch());
1046:       assertFalse(node1.isNE());
1047:       assertFalse(node1.isInc());
1048:       assertFalse(node1.isIn());
1049:       assertFalse(node1.isGetterDef());
1050:       assertFalse(node1.isString());
1051:       assertFalse(node1.isFor());
1052:       assertFalse(node1.isHook());
1053:       assertTrue(node1.hasOneChild());
1054:       assertFalse(node1.isBreak());
1055:       assertFalse(node1.isIf());
1056:       assertFalse(node1.isTry());
1057:       assertEquals(53, node1.getCharno());
1058:       assertFalse(node1.isDelProp());
1059:       assertFalse(node1.isVoid());
1060:       assertFalse(node1.isComma());
1061:       assertTrue(node1.hasChildren());
1062:       assertFalse(node1.isThis());
1063:       assertFalse(node1.isInstanceOf());
1064:       assertEquals(1, node1.getChildCount());
1065:       assertFalse(node1.isRegExp());
1066:       assertEquals(65589, node1.getSourcePosition());
1067:       assertFalse(node1.isDefaultCase());
1068:       assertFalse(node1.isParamList());
1069:       assertFalse(node1.isScript());
1070:       assertFalse(node1.isTrue());
1071:       assertFalse(node1.isNull());
1072:       assertFalse(node1.isStringKey());
1073:       assertFalse(node1.isEmpty());
1074:       assertFalse(node1.isVar());
1075:       assertFalse(node1.isArrayLit());
1076:       assertFalse(node1.isLabelName());
1077:       assertFalse(node1.isLabel());
1078:       
1079:       boolean boolean3 = node0.isCall();
1080:       assertFalse(boolean3);
1081:       assertEquals(32, Node.INCRDECR_PROP);
1082:       assertEquals(46, Node.IS_NAMESPACE);
1083:       assertEquals(2, Node.POST_FLAG);
1084:       assertEquals(12, Node.COLUMN_BITS);
1085:       assertEquals(47, Node.IS_DISPATCHER);
1086:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1087:       assertEquals(30, Node.VAR_ARGS_NAME);
1088:       assertEquals(49, Node.DIRECT_EVAL);
1089:       assertEquals(56, Node.CHANGE_TIME);
1090:       assertEquals(37, Node.OPT_ARG_NAME);
1091:       assertEquals(52, Node.LENGTH);
1092:       assertEquals(53, Node.INPUT_ID);
1093:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1094:       assertEquals(57, Node.REFLECTED_OBJECT);
1095:       assertEquals(36, Node.QUOTED_PROP);
1096:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1097:       assertEquals(29, Node.JSDOC_INFO_PROP);
1098:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1099:       assertEquals(57, Node.LAST_PROP);
1100:       assertEquals(55, Node.INFERRED_FUNCTION);
1101:       assertEquals(39, Node.EMPTY_BLOCK);
1102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1103:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1104:       assertEquals(4095, Node.COLUMN_MASK);
1105:       assertEquals(8, Node.FLAG_NO_THROWS);
1106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1107:       assertEquals(43, Node.IS_CONSTANT_NAME);
1108:       assertEquals(40, Node.ORIGINALNAME_PROP);
1109:       assertEquals(48, Node.DIRECTIVES);
1110:       assertEquals(54, Node.SLASH_V);
1111:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1113:       assertEquals(50, Node.FREE_CALL);
1114:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1115:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1116:       assertEquals(1, Node.DECR_FLAG);
1117:       assertNotSame(node0, node1);
1118:       assertFalse(node0.equals((Object)node1));
1119:       assertTrue(boolean3 == boolean0);
1120:       assertTrue(boolean3 == boolean2);
1121:       assertTrue(boolean3 == boolean1);
1122:       assertFalse(node0.isInc());
1123:       assertFalse(node0.isSwitch());
1124:       assertFalse(node0.isHook());
1125:       assertEquals((-1), node0.getCharno());
1126:       assertFalse(node0.isFalse());
1127:       assertFalse(node0.isBreak());
1128:       assertFalse(node0.isNE());
1129:       assertFalse(node0.isIf());
1130:       assertFalse(node0.isThrow());
1131:       assertFalse(node0.isIn());
1132:       assertFalse(node0.isEmpty());
1133:       assertFalse(node0.isRegExp());
1134:       assertFalse(node0.isScript());
1135:       assertFalse(node0.isDefaultCase());
1136:       assertFalse(node0.isWith());
1137:       assertFalse(node0.isCatch());
1138:       assertFalse(node0.isInstanceOf());
1139:       assertFalse(node0.isLabelName());
1140:       assertFalse(node0.isArrayLit());
1141:       assertFalse(node0.isThis());
1142:       assertFalse(node0.isParamList());
1143:       assertFalse(node0.isNumber());
1144:       assertFalse(node0.isFor());
1145:       assertFalse(node0.isGetterDef());
1146:       assertFalse(node0.isTry());
1147:       assertFalse(node0.hasOneChild());
1148:       assertFalse(node0.isCase());
1149:       assertFalse(node0.isWhile());
1150:       assertFalse(node0.isBlock());
1151:       assertFalse(node0.isCall());
1152:       assertFalse(node0.hasMoreThanOneChild());
1153:       assertFalse(node0.isStringKey());
1154:       assertFalse(node0.isName());
1155:       assertFalse(node0.isContinue());
1156:       assertEquals((-1), node0.getLineno());
1157:       assertFalse(node0.isSetterDef());
1158:       assertFalse(node0.isAssignAdd());
1159:       assertEquals(0, node0.getChildCount());
1160:       assertFalse(node0.isOr());
1161:       assertFalse(node0.isNull());
1162:       assertFalse(node0.isLabel());
1163:       assertFalse(node0.isVar());
1164:       assertFalse(node0.isDo());
1165:       assertFalse(node0.isAdd());
1166:       assertFalse(node0.isNew());
1167:       assertFalse(node0.isExprResult());
1168:       assertFalse(node0.isFunction());
1169:       assertFalse(node0.isTrue());
1170:       assertFalse(node0.isVoid());
1171:       assertFalse(node0.isNot());
1172:       assertFalse(node0.isDebugger());
1173:       assertFalse(node0.isCast());
1174:       assertFalse(node0.isAnd());
1175:       assertFalse(node0.isDelProp());
1176:       assertFalse(node0.isGetElem());
1177:       assertFalse(node0.isComma());
1178:       assertFalse(node0.isTypeOf());
1179:       assertFalse(node0.isReturn());
1180:       assertFalse(node0.isAssign());
1181:       assertEquals((-872), node0.getType());
1182:       assertEquals((-1), node0.getSourcePosition());
1183:       assertFalse(node0.isDec());
1184:       assertFalse(node0.hasChildren());
1185:       assertFalse(node0.isObjectLit());
1186:       assertFalse(node0.isString());
1187:       assertFalse(node0.isGetProp());
1188:   }
1189: }
RegularFileObject[/tmp/EvoSuite_124_1628157882696/com/google/javascript/rhino/Node_124_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:42 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_124_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_124_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_124_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:42.825 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node((-872), (-872), 89);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node0);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-872), node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());

Node node1 = new Node((-205), node0, 16, 53);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-872), node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertEquals(16, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-205), node1.getType());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertEquals(53, node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertTrue(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertEquals(65589, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());

node0.setSourceFileForTesting("o(QL");
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-872), node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());

boolean boolean0 = node1.isEquivalentTo(node0, true, false, false);
assertFalse(boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-872), node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertEquals(16, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-205), node1.getType());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertEquals(53, node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertTrue(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertEquals(65589, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());

boolean boolean1 = node0.isDo();
assertFalse(boolean1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-872), node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node0, node1);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-872), node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());

boolean boolean2 = node1.isHook();
assertFalse(boolean2);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-872), node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertEquals(16, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-205), node1.getType());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertTrue(node1.hasOneChild());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertEquals(53, node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertTrue(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertEquals(65589, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());

boolean boolean3 = node0.isCall();
assertFalse(boolean3);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals((-872), node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());


[MASTER] 10:04:43.881 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_129_1628157883593/com/google/javascript/rhino/Node_129_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_129_1628157883593/com/google/javascript/rhino/Node_129_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:43.881 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:43.881 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:43.882 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 862
[MASTER] 10:04:43.883 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_129_1628157883593/com/google/javascript/rhino/Node_129_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_129_tmp__ESTest extends Node_129_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(0.0);
23:       assertEquals(56, Node.CHANGE_TIME);
24:       assertEquals(46, Node.IS_NAMESPACE);
25:       assertEquals(47, Node.IS_DISPATCHER);
26:       assertEquals(12, Node.COLUMN_BITS);
27:       assertEquals(2, Node.POST_FLAG);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
30:       assertEquals(49, Node.DIRECT_EVAL);
31:       assertEquals(37, Node.OPT_ARG_NAME);
32:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
33:       assertEquals(54, Node.SLASH_V);
34:       assertEquals(43, Node.IS_CONSTANT_NAME);
35:       assertEquals(1, Node.DECR_FLAG);
36:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
37:       assertEquals(32, Node.INCRDECR_PROP);
38:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
39:       assertEquals(48, Node.DIRECTIVES);
40:       assertEquals(8, Node.FLAG_NO_THROWS);
41:       assertEquals(39, Node.EMPTY_BLOCK);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(50, Node.FREE_CALL);
44:       assertEquals(40, Node.ORIGINALNAME_PROP);
45:       assertEquals(4095, Node.COLUMN_MASK);
46:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
47:       assertEquals(53, Node.INPUT_ID);
48:       assertEquals(52, Node.LENGTH);
49:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
50:       assertEquals(57, Node.REFLECTED_OBJECT);
51:       assertEquals(30, Node.VAR_ARGS_NAME);
52:       assertEquals(36, Node.QUOTED_PROP);
53:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
54:       assertEquals(55, Node.INFERRED_FUNCTION);
55:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
56:       assertEquals(29, Node.JSDOC_INFO_PROP);
57:       assertEquals(15, Node.NO_SIDE_EFFECTS);
58:       assertEquals(57, Node.LAST_PROP);
59:       assertNotNull(node0);
60:       assertFalse(node0.isSwitch());
61:       assertFalse(node0.isString());
62:       assertEquals((-1), node0.getCharno());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isGetterDef());
65:       assertFalse(node0.isFor());
66:       assertFalse(node0.isComma());
67:       assertFalse(node0.isThis());
68:       assertFalse(node0.isHook());
69:       assertFalse(node0.isTry());
70:       assertTrue(node0.isNumber());
71:       assertFalse(node0.isGetProp());
72:       assertFalse(node0.isCase());
73:       assertFalse(node0.isRegExp());
74:       assertFalse(node0.isFunction());
75:       assertFalse(node0.isWith());
76:       assertFalse(node0.isNot());
77:       assertFalse(node0.isObjectLit());
78:       assertFalse(node0.isDebugger());
79:       assertFalse(node0.isInstanceOf());
80:       assertFalse(node0.isCast());
81:       assertFalse(node0.isCatch());
82:       assertFalse(node0.isAnd());
83:       assertFalse(node0.isNE());
84:       assertFalse(node0.isIf());
85:       assertFalse(node0.isFalse());
86:       assertFalse(node0.isThrow());
87:       assertFalse(node0.isIn());
88:       assertFalse(node0.isInc());
89:       assertFalse(node0.isSetterDef());
90:       assertFalse(node0.isWhile());
91:       assertFalse(node0.isBlock());
92:       assertEquals(39, node0.getType());
93:       assertFalse(node0.hasMoreThanOneChild());
94:       assertFalse(node0.isContinue());
95:       assertFalse(node0.isCall());
96:       assertFalse(node0.isName());
97:       assertEquals((-1), node0.getLineno());
98:       assertEquals((-1), node0.getSourcePosition());
99:       assertFalse(node0.isDec());
100:       assertFalse(node0.isTypeOf());
101:       assertFalse(node0.isParamList());
102:       assertFalse(node0.isStringKey());
103:       assertFalse(node0.isAssign());
104:       assertFalse(node0.isReturn());
105:       assertFalse(node0.hasChildren());
106:       assertFalse(node0.hasOneChild());
107:       assertFalse(node0.isDefaultCase());
108:       assertFalse(node0.isScript());
109:       assertFalse(node0.isTrue());
110:       assertEquals(0, node0.getChildCount());
111:       assertFalse(node0.isGetElem());
112:       assertFalse(node0.isVoid());
113:       assertFalse(node0.isExprResult());
114:       assertFalse(node0.isLabelName());
115:       assertFalse(node0.isArrayLit());
116:       assertFalse(node0.isDelProp());
117:       assertFalse(node0.isNull());
118:       assertFalse(node0.isOr());
119:       assertFalse(node0.isLabel());
120:       assertFalse(node0.isVar());
121:       assertFalse(node0.isAssignAdd());
122:       assertFalse(node0.isNew());
123:       assertFalse(node0.isEmpty());
124:       assertFalse(node0.isDo());
125:       assertFalse(node0.isAdd());
126:       
127:       Node node1 = Node.newString(0, "", 4, 38);
128:       assertEquals(49, Node.DIRECT_EVAL);
129:       assertEquals(30, Node.VAR_ARGS_NAME);
130:       assertEquals(1, Node.DECR_FLAG);
131:       assertEquals(12, Node.COLUMN_BITS);
132:       assertEquals(57, Node.LAST_PROP);
133:       assertEquals(46, Node.IS_NAMESPACE);
134:       assertEquals(54, Node.SLASH_V);
135:       assertEquals(52, Node.LENGTH);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(51, Node.STATIC_SOURCE_FILE);
138:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
139:       assertEquals(15, Node.NO_SIDE_EFFECTS);
140:       assertEquals(29, Node.JSDOC_INFO_PROP);
141:       assertEquals(50, Node.FREE_CALL);
142:       assertEquals(47, Node.IS_DISPATCHER);
143:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
144:       assertEquals(2, Node.POST_FLAG);
145:       assertEquals(40, Node.ORIGINALNAME_PROP);
146:       assertEquals(36, Node.QUOTED_PROP);
147:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
148:       assertEquals(43, Node.IS_CONSTANT_NAME);
149:       assertEquals(53, Node.INPUT_ID);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(39, Node.EMPTY_BLOCK);
152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
156:       assertEquals(57, Node.REFLECTED_OBJECT);
157:       assertEquals(56, Node.CHANGE_TIME);
158:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
159:       assertEquals(37, Node.OPT_ARG_NAME);
160:       assertEquals(48, Node.DIRECTIVES);
161:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
162:       assertEquals(4095, Node.COLUMN_MASK);
163:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
164:       assertNotNull(node1);
165:       assertFalse(node1.equals((Object)node0));
166:       assertFalse(node1.isVar());
167:       assertFalse(node1.isCall());
168:       assertFalse(node1.isName());
169:       assertFalse(node1.isBlock());
170:       assertFalse(node1.isStringKey());
171:       assertFalse(node1.isSetterDef());
172:       assertFalse(node1.isNull());
173:       assertFalse(node1.isNew());
174:       assertFalse(node1.isAdd());
175:       assertEquals(0, node1.getChildCount());
176:       assertEquals(38, node1.getCharno());
177:       assertFalse(node1.isAssignAdd());
178:       assertFalse(node1.isDo());
179:       assertFalse(node1.isDefaultCase());
180:       assertFalse(node1.isParamList());
181:       assertEquals(4, node1.getLineno());
182:       assertFalse(node1.isFunction());
183:       assertFalse(node1.isLabel());
184:       assertFalse(node1.isContinue());
185:       assertFalse(node1.hasOneChild());
186:       assertFalse(node1.isArrayLit());
187:       assertFalse(node1.isLabelName());
188:       assertFalse(node1.isTry());
189:       assertFalse(node1.isFor());
190:       assertFalse(node1.isIf());
191:       assertEquals(16422, node1.getSourcePosition());
192:       assertFalse(node1.isNE());
193:       assertFalse(node1.isScript());
194:       assertFalse(node1.isGetterDef());
195:       assertFalse(node1.isIn());
196:       assertFalse(node1.isNumber());
197:       assertFalse(node1.hasMoreThanOneChild());
198:       assertFalse(node1.isCatch());
199:       assertFalse(node1.isCase());
200:       assertFalse(node1.isThis());
201:       assertFalse(node1.isRegExp());
202:       assertFalse(node1.isWith());
203:       assertFalse(node1.isInstanceOf());
204:       assertFalse(node1.isHook());
205:       assertFalse(node1.isThrow());
206:       assertFalse(node1.isInc());
207:       assertFalse(node1.isGetProp());
208:       assertFalse(node1.isString());
209:       assertFalse(node1.isObjectLit());
210:       assertFalse(node1.isAnd());
211:       assertFalse(node1.isSwitch());
212:       assertFalse(node1.isFalse());
213:       assertFalse(node1.isCast());
214:       assertFalse(node1.isDelProp());
215:       assertFalse(node1.isTrue());
216:       assertFalse(node1.isDebugger());
217:       assertFalse(node1.isEmpty());
218:       assertFalse(node1.isNot());
219:       assertFalse(node1.isOr());
220:       assertFalse(node1.isReturn());
221:       assertFalse(node1.isWhile());
222:       assertFalse(node1.isComma());
223:       assertFalse(node1.isExprResult());
224:       assertFalse(node1.isTypeOf());
225:       assertFalse(node1.isBreak());
226:       assertFalse(node1.isVoid());
227:       assertFalse(node1.isDec());
228:       assertFalse(node1.hasChildren());
229:       assertFalse(node1.isAssign());
230:       assertFalse(node1.isGetElem());
231:       assertEquals(0, node1.getType());
232:       
233:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
234:       assertEquals(56, Node.CHANGE_TIME);
235:       assertEquals(46, Node.IS_NAMESPACE);
236:       assertEquals(47, Node.IS_DISPATCHER);
237:       assertEquals(12, Node.COLUMN_BITS);
238:       assertEquals(2, Node.POST_FLAG);
239:       assertEquals(51, Node.STATIC_SOURCE_FILE);
240:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
241:       assertEquals(49, Node.DIRECT_EVAL);
242:       assertEquals(37, Node.OPT_ARG_NAME);
243:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
244:       assertEquals(54, Node.SLASH_V);
245:       assertEquals(43, Node.IS_CONSTANT_NAME);
246:       assertEquals(1, Node.DECR_FLAG);
247:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
248:       assertEquals(32, Node.INCRDECR_PROP);
249:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
250:       assertEquals(48, Node.DIRECTIVES);
251:       assertEquals(8, Node.FLAG_NO_THROWS);
252:       assertEquals(39, Node.EMPTY_BLOCK);
253:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
254:       assertEquals(50, Node.FREE_CALL);
255:       assertEquals(40, Node.ORIGINALNAME_PROP);
256:       assertEquals(4095, Node.COLUMN_MASK);
257:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
258:       assertEquals(53, Node.INPUT_ID);
259:       assertEquals(52, Node.LENGTH);
260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
261:       assertEquals(57, Node.REFLECTED_OBJECT);
262:       assertEquals(30, Node.VAR_ARGS_NAME);
263:       assertEquals(36, Node.QUOTED_PROP);
264:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
265:       assertEquals(55, Node.INFERRED_FUNCTION);
266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
267:       assertEquals(29, Node.JSDOC_INFO_PROP);
268:       assertEquals(15, Node.NO_SIDE_EFFECTS);
269:       assertEquals(57, Node.LAST_PROP);
270:       assertEquals(49, Node.DIRECT_EVAL);
271:       assertEquals(30, Node.VAR_ARGS_NAME);
272:       assertEquals(1, Node.DECR_FLAG);
273:       assertEquals(12, Node.COLUMN_BITS);
274:       assertEquals(57, Node.LAST_PROP);
275:       assertEquals(46, Node.IS_NAMESPACE);
276:       assertEquals(54, Node.SLASH_V);
277:       assertEquals(52, Node.LENGTH);
278:       assertEquals(32, Node.INCRDECR_PROP);
279:       assertEquals(51, Node.STATIC_SOURCE_FILE);
280:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
281:       assertEquals(15, Node.NO_SIDE_EFFECTS);
282:       assertEquals(29, Node.JSDOC_INFO_PROP);
283:       assertEquals(50, Node.FREE_CALL);
284:       assertEquals(47, Node.IS_DISPATCHER);
285:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
286:       assertEquals(2, Node.POST_FLAG);
287:       assertEquals(40, Node.ORIGINALNAME_PROP);
288:       assertEquals(36, Node.QUOTED_PROP);
289:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
290:       assertEquals(43, Node.IS_CONSTANT_NAME);
291:       assertEquals(53, Node.INPUT_ID);
292:       assertEquals(8, Node.FLAG_NO_THROWS);
293:       assertEquals(39, Node.EMPTY_BLOCK);
294:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
295:       assertEquals(55, Node.INFERRED_FUNCTION);
296:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
297:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
298:       assertEquals(57, Node.REFLECTED_OBJECT);
299:       assertEquals(56, Node.CHANGE_TIME);
300:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
301:       assertEquals(37, Node.OPT_ARG_NAME);
302:       assertEquals(48, Node.DIRECTIVES);
303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
304:       assertEquals(4095, Node.COLUMN_MASK);
305:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
306:       assertNotNull(node_NodeMismatch0);
307:       assertFalse(node0.equals((Object)node1));
308:       assertFalse(node1.equals((Object)node0));
309:       assertFalse(node0.isSwitch());
310:       assertFalse(node0.isString());
311:       assertEquals((-1), node0.getCharno());
312:       assertFalse(node0.isBreak());
313:       assertFalse(node0.isGetterDef());
314:       assertFalse(node0.isFor());
315:       assertFalse(node0.isComma());
316:       assertFalse(node0.isThis());
317:       assertFalse(node0.isHook());
318:       assertFalse(node0.isTry());
319:       assertTrue(node0.isNumber());
320:       assertFalse(node0.isGetProp());
321:       assertFalse(node0.isCase());
322:       assertFalse(node0.isRegExp());
323:       assertFalse(node0.isFunction());
324:       assertFalse(node0.isWith());
325:       assertFalse(node0.isNot());
326:       assertFalse(node0.isObjectLit());
327:       assertFalse(node0.isDebugger());
328:       assertFalse(node0.isInstanceOf());
329:       assertFalse(node0.isCast());
330:       assertFalse(node0.isCatch());
331:       assertFalse(node0.isAnd());
332:       assertFalse(node0.isNE());
333:       assertFalse(node0.isIf());
334:       assertFalse(node0.isFalse());
335:       assertFalse(node0.isThrow());
336:       assertFalse(node0.isIn());
337:       assertFalse(node0.isInc());
338:       assertFalse(node0.isSetterDef());
339:       assertFalse(node0.isWhile());
340:       assertFalse(node0.isBlock());
341:       assertEquals(39, node0.getType());
342:       assertFalse(node0.hasMoreThanOneChild());
343:       assertFalse(node0.isContinue());
344:       assertFalse(node0.isCall());
345:       assertFalse(node0.isName());
346:       assertEquals((-1), node0.getLineno());
347:       assertEquals((-1), node0.getSourcePosition());
348:       assertFalse(node0.isDec());
349:       assertFalse(node0.isTypeOf());
350:       assertFalse(node0.isParamList());
351:       assertFalse(node0.isStringKey());
352:       assertFalse(node0.isAssign());
353:       assertFalse(node0.isReturn());
354:       assertFalse(node0.hasChildren());
355:       assertFalse(node0.hasOneChild());
356:       assertFalse(node0.isDefaultCase());
357:       assertFalse(node0.isScript());
358:       assertFalse(node0.isTrue());
359:       assertEquals(0, node0.getChildCount());
360:       assertFalse(node0.isGetElem());
361:       assertFalse(node0.isVoid());
362:       assertFalse(node0.isExprResult());
363:       assertFalse(node0.isLabelName());
364:       assertFalse(node0.isArrayLit());
365:       assertFalse(node0.isDelProp());
366:       assertFalse(node0.isNull());
367:       assertFalse(node0.isOr());
368:       assertFalse(node0.isLabel());
369:       assertFalse(node0.isVar());
370:       assertFalse(node0.isAssignAdd());
371:       assertFalse(node0.isNew());
372:       assertFalse(node0.isEmpty());
373:       assertFalse(node0.isDo());
374:       assertFalse(node0.isAdd());
375:       assertFalse(node1.isVar());
376:       assertFalse(node1.isCall());
377:       assertFalse(node1.isName());
378:       assertFalse(node1.isBlock());
379:       assertFalse(node1.isStringKey());
380:       assertFalse(node1.isSetterDef());
381:       assertFalse(node1.isNull());
382:       assertFalse(node1.isNew());
383:       assertFalse(node1.isAdd());
384:       assertEquals(0, node1.getChildCount());
385:       assertEquals(38, node1.getCharno());
386:       assertFalse(node1.isAssignAdd());
387:       assertFalse(node1.isDo());
388:       assertFalse(node1.isDefaultCase());
389:       assertFalse(node1.isParamList());
390:       assertEquals(4, node1.getLineno());
391:       assertFalse(node1.isFunction());
392:       assertFalse(node1.isLabel());
393:       assertFalse(node1.isContinue());
394:       assertFalse(node1.hasOneChild());
395:       assertFalse(node1.isArrayLit());
396:       assertFalse(node1.isLabelName());
397:       assertFalse(node1.isTry());
398:       assertFalse(node1.isFor());
399:       assertFalse(node1.isIf());
400:       assertEquals(16422, node1.getSourcePosition());
401:       assertFalse(node1.isNE());
402:       assertFalse(node1.isScript());
403:       assertFalse(node1.isGetterDef());
404:       assertFalse(node1.isIn());
405:       assertFalse(node1.isNumber());
406:       assertFalse(node1.hasMoreThanOneChild());
407:       assertFalse(node1.isCatch());
408:       assertFalse(node1.isCase());
409:       assertFalse(node1.isThis());
410:       assertFalse(node1.isRegExp());
411:       assertFalse(node1.isWith());
412:       assertFalse(node1.isInstanceOf());
413:       assertFalse(node1.isHook());
414:       assertFalse(node1.isThrow());
415:       assertFalse(node1.isInc());
416:       assertFalse(node1.isGetProp());
417:       assertFalse(node1.isString());
418:       assertFalse(node1.isObjectLit());
419:       assertFalse(node1.isAnd());
420:       assertFalse(node1.isSwitch());
421:       assertFalse(node1.isFalse());
422:       assertFalse(node1.isCast());
423:       assertFalse(node1.isDelProp());
424:       assertFalse(node1.isTrue());
425:       assertFalse(node1.isDebugger());
426:       assertFalse(node1.isEmpty());
427:       assertFalse(node1.isNot());
428:       assertFalse(node1.isOr());
429:       assertFalse(node1.isReturn());
430:       assertFalse(node1.isWhile());
431:       assertFalse(node1.isComma());
432:       assertFalse(node1.isExprResult());
433:       assertFalse(node1.isTypeOf());
434:       assertFalse(node1.isBreak());
435:       assertFalse(node1.isVoid());
436:       assertFalse(node1.isDec());
437:       assertFalse(node1.hasChildren());
438:       assertFalse(node1.isAssign());
439:       assertFalse(node1.isGetElem());
440:       assertEquals(0, node1.getType());
441:       
442:       boolean boolean0 = node_NodeMismatch0.equals("");
443:       assertFalse(boolean0);
444:       assertEquals(56, Node.CHANGE_TIME);
445:       assertEquals(46, Node.IS_NAMESPACE);
446:       assertEquals(47, Node.IS_DISPATCHER);
447:       assertEquals(12, Node.COLUMN_BITS);
448:       assertEquals(2, Node.POST_FLAG);
449:       assertEquals(51, Node.STATIC_SOURCE_FILE);
450:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
451:       assertEquals(49, Node.DIRECT_EVAL);
452:       assertEquals(37, Node.OPT_ARG_NAME);
453:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
454:       assertEquals(54, Node.SLASH_V);
455:       assertEquals(43, Node.IS_CONSTANT_NAME);
456:       assertEquals(1, Node.DECR_FLAG);
457:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
458:       assertEquals(32, Node.INCRDECR_PROP);
459:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
460:       assertEquals(48, Node.DIRECTIVES);
461:       assertEquals(8, Node.FLAG_NO_THROWS);
462:       assertEquals(39, Node.EMPTY_BLOCK);
463:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
464:       assertEquals(50, Node.FREE_CALL);
465:       assertEquals(40, Node.ORIGINALNAME_PROP);
466:       assertEquals(4095, Node.COLUMN_MASK);
467:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
468:       assertEquals(53, Node.INPUT_ID);
469:       assertEquals(52, Node.LENGTH);
470:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
471:       assertEquals(57, Node.REFLECTED_OBJECT);
472:       assertEquals(30, Node.VAR_ARGS_NAME);
473:       assertEquals(36, Node.QUOTED_PROP);
474:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
475:       assertEquals(55, Node.INFERRED_FUNCTION);
476:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
477:       assertEquals(29, Node.JSDOC_INFO_PROP);
478:       assertEquals(15, Node.NO_SIDE_EFFECTS);
479:       assertEquals(57, Node.LAST_PROP);
480:       assertEquals(49, Node.DIRECT_EVAL);
481:       assertEquals(30, Node.VAR_ARGS_NAME);
482:       assertEquals(1, Node.DECR_FLAG);
483:       assertEquals(12, Node.COLUMN_BITS);
484:       assertEquals(57, Node.LAST_PROP);
485:       assertEquals(46, Node.IS_NAMESPACE);
486:       assertEquals(54, Node.SLASH_V);
487:       assertEquals(52, Node.LENGTH);
488:       assertEquals(32, Node.INCRDECR_PROP);
489:       assertEquals(51, Node.STATIC_SOURCE_FILE);
490:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
491:       assertEquals(15, Node.NO_SIDE_EFFECTS);
492:       assertEquals(29, Node.JSDOC_INFO_PROP);
493:       assertEquals(50, Node.FREE_CALL);
494:       assertEquals(47, Node.IS_DISPATCHER);
495:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
496:       assertEquals(2, Node.POST_FLAG);
497:       assertEquals(40, Node.ORIGINALNAME_PROP);
498:       assertEquals(36, Node.QUOTED_PROP);
499:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
500:       assertEquals(43, Node.IS_CONSTANT_NAME);
501:       assertEquals(53, Node.INPUT_ID);
502:       assertEquals(8, Node.FLAG_NO_THROWS);
503:       assertEquals(39, Node.EMPTY_BLOCK);
504:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
505:       assertEquals(55, Node.INFERRED_FUNCTION);
506:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
507:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
508:       assertEquals(57, Node.REFLECTED_OBJECT);
509:       assertEquals(56, Node.CHANGE_TIME);
510:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
511:       assertEquals(37, Node.OPT_ARG_NAME);
512:       assertEquals(48, Node.DIRECTIVES);
513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
514:       assertEquals(4095, Node.COLUMN_MASK);
515:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
516:       assertFalse(node0.equals((Object)node1));
517:       assertFalse(node1.equals((Object)node0));
518:       assertFalse(node0.isSwitch());
519:       assertFalse(node0.isString());
520:       assertEquals((-1), node0.getCharno());
521:       assertFalse(node0.isBreak());
522:       assertFalse(node0.isGetterDef());
523:       assertFalse(node0.isFor());
524:       assertFalse(node0.isComma());
525:       assertFalse(node0.isThis());
526:       assertFalse(node0.isHook());
527:       assertFalse(node0.isTry());
528:       assertTrue(node0.isNumber());
529:       assertFalse(node0.isGetProp());
530:       assertFalse(node0.isCase());
531:       assertFalse(node0.isRegExp());
532:       assertFalse(node0.isFunction());
533:       assertFalse(node0.isWith());
534:       assertFalse(node0.isNot());
535:       assertFalse(node0.isObjectLit());
536:       assertFalse(node0.isDebugger());
537:       assertFalse(node0.isInstanceOf());
538:       assertFalse(node0.isCast());
539:       assertFalse(node0.isCatch());
540:       assertFalse(node0.isAnd());
541:       assertFalse(node0.isNE());
542:       assertFalse(node0.isIf());
543:       assertFalse(node0.isFalse());
544:       assertFalse(node0.isThrow());
545:       assertFalse(node0.isIn());
546:       assertFalse(node0.isInc());
547:       assertFalse(node0.isSetterDef());
548:       assertFalse(node0.isWhile());
549:       assertFalse(node0.isBlock());
550:       assertEquals(39, node0.getType());
551:       assertFalse(node0.hasMoreThanOneChild());
552:       assertFalse(node0.isContinue());
553:       assertFalse(node0.isCall());
554:       assertFalse(node0.isName());
555:       assertEquals((-1), node0.getLineno());
556:       assertEquals((-1), node0.getSourcePosition());
557:       assertFalse(node0.isDec());
558:       assertFalse(node0.isTypeOf());
559:       assertFalse(node0.isParamList());
560:       assertFalse(node0.isStringKey());
561:       assertFalse(node0.isAssign());
562:       assertFalse(node0.isReturn());
563:       assertFalse(node0.hasChildren());
564:       assertFalse(node0.hasOneChild());
565:       assertFalse(node0.isDefaultCase());
566:       assertFalse(node0.isScript());
567:       assertFalse(node0.isTrue());
568:       assertEquals(0, node0.getChildCount());
569:       assertFalse(node0.isGetElem());
570:       assertFalse(node0.isVoid());
571:       assertFalse(node0.isExprResult());
572:       assertFalse(node0.isLabelName());
573:       assertFalse(node0.isArrayLit());
574:       assertFalse(node0.isDelProp());
575:       assertFalse(node0.isNull());
576:       assertFalse(node0.isOr());
577:       assertFalse(node0.isLabel());
578:       assertFalse(node0.isVar());
579:       assertFalse(node0.isAssignAdd());
580:       assertFalse(node0.isNew());
581:       assertFalse(node0.isEmpty());
582:       assertFalse(node0.isDo());
583:       assertFalse(node0.isAdd());
584:       assertFalse(node1.isVar());
585:       assertFalse(node1.isCall());
586:       assertFalse(node1.isName());
587:       assertFalse(node1.isBlock());
588:       assertFalse(node1.isStringKey());
589:       assertFalse(node1.isSetterDef());
590:       assertFalse(node1.isNull());
591:       assertFalse(node1.isNew());
592:       assertFalse(node1.isAdd());
593:       assertEquals(0, node1.getChildCount());
594:       assertEquals(38, node1.getCharno());
595:       assertFalse(node1.isAssignAdd());
596:       assertFalse(node1.isDo());
597:       assertFalse(node1.isDefaultCase());
598:       assertFalse(node1.isParamList());
599:       assertEquals(4, node1.getLineno());
600:       assertFalse(node1.isFunction());
601:       assertFalse(node1.isLabel());
602:       assertFalse(node1.isContinue());
603:       assertFalse(node1.hasOneChild());
604:       assertFalse(node1.isArrayLit());
605:       assertFalse(node1.isLabelName());
606:       assertFalse(node1.isTry());
607:       assertFalse(node1.isFor());
608:       assertFalse(node1.isIf());
609:       assertEquals(16422, node1.getSourcePosition());
610:       assertFalse(node1.isNE());
611:       assertFalse(node1.isScript());
612:       assertFalse(node1.isGetterDef());
613:       assertFalse(node1.isIn());
614:       assertFalse(node1.isNumber());
615:       assertFalse(node1.hasMoreThanOneChild());
616:       assertFalse(node1.isCatch());
617:       assertFalse(node1.isCase());
618:       assertFalse(node1.isThis());
619:       assertFalse(node1.isRegExp());
620:       assertFalse(node1.isWith());
621:       assertFalse(node1.isInstanceOf());
622:       assertFalse(node1.isHook());
623:       assertFalse(node1.isThrow());
624:       assertFalse(node1.isInc());
625:       assertFalse(node1.isGetProp());
626:       assertFalse(node1.isString());
627:       assertFalse(node1.isObjectLit());
628:       assertFalse(node1.isAnd());
629:       assertFalse(node1.isSwitch());
630:       assertFalse(node1.isFalse());
631:       assertFalse(node1.isCast());
632:       assertFalse(node1.isDelProp());
633:       assertFalse(node1.isTrue());
634:       assertFalse(node1.isDebugger());
635:       assertFalse(node1.isEmpty());
636:       assertFalse(node1.isNot());
637:       assertFalse(node1.isOr());
638:       assertFalse(node1.isReturn());
639:       assertFalse(node1.isWhile());
640:       assertFalse(node1.isComma());
641:       assertFalse(node1.isExprResult());
642:       assertFalse(node1.isTypeOf());
643:       assertFalse(node1.isBreak());
644:       assertFalse(node1.isVoid());
645:       assertFalse(node1.isDec());
646:       assertFalse(node1.hasChildren());
647:       assertFalse(node1.isAssign());
648:       assertFalse(node1.isGetElem());
649:       assertEquals(0, node1.getType());
650:       
651:       boolean boolean1 = node0.isEquivalentTo(node1, false, false, true);
652:       assertFalse(boolean1);
653:       assertEquals(56, Node.CHANGE_TIME);
654:       assertEquals(46, Node.IS_NAMESPACE);
655:       assertEquals(47, Node.IS_DISPATCHER);
656:       assertEquals(12, Node.COLUMN_BITS);
657:       assertEquals(2, Node.POST_FLAG);
658:       assertEquals(51, Node.STATIC_SOURCE_FILE);
659:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
660:       assertEquals(49, Node.DIRECT_EVAL);
661:       assertEquals(37, Node.OPT_ARG_NAME);
662:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
663:       assertEquals(54, Node.SLASH_V);
664:       assertEquals(43, Node.IS_CONSTANT_NAME);
665:       assertEquals(1, Node.DECR_FLAG);
666:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
667:       assertEquals(32, Node.INCRDECR_PROP);
668:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
669:       assertEquals(48, Node.DIRECTIVES);
670:       assertEquals(8, Node.FLAG_NO_THROWS);
671:       assertEquals(39, Node.EMPTY_BLOCK);
672:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
673:       assertEquals(50, Node.FREE_CALL);
674:       assertEquals(40, Node.ORIGINALNAME_PROP);
675:       assertEquals(4095, Node.COLUMN_MASK);
676:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
677:       assertEquals(53, Node.INPUT_ID);
678:       assertEquals(52, Node.LENGTH);
679:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
680:       assertEquals(57, Node.REFLECTED_OBJECT);
681:       assertEquals(30, Node.VAR_ARGS_NAME);
682:       assertEquals(36, Node.QUOTED_PROP);
683:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
684:       assertEquals(55, Node.INFERRED_FUNCTION);
685:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
686:       assertEquals(29, Node.JSDOC_INFO_PROP);
687:       assertEquals(15, Node.NO_SIDE_EFFECTS);
688:       assertEquals(57, Node.LAST_PROP);
689:       assertEquals(49, Node.DIRECT_EVAL);
690:       assertEquals(30, Node.VAR_ARGS_NAME);
691:       assertEquals(1, Node.DECR_FLAG);
692:       assertEquals(12, Node.COLUMN_BITS);
693:       assertEquals(57, Node.LAST_PROP);
694:       assertEquals(46, Node.IS_NAMESPACE);
695:       assertEquals(54, Node.SLASH_V);
696:       assertEquals(52, Node.LENGTH);
697:       assertEquals(32, Node.INCRDECR_PROP);
698:       assertEquals(51, Node.STATIC_SOURCE_FILE);
699:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
700:       assertEquals(15, Node.NO_SIDE_EFFECTS);
701:       assertEquals(29, Node.JSDOC_INFO_PROP);
702:       assertEquals(50, Node.FREE_CALL);
703:       assertEquals(47, Node.IS_DISPATCHER);
704:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
705:       assertEquals(2, Node.POST_FLAG);
706:       assertEquals(40, Node.ORIGINALNAME_PROP);
707:       assertEquals(36, Node.QUOTED_PROP);
708:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
709:       assertEquals(43, Node.IS_CONSTANT_NAME);
710:       assertEquals(53, Node.INPUT_ID);
711:       assertEquals(8, Node.FLAG_NO_THROWS);
712:       assertEquals(39, Node.EMPTY_BLOCK);
713:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
714:       assertEquals(55, Node.INFERRED_FUNCTION);
715:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
717:       assertEquals(57, Node.REFLECTED_OBJECT);
718:       assertEquals(56, Node.CHANGE_TIME);
719:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
720:       assertEquals(37, Node.OPT_ARG_NAME);
721:       assertEquals(48, Node.DIRECTIVES);
722:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
723:       assertEquals(4095, Node.COLUMN_MASK);
724:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
725:       assertFalse(node0.equals((Object)node1));
726:       assertFalse(node1.equals((Object)node0));
727:       assertTrue(boolean1 == boolean0);
728:       assertFalse(node0.isSwitch());
729:       assertFalse(node0.isString());
730:       assertEquals((-1), node0.getCharno());
731:       assertFalse(node0.isBreak());
732:       assertFalse(node0.isGetterDef());
733:       assertFalse(node0.isFor());
734:       assertFalse(node0.isComma());
735:       assertFalse(node0.isThis());
736:       assertFalse(node0.isHook());
737:       assertFalse(node0.isTry());
738:       assertTrue(node0.isNumber());
739:       assertFalse(node0.isGetProp());
740:       assertFalse(node0.isCase());
741:       assertFalse(node0.isRegExp());
742:       assertFalse(node0.isFunction());
743:       assertFalse(node0.isWith());
744:       assertFalse(node0.isNot());
745:       assertFalse(node0.isObjectLit());
746:       assertFalse(node0.isDebugger());
747:       assertFalse(node0.isInstanceOf());
748:       assertFalse(node0.isCast());
749:       assertFalse(node0.isCatch());
750:       assertFalse(node0.isAnd());
751:       assertFalse(node0.isNE());
752:       assertFalse(node0.isIf());
753:       assertFalse(node0.isFalse());
754:       assertFalse(node0.isThrow());
755:       assertFalse(node0.isIn());
756:       assertFalse(node0.isInc());
757:       assertFalse(node0.isSetterDef());
758:       assertFalse(node0.isWhile());
759:       assertFalse(node0.isBlock());
760:       assertEquals(39, node0.getType());
761:       assertFalse(node0.hasMoreThanOneChild());
762:       assertFalse(node0.isContinue());
763:       assertFalse(node0.isCall());
764:       assertFalse(node0.isName());
765:       assertEquals((-1), node0.getLineno());
766:       assertEquals((-1), node0.getSourcePosition());
767:       assertFalse(node0.isDec());
768:       assertFalse(node0.isTypeOf());
769:       assertFalse(node0.isParamList());
770:       assertFalse(node0.isStringKey());
771:       assertFalse(node0.isAssign());
772:       assertFalse(node0.isReturn());
773:       assertFalse(node0.hasChildren());
774:       assertFalse(node0.hasOneChild());
775:       assertFalse(node0.isDefaultCase());
776:       assertFalse(node0.isScript());
777:       assertFalse(node0.isTrue());
778:       assertEquals(0, node0.getChildCount());
779:       assertFalse(node0.isGetElem());
780:       assertFalse(node0.isVoid());
781:       assertFalse(node0.isExprResult());
782:       assertFalse(node0.isLabelName());
783:       assertFalse(node0.isArrayLit());
784:       assertFalse(node0.isDelProp());
785:       assertFalse(node0.isNull());
786:       assertFalse(node0.isOr());
787:       assertFalse(node0.isLabel());
788:       assertFalse(node0.isVar());
789:       assertFalse(node0.isAssignAdd());
790:       assertFalse(node0.isNew());
791:       assertFalse(node0.isEmpty());
792:       assertFalse(node0.isDo());
793:       assertFalse(node0.isAdd());
794:       assertFalse(node1.isVar());
795:       assertFalse(node1.isCall());
796:       assertFalse(node1.isName());
797:       assertFalse(node1.isBlock());
798:       assertFalse(node1.isStringKey());
799:       assertFalse(node1.isSetterDef());
800:       assertFalse(node1.isNull());
801:       assertFalse(node1.isNew());
802:       assertFalse(node1.isAdd());
803:       assertEquals(0, node1.getChildCount());
804:       assertEquals(38, node1.getCharno());
805:       assertFalse(node1.isAssignAdd());
806:       assertFalse(node1.isDo());
807:       assertFalse(node1.isDefaultCase());
808:       assertFalse(node1.isParamList());
809:       assertEquals(4, node1.getLineno());
810:       assertFalse(node1.isFunction());
811:       assertFalse(node1.isLabel());
812:       assertFalse(node1.isContinue());
813:       assertFalse(node1.hasOneChild());
814:       assertFalse(node1.isArrayLit());
815:       assertFalse(node1.isLabelName());
816:       assertFalse(node1.isTry());
817:       assertFalse(node1.isFor());
818:       assertFalse(node1.isIf());
819:       assertEquals(16422, node1.getSourcePosition());
820:       assertFalse(node1.isNE());
821:       assertFalse(node1.isScript());
822:       assertFalse(node1.isGetterDef());
823:       assertFalse(node1.isIn());
824:       assertFalse(node1.isNumber());
825:       assertFalse(node1.hasMoreThanOneChild());
826:       assertFalse(node1.isCatch());
827:       assertFalse(node1.isCase());
828:       assertFalse(node1.isThis());
829:       assertFalse(node1.isRegExp());
830:       assertFalse(node1.isWith());
831:       assertFalse(node1.isInstanceOf());
832:       assertFalse(node1.isHook());
833:       assertFalse(node1.isThrow());
834:       assertFalse(node1.isInc());
835:       assertFalse(node1.isGetProp());
836:       assertFalse(node1.isString());
837:       assertFalse(node1.isObjectLit());
838:       assertFalse(node1.isAnd());
839:       assertFalse(node1.isSwitch());
840:       assertFalse(node1.isFalse());
841:       assertFalse(node1.isCast());
842:       assertFalse(node1.isDelProp());
843:       assertFalse(node1.isTrue());
844:       assertFalse(node1.isDebugger());
845:       assertFalse(node1.isEmpty());
846:       assertFalse(node1.isNot());
847:       assertFalse(node1.isOr());
848:       assertFalse(node1.isReturn());
849:       assertFalse(node1.isWhile());
850:       assertFalse(node1.isComma());
851:       assertFalse(node1.isExprResult());
852:       assertFalse(node1.isTypeOf());
853:       assertFalse(node1.isBreak());
854:       assertFalse(node1.isVoid());
855:       assertFalse(node1.isDec());
856:       assertFalse(node1.hasChildren());
857:       assertFalse(node1.isAssign());
858:       assertFalse(node1.isGetElem());
859:       assertEquals(0, node1.getType());
860:       
861:       Iterable<Node> iterable0 = node1.children();
862:       assertFalse(iterable0.contains(node1));
863:       assertEquals(49, Node.DIRECT_EVAL);
864:       assertEquals(30, Node.VAR_ARGS_NAME);
865:       assertEquals(1, Node.DECR_FLAG);
866:       assertEquals(12, Node.COLUMN_BITS);
867:       assertEquals(57, Node.LAST_PROP);
868:       assertEquals(46, Node.IS_NAMESPACE);
869:       assertEquals(54, Node.SLASH_V);
870:       assertEquals(52, Node.LENGTH);
871:       assertEquals(32, Node.INCRDECR_PROP);
872:       assertEquals(51, Node.STATIC_SOURCE_FILE);
873:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
874:       assertEquals(15, Node.NO_SIDE_EFFECTS);
875:       assertEquals(29, Node.JSDOC_INFO_PROP);
876:       assertEquals(50, Node.FREE_CALL);
877:       assertEquals(47, Node.IS_DISPATCHER);
878:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
879:       assertEquals(2, Node.POST_FLAG);
880:       assertEquals(40, Node.ORIGINALNAME_PROP);
881:       assertEquals(36, Node.QUOTED_PROP);
882:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
883:       assertEquals(43, Node.IS_CONSTANT_NAME);
884:       assertEquals(53, Node.INPUT_ID);
885:       assertEquals(8, Node.FLAG_NO_THROWS);
886:       assertEquals(39, Node.EMPTY_BLOCK);
887:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
888:       assertEquals(55, Node.INFERRED_FUNCTION);
889:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
890:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
891:       assertEquals(57, Node.REFLECTED_OBJECT);
892:       assertEquals(56, Node.CHANGE_TIME);
893:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
894:       assertEquals(37, Node.OPT_ARG_NAME);
895:       assertEquals(48, Node.DIRECTIVES);
896:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
897:       assertEquals(4095, Node.COLUMN_MASK);
898:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
899:       assertNotNull(iterable0);
900:       assertFalse(node1.equals((Object)node0));
901:       assertFalse(node1.isVar());
902:       assertFalse(node1.isCall());
903:       assertFalse(node1.isName());
904:       assertFalse(node1.isBlock());
905:       assertFalse(node1.isStringKey());
906:       assertFalse(node1.isSetterDef());
907:       assertFalse(node1.isNull());
908:       assertFalse(node1.isNew());
909:       assertFalse(node1.isAdd());
910:       assertEquals(0, node1.getChildCount());
911:       assertEquals(38, node1.getCharno());
912:       assertFalse(node1.isAssignAdd());
913:       assertFalse(node1.isDo());
914:       assertFalse(node1.isDefaultCase());
915:       assertFalse(node1.isParamList());
916:       assertEquals(4, node1.getLineno());
917:       assertFalse(node1.isFunction());
918:       assertFalse(node1.isLabel());
919:       assertFalse(node1.isContinue());
920:       assertFalse(node1.hasOneChild());
921:       assertFalse(node1.isArrayLit());
922:       assertFalse(node1.isLabelName());
923:       assertFalse(node1.isTry());
924:       assertFalse(node1.isFor());
925:       assertFalse(node1.isIf());
926:       assertEquals(16422, node1.getSourcePosition());
927:       assertFalse(node1.isNE());
928:       assertFalse(node1.isScript());
929:       assertFalse(node1.isGetterDef());
930:       assertFalse(node1.isIn());
931:       assertFalse(node1.isNumber());
932:       assertFalse(node1.hasMoreThanOneChild());
933:       assertFalse(node1.isCatch());
934:       assertFalse(node1.isCase());
935:       assertFalse(node1.isThis());
936:       assertFalse(node1.isRegExp());
937:       assertFalse(node1.isWith());
938:       assertFalse(node1.isInstanceOf());
939:       assertFalse(node1.isHook());
940:       assertFalse(node1.isThrow());
941:       assertFalse(node1.isInc());
942:       assertFalse(node1.isGetProp());
943:       assertFalse(node1.isString());
944:       assertFalse(node1.isObjectLit());
945:       assertFalse(node1.isAnd());
946:       assertFalse(node1.isSwitch());
947:       assertFalse(node1.isFalse());
948:       assertFalse(node1.isCast());
949:       assertFalse(node1.isDelProp());
950:       assertFalse(node1.isTrue());
951:       assertFalse(node1.isDebugger());
952:       assertFalse(node1.isEmpty());
953:       assertFalse(node1.isNot());
954:       assertFalse(node1.isOr());
955:       assertFalse(node1.isReturn());
956:       assertFalse(node1.isWhile());
957:       assertFalse(node1.isComma());
958:       assertFalse(node1.isExprResult());
959:       assertFalse(node1.isTypeOf());
960:       assertFalse(node1.isBreak());
961:       assertFalse(node1.isVoid());
962:       assertFalse(node1.isDec());
963:       assertFalse(node1.hasChildren());
964:       assertFalse(node1.isAssign());
965:       assertFalse(node1.isGetElem());
966:       assertEquals(0, node1.getType());
967:       
968:       boolean boolean2 = node0.isIf();
969:       assertFalse(boolean2);
970:       assertEquals(56, Node.CHANGE_TIME);
971:       assertEquals(46, Node.IS_NAMESPACE);
972:       assertEquals(47, Node.IS_DISPATCHER);
973:       assertEquals(12, Node.COLUMN_BITS);
974:       assertEquals(2, Node.POST_FLAG);
975:       assertEquals(51, Node.STATIC_SOURCE_FILE);
976:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
977:       assertEquals(49, Node.DIRECT_EVAL);
978:       assertEquals(37, Node.OPT_ARG_NAME);
979:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
980:       assertEquals(54, Node.SLASH_V);
981:       assertEquals(43, Node.IS_CONSTANT_NAME);
982:       assertEquals(1, Node.DECR_FLAG);
983:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
984:       assertEquals(32, Node.INCRDECR_PROP);
985:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
986:       assertEquals(48, Node.DIRECTIVES);
987:       assertEquals(8, Node.FLAG_NO_THROWS);
988:       assertEquals(39, Node.EMPTY_BLOCK);
989:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
990:       assertEquals(50, Node.FREE_CALL);
991:       assertEquals(40, Node.ORIGINALNAME_PROP);
992:       assertEquals(4095, Node.COLUMN_MASK);
993:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
994:       assertEquals(53, Node.INPUT_ID);
995:       assertEquals(52, Node.LENGTH);
996:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
997:       assertEquals(57, Node.REFLECTED_OBJECT);
998:       assertEquals(30, Node.VAR_ARGS_NAME);
999:       assertEquals(36, Node.QUOTED_PROP);
1000:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1001:       assertEquals(55, Node.INFERRED_FUNCTION);
1002:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1003:       assertEquals(29, Node.JSDOC_INFO_PROP);
1004:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1005:       assertEquals(57, Node.LAST_PROP);
1006:       assertFalse(node0.equals((Object)node1));
1007:       assertTrue(boolean2 == boolean1);
1008:       assertTrue(boolean2 == boolean0);
1009:       assertFalse(node0.isSwitch());
1010:       assertFalse(node0.isString());
1011:       assertEquals((-1), node0.getCharno());
1012:       assertFalse(node0.isBreak());
1013:       assertFalse(node0.isGetterDef());
1014:       assertFalse(node0.isFor());
1015:       assertFalse(node0.isComma());
1016:       assertFalse(node0.isThis());
1017:       assertFalse(node0.isHook());
1018:       assertFalse(node0.isTry());
1019:       assertTrue(node0.isNumber());
1020:       assertFalse(node0.isGetProp());
1021:       assertFalse(node0.isCase());
1022:       assertFalse(node0.isRegExp());
1023:       assertFalse(node0.isFunction());
1024:       assertFalse(node0.isWith());
1025:       assertFalse(node0.isNot());
1026:       assertFalse(node0.isObjectLit());
1027:       assertFalse(node0.isDebugger());
1028:       assertFalse(node0.isInstanceOf());
1029:       assertFalse(node0.isCast());
1030:       assertFalse(node0.isCatch());
1031:       assertFalse(node0.isAnd());
1032:       assertFalse(node0.isNE());
1033:       assertFalse(node0.isIf());
1034:       assertFalse(node0.isFalse());
1035:       assertFalse(node0.isThrow());
1036:       assertFalse(node0.isIn());
1037:       assertFalse(node0.isInc());
1038:       assertFalse(node0.isSetterDef());
1039:       assertFalse(node0.isWhile());
1040:       assertFalse(node0.isBlock());
1041:       assertEquals(39, node0.getType());
1042:       assertFalse(node0.hasMoreThanOneChild());
1043:       assertFalse(node0.isContinue());
1044:       assertFalse(node0.isCall());
1045:       assertFalse(node0.isName());
1046:       assertEquals((-1), node0.getLineno());
1047:       assertEquals((-1), node0.getSourcePosition());
1048:       assertFalse(node0.isDec());
1049:       assertFalse(node0.isTypeOf());
1050:       assertFalse(node0.isParamList());
1051:       assertFalse(node0.isStringKey());
1052:       assertFalse(node0.isAssign());
1053:       assertFalse(node0.isReturn());
1054:       assertFalse(node0.hasChildren());
1055:       assertFalse(node0.hasOneChild());
1056:       assertFalse(node0.isDefaultCase());
1057:       assertFalse(node0.isScript());
1058:       assertFalse(node0.isTrue());
1059:       assertEquals(0, node0.getChildCount());
1060:       assertFalse(node0.isGetElem());
1061:       assertFalse(node0.isVoid());
1062:       assertFalse(node0.isExprResult());
1063:       assertFalse(node0.isLabelName());
1064:       assertFalse(node0.isArrayLit());
1065:       assertFalse(node0.isDelProp());
1066:       assertFalse(node0.isNull());
1067:       assertFalse(node0.isOr());
1068:       assertFalse(node0.isLabel());
1069:       assertFalse(node0.isVar());
1070:       assertFalse(node0.isAssignAdd());
1071:       assertFalse(node0.isNew());
1072:       assertFalse(node0.isEmpty());
1073:       assertFalse(node0.isDo());
1074:       assertFalse(node0.isAdd());
1075:       
1076:       InputId inputId0 = null;
1077:       Node node2 = new Node(42, node1);
1078:       assertEquals(49, Node.DIRECT_EVAL);
1079:       assertEquals(30, Node.VAR_ARGS_NAME);
1080:       assertEquals(1, Node.DECR_FLAG);
1081:       assertEquals(12, Node.COLUMN_BITS);
1082:       assertEquals(57, Node.LAST_PROP);
1083:       assertEquals(46, Node.IS_NAMESPACE);
1084:       assertEquals(54, Node.SLASH_V);
1085:       assertEquals(52, Node.LENGTH);
1086:       assertEquals(32, Node.INCRDECR_PROP);
1087:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1088:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1089:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1090:       assertEquals(29, Node.JSDOC_INFO_PROP);
1091:       assertEquals(50, Node.FREE_CALL);
1092:       assertEquals(47, Node.IS_DISPATCHER);
1093:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1094:       assertEquals(2, Node.POST_FLAG);
1095:       assertEquals(40, Node.ORIGINALNAME_PROP);
1096:       assertEquals(36, Node.QUOTED_PROP);
1097:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1098:       assertEquals(43, Node.IS_CONSTANT_NAME);
1099:       assertEquals(53, Node.INPUT_ID);
1100:       assertEquals(8, Node.FLAG_NO_THROWS);
1101:       assertEquals(39, Node.EMPTY_BLOCK);
1102:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1103:       assertEquals(55, Node.INFERRED_FUNCTION);
1104:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1106:       assertEquals(57, Node.REFLECTED_OBJECT);
1107:       assertEquals(56, Node.CHANGE_TIME);
1108:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1109:       assertEquals(37, Node.OPT_ARG_NAME);
1110:       assertEquals(48, Node.DIRECTIVES);
1111:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1112:       assertEquals(4095, Node.COLUMN_MASK);
1113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1114:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1115:       assertEquals(57, Node.LAST_PROP);
1116:       assertEquals(30, Node.VAR_ARGS_NAME);
1117:       assertEquals(49, Node.DIRECT_EVAL);
1118:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1119:       assertEquals(12, Node.COLUMN_BITS);
1120:       assertEquals(54, Node.SLASH_V);
1121:       assertEquals(37, Node.OPT_ARG_NAME);
1122:       assertEquals(40, Node.ORIGINALNAME_PROP);
1123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1124:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1125:       assertEquals(50, Node.FREE_CALL);
1126:       assertEquals(46, Node.IS_NAMESPACE);
1127:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1128:       assertEquals(32, Node.INCRDECR_PROP);
1129:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1130:       assertEquals(1, Node.DECR_FLAG);
1131:       assertEquals(43, Node.IS_CONSTANT_NAME);
1132:       assertEquals(36, Node.QUOTED_PROP);
1133:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1134:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1135:       assertEquals(4095, Node.COLUMN_MASK);
1136:       assertEquals(56, Node.CHANGE_TIME);
1137:       assertEquals(47, Node.IS_DISPATCHER);
1138:       assertEquals(8, Node.FLAG_NO_THROWS);
1139:       assertEquals(2, Node.POST_FLAG);
1140:       assertEquals(48, Node.DIRECTIVES);
1141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1142:       assertEquals(57, Node.REFLECTED_OBJECT);
1143:       assertEquals(52, Node.LENGTH);
1144:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1145:       assertEquals(55, Node.INFERRED_FUNCTION);
1146:       assertEquals(39, Node.EMPTY_BLOCK);
1147:       assertEquals(29, Node.JSDOC_INFO_PROP);
1148:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1149:       assertEquals(53, Node.INPUT_ID);
1150:       assertNotNull(node2);
1151:       assertFalse(node1.equals((Object)node0));
1152:       assertFalse(node2.equals((Object)node0));
1153:       assertFalse(node2.equals((Object)node1));
1154:       assertFalse(node1.isVar());
1155:       assertFalse(node1.isCall());
1156:       assertFalse(node1.isName());
1157:       assertFalse(node1.isBlock());
1158:       assertFalse(node1.isStringKey());
1159:       assertFalse(node1.isSetterDef());
1160:       assertFalse(node1.isNull());
1161:       assertFalse(node1.isNew());
1162:       assertFalse(node1.isAdd());
1163:       assertEquals(0, node1.getChildCount());
1164:       assertEquals(38, node1.getCharno());
1165:       assertFalse(node1.isAssignAdd());
1166:       assertFalse(node1.isDo());
1167:       assertFalse(node1.isDefaultCase());
1168:       assertFalse(node1.isParamList());
1169:       assertEquals(4, node1.getLineno());
1170:       assertFalse(node1.isFunction());
1171:       assertFalse(node1.isLabel());
1172:       assertFalse(node1.isContinue());
1173:       assertFalse(node1.hasOneChild());
1174:       assertFalse(node1.isArrayLit());
1175:       assertFalse(node1.isLabelName());
1176:       assertFalse(node1.isTry());
1177:       assertFalse(node1.isFor());
1178:       assertFalse(node1.isIf());
1179:       assertEquals(16422, node1.getSourcePosition());
1180:       assertFalse(node1.isNE());
1181:       assertFalse(node1.isScript());
1182:       assertFalse(node1.isGetterDef());
1183:       assertFalse(node1.isIn());
1184:       assertFalse(node1.isNumber());
1185:       assertFalse(node1.hasMoreThanOneChild());
1186:       assertFalse(node1.isCatch());
1187:       assertFalse(node1.isCase());
1188:       assertFalse(node1.isThis());
1189:       assertFalse(node1.isRegExp());
1190:       assertFalse(node1.isWith());
1191:       assertFalse(node1.isInstanceOf());
1192:       assertFalse(node1.isHook());
1193:       assertFalse(node1.isThrow());
1194:       assertFalse(node1.isInc());
1195:       assertFalse(node1.isGetProp());
1196:       assertFalse(node1.isString());
1197:       assertFalse(node1.isObjectLit());
1198:       assertFalse(node1.isAnd());
1199:       assertFalse(node1.isSwitch());
1200:       assertFalse(node1.isFalse());
1201:       assertFalse(node1.isCast());
1202:       assertFalse(node1.isDelProp());
1203:       assertFalse(node1.isTrue());
1204:       assertFalse(node1.isDebugger());
1205:       assertFalse(node1.isEmpty());
1206:       assertFalse(node1.isNot());
1207:       assertFalse(node1.isOr());
1208:       assertFalse(node1.isReturn());
1209:       assertFalse(node1.isWhile());
1210:       assertFalse(node1.isComma());
1211:       assertFalse(node1.isExprResult());
1212:       assertFalse(node1.isTypeOf());
1213:       assertFalse(node1.isBreak());
1214:       assertFalse(node1.isVoid());
1215:       assertFalse(node1.isDec());
1216:       assertFalse(node1.hasChildren());
1217:       assertFalse(node1.isAssign());
1218:       assertFalse(node1.isGetElem());
1219:       assertEquals(0, node1.getType());
1220:       assertFalse(node2.isFalse());
1221:       assertFalse(node2.isBreak());
1222:       assertFalse(node2.isHook());
1223:       assertFalse(node2.isThrow());
1224:       assertFalse(node2.isComma());
1225:       assertFalse(node2.isInstanceOf());
1226:       assertFalse(node2.isCase());
1227:       assertFalse(node2.isWith());
1228:       assertFalse(node2.isObjectLit());
1229:       assertFalse(node2.isNot());
1230:       assertFalse(node2.isSwitch());
1231:       assertFalse(node2.isAnd());
1232:       assertFalse(node2.isGetProp());
1233:       assertEquals((-1), node2.getCharno());
1234:       assertFalse(node2.isScript());
1235:       assertFalse(node2.isString());
1236:       assertFalse(node2.isEmpty());
1237:       assertFalse(node2.isGetElem());
1238:       assertTrue(node2.hasOneChild());
1239:       assertFalse(node2.isDelProp());
1240:       assertFalse(node2.isGetterDef());
1241:       assertFalse(node2.isDec());
1242:       assertFalse(node2.isAssign());
1243:       assertFalse(node2.isLabelName());
1244:       assertFalse(node2.isLabel());
1245:       assertFalse(node2.isReturn());
1246:       assertFalse(node2.isVoid());
1247:       assertFalse(node2.isTypeOf());
1248:       assertFalse(node2.isArrayLit());
1249:       assertFalse(node2.isExprResult());
1250:       assertFalse(node2.isDo());
1251:       assertFalse(node2.isDefaultCase());
1252:       assertFalse(node2.isTrue());
1253:       assertEquals(42, node2.getType());
1254:       assertFalse(node2.isNew());
1255:       assertFalse(node2.isAdd());
1256:       assertFalse(node2.isAssignAdd());
1257:       assertFalse(node2.isOr());
1258:       assertFalse(node2.isName());
1259:       assertFalse(node2.isVar());
1260:       assertFalse(node2.isNull());
1261:       assertFalse(node2.isParamList());
1262:       assertFalse(node2.isStringKey());
1263:       assertFalse(node2.isBlock());
1264:       assertFalse(node2.isCall());
1265:       assertTrue(node2.isThis());
1266:       assertFalse(node2.isCatch());
1267:       assertFalse(node2.isWhile());
1268:       assertFalse(node2.isTry());
1269:       assertFalse(node2.isDebugger());
1270:       assertFalse(node2.isNumber());
1271:       assertFalse(node2.isFor());
1272:       assertEquals((-1), node2.getSourcePosition());
1273:       assertFalse(node2.isIf());
1274:       assertFalse(node2.isNE());
1275:       assertFalse(node2.isFunction());
1276:       assertEquals(1, node2.getChildCount());
1277:       assertEquals((-1), node2.getLineno());
1278:       assertFalse(node2.isRegExp());
1279:       assertFalse(node2.hasMoreThanOneChild());
1280:       assertFalse(node2.isContinue());
1281:       assertFalse(node2.isCast());
1282:       assertTrue(node2.hasChildren());
1283:       assertFalse(node2.isIn());
1284:       assertFalse(node2.isSetterDef());
1285:       assertFalse(node2.isInc());
1286:       
1287:       boolean boolean3 = node0.isEquivalentTo(node2);
1288:       assertFalse(boolean3);
1289:       assertEquals(56, Node.CHANGE_TIME);
1290:       assertEquals(46, Node.IS_NAMESPACE);
1291:       assertEquals(47, Node.IS_DISPATCHER);
1292:       assertEquals(12, Node.COLUMN_BITS);
1293:       assertEquals(2, Node.POST_FLAG);
1294:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1295:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1296:       assertEquals(49, Node.DIRECT_EVAL);
1297:       assertEquals(37, Node.OPT_ARG_NAME);
1298:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1299:       assertEquals(54, Node.SLASH_V);
1300:       assertEquals(43, Node.IS_CONSTANT_NAME);
1301:       assertEquals(1, Node.DECR_FLAG);
1302:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1303:       assertEquals(32, Node.INCRDECR_PROP);
1304:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1305:       assertEquals(48, Node.DIRECTIVES);
1306:       assertEquals(8, Node.FLAG_NO_THROWS);
1307:       assertEquals(39, Node.EMPTY_BLOCK);
1308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1309:       assertEquals(50, Node.FREE_CALL);
1310:       assertEquals(40, Node.ORIGINALNAME_PROP);
1311:       assertEquals(4095, Node.COLUMN_MASK);
1312:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1313:       assertEquals(53, Node.INPUT_ID);
1314:       assertEquals(52, Node.LENGTH);
1315:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1316:       assertEquals(57, Node.REFLECTED_OBJECT);
1317:       assertEquals(30, Node.VAR_ARGS_NAME);
1318:       assertEquals(36, Node.QUOTED_PROP);
1319:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1320:       assertEquals(55, Node.INFERRED_FUNCTION);
1321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1322:       assertEquals(29, Node.JSDOC_INFO_PROP);
1323:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1324:       assertEquals(57, Node.LAST_PROP);
1325:       assertEquals(49, Node.DIRECT_EVAL);
1326:       assertEquals(30, Node.VAR_ARGS_NAME);
1327:       assertEquals(1, Node.DECR_FLAG);
1328:       assertEquals(12, Node.COLUMN_BITS);
1329:       assertEquals(57, Node.LAST_PROP);
1330:       assertEquals(46, Node.IS_NAMESPACE);
1331:       assertEquals(54, Node.SLASH_V);
1332:       assertEquals(52, Node.LENGTH);
1333:       assertEquals(32, Node.INCRDECR_PROP);
1334:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1335:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1336:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1337:       assertEquals(29, Node.JSDOC_INFO_PROP);
1338:       assertEquals(50, Node.FREE_CALL);
1339:       assertEquals(47, Node.IS_DISPATCHER);
1340:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1341:       assertEquals(2, Node.POST_FLAG);
1342:       assertEquals(40, Node.ORIGINALNAME_PROP);
1343:       assertEquals(36, Node.QUOTED_PROP);
1344:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1345:       assertEquals(43, Node.IS_CONSTANT_NAME);
1346:       assertEquals(53, Node.INPUT_ID);
1347:       assertEquals(8, Node.FLAG_NO_THROWS);
1348:       assertEquals(39, Node.EMPTY_BLOCK);
1349:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1350:       assertEquals(55, Node.INFERRED_FUNCTION);
1351:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1352:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1353:       assertEquals(57, Node.REFLECTED_OBJECT);
1354:       assertEquals(56, Node.CHANGE_TIME);
1355:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1356:       assertEquals(37, Node.OPT_ARG_NAME);
1357:       assertEquals(48, Node.DIRECTIVES);
1358:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1359:       assertEquals(4095, Node.COLUMN_MASK);
1360:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1361:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1362:       assertEquals(57, Node.LAST_PROP);
1363:       assertEquals(30, Node.VAR_ARGS_NAME);
1364:       assertEquals(49, Node.DIRECT_EVAL);
1365:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1366:       assertEquals(12, Node.COLUMN_BITS);
1367:       assertEquals(54, Node.SLASH_V);
1368:       assertEquals(37, Node.OPT_ARG_NAME);
1369:       assertEquals(40, Node.ORIGINALNAME_PROP);
1370:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1371:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1372:       assertEquals(50, Node.FREE_CALL);
1373:       assertEquals(46, Node.IS_NAMESPACE);
1374:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1375:       assertEquals(32, Node.INCRDECR_PROP);
1376:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1377:       assertEquals(1, Node.DECR_FLAG);
1378:       assertEquals(43, Node.IS_CONSTANT_NAME);
1379:       assertEquals(36, Node.QUOTED_PROP);
1380:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1381:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1382:       assertEquals(4095, Node.COLUMN_MASK);
1383:       assertEquals(56, Node.CHANGE_TIME);
1384:       assertEquals(47, Node.IS_DISPATCHER);
1385:       assertEquals(8, Node.FLAG_NO_THROWS);
1386:       assertEquals(2, Node.POST_FLAG);
1387:       assertEquals(48, Node.DIRECTIVES);
1388:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1389:       assertEquals(57, Node.REFLECTED_OBJECT);
1390:       assertEquals(52, Node.LENGTH);
1391:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1392:       assertEquals(55, Node.INFERRED_FUNCTION);
1393:       assertEquals(39, Node.EMPTY_BLOCK);
1394:       assertEquals(29, Node.JSDOC_INFO_PROP);
1395:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1396:       assertEquals(53, Node.INPUT_ID);
1397:       assertFalse(node0.equals((Object)node1));
1398:       assertFalse(node0.equals((Object)node2));
1399:       assertFalse(node1.equals((Object)node0));
1400:       assertFalse(node1.equals((Object)node2));
1401:       assertFalse(node2.equals((Object)node0));
1402:       assertFalse(node2.equals((Object)node1));
1403:       assertTrue(boolean3 == boolean2);
1404:       assertTrue(boolean3 == boolean0);
1405:       assertTrue(boolean3 == boolean1);
1406:       assertFalse(node0.isSwitch());
1407:       assertFalse(node0.isString());
1408:       assertEquals((-1), node0.getCharno());
1409:       assertFalse(node0.isBreak());
1410:       assertFalse(node0.isGetterDef());
1411:       assertFalse(node0.isFor());
1412:       assertFalse(node0.isComma());
1413:       assertFalse(node0.isThis());
1414:       assertFalse(node0.isHook());
1415:       assertFalse(node0.isTry());
1416:       assertTrue(node0.isNumber());
1417:       assertFalse(node0.isGetProp());
1418:       assertFalse(node0.isCase());
1419:       assertFalse(node0.isRegExp());
1420:       assertFalse(node0.isFunction());
1421:       assertFalse(node0.isWith());
1422:       assertFalse(node0.isNot());
1423:       assertFalse(node0.isObjectLit());
1424:       assertFalse(node0.isDebugger());
1425:       assertFalse(node0.isInstanceOf());
1426:       assertFalse(node0.isCast());
1427:       assertFalse(node0.isCatch());
1428:       assertFalse(node0.isAnd());
1429:       assertFalse(node0.isNE());
1430:       assertFalse(node0.isIf());
1431:       assertFalse(node0.isFalse());
1432:       assertFalse(node0.isThrow());
1433:       assertFalse(node0.isIn());
1434:       assertFalse(node0.isInc());
1435:       assertFalse(node0.isSetterDef());
1436:       assertFalse(node0.isWhile());
1437:       assertFalse(node0.isBlock());
1438:       assertEquals(39, node0.getType());
1439:       assertFalse(node0.hasMoreThanOneChild());
1440:       assertFalse(node0.isContinue());
1441:       assertFalse(node0.isCall());
1442:       assertFalse(node0.isName());
1443:       assertEquals((-1), node0.getLineno());
1444:       assertEquals((-1), node0.getSourcePosition());
1445:       assertFalse(node0.isDec());
1446:       assertFalse(node0.isTypeOf());
1447:       assertFalse(node0.isParamList());
1448:       assertFalse(node0.isStringKey());
1449:       assertFalse(node0.isAssign());
1450:       assertFalse(node0.isReturn());
1451:       assertFalse(node0.hasChildren());
1452:       assertFalse(node0.hasOneChild());
1453:       assertFalse(node0.isDefaultCase());
1454:       assertFalse(node0.isScript());
1455:       assertFalse(node0.isTrue());
1456:       assertEquals(0, node0.getChildCount());
1457:       assertFalse(node0.isGetElem());
1458:       assertFalse(node0.isVoid());
1459:       assertFalse(node0.isExprResult());
1460:       assertFalse(node0.isLabelName());
1461:       assertFalse(node0.isArrayLit());
1462:       assertFalse(node0.isDelProp());
1463:       assertFalse(node0.isNull());
1464:       assertFalse(node0.isOr());
1465:       assertFalse(node0.isLabel());
1466:       assertFalse(node0.isVar());
1467:       assertFalse(node0.isAssignAdd());
1468:       assertFalse(node0.isNew());
1469:       assertFalse(node0.isEmpty());
1470:       assertFalse(node0.isDo());
1471:       assertFalse(node0.isAdd());
1472:       assertFalse(node1.isVar());
1473:       assertFalse(node1.isCall());
1474:       assertFalse(node1.isName());
1475:       assertFalse(node1.isBlock());
1476:       assertFalse(node1.isStringKey());
1477:       assertFalse(node1.isSetterDef());
1478:       assertFalse(node1.isNull());
1479:       assertFalse(node1.isNew());
1480:       assertFalse(node1.isAdd());
1481:       assertEquals(0, node1.getChildCount());
1482:       assertEquals(38, node1.getCharno());
1483:       assertFalse(node1.isAssignAdd());
1484:       assertFalse(node1.isDo());
1485:       assertFalse(node1.isDefaultCase());
1486:       assertFalse(node1.isParamList());
1487:       assertEquals(4, node1.getLineno());
1488:       assertFalse(node1.isFunction());
1489:       assertFalse(node1.isLabel());
1490:       assertFalse(node1.isContinue());
1491:       assertFalse(node1.hasOneChild());
1492:       assertFalse(node1.isArrayLit());
1493:       assertFalse(node1.isLabelName());
1494:       assertFalse(node1.isTry());
1495:       assertFalse(node1.isFor());
1496:       assertFalse(node1.isIf());
1497:       assertEquals(16422, node1.getSourcePosition());
1498:       assertFalse(node1.isNE());
1499:       assertFalse(node1.isScript());
1500:       assertFalse(node1.isGetterDef());
1501:       assertFalse(node1.isIn());
1502:       assertFalse(node1.isNumber());
1503:       assertFalse(node1.hasMoreThanOneChild());
1504:       assertFalse(node1.isCatch());
1505:       assertFalse(node1.isCase());
1506:       assertFalse(node1.isThis());
1507:       assertFalse(node1.isRegExp());
1508:       assertFalse(node1.isWith());
1509:       assertFalse(node1.isInstanceOf());
1510:       assertFalse(node1.isHook());
1511:       assertFalse(node1.isThrow());
1512:       assertFalse(node1.isInc());
1513:       assertFalse(node1.isGetProp());
1514:       assertFalse(node1.isString());
1515:       assertFalse(node1.isObjectLit());
1516:       assertFalse(node1.isAnd());
1517:       assertFalse(node1.isSwitch());
1518:       assertFalse(node1.isFalse());
1519:       assertFalse(node1.isCast());
1520:       assertFalse(node1.isDelProp());
1521:       assertFalse(node1.isTrue());
1522:       assertFalse(node1.isDebugger());
1523:       assertFalse(node1.isEmpty());
1524:       assertFalse(node1.isNot());
1525:       assertFalse(node1.isOr());
1526:       assertFalse(node1.isReturn());
1527:       assertFalse(node1.isWhile());
1528:       assertFalse(node1.isComma());
1529:       assertFalse(node1.isExprResult());
1530:       assertFalse(node1.isTypeOf());
1531:       assertFalse(node1.isBreak());
1532:       assertFalse(node1.isVoid());
1533:       assertFalse(node1.isDec());
1534:       assertFalse(node1.hasChildren());
1535:       assertFalse(node1.isAssign());
1536:       assertFalse(node1.isGetElem());
1537:       assertEquals(0, node1.getType());
1538:       assertFalse(node2.isFalse());
1539:       assertFalse(node2.isBreak());
1540:       assertFalse(node2.isHook());
1541:       assertFalse(node2.isThrow());
1542:       assertFalse(node2.isComma());
1543:       assertFalse(node2.isInstanceOf());
1544:       assertFalse(node2.isCase());
1545:       assertFalse(node2.isWith());
1546:       assertFalse(node2.isObjectLit());
1547:       assertFalse(node2.isNot());
1548:       assertFalse(node2.isSwitch());
1549:       assertFalse(node2.isAnd());
1550:       assertFalse(node2.isGetProp());
1551:       assertEquals((-1), node2.getCharno());
1552:       assertFalse(node2.isScript());
1553:       assertFalse(node2.isString());
1554:       assertFalse(node2.isEmpty());
1555:       assertFalse(node2.isGetElem());
1556:       assertTrue(node2.hasOneChild());
1557:       assertFalse(node2.isDelProp());
1558:       assertFalse(node2.isGetterDef());
1559:       assertFalse(node2.isDec());
1560:       assertFalse(node2.isAssign());
1561:       assertFalse(node2.isLabelName());
1562:       assertFalse(node2.isLabel());
1563:       assertFalse(node2.isReturn());
1564:       assertFalse(node2.isVoid());
1565:       assertFalse(node2.isTypeOf());
1566:       assertFalse(node2.isArrayLit());
1567:       assertFalse(node2.isExprResult());
1568:       assertFalse(node2.isDo());
1569:       assertFalse(node2.isDefaultCase());
1570:       assertFalse(node2.isTrue());
1571:       assertEquals(42, node2.getType());
1572:       assertFalse(node2.isNew());
1573:       assertFalse(node2.isAdd());
1574:       assertFalse(node2.isAssignAdd());
1575:       assertFalse(node2.isOr());
1576:       assertFalse(node2.isName());
1577:       assertFalse(node2.isVar());
1578:       assertFalse(node2.isNull());
1579:       assertFalse(node2.isParamList());
1580:       assertFalse(node2.isStringKey());
1581:       assertFalse(node2.isBlock());
1582:       assertFalse(node2.isCall());
1583:       assertTrue(node2.isThis());
1584:       assertFalse(node2.isCatch());
1585:       assertFalse(node2.isWhile());
1586:       assertFalse(node2.isTry());
1587:       assertFalse(node2.isDebugger());
1588:       assertFalse(node2.isNumber());
1589:       assertFalse(node2.isFor());
1590:       assertEquals((-1), node2.getSourcePosition());
1591:       assertFalse(node2.isIf());
1592:       assertFalse(node2.isNE());
1593:       assertFalse(node2.isFunction());
1594:       assertEquals(1, node2.getChildCount());
1595:       assertEquals((-1), node2.getLineno());
1596:       assertFalse(node2.isRegExp());
1597:       assertFalse(node2.hasMoreThanOneChild());
1598:       assertFalse(node2.isContinue());
1599:       assertFalse(node2.isCast());
1600:       assertTrue(node2.hasChildren());
1601:       assertFalse(node2.isIn());
1602:       assertFalse(node2.isSetterDef());
1603:       assertFalse(node2.isInc());
1604:       
1605:       // Undeclared exception!
1606:       try { 
1607:         node0.checkTreeEquals(node2);
1608:         fail("Expecting exception: IllegalStateException");
1609:       
1610:       } catch(IllegalStateException e) {
1611:          //
1612:          // 0
1613:          //
1614:          verifyException("com.google.javascript.rhino.Token", e);
1615:       }
1616:   }
1617: }
RegularFileObject[/tmp/EvoSuite_129_1628157883593/com/google/javascript/rhino/Node_129_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_129_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_129_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_129_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:44.028 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node0);
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());

Node node1 = Node.newString(0, "", 4, 38);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getCharno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertEquals(4, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getType());

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getCharno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertEquals(4, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getType());

boolean boolean0 = node_NodeMismatch0.equals("");
assertFalse(boolean0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getCharno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertEquals(4, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getType());

boolean boolean1 = node0.isEquivalentTo(node1, false, false, true);
assertFalse(boolean1);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getCharno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertEquals(4, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getType());

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node1));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getCharno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertEquals(4, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getType());

boolean boolean2 = node0.isIf();
assertFalse(boolean2);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());

InputId inputId0 = null;
Node node2 = new Node(42, node1);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getCharno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertEquals(4, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isString());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertEquals(42, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertTrue(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFunction());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());

boolean boolean3 = node0.isEquivalentTo(node2);
assertFalse(boolean3);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getCharno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertEquals(4, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(0, node1.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isString());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertEquals(42, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertTrue(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFunction());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());

node0.checkTreeEquals(node2);

[MASTER] 10:04:44.493 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_134_1628157884310/com/google/javascript/rhino/Node_134_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_134_1628157884310/com/google/javascript/rhino/Node_134_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:44.493 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:44.493 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:44.493 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 554
[MASTER] 10:04:44.494 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_134_1628157884310/com/google/javascript/rhino/Node_134_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.FileSystemHandling;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_134_tmp__ESTest extends Node_134_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(114, (-1707), (-1871));
22:       assertEquals(55, Node.INFERRED_FUNCTION);
23:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
24:       assertEquals(4095, Node.COLUMN_MASK);
25:       assertEquals(48, Node.DIRECTIVES);
26:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
27:       assertEquals(40, Node.ORIGINALNAME_PROP);
28:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
29:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
30:       assertEquals(54, Node.SLASH_V);
31:       assertEquals(43, Node.IS_CONSTANT_NAME);
32:       assertEquals(46, Node.IS_NAMESPACE);
33:       assertEquals(50, Node.FREE_CALL);
34:       assertEquals(51, Node.STATIC_SOURCE_FILE);
35:       assertEquals(12, Node.COLUMN_BITS);
36:       assertEquals(49, Node.DIRECT_EVAL);
37:       assertEquals(32, Node.INCRDECR_PROP);
38:       assertEquals(15, Node.NO_SIDE_EFFECTS);
39:       assertEquals(1, Node.DECR_FLAG);
40:       assertEquals(37, Node.OPT_ARG_NAME);
41:       assertEquals(2, Node.POST_FLAG);
42:       assertEquals(57, Node.LAST_PROP);
43:       assertEquals(30, Node.VAR_ARGS_NAME);
44:       assertEquals(47, Node.IS_DISPATCHER);
45:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
46:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
47:       assertEquals(29, Node.JSDOC_INFO_PROP);
48:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
49:       assertEquals(53, Node.INPUT_ID);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(56, Node.CHANGE_TIME);
53:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
54:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
55:       assertEquals(52, Node.LENGTH);
56:       assertEquals(57, Node.REFLECTED_OBJECT);
57:       assertEquals(36, Node.QUOTED_PROP);
58:       assertNotNull(node0);
59:       assertFalse(node0.isTry());
60:       assertFalse(node0.isVoid());
61:       assertFalse(node0.isArrayLit());
62:       assertFalse(node0.isRegExp());
63:       assertFalse(node0.isDefaultCase());
64:       assertFalse(node0.isFunction());
65:       assertFalse(node0.isFor());
66:       assertEquals(0, node0.getChildCount());
67:       assertFalse(node0.isCase());
68:       assertFalse(node0.isString());
69:       assertFalse(node0.isGetterDef());
70:       assertFalse(node0.isSwitch());
71:       assertFalse(node0.isDebugger());
72:       assertFalse(node0.isParamList());
73:       assertFalse(node0.isStringKey());
74:       assertEquals((-1), node0.getCharno());
75:       assertFalse(node0.isCall());
76:       assertFalse(node0.isNew());
77:       assertFalse(node0.isAdd());
78:       assertFalse(node0.isWhile());
79:       assertFalse(node0.isComma());
80:       assertFalse(node0.isVar());
81:       assertFalse(node0.isOr());
82:       assertFalse(node0.isAssignAdd());
83:       assertFalse(node0.isBreak());
84:       assertFalse(node0.isDelProp());
85:       assertFalse(node0.isEmpty());
86:       assertFalse(node0.isName());
87:       assertFalse(node0.isTrue());
88:       assertFalse(node0.isNull());
89:       assertFalse(node0.isExprResult());
90:       assertFalse(node0.isCast());
91:       assertFalse(node0.isGetElem());
92:       assertFalse(node0.hasOneChild());
93:       assertFalse(node0.isScript());
94:       assertFalse(node0.isDec());
95:       assertFalse(node0.isAssign());
96:       assertFalse(node0.isTypeOf());
97:       assertFalse(node0.isWith());
98:       assertFalse(node0.hasChildren());
99:       assertFalse(node0.isLabel());
100:       assertFalse(node0.isReturn());
101:       assertFalse(node0.isContinue());
102:       assertFalse(node0.isGetProp());
103:       assertFalse(node0.isNot());
104:       assertFalse(node0.isLabelName());
105:       assertFalse(node0.isNumber());
106:       assertFalse(node0.isAnd());
107:       assertFalse(node0.isObjectLit());
108:       assertEquals((-1), node0.getSourcePosition());
109:       assertFalse(node0.isInc());
110:       assertFalse(node0.isFalse());
111:       assertFalse(node0.isThis());
112:       assertFalse(node0.isThrow());
113:       assertFalse(node0.isBlock());
114:       assertFalse(node0.isHook());
115:       assertTrue(node0.isDo());
116:       assertEquals((-1), node0.getLineno());
117:       assertFalse(node0.isInstanceOf());
118:       assertFalse(node0.isIn());
119:       assertFalse(node0.hasMoreThanOneChild());
120:       assertEquals(114, node0.getType());
121:       assertFalse(node0.isCatch());
122:       assertFalse(node0.isSetterDef());
123:       assertFalse(node0.isIf());
124:       assertFalse(node0.isNE());
125:       
126:       Node node1 = Node.newString("", (-277), (-1707));
127:       assertEquals(47, Node.IS_DISPATCHER);
128:       assertEquals(56, Node.CHANGE_TIME);
129:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
130:       assertEquals(29, Node.JSDOC_INFO_PROP);
131:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
132:       assertEquals(2, Node.POST_FLAG);
133:       assertEquals(12, Node.COLUMN_BITS);
134:       assertEquals(53, Node.INPUT_ID);
135:       assertEquals(1, Node.DECR_FLAG);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(15, Node.NO_SIDE_EFFECTS);
138:       assertEquals(36, Node.QUOTED_PROP);
139:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
140:       assertEquals(52, Node.LENGTH);
141:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
142:       assertEquals(4095, Node.COLUMN_MASK);
143:       assertEquals(57, Node.REFLECTED_OBJECT);
144:       assertEquals(48, Node.DIRECTIVES);
145:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
146:       assertEquals(37, Node.OPT_ARG_NAME);
147:       assertEquals(49, Node.DIRECT_EVAL);
148:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
149:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
150:       assertEquals(39, Node.EMPTY_BLOCK);
151:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
152:       assertEquals(8, Node.FLAG_NO_THROWS);
153:       assertEquals(50, Node.FREE_CALL);
154:       assertEquals(55, Node.INFERRED_FUNCTION);
155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
156:       assertEquals(57, Node.LAST_PROP);
157:       assertEquals(43, Node.IS_CONSTANT_NAME);
158:       assertEquals(30, Node.VAR_ARGS_NAME);
159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
160:       assertEquals(40, Node.ORIGINALNAME_PROP);
161:       assertEquals(46, Node.IS_NAMESPACE);
162:       assertEquals(54, Node.SLASH_V);
163:       assertNotNull(node1);
164:       assertFalse(node1.equals((Object)node0));
165:       assertFalse(node1.isCase());
166:       assertFalse(node1.isIn());
167:       assertFalse(node1.isInc());
168:       assertFalse(node1.isEmpty());
169:       assertFalse(node1.isFor());
170:       assertFalse(node1.isHook());
171:       assertFalse(node1.isComma());
172:       assertFalse(node1.isTrue());
173:       assertFalse(node1.isNE());
174:       assertFalse(node1.isBreak());
175:       assertFalse(node1.isIf());
176:       assertFalse(node1.isDelProp());
177:       assertFalse(node1.isVoid());
178:       assertEquals(40, node1.getType());
179:       assertFalse(node1.isAnd());
180:       assertFalse(node1.isFunction());
181:       assertFalse(node1.isObjectLit());
182:       assertFalse(node1.isNot());
183:       assertFalse(node1.isGetProp());
184:       assertFalse(node1.isSetterDef());
185:       assertFalse(node1.isFalse());
186:       assertFalse(node1.isThrow());
187:       assertFalse(node1.isCast());
188:       assertEquals((-1), node1.getSourcePosition());
189:       assertFalse(node1.isDebugger());
190:       assertFalse(node1.isContinue());
191:       assertFalse(node1.isWhile());
192:       assertFalse(node1.hasMoreThanOneChild());
193:       assertFalse(node1.isOr());
194:       assertTrue(node1.isString());
195:       assertFalse(node1.isNew());
196:       assertFalse(node1.isBlock());
197:       assertFalse(node1.isAssignAdd());
198:       assertFalse(node1.isLabel());
199:       assertFalse(node1.isReturn());
200:       assertFalse(node1.isAdd());
201:       assertFalse(node1.isDo());
202:       assertFalse(node1.isGetElem());
203:       assertFalse(node1.isName());
204:       assertFalse(node1.isCall());
205:       assertFalse(node1.isDec());
206:       assertFalse(node1.isTypeOf());
207:       assertFalse(node1.isNull());
208:       assertFalse(node1.hasChildren());
209:       assertFalse(node1.isAssign());
210:       assertFalse(node1.isExprResult());
211:       assertEquals((-1), node1.getLineno());
212:       assertFalse(node1.isWith());
213:       assertFalse(node1.isCatch());
214:       assertFalse(node1.isInstanceOf());
215:       assertFalse(node1.isRegExp());
216:       assertEquals(0, node1.getChildCount());
217:       assertFalse(node1.isThis());
218:       assertFalse(node1.isScript());
219:       assertFalse(node1.hasOneChild());
220:       assertFalse(node1.isDefaultCase());
221:       assertFalse(node1.isTry());
222:       assertFalse(node1.isStringKey());
223:       assertFalse(node1.isVar());
224:       assertFalse(node1.isNumber());
225:       assertFalse(node1.isGetterDef());
226:       assertEquals((-1), node1.getCharno());
227:       assertFalse(node1.isParamList());
228:       assertFalse(node1.isArrayLit());
229:       assertFalse(node1.isSwitch());
230:       assertFalse(node1.isLabelName());
231:       
232:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
233:       assertTrue(boolean0);
234:       
235:       Node node2 = new Node(2497, node0, node0, node0, 0, 30);
236:       assertEquals(55, Node.INFERRED_FUNCTION);
237:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
238:       assertEquals(4095, Node.COLUMN_MASK);
239:       assertEquals(48, Node.DIRECTIVES);
240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
241:       assertEquals(40, Node.ORIGINALNAME_PROP);
242:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
243:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
244:       assertEquals(54, Node.SLASH_V);
245:       assertEquals(43, Node.IS_CONSTANT_NAME);
246:       assertEquals(46, Node.IS_NAMESPACE);
247:       assertEquals(50, Node.FREE_CALL);
248:       assertEquals(51, Node.STATIC_SOURCE_FILE);
249:       assertEquals(12, Node.COLUMN_BITS);
250:       assertEquals(49, Node.DIRECT_EVAL);
251:       assertEquals(32, Node.INCRDECR_PROP);
252:       assertEquals(15, Node.NO_SIDE_EFFECTS);
253:       assertEquals(1, Node.DECR_FLAG);
254:       assertEquals(37, Node.OPT_ARG_NAME);
255:       assertEquals(2, Node.POST_FLAG);
256:       assertEquals(57, Node.LAST_PROP);
257:       assertEquals(30, Node.VAR_ARGS_NAME);
258:       assertEquals(47, Node.IS_DISPATCHER);
259:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
261:       assertEquals(29, Node.JSDOC_INFO_PROP);
262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
263:       assertEquals(53, Node.INPUT_ID);
264:       assertEquals(8, Node.FLAG_NO_THROWS);
265:       assertEquals(39, Node.EMPTY_BLOCK);
266:       assertEquals(56, Node.CHANGE_TIME);
267:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
268:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
269:       assertEquals(52, Node.LENGTH);
270:       assertEquals(57, Node.REFLECTED_OBJECT);
271:       assertEquals(36, Node.QUOTED_PROP);
272:       assertEquals(40, Node.ORIGINALNAME_PROP);
273:       assertEquals(57, Node.REFLECTED_OBJECT);
274:       assertEquals(8, Node.FLAG_NO_THROWS);
275:       assertEquals(39, Node.EMPTY_BLOCK);
276:       assertEquals(54, Node.SLASH_V);
277:       assertEquals(15, Node.NO_SIDE_EFFECTS);
278:       assertEquals(52, Node.LENGTH);
279:       assertEquals(50, Node.FREE_CALL);
280:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
281:       assertEquals(12, Node.COLUMN_BITS);
282:       assertEquals(1, Node.DECR_FLAG);
283:       assertEquals(49, Node.DIRECT_EVAL);
284:       assertEquals(32, Node.INCRDECR_PROP);
285:       assertEquals(37, Node.OPT_ARG_NAME);
286:       assertEquals(48, Node.DIRECTIVES);
287:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
288:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
289:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
290:       assertEquals(4095, Node.COLUMN_MASK);
291:       assertEquals(56, Node.CHANGE_TIME);
292:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
293:       assertEquals(36, Node.QUOTED_PROP);
294:       assertEquals(53, Node.INPUT_ID);
295:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
296:       assertEquals(29, Node.JSDOC_INFO_PROP);
297:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
298:       assertEquals(55, Node.INFERRED_FUNCTION);
299:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
301:       assertEquals(46, Node.IS_NAMESPACE);
302:       assertEquals(43, Node.IS_CONSTANT_NAME);
303:       assertEquals(57, Node.LAST_PROP);
304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
305:       assertEquals(2, Node.POST_FLAG);
306:       assertEquals(47, Node.IS_DISPATCHER);
307:       assertEquals(30, Node.VAR_ARGS_NAME);
308:       assertNotNull(node2);
309:       assertFalse(node0.equals((Object)node1));
310:       assertFalse(node2.equals((Object)node0));
311:       assertFalse(node2.equals((Object)node1));
312:       assertFalse(node0.isTry());
313:       assertFalse(node0.isVoid());
314:       assertFalse(node0.isArrayLit());
315:       assertFalse(node0.isRegExp());
316:       assertFalse(node0.isDefaultCase());
317:       assertFalse(node0.isFunction());
318:       assertFalse(node0.isFor());
319:       assertEquals(0, node0.getChildCount());
320:       assertFalse(node0.isCase());
321:       assertFalse(node0.isString());
322:       assertFalse(node0.isGetterDef());
323:       assertFalse(node0.isSwitch());
324:       assertFalse(node0.isDebugger());
325:       assertFalse(node0.isParamList());
326:       assertFalse(node0.isStringKey());
327:       assertEquals((-1), node0.getCharno());
328:       assertFalse(node0.isCall());
329:       assertFalse(node0.isNew());
330:       assertFalse(node0.isAdd());
331:       assertFalse(node0.isWhile());
332:       assertFalse(node0.isComma());
333:       assertFalse(node0.isVar());
334:       assertFalse(node0.isOr());
335:       assertFalse(node0.isAssignAdd());
336:       assertFalse(node0.isBreak());
337:       assertFalse(node0.isDelProp());
338:       assertFalse(node0.isEmpty());
339:       assertFalse(node0.isName());
340:       assertFalse(node0.isTrue());
341:       assertFalse(node0.isNull());
342:       assertFalse(node0.isExprResult());
343:       assertFalse(node0.isCast());
344:       assertFalse(node0.isGetElem());
345:       assertFalse(node0.hasOneChild());
346:       assertFalse(node0.isScript());
347:       assertFalse(node0.isDec());
348:       assertFalse(node0.isAssign());
349:       assertFalse(node0.isTypeOf());
350:       assertFalse(node0.isWith());
351:       assertFalse(node0.hasChildren());
352:       assertFalse(node0.isLabel());
353:       assertFalse(node0.isReturn());
354:       assertFalse(node0.isContinue());
355:       assertFalse(node0.isGetProp());
356:       assertFalse(node0.isNot());
357:       assertFalse(node0.isLabelName());
358:       assertFalse(node0.isNumber());
359:       assertFalse(node0.isAnd());
360:       assertFalse(node0.isObjectLit());
361:       assertEquals((-1), node0.getSourcePosition());
362:       assertFalse(node0.isInc());
363:       assertFalse(node0.isFalse());
364:       assertFalse(node0.isThis());
365:       assertFalse(node0.isThrow());
366:       assertFalse(node0.isBlock());
367:       assertFalse(node0.isHook());
368:       assertTrue(node0.isDo());
369:       assertEquals((-1), node0.getLineno());
370:       assertFalse(node0.isInstanceOf());
371:       assertFalse(node0.isIn());
372:       assertFalse(node0.hasMoreThanOneChild());
373:       assertEquals(114, node0.getType());
374:       assertFalse(node0.isCatch());
375:       assertFalse(node0.isSetterDef());
376:       assertFalse(node0.isIf());
377:       assertFalse(node0.isNE());
378:       assertEquals(0, node2.getLineno());
379:       assertFalse(node2.isParamList());
380:       assertFalse(node2.isNull());
381:       assertFalse(node2.isSetterDef());
382:       assertFalse(node2.isDebugger());
383:       assertFalse(node2.isBlock());
384:       assertFalse(node2.isVoid());
385:       assertFalse(node2.isTrue());
386:       assertFalse(node2.isName());
387:       assertFalse(node2.isTry());
388:       assertFalse(node2.isDelProp());
389:       assertFalse(node2.isWhile());
390:       assertFalse(node2.isFor());
391:       assertTrue(node2.hasOneChild());
392:       assertFalse(node2.isCall());
393:       assertFalse(node2.isCatch());
394:       assertFalse(node2.isRegExp());
395:       assertFalse(node2.hasMoreThanOneChild());
396:       assertTrue(node2.hasChildren());
397:       assertFalse(node2.isReturn());
398:       assertFalse(node2.isNE());
399:       assertFalse(node2.isIf());
400:       assertFalse(node2.isString());
401:       assertFalse(node2.isInc());
402:       assertEquals(30, node2.getCharno());
403:       assertFalse(node2.isIn());
404:       assertFalse(node2.isThrow());
405:       assertEquals(2497, node2.getType());
406:       assertFalse(node2.isContinue());
407:       assertFalse(node2.isCast());
408:       assertFalse(node2.isFalse());
409:       assertFalse(node2.isFunction());
410:       assertFalse(node2.isInstanceOf());
411:       assertFalse(node2.isGetProp());
412:       assertFalse(node2.isAnd());
413:       assertFalse(node2.isScript());
414:       assertFalse(node2.isObjectLit());
415:       assertFalse(node2.isNot());
416:       assertFalse(node2.isHook());
417:       assertFalse(node2.isBreak());
418:       assertFalse(node2.isDec());
419:       assertFalse(node2.isAssign());
420:       assertFalse(node2.isThis());
421:       assertFalse(node2.isGetElem());
422:       assertFalse(node2.isExprResult());
423:       assertFalse(node2.isComma());
424:       assertFalse(node2.isTypeOf());
425:       assertFalse(node2.isWith());
426:       assertEquals(1, node2.getChildCount());
427:       assertFalse(node2.isOr());
428:       assertFalse(node2.isLabel());
429:       assertFalse(node2.isAssignAdd());
430:       assertFalse(node2.isGetterDef());
431:       assertFalse(node2.isDo());
432:       assertFalse(node2.isEmpty());
433:       assertFalse(node2.isCase());
434:       assertEquals(30, node2.getSourcePosition());
435:       assertFalse(node2.isNumber());
436:       assertFalse(node2.isVar());
437:       assertFalse(node2.isAdd());
438:       assertFalse(node2.isArrayLit());
439:       assertFalse(node2.isNew());
440:       assertFalse(node2.isStringKey());
441:       assertFalse(node2.isLabelName());
442:       assertFalse(node2.isDefaultCase());
443:       assertFalse(node2.isSwitch());
444:       
445:       Node node3 = node0.removeChildren();
446:       assertEquals(55, Node.INFERRED_FUNCTION);
447:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
448:       assertEquals(4095, Node.COLUMN_MASK);
449:       assertEquals(48, Node.DIRECTIVES);
450:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
451:       assertEquals(40, Node.ORIGINALNAME_PROP);
452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
453:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
454:       assertEquals(54, Node.SLASH_V);
455:       assertEquals(43, Node.IS_CONSTANT_NAME);
456:       assertEquals(46, Node.IS_NAMESPACE);
457:       assertEquals(50, Node.FREE_CALL);
458:       assertEquals(51, Node.STATIC_SOURCE_FILE);
459:       assertEquals(12, Node.COLUMN_BITS);
460:       assertEquals(49, Node.DIRECT_EVAL);
461:       assertEquals(32, Node.INCRDECR_PROP);
462:       assertEquals(15, Node.NO_SIDE_EFFECTS);
463:       assertEquals(1, Node.DECR_FLAG);
464:       assertEquals(37, Node.OPT_ARG_NAME);
465:       assertEquals(2, Node.POST_FLAG);
466:       assertEquals(57, Node.LAST_PROP);
467:       assertEquals(30, Node.VAR_ARGS_NAME);
468:       assertEquals(47, Node.IS_DISPATCHER);
469:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
470:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
471:       assertEquals(29, Node.JSDOC_INFO_PROP);
472:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
473:       assertEquals(53, Node.INPUT_ID);
474:       assertEquals(8, Node.FLAG_NO_THROWS);
475:       assertEquals(39, Node.EMPTY_BLOCK);
476:       assertEquals(56, Node.CHANGE_TIME);
477:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
478:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
479:       assertEquals(52, Node.LENGTH);
480:       assertEquals(57, Node.REFLECTED_OBJECT);
481:       assertEquals(36, Node.QUOTED_PROP);
482:       assertNotSame(node0, node2);
483:       assertNull(node3);
484:       assertFalse(node0.equals((Object)node2));
485:       assertFalse(node0.equals((Object)node1));
486:       assertFalse(node0.isTry());
487:       assertFalse(node0.isVoid());
488:       assertFalse(node0.isArrayLit());
489:       assertFalse(node0.isRegExp());
490:       assertFalse(node0.isDefaultCase());
491:       assertFalse(node0.isFunction());
492:       assertFalse(node0.isFor());
493:       assertEquals(0, node0.getChildCount());
494:       assertFalse(node0.isCase());
495:       assertFalse(node0.isString());
496:       assertFalse(node0.isGetterDef());
497:       assertFalse(node0.isSwitch());
498:       assertFalse(node0.isDebugger());
499:       assertFalse(node0.isParamList());
500:       assertFalse(node0.isStringKey());
501:       assertEquals((-1), node0.getCharno());
502:       assertFalse(node0.isCall());
503:       assertFalse(node0.isNew());
504:       assertFalse(node0.isAdd());
505:       assertFalse(node0.isWhile());
506:       assertFalse(node0.isComma());
507:       assertFalse(node0.isVar());
508:       assertFalse(node0.isOr());
509:       assertFalse(node0.isAssignAdd());
510:       assertFalse(node0.isBreak());
511:       assertFalse(node0.isDelProp());
512:       assertFalse(node0.isEmpty());
513:       assertFalse(node0.isName());
514:       assertFalse(node0.isTrue());
515:       assertFalse(node0.isNull());
516:       assertFalse(node0.isExprResult());
517:       assertFalse(node0.isCast());
518:       assertFalse(node0.isGetElem());
519:       assertFalse(node0.hasOneChild());
520:       assertFalse(node0.isScript());
521:       assertFalse(node0.isDec());
522:       assertFalse(node0.isAssign());
523:       assertFalse(node0.isTypeOf());
524:       assertFalse(node0.isWith());
525:       assertFalse(node0.hasChildren());
526:       assertFalse(node0.isLabel());
527:       assertFalse(node0.isReturn());
528:       assertFalse(node0.isContinue());
529:       assertFalse(node0.isGetProp());
530:       assertFalse(node0.isNot());
531:       assertFalse(node0.isLabelName());
532:       assertFalse(node0.isNumber());
533:       assertFalse(node0.isAnd());
534:       assertFalse(node0.isObjectLit());
535:       assertEquals((-1), node0.getSourcePosition());
536:       assertFalse(node0.isInc());
537:       assertFalse(node0.isFalse());
538:       assertFalse(node0.isThis());
539:       assertFalse(node0.isThrow());
540:       assertFalse(node0.isBlock());
541:       assertFalse(node0.isHook());
542:       assertTrue(node0.isDo());
543:       assertEquals((-1), node0.getLineno());
544:       assertFalse(node0.isInstanceOf());
545:       assertFalse(node0.isIn());
546:       assertFalse(node0.hasMoreThanOneChild());
547:       assertEquals(114, node0.getType());
548:       assertFalse(node0.isCatch());
549:       assertFalse(node0.isSetterDef());
550:       assertFalse(node0.isIf());
551:       assertFalse(node0.isNE());
552:       
553:       Iterable<Node> iterable0 = node0.children();
554:       assertFalse(iterable0.contains(node0));
555:       assertEquals(55, Node.INFERRED_FUNCTION);
556:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
557:       assertEquals(4095, Node.COLUMN_MASK);
558:       assertEquals(48, Node.DIRECTIVES);
559:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
560:       assertEquals(40, Node.ORIGINALNAME_PROP);
561:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
562:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
563:       assertEquals(54, Node.SLASH_V);
564:       assertEquals(43, Node.IS_CONSTANT_NAME);
565:       assertEquals(46, Node.IS_NAMESPACE);
566:       assertEquals(50, Node.FREE_CALL);
567:       assertEquals(51, Node.STATIC_SOURCE_FILE);
568:       assertEquals(12, Node.COLUMN_BITS);
569:       assertEquals(49, Node.DIRECT_EVAL);
570:       assertEquals(32, Node.INCRDECR_PROP);
571:       assertEquals(15, Node.NO_SIDE_EFFECTS);
572:       assertEquals(1, Node.DECR_FLAG);
573:       assertEquals(37, Node.OPT_ARG_NAME);
574:       assertEquals(2, Node.POST_FLAG);
575:       assertEquals(57, Node.LAST_PROP);
576:       assertEquals(30, Node.VAR_ARGS_NAME);
577:       assertEquals(47, Node.IS_DISPATCHER);
578:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
579:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
580:       assertEquals(29, Node.JSDOC_INFO_PROP);
581:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
582:       assertEquals(53, Node.INPUT_ID);
583:       assertEquals(8, Node.FLAG_NO_THROWS);
584:       assertEquals(39, Node.EMPTY_BLOCK);
585:       assertEquals(56, Node.CHANGE_TIME);
586:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
587:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
588:       assertEquals(52, Node.LENGTH);
589:       assertEquals(57, Node.REFLECTED_OBJECT);
590:       assertEquals(36, Node.QUOTED_PROP);
591:       assertNotSame(node0, node2);
592:       assertNotNull(iterable0);
593:       assertFalse(node0.equals((Object)node2));
594:       assertFalse(node0.equals((Object)node1));
595:       assertFalse(node0.isTry());
596:       assertFalse(node0.isVoid());
597:       assertFalse(node0.isArrayLit());
598:       assertFalse(node0.isRegExp());
599:       assertFalse(node0.isDefaultCase());
600:       assertFalse(node0.isFunction());
601:       assertFalse(node0.isFor());
602:       assertEquals(0, node0.getChildCount());
603:       assertFalse(node0.isCase());
604:       assertFalse(node0.isString());
605:       assertFalse(node0.isGetterDef());
606:       assertFalse(node0.isSwitch());
607:       assertFalse(node0.isDebugger());
608:       assertFalse(node0.isParamList());
609:       assertFalse(node0.isStringKey());
610:       assertEquals((-1), node0.getCharno());
611:       assertFalse(node0.isCall());
612:       assertFalse(node0.isNew());
613:       assertFalse(node0.isAdd());
614:       assertFalse(node0.isWhile());
615:       assertFalse(node0.isComma());
616:       assertFalse(node0.isVar());
617:       assertFalse(node0.isOr());
618:       assertFalse(node0.isAssignAdd());
619:       assertFalse(node0.isBreak());
620:       assertFalse(node0.isDelProp());
621:       assertFalse(node0.isEmpty());
622:       assertFalse(node0.isName());
623:       assertFalse(node0.isTrue());
624:       assertFalse(node0.isNull());
625:       assertFalse(node0.isExprResult());
626:       assertFalse(node0.isCast());
627:       assertFalse(node0.isGetElem());
628:       assertFalse(node0.hasOneChild());
629:       assertFalse(node0.isScript());
630:       assertFalse(node0.isDec());
631:       assertFalse(node0.isAssign());
632:       assertFalse(node0.isTypeOf());
633:       assertFalse(node0.isWith());
634:       assertFalse(node0.hasChildren());
635:       assertFalse(node0.isLabel());
636:       assertFalse(node0.isReturn());
637:       assertFalse(node0.isContinue());
638:       assertFalse(node0.isGetProp());
639:       assertFalse(node0.isNot());
640:       assertFalse(node0.isLabelName());
641:       assertFalse(node0.isNumber());
642:       assertFalse(node0.isAnd());
643:       assertFalse(node0.isObjectLit());
644:       assertEquals((-1), node0.getSourcePosition());
645:       assertFalse(node0.isInc());
646:       assertFalse(node0.isFalse());
647:       assertFalse(node0.isThis());
648:       assertFalse(node0.isThrow());
649:       assertFalse(node0.isBlock());
650:       assertFalse(node0.isHook());
651:       assertTrue(node0.isDo());
652:       assertEquals((-1), node0.getLineno());
653:       assertFalse(node0.isInstanceOf());
654:       assertFalse(node0.isIn());
655:       assertFalse(node0.hasMoreThanOneChild());
656:       assertEquals(114, node0.getType());
657:       assertFalse(node0.isCatch());
658:       assertFalse(node0.isSetterDef());
659:       assertFalse(node0.isIf());
660:       assertFalse(node0.isNE());
661:       
662:       node1.addSuppression("q=lvL_oht *_!ep^i");
663:       assertEquals(47, Node.IS_DISPATCHER);
664:       assertEquals(56, Node.CHANGE_TIME);
665:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
666:       assertEquals(29, Node.JSDOC_INFO_PROP);
667:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
668:       assertEquals(2, Node.POST_FLAG);
669:       assertEquals(12, Node.COLUMN_BITS);
670:       assertEquals(53, Node.INPUT_ID);
671:       assertEquals(1, Node.DECR_FLAG);
672:       assertEquals(32, Node.INCRDECR_PROP);
673:       assertEquals(15, Node.NO_SIDE_EFFECTS);
674:       assertEquals(36, Node.QUOTED_PROP);
675:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
676:       assertEquals(52, Node.LENGTH);
677:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
678:       assertEquals(4095, Node.COLUMN_MASK);
679:       assertEquals(57, Node.REFLECTED_OBJECT);
680:       assertEquals(48, Node.DIRECTIVES);
681:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
682:       assertEquals(37, Node.OPT_ARG_NAME);
683:       assertEquals(49, Node.DIRECT_EVAL);
684:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
685:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
686:       assertEquals(39, Node.EMPTY_BLOCK);
687:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
688:       assertEquals(8, Node.FLAG_NO_THROWS);
689:       assertEquals(50, Node.FREE_CALL);
690:       assertEquals(55, Node.INFERRED_FUNCTION);
691:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
692:       assertEquals(57, Node.LAST_PROP);
693:       assertEquals(43, Node.IS_CONSTANT_NAME);
694:       assertEquals(30, Node.VAR_ARGS_NAME);
695:       assertEquals(51, Node.STATIC_SOURCE_FILE);
696:       assertEquals(40, Node.ORIGINALNAME_PROP);
697:       assertEquals(46, Node.IS_NAMESPACE);
698:       assertEquals(54, Node.SLASH_V);
699:       assertFalse(node1.equals((Object)node2));
700:       assertFalse(node1.equals((Object)node0));
701:       assertFalse(node1.isCase());
702:       assertFalse(node1.isIn());
703:       assertFalse(node1.isInc());
704:       assertFalse(node1.isEmpty());
705:       assertFalse(node1.isFor());
706:       assertFalse(node1.isHook());
707:       assertFalse(node1.isComma());
708:       assertFalse(node1.isTrue());
709:       assertFalse(node1.isNE());
710:       assertFalse(node1.isBreak());
711:       assertFalse(node1.isIf());
712:       assertFalse(node1.isDelProp());
713:       assertFalse(node1.isVoid());
714:       assertEquals(40, node1.getType());
715:       assertFalse(node1.isAnd());
716:       assertFalse(node1.isFunction());
717:       assertFalse(node1.isObjectLit());
718:       assertFalse(node1.isNot());
719:       assertFalse(node1.isGetProp());
720:       assertFalse(node1.isSetterDef());
721:       assertFalse(node1.isFalse());
722:       assertFalse(node1.isThrow());
723:       assertFalse(node1.isCast());
724:       assertEquals((-1), node1.getSourcePosition());
725:       assertFalse(node1.isDebugger());
726:       assertFalse(node1.isContinue());
727:       assertFalse(node1.isWhile());
728:       assertFalse(node1.hasMoreThanOneChild());
729:       assertFalse(node1.isOr());
730:       assertTrue(node1.isString());
731:       assertFalse(node1.isNew());
732:       assertFalse(node1.isBlock());
733:       assertFalse(node1.isAssignAdd());
734:       assertFalse(node1.isLabel());
735:       assertFalse(node1.isReturn());
736:       assertFalse(node1.isAdd());
737:       assertFalse(node1.isDo());
738:       assertFalse(node1.isGetElem());
739:       assertFalse(node1.isName());
740:       assertFalse(node1.isCall());
741:       assertFalse(node1.isDec());
742:       assertFalse(node1.isTypeOf());
743:       assertFalse(node1.isNull());
744:       assertFalse(node1.hasChildren());
745:       assertFalse(node1.isAssign());
746:       assertFalse(node1.isExprResult());
747:       assertEquals((-1), node1.getLineno());
748:       assertFalse(node1.isWith());
749:       assertFalse(node1.isCatch());
750:       assertFalse(node1.isInstanceOf());
751:       assertFalse(node1.isRegExp());
752:       assertEquals(0, node1.getChildCount());
753:       assertFalse(node1.isThis());
754:       assertFalse(node1.isScript());
755:       assertFalse(node1.hasOneChild());
756:       assertFalse(node1.isDefaultCase());
757:       assertFalse(node1.isTry());
758:       assertFalse(node1.isStringKey());
759:       assertFalse(node1.isVar());
760:       assertFalse(node1.isNumber());
761:       assertFalse(node1.isGetterDef());
762:       assertEquals((-1), node1.getCharno());
763:       assertFalse(node1.isParamList());
764:       assertFalse(node1.isArrayLit());
765:       assertFalse(node1.isSwitch());
766:       assertFalse(node1.isLabelName());
767:       
768:       int int0 = node2.getLineno();
769:       assertEquals(0, int0);
770:       assertEquals(55, Node.INFERRED_FUNCTION);
771:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
772:       assertEquals(4095, Node.COLUMN_MASK);
773:       assertEquals(48, Node.DIRECTIVES);
774:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
775:       assertEquals(40, Node.ORIGINALNAME_PROP);
776:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
777:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
778:       assertEquals(54, Node.SLASH_V);
779:       assertEquals(43, Node.IS_CONSTANT_NAME);
780:       assertEquals(46, Node.IS_NAMESPACE);
781:       assertEquals(50, Node.FREE_CALL);
782:       assertEquals(51, Node.STATIC_SOURCE_FILE);
783:       assertEquals(12, Node.COLUMN_BITS);
784:       assertEquals(49, Node.DIRECT_EVAL);
785:       assertEquals(32, Node.INCRDECR_PROP);
786:       assertEquals(15, Node.NO_SIDE_EFFECTS);
787:       assertEquals(1, Node.DECR_FLAG);
788:       assertEquals(37, Node.OPT_ARG_NAME);
789:       assertEquals(2, Node.POST_FLAG);
790:       assertEquals(57, Node.LAST_PROP);
791:       assertEquals(30, Node.VAR_ARGS_NAME);
792:       assertEquals(47, Node.IS_DISPATCHER);
793:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
794:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
795:       assertEquals(29, Node.JSDOC_INFO_PROP);
796:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
797:       assertEquals(53, Node.INPUT_ID);
798:       assertEquals(8, Node.FLAG_NO_THROWS);
799:       assertEquals(39, Node.EMPTY_BLOCK);
800:       assertEquals(56, Node.CHANGE_TIME);
801:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
802:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
803:       assertEquals(52, Node.LENGTH);
804:       assertEquals(57, Node.REFLECTED_OBJECT);
805:       assertEquals(36, Node.QUOTED_PROP);
806:       assertEquals(40, Node.ORIGINALNAME_PROP);
807:       assertEquals(57, Node.REFLECTED_OBJECT);
808:       assertEquals(8, Node.FLAG_NO_THROWS);
809:       assertEquals(39, Node.EMPTY_BLOCK);
810:       assertEquals(54, Node.SLASH_V);
811:       assertEquals(15, Node.NO_SIDE_EFFECTS);
812:       assertEquals(52, Node.LENGTH);
813:       assertEquals(50, Node.FREE_CALL);
814:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
815:       assertEquals(12, Node.COLUMN_BITS);
816:       assertEquals(1, Node.DECR_FLAG);
817:       assertEquals(49, Node.DIRECT_EVAL);
818:       assertEquals(32, Node.INCRDECR_PROP);
819:       assertEquals(37, Node.OPT_ARG_NAME);
820:       assertEquals(48, Node.DIRECTIVES);
821:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
822:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
823:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
824:       assertEquals(4095, Node.COLUMN_MASK);
825:       assertEquals(56, Node.CHANGE_TIME);
826:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
827:       assertEquals(36, Node.QUOTED_PROP);
828:       assertEquals(53, Node.INPUT_ID);
829:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
830:       assertEquals(29, Node.JSDOC_INFO_PROP);
831:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
832:       assertEquals(55, Node.INFERRED_FUNCTION);
833:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
834:       assertEquals(51, Node.STATIC_SOURCE_FILE);
835:       assertEquals(46, Node.IS_NAMESPACE);
836:       assertEquals(43, Node.IS_CONSTANT_NAME);
837:       assertEquals(57, Node.LAST_PROP);
838:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
839:       assertEquals(2, Node.POST_FLAG);
840:       assertEquals(47, Node.IS_DISPATCHER);
841:       assertEquals(30, Node.VAR_ARGS_NAME);
842:       assertNotSame(node0, node2);
843:       assertNotSame(node2, node0);
844:       assertFalse(node0.equals((Object)node2));
845:       assertFalse(node0.equals((Object)node1));
846:       assertFalse(node2.equals((Object)node0));
847:       assertFalse(node2.equals((Object)node1));
848:       assertFalse(node0.isTry());
849:       assertFalse(node0.isVoid());
850:       assertFalse(node0.isArrayLit());
851:       assertFalse(node0.isRegExp());
852:       assertFalse(node0.isDefaultCase());
853:       assertFalse(node0.isFunction());
854:       assertFalse(node0.isFor());
855:       assertEquals(0, node0.getChildCount());
856:       assertFalse(node0.isCase());
857:       assertFalse(node0.isString());
858:       assertFalse(node0.isGetterDef());
859:       assertFalse(node0.isSwitch());
860:       assertFalse(node0.isDebugger());
861:       assertFalse(node0.isParamList());
862:       assertFalse(node0.isStringKey());
863:       assertEquals((-1), node0.getCharno());
864:       assertFalse(node0.isCall());
865:       assertFalse(node0.isNew());
866:       assertFalse(node0.isAdd());
867:       assertFalse(node0.isWhile());
868:       assertFalse(node0.isComma());
869:       assertFalse(node0.isVar());
870:       assertFalse(node0.isOr());
871:       assertFalse(node0.isAssignAdd());
872:       assertFalse(node0.isBreak());
873:       assertFalse(node0.isDelProp());
874:       assertFalse(node0.isEmpty());
875:       assertFalse(node0.isName());
876:       assertFalse(node0.isTrue());
877:       assertFalse(node0.isNull());
878:       assertFalse(node0.isExprResult());
879:       assertFalse(node0.isCast());
880:       assertFalse(node0.isGetElem());
881:       assertFalse(node0.hasOneChild());
882:       assertFalse(node0.isScript());
883:       assertFalse(node0.isDec());
884:       assertFalse(node0.isAssign());
885:       assertFalse(node0.isTypeOf());
886:       assertFalse(node0.isWith());
887:       assertFalse(node0.hasChildren());
888:       assertFalse(node0.isLabel());
889:       assertFalse(node0.isReturn());
890:       assertFalse(node0.isContinue());
891:       assertFalse(node0.isGetProp());
892:       assertFalse(node0.isNot());
893:       assertFalse(node0.isLabelName());
894:       assertFalse(node0.isNumber());
895:       assertFalse(node0.isAnd());
896:       assertFalse(node0.isObjectLit());
897:       assertEquals((-1), node0.getSourcePosition());
898:       assertFalse(node0.isInc());
899:       assertFalse(node0.isFalse());
900:       assertFalse(node0.isThis());
901:       assertFalse(node0.isThrow());
902:       assertFalse(node0.isBlock());
903:       assertFalse(node0.isHook());
904:       assertTrue(node0.isDo());
905:       assertEquals((-1), node0.getLineno());
906:       assertFalse(node0.isInstanceOf());
907:       assertFalse(node0.isIn());
908:       assertFalse(node0.hasMoreThanOneChild());
909:       assertEquals(114, node0.getType());
910:       assertFalse(node0.isCatch());
911:       assertFalse(node0.isSetterDef());
912:       assertFalse(node0.isIf());
913:       assertFalse(node0.isNE());
914:       assertEquals(0, node2.getLineno());
915:       assertFalse(node2.isParamList());
916:       assertFalse(node2.isNull());
917:       assertFalse(node2.isSetterDef());
918:       assertFalse(node2.isDebugger());
919:       assertFalse(node2.isBlock());
920:       assertFalse(node2.isVoid());
921:       assertFalse(node2.isTrue());
922:       assertFalse(node2.isName());
923:       assertFalse(node2.isTry());
924:       assertFalse(node2.isDelProp());
925:       assertFalse(node2.isWhile());
926:       assertFalse(node2.isFor());
927:       assertTrue(node2.hasOneChild());
928:       assertFalse(node2.isCall());
929:       assertFalse(node2.isCatch());
930:       assertFalse(node2.isRegExp());
931:       assertFalse(node2.hasMoreThanOneChild());
932:       assertTrue(node2.hasChildren());
933:       assertFalse(node2.isReturn());
934:       assertFalse(node2.isNE());
935:       assertFalse(node2.isIf());
936:       assertFalse(node2.isString());
937:       assertFalse(node2.isInc());
938:       assertEquals(30, node2.getCharno());
939:       assertFalse(node2.isIn());
940:       assertFalse(node2.isThrow());
941:       assertEquals(2497, node2.getType());
942:       assertFalse(node2.isContinue());
943:       assertFalse(node2.isCast());
944:       assertFalse(node2.isFalse());
945:       assertFalse(node2.isFunction());
946:       assertFalse(node2.isInstanceOf());
947:       assertFalse(node2.isGetProp());
948:       assertFalse(node2.isAnd());
949:       assertFalse(node2.isScript());
950:       assertFalse(node2.isObjectLit());
951:       assertFalse(node2.isNot());
952:       assertFalse(node2.isHook());
953:       assertFalse(node2.isBreak());
954:       assertFalse(node2.isDec());
955:       assertFalse(node2.isAssign());
956:       assertFalse(node2.isThis());
957:       assertFalse(node2.isGetElem());
958:       assertFalse(node2.isExprResult());
959:       assertFalse(node2.isComma());
960:       assertFalse(node2.isTypeOf());
961:       assertFalse(node2.isWith());
962:       assertEquals(1, node2.getChildCount());
963:       assertFalse(node2.isOr());
964:       assertFalse(node2.isLabel());
965:       assertFalse(node2.isAssignAdd());
966:       assertFalse(node2.isGetterDef());
967:       assertFalse(node2.isDo());
968:       assertFalse(node2.isEmpty());
969:       assertFalse(node2.isCase());
970:       assertEquals(30, node2.getSourcePosition());
971:       assertFalse(node2.isNumber());
972:       assertFalse(node2.isVar());
973:       assertFalse(node2.isAdd());
974:       assertFalse(node2.isArrayLit());
975:       assertFalse(node2.isNew());
976:       assertFalse(node2.isStringKey());
977:       assertFalse(node2.isLabelName());
978:       assertFalse(node2.isDefaultCase());
979:       assertFalse(node2.isSwitch());
980:       
981:       boolean boolean1 = node1.isGetElem();
982:       assertFalse(boolean1);
983:       assertEquals(47, Node.IS_DISPATCHER);
984:       assertEquals(56, Node.CHANGE_TIME);
985:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
986:       assertEquals(29, Node.JSDOC_INFO_PROP);
987:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
988:       assertEquals(2, Node.POST_FLAG);
989:       assertEquals(12, Node.COLUMN_BITS);
990:       assertEquals(53, Node.INPUT_ID);
991:       assertEquals(1, Node.DECR_FLAG);
992:       assertEquals(32, Node.INCRDECR_PROP);
993:       assertEquals(15, Node.NO_SIDE_EFFECTS);
994:       assertEquals(36, Node.QUOTED_PROP);
995:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
996:       assertEquals(52, Node.LENGTH);
997:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
998:       assertEquals(4095, Node.COLUMN_MASK);
999:       assertEquals(57, Node.REFLECTED_OBJECT);
1000:       assertEquals(48, Node.DIRECTIVES);
1001:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1002:       assertEquals(37, Node.OPT_ARG_NAME);
1003:       assertEquals(49, Node.DIRECT_EVAL);
1004:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1005:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1006:       assertEquals(39, Node.EMPTY_BLOCK);
1007:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1008:       assertEquals(8, Node.FLAG_NO_THROWS);
1009:       assertEquals(50, Node.FREE_CALL);
1010:       assertEquals(55, Node.INFERRED_FUNCTION);
1011:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1012:       assertEquals(57, Node.LAST_PROP);
1013:       assertEquals(43, Node.IS_CONSTANT_NAME);
1014:       assertEquals(30, Node.VAR_ARGS_NAME);
1015:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1016:       assertEquals(40, Node.ORIGINALNAME_PROP);
1017:       assertEquals(46, Node.IS_NAMESPACE);
1018:       assertEquals(54, Node.SLASH_V);
1019:       assertFalse(node1.equals((Object)node2));
1020:       assertFalse(node1.equals((Object)node0));
1021:       assertFalse(boolean1 == boolean0);
1022:       assertFalse(node1.isCase());
1023:       assertFalse(node1.isIn());
1024:       assertFalse(node1.isInc());
1025:       assertFalse(node1.isEmpty());
1026:       assertFalse(node1.isFor());
1027:       assertFalse(node1.isHook());
1028:       assertFalse(node1.isComma());
1029:       assertFalse(node1.isTrue());
1030:       assertFalse(node1.isNE());
1031:       assertFalse(node1.isBreak());
1032:       assertFalse(node1.isIf());
1033:       assertFalse(node1.isDelProp());
1034:       assertFalse(node1.isVoid());
1035:       assertEquals(40, node1.getType());
1036:       assertFalse(node1.isAnd());
1037:       assertFalse(node1.isFunction());
1038:       assertFalse(node1.isObjectLit());
1039:       assertFalse(node1.isNot());
1040:       assertFalse(node1.isGetProp());
1041:       assertFalse(node1.isSetterDef());
1042:       assertFalse(node1.isFalse());
1043:       assertFalse(node1.isThrow());
1044:       assertFalse(node1.isCast());
1045:       assertEquals((-1), node1.getSourcePosition());
1046:       assertFalse(node1.isDebugger());
1047:       assertFalse(node1.isContinue());
1048:       assertFalse(node1.isWhile());
1049:       assertFalse(node1.hasMoreThanOneChild());
1050:       assertFalse(node1.isOr());
1051:       assertTrue(node1.isString());
1052:       assertFalse(node1.isNew());
1053:       assertFalse(node1.isBlock());
1054:       assertFalse(node1.isAssignAdd());
1055:       assertFalse(node1.isLabel());
1056:       assertFalse(node1.isReturn());
1057:       assertFalse(node1.isAdd());
1058:       assertFalse(node1.isDo());
1059:       assertFalse(node1.isGetElem());
1060:       assertFalse(node1.isName());
1061:       assertFalse(node1.isCall());
1062:       assertFalse(node1.isDec());
1063:       assertFalse(node1.isTypeOf());
1064:       assertFalse(node1.isNull());
1065:       assertFalse(node1.hasChildren());
1066:       assertFalse(node1.isAssign());
1067:       assertFalse(node1.isExprResult());
1068:       assertEquals((-1), node1.getLineno());
1069:       assertFalse(node1.isWith());
1070:       assertFalse(node1.isCatch());
1071:       assertFalse(node1.isInstanceOf());
1072:       assertFalse(node1.isRegExp());
1073:       assertEquals(0, node1.getChildCount());
1074:       assertFalse(node1.isThis());
1075:       assertFalse(node1.isScript());
1076:       assertFalse(node1.hasOneChild());
1077:       assertFalse(node1.isDefaultCase());
1078:       assertFalse(node1.isTry());
1079:       assertFalse(node1.isStringKey());
1080:       assertFalse(node1.isVar());
1081:       assertFalse(node1.isNumber());
1082:       assertFalse(node1.isGetterDef());
1083:       assertEquals((-1), node1.getCharno());
1084:       assertFalse(node1.isParamList());
1085:       assertFalse(node1.isArrayLit());
1086:       assertFalse(node1.isSwitch());
1087:       assertFalse(node1.isLabelName());
1088:       
1089:       Node node4 = node2.useSourceInfoFromForTree(node1);
1090:       assertEquals(55, Node.INFERRED_FUNCTION);
1091:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1092:       assertEquals(4095, Node.COLUMN_MASK);
1093:       assertEquals(48, Node.DIRECTIVES);
1094:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1095:       assertEquals(40, Node.ORIGINALNAME_PROP);
1096:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1097:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1098:       assertEquals(54, Node.SLASH_V);
1099:       assertEquals(43, Node.IS_CONSTANT_NAME);
1100:       assertEquals(46, Node.IS_NAMESPACE);
1101:       assertEquals(50, Node.FREE_CALL);
1102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1103:       assertEquals(12, Node.COLUMN_BITS);
1104:       assertEquals(49, Node.DIRECT_EVAL);
1105:       assertEquals(32, Node.INCRDECR_PROP);
1106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1107:       assertEquals(1, Node.DECR_FLAG);
1108:       assertEquals(37, Node.OPT_ARG_NAME);
1109:       assertEquals(2, Node.POST_FLAG);
1110:       assertEquals(57, Node.LAST_PROP);
1111:       assertEquals(30, Node.VAR_ARGS_NAME);
1112:       assertEquals(47, Node.IS_DISPATCHER);
1113:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1114:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1115:       assertEquals(29, Node.JSDOC_INFO_PROP);
1116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1117:       assertEquals(53, Node.INPUT_ID);
1118:       assertEquals(8, Node.FLAG_NO_THROWS);
1119:       assertEquals(39, Node.EMPTY_BLOCK);
1120:       assertEquals(56, Node.CHANGE_TIME);
1121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1122:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1123:       assertEquals(52, Node.LENGTH);
1124:       assertEquals(57, Node.REFLECTED_OBJECT);
1125:       assertEquals(36, Node.QUOTED_PROP);
1126:       assertEquals(47, Node.IS_DISPATCHER);
1127:       assertEquals(56, Node.CHANGE_TIME);
1128:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1129:       assertEquals(29, Node.JSDOC_INFO_PROP);
1130:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1131:       assertEquals(2, Node.POST_FLAG);
1132:       assertEquals(12, Node.COLUMN_BITS);
1133:       assertEquals(53, Node.INPUT_ID);
1134:       assertEquals(1, Node.DECR_FLAG);
1135:       assertEquals(32, Node.INCRDECR_PROP);
1136:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1137:       assertEquals(36, Node.QUOTED_PROP);
1138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1139:       assertEquals(52, Node.LENGTH);
1140:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1141:       assertEquals(4095, Node.COLUMN_MASK);
1142:       assertEquals(57, Node.REFLECTED_OBJECT);
1143:       assertEquals(48, Node.DIRECTIVES);
1144:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1145:       assertEquals(37, Node.OPT_ARG_NAME);
1146:       assertEquals(49, Node.DIRECT_EVAL);
1147:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1149:       assertEquals(39, Node.EMPTY_BLOCK);
1150:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1151:       assertEquals(8, Node.FLAG_NO_THROWS);
1152:       assertEquals(50, Node.FREE_CALL);
1153:       assertEquals(55, Node.INFERRED_FUNCTION);
1154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1155:       assertEquals(57, Node.LAST_PROP);
1156:       assertEquals(43, Node.IS_CONSTANT_NAME);
1157:       assertEquals(30, Node.VAR_ARGS_NAME);
1158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1159:       assertEquals(40, Node.ORIGINALNAME_PROP);
1160:       assertEquals(46, Node.IS_NAMESPACE);
1161:       assertEquals(54, Node.SLASH_V);
1162:       assertEquals(40, Node.ORIGINALNAME_PROP);
1163:       assertEquals(57, Node.REFLECTED_OBJECT);
1164:       assertEquals(8, Node.FLAG_NO_THROWS);
1165:       assertEquals(39, Node.EMPTY_BLOCK);
1166:       assertEquals(54, Node.SLASH_V);
1167:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1168:       assertEquals(52, Node.LENGTH);
1169:       assertEquals(50, Node.FREE_CALL);
1170:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1171:       assertEquals(12, Node.COLUMN_BITS);
1172:       assertEquals(1, Node.DECR_FLAG);
1173:       assertEquals(49, Node.DIRECT_EVAL);
1174:       assertEquals(32, Node.INCRDECR_PROP);
1175:       assertEquals(37, Node.OPT_ARG_NAME);
1176:       assertEquals(48, Node.DIRECTIVES);
1177:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1178:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1179:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1180:       assertEquals(4095, Node.COLUMN_MASK);
1181:       assertEquals(56, Node.CHANGE_TIME);
1182:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1183:       assertEquals(36, Node.QUOTED_PROP);
1184:       assertEquals(53, Node.INPUT_ID);
1185:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1186:       assertEquals(29, Node.JSDOC_INFO_PROP);
1187:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1188:       assertEquals(55, Node.INFERRED_FUNCTION);
1189:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1190:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1191:       assertEquals(46, Node.IS_NAMESPACE);
1192:       assertEquals(43, Node.IS_CONSTANT_NAME);
1193:       assertEquals(57, Node.LAST_PROP);
1194:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1195:       assertEquals(2, Node.POST_FLAG);
1196:       assertEquals(47, Node.IS_DISPATCHER);
1197:       assertEquals(30, Node.VAR_ARGS_NAME);
1198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1199:       assertEquals(8, Node.FLAG_NO_THROWS);
1200:       assertEquals(39, Node.EMPTY_BLOCK);
1201:       assertEquals(4095, Node.COLUMN_MASK);
1202:       assertEquals(55, Node.INFERRED_FUNCTION);
1203:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1204:       assertEquals(50, Node.FREE_CALL);
1205:       assertEquals(36, Node.QUOTED_PROP);
1206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1207:       assertEquals(48, Node.DIRECTIVES);
1208:       assertEquals(43, Node.IS_CONSTANT_NAME);
1209:       assertEquals(52, Node.LENGTH);
1210:       assertEquals(57, Node.REFLECTED_OBJECT);
1211:       assertEquals(40, Node.ORIGINALNAME_PROP);
1212:       assertEquals(53, Node.INPUT_ID);
1213:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1214:       assertEquals(29, Node.JSDOC_INFO_PROP);
1215:       assertEquals(57, Node.LAST_PROP);
1216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1217:       assertEquals(47, Node.IS_DISPATCHER);
1218:       assertEquals(2, Node.POST_FLAG);
1219:       assertEquals(30, Node.VAR_ARGS_NAME);
1220:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1221:       assertEquals(32, Node.INCRDECR_PROP);
1222:       assertEquals(46, Node.IS_NAMESPACE);
1223:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1224:       assertEquals(37, Node.OPT_ARG_NAME);
1225:       assertEquals(49, Node.DIRECT_EVAL);
1226:       assertEquals(54, Node.SLASH_V);
1227:       assertEquals(56, Node.CHANGE_TIME);
1228:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1229:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1230:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1231:       assertEquals(1, Node.DECR_FLAG);
1232:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1233:       assertEquals(12, Node.COLUMN_BITS);
1234:       assertNotSame(node0, node2);
1235:       assertNotSame(node0, node4);
1236:       assertNotSame(node2, node0);
1237:       assertSame(node2, node4);
1238:       assertSame(node4, node2);
1239:       assertNotSame(node4, node0);
1240:       assertNotNull(node4);
1241:       assertFalse(node0.equals((Object)node2));
1242:       assertFalse(node0.equals((Object)node1));
1243:       assertFalse(node1.equals((Object)node2));
1244:       assertFalse(node1.equals((Object)node0));
1245:       assertFalse(node2.equals((Object)node0));
1246:       assertFalse(node2.equals((Object)node1));
1247:       assertFalse(node4.equals((Object)node0));
1248:       assertFalse(node4.equals((Object)node1));
1249:       assertFalse(node0.isTry());
1250:       assertFalse(node0.isVoid());
1251:       assertFalse(node0.isArrayLit());
1252:       assertFalse(node0.isRegExp());
1253:       assertFalse(node0.isDefaultCase());
1254:       assertFalse(node0.isFunction());
1255:       assertFalse(node0.isFor());
1256:       assertEquals(0, node0.getChildCount());
1257:       assertFalse(node0.isCase());
1258:       assertFalse(node0.isString());
1259:       assertFalse(node0.isGetterDef());
1260:       assertFalse(node0.isSwitch());
1261:       assertFalse(node0.isDebugger());
1262:       assertFalse(node0.isParamList());
1263:       assertFalse(node0.isStringKey());
1264:       assertEquals((-1), node0.getCharno());
1265:       assertFalse(node0.isCall());
1266:       assertFalse(node0.isNew());
1267:       assertFalse(node0.isAdd());
1268:       assertFalse(node0.isWhile());
1269:       assertFalse(node0.isComma());
1270:       assertFalse(node0.isVar());
1271:       assertFalse(node0.isOr());
1272:       assertFalse(node0.isAssignAdd());
1273:       assertFalse(node0.isBreak());
1274:       assertFalse(node0.isDelProp());
1275:       assertFalse(node0.isEmpty());
1276:       assertFalse(node0.isName());
1277:       assertFalse(node0.isTrue());
1278:       assertFalse(node0.isNull());
1279:       assertFalse(node0.isExprResult());
1280:       assertFalse(node0.isCast());
1281:       assertFalse(node0.isGetElem());
1282:       assertFalse(node0.hasOneChild());
1283:       assertFalse(node0.isScript());
1284:       assertFalse(node0.isDec());
1285:       assertFalse(node0.isAssign());
1286:       assertFalse(node0.isTypeOf());
1287:       assertFalse(node0.isWith());
1288:       assertFalse(node0.hasChildren());
1289:       assertFalse(node0.isLabel());
1290:       assertFalse(node0.isReturn());
1291:       assertFalse(node0.isContinue());
1292:       assertFalse(node0.isGetProp());
1293:       assertFalse(node0.isNot());
1294:       assertFalse(node0.isLabelName());
1295:       assertFalse(node0.isNumber());
1296:       assertFalse(node0.isAnd());
1297:       assertFalse(node0.isObjectLit());
1298:       assertEquals((-1), node0.getSourcePosition());
1299:       assertFalse(node0.isInc());
1300:       assertFalse(node0.isFalse());
1301:       assertFalse(node0.isThis());
1302:       assertFalse(node0.isThrow());
1303:       assertFalse(node0.isBlock());
1304:       assertFalse(node0.isHook());
1305:       assertTrue(node0.isDo());
1306:       assertEquals((-1), node0.getLineno());
1307:       assertFalse(node0.isInstanceOf());
1308:       assertFalse(node0.isIn());
1309:       assertFalse(node0.hasMoreThanOneChild());
1310:       assertEquals(114, node0.getType());
1311:       assertFalse(node0.isCatch());
1312:       assertFalse(node0.isSetterDef());
1313:       assertFalse(node0.isIf());
1314:       assertFalse(node0.isNE());
1315:       assertFalse(node1.isCase());
1316:       assertFalse(node1.isIn());
1317:       assertFalse(node1.isInc());
1318:       assertFalse(node1.isEmpty());
1319:       assertFalse(node1.isFor());
1320:       assertFalse(node1.isHook());
1321:       assertFalse(node1.isComma());
1322:       assertFalse(node1.isTrue());
1323:       assertFalse(node1.isNE());
1324:       assertFalse(node1.isBreak());
1325:       assertFalse(node1.isIf());
1326:       assertFalse(node1.isDelProp());
1327:       assertFalse(node1.isVoid());
1328:       assertEquals(40, node1.getType());
1329:       assertFalse(node1.isAnd());
1330:       assertFalse(node1.isFunction());
1331:       assertFalse(node1.isObjectLit());
1332:       assertFalse(node1.isNot());
1333:       assertFalse(node1.isGetProp());
1334:       assertFalse(node1.isSetterDef());
1335:       assertFalse(node1.isFalse());
1336:       assertFalse(node1.isThrow());
1337:       assertFalse(node1.isCast());
1338:       assertEquals((-1), node1.getSourcePosition());
1339:       assertFalse(node1.isDebugger());
1340:       assertFalse(node1.isContinue());
1341:       assertFalse(node1.isWhile());
1342:       assertFalse(node1.hasMoreThanOneChild());
1343:       assertFalse(node1.isOr());
1344:       assertTrue(node1.isString());
1345:       assertFalse(node1.isNew());
1346:       assertFalse(node1.isBlock());
1347:       assertFalse(node1.isAssignAdd());
1348:       assertFalse(node1.isLabel());
1349:       assertFalse(node1.isReturn());
1350:       assertFalse(node1.isAdd());
1351:       assertFalse(node1.isDo());
1352:       assertFalse(node1.isGetElem());
1353:       assertFalse(node1.isName());
1354:       assertFalse(node1.isCall());
1355:       assertFalse(node1.isDec());
1356:       assertFalse(node1.isTypeOf());
1357:       assertFalse(node1.isNull());
1358:       assertFalse(node1.hasChildren());
1359:       assertFalse(node1.isAssign());
1360:       assertFalse(node1.isExprResult());
1361:       assertEquals((-1), node1.getLineno());
1362:       assertFalse(node1.isWith());
1363:       assertFalse(node1.isCatch());
1364:       assertFalse(node1.isInstanceOf());
1365:       assertFalse(node1.isRegExp());
1366:       assertEquals(0, node1.getChildCount());
1367:       assertFalse(node1.isThis());
1368:       assertFalse(node1.isScript());
1369:       assertFalse(node1.hasOneChild());
1370:       assertFalse(node1.isDefaultCase());
1371:       assertFalse(node1.isTry());
1372:       assertFalse(node1.isStringKey());
1373:       assertFalse(node1.isVar());
1374:       assertFalse(node1.isNumber());
1375:       assertFalse(node1.isGetterDef());
1376:       assertEquals((-1), node1.getCharno());
1377:       assertFalse(node1.isParamList());
1378:       assertFalse(node1.isArrayLit());
1379:       assertFalse(node1.isSwitch());
1380:       assertFalse(node1.isLabelName());
1381:       assertFalse(node2.isParamList());
1382:       assertFalse(node2.isNull());
1383:       assertFalse(node2.isSetterDef());
1384:       assertFalse(node2.isDebugger());
1385:       assertFalse(node2.isBlock());
1386:       assertFalse(node2.isVoid());
1387:       assertFalse(node2.isTrue());
1388:       assertFalse(node2.isName());
1389:       assertFalse(node2.isTry());
1390:       assertFalse(node2.isDelProp());
1391:       assertFalse(node2.isWhile());
1392:       assertFalse(node2.isFor());
1393:       assertTrue(node2.hasOneChild());
1394:       assertFalse(node2.isCall());
1395:       assertFalse(node2.isCatch());
1396:       assertFalse(node2.isRegExp());
1397:       assertFalse(node2.hasMoreThanOneChild());
1398:       assertEquals((-1), node2.getLineno());
1399:       assertTrue(node2.hasChildren());
1400:       assertFalse(node2.isReturn());
1401:       assertFalse(node2.isNE());
1402:       assertFalse(node2.isIf());
1403:       assertFalse(node2.isString());
1404:       assertEquals((-1), node2.getSourcePosition());
1405:       assertFalse(node2.isInc());
1406:       assertFalse(node2.isIn());
1407:       assertFalse(node2.isThrow());
1408:       assertEquals(2497, node2.getType());
1409:       assertFalse(node2.isContinue());
1410:       assertFalse(node2.isCast());
1411:       assertFalse(node2.isFalse());
1412:       assertFalse(node2.isFunction());
1413:       assertFalse(node2.isInstanceOf());
1414:       assertFalse(node2.isGetProp());
1415:       assertFalse(node2.isAnd());
1416:       assertFalse(node2.isScript());
1417:       assertFalse(node2.isObjectLit());
1418:       assertFalse(node2.isNot());
1419:       assertFalse(node2.isHook());
1420:       assertFalse(node2.isBreak());
1421:       assertFalse(node2.isDec());
1422:       assertFalse(node2.isAssign());
1423:       assertFalse(node2.isThis());
1424:       assertFalse(node2.isGetElem());
1425:       assertFalse(node2.isExprResult());
1426:       assertFalse(node2.isComma());
1427:       assertFalse(node2.isTypeOf());
1428:       assertFalse(node2.isWith());
1429:       assertEquals(1, node2.getChildCount());
1430:       assertFalse(node2.isOr());
1431:       assertFalse(node2.isLabel());
1432:       assertFalse(node2.isAssignAdd());
1433:       assertFalse(node2.isGetterDef());
1434:       assertFalse(node2.isDo());
1435:       assertFalse(node2.isEmpty());
1436:       assertFalse(node2.isCase());
1437:       assertEquals((-1), node2.getCharno());
1438:       assertFalse(node2.isNumber());
1439:       assertFalse(node2.isVar());
1440:       assertFalse(node2.isAdd());
1441:       assertFalse(node2.isArrayLit());
1442:       assertFalse(node2.isNew());
1443:       assertFalse(node2.isStringKey());
1444:       assertFalse(node2.isLabelName());
1445:       assertFalse(node2.isDefaultCase());
1446:       assertFalse(node2.isSwitch());
1447:       assertFalse(node4.isVoid());
1448:       assertFalse(node4.isFunction());
1449:       assertFalse(node4.isTrue());
1450:       assertEquals(2497, node4.getType());
1451:       assertFalse(node4.isTry());
1452:       assertFalse(node4.isDebugger());
1453:       assertFalse(node4.isRegExp());
1454:       assertFalse(node4.isArrayLit());
1455:       assertFalse(node4.isIf());
1456:       assertFalse(node4.isDelProp());
1457:       assertFalse(node4.isNE());
1458:       assertFalse(node4.isSetterDef());
1459:       assertFalse(node4.isIn());
1460:       assertFalse(node4.isEmpty());
1461:       assertFalse(node4.isDefaultCase());
1462:       assertFalse(node4.isVar());
1463:       assertFalse(node4.isBlock());
1464:       assertFalse(node4.isInc());
1465:       assertEquals((-1), node4.getCharno());
1466:       assertFalse(node4.isStringKey());
1467:       assertFalse(node4.isSwitch());
1468:       assertFalse(node4.isParamList());
1469:       assertFalse(node4.isThis());
1470:       assertEquals((-1), node4.getLineno());
1471:       assertEquals(1, node4.getChildCount());
1472:       assertFalse(node4.isInstanceOf());
1473:       assertFalse(node4.isNumber());
1474:       assertFalse(node4.isGetterDef());
1475:       assertTrue(node4.hasChildren());
1476:       assertFalse(node4.hasMoreThanOneChild());
1477:       assertFalse(node4.isCatch());
1478:       assertFalse(node4.isFor());
1479:       assertFalse(node4.isCase());
1480:       assertFalse(node4.isHook());
1481:       assertFalse(node4.isExprResult());
1482:       assertFalse(node4.isScript());
1483:       assertFalse(node4.isCast());
1484:       assertFalse(node4.isWith());
1485:       assertFalse(node4.isGetElem());
1486:       assertFalse(node4.isObjectLit());
1487:       assertFalse(node4.isLabelName());
1488:       assertFalse(node4.isNot());
1489:       assertFalse(node4.isAnd());
1490:       assertFalse(node4.isOr());
1491:       assertFalse(node4.isLabel());
1492:       assertFalse(node4.isContinue());
1493:       assertFalse(node4.isThrow());
1494:       assertFalse(node4.isFalse());
1495:       assertFalse(node4.isDo());
1496:       assertFalse(node4.isAssignAdd());
1497:       assertFalse(node4.isAdd());
1498:       assertFalse(node4.isNew());
1499:       assertFalse(node4.isString());
1500:       assertFalse(node4.isCall());
1501:       assertFalse(node4.isName());
1502:       assertFalse(node4.isBreak());
1503:       assertFalse(node4.isNull());
1504:       assertFalse(node4.isGetProp());
1505:       assertFalse(node4.isComma());
1506:       assertFalse(node4.isReturn());
1507:       assertEquals((-1), node4.getSourcePosition());
1508:       assertFalse(node4.isDec());
1509:       assertFalse(node4.isTypeOf());
1510:       assertFalse(node4.isAssign());
1511:       assertTrue(node4.hasOneChild());
1512:       assertFalse(node4.isWhile());
1513:   }
1514: }
RegularFileObject[/tmp/EvoSuite_134_1628157884310/com/google/javascript/rhino/Node_134_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_134_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_134_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_134_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:44.541 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(114, (-1707), (-1871));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node0);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertTrue(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(114, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());

Node node1 = Node.newString("", (-277), (-1707));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertTrue(node1.isString());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

Node node2 = new Node(2497, node0, node0, node0, 0, 30);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertTrue(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(114, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isBlock());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isTry());
assertFalse(node2.isDelProp());
assertFalse(node2.isWhile());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertEquals(30, node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertEquals(2497, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isHook());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isThis());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWith());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertEquals(30, node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());

Node node3 = node0.removeChildren();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertNotSame(node0, node2);
assertNull(node3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertTrue(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(114, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertNotSame(node0, node2);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertTrue(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(114, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());

node1.addSuppression("q=lvL_oht *_!ep^i");
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertTrue(node1.isString());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());

int int0 = node2.getLineno();
assertEquals(0, int0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertTrue(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(114, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isBlock());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isTry());
assertFalse(node2.isDelProp());
assertFalse(node2.isWhile());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertEquals(30, node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertEquals(2497, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isHook());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isThis());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWith());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertEquals(30, node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());

boolean boolean1 = node1.isGetElem();
assertFalse(boolean1);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertTrue(node1.isString());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());

Node node4 = node2.useSourceInfoFromForTree(node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node0, node2);
assertNotSame(node0, node4);
assertNotSame(node2, node0);
assertSame(node2, node4);
assertSame(node4, node2);
assertNotSame(node4, node0);
assertNotNull(node4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertTrue(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(114, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertEquals(40, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertTrue(node1.isString());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isBlock());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isTry());
assertFalse(node2.isDelProp());
assertFalse(node2.isWhile());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertTrue(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isString());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertEquals(2497, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isHook());
assertFalse(node2.isBreak());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isThis());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWith());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node4.isVoid());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertEquals(2497, node4.getType());
assertFalse(node4.isTry());
assertFalse(node4.isDebugger());
assertFalse(node4.isRegExp());
assertFalse(node4.isArrayLit());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isNE());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isEmpty());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVar());
assertFalse(node4.isBlock());
assertFalse(node4.isInc());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isStringKey());
assertFalse(node4.isSwitch());
assertFalse(node4.isParamList());
assertFalse(node4.isThis());
assertEquals((-1), node4.getLineno());
assertEquals(1, node4.getChildCount());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertTrue(node4.hasChildren());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCatch());
assertFalse(node4.isFor());
assertFalse(node4.isCase());
assertFalse(node4.isHook());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isCast());
assertFalse(node4.isWith());
assertFalse(node4.isGetElem());
assertFalse(node4.isObjectLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isOr());
assertFalse(node4.isLabel());
assertFalse(node4.isContinue());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isString());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertFalse(node4.isBreak());
assertFalse(node4.isNull());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isReturn());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertTrue(node4.hasOneChild());
assertFalse(node4.isWhile());


[MASTER] 10:04:44.628 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_135_1628157884542/com/google/javascript/rhino/Node_135_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_135_1628157884542/com/google/javascript/rhino/Node_135_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:44.628 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:44.628 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:44.628 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 549
[MASTER] 10:04:44.629 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_135_1628157884542/com/google/javascript/rhino/Node_135_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_135_tmp__ESTest extends Node_135_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(114, (-1707), (-1871));
22:       assertEquals(36, Node.QUOTED_PROP);
23:       assertEquals(43, Node.IS_CONSTANT_NAME);
24:       assertEquals(48, Node.DIRECTIVES);
25:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
26:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
27:       assertEquals(4095, Node.COLUMN_MASK);
28:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
29:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
30:       assertEquals(29, Node.JSDOC_INFO_PROP);
31:       assertEquals(2, Node.POST_FLAG);
32:       assertEquals(56, Node.CHANGE_TIME);
33:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
34:       assertEquals(47, Node.IS_DISPATCHER);
35:       assertEquals(57, Node.REFLECTED_OBJECT);
36:       assertEquals(53, Node.INPUT_ID);
37:       assertEquals(52, Node.LENGTH);
38:       assertEquals(8, Node.FLAG_NO_THROWS);
39:       assertEquals(55, Node.INFERRED_FUNCTION);
40:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
41:       assertEquals(15, Node.NO_SIDE_EFFECTS);
42:       assertEquals(39, Node.EMPTY_BLOCK);
43:       assertEquals(49, Node.DIRECT_EVAL);
44:       assertEquals(30, Node.VAR_ARGS_NAME);
45:       assertEquals(1, Node.DECR_FLAG);
46:       assertEquals(57, Node.LAST_PROP);
47:       assertEquals(12, Node.COLUMN_BITS);
48:       assertEquals(51, Node.STATIC_SOURCE_FILE);
49:       assertEquals(46, Node.IS_NAMESPACE);
50:       assertEquals(54, Node.SLASH_V);
51:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
52:       assertEquals(40, Node.ORIGINALNAME_PROP);
53:       assertEquals(37, Node.OPT_ARG_NAME);
54:       assertEquals(50, Node.FREE_CALL);
55:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
56:       assertEquals(32, Node.INCRDECR_PROP);
57:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
58:       assertNotNull(node0);
59:       assertFalse(node0.isCast());
60:       assertFalse(node0.hasOneChild());
61:       assertFalse(node0.isAssign());
62:       assertFalse(node0.hasChildren());
63:       assertFalse(node0.isDec());
64:       assertFalse(node0.isTypeOf());
65:       assertFalse(node0.isLabelName());
66:       assertFalse(node0.isWith());
67:       assertEquals((-1), node0.getLineno());
68:       assertFalse(node0.isGetElem());
69:       assertFalse(node0.isExprResult());
70:       assertFalse(node0.isContinue());
71:       assertFalse(node0.isAssignAdd());
72:       assertFalse(node0.isOr());
73:       assertFalse(node0.isLabel());
74:       assertFalse(node0.isNew());
75:       assertFalse(node0.isAdd());
76:       assertFalse(node0.isVar());
77:       assertFalse(node0.isHook());
78:       assertFalse(node0.isStringKey());
79:       assertFalse(node0.isBlock());
80:       assertFalse(node0.isThis());
81:       assertFalse(node0.isSwitch());
82:       assertFalse(node0.isParamList());
83:       assertFalse(node0.isInstanceOf());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isCatch());
86:       assertEquals((-1), node0.getCharno());
87:       assertFalse(node0.isNumber());
88:       assertFalse(node0.isGetterDef());
89:       assertFalse(node0.isTry());
90:       assertFalse(node0.isCase());
91:       assertFalse(node0.isScript());
92:       assertFalse(node0.isArrayLit());
93:       assertFalse(node0.isTrue());
94:       assertFalse(node0.isFor());
95:       assertFalse(node0.isNE());
96:       assertFalse(node0.isIf());
97:       assertFalse(node0.isDelProp());
98:       assertFalse(node0.isVoid());
99:       assertFalse(node0.isFunction());
100:       assertFalse(node0.isRegExp());
101:       assertFalse(node0.isIn());
102:       assertEquals(0, node0.getChildCount());
103:       assertFalse(node0.isSetterDef());
104:       assertEquals(114, node0.getType());
105:       assertFalse(node0.isDefaultCase());
106:       assertFalse(node0.isInc());
107:       assertFalse(node0.isEmpty());
108:       assertFalse(node0.isFalse());
109:       assertFalse(node0.isName());
110:       assertFalse(node0.isThrow());
111:       assertTrue(node0.isDo());
112:       assertFalse(node0.isNull());
113:       assertFalse(node0.isComma());
114:       assertFalse(node0.isBreak());
115:       assertFalse(node0.isCall());
116:       assertFalse(node0.isAnd());
117:       assertFalse(node0.isObjectLit());
118:       assertFalse(node0.isReturn());
119:       assertFalse(node0.isNot());
120:       assertFalse(node0.isWhile());
121:       assertEquals((-1), node0.getSourcePosition());
122:       assertFalse(node0.isDebugger());
123:       assertFalse(node0.isString());
124:       assertFalse(node0.isGetProp());
125:       
126:       Node node1 = Node.newString("", (-277), (-1707));
127:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
128:       assertEquals(36, Node.QUOTED_PROP);
129:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
130:       assertEquals(53, Node.INPUT_ID);
131:       assertEquals(43, Node.IS_CONSTANT_NAME);
132:       assertEquals(56, Node.CHANGE_TIME);
133:       assertEquals(37, Node.OPT_ARG_NAME);
134:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
135:       assertEquals(48, Node.DIRECTIVES);
136:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
137:       assertEquals(4095, Node.COLUMN_MASK);
138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
139:       assertEquals(1, Node.DECR_FLAG);
140:       assertEquals(32, Node.INCRDECR_PROP);
141:       assertEquals(12, Node.COLUMN_BITS);
142:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
143:       assertEquals(52, Node.LENGTH);
144:       assertEquals(15, Node.NO_SIDE_EFFECTS);
145:       assertEquals(40, Node.ORIGINALNAME_PROP);
146:       assertEquals(51, Node.STATIC_SOURCE_FILE);
147:       assertEquals(49, Node.DIRECT_EVAL);
148:       assertEquals(50, Node.FREE_CALL);
149:       assertEquals(57, Node.REFLECTED_OBJECT);
150:       assertEquals(46, Node.IS_NAMESPACE);
151:       assertEquals(54, Node.SLASH_V);
152:       assertEquals(8, Node.FLAG_NO_THROWS);
153:       assertEquals(39, Node.EMPTY_BLOCK);
154:       assertEquals(2, Node.POST_FLAG);
155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
156:       assertEquals(55, Node.INFERRED_FUNCTION);
157:       assertEquals(29, Node.JSDOC_INFO_PROP);
158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
159:       assertEquals(30, Node.VAR_ARGS_NAME);
160:       assertEquals(57, Node.LAST_PROP);
161:       assertEquals(47, Node.IS_DISPATCHER);
162:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
163:       assertNotNull(node1);
164:       assertFalse(node1.equals((Object)node0));
165:       assertFalse(node1.isDelProp());
166:       assertFalse(node1.isIf());
167:       assertFalse(node1.isGetterDef());
168:       assertFalse(node1.isEmpty());
169:       assertFalse(node1.isIn());
170:       assertFalse(node1.isArrayLit());
171:       assertFalse(node1.isVoid());
172:       assertFalse(node1.isDebugger());
173:       assertFalse(node1.isTrue());
174:       assertFalse(node1.isNE());
175:       assertFalse(node1.isRegExp());
176:       assertFalse(node1.isCase());
177:       assertFalse(node1.isCatch());
178:       assertFalse(node1.isHook());
179:       assertFalse(node1.isTry());
180:       assertFalse(node1.isFor());
181:       assertFalse(node1.isGetProp());
182:       assertFalse(node1.isFalse());
183:       assertFalse(node1.isSetterDef());
184:       assertFalse(node1.isAnd());
185:       assertFalse(node1.isContinue());
186:       assertFalse(node1.isInc());
187:       assertFalse(node1.isFunction());
188:       assertFalse(node1.isThrow());
189:       assertEquals(40, node1.getType());
190:       assertFalse(node1.hasChildren());
191:       assertFalse(node1.isTypeOf());
192:       assertFalse(node1.isNumber());
193:       assertFalse(node1.isAssign());
194:       assertFalse(node1.isLabelName());
195:       assertEquals((-1), node1.getSourcePosition());
196:       assertFalse(node1.isDec());
197:       assertFalse(node1.isGetElem());
198:       assertFalse(node1.isCast());
199:       assertFalse(node1.isOr());
200:       assertEquals((-1), node1.getLineno());
201:       assertFalse(node1.isWith());
202:       assertFalse(node1.isNot());
203:       assertFalse(node1.isObjectLit());
204:       assertFalse(node1.isExprResult());
205:       assertFalse(node1.hasMoreThanOneChild());
206:       assertFalse(node1.isScript());
207:       assertFalse(node1.isInstanceOf());
208:       assertFalse(node1.isReturn());
209:       assertFalse(node1.hasOneChild());
210:       assertFalse(node1.isThis());
211:       assertTrue(node1.isString());
212:       assertFalse(node1.isBlock());
213:       assertFalse(node1.isWhile());
214:       assertFalse(node1.isBreak());
215:       assertFalse(node1.isNull());
216:       assertFalse(node1.isComma());
217:       assertFalse(node1.isCall());
218:       assertEquals((-1), node1.getCharno());
219:       assertFalse(node1.isName());
220:       assertFalse(node1.isSwitch());
221:       assertFalse(node1.isStringKey());
222:       assertFalse(node1.isParamList());
223:       assertFalse(node1.isDefaultCase());
224:       assertFalse(node1.isDo());
225:       assertFalse(node1.isAdd());
226:       assertEquals(0, node1.getChildCount());
227:       assertFalse(node1.isLabel());
228:       assertFalse(node1.isNew());
229:       assertFalse(node1.isVar());
230:       assertFalse(node1.isAssignAdd());
231:       
232:       boolean boolean0 = node1.isEquivalentTo(node0, true, true, true);
233:       assertFalse(boolean0);
234:       assertEquals(36, Node.QUOTED_PROP);
235:       assertEquals(43, Node.IS_CONSTANT_NAME);
236:       assertEquals(48, Node.DIRECTIVES);
237:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
238:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
239:       assertEquals(4095, Node.COLUMN_MASK);
240:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
241:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
242:       assertEquals(29, Node.JSDOC_INFO_PROP);
243:       assertEquals(2, Node.POST_FLAG);
244:       assertEquals(56, Node.CHANGE_TIME);
245:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(57, Node.REFLECTED_OBJECT);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(52, Node.LENGTH);
250:       assertEquals(8, Node.FLAG_NO_THROWS);
251:       assertEquals(55, Node.INFERRED_FUNCTION);
252:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
253:       assertEquals(15, Node.NO_SIDE_EFFECTS);
254:       assertEquals(39, Node.EMPTY_BLOCK);
255:       assertEquals(49, Node.DIRECT_EVAL);
256:       assertEquals(30, Node.VAR_ARGS_NAME);
257:       assertEquals(1, Node.DECR_FLAG);
258:       assertEquals(57, Node.LAST_PROP);
259:       assertEquals(12, Node.COLUMN_BITS);
260:       assertEquals(51, Node.STATIC_SOURCE_FILE);
261:       assertEquals(46, Node.IS_NAMESPACE);
262:       assertEquals(54, Node.SLASH_V);
263:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
264:       assertEquals(40, Node.ORIGINALNAME_PROP);
265:       assertEquals(37, Node.OPT_ARG_NAME);
266:       assertEquals(50, Node.FREE_CALL);
267:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
268:       assertEquals(32, Node.INCRDECR_PROP);
269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
270:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
271:       assertEquals(36, Node.QUOTED_PROP);
272:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
273:       assertEquals(53, Node.INPUT_ID);
274:       assertEquals(43, Node.IS_CONSTANT_NAME);
275:       assertEquals(56, Node.CHANGE_TIME);
276:       assertEquals(37, Node.OPT_ARG_NAME);
277:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
278:       assertEquals(48, Node.DIRECTIVES);
279:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
280:       assertEquals(4095, Node.COLUMN_MASK);
281:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
282:       assertEquals(1, Node.DECR_FLAG);
283:       assertEquals(32, Node.INCRDECR_PROP);
284:       assertEquals(12, Node.COLUMN_BITS);
285:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
286:       assertEquals(52, Node.LENGTH);
287:       assertEquals(15, Node.NO_SIDE_EFFECTS);
288:       assertEquals(40, Node.ORIGINALNAME_PROP);
289:       assertEquals(51, Node.STATIC_SOURCE_FILE);
290:       assertEquals(49, Node.DIRECT_EVAL);
291:       assertEquals(50, Node.FREE_CALL);
292:       assertEquals(57, Node.REFLECTED_OBJECT);
293:       assertEquals(46, Node.IS_NAMESPACE);
294:       assertEquals(54, Node.SLASH_V);
295:       assertEquals(8, Node.FLAG_NO_THROWS);
296:       assertEquals(39, Node.EMPTY_BLOCK);
297:       assertEquals(2, Node.POST_FLAG);
298:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
299:       assertEquals(55, Node.INFERRED_FUNCTION);
300:       assertEquals(29, Node.JSDOC_INFO_PROP);
301:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
302:       assertEquals(30, Node.VAR_ARGS_NAME);
303:       assertEquals(57, Node.LAST_PROP);
304:       assertEquals(47, Node.IS_DISPATCHER);
305:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
306:       assertFalse(node0.equals((Object)node1));
307:       assertFalse(node1.equals((Object)node0));
308:       assertFalse(node0.isCast());
309:       assertFalse(node0.hasOneChild());
310:       assertFalse(node0.isAssign());
311:       assertFalse(node0.hasChildren());
312:       assertFalse(node0.isDec());
313:       assertFalse(node0.isTypeOf());
314:       assertFalse(node0.isLabelName());
315:       assertFalse(node0.isWith());
316:       assertEquals((-1), node0.getLineno());
317:       assertFalse(node0.isGetElem());
318:       assertFalse(node0.isExprResult());
319:       assertFalse(node0.isContinue());
320:       assertFalse(node0.isAssignAdd());
321:       assertFalse(node0.isOr());
322:       assertFalse(node0.isLabel());
323:       assertFalse(node0.isNew());
324:       assertFalse(node0.isAdd());
325:       assertFalse(node0.isVar());
326:       assertFalse(node0.isHook());
327:       assertFalse(node0.isStringKey());
328:       assertFalse(node0.isBlock());
329:       assertFalse(node0.isThis());
330:       assertFalse(node0.isSwitch());
331:       assertFalse(node0.isParamList());
332:       assertFalse(node0.isInstanceOf());
333:       assertFalse(node0.hasMoreThanOneChild());
334:       assertFalse(node0.isCatch());
335:       assertEquals((-1), node0.getCharno());
336:       assertFalse(node0.isNumber());
337:       assertFalse(node0.isGetterDef());
338:       assertFalse(node0.isTry());
339:       assertFalse(node0.isCase());
340:       assertFalse(node0.isScript());
341:       assertFalse(node0.isArrayLit());
342:       assertFalse(node0.isTrue());
343:       assertFalse(node0.isFor());
344:       assertFalse(node0.isNE());
345:       assertFalse(node0.isIf());
346:       assertFalse(node0.isDelProp());
347:       assertFalse(node0.isVoid());
348:       assertFalse(node0.isFunction());
349:       assertFalse(node0.isRegExp());
350:       assertFalse(node0.isIn());
351:       assertEquals(0, node0.getChildCount());
352:       assertFalse(node0.isSetterDef());
353:       assertEquals(114, node0.getType());
354:       assertFalse(node0.isDefaultCase());
355:       assertFalse(node0.isInc());
356:       assertFalse(node0.isEmpty());
357:       assertFalse(node0.isFalse());
358:       assertFalse(node0.isName());
359:       assertFalse(node0.isThrow());
360:       assertTrue(node0.isDo());
361:       assertFalse(node0.isNull());
362:       assertFalse(node0.isComma());
363:       assertFalse(node0.isBreak());
364:       assertFalse(node0.isCall());
365:       assertFalse(node0.isAnd());
366:       assertFalse(node0.isObjectLit());
367:       assertFalse(node0.isReturn());
368:       assertFalse(node0.isNot());
369:       assertFalse(node0.isWhile());
370:       assertEquals((-1), node0.getSourcePosition());
371:       assertFalse(node0.isDebugger());
372:       assertFalse(node0.isString());
373:       assertFalse(node0.isGetProp());
374:       assertFalse(node1.isDelProp());
375:       assertFalse(node1.isIf());
376:       assertFalse(node1.isGetterDef());
377:       assertFalse(node1.isEmpty());
378:       assertFalse(node1.isIn());
379:       assertFalse(node1.isArrayLit());
380:       assertFalse(node1.isVoid());
381:       assertFalse(node1.isDebugger());
382:       assertFalse(node1.isTrue());
383:       assertFalse(node1.isNE());
384:       assertFalse(node1.isRegExp());
385:       assertFalse(node1.isCase());
386:       assertFalse(node1.isCatch());
387:       assertFalse(node1.isHook());
388:       assertFalse(node1.isTry());
389:       assertFalse(node1.isFor());
390:       assertFalse(node1.isGetProp());
391:       assertFalse(node1.isFalse());
392:       assertFalse(node1.isSetterDef());
393:       assertFalse(node1.isAnd());
394:       assertFalse(node1.isContinue());
395:       assertFalse(node1.isInc());
396:       assertFalse(node1.isFunction());
397:       assertFalse(node1.isThrow());
398:       assertEquals(40, node1.getType());
399:       assertFalse(node1.hasChildren());
400:       assertFalse(node1.isTypeOf());
401:       assertFalse(node1.isNumber());
402:       assertFalse(node1.isAssign());
403:       assertFalse(node1.isLabelName());
404:       assertEquals((-1), node1.getSourcePosition());
405:       assertFalse(node1.isDec());
406:       assertFalse(node1.isGetElem());
407:       assertFalse(node1.isCast());
408:       assertFalse(node1.isOr());
409:       assertEquals((-1), node1.getLineno());
410:       assertFalse(node1.isWith());
411:       assertFalse(node1.isNot());
412:       assertFalse(node1.isObjectLit());
413:       assertFalse(node1.isExprResult());
414:       assertFalse(node1.hasMoreThanOneChild());
415:       assertFalse(node1.isScript());
416:       assertFalse(node1.isInstanceOf());
417:       assertFalse(node1.isReturn());
418:       assertFalse(node1.hasOneChild());
419:       assertFalse(node1.isThis());
420:       assertTrue(node1.isString());
421:       assertFalse(node1.isBlock());
422:       assertFalse(node1.isWhile());
423:       assertFalse(node1.isBreak());
424:       assertFalse(node1.isNull());
425:       assertFalse(node1.isComma());
426:       assertFalse(node1.isCall());
427:       assertEquals((-1), node1.getCharno());
428:       assertFalse(node1.isName());
429:       assertFalse(node1.isSwitch());
430:       assertFalse(node1.isStringKey());
431:       assertFalse(node1.isParamList());
432:       assertFalse(node1.isDefaultCase());
433:       assertFalse(node1.isDo());
434:       assertFalse(node1.isAdd());
435:       assertEquals(0, node1.getChildCount());
436:       assertFalse(node1.isLabel());
437:       assertFalse(node1.isNew());
438:       assertFalse(node1.isVar());
439:       assertFalse(node1.isAssignAdd());
440:       
441:       boolean boolean1 = node0.isDo();
442:       assertTrue(boolean1);
443:       assertEquals(36, Node.QUOTED_PROP);
444:       assertEquals(43, Node.IS_CONSTANT_NAME);
445:       assertEquals(48, Node.DIRECTIVES);
446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
447:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
448:       assertEquals(4095, Node.COLUMN_MASK);
449:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
450:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
451:       assertEquals(29, Node.JSDOC_INFO_PROP);
452:       assertEquals(2, Node.POST_FLAG);
453:       assertEquals(56, Node.CHANGE_TIME);
454:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
455:       assertEquals(47, Node.IS_DISPATCHER);
456:       assertEquals(57, Node.REFLECTED_OBJECT);
457:       assertEquals(53, Node.INPUT_ID);
458:       assertEquals(52, Node.LENGTH);
459:       assertEquals(8, Node.FLAG_NO_THROWS);
460:       assertEquals(55, Node.INFERRED_FUNCTION);
461:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
462:       assertEquals(15, Node.NO_SIDE_EFFECTS);
463:       assertEquals(39, Node.EMPTY_BLOCK);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(30, Node.VAR_ARGS_NAME);
466:       assertEquals(1, Node.DECR_FLAG);
467:       assertEquals(57, Node.LAST_PROP);
468:       assertEquals(12, Node.COLUMN_BITS);
469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
470:       assertEquals(46, Node.IS_NAMESPACE);
471:       assertEquals(54, Node.SLASH_V);
472:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
473:       assertEquals(40, Node.ORIGINALNAME_PROP);
474:       assertEquals(37, Node.OPT_ARG_NAME);
475:       assertEquals(50, Node.FREE_CALL);
476:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
477:       assertEquals(32, Node.INCRDECR_PROP);
478:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
479:       assertFalse(node0.equals((Object)node1));
480:       assertFalse(boolean1 == boolean0);
481:       assertFalse(node0.isCast());
482:       assertFalse(node0.hasOneChild());
483:       assertFalse(node0.isAssign());
484:       assertFalse(node0.hasChildren());
485:       assertFalse(node0.isDec());
486:       assertFalse(node0.isTypeOf());
487:       assertFalse(node0.isLabelName());
488:       assertFalse(node0.isWith());
489:       assertEquals((-1), node0.getLineno());
490:       assertFalse(node0.isGetElem());
491:       assertFalse(node0.isExprResult());
492:       assertFalse(node0.isContinue());
493:       assertFalse(node0.isAssignAdd());
494:       assertFalse(node0.isOr());
495:       assertFalse(node0.isLabel());
496:       assertFalse(node0.isNew());
497:       assertFalse(node0.isAdd());
498:       assertFalse(node0.isVar());
499:       assertFalse(node0.isHook());
500:       assertFalse(node0.isStringKey());
501:       assertFalse(node0.isBlock());
502:       assertFalse(node0.isThis());
503:       assertFalse(node0.isSwitch());
504:       assertFalse(node0.isParamList());
505:       assertFalse(node0.isInstanceOf());
506:       assertFalse(node0.hasMoreThanOneChild());
507:       assertFalse(node0.isCatch());
508:       assertEquals((-1), node0.getCharno());
509:       assertFalse(node0.isNumber());
510:       assertFalse(node0.isGetterDef());
511:       assertFalse(node0.isTry());
512:       assertFalse(node0.isCase());
513:       assertFalse(node0.isScript());
514:       assertFalse(node0.isArrayLit());
515:       assertFalse(node0.isTrue());
516:       assertFalse(node0.isFor());
517:       assertFalse(node0.isNE());
518:       assertFalse(node0.isIf());
519:       assertFalse(node0.isDelProp());
520:       assertFalse(node0.isVoid());
521:       assertFalse(node0.isFunction());
522:       assertFalse(node0.isRegExp());
523:       assertFalse(node0.isIn());
524:       assertEquals(0, node0.getChildCount());
525:       assertFalse(node0.isSetterDef());
526:       assertEquals(114, node0.getType());
527:       assertFalse(node0.isDefaultCase());
528:       assertFalse(node0.isInc());
529:       assertFalse(node0.isEmpty());
530:       assertFalse(node0.isFalse());
531:       assertFalse(node0.isName());
532:       assertFalse(node0.isThrow());
533:       assertTrue(node0.isDo());
534:       assertFalse(node0.isNull());
535:       assertFalse(node0.isComma());
536:       assertFalse(node0.isBreak());
537:       assertFalse(node0.isCall());
538:       assertFalse(node0.isAnd());
539:       assertFalse(node0.isObjectLit());
540:       assertFalse(node0.isReturn());
541:       assertFalse(node0.isNot());
542:       assertFalse(node0.isWhile());
543:       assertEquals((-1), node0.getSourcePosition());
544:       assertFalse(node0.isDebugger());
545:       assertFalse(node0.isString());
546:       assertFalse(node0.isGetProp());
547:       
548:       Iterable<Node> iterable0 = node0.children();
549:       assertFalse(iterable0.contains(node0));
550:       assertEquals(36, Node.QUOTED_PROP);
551:       assertEquals(43, Node.IS_CONSTANT_NAME);
552:       assertEquals(48, Node.DIRECTIVES);
553:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
554:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
555:       assertEquals(4095, Node.COLUMN_MASK);
556:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
557:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
558:       assertEquals(29, Node.JSDOC_INFO_PROP);
559:       assertEquals(2, Node.POST_FLAG);
560:       assertEquals(56, Node.CHANGE_TIME);
561:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
562:       assertEquals(47, Node.IS_DISPATCHER);
563:       assertEquals(57, Node.REFLECTED_OBJECT);
564:       assertEquals(53, Node.INPUT_ID);
565:       assertEquals(52, Node.LENGTH);
566:       assertEquals(8, Node.FLAG_NO_THROWS);
567:       assertEquals(55, Node.INFERRED_FUNCTION);
568:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
569:       assertEquals(15, Node.NO_SIDE_EFFECTS);
570:       assertEquals(39, Node.EMPTY_BLOCK);
571:       assertEquals(49, Node.DIRECT_EVAL);
572:       assertEquals(30, Node.VAR_ARGS_NAME);
573:       assertEquals(1, Node.DECR_FLAG);
574:       assertEquals(57, Node.LAST_PROP);
575:       assertEquals(12, Node.COLUMN_BITS);
576:       assertEquals(51, Node.STATIC_SOURCE_FILE);
577:       assertEquals(46, Node.IS_NAMESPACE);
578:       assertEquals(54, Node.SLASH_V);
579:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
580:       assertEquals(40, Node.ORIGINALNAME_PROP);
581:       assertEquals(37, Node.OPT_ARG_NAME);
582:       assertEquals(50, Node.FREE_CALL);
583:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
584:       assertEquals(32, Node.INCRDECR_PROP);
585:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
586:       assertNotNull(iterable0);
587:       assertFalse(node0.equals((Object)node1));
588:       assertFalse(node0.isCast());
589:       assertFalse(node0.hasOneChild());
590:       assertFalse(node0.isAssign());
591:       assertFalse(node0.hasChildren());
592:       assertFalse(node0.isDec());
593:       assertFalse(node0.isTypeOf());
594:       assertFalse(node0.isLabelName());
595:       assertFalse(node0.isWith());
596:       assertEquals((-1), node0.getLineno());
597:       assertFalse(node0.isGetElem());
598:       assertFalse(node0.isExprResult());
599:       assertFalse(node0.isContinue());
600:       assertFalse(node0.isAssignAdd());
601:       assertFalse(node0.isOr());
602:       assertFalse(node0.isLabel());
603:       assertFalse(node0.isNew());
604:       assertFalse(node0.isAdd());
605:       assertFalse(node0.isVar());
606:       assertFalse(node0.isHook());
607:       assertFalse(node0.isStringKey());
608:       assertFalse(node0.isBlock());
609:       assertFalse(node0.isThis());
610:       assertFalse(node0.isSwitch());
611:       assertFalse(node0.isParamList());
612:       assertFalse(node0.isInstanceOf());
613:       assertFalse(node0.hasMoreThanOneChild());
614:       assertFalse(node0.isCatch());
615:       assertEquals((-1), node0.getCharno());
616:       assertFalse(node0.isNumber());
617:       assertFalse(node0.isGetterDef());
618:       assertFalse(node0.isTry());
619:       assertFalse(node0.isCase());
620:       assertFalse(node0.isScript());
621:       assertFalse(node0.isArrayLit());
622:       assertFalse(node0.isTrue());
623:       assertFalse(node0.isFor());
624:       assertFalse(node0.isNE());
625:       assertFalse(node0.isIf());
626:       assertFalse(node0.isDelProp());
627:       assertFalse(node0.isVoid());
628:       assertFalse(node0.isFunction());
629:       assertFalse(node0.isRegExp());
630:       assertFalse(node0.isIn());
631:       assertEquals(0, node0.getChildCount());
632:       assertFalse(node0.isSetterDef());
633:       assertEquals(114, node0.getType());
634:       assertFalse(node0.isDefaultCase());
635:       assertFalse(node0.isInc());
636:       assertFalse(node0.isEmpty());
637:       assertFalse(node0.isFalse());
638:       assertFalse(node0.isName());
639:       assertFalse(node0.isThrow());
640:       assertTrue(node0.isDo());
641:       assertFalse(node0.isNull());
642:       assertFalse(node0.isComma());
643:       assertFalse(node0.isBreak());
644:       assertFalse(node0.isCall());
645:       assertFalse(node0.isAnd());
646:       assertFalse(node0.isObjectLit());
647:       assertFalse(node0.isReturn());
648:       assertFalse(node0.isNot());
649:       assertFalse(node0.isWhile());
650:       assertEquals((-1), node0.getSourcePosition());
651:       assertFalse(node0.isDebugger());
652:       assertFalse(node0.isString());
653:       assertFalse(node0.isGetProp());
654:       
655:       Node node2 = null;
656:       try {
657:         node2 = new Node(48, (Node[]) null);
658:         fail("Expecting exception: NullPointerException");
659:       
660:       } catch(NullPointerException e) {
661:          //
662:          // no message in exception (getMessage() returned null)
663:          //
664:          verifyException("com.google.javascript.rhino.Node", e);
665:       }
666:   }
667: }
RegularFileObject[/tmp/EvoSuite_135_1628157884542/com/google/javascript/rhino/Node_135_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_135_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_135_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_135_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:44.640 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(114, (-1707), (-1871));
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node0);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertEquals(114, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());

Node node1 = Node.newString("", (-277), (-1707));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isCall());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());

boolean boolean0 = node1.isEquivalentTo(node0, true, true, true);
assertFalse(boolean0);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertEquals(114, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isCall());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());

boolean boolean1 = node0.isDo();
assertTrue(boolean1);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean1 == boolean0);
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertEquals(114, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertEquals(114, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());

Node node2 = new Node(48, (Node[]) null);

[MASTER] 10:04:46.071 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_144_1628157885738/com/google/javascript/rhino/Node_144_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_144_1628157885738/com/google/javascript/rhino/Node_144_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:46.071 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:46.071 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:46.072 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 972
[MASTER] 10:04:46.072 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1511
[MASTER] 10:04:46.073 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_144_1628157885738/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:45 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_144_tmp__ESTest extends Node_144_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(0.0);
22:       assertEquals(43, Node.IS_CONSTANT_NAME);
23:       assertEquals(36, Node.QUOTED_PROP);
24:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
25:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
26:       assertEquals(4095, Node.COLUMN_MASK);
27:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
28:       assertEquals(32, Node.INCRDECR_PROP);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(51, Node.STATIC_SOURCE_FILE);
31:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
32:       assertEquals(50, Node.FREE_CALL);
33:       assertEquals(57, Node.LAST_PROP);
34:       assertEquals(30, Node.VAR_ARGS_NAME);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(54, Node.SLASH_V);
37:       assertEquals(1, Node.DECR_FLAG);
38:       assertEquals(49, Node.DIRECT_EVAL);
39:       assertEquals(12, Node.COLUMN_BITS);
40:       assertEquals(40, Node.ORIGINALNAME_PROP);
41:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
42:       assertEquals(2, Node.POST_FLAG);
43:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
44:       assertEquals(56, Node.CHANGE_TIME);
45:       assertEquals(29, Node.JSDOC_INFO_PROP);
46:       assertEquals(39, Node.EMPTY_BLOCK);
47:       assertEquals(47, Node.IS_DISPATCHER);
48:       assertEquals(37, Node.OPT_ARG_NAME);
49:       assertEquals(48, Node.DIRECTIVES);
50:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
51:       assertEquals(53, Node.INPUT_ID);
52:       assertEquals(57, Node.REFLECTED_OBJECT);
53:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
54:       assertEquals(55, Node.INFERRED_FUNCTION);
55:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
56:       assertEquals(52, Node.LENGTH);
57:       assertEquals(8, Node.FLAG_NO_THROWS);
58:       assertNotNull(node0);
59:       assertFalse(node0.isGetElem());
60:       assertFalse(node0.isCast());
61:       assertFalse(node0.hasOneChild());
62:       assertFalse(node0.isLabelName());
63:       assertFalse(node0.isLabel());
64:       assertFalse(node0.isReturn());
65:       assertFalse(node0.isExprResult());
66:       assertFalse(node0.isDec());
67:       assertFalse(node0.hasChildren());
68:       assertFalse(node0.isAssign());
69:       assertFalse(node0.hasMoreThanOneChild());
70:       assertFalse(node0.isWith());
71:       assertFalse(node0.isTypeOf());
72:       assertFalse(node0.isAnd());
73:       assertFalse(node0.isContinue());
74:       assertEquals(39, node0.getType());
75:       assertFalse(node0.isWhile());
76:       assertFalse(node0.isGetProp());
77:       assertFalse(node0.isScript());
78:       assertEquals((-1), node0.getSourcePosition());
79:       assertFalse(node0.isNot());
80:       assertFalse(node0.isObjectLit());
81:       assertFalse(node0.isThrow());
82:       assertFalse(node0.isFalse());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isBlock());
85:       assertFalse(node0.isHook());
86:       assertFalse(node0.isInstanceOf());
87:       assertFalse(node0.isCatch());
88:       assertEquals((-1), node0.getLineno());
89:       assertFalse(node0.isNE());
90:       assertFalse(node0.isInc());
91:       assertFalse(node0.isSetterDef());
92:       assertFalse(node0.isIn());
93:       assertFalse(node0.isEmpty());
94:       assertFalse(node0.isFor());
95:       assertFalse(node0.isIf());
96:       assertFalse(node0.isArrayLit());
97:       assertFalse(node0.isDelProp());
98:       assertFalse(node0.isTry());
99:       assertFalse(node0.isFunction());
100:       assertFalse(node0.isRegExp());
101:       assertFalse(node0.isCase());
102:       assertFalse(node0.isSwitch());
103:       assertTrue(node0.isNumber());
104:       assertFalse(node0.isDebugger());
105:       assertEquals((-1), node0.getCharno());
106:       assertFalse(node0.isParamList());
107:       assertFalse(node0.isString());
108:       assertFalse(node0.isGetterDef());
109:       assertFalse(node0.isStringKey());
110:       assertFalse(node0.isVar());
111:       assertFalse(node0.isCall());
112:       assertFalse(node0.isBreak());
113:       assertFalse(node0.isName());
114:       assertEquals(0, node0.getChildCount());
115:       assertFalse(node0.isComma());
116:       assertFalse(node0.isDefaultCase());
117:       assertFalse(node0.isAssignAdd());
118:       assertFalse(node0.isDo());
119:       assertFalse(node0.isVoid());
120:       assertFalse(node0.isNew());
121:       assertFalse(node0.isTrue());
122:       assertFalse(node0.isNull());
123:       assertFalse(node0.isAdd());
124:       assertFalse(node0.isOr());
125:       
126:       Node node1 = Node.newString(0, "", 4, 38);
127:       assertEquals(55, Node.INFERRED_FUNCTION);
128:       assertEquals(4095, Node.COLUMN_MASK);
129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(48, Node.DIRECTIVES);
132:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
133:       assertEquals(40, Node.ORIGINALNAME_PROP);
134:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
135:       assertEquals(50, Node.FREE_CALL);
136:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
137:       assertEquals(54, Node.SLASH_V);
138:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
139:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
141:       assertEquals(1, Node.DECR_FLAG);
142:       assertEquals(32, Node.INCRDECR_PROP);
143:       assertEquals(30, Node.VAR_ARGS_NAME);
144:       assertEquals(46, Node.IS_NAMESPACE);
145:       assertEquals(12, Node.COLUMN_BITS);
146:       assertEquals(2, Node.POST_FLAG);
147:       assertEquals(37, Node.OPT_ARG_NAME);
148:       assertEquals(56, Node.CHANGE_TIME);
149:       assertEquals(49, Node.DIRECT_EVAL);
150:       assertEquals(47, Node.IS_DISPATCHER);
151:       assertEquals(57, Node.REFLECTED_OBJECT);
152:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
153:       assertEquals(39, Node.EMPTY_BLOCK);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(57, Node.LAST_PROP);
156:       assertEquals(8, Node.FLAG_NO_THROWS);
157:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
158:       assertEquals(29, Node.JSDOC_INFO_PROP);
159:       assertEquals(52, Node.LENGTH);
160:       assertEquals(15, Node.NO_SIDE_EFFECTS);
161:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
162:       assertEquals(53, Node.INPUT_ID);
163:       assertNotNull(node1);
164:       assertFalse(node1.equals((Object)node0));
165:       assertFalse(node1.isVoid());
166:       assertFalse(node1.isTry());
167:       assertFalse(node1.isTrue());
168:       assertFalse(node1.isDebugger());
169:       assertFalse(node1.isFor());
170:       assertFalse(node1.isIf());
171:       assertFalse(node1.isDelProp());
172:       assertFalse(node1.isRegExp());
173:       assertFalse(node1.isFunction());
174:       assertFalse(node1.isCatch());
175:       assertFalse(node1.isArrayLit());
176:       assertFalse(node1.isParamList());
177:       assertFalse(node1.isString());
178:       assertFalse(node1.isCase());
179:       assertEquals(16422, node1.getSourcePosition());
180:       assertFalse(node1.isGetterDef());
181:       assertFalse(node1.isNew());
182:       assertFalse(node1.isSwitch());
183:       assertFalse(node1.isStringKey());
184:       assertFalse(node1.isVar());
185:       assertFalse(node1.isBreak());
186:       assertFalse(node1.isName());
187:       assertFalse(node1.isCall());
188:       assertEquals(0, node1.getType());
189:       assertFalse(node1.isAssignAdd());
190:       assertFalse(node1.isLabel());
191:       assertEquals(0, node1.getChildCount());
192:       assertFalse(node1.isOr());
193:       assertFalse(node1.isNull());
194:       assertFalse(node1.isDefaultCase());
195:       assertFalse(node1.isDo());
196:       assertFalse(node1.isEmpty());
197:       assertFalse(node1.isAdd());
198:       assertFalse(node1.hasOneChild());
199:       assertFalse(node1.isWith());
200:       assertFalse(node1.hasChildren());
201:       assertFalse(node1.isDec());
202:       assertFalse(node1.isTypeOf());
203:       assertFalse(node1.isAssign());
204:       assertFalse(node1.isLabelName());
205:       assertFalse(node1.isExprResult());
206:       assertFalse(node1.isInstanceOf());
207:       assertFalse(node1.isGetElem());
208:       assertFalse(node1.isCast());
209:       assertFalse(node1.isReturn());
210:       assertFalse(node1.isComma());
211:       assertFalse(node1.isThis());
212:       assertFalse(node1.isAnd());
213:       assertFalse(node1.isWhile());
214:       assertFalse(node1.isNumber());
215:       assertFalse(node1.isNot());
216:       assertFalse(node1.isObjectLit());
217:       assertFalse(node1.isGetProp());
218:       assertFalse(node1.isScript());
219:       assertFalse(node1.isHook());
220:       assertFalse(node1.isBlock());
221:       assertFalse(node1.isThrow());
222:       assertFalse(node1.isFalse());
223:       assertEquals(38, node1.getCharno());
224:       assertFalse(node1.isContinue());
225:       assertFalse(node1.hasMoreThanOneChild());
226:       assertEquals(4, node1.getLineno());
227:       assertFalse(node1.isIn());
228:       assertFalse(node1.isNE());
229:       assertFalse(node1.isInc());
230:       assertFalse(node1.isSetterDef());
231:       
232:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
233:       assertEquals(43, Node.IS_CONSTANT_NAME);
234:       assertEquals(36, Node.QUOTED_PROP);
235:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
236:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
237:       assertEquals(4095, Node.COLUMN_MASK);
238:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
239:       assertEquals(32, Node.INCRDECR_PROP);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       assertEquals(51, Node.STATIC_SOURCE_FILE);
242:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
243:       assertEquals(50, Node.FREE_CALL);
244:       assertEquals(57, Node.LAST_PROP);
245:       assertEquals(30, Node.VAR_ARGS_NAME);
246:       assertEquals(15, Node.NO_SIDE_EFFECTS);
247:       assertEquals(54, Node.SLASH_V);
248:       assertEquals(1, Node.DECR_FLAG);
249:       assertEquals(49, Node.DIRECT_EVAL);
250:       assertEquals(12, Node.COLUMN_BITS);
251:       assertEquals(40, Node.ORIGINALNAME_PROP);
252:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
253:       assertEquals(2, Node.POST_FLAG);
254:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
255:       assertEquals(56, Node.CHANGE_TIME);
256:       assertEquals(29, Node.JSDOC_INFO_PROP);
257:       assertEquals(39, Node.EMPTY_BLOCK);
258:       assertEquals(47, Node.IS_DISPATCHER);
259:       assertEquals(37, Node.OPT_ARG_NAME);
260:       assertEquals(48, Node.DIRECTIVES);
261:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
262:       assertEquals(53, Node.INPUT_ID);
263:       assertEquals(57, Node.REFLECTED_OBJECT);
264:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
265:       assertEquals(55, Node.INFERRED_FUNCTION);
266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
267:       assertEquals(52, Node.LENGTH);
268:       assertEquals(8, Node.FLAG_NO_THROWS);
269:       assertEquals(55, Node.INFERRED_FUNCTION);
270:       assertEquals(4095, Node.COLUMN_MASK);
271:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
272:       assertEquals(43, Node.IS_CONSTANT_NAME);
273:       assertEquals(48, Node.DIRECTIVES);
274:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
275:       assertEquals(40, Node.ORIGINALNAME_PROP);
276:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
277:       assertEquals(50, Node.FREE_CALL);
278:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
279:       assertEquals(54, Node.SLASH_V);
280:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
281:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
282:       assertEquals(51, Node.STATIC_SOURCE_FILE);
283:       assertEquals(1, Node.DECR_FLAG);
284:       assertEquals(32, Node.INCRDECR_PROP);
285:       assertEquals(30, Node.VAR_ARGS_NAME);
286:       assertEquals(46, Node.IS_NAMESPACE);
287:       assertEquals(12, Node.COLUMN_BITS);
288:       assertEquals(2, Node.POST_FLAG);
289:       assertEquals(37, Node.OPT_ARG_NAME);
290:       assertEquals(56, Node.CHANGE_TIME);
291:       assertEquals(49, Node.DIRECT_EVAL);
292:       assertEquals(47, Node.IS_DISPATCHER);
293:       assertEquals(57, Node.REFLECTED_OBJECT);
294:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
295:       assertEquals(39, Node.EMPTY_BLOCK);
296:       assertEquals(36, Node.QUOTED_PROP);
297:       assertEquals(57, Node.LAST_PROP);
298:       assertEquals(8, Node.FLAG_NO_THROWS);
299:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
300:       assertEquals(29, Node.JSDOC_INFO_PROP);
301:       assertEquals(52, Node.LENGTH);
302:       assertEquals(15, Node.NO_SIDE_EFFECTS);
303:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
304:       assertEquals(53, Node.INPUT_ID);
305:       assertNotNull(node_NodeMismatch0);
306:       assertFalse(node0.equals((Object)node1));
307:       assertFalse(node1.equals((Object)node0));
308:       assertFalse(node0.isGetElem());
309:       assertFalse(node0.isCast());
310:       assertFalse(node0.hasOneChild());
311:       assertFalse(node0.isLabelName());
312:       assertFalse(node0.isLabel());
313:       assertFalse(node0.isReturn());
314:       assertFalse(node0.isExprResult());
315:       assertFalse(node0.isDec());
316:       assertFalse(node0.hasChildren());
317:       assertFalse(node0.isAssign());
318:       assertFalse(node0.hasMoreThanOneChild());
319:       assertFalse(node0.isWith());
320:       assertFalse(node0.isTypeOf());
321:       assertFalse(node0.isAnd());
322:       assertFalse(node0.isContinue());
323:       assertEquals(39, node0.getType());
324:       assertFalse(node0.isWhile());
325:       assertFalse(node0.isGetProp());
326:       assertFalse(node0.isScript());
327:       assertEquals((-1), node0.getSourcePosition());
328:       assertFalse(node0.isNot());
329:       assertFalse(node0.isObjectLit());
330:       assertFalse(node0.isThrow());
331:       assertFalse(node0.isFalse());
332:       assertFalse(node0.isThis());
333:       assertFalse(node0.isBlock());
334:       assertFalse(node0.isHook());
335:       assertFalse(node0.isInstanceOf());
336:       assertFalse(node0.isCatch());
337:       assertEquals((-1), node0.getLineno());
338:       assertFalse(node0.isNE());
339:       assertFalse(node0.isInc());
340:       assertFalse(node0.isSetterDef());
341:       assertFalse(node0.isIn());
342:       assertFalse(node0.isEmpty());
343:       assertFalse(node0.isFor());
344:       assertFalse(node0.isIf());
345:       assertFalse(node0.isArrayLit());
346:       assertFalse(node0.isDelProp());
347:       assertFalse(node0.isTry());
348:       assertFalse(node0.isFunction());
349:       assertFalse(node0.isRegExp());
350:       assertFalse(node0.isCase());
351:       assertFalse(node0.isSwitch());
352:       assertTrue(node0.isNumber());
353:       assertFalse(node0.isDebugger());
354:       assertEquals((-1), node0.getCharno());
355:       assertFalse(node0.isParamList());
356:       assertFalse(node0.isString());
357:       assertFalse(node0.isGetterDef());
358:       assertFalse(node0.isStringKey());
359:       assertFalse(node0.isVar());
360:       assertFalse(node0.isCall());
361:       assertFalse(node0.isBreak());
362:       assertFalse(node0.isName());
363:       assertEquals(0, node0.getChildCount());
364:       assertFalse(node0.isComma());
365:       assertFalse(node0.isDefaultCase());
366:       assertFalse(node0.isAssignAdd());
367:       assertFalse(node0.isDo());
368:       assertFalse(node0.isVoid());
369:       assertFalse(node0.isNew());
370:       assertFalse(node0.isTrue());
371:       assertFalse(node0.isNull());
372:       assertFalse(node0.isAdd());
373:       assertFalse(node0.isOr());
374:       assertFalse(node1.isVoid());
375:       assertFalse(node1.isTry());
376:       assertFalse(node1.isTrue());
377:       assertFalse(node1.isDebugger());
378:       assertFalse(node1.isFor());
379:       assertFalse(node1.isIf());
380:       assertFalse(node1.isDelProp());
381:       assertFalse(node1.isRegExp());
382:       assertFalse(node1.isFunction());
383:       assertFalse(node1.isCatch());
384:       assertFalse(node1.isArrayLit());
385:       assertFalse(node1.isParamList());
386:       assertFalse(node1.isString());
387:       assertFalse(node1.isCase());
388:       assertEquals(16422, node1.getSourcePosition());
389:       assertFalse(node1.isGetterDef());
390:       assertFalse(node1.isNew());
391:       assertFalse(node1.isSwitch());
392:       assertFalse(node1.isStringKey());
393:       assertFalse(node1.isVar());
394:       assertFalse(node1.isBreak());
395:       assertFalse(node1.isName());
396:       assertFalse(node1.isCall());
397:       assertEquals(0, node1.getType());
398:       assertFalse(node1.isAssignAdd());
399:       assertFalse(node1.isLabel());
400:       assertEquals(0, node1.getChildCount());
401:       assertFalse(node1.isOr());
402:       assertFalse(node1.isNull());
403:       assertFalse(node1.isDefaultCase());
404:       assertFalse(node1.isDo());
405:       assertFalse(node1.isEmpty());
406:       assertFalse(node1.isAdd());
407:       assertFalse(node1.hasOneChild());
408:       assertFalse(node1.isWith());
409:       assertFalse(node1.hasChildren());
410:       assertFalse(node1.isDec());
411:       assertFalse(node1.isTypeOf());
412:       assertFalse(node1.isAssign());
413:       assertFalse(node1.isLabelName());
414:       assertFalse(node1.isExprResult());
415:       assertFalse(node1.isInstanceOf());
416:       assertFalse(node1.isGetElem());
417:       assertFalse(node1.isCast());
418:       assertFalse(node1.isReturn());
419:       assertFalse(node1.isComma());
420:       assertFalse(node1.isThis());
421:       assertFalse(node1.isAnd());
422:       assertFalse(node1.isWhile());
423:       assertFalse(node1.isNumber());
424:       assertFalse(node1.isNot());
425:       assertFalse(node1.isObjectLit());
426:       assertFalse(node1.isGetProp());
427:       assertFalse(node1.isScript());
428:       assertFalse(node1.isHook());
429:       assertFalse(node1.isBlock());
430:       assertFalse(node1.isThrow());
431:       assertFalse(node1.isFalse());
432:       assertEquals(38, node1.getCharno());
433:       assertFalse(node1.isContinue());
434:       assertFalse(node1.hasMoreThanOneChild());
435:       assertEquals(4, node1.getLineno());
436:       assertFalse(node1.isIn());
437:       assertFalse(node1.isNE());
438:       assertFalse(node1.isInc());
439:       assertFalse(node1.isSetterDef());
440:       
441:       boolean boolean0 = node_NodeMismatch0.equals("");
442:       assertFalse(boolean0);
443:       assertEquals(43, Node.IS_CONSTANT_NAME);
444:       assertEquals(36, Node.QUOTED_PROP);
445:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
446:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
447:       assertEquals(4095, Node.COLUMN_MASK);
448:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
449:       assertEquals(32, Node.INCRDECR_PROP);
450:       assertEquals(46, Node.IS_NAMESPACE);
451:       assertEquals(51, Node.STATIC_SOURCE_FILE);
452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
453:       assertEquals(50, Node.FREE_CALL);
454:       assertEquals(57, Node.LAST_PROP);
455:       assertEquals(30, Node.VAR_ARGS_NAME);
456:       assertEquals(15, Node.NO_SIDE_EFFECTS);
457:       assertEquals(54, Node.SLASH_V);
458:       assertEquals(1, Node.DECR_FLAG);
459:       assertEquals(49, Node.DIRECT_EVAL);
460:       assertEquals(12, Node.COLUMN_BITS);
461:       assertEquals(40, Node.ORIGINALNAME_PROP);
462:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
463:       assertEquals(2, Node.POST_FLAG);
464:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
465:       assertEquals(56, Node.CHANGE_TIME);
466:       assertEquals(29, Node.JSDOC_INFO_PROP);
467:       assertEquals(39, Node.EMPTY_BLOCK);
468:       assertEquals(47, Node.IS_DISPATCHER);
469:       assertEquals(37, Node.OPT_ARG_NAME);
470:       assertEquals(48, Node.DIRECTIVES);
471:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
472:       assertEquals(53, Node.INPUT_ID);
473:       assertEquals(57, Node.REFLECTED_OBJECT);
474:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
475:       assertEquals(55, Node.INFERRED_FUNCTION);
476:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
477:       assertEquals(52, Node.LENGTH);
478:       assertEquals(8, Node.FLAG_NO_THROWS);
479:       assertEquals(55, Node.INFERRED_FUNCTION);
480:       assertEquals(4095, Node.COLUMN_MASK);
481:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
482:       assertEquals(43, Node.IS_CONSTANT_NAME);
483:       assertEquals(48, Node.DIRECTIVES);
484:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
485:       assertEquals(40, Node.ORIGINALNAME_PROP);
486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
487:       assertEquals(50, Node.FREE_CALL);
488:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
489:       assertEquals(54, Node.SLASH_V);
490:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
491:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
492:       assertEquals(51, Node.STATIC_SOURCE_FILE);
493:       assertEquals(1, Node.DECR_FLAG);
494:       assertEquals(32, Node.INCRDECR_PROP);
495:       assertEquals(30, Node.VAR_ARGS_NAME);
496:       assertEquals(46, Node.IS_NAMESPACE);
497:       assertEquals(12, Node.COLUMN_BITS);
498:       assertEquals(2, Node.POST_FLAG);
499:       assertEquals(37, Node.OPT_ARG_NAME);
500:       assertEquals(56, Node.CHANGE_TIME);
501:       assertEquals(49, Node.DIRECT_EVAL);
502:       assertEquals(47, Node.IS_DISPATCHER);
503:       assertEquals(57, Node.REFLECTED_OBJECT);
504:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
505:       assertEquals(39, Node.EMPTY_BLOCK);
506:       assertEquals(36, Node.QUOTED_PROP);
507:       assertEquals(57, Node.LAST_PROP);
508:       assertEquals(8, Node.FLAG_NO_THROWS);
509:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
510:       assertEquals(29, Node.JSDOC_INFO_PROP);
511:       assertEquals(52, Node.LENGTH);
512:       assertEquals(15, Node.NO_SIDE_EFFECTS);
513:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
514:       assertEquals(53, Node.INPUT_ID);
515:       assertFalse(node0.equals((Object)node1));
516:       assertFalse(node1.equals((Object)node0));
517:       assertFalse(node0.isGetElem());
518:       assertFalse(node0.isCast());
519:       assertFalse(node0.hasOneChild());
520:       assertFalse(node0.isLabelName());
521:       assertFalse(node0.isLabel());
522:       assertFalse(node0.isReturn());
523:       assertFalse(node0.isExprResult());
524:       assertFalse(node0.isDec());
525:       assertFalse(node0.hasChildren());
526:       assertFalse(node0.isAssign());
527:       assertFalse(node0.hasMoreThanOneChild());
528:       assertFalse(node0.isWith());
529:       assertFalse(node0.isTypeOf());
530:       assertFalse(node0.isAnd());
531:       assertFalse(node0.isContinue());
532:       assertEquals(39, node0.getType());
533:       assertFalse(node0.isWhile());
534:       assertFalse(node0.isGetProp());
535:       assertFalse(node0.isScript());
536:       assertEquals((-1), node0.getSourcePosition());
537:       assertFalse(node0.isNot());
538:       assertFalse(node0.isObjectLit());
539:       assertFalse(node0.isThrow());
540:       assertFalse(node0.isFalse());
541:       assertFalse(node0.isThis());
542:       assertFalse(node0.isBlock());
543:       assertFalse(node0.isHook());
544:       assertFalse(node0.isInstanceOf());
545:       assertFalse(node0.isCatch());
546:       assertEquals((-1), node0.getLineno());
547:       assertFalse(node0.isNE());
548:       assertFalse(node0.isInc());
549:       assertFalse(node0.isSetterDef());
550:       assertFalse(node0.isIn());
551:       assertFalse(node0.isEmpty());
552:       assertFalse(node0.isFor());
553:       assertFalse(node0.isIf());
554:       assertFalse(node0.isArrayLit());
555:       assertFalse(node0.isDelProp());
556:       assertFalse(node0.isTry());
557:       assertFalse(node0.isFunction());
558:       assertFalse(node0.isRegExp());
559:       assertFalse(node0.isCase());
560:       assertFalse(node0.isSwitch());
561:       assertTrue(node0.isNumber());
562:       assertFalse(node0.isDebugger());
563:       assertEquals((-1), node0.getCharno());
564:       assertFalse(node0.isParamList());
565:       assertFalse(node0.isString());
566:       assertFalse(node0.isGetterDef());
567:       assertFalse(node0.isStringKey());
568:       assertFalse(node0.isVar());
569:       assertFalse(node0.isCall());
570:       assertFalse(node0.isBreak());
571:       assertFalse(node0.isName());
572:       assertEquals(0, node0.getChildCount());
573:       assertFalse(node0.isComma());
574:       assertFalse(node0.isDefaultCase());
575:       assertFalse(node0.isAssignAdd());
576:       assertFalse(node0.isDo());
577:       assertFalse(node0.isVoid());
578:       assertFalse(node0.isNew());
579:       assertFalse(node0.isTrue());
580:       assertFalse(node0.isNull());
581:       assertFalse(node0.isAdd());
582:       assertFalse(node0.isOr());
583:       assertFalse(node1.isVoid());
584:       assertFalse(node1.isTry());
585:       assertFalse(node1.isTrue());
586:       assertFalse(node1.isDebugger());
587:       assertFalse(node1.isFor());
588:       assertFalse(node1.isIf());
589:       assertFalse(node1.isDelProp());
590:       assertFalse(node1.isRegExp());
591:       assertFalse(node1.isFunction());
592:       assertFalse(node1.isCatch());
593:       assertFalse(node1.isArrayLit());
594:       assertFalse(node1.isParamList());
595:       assertFalse(node1.isString());
596:       assertFalse(node1.isCase());
597:       assertEquals(16422, node1.getSourcePosition());
598:       assertFalse(node1.isGetterDef());
599:       assertFalse(node1.isNew());
600:       assertFalse(node1.isSwitch());
601:       assertFalse(node1.isStringKey());
602:       assertFalse(node1.isVar());
603:       assertFalse(node1.isBreak());
604:       assertFalse(node1.isName());
605:       assertFalse(node1.isCall());
606:       assertEquals(0, node1.getType());
607:       assertFalse(node1.isAssignAdd());
608:       assertFalse(node1.isLabel());
609:       assertEquals(0, node1.getChildCount());
610:       assertFalse(node1.isOr());
611:       assertFalse(node1.isNull());
612:       assertFalse(node1.isDefaultCase());
613:       assertFalse(node1.isDo());
614:       assertFalse(node1.isEmpty());
615:       assertFalse(node1.isAdd());
616:       assertFalse(node1.hasOneChild());
617:       assertFalse(node1.isWith());
618:       assertFalse(node1.hasChildren());
619:       assertFalse(node1.isDec());
620:       assertFalse(node1.isTypeOf());
621:       assertFalse(node1.isAssign());
622:       assertFalse(node1.isLabelName());
623:       assertFalse(node1.isExprResult());
624:       assertFalse(node1.isInstanceOf());
625:       assertFalse(node1.isGetElem());
626:       assertFalse(node1.isCast());
627:       assertFalse(node1.isReturn());
628:       assertFalse(node1.isComma());
629:       assertFalse(node1.isThis());
630:       assertFalse(node1.isAnd());
631:       assertFalse(node1.isWhile());
632:       assertFalse(node1.isNumber());
633:       assertFalse(node1.isNot());
634:       assertFalse(node1.isObjectLit());
635:       assertFalse(node1.isGetProp());
636:       assertFalse(node1.isScript());
637:       assertFalse(node1.isHook());
638:       assertFalse(node1.isBlock());
639:       assertFalse(node1.isThrow());
640:       assertFalse(node1.isFalse());
641:       assertEquals(38, node1.getCharno());
642:       assertFalse(node1.isContinue());
643:       assertFalse(node1.hasMoreThanOneChild());
644:       assertEquals(4, node1.getLineno());
645:       assertFalse(node1.isIn());
646:       assertFalse(node1.isNE());
647:       assertFalse(node1.isInc());
648:       assertFalse(node1.isSetterDef());
649:       
650:       Node node2 = Node.newNumber((double) 0, 1, 42);
651:       assertEquals(37, Node.OPT_ARG_NAME);
652:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
653:       assertEquals(2, Node.POST_FLAG);
654:       assertEquals(32, Node.INCRDECR_PROP);
655:       assertEquals(46, Node.IS_NAMESPACE);
656:       assertEquals(47, Node.IS_DISPATCHER);
657:       assertEquals(12, Node.COLUMN_BITS);
658:       assertEquals(56, Node.CHANGE_TIME);
659:       assertEquals(51, Node.STATIC_SOURCE_FILE);
660:       assertEquals(1, Node.DECR_FLAG);
661:       assertEquals(15, Node.NO_SIDE_EFFECTS);
662:       assertEquals(29, Node.JSDOC_INFO_PROP);
663:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
664:       assertEquals(53, Node.INPUT_ID);
665:       assertEquals(54, Node.SLASH_V);
666:       assertEquals(57, Node.LAST_PROP);
667:       assertEquals(43, Node.IS_CONSTANT_NAME);
668:       assertEquals(40, Node.ORIGINALNAME_PROP);
669:       assertEquals(30, Node.VAR_ARGS_NAME);
670:       assertEquals(8, Node.FLAG_NO_THROWS);
671:       assertEquals(39, Node.EMPTY_BLOCK);
672:       assertEquals(48, Node.DIRECTIVES);
673:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
674:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
675:       assertEquals(50, Node.FREE_CALL);
676:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
677:       assertEquals(52, Node.LENGTH);
678:       assertEquals(55, Node.INFERRED_FUNCTION);
679:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
680:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
681:       assertEquals(36, Node.QUOTED_PROP);
682:       assertEquals(57, Node.REFLECTED_OBJECT);
683:       assertEquals(49, Node.DIRECT_EVAL);
684:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
685:       assertEquals(4095, Node.COLUMN_MASK);
686:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
687:       assertNotSame(node2, node0);
688:       assertNotNull(node2);
689:       assertFalse(node2.equals((Object)node1));
690:       assertFalse(node2.equals((Object)node0));
691:       assertFalse(node2.isCase());
692:       assertFalse(node2.isSwitch());
693:       assertFalse(node2.isIn());
694:       assertTrue(node2.isNumber());
695:       assertFalse(node2.isInc());
696:       assertFalse(node2.isString());
697:       assertFalse(node2.isGetterDef());
698:       assertFalse(node2.isThrow());
699:       assertFalse(node2.isArrayLit());
700:       assertEquals(4138, node2.getSourcePosition());
701:       assertFalse(node2.isFalse());
702:       assertFalse(node2.isFunction());
703:       assertFalse(node2.isRegExp());
704:       assertFalse(node2.isTry());
705:       assertFalse(node2.hasOneChild());
706:       assertFalse(node2.isSetterDef());
707:       assertFalse(node2.isScript());
708:       assertFalse(node2.isIf());
709:       assertFalse(node2.isThis());
710:       assertFalse(node2.isNE());
711:       assertFalse(node2.isFor());
712:       assertFalse(node2.isHook());
713:       assertFalse(node2.hasMoreThanOneChild());
714:       assertFalse(node2.isCatch());
715:       assertFalse(node2.isWith());
716:       assertFalse(node2.isInstanceOf());
717:       assertFalse(node2.isDo());
718:       assertEquals(39, node2.getType());
719:       assertFalse(node2.isBlock());
720:       assertFalse(node2.isWhile());
721:       assertFalse(node2.isOr());
722:       assertFalse(node2.isNew());
723:       assertFalse(node2.isAdd());
724:       assertFalse(node2.isLabelName());
725:       assertFalse(node2.isVar());
726:       assertFalse(node2.isAssignAdd());
727:       assertFalse(node2.isStringKey());
728:       assertFalse(node2.isParamList());
729:       assertEquals(0, node2.getChildCount());
730:       assertFalse(node2.isLabel());
731:       assertFalse(node2.isContinue());
732:       assertFalse(node2.isCast());
733:       assertEquals(42, node2.getCharno());
734:       assertFalse(node2.isDefaultCase());
735:       assertFalse(node2.isNot());
736:       assertFalse(node2.isDebugger());
737:       assertFalse(node2.isVoid());
738:       assertFalse(node2.isTrue());
739:       assertFalse(node2.isAnd());
740:       assertFalse(node2.isGetProp());
741:       assertFalse(node2.isObjectLit());
742:       assertFalse(node2.isEmpty());
743:       assertFalse(node2.isBreak());
744:       assertFalse(node2.hasChildren());
745:       assertFalse(node2.isDelProp());
746:       assertFalse(node2.isTypeOf());
747:       assertFalse(node2.isNull());
748:       assertFalse(node2.isAssign());
749:       assertFalse(node2.isComma());
750:       assertFalse(node2.isDec());
751:       assertFalse(node2.isName());
752:       assertFalse(node2.isReturn());
753:       assertFalse(node2.isGetElem());
754:       assertFalse(node2.isExprResult());
755:       assertFalse(node2.isCall());
756:       assertEquals(1, node2.getLineno());
757:       
758:       boolean boolean1 = node2.isEquivalentTo(node1, false, true, true);
759:       assertFalse(boolean1);
760:       assertEquals(55, Node.INFERRED_FUNCTION);
761:       assertEquals(4095, Node.COLUMN_MASK);
762:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
763:       assertEquals(43, Node.IS_CONSTANT_NAME);
764:       assertEquals(48, Node.DIRECTIVES);
765:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
766:       assertEquals(40, Node.ORIGINALNAME_PROP);
767:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
768:       assertEquals(50, Node.FREE_CALL);
769:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
770:       assertEquals(54, Node.SLASH_V);
771:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
772:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
773:       assertEquals(51, Node.STATIC_SOURCE_FILE);
774:       assertEquals(1, Node.DECR_FLAG);
775:       assertEquals(32, Node.INCRDECR_PROP);
776:       assertEquals(30, Node.VAR_ARGS_NAME);
777:       assertEquals(46, Node.IS_NAMESPACE);
778:       assertEquals(12, Node.COLUMN_BITS);
779:       assertEquals(2, Node.POST_FLAG);
780:       assertEquals(37, Node.OPT_ARG_NAME);
781:       assertEquals(56, Node.CHANGE_TIME);
782:       assertEquals(49, Node.DIRECT_EVAL);
783:       assertEquals(47, Node.IS_DISPATCHER);
784:       assertEquals(57, Node.REFLECTED_OBJECT);
785:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
786:       assertEquals(39, Node.EMPTY_BLOCK);
787:       assertEquals(36, Node.QUOTED_PROP);
788:       assertEquals(57, Node.LAST_PROP);
789:       assertEquals(8, Node.FLAG_NO_THROWS);
790:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
791:       assertEquals(29, Node.JSDOC_INFO_PROP);
792:       assertEquals(52, Node.LENGTH);
793:       assertEquals(15, Node.NO_SIDE_EFFECTS);
794:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
795:       assertEquals(53, Node.INPUT_ID);
796:       assertEquals(37, Node.OPT_ARG_NAME);
797:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
798:       assertEquals(2, Node.POST_FLAG);
799:       assertEquals(32, Node.INCRDECR_PROP);
800:       assertEquals(46, Node.IS_NAMESPACE);
801:       assertEquals(47, Node.IS_DISPATCHER);
802:       assertEquals(12, Node.COLUMN_BITS);
803:       assertEquals(56, Node.CHANGE_TIME);
804:       assertEquals(51, Node.STATIC_SOURCE_FILE);
805:       assertEquals(1, Node.DECR_FLAG);
806:       assertEquals(15, Node.NO_SIDE_EFFECTS);
807:       assertEquals(29, Node.JSDOC_INFO_PROP);
808:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
809:       assertEquals(53, Node.INPUT_ID);
810:       assertEquals(54, Node.SLASH_V);
811:       assertEquals(57, Node.LAST_PROP);
812:       assertEquals(43, Node.IS_CONSTANT_NAME);
813:       assertEquals(40, Node.ORIGINALNAME_PROP);
814:       assertEquals(30, Node.VAR_ARGS_NAME);
815:       assertEquals(8, Node.FLAG_NO_THROWS);
816:       assertEquals(39, Node.EMPTY_BLOCK);
817:       assertEquals(48, Node.DIRECTIVES);
818:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
819:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
820:       assertEquals(50, Node.FREE_CALL);
821:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
822:       assertEquals(52, Node.LENGTH);
823:       assertEquals(55, Node.INFERRED_FUNCTION);
824:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
825:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
826:       assertEquals(36, Node.QUOTED_PROP);
827:       assertEquals(57, Node.REFLECTED_OBJECT);
828:       assertEquals(49, Node.DIRECT_EVAL);
829:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
830:       assertEquals(4095, Node.COLUMN_MASK);
831:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
832:       assertNotSame(node2, node0);
833:       assertFalse(node1.equals((Object)node2));
834:       assertFalse(node1.equals((Object)node0));
835:       assertFalse(node2.equals((Object)node1));
836:       assertFalse(node2.equals((Object)node0));
837:       assertTrue(boolean1 == boolean0);
838:       assertFalse(node1.isVoid());
839:       assertFalse(node1.isTry());
840:       assertFalse(node1.isTrue());
841:       assertFalse(node1.isDebugger());
842:       assertFalse(node1.isFor());
843:       assertFalse(node1.isIf());
844:       assertFalse(node1.isDelProp());
845:       assertFalse(node1.isRegExp());
846:       assertFalse(node1.isFunction());
847:       assertFalse(node1.isCatch());
848:       assertFalse(node1.isArrayLit());
849:       assertFalse(node1.isParamList());
850:       assertFalse(node1.isString());
851:       assertFalse(node1.isCase());
852:       assertEquals(16422, node1.getSourcePosition());
853:       assertFalse(node1.isGetterDef());
854:       assertFalse(node1.isNew());
855:       assertFalse(node1.isSwitch());
856:       assertFalse(node1.isStringKey());
857:       assertFalse(node1.isVar());
858:       assertFalse(node1.isBreak());
859:       assertFalse(node1.isName());
860:       assertFalse(node1.isCall());
861:       assertEquals(0, node1.getType());
862:       assertFalse(node1.isAssignAdd());
863:       assertFalse(node1.isLabel());
864:       assertEquals(0, node1.getChildCount());
865:       assertFalse(node1.isOr());
866:       assertFalse(node1.isNull());
867:       assertFalse(node1.isDefaultCase());
868:       assertFalse(node1.isDo());
869:       assertFalse(node1.isEmpty());
870:       assertFalse(node1.isAdd());
871:       assertFalse(node1.hasOneChild());
872:       assertFalse(node1.isWith());
873:       assertFalse(node1.hasChildren());
874:       assertFalse(node1.isDec());
875:       assertFalse(node1.isTypeOf());
876:       assertFalse(node1.isAssign());
877:       assertFalse(node1.isLabelName());
878:       assertFalse(node1.isExprResult());
879:       assertFalse(node1.isInstanceOf());
880:       assertFalse(node1.isGetElem());
881:       assertFalse(node1.isCast());
882:       assertFalse(node1.isReturn());
883:       assertFalse(node1.isComma());
884:       assertFalse(node1.isThis());
885:       assertFalse(node1.isAnd());
886:       assertFalse(node1.isWhile());
887:       assertFalse(node1.isNumber());
888:       assertFalse(node1.isNot());
889:       assertFalse(node1.isObjectLit());
890:       assertFalse(node1.isGetProp());
891:       assertFalse(node1.isScript());
892:       assertFalse(node1.isHook());
893:       assertFalse(node1.isBlock());
894:       assertFalse(node1.isThrow());
895:       assertFalse(node1.isFalse());
896:       assertEquals(38, node1.getCharno());
897:       assertFalse(node1.isContinue());
898:       assertFalse(node1.hasMoreThanOneChild());
899:       assertEquals(4, node1.getLineno());
900:       assertFalse(node1.isIn());
901:       assertFalse(node1.isNE());
902:       assertFalse(node1.isInc());
903:       assertFalse(node1.isSetterDef());
904:       assertFalse(node2.isCase());
905:       assertFalse(node2.isSwitch());
906:       assertFalse(node2.isIn());
907:       assertTrue(node2.isNumber());
908:       assertFalse(node2.isInc());
909:       assertFalse(node2.isString());
910:       assertFalse(node2.isGetterDef());
911:       assertFalse(node2.isThrow());
912:       assertFalse(node2.isArrayLit());
913:       assertEquals(4138, node2.getSourcePosition());
914:       assertFalse(node2.isFalse());
915:       assertFalse(node2.isFunction());
916:       assertFalse(node2.isRegExp());
917:       assertFalse(node2.isTry());
918:       assertFalse(node2.hasOneChild());
919:       assertFalse(node2.isSetterDef());
920:       assertFalse(node2.isScript());
921:       assertFalse(node2.isIf());
922:       assertFalse(node2.isThis());
923:       assertFalse(node2.isNE());
924:       assertFalse(node2.isFor());
925:       assertFalse(node2.isHook());
926:       assertFalse(node2.hasMoreThanOneChild());
927:       assertFalse(node2.isCatch());
928:       assertFalse(node2.isWith());
929:       assertFalse(node2.isInstanceOf());
930:       assertFalse(node2.isDo());
931:       assertEquals(39, node2.getType());
932:       assertFalse(node2.isBlock());
933:       assertFalse(node2.isWhile());
934:       assertFalse(node2.isOr());
935:       assertFalse(node2.isNew());
936:       assertFalse(node2.isAdd());
937:       assertFalse(node2.isLabelName());
938:       assertFalse(node2.isVar());
939:       assertFalse(node2.isAssignAdd());
940:       assertFalse(node2.isStringKey());
941:       assertFalse(node2.isParamList());
942:       assertEquals(0, node2.getChildCount());
943:       assertFalse(node2.isLabel());
944:       assertFalse(node2.isContinue());
945:       assertFalse(node2.isCast());
946:       assertEquals(42, node2.getCharno());
947:       assertFalse(node2.isDefaultCase());
948:       assertFalse(node2.isNot());
949:       assertFalse(node2.isDebugger());
950:       assertFalse(node2.isVoid());
951:       assertFalse(node2.isTrue());
952:       assertFalse(node2.isAnd());
953:       assertFalse(node2.isGetProp());
954:       assertFalse(node2.isObjectLit());
955:       assertFalse(node2.isEmpty());
956:       assertFalse(node2.isBreak());
957:       assertFalse(node2.hasChildren());
958:       assertFalse(node2.isDelProp());
959:       assertFalse(node2.isTypeOf());
960:       assertFalse(node2.isNull());
961:       assertFalse(node2.isAssign());
962:       assertFalse(node2.isComma());
963:       assertFalse(node2.isDec());
964:       assertFalse(node2.isName());
965:       assertFalse(node2.isReturn());
966:       assertFalse(node2.isGetElem());
967:       assertFalse(node2.isExprResult());
968:       assertFalse(node2.isCall());
969:       assertEquals(1, node2.getLineno());
970:       
971:       Iterable<Node> iterable0 = node0.children();
972:       assertFalse(iterable0.contains(node0));
973:       assertEquals(43, Node.IS_CONSTANT_NAME);
974:       assertEquals(36, Node.QUOTED_PROP);
975:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
976:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
977:       assertEquals(4095, Node.COLUMN_MASK);
978:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
979:       assertEquals(32, Node.INCRDECR_PROP);
980:       assertEquals(46, Node.IS_NAMESPACE);
981:       assertEquals(51, Node.STATIC_SOURCE_FILE);
982:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
983:       assertEquals(50, Node.FREE_CALL);
984:       assertEquals(57, Node.LAST_PROP);
985:       assertEquals(30, Node.VAR_ARGS_NAME);
986:       assertEquals(15, Node.NO_SIDE_EFFECTS);
987:       assertEquals(54, Node.SLASH_V);
988:       assertEquals(1, Node.DECR_FLAG);
989:       assertEquals(49, Node.DIRECT_EVAL);
990:       assertEquals(12, Node.COLUMN_BITS);
991:       assertEquals(40, Node.ORIGINALNAME_PROP);
992:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
993:       assertEquals(2, Node.POST_FLAG);
994:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
995:       assertEquals(56, Node.CHANGE_TIME);
996:       assertEquals(29, Node.JSDOC_INFO_PROP);
997:       assertEquals(39, Node.EMPTY_BLOCK);
998:       assertEquals(47, Node.IS_DISPATCHER);
999:       assertEquals(37, Node.OPT_ARG_NAME);
1000:       assertEquals(48, Node.DIRECTIVES);
1001:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1002:       assertEquals(53, Node.INPUT_ID);
1003:       assertEquals(57, Node.REFLECTED_OBJECT);
1004:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1005:       assertEquals(55, Node.INFERRED_FUNCTION);
1006:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1007:       assertEquals(52, Node.LENGTH);
1008:       assertEquals(8, Node.FLAG_NO_THROWS);
1009:       assertNotSame(node0, node2);
1010:       assertNotNull(iterable0);
1011:       assertFalse(node0.equals((Object)node2));
1012:       assertFalse(node0.equals((Object)node1));
1013:       assertFalse(node0.isGetElem());
1014:       assertFalse(node0.isCast());
1015:       assertFalse(node0.hasOneChild());
1016:       assertFalse(node0.isLabelName());
1017:       assertFalse(node0.isLabel());
1018:       assertFalse(node0.isReturn());
1019:       assertFalse(node0.isExprResult());
1020:       assertFalse(node0.isDec());
1021:       assertFalse(node0.hasChildren());
1022:       assertFalse(node0.isAssign());
1023:       assertFalse(node0.hasMoreThanOneChild());
1024:       assertFalse(node0.isWith());
1025:       assertFalse(node0.isTypeOf());
1026:       assertFalse(node0.isAnd());
1027:       assertFalse(node0.isContinue());
1028:       assertEquals(39, node0.getType());
1029:       assertFalse(node0.isWhile());
1030:       assertFalse(node0.isGetProp());
1031:       assertFalse(node0.isScript());
1032:       assertEquals((-1), node0.getSourcePosition());
1033:       assertFalse(node0.isNot());
1034:       assertFalse(node0.isObjectLit());
1035:       assertFalse(node0.isThrow());
1036:       assertFalse(node0.isFalse());
1037:       assertFalse(node0.isThis());
1038:       assertFalse(node0.isBlock());
1039:       assertFalse(node0.isHook());
1040:       assertFalse(node0.isInstanceOf());
1041:       assertFalse(node0.isCatch());
1042:       assertEquals((-1), node0.getLineno());
1043:       assertFalse(node0.isNE());
1044:       assertFalse(node0.isInc());
1045:       assertFalse(node0.isSetterDef());
1046:       assertFalse(node0.isIn());
1047:       assertFalse(node0.isEmpty());
1048:       assertFalse(node0.isFor());
1049:       assertFalse(node0.isIf());
1050:       assertFalse(node0.isArrayLit());
1051:       assertFalse(node0.isDelProp());
1052:       assertFalse(node0.isTry());
1053:       assertFalse(node0.isFunction());
1054:       assertFalse(node0.isRegExp());
1055:       assertFalse(node0.isCase());
1056:       assertFalse(node0.isSwitch());
1057:       assertTrue(node0.isNumber());
1058:       assertFalse(node0.isDebugger());
1059:       assertEquals((-1), node0.getCharno());
1060:       assertFalse(node0.isParamList());
1061:       assertFalse(node0.isString());
1062:       assertFalse(node0.isGetterDef());
1063:       assertFalse(node0.isStringKey());
1064:       assertFalse(node0.isVar());
1065:       assertFalse(node0.isCall());
1066:       assertFalse(node0.isBreak());
1067:       assertFalse(node0.isName());
1068:       assertEquals(0, node0.getChildCount());
1069:       assertFalse(node0.isComma());
1070:       assertFalse(node0.isDefaultCase());
1071:       assertFalse(node0.isAssignAdd());
1072:       assertFalse(node0.isDo());
1073:       assertFalse(node0.isVoid());
1074:       assertFalse(node0.isNew());
1075:       assertFalse(node0.isTrue());
1076:       assertFalse(node0.isNull());
1077:       assertFalse(node0.isAdd());
1078:       assertFalse(node0.isOr());
1079:       
1080:       boolean boolean2 = node1.isIf();
1081:       assertFalse(boolean2);
1082:       assertEquals(55, Node.INFERRED_FUNCTION);
1083:       assertEquals(4095, Node.COLUMN_MASK);
1084:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1085:       assertEquals(43, Node.IS_CONSTANT_NAME);
1086:       assertEquals(48, Node.DIRECTIVES);
1087:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1088:       assertEquals(40, Node.ORIGINALNAME_PROP);
1089:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1090:       assertEquals(50, Node.FREE_CALL);
1091:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1092:       assertEquals(54, Node.SLASH_V);
1093:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1094:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1095:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1096:       assertEquals(1, Node.DECR_FLAG);
1097:       assertEquals(32, Node.INCRDECR_PROP);
1098:       assertEquals(30, Node.VAR_ARGS_NAME);
1099:       assertEquals(46, Node.IS_NAMESPACE);
1100:       assertEquals(12, Node.COLUMN_BITS);
1101:       assertEquals(2, Node.POST_FLAG);
1102:       assertEquals(37, Node.OPT_ARG_NAME);
1103:       assertEquals(56, Node.CHANGE_TIME);
1104:       assertEquals(49, Node.DIRECT_EVAL);
1105:       assertEquals(47, Node.IS_DISPATCHER);
1106:       assertEquals(57, Node.REFLECTED_OBJECT);
1107:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1108:       assertEquals(39, Node.EMPTY_BLOCK);
1109:       assertEquals(36, Node.QUOTED_PROP);
1110:       assertEquals(57, Node.LAST_PROP);
1111:       assertEquals(8, Node.FLAG_NO_THROWS);
1112:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1113:       assertEquals(29, Node.JSDOC_INFO_PROP);
1114:       assertEquals(52, Node.LENGTH);
1115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1117:       assertEquals(53, Node.INPUT_ID);
1118:       assertFalse(node1.equals((Object)node2));
1119:       assertFalse(node1.equals((Object)node0));
1120:       assertTrue(boolean2 == boolean1);
1121:       assertTrue(boolean2 == boolean0);
1122:       assertFalse(node1.isVoid());
1123:       assertFalse(node1.isTry());
1124:       assertFalse(node1.isTrue());
1125:       assertFalse(node1.isDebugger());
1126:       assertFalse(node1.isFor());
1127:       assertFalse(node1.isIf());
1128:       assertFalse(node1.isDelProp());
1129:       assertFalse(node1.isRegExp());
1130:       assertFalse(node1.isFunction());
1131:       assertFalse(node1.isCatch());
1132:       assertFalse(node1.isArrayLit());
1133:       assertFalse(node1.isParamList());
1134:       assertFalse(node1.isString());
1135:       assertFalse(node1.isCase());
1136:       assertEquals(16422, node1.getSourcePosition());
1137:       assertFalse(node1.isGetterDef());
1138:       assertFalse(node1.isNew());
1139:       assertFalse(node1.isSwitch());
1140:       assertFalse(node1.isStringKey());
1141:       assertFalse(node1.isVar());
1142:       assertFalse(node1.isBreak());
1143:       assertFalse(node1.isName());
1144:       assertFalse(node1.isCall());
1145:       assertEquals(0, node1.getType());
1146:       assertFalse(node1.isAssignAdd());
1147:       assertFalse(node1.isLabel());
1148:       assertEquals(0, node1.getChildCount());
1149:       assertFalse(node1.isOr());
1150:       assertFalse(node1.isNull());
1151:       assertFalse(node1.isDefaultCase());
1152:       assertFalse(node1.isDo());
1153:       assertFalse(node1.isEmpty());
1154:       assertFalse(node1.isAdd());
1155:       assertFalse(node1.hasOneChild());
1156:       assertFalse(node1.isWith());
1157:       assertFalse(node1.hasChildren());
1158:       assertFalse(node1.isDec());
1159:       assertFalse(node1.isTypeOf());
1160:       assertFalse(node1.isAssign());
1161:       assertFalse(node1.isLabelName());
1162:       assertFalse(node1.isExprResult());
1163:       assertFalse(node1.isInstanceOf());
1164:       assertFalse(node1.isGetElem());
1165:       assertFalse(node1.isCast());
1166:       assertFalse(node1.isReturn());
1167:       assertFalse(node1.isComma());
1168:       assertFalse(node1.isThis());
1169:       assertFalse(node1.isAnd());
1170:       assertFalse(node1.isWhile());
1171:       assertFalse(node1.isNumber());
1172:       assertFalse(node1.isNot());
1173:       assertFalse(node1.isObjectLit());
1174:       assertFalse(node1.isGetProp());
1175:       assertFalse(node1.isScript());
1176:       assertFalse(node1.isHook());
1177:       assertFalse(node1.isBlock());
1178:       assertFalse(node1.isThrow());
1179:       assertFalse(node1.isFalse());
1180:       assertEquals(38, node1.getCharno());
1181:       assertFalse(node1.isContinue());
1182:       assertFalse(node1.hasMoreThanOneChild());
1183:       assertEquals(4, node1.getLineno());
1184:       assertFalse(node1.isIn());
1185:       assertFalse(node1.isNE());
1186:       assertFalse(node1.isInc());
1187:       assertFalse(node1.isSetterDef());
1188:       
1189:       boolean boolean3 = node1.isEquivalentTo(node2);
1190:       assertFalse(boolean3);
1191:       assertEquals(55, Node.INFERRED_FUNCTION);
1192:       assertEquals(4095, Node.COLUMN_MASK);
1193:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1194:       assertEquals(43, Node.IS_CONSTANT_NAME);
1195:       assertEquals(48, Node.DIRECTIVES);
1196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1197:       assertEquals(40, Node.ORIGINALNAME_PROP);
1198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1199:       assertEquals(50, Node.FREE_CALL);
1200:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1201:       assertEquals(54, Node.SLASH_V);
1202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1204:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1205:       assertEquals(1, Node.DECR_FLAG);
1206:       assertEquals(32, Node.INCRDECR_PROP);
1207:       assertEquals(30, Node.VAR_ARGS_NAME);
1208:       assertEquals(46, Node.IS_NAMESPACE);
1209:       assertEquals(12, Node.COLUMN_BITS);
1210:       assertEquals(2, Node.POST_FLAG);
1211:       assertEquals(37, Node.OPT_ARG_NAME);
1212:       assertEquals(56, Node.CHANGE_TIME);
1213:       assertEquals(49, Node.DIRECT_EVAL);
1214:       assertEquals(47, Node.IS_DISPATCHER);
1215:       assertEquals(57, Node.REFLECTED_OBJECT);
1216:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1217:       assertEquals(39, Node.EMPTY_BLOCK);
1218:       assertEquals(36, Node.QUOTED_PROP);
1219:       assertEquals(57, Node.LAST_PROP);
1220:       assertEquals(8, Node.FLAG_NO_THROWS);
1221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1222:       assertEquals(29, Node.JSDOC_INFO_PROP);
1223:       assertEquals(52, Node.LENGTH);
1224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1225:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1226:       assertEquals(53, Node.INPUT_ID);
1227:       assertEquals(37, Node.OPT_ARG_NAME);
1228:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1229:       assertEquals(2, Node.POST_FLAG);
1230:       assertEquals(32, Node.INCRDECR_PROP);
1231:       assertEquals(46, Node.IS_NAMESPACE);
1232:       assertEquals(47, Node.IS_DISPATCHER);
1233:       assertEquals(12, Node.COLUMN_BITS);
1234:       assertEquals(56, Node.CHANGE_TIME);
1235:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1236:       assertEquals(1, Node.DECR_FLAG);
1237:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1238:       assertEquals(29, Node.JSDOC_INFO_PROP);
1239:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1240:       assertEquals(53, Node.INPUT_ID);
1241:       assertEquals(54, Node.SLASH_V);
1242:       assertEquals(57, Node.LAST_PROP);
1243:       assertEquals(43, Node.IS_CONSTANT_NAME);
1244:       assertEquals(40, Node.ORIGINALNAME_PROP);
1245:       assertEquals(30, Node.VAR_ARGS_NAME);
1246:       assertEquals(8, Node.FLAG_NO_THROWS);
1247:       assertEquals(39, Node.EMPTY_BLOCK);
1248:       assertEquals(48, Node.DIRECTIVES);
1249:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1250:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1251:       assertEquals(50, Node.FREE_CALL);
1252:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1253:       assertEquals(52, Node.LENGTH);
1254:       assertEquals(55, Node.INFERRED_FUNCTION);
1255:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1256:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1257:       assertEquals(36, Node.QUOTED_PROP);
1258:       assertEquals(57, Node.REFLECTED_OBJECT);
1259:       assertEquals(49, Node.DIRECT_EVAL);
1260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1261:       assertEquals(4095, Node.COLUMN_MASK);
1262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1263:       assertNotSame(node2, node0);
1264:       assertFalse(node1.equals((Object)node2));
1265:       assertFalse(node1.equals((Object)node0));
1266:       assertFalse(node2.equals((Object)node1));
1267:       assertFalse(node2.equals((Object)node0));
1268:       assertTrue(boolean3 == boolean0);
1269:       assertTrue(boolean3 == boolean2);
1270:       assertTrue(boolean3 == boolean1);
1271:       assertFalse(node1.isVoid());
1272:       assertFalse(node1.isTry());
1273:       assertFalse(node1.isTrue());
1274:       assertFalse(node1.isDebugger());
1275:       assertFalse(node1.isFor());
1276:       assertFalse(node1.isIf());
1277:       assertFalse(node1.isDelProp());
1278:       assertFalse(node1.isRegExp());
1279:       assertFalse(node1.isFunction());
1280:       assertFalse(node1.isCatch());
1281:       assertFalse(node1.isArrayLit());
1282:       assertFalse(node1.isParamList());
1283:       assertFalse(node1.isString());
1284:       assertFalse(node1.isCase());
1285:       assertEquals(16422, node1.getSourcePosition());
1286:       assertFalse(node1.isGetterDef());
1287:       assertFalse(node1.isNew());
1288:       assertFalse(node1.isSwitch());
1289:       assertFalse(node1.isStringKey());
1290:       assertFalse(node1.isVar());
1291:       assertFalse(node1.isBreak());
1292:       assertFalse(node1.isName());
1293:       assertFalse(node1.isCall());
1294:       assertEquals(0, node1.getType());
1295:       assertFalse(node1.isAssignAdd());
1296:       assertFalse(node1.isLabel());
1297:       assertEquals(0, node1.getChildCount());
1298:       assertFalse(node1.isOr());
1299:       assertFalse(node1.isNull());
1300:       assertFalse(node1.isDefaultCase());
1301:       assertFalse(node1.isDo());
1302:       assertFalse(node1.isEmpty());
1303:       assertFalse(node1.isAdd());
1304:       assertFalse(node1.hasOneChild());
1305:       assertFalse(node1.isWith());
1306:       assertFalse(node1.hasChildren());
1307:       assertFalse(node1.isDec());
1308:       assertFalse(node1.isTypeOf());
1309:       assertFalse(node1.isAssign());
1310:       assertFalse(node1.isLabelName());
1311:       assertFalse(node1.isExprResult());
1312:       assertFalse(node1.isInstanceOf());
1313:       assertFalse(node1.isGetElem());
1314:       assertFalse(node1.isCast());
1315:       assertFalse(node1.isReturn());
1316:       assertFalse(node1.isComma());
1317:       assertFalse(node1.isThis());
1318:       assertFalse(node1.isAnd());
1319:       assertFalse(node1.isWhile());
1320:       assertFalse(node1.isNumber());
1321:       assertFalse(node1.isNot());
1322:       assertFalse(node1.isObjectLit());
1323:       assertFalse(node1.isGetProp());
1324:       assertFalse(node1.isScript());
1325:       assertFalse(node1.isHook());
1326:       assertFalse(node1.isBlock());
1327:       assertFalse(node1.isThrow());
1328:       assertFalse(node1.isFalse());
1329:       assertEquals(38, node1.getCharno());
1330:       assertFalse(node1.isContinue());
1331:       assertFalse(node1.hasMoreThanOneChild());
1332:       assertEquals(4, node1.getLineno());
1333:       assertFalse(node1.isIn());
1334:       assertFalse(node1.isNE());
1335:       assertFalse(node1.isInc());
1336:       assertFalse(node1.isSetterDef());
1337:       assertFalse(node2.isCase());
1338:       assertFalse(node2.isSwitch());
1339:       assertFalse(node2.isIn());
1340:       assertTrue(node2.isNumber());
1341:       assertFalse(node2.isInc());
1342:       assertFalse(node2.isString());
1343:       assertFalse(node2.isGetterDef());
1344:       assertFalse(node2.isThrow());
1345:       assertFalse(node2.isArrayLit());
1346:       assertEquals(4138, node2.getSourcePosition());
1347:       assertFalse(node2.isFalse());
1348:       assertFalse(node2.isFunction());
1349:       assertFalse(node2.isRegExp());
1350:       assertFalse(node2.isTry());
1351:       assertFalse(node2.hasOneChild());
1352:       assertFalse(node2.isSetterDef());
1353:       assertFalse(node2.isScript());
1354:       assertFalse(node2.isIf());
1355:       assertFalse(node2.isThis());
1356:       assertFalse(node2.isNE());
1357:       assertFalse(node2.isFor());
1358:       assertFalse(node2.isHook());
1359:       assertFalse(node2.hasMoreThanOneChild());
1360:       assertFalse(node2.isCatch());
1361:       assertFalse(node2.isWith());
1362:       assertFalse(node2.isInstanceOf());
1363:       assertFalse(node2.isDo());
1364:       assertEquals(39, node2.getType());
1365:       assertFalse(node2.isBlock());
1366:       assertFalse(node2.isWhile());
1367:       assertFalse(node2.isOr());
1368:       assertFalse(node2.isNew());
1369:       assertFalse(node2.isAdd());
1370:       assertFalse(node2.isLabelName());
1371:       assertFalse(node2.isVar());
1372:       assertFalse(node2.isAssignAdd());
1373:       assertFalse(node2.isStringKey());
1374:       assertFalse(node2.isParamList());
1375:       assertEquals(0, node2.getChildCount());
1376:       assertFalse(node2.isLabel());
1377:       assertFalse(node2.isContinue());
1378:       assertFalse(node2.isCast());
1379:       assertEquals(42, node2.getCharno());
1380:       assertFalse(node2.isDefaultCase());
1381:       assertFalse(node2.isNot());
1382:       assertFalse(node2.isDebugger());
1383:       assertFalse(node2.isVoid());
1384:       assertFalse(node2.isTrue());
1385:       assertFalse(node2.isAnd());
1386:       assertFalse(node2.isGetProp());
1387:       assertFalse(node2.isObjectLit());
1388:       assertFalse(node2.isEmpty());
1389:       assertFalse(node2.isBreak());
1390:       assertFalse(node2.hasChildren());
1391:       assertFalse(node2.isDelProp());
1392:       assertFalse(node2.isTypeOf());
1393:       assertFalse(node2.isNull());
1394:       assertFalse(node2.isAssign());
1395:       assertFalse(node2.isComma());
1396:       assertFalse(node2.isDec());
1397:       assertFalse(node2.isName());
1398:       assertFalse(node2.isReturn());
1399:       assertFalse(node2.isGetElem());
1400:       assertFalse(node2.isExprResult());
1401:       assertFalse(node2.isCall());
1402:       assertEquals(1, node2.getLineno());
1403:       
1404:       node1.setInputId((InputId) null);
1405:       assertEquals(55, Node.INFERRED_FUNCTION);
1406:       assertEquals(4095, Node.COLUMN_MASK);
1407:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1408:       assertEquals(43, Node.IS_CONSTANT_NAME);
1409:       assertEquals(48, Node.DIRECTIVES);
1410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1411:       assertEquals(40, Node.ORIGINALNAME_PROP);
1412:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1413:       assertEquals(50, Node.FREE_CALL);
1414:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1415:       assertEquals(54, Node.SLASH_V);
1416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1417:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1418:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1419:       assertEquals(1, Node.DECR_FLAG);
1420:       assertEquals(32, Node.INCRDECR_PROP);
1421:       assertEquals(30, Node.VAR_ARGS_NAME);
1422:       assertEquals(46, Node.IS_NAMESPACE);
1423:       assertEquals(12, Node.COLUMN_BITS);
1424:       assertEquals(2, Node.POST_FLAG);
1425:       assertEquals(37, Node.OPT_ARG_NAME);
1426:       assertEquals(56, Node.CHANGE_TIME);
1427:       assertEquals(49, Node.DIRECT_EVAL);
1428:       assertEquals(47, Node.IS_DISPATCHER);
1429:       assertEquals(57, Node.REFLECTED_OBJECT);
1430:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1431:       assertEquals(39, Node.EMPTY_BLOCK);
1432:       assertEquals(36, Node.QUOTED_PROP);
1433:       assertEquals(57, Node.LAST_PROP);
1434:       assertEquals(8, Node.FLAG_NO_THROWS);
1435:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1436:       assertEquals(29, Node.JSDOC_INFO_PROP);
1437:       assertEquals(52, Node.LENGTH);
1438:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1439:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1440:       assertEquals(53, Node.INPUT_ID);
1441:       assertFalse(node1.equals((Object)node2));
1442:       assertFalse(node1.equals((Object)node0));
1443:       assertFalse(node1.isVoid());
1444:       assertFalse(node1.isTry());
1445:       assertFalse(node1.isTrue());
1446:       assertFalse(node1.isDebugger());
1447:       assertFalse(node1.isFor());
1448:       assertFalse(node1.isIf());
1449:       assertFalse(node1.isDelProp());
1450:       assertFalse(node1.isRegExp());
1451:       assertFalse(node1.isFunction());
1452:       assertFalse(node1.isCatch());
1453:       assertFalse(node1.isArrayLit());
1454:       assertFalse(node1.isParamList());
1455:       assertFalse(node1.isString());
1456:       assertFalse(node1.isCase());
1457:       assertEquals(16422, node1.getSourcePosition());
1458:       assertFalse(node1.isGetterDef());
1459:       assertFalse(node1.isNew());
1460:       assertFalse(node1.isSwitch());
1461:       assertFalse(node1.isStringKey());
1462:       assertFalse(node1.isVar());
1463:       assertFalse(node1.isBreak());
1464:       assertFalse(node1.isName());
1465:       assertFalse(node1.isCall());
1466:       assertEquals(0, node1.getType());
1467:       assertFalse(node1.isAssignAdd());
1468:       assertFalse(node1.isLabel());
1469:       assertEquals(0, node1.getChildCount());
1470:       assertFalse(node1.isOr());
1471:       assertFalse(node1.isNull());
1472:       assertFalse(node1.isDefaultCase());
1473:       assertFalse(node1.isDo());
1474:       assertFalse(node1.isEmpty());
1475:       assertFalse(node1.isAdd());
1476:       assertFalse(node1.hasOneChild());
1477:       assertFalse(node1.isWith());
1478:       assertFalse(node1.hasChildren());
1479:       assertFalse(node1.isDec());
1480:       assertFalse(node1.isTypeOf());
1481:       assertFalse(node1.isAssign());
1482:       assertFalse(node1.isLabelName());
1483:       assertFalse(node1.isExprResult());
1484:       assertFalse(node1.isInstanceOf());
1485:       assertFalse(node1.isGetElem());
1486:       assertFalse(node1.isCast());
1487:       assertFalse(node1.isReturn());
1488:       assertFalse(node1.isComma());
1489:       assertFalse(node1.isThis());
1490:       assertFalse(node1.isAnd());
1491:       assertFalse(node1.isWhile());
1492:       assertFalse(node1.isNumber());
1493:       assertFalse(node1.isNot());
1494:       assertFalse(node1.isObjectLit());
1495:       assertFalse(node1.isGetProp());
1496:       assertFalse(node1.isScript());
1497:       assertFalse(node1.isHook());
1498:       assertFalse(node1.isBlock());
1499:       assertFalse(node1.isThrow());
1500:       assertFalse(node1.isFalse());
1501:       assertEquals(38, node1.getCharno());
1502:       assertFalse(node1.isContinue());
1503:       assertFalse(node1.hasMoreThanOneChild());
1504:       assertEquals(4, node1.getLineno());
1505:       assertFalse(node1.isIn());
1506:       assertFalse(node1.isNE());
1507:       assertFalse(node1.isInc());
1508:       assertFalse(node1.isSetterDef());
1509:       
1510:       Iterable<Node> iterable1 = node1.children();
1511:       assertFalse(iterable1.contains(node0));
1512:       assertEquals(55, Node.INFERRED_FUNCTION);
1513:       assertEquals(4095, Node.COLUMN_MASK);
1514:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1515:       assertEquals(43, Node.IS_CONSTANT_NAME);
1516:       assertEquals(48, Node.DIRECTIVES);
1517:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1518:       assertEquals(40, Node.ORIGINALNAME_PROP);
1519:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1520:       assertEquals(50, Node.FREE_CALL);
1521:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1522:       assertEquals(54, Node.SLASH_V);
1523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1524:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1526:       assertEquals(1, Node.DECR_FLAG);
1527:       assertEquals(32, Node.INCRDECR_PROP);
1528:       assertEquals(30, Node.VAR_ARGS_NAME);
1529:       assertEquals(46, Node.IS_NAMESPACE);
1530:       assertEquals(12, Node.COLUMN_BITS);
1531:       assertEquals(2, Node.POST_FLAG);
1532:       assertEquals(37, Node.OPT_ARG_NAME);
1533:       assertEquals(56, Node.CHANGE_TIME);
1534:       assertEquals(49, Node.DIRECT_EVAL);
1535:       assertEquals(47, Node.IS_DISPATCHER);
1536:       assertEquals(57, Node.REFLECTED_OBJECT);
1537:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1538:       assertEquals(39, Node.EMPTY_BLOCK);
1539:       assertEquals(36, Node.QUOTED_PROP);
1540:       assertEquals(57, Node.LAST_PROP);
1541:       assertEquals(8, Node.FLAG_NO_THROWS);
1542:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1543:       assertEquals(29, Node.JSDOC_INFO_PROP);
1544:       assertEquals(52, Node.LENGTH);
1545:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1546:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1547:       assertEquals(53, Node.INPUT_ID);
1548:       assertSame(iterable1, iterable0);
1549:       assertNotNull(iterable1);
1550:       assertFalse(node1.equals((Object)node2));
1551:       assertFalse(node1.equals((Object)node0));
1552:       assertFalse(node1.isVoid());
1553:       assertFalse(node1.isTry());
1554:       assertFalse(node1.isTrue());
1555:       assertFalse(node1.isDebugger());
1556:       assertFalse(node1.isFor());
1557:       assertFalse(node1.isIf());
1558:       assertFalse(node1.isDelProp());
1559:       assertFalse(node1.isRegExp());
1560:       assertFalse(node1.isFunction());
1561:       assertFalse(node1.isCatch());
1562:       assertFalse(node1.isArrayLit());
1563:       assertFalse(node1.isParamList());
1564:       assertFalse(node1.isString());
1565:       assertFalse(node1.isCase());
1566:       assertEquals(16422, node1.getSourcePosition());
1567:       assertFalse(node1.isGetterDef());
1568:       assertFalse(node1.isNew());
1569:       assertFalse(node1.isSwitch());
1570:       assertFalse(node1.isStringKey());
1571:       assertFalse(node1.isVar());
1572:       assertFalse(node1.isBreak());
1573:       assertFalse(node1.isName());
1574:       assertFalse(node1.isCall());
1575:       assertEquals(0, node1.getType());
1576:       assertFalse(node1.isAssignAdd());
1577:       assertFalse(node1.isLabel());
1578:       assertEquals(0, node1.getChildCount());
1579:       assertFalse(node1.isOr());
1580:       assertFalse(node1.isNull());
1581:       assertFalse(node1.isDefaultCase());
1582:       assertFalse(node1.isDo());
1583:       assertFalse(node1.isEmpty());
1584:       assertFalse(node1.isAdd());
1585:       assertFalse(node1.hasOneChild());
1586:       assertFalse(node1.isWith());
1587:       assertFalse(node1.hasChildren());
1588:       assertFalse(node1.isDec());
1589:       assertFalse(node1.isTypeOf());
1590:       assertFalse(node1.isAssign());
1591:       assertFalse(node1.isLabelName());
1592:       assertFalse(node1.isExprResult());
1593:       assertFalse(node1.isInstanceOf());
1594:       assertFalse(node1.isGetElem());
1595:       assertFalse(node1.isCast());
1596:       assertFalse(node1.isReturn());
1597:       assertFalse(node1.isComma());
1598:       assertFalse(node1.isThis());
1599:       assertFalse(node1.isAnd());
1600:       assertFalse(node1.isWhile());
1601:       assertFalse(node1.isNumber());
1602:       assertFalse(node1.isNot());
1603:       assertFalse(node1.isObjectLit());
1604:       assertFalse(node1.isGetProp());
1605:       assertFalse(node1.isScript());
1606:       assertFalse(node1.isHook());
1607:       assertFalse(node1.isBlock());
1608:       assertFalse(node1.isThrow());
1609:       assertFalse(node1.isFalse());
1610:       assertEquals(38, node1.getCharno());
1611:       assertFalse(node1.isContinue());
1612:       assertFalse(node1.hasMoreThanOneChild());
1613:       assertEquals(4, node1.getLineno());
1614:       assertFalse(node1.isIn());
1615:       assertFalse(node1.isNE());
1616:       assertFalse(node1.isInc());
1617:       assertFalse(node1.isSetterDef());
1618:       
1619:       boolean boolean4 = node1.isNoSideEffectsCall();
1620:       assertFalse(boolean4);
1621:       assertEquals(55, Node.INFERRED_FUNCTION);
1622:       assertEquals(4095, Node.COLUMN_MASK);
1623:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1624:       assertEquals(43, Node.IS_CONSTANT_NAME);
1625:       assertEquals(48, Node.DIRECTIVES);
1626:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1627:       assertEquals(40, Node.ORIGINALNAME_PROP);
1628:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1629:       assertEquals(50, Node.FREE_CALL);
1630:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1631:       assertEquals(54, Node.SLASH_V);
1632:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1633:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1634:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1635:       assertEquals(1, Node.DECR_FLAG);
1636:       assertEquals(32, Node.INCRDECR_PROP);
1637:       assertEquals(30, Node.VAR_ARGS_NAME);
1638:       assertEquals(46, Node.IS_NAMESPACE);
1639:       assertEquals(12, Node.COLUMN_BITS);
1640:       assertEquals(2, Node.POST_FLAG);
1641:       assertEquals(37, Node.OPT_ARG_NAME);
1642:       assertEquals(56, Node.CHANGE_TIME);
1643:       assertEquals(49, Node.DIRECT_EVAL);
1644:       assertEquals(47, Node.IS_DISPATCHER);
1645:       assertEquals(57, Node.REFLECTED_OBJECT);
1646:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1647:       assertEquals(39, Node.EMPTY_BLOCK);
1648:       assertEquals(36, Node.QUOTED_PROP);
1649:       assertEquals(57, Node.LAST_PROP);
1650:       assertEquals(8, Node.FLAG_NO_THROWS);
1651:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1652:       assertEquals(29, Node.JSDOC_INFO_PROP);
1653:       assertEquals(52, Node.LENGTH);
1654:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1655:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1656:       assertEquals(53, Node.INPUT_ID);
1657:       assertFalse(node1.equals((Object)node2));
1658:       assertFalse(node1.equals((Object)node0));
1659:       assertTrue(boolean4 == boolean2);
1660:       assertTrue(boolean4 == boolean3);
1661:       assertTrue(boolean4 == boolean0);
1662:       assertTrue(boolean4 == boolean1);
1663:       assertFalse(node1.isVoid());
1664:       assertFalse(node1.isTry());
1665:       assertFalse(node1.isTrue());
1666:       assertFalse(node1.isDebugger());
1667:       assertFalse(node1.isFor());
1668:       assertFalse(node1.isIf());
1669:       assertFalse(node1.isDelProp());
1670:       assertFalse(node1.isRegExp());
1671:       assertFalse(node1.isFunction());
1672:       assertFalse(node1.isCatch());
1673:       assertFalse(node1.isArrayLit());
1674:       assertFalse(node1.isParamList());
1675:       assertFalse(node1.isString());
1676:       assertFalse(node1.isCase());
1677:       assertEquals(16422, node1.getSourcePosition());
1678:       assertFalse(node1.isGetterDef());
1679:       assertFalse(node1.isNew());
1680:       assertFalse(node1.isSwitch());
1681:       assertFalse(node1.isStringKey());
1682:       assertFalse(node1.isVar());
1683:       assertFalse(node1.isBreak());
1684:       assertFalse(node1.isName());
1685:       assertFalse(node1.isCall());
1686:       assertEquals(0, node1.getType());
1687:       assertFalse(node1.isAssignAdd());
1688:       assertFalse(node1.isLabel());
1689:       assertEquals(0, node1.getChildCount());
1690:       assertFalse(node1.isOr());
1691:       assertFalse(node1.isNull());
1692:       assertFalse(node1.isDefaultCase());
1693:       assertFalse(node1.isDo());
1694:       assertFalse(node1.isEmpty());
1695:       assertFalse(node1.isAdd());
1696:       assertFalse(node1.hasOneChild());
1697:       assertFalse(node1.isWith());
1698:       assertFalse(node1.hasChildren());
1699:       assertFalse(node1.isDec());
1700:       assertFalse(node1.isTypeOf());
1701:       assertFalse(node1.isAssign());
1702:       assertFalse(node1.isLabelName());
1703:       assertFalse(node1.isExprResult());
1704:       assertFalse(node1.isInstanceOf());
1705:       assertFalse(node1.isGetElem());
1706:       assertFalse(node1.isCast());
1707:       assertFalse(node1.isReturn());
1708:       assertFalse(node1.isComma());
1709:       assertFalse(node1.isThis());
1710:       assertFalse(node1.isAnd());
1711:       assertFalse(node1.isWhile());
1712:       assertFalse(node1.isNumber());
1713:       assertFalse(node1.isNot());
1714:       assertFalse(node1.isObjectLit());
1715:       assertFalse(node1.isGetProp());
1716:       assertFalse(node1.isScript());
1717:       assertFalse(node1.isHook());
1718:       assertFalse(node1.isBlock());
1719:       assertFalse(node1.isThrow());
1720:       assertFalse(node1.isFalse());
1721:       assertEquals(38, node1.getCharno());
1722:       assertFalse(node1.isContinue());
1723:       assertFalse(node1.hasMoreThanOneChild());
1724:       assertEquals(4, node1.getLineno());
1725:       assertFalse(node1.isIn());
1726:       assertFalse(node1.isNE());
1727:       assertFalse(node1.isInc());
1728:       assertFalse(node1.isSetterDef());
1729:       
1730:       int int0 = node0.getCharno();
1731:       assertEquals((-1), int0);
1732:       assertEquals(43, Node.IS_CONSTANT_NAME);
1733:       assertEquals(36, Node.QUOTED_PROP);
1734:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1735:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1736:       assertEquals(4095, Node.COLUMN_MASK);
1737:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1738:       assertEquals(32, Node.INCRDECR_PROP);
1739:       assertEquals(46, Node.IS_NAMESPACE);
1740:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1741:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1742:       assertEquals(50, Node.FREE_CALL);
1743:       assertEquals(57, Node.LAST_PROP);
1744:       assertEquals(30, Node.VAR_ARGS_NAME);
1745:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1746:       assertEquals(54, Node.SLASH_V);
1747:       assertEquals(1, Node.DECR_FLAG);
1748:       assertEquals(49, Node.DIRECT_EVAL);
1749:       assertEquals(12, Node.COLUMN_BITS);
1750:       assertEquals(40, Node.ORIGINALNAME_PROP);
1751:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1752:       assertEquals(2, Node.POST_FLAG);
1753:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1754:       assertEquals(56, Node.CHANGE_TIME);
1755:       assertEquals(29, Node.JSDOC_INFO_PROP);
1756:       assertEquals(39, Node.EMPTY_BLOCK);
1757:       assertEquals(47, Node.IS_DISPATCHER);
1758:       assertEquals(37, Node.OPT_ARG_NAME);
1759:       assertEquals(48, Node.DIRECTIVES);
1760:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1761:       assertEquals(53, Node.INPUT_ID);
1762:       assertEquals(57, Node.REFLECTED_OBJECT);
1763:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1764:       assertEquals(55, Node.INFERRED_FUNCTION);
1765:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1766:       assertEquals(52, Node.LENGTH);
1767:       assertEquals(8, Node.FLAG_NO_THROWS);
1768:       assertNotSame(node0, node2);
1769:       assertFalse(node0.equals((Object)node2));
1770:       assertFalse(node0.equals((Object)node1));
1771:       assertFalse(node0.isGetElem());
1772:       assertFalse(node0.isCast());
1773:       assertFalse(node0.hasOneChild());
1774:       assertFalse(node0.isLabelName());
1775:       assertFalse(node0.isLabel());
1776:       assertFalse(node0.isReturn());
1777:       assertFalse(node0.isExprResult());
1778:       assertFalse(node0.isDec());
1779:       assertFalse(node0.hasChildren());
1780:       assertFalse(node0.isAssign());
1781:       assertFalse(node0.hasMoreThanOneChild());
1782:       assertFalse(node0.isWith());
1783:       assertFalse(node0.isTypeOf());
1784:       assertFalse(node0.isAnd());
1785:       assertFalse(node0.isContinue());
1786:       assertEquals(39, node0.getType());
1787:       assertFalse(node0.isWhile());
1788:       assertFalse(node0.isGetProp());
1789:       assertFalse(node0.isScript());
1790:       assertEquals((-1), node0.getSourcePosition());
1791:       assertFalse(node0.isNot());
1792:       assertFalse(node0.isObjectLit());
1793:       assertFalse(node0.isThrow());
1794:       assertFalse(node0.isFalse());
1795:       assertFalse(node0.isThis());
1796:       assertFalse(node0.isBlock());
1797:       assertFalse(node0.isHook());
1798:       assertFalse(node0.isInstanceOf());
1799:       assertFalse(node0.isCatch());
1800:       assertEquals((-1), node0.getLineno());
1801:       assertFalse(node0.isNE());
1802:       assertFalse(node0.isInc());
1803:       assertFalse(node0.isSetterDef());
1804:       assertFalse(node0.isIn());
1805:       assertFalse(node0.isEmpty());
1806:       assertFalse(node0.isFor());
1807:       assertFalse(node0.isIf());
1808:       assertFalse(node0.isArrayLit());
1809:       assertFalse(node0.isDelProp());
1810:       assertFalse(node0.isTry());
1811:       assertFalse(node0.isFunction());
1812:       assertFalse(node0.isRegExp());
1813:       assertFalse(node0.isCase());
1814:       assertFalse(node0.isSwitch());
1815:       assertTrue(node0.isNumber());
1816:       assertFalse(node0.isDebugger());
1817:       assertEquals((-1), node0.getCharno());
1818:       assertFalse(node0.isParamList());
1819:       assertFalse(node0.isString());
1820:       assertFalse(node0.isGetterDef());
1821:       assertFalse(node0.isStringKey());
1822:       assertFalse(node0.isVar());
1823:       assertFalse(node0.isCall());
1824:       assertFalse(node0.isBreak());
1825:       assertFalse(node0.isName());
1826:       assertEquals(0, node0.getChildCount());
1827:       assertFalse(node0.isComma());
1828:       assertFalse(node0.isDefaultCase());
1829:       assertFalse(node0.isAssignAdd());
1830:       assertFalse(node0.isDo());
1831:       assertFalse(node0.isVoid());
1832:       assertFalse(node0.isNew());
1833:       assertFalse(node0.isTrue());
1834:       assertFalse(node0.isNull());
1835:       assertFalse(node0.isAdd());
1836:       assertFalse(node0.isOr());
1837:   }
1838: }
RegularFileObject[/tmp/EvoSuite_144_1628157885738/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:46 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_144_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_144_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_144_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:46.149 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node0);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());

Node node1 = Node.newString(0, "", 4, 38);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(0, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(38, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(0, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(38, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

boolean boolean0 = node_NodeMismatch0.equals("");
assertFalse(boolean0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(0, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(38, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

Node node2 = Node.newNumber((double) 0, 1, 42);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node2, node0);
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertTrue(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertEquals(4138, node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isIf());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals(42, node2.getCharno());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertEquals(1, node2.getLineno());

boolean boolean1 = node2.isEquivalentTo(node1, false, true, true);
assertFalse(boolean1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node2, node0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(0, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(38, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertTrue(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertEquals(4138, node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isIf());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals(42, node2.getCharno());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertEquals(1, node2.getLineno());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node0, node2);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());

boolean boolean2 = node1.isIf();
assertFalse(boolean2);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(0, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(38, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

boolean boolean3 = node1.isEquivalentTo(node2);
assertFalse(boolean3);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node2, node0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(0, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(38, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertTrue(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertEquals(4138, node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isIf());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDo());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals(42, node2.getCharno());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isAssign());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertEquals(1, node2.getLineno());

node1.setInputId((InputId) null);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(0, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(38, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

Iterable<Node> iterable1 = node1.children();
assertFalse(iterable1.contains(node0));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertSame(iterable1, iterable0);
assertNotNull(iterable1);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(0, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(38, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

boolean boolean4 = node1.isNoSideEffectsCall();
assertFalse(boolean4);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(0, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(38, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(4, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

int int0 = node0.getCharno();
assertEquals((-1), int0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node0, node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());


[MASTER] 10:04:46.407 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_147_1628157886236/com/google/javascript/rhino/Node_147_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_147_1628157886236/com/google/javascript/rhino/Node_147_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:46.407 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:46.407 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:46.407 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 868
[MASTER] 10:04:46.408 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_147_1628157886236/com/google/javascript/rhino/Node_147_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:46 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_147_tmp__ESTest extends Node_147_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1078.87509966889, (-2786), (-2786));
22:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
23:       assertEquals(39, Node.EMPTY_BLOCK);
24:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
25:       assertEquals(48, Node.DIRECTIVES);
26:       assertEquals(4095, Node.COLUMN_MASK);
27:       assertEquals(40, Node.ORIGINALNAME_PROP);
28:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
29:       assertEquals(15, Node.NO_SIDE_EFFECTS);
30:       assertEquals(36, Node.QUOTED_PROP);
31:       assertEquals(57, Node.LAST_PROP);
32:       assertEquals(53, Node.INPUT_ID);
33:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
34:       assertEquals(49, Node.DIRECT_EVAL);
35:       assertEquals(57, Node.REFLECTED_OBJECT);
36:       assertEquals(55, Node.INFERRED_FUNCTION);
37:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
38:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
39:       assertEquals(52, Node.LENGTH);
40:       assertEquals(8, Node.FLAG_NO_THROWS);
41:       assertEquals(56, Node.CHANGE_TIME);
42:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
43:       assertEquals(47, Node.IS_DISPATCHER);
44:       assertEquals(29, Node.JSDOC_INFO_PROP);
45:       assertEquals(37, Node.OPT_ARG_NAME);
46:       assertEquals(32, Node.INCRDECR_PROP);
47:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
48:       assertEquals(12, Node.COLUMN_BITS);
49:       assertEquals(2, Node.POST_FLAG);
50:       assertEquals(30, Node.VAR_ARGS_NAME);
51:       assertEquals(43, Node.IS_CONSTANT_NAME);
52:       assertEquals(54, Node.SLASH_V);
53:       assertEquals(1, Node.DECR_FLAG);
54:       assertEquals(51, Node.STATIC_SOURCE_FILE);
55:       assertEquals(46, Node.IS_NAMESPACE);
56:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
57:       assertEquals(50, Node.FREE_CALL);
58:       assertNotNull(node0);
59:       assertFalse(node0.isCatch());
60:       assertFalse(node0.isDefaultCase());
61:       assertFalse(node0.isVoid());
62:       assertFalse(node0.isTry());
63:       assertFalse(node0.isRegExp());
64:       assertFalse(node0.isFunction());
65:       assertEquals(0, node0.getChildCount());
66:       assertFalse(node0.isEmpty());
67:       assertFalse(node0.isName());
68:       assertFalse(node0.isCall());
69:       assertFalse(node0.isIf());
70:       assertFalse(node0.isSetterDef());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.isIn());
74:       assertFalse(node0.isTrue());
75:       assertFalse(node0.isNE());
76:       assertFalse(node0.isNull());
77:       assertFalse(node0.isString());
78:       assertFalse(node0.isContinue());
79:       assertFalse(node0.isWhile());
80:       assertFalse(node0.isInc());
81:       assertTrue(node0.isNumber());
82:       assertFalse(node0.isReturn());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.hasChildren());
85:       assertFalse(node0.isDec());
86:       assertFalse(node0.isFalse());
87:       assertFalse(node0.isCast());
88:       assertFalse(node0.isGetProp());
89:       assertFalse(node0.isDebugger());
90:       assertFalse(node0.isObjectLit());
91:       assertEquals((-1), node0.getSourcePosition());
92:       assertFalse(node0.isNot());
93:       assertFalse(node0.isWith());
94:       assertFalse(node0.isAnd());
95:       assertFalse(node0.isScript());
96:       assertFalse(node0.isExprResult());
97:       assertFalse(node0.isInstanceOf());
98:       assertFalse(node0.isThis());
99:       assertFalse(node0.isComma());
100:       assertFalse(node0.isAssign());
101:       assertFalse(node0.isGetElem());
102:       assertFalse(node0.isThrow());
103:       assertFalse(node0.isBreak());
104:       assertFalse(node0.isOr());
105:       assertFalse(node0.isDo());
106:       assertFalse(node0.isCase());
107:       assertEquals(39, node0.getType());
108:       assertFalse(node0.isSwitch());
109:       assertFalse(node0.isNew());
110:       assertEquals((-1), node0.getLineno());
111:       assertFalse(node0.isAssignAdd());
112:       assertFalse(node0.isLabel());
113:       assertFalse(node0.isBlock());
114:       assertFalse(node0.isVar());
115:       assertFalse(node0.isHook());
116:       assertFalse(node0.hasMoreThanOneChild());
117:       assertFalse(node0.isFor());
118:       assertFalse(node0.isLabelName());
119:       assertFalse(node0.isStringKey());
120:       assertFalse(node0.isArrayLit());
121:       assertFalse(node0.hasOneChild());
122:       assertFalse(node0.isParamList());
123:       assertEquals((-1), node0.getCharno());
124:       assertFalse(node0.isGetterDef());
125:       
126:       boolean boolean0 = node0.isContinue();
127:       assertFalse(boolean0);
128:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
129:       assertEquals(39, Node.EMPTY_BLOCK);
130:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
131:       assertEquals(48, Node.DIRECTIVES);
132:       assertEquals(4095, Node.COLUMN_MASK);
133:       assertEquals(40, Node.ORIGINALNAME_PROP);
134:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
136:       assertEquals(36, Node.QUOTED_PROP);
137:       assertEquals(57, Node.LAST_PROP);
138:       assertEquals(53, Node.INPUT_ID);
139:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
140:       assertEquals(49, Node.DIRECT_EVAL);
141:       assertEquals(57, Node.REFLECTED_OBJECT);
142:       assertEquals(55, Node.INFERRED_FUNCTION);
143:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
144:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
145:       assertEquals(52, Node.LENGTH);
146:       assertEquals(8, Node.FLAG_NO_THROWS);
147:       assertEquals(56, Node.CHANGE_TIME);
148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
149:       assertEquals(47, Node.IS_DISPATCHER);
150:       assertEquals(29, Node.JSDOC_INFO_PROP);
151:       assertEquals(37, Node.OPT_ARG_NAME);
152:       assertEquals(32, Node.INCRDECR_PROP);
153:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
154:       assertEquals(12, Node.COLUMN_BITS);
155:       assertEquals(2, Node.POST_FLAG);
156:       assertEquals(30, Node.VAR_ARGS_NAME);
157:       assertEquals(43, Node.IS_CONSTANT_NAME);
158:       assertEquals(54, Node.SLASH_V);
159:       assertEquals(1, Node.DECR_FLAG);
160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
161:       assertEquals(46, Node.IS_NAMESPACE);
162:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
163:       assertEquals(50, Node.FREE_CALL);
164:       assertFalse(node0.isCatch());
165:       assertFalse(node0.isDefaultCase());
166:       assertFalse(node0.isVoid());
167:       assertFalse(node0.isTry());
168:       assertFalse(node0.isRegExp());
169:       assertFalse(node0.isFunction());
170:       assertEquals(0, node0.getChildCount());
171:       assertFalse(node0.isEmpty());
172:       assertFalse(node0.isName());
173:       assertFalse(node0.isCall());
174:       assertFalse(node0.isIf());
175:       assertFalse(node0.isSetterDef());
176:       assertFalse(node0.isDelProp());
177:       assertFalse(node0.isAdd());
178:       assertFalse(node0.isIn());
179:       assertFalse(node0.isTrue());
180:       assertFalse(node0.isNE());
181:       assertFalse(node0.isNull());
182:       assertFalse(node0.isString());
183:       assertFalse(node0.isContinue());
184:       assertFalse(node0.isWhile());
185:       assertFalse(node0.isInc());
186:       assertTrue(node0.isNumber());
187:       assertFalse(node0.isReturn());
188:       assertFalse(node0.isTypeOf());
189:       assertFalse(node0.hasChildren());
190:       assertFalse(node0.isDec());
191:       assertFalse(node0.isFalse());
192:       assertFalse(node0.isCast());
193:       assertFalse(node0.isGetProp());
194:       assertFalse(node0.isDebugger());
195:       assertFalse(node0.isObjectLit());
196:       assertEquals((-1), node0.getSourcePosition());
197:       assertFalse(node0.isNot());
198:       assertFalse(node0.isWith());
199:       assertFalse(node0.isAnd());
200:       assertFalse(node0.isScript());
201:       assertFalse(node0.isExprResult());
202:       assertFalse(node0.isInstanceOf());
203:       assertFalse(node0.isThis());
204:       assertFalse(node0.isComma());
205:       assertFalse(node0.isAssign());
206:       assertFalse(node0.isGetElem());
207:       assertFalse(node0.isThrow());
208:       assertFalse(node0.isBreak());
209:       assertFalse(node0.isOr());
210:       assertFalse(node0.isDo());
211:       assertFalse(node0.isCase());
212:       assertEquals(39, node0.getType());
213:       assertFalse(node0.isSwitch());
214:       assertFalse(node0.isNew());
215:       assertEquals((-1), node0.getLineno());
216:       assertFalse(node0.isAssignAdd());
217:       assertFalse(node0.isLabel());
218:       assertFalse(node0.isBlock());
219:       assertFalse(node0.isVar());
220:       assertFalse(node0.isHook());
221:       assertFalse(node0.hasMoreThanOneChild());
222:       assertFalse(node0.isFor());
223:       assertFalse(node0.isLabelName());
224:       assertFalse(node0.isStringKey());
225:       assertFalse(node0.isArrayLit());
226:       assertFalse(node0.hasOneChild());
227:       assertFalse(node0.isParamList());
228:       assertEquals((-1), node0.getCharno());
229:       assertFalse(node0.isGetterDef());
230:       
231:       Node node1 = Node.newString(47, "The new child node has siblings.", 38, 4);
232:       assertEquals(40, Node.ORIGINALNAME_PROP);
233:       assertEquals(57, Node.REFLECTED_OBJECT);
234:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
236:       assertEquals(52, Node.LENGTH);
237:       assertEquals(50, Node.FREE_CALL);
238:       assertEquals(8, Node.FLAG_NO_THROWS);
239:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
241:       assertEquals(39, Node.EMPTY_BLOCK);
242:       assertEquals(15, Node.NO_SIDE_EFFECTS);
243:       assertEquals(57, Node.LAST_PROP);
244:       assertEquals(1, Node.DECR_FLAG);
245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
246:       assertEquals(30, Node.VAR_ARGS_NAME);
247:       assertEquals(54, Node.SLASH_V);
248:       assertEquals(46, Node.IS_NAMESPACE);
249:       assertEquals(43, Node.IS_CONSTANT_NAME);
250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
251:       assertEquals(29, Node.JSDOC_INFO_PROP);
252:       assertEquals(47, Node.IS_DISPATCHER);
253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
256:       assertEquals(53, Node.INPUT_ID);
257:       assertEquals(32, Node.INCRDECR_PROP);
258:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
259:       assertEquals(55, Node.INFERRED_FUNCTION);
260:       assertEquals(12, Node.COLUMN_BITS);
261:       assertEquals(36, Node.QUOTED_PROP);
262:       assertEquals(4095, Node.COLUMN_MASK);
263:       assertEquals(48, Node.DIRECTIVES);
264:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
265:       assertEquals(37, Node.OPT_ARG_NAME);
266:       assertEquals(56, Node.CHANGE_TIME);
267:       assertEquals(49, Node.DIRECT_EVAL);
268:       assertNotNull(node1);
269:       assertFalse(node1.equals((Object)node0));
270:       assertFalse(node1.isInstanceOf());
271:       assertFalse(node1.isComma());
272:       assertFalse(node1.isWith());
273:       assertFalse(node1.isNot());
274:       assertFalse(node1.isObjectLit());
275:       assertFalse(node1.isThis());
276:       assertFalse(node1.isScript());
277:       assertFalse(node1.isGetProp());
278:       assertFalse(node1.hasOneChild());
279:       assertFalse(node1.isThrow());
280:       assertFalse(node1.isCast());
281:       assertFalse(node1.isFalse());
282:       assertFalse(node1.isAnd());
283:       assertFalse(node1.isSwitch());
284:       assertFalse(node1.isLabelName());
285:       assertFalse(node1.isReturn());
286:       assertFalse(node1.isLabel());
287:       assertFalse(node1.isOr());
288:       assertFalse(node1.isDec());
289:       assertFalse(node1.hasChildren());
290:       assertFalse(node1.isWhile());
291:       assertFalse(node1.isString());
292:       assertFalse(node1.isEmpty());
293:       assertFalse(node1.isNew());
294:       assertFalse(node1.isAssignAdd());
295:       assertFalse(node1.isDo());
296:       assertTrue(node1.isRegExp());
297:       assertFalse(node1.isCall());
298:       assertFalse(node1.isAdd());
299:       assertFalse(node1.isAssign());
300:       assertEquals(38, node1.getLineno());
301:       assertFalse(node1.isTypeOf());
302:       assertFalse(node1.isNull());
303:       assertFalse(node1.isBreak());
304:       assertFalse(node1.isExprResult());
305:       assertFalse(node1.isTrue());
306:       assertFalse(node1.isGetElem());
307:       assertFalse(node1.isName());
308:       assertFalse(node1.isDelProp());
309:       assertFalse(node1.isVoid());
310:       assertFalse(node1.isCatch());
311:       assertEquals(0, node1.getChildCount());
312:       assertFalse(node1.isDefaultCase());
313:       assertFalse(node1.isSetterDef());
314:       assertFalse(node1.isTry());
315:       assertFalse(node1.isArrayLit());
316:       assertFalse(node1.isVar());
317:       assertFalse(node1.isDebugger());
318:       assertFalse(node1.isFunction());
319:       assertFalse(node1.isGetterDef());
320:       assertFalse(node1.isParamList());
321:       assertFalse(node1.isStringKey());
322:       assertFalse(node1.isIn());
323:       assertFalse(node1.isContinue());
324:       assertFalse(node1.hasMoreThanOneChild());
325:       assertFalse(node1.isNumber());
326:       assertEquals(155652, node1.getSourcePosition());
327:       assertFalse(node1.isInc());
328:       assertFalse(node1.isFor());
329:       assertFalse(node1.isCase());
330:       assertEquals(47, node1.getType());
331:       assertFalse(node1.isHook());
332:       assertFalse(node1.isBlock());
333:       assertFalse(node1.isIf());
334:       assertFalse(node1.isNE());
335:       assertEquals(4, node1.getCharno());
336:       
337:       Node node2 = new Node(57, node0, node1, node1, node0, 1023, 799);
338:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
339:       assertEquals(39, Node.EMPTY_BLOCK);
340:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
341:       assertEquals(48, Node.DIRECTIVES);
342:       assertEquals(4095, Node.COLUMN_MASK);
343:       assertEquals(40, Node.ORIGINALNAME_PROP);
344:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
346:       assertEquals(36, Node.QUOTED_PROP);
347:       assertEquals(57, Node.LAST_PROP);
348:       assertEquals(53, Node.INPUT_ID);
349:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
350:       assertEquals(49, Node.DIRECT_EVAL);
351:       assertEquals(57, Node.REFLECTED_OBJECT);
352:       assertEquals(55, Node.INFERRED_FUNCTION);
353:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
354:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
355:       assertEquals(52, Node.LENGTH);
356:       assertEquals(8, Node.FLAG_NO_THROWS);
357:       assertEquals(56, Node.CHANGE_TIME);
358:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
359:       assertEquals(47, Node.IS_DISPATCHER);
360:       assertEquals(29, Node.JSDOC_INFO_PROP);
361:       assertEquals(37, Node.OPT_ARG_NAME);
362:       assertEquals(32, Node.INCRDECR_PROP);
363:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
364:       assertEquals(12, Node.COLUMN_BITS);
365:       assertEquals(2, Node.POST_FLAG);
366:       assertEquals(30, Node.VAR_ARGS_NAME);
367:       assertEquals(43, Node.IS_CONSTANT_NAME);
368:       assertEquals(54, Node.SLASH_V);
369:       assertEquals(1, Node.DECR_FLAG);
370:       assertEquals(51, Node.STATIC_SOURCE_FILE);
371:       assertEquals(46, Node.IS_NAMESPACE);
372:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
373:       assertEquals(50, Node.FREE_CALL);
374:       assertEquals(40, Node.ORIGINALNAME_PROP);
375:       assertEquals(57, Node.REFLECTED_OBJECT);
376:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
377:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
378:       assertEquals(52, Node.LENGTH);
379:       assertEquals(50, Node.FREE_CALL);
380:       assertEquals(8, Node.FLAG_NO_THROWS);
381:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
382:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
383:       assertEquals(39, Node.EMPTY_BLOCK);
384:       assertEquals(15, Node.NO_SIDE_EFFECTS);
385:       assertEquals(57, Node.LAST_PROP);
386:       assertEquals(1, Node.DECR_FLAG);
387:       assertEquals(51, Node.STATIC_SOURCE_FILE);
388:       assertEquals(30, Node.VAR_ARGS_NAME);
389:       assertEquals(54, Node.SLASH_V);
390:       assertEquals(46, Node.IS_NAMESPACE);
391:       assertEquals(43, Node.IS_CONSTANT_NAME);
392:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
393:       assertEquals(29, Node.JSDOC_INFO_PROP);
394:       assertEquals(47, Node.IS_DISPATCHER);
395:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
396:       assertEquals(2, Node.POST_FLAG);
397:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
398:       assertEquals(53, Node.INPUT_ID);
399:       assertEquals(32, Node.INCRDECR_PROP);
400:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
401:       assertEquals(55, Node.INFERRED_FUNCTION);
402:       assertEquals(12, Node.COLUMN_BITS);
403:       assertEquals(36, Node.QUOTED_PROP);
404:       assertEquals(4095, Node.COLUMN_MASK);
405:       assertEquals(48, Node.DIRECTIVES);
406:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
407:       assertEquals(37, Node.OPT_ARG_NAME);
408:       assertEquals(56, Node.CHANGE_TIME);
409:       assertEquals(49, Node.DIRECT_EVAL);
410:       assertEquals(53, Node.INPUT_ID);
411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
412:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
413:       assertEquals(36, Node.QUOTED_PROP);
414:       assertEquals(43, Node.IS_CONSTANT_NAME);
415:       assertEquals(56, Node.CHANGE_TIME);
416:       assertEquals(37, Node.OPT_ARG_NAME);
417:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
418:       assertEquals(2, Node.POST_FLAG);
419:       assertEquals(8, Node.FLAG_NO_THROWS);
420:       assertEquals(47, Node.IS_DISPATCHER);
421:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
422:       assertEquals(29, Node.JSDOC_INFO_PROP);
423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
424:       assertEquals(57, Node.LAST_PROP);
425:       assertEquals(55, Node.INFERRED_FUNCTION);
426:       assertEquals(39, Node.EMPTY_BLOCK);
427:       assertEquals(15, Node.NO_SIDE_EFFECTS);
428:       assertEquals(52, Node.LENGTH);
429:       assertEquals(54, Node.SLASH_V);
430:       assertEquals(57, Node.REFLECTED_OBJECT);
431:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
432:       assertEquals(30, Node.VAR_ARGS_NAME);
433:       assertEquals(49, Node.DIRECT_EVAL);
434:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
435:       assertEquals(40, Node.ORIGINALNAME_PROP);
436:       assertEquals(48, Node.DIRECTIVES);
437:       assertEquals(46, Node.IS_NAMESPACE);
438:       assertEquals(4095, Node.COLUMN_MASK);
439:       assertEquals(12, Node.COLUMN_BITS);
440:       assertEquals(51, Node.STATIC_SOURCE_FILE);
441:       assertEquals(50, Node.FREE_CALL);
442:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
443:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
444:       assertEquals(32, Node.INCRDECR_PROP);
445:       assertEquals(1, Node.DECR_FLAG);
446:       assertNotNull(node2);
447:       assertFalse(node0.equals((Object)node1));
448:       assertFalse(node1.equals((Object)node0));
449:       assertFalse(node2.equals((Object)node0));
450:       assertFalse(node2.equals((Object)node1));
451:       assertFalse(node0.isCatch());
452:       assertFalse(node0.isDefaultCase());
453:       assertFalse(node0.isVoid());
454:       assertFalse(node0.isTry());
455:       assertFalse(node0.isRegExp());
456:       assertFalse(node0.isFunction());
457:       assertEquals(0, node0.getChildCount());
458:       assertFalse(node0.isEmpty());
459:       assertFalse(node0.isName());
460:       assertFalse(node0.isCall());
461:       assertFalse(node0.isIf());
462:       assertFalse(node0.isSetterDef());
463:       assertFalse(node0.isDelProp());
464:       assertFalse(node0.isAdd());
465:       assertFalse(node0.isIn());
466:       assertFalse(node0.isTrue());
467:       assertFalse(node0.isNE());
468:       assertFalse(node0.isNull());
469:       assertFalse(node0.isString());
470:       assertFalse(node0.isContinue());
471:       assertFalse(node0.isWhile());
472:       assertFalse(node0.isInc());
473:       assertTrue(node0.isNumber());
474:       assertFalse(node0.isReturn());
475:       assertFalse(node0.isTypeOf());
476:       assertFalse(node0.hasChildren());
477:       assertFalse(node0.isDec());
478:       assertFalse(node0.isFalse());
479:       assertFalse(node0.isCast());
480:       assertFalse(node0.isGetProp());
481:       assertFalse(node0.isDebugger());
482:       assertFalse(node0.isObjectLit());
483:       assertEquals((-1), node0.getSourcePosition());
484:       assertFalse(node0.isNot());
485:       assertFalse(node0.isWith());
486:       assertFalse(node0.isAnd());
487:       assertFalse(node0.isScript());
488:       assertFalse(node0.isExprResult());
489:       assertFalse(node0.isInstanceOf());
490:       assertFalse(node0.isThis());
491:       assertFalse(node0.isComma());
492:       assertFalse(node0.isAssign());
493:       assertFalse(node0.isGetElem());
494:       assertFalse(node0.isThrow());
495:       assertFalse(node0.isBreak());
496:       assertFalse(node0.isOr());
497:       assertFalse(node0.isDo());
498:       assertFalse(node0.isCase());
499:       assertEquals(39, node0.getType());
500:       assertFalse(node0.isSwitch());
501:       assertFalse(node0.isNew());
502:       assertEquals((-1), node0.getLineno());
503:       assertFalse(node0.isAssignAdd());
504:       assertFalse(node0.isLabel());
505:       assertFalse(node0.isBlock());
506:       assertFalse(node0.isVar());
507:       assertFalse(node0.isHook());
508:       assertFalse(node0.hasMoreThanOneChild());
509:       assertFalse(node0.isFor());
510:       assertFalse(node0.isLabelName());
511:       assertFalse(node0.isStringKey());
512:       assertFalse(node0.isArrayLit());
513:       assertFalse(node0.hasOneChild());
514:       assertFalse(node0.isParamList());
515:       assertEquals((-1), node0.getCharno());
516:       assertFalse(node0.isGetterDef());
517:       assertFalse(node1.isInstanceOf());
518:       assertFalse(node1.isComma());
519:       assertFalse(node1.isWith());
520:       assertFalse(node1.isNot());
521:       assertFalse(node1.isObjectLit());
522:       assertFalse(node1.isThis());
523:       assertFalse(node1.isScript());
524:       assertFalse(node1.isGetProp());
525:       assertFalse(node1.hasOneChild());
526:       assertFalse(node1.isThrow());
527:       assertFalse(node1.isCast());
528:       assertFalse(node1.isFalse());
529:       assertFalse(node1.isAnd());
530:       assertFalse(node1.isSwitch());
531:       assertFalse(node1.isLabelName());
532:       assertFalse(node1.isReturn());
533:       assertFalse(node1.isLabel());
534:       assertFalse(node1.isOr());
535:       assertFalse(node1.isDec());
536:       assertFalse(node1.hasChildren());
537:       assertFalse(node1.isWhile());
538:       assertFalse(node1.isString());
539:       assertFalse(node1.isEmpty());
540:       assertFalse(node1.isNew());
541:       assertFalse(node1.isAssignAdd());
542:       assertFalse(node1.isDo());
543:       assertTrue(node1.isRegExp());
544:       assertFalse(node1.isCall());
545:       assertFalse(node1.isAdd());
546:       assertFalse(node1.isAssign());
547:       assertEquals(38, node1.getLineno());
548:       assertFalse(node1.isTypeOf());
549:       assertFalse(node1.isNull());
550:       assertFalse(node1.isBreak());
551:       assertFalse(node1.isExprResult());
552:       assertFalse(node1.isTrue());
553:       assertFalse(node1.isGetElem());
554:       assertFalse(node1.isName());
555:       assertFalse(node1.isDelProp());
556:       assertFalse(node1.isVoid());
557:       assertFalse(node1.isCatch());
558:       assertEquals(0, node1.getChildCount());
559:       assertFalse(node1.isDefaultCase());
560:       assertFalse(node1.isSetterDef());
561:       assertFalse(node1.isTry());
562:       assertFalse(node1.isArrayLit());
563:       assertFalse(node1.isVar());
564:       assertFalse(node1.isDebugger());
565:       assertFalse(node1.isFunction());
566:       assertFalse(node1.isGetterDef());
567:       assertFalse(node1.isParamList());
568:       assertFalse(node1.isStringKey());
569:       assertFalse(node1.isIn());
570:       assertFalse(node1.isContinue());
571:       assertFalse(node1.hasMoreThanOneChild());
572:       assertFalse(node1.isNumber());
573:       assertEquals(155652, node1.getSourcePosition());
574:       assertFalse(node1.isInc());
575:       assertFalse(node1.isFor());
576:       assertFalse(node1.isCase());
577:       assertEquals(47, node1.getType());
578:       assertFalse(node1.isHook());
579:       assertFalse(node1.isBlock());
580:       assertFalse(node1.isIf());
581:       assertFalse(node1.isNE());
582:       assertEquals(4, node1.getCharno());
583:       assertFalse(node2.isTypeOf());
584:       assertFalse(node2.isNumber());
585:       assertFalse(node2.isAssignAdd());
586:       assertFalse(node2.isReturn());
587:       assertFalse(node2.isAssign());
588:       assertFalse(node2.isOr());
589:       assertFalse(node2.isDec());
590:       assertFalse(node2.isLabel());
591:       assertFalse(node2.hasMoreThanOneChild());
592:       assertFalse(node2.isCast());
593:       assertFalse(node2.isContinue());
594:       assertEquals(1023, node2.getLineno());
595:       assertFalse(node2.isLabelName());
596:       assertFalse(node2.isGetElem());
597:       assertFalse(node2.isVar());
598:       assertFalse(node2.isDo());
599:       assertFalse(node2.isAdd());
600:       assertFalse(node2.isNew());
601:       assertFalse(node2.isThis());
602:       assertFalse(node2.isSetterDef());
603:       assertFalse(node2.isParamList());
604:       assertFalse(node2.isCatch());
605:       assertFalse(node2.isInstanceOf());
606:       assertFalse(node2.isStringKey());
607:       assertFalse(node2.isSwitch());
608:       assertFalse(node2.isRegExp());
609:       assertFalse(node2.isScript());
610:       assertFalse(node2.isWith());
611:       assertFalse(node2.isHook());
612:       assertFalse(node2.isBlock());
613:       assertFalse(node2.isTry());
614:       assertFalse(node2.isCase());
615:       assertFalse(node2.isNE());
616:       assertFalse(node2.isIf());
617:       assertEquals(1, node2.getChildCount());
618:       assertTrue(node2.hasOneChild());
619:       assertFalse(node2.isFor());
620:       assertFalse(node2.isGetterDef());
621:       assertEquals(57, node2.getType());
622:       assertFalse(node2.isDelProp());
623:       assertTrue(node2.hasChildren());
624:       assertFalse(node2.isArrayLit());
625:       assertFalse(node2.isInc());
626:       assertFalse(node2.isFunction());
627:       assertFalse(node2.isTrue());
628:       assertFalse(node2.isVoid());
629:       assertFalse(node2.isDefaultCase());
630:       assertEquals(799, node2.getCharno());
631:       assertFalse(node2.isThrow());
632:       assertFalse(node2.isIn());
633:       assertFalse(node2.isEmpty());
634:       assertFalse(node2.isComma());
635:       assertEquals(4191007, node2.getSourcePosition());
636:       assertFalse(node2.isNull());
637:       assertFalse(node2.isCall());
638:       assertFalse(node2.isFalse());
639:       assertFalse(node2.isName());
640:       assertFalse(node2.isAnd());
641:       assertFalse(node2.isBreak());
642:       assertFalse(node2.isExprResult());
643:       assertFalse(node2.isWhile());
644:       assertFalse(node2.isNot());
645:       assertFalse(node2.isDebugger());
646:       assertFalse(node2.isObjectLit());
647:       assertFalse(node2.isString());
648:       assertFalse(node2.isGetProp());
649:       
650:       boolean boolean1 = node1.isEmpty();
651:       assertFalse(boolean1);
652:       assertEquals(40, Node.ORIGINALNAME_PROP);
653:       assertEquals(57, Node.REFLECTED_OBJECT);
654:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
655:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
656:       assertEquals(52, Node.LENGTH);
657:       assertEquals(50, Node.FREE_CALL);
658:       assertEquals(8, Node.FLAG_NO_THROWS);
659:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
660:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
661:       assertEquals(39, Node.EMPTY_BLOCK);
662:       assertEquals(15, Node.NO_SIDE_EFFECTS);
663:       assertEquals(57, Node.LAST_PROP);
664:       assertEquals(1, Node.DECR_FLAG);
665:       assertEquals(51, Node.STATIC_SOURCE_FILE);
666:       assertEquals(30, Node.VAR_ARGS_NAME);
667:       assertEquals(54, Node.SLASH_V);
668:       assertEquals(46, Node.IS_NAMESPACE);
669:       assertEquals(43, Node.IS_CONSTANT_NAME);
670:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
671:       assertEquals(29, Node.JSDOC_INFO_PROP);
672:       assertEquals(47, Node.IS_DISPATCHER);
673:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
674:       assertEquals(2, Node.POST_FLAG);
675:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
676:       assertEquals(53, Node.INPUT_ID);
677:       assertEquals(32, Node.INCRDECR_PROP);
678:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
679:       assertEquals(55, Node.INFERRED_FUNCTION);
680:       assertEquals(12, Node.COLUMN_BITS);
681:       assertEquals(36, Node.QUOTED_PROP);
682:       assertEquals(4095, Node.COLUMN_MASK);
683:       assertEquals(48, Node.DIRECTIVES);
684:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
685:       assertEquals(37, Node.OPT_ARG_NAME);
686:       assertEquals(56, Node.CHANGE_TIME);
687:       assertEquals(49, Node.DIRECT_EVAL);
688:       assertFalse(node1.equals((Object)node0));
689:       assertFalse(node1.equals((Object)node2));
690:       assertTrue(boolean1 == boolean0);
691:       assertFalse(node1.isInstanceOf());
692:       assertFalse(node1.isComma());
693:       assertFalse(node1.isWith());
694:       assertFalse(node1.isNot());
695:       assertFalse(node1.isObjectLit());
696:       assertFalse(node1.isThis());
697:       assertFalse(node1.isScript());
698:       assertFalse(node1.isGetProp());
699:       assertFalse(node1.hasOneChild());
700:       assertFalse(node1.isThrow());
701:       assertFalse(node1.isCast());
702:       assertFalse(node1.isFalse());
703:       assertFalse(node1.isAnd());
704:       assertFalse(node1.isSwitch());
705:       assertFalse(node1.isLabelName());
706:       assertFalse(node1.isReturn());
707:       assertFalse(node1.isLabel());
708:       assertFalse(node1.isOr());
709:       assertFalse(node1.isDec());
710:       assertFalse(node1.hasChildren());
711:       assertFalse(node1.isWhile());
712:       assertFalse(node1.isString());
713:       assertFalse(node1.isEmpty());
714:       assertFalse(node1.isNew());
715:       assertFalse(node1.isAssignAdd());
716:       assertFalse(node1.isDo());
717:       assertTrue(node1.isRegExp());
718:       assertFalse(node1.isCall());
719:       assertFalse(node1.isAdd());
720:       assertFalse(node1.isAssign());
721:       assertEquals(38, node1.getLineno());
722:       assertFalse(node1.isTypeOf());
723:       assertFalse(node1.isNull());
724:       assertFalse(node1.isBreak());
725:       assertFalse(node1.isExprResult());
726:       assertFalse(node1.isTrue());
727:       assertFalse(node1.isGetElem());
728:       assertFalse(node1.isName());
729:       assertFalse(node1.isDelProp());
730:       assertFalse(node1.isVoid());
731:       assertFalse(node1.isCatch());
732:       assertEquals(0, node1.getChildCount());
733:       assertFalse(node1.isDefaultCase());
734:       assertFalse(node1.isSetterDef());
735:       assertFalse(node1.isTry());
736:       assertFalse(node1.isArrayLit());
737:       assertFalse(node1.isVar());
738:       assertFalse(node1.isDebugger());
739:       assertFalse(node1.isFunction());
740:       assertFalse(node1.isGetterDef());
741:       assertFalse(node1.isParamList());
742:       assertFalse(node1.isStringKey());
743:       assertFalse(node1.isIn());
744:       assertFalse(node1.isContinue());
745:       assertFalse(node1.hasMoreThanOneChild());
746:       assertFalse(node1.isNumber());
747:       assertEquals(155652, node1.getSourcePosition());
748:       assertFalse(node1.isInc());
749:       assertFalse(node1.isFor());
750:       assertFalse(node1.isCase());
751:       assertEquals(47, node1.getType());
752:       assertFalse(node1.isHook());
753:       assertFalse(node1.isBlock());
754:       assertFalse(node1.isIf());
755:       assertFalse(node1.isNE());
756:       assertEquals(4, node1.getCharno());
757:       
758:       boolean boolean2 = node1.isDo();
759:       assertFalse(boolean2);
760:       assertEquals(40, Node.ORIGINALNAME_PROP);
761:       assertEquals(57, Node.REFLECTED_OBJECT);
762:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
763:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
764:       assertEquals(52, Node.LENGTH);
765:       assertEquals(50, Node.FREE_CALL);
766:       assertEquals(8, Node.FLAG_NO_THROWS);
767:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
768:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
769:       assertEquals(39, Node.EMPTY_BLOCK);
770:       assertEquals(15, Node.NO_SIDE_EFFECTS);
771:       assertEquals(57, Node.LAST_PROP);
772:       assertEquals(1, Node.DECR_FLAG);
773:       assertEquals(51, Node.STATIC_SOURCE_FILE);
774:       assertEquals(30, Node.VAR_ARGS_NAME);
775:       assertEquals(54, Node.SLASH_V);
776:       assertEquals(46, Node.IS_NAMESPACE);
777:       assertEquals(43, Node.IS_CONSTANT_NAME);
778:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
779:       assertEquals(29, Node.JSDOC_INFO_PROP);
780:       assertEquals(47, Node.IS_DISPATCHER);
781:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
782:       assertEquals(2, Node.POST_FLAG);
783:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
784:       assertEquals(53, Node.INPUT_ID);
785:       assertEquals(32, Node.INCRDECR_PROP);
786:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
787:       assertEquals(55, Node.INFERRED_FUNCTION);
788:       assertEquals(12, Node.COLUMN_BITS);
789:       assertEquals(36, Node.QUOTED_PROP);
790:       assertEquals(4095, Node.COLUMN_MASK);
791:       assertEquals(48, Node.DIRECTIVES);
792:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
793:       assertEquals(37, Node.OPT_ARG_NAME);
794:       assertEquals(56, Node.CHANGE_TIME);
795:       assertEquals(49, Node.DIRECT_EVAL);
796:       assertFalse(node1.equals((Object)node0));
797:       assertFalse(node1.equals((Object)node2));
798:       assertTrue(boolean2 == boolean1);
799:       assertTrue(boolean2 == boolean0);
800:       assertFalse(node1.isInstanceOf());
801:       assertFalse(node1.isComma());
802:       assertFalse(node1.isWith());
803:       assertFalse(node1.isNot());
804:       assertFalse(node1.isObjectLit());
805:       assertFalse(node1.isThis());
806:       assertFalse(node1.isScript());
807:       assertFalse(node1.isGetProp());
808:       assertFalse(node1.hasOneChild());
809:       assertFalse(node1.isThrow());
810:       assertFalse(node1.isCast());
811:       assertFalse(node1.isFalse());
812:       assertFalse(node1.isAnd());
813:       assertFalse(node1.isSwitch());
814:       assertFalse(node1.isLabelName());
815:       assertFalse(node1.isReturn());
816:       assertFalse(node1.isLabel());
817:       assertFalse(node1.isOr());
818:       assertFalse(node1.isDec());
819:       assertFalse(node1.hasChildren());
820:       assertFalse(node1.isWhile());
821:       assertFalse(node1.isString());
822:       assertFalse(node1.isEmpty());
823:       assertFalse(node1.isNew());
824:       assertFalse(node1.isAssignAdd());
825:       assertFalse(node1.isDo());
826:       assertTrue(node1.isRegExp());
827:       assertFalse(node1.isCall());
828:       assertFalse(node1.isAdd());
829:       assertFalse(node1.isAssign());
830:       assertEquals(38, node1.getLineno());
831:       assertFalse(node1.isTypeOf());
832:       assertFalse(node1.isNull());
833:       assertFalse(node1.isBreak());
834:       assertFalse(node1.isExprResult());
835:       assertFalse(node1.isTrue());
836:       assertFalse(node1.isGetElem());
837:       assertFalse(node1.isName());
838:       assertFalse(node1.isDelProp());
839:       assertFalse(node1.isVoid());
840:       assertFalse(node1.isCatch());
841:       assertEquals(0, node1.getChildCount());
842:       assertFalse(node1.isDefaultCase());
843:       assertFalse(node1.isSetterDef());
844:       assertFalse(node1.isTry());
845:       assertFalse(node1.isArrayLit());
846:       assertFalse(node1.isVar());
847:       assertFalse(node1.isDebugger());
848:       assertFalse(node1.isFunction());
849:       assertFalse(node1.isGetterDef());
850:       assertFalse(node1.isParamList());
851:       assertFalse(node1.isStringKey());
852:       assertFalse(node1.isIn());
853:       assertFalse(node1.isContinue());
854:       assertFalse(node1.hasMoreThanOneChild());
855:       assertFalse(node1.isNumber());
856:       assertEquals(155652, node1.getSourcePosition());
857:       assertFalse(node1.isInc());
858:       assertFalse(node1.isFor());
859:       assertFalse(node1.isCase());
860:       assertEquals(47, node1.getType());
861:       assertFalse(node1.isHook());
862:       assertFalse(node1.isBlock());
863:       assertFalse(node1.isIf());
864:       assertFalse(node1.isNE());
865:       assertEquals(4, node1.getCharno());
866:       
867:       Iterable<Node> iterable0 = node0.children();
868:       assertFalse(iterable0.contains(node0));
869:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
870:       assertEquals(39, Node.EMPTY_BLOCK);
871:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
872:       assertEquals(48, Node.DIRECTIVES);
873:       assertEquals(4095, Node.COLUMN_MASK);
874:       assertEquals(40, Node.ORIGINALNAME_PROP);
875:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
876:       assertEquals(15, Node.NO_SIDE_EFFECTS);
877:       assertEquals(36, Node.QUOTED_PROP);
878:       assertEquals(57, Node.LAST_PROP);
879:       assertEquals(53, Node.INPUT_ID);
880:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
881:       assertEquals(49, Node.DIRECT_EVAL);
882:       assertEquals(57, Node.REFLECTED_OBJECT);
883:       assertEquals(55, Node.INFERRED_FUNCTION);
884:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
885:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
886:       assertEquals(52, Node.LENGTH);
887:       assertEquals(8, Node.FLAG_NO_THROWS);
888:       assertEquals(56, Node.CHANGE_TIME);
889:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
890:       assertEquals(47, Node.IS_DISPATCHER);
891:       assertEquals(29, Node.JSDOC_INFO_PROP);
892:       assertEquals(37, Node.OPT_ARG_NAME);
893:       assertEquals(32, Node.INCRDECR_PROP);
894:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
895:       assertEquals(12, Node.COLUMN_BITS);
896:       assertEquals(2, Node.POST_FLAG);
897:       assertEquals(30, Node.VAR_ARGS_NAME);
898:       assertEquals(43, Node.IS_CONSTANT_NAME);
899:       assertEquals(54, Node.SLASH_V);
900:       assertEquals(1, Node.DECR_FLAG);
901:       assertEquals(51, Node.STATIC_SOURCE_FILE);
902:       assertEquals(46, Node.IS_NAMESPACE);
903:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
904:       assertEquals(50, Node.FREE_CALL);
905:       assertNotNull(iterable0);
906:       assertFalse(node0.equals((Object)node2));
907:       assertFalse(node0.equals((Object)node1));
908:       assertFalse(node0.isCatch());
909:       assertFalse(node0.isDefaultCase());
910:       assertFalse(node0.isVoid());
911:       assertFalse(node0.isTry());
912:       assertFalse(node0.isRegExp());
913:       assertFalse(node0.isFunction());
914:       assertEquals(0, node0.getChildCount());
915:       assertFalse(node0.isEmpty());
916:       assertFalse(node0.isName());
917:       assertFalse(node0.isCall());
918:       assertFalse(node0.isIf());
919:       assertFalse(node0.isSetterDef());
920:       assertFalse(node0.isDelProp());
921:       assertFalse(node0.isAdd());
922:       assertFalse(node0.isIn());
923:       assertFalse(node0.isTrue());
924:       assertFalse(node0.isNE());
925:       assertFalse(node0.isNull());
926:       assertFalse(node0.isString());
927:       assertFalse(node0.isContinue());
928:       assertFalse(node0.isWhile());
929:       assertFalse(node0.isInc());
930:       assertTrue(node0.isNumber());
931:       assertFalse(node0.isReturn());
932:       assertFalse(node0.isTypeOf());
933:       assertFalse(node0.hasChildren());
934:       assertFalse(node0.isDec());
935:       assertFalse(node0.isFalse());
936:       assertFalse(node0.isCast());
937:       assertFalse(node0.isGetProp());
938:       assertFalse(node0.isDebugger());
939:       assertFalse(node0.isObjectLit());
940:       assertEquals((-1), node0.getSourcePosition());
941:       assertFalse(node0.isNot());
942:       assertFalse(node0.isWith());
943:       assertFalse(node0.isAnd());
944:       assertFalse(node0.isScript());
945:       assertFalse(node0.isExprResult());
946:       assertFalse(node0.isInstanceOf());
947:       assertFalse(node0.isThis());
948:       assertFalse(node0.isComma());
949:       assertFalse(node0.isAssign());
950:       assertFalse(node0.isGetElem());
951:       assertFalse(node0.isThrow());
952:       assertFalse(node0.isBreak());
953:       assertFalse(node0.isOr());
954:       assertFalse(node0.isDo());
955:       assertFalse(node0.isCase());
956:       assertEquals(39, node0.getType());
957:       assertFalse(node0.isSwitch());
958:       assertFalse(node0.isNew());
959:       assertEquals((-1), node0.getLineno());
960:       assertFalse(node0.isAssignAdd());
961:       assertFalse(node0.isLabel());
962:       assertFalse(node0.isBlock());
963:       assertFalse(node0.isVar());
964:       assertFalse(node0.isHook());
965:       assertFalse(node0.hasMoreThanOneChild());
966:       assertFalse(node0.isFor());
967:       assertFalse(node0.isLabelName());
968:       assertFalse(node0.isStringKey());
969:       assertFalse(node0.isArrayLit());
970:       assertFalse(node0.hasOneChild());
971:       assertFalse(node0.isParamList());
972:       assertEquals((-1), node0.getCharno());
973:       assertFalse(node0.isGetterDef());
974:       
975:       boolean boolean3 = node0.isCall();
976:       assertFalse(boolean3);
977:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
978:       assertEquals(39, Node.EMPTY_BLOCK);
979:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
980:       assertEquals(48, Node.DIRECTIVES);
981:       assertEquals(4095, Node.COLUMN_MASK);
982:       assertEquals(40, Node.ORIGINALNAME_PROP);
983:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
984:       assertEquals(15, Node.NO_SIDE_EFFECTS);
985:       assertEquals(36, Node.QUOTED_PROP);
986:       assertEquals(57, Node.LAST_PROP);
987:       assertEquals(53, Node.INPUT_ID);
988:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
989:       assertEquals(49, Node.DIRECT_EVAL);
990:       assertEquals(57, Node.REFLECTED_OBJECT);
991:       assertEquals(55, Node.INFERRED_FUNCTION);
992:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
993:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
994:       assertEquals(52, Node.LENGTH);
995:       assertEquals(8, Node.FLAG_NO_THROWS);
996:       assertEquals(56, Node.CHANGE_TIME);
997:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
998:       assertEquals(47, Node.IS_DISPATCHER);
999:       assertEquals(29, Node.JSDOC_INFO_PROP);
1000:       assertEquals(37, Node.OPT_ARG_NAME);
1001:       assertEquals(32, Node.INCRDECR_PROP);
1002:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1003:       assertEquals(12, Node.COLUMN_BITS);
1004:       assertEquals(2, Node.POST_FLAG);
1005:       assertEquals(30, Node.VAR_ARGS_NAME);
1006:       assertEquals(43, Node.IS_CONSTANT_NAME);
1007:       assertEquals(54, Node.SLASH_V);
1008:       assertEquals(1, Node.DECR_FLAG);
1009:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1010:       assertEquals(46, Node.IS_NAMESPACE);
1011:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1012:       assertEquals(50, Node.FREE_CALL);
1013:       assertFalse(node0.equals((Object)node2));
1014:       assertFalse(node0.equals((Object)node1));
1015:       assertTrue(boolean3 == boolean1);
1016:       assertTrue(boolean3 == boolean2);
1017:       assertTrue(boolean3 == boolean0);
1018:       assertFalse(node0.isCatch());
1019:       assertFalse(node0.isDefaultCase());
1020:       assertFalse(node0.isVoid());
1021:       assertFalse(node0.isTry());
1022:       assertFalse(node0.isRegExp());
1023:       assertFalse(node0.isFunction());
1024:       assertEquals(0, node0.getChildCount());
1025:       assertFalse(node0.isEmpty());
1026:       assertFalse(node0.isName());
1027:       assertFalse(node0.isCall());
1028:       assertFalse(node0.isIf());
1029:       assertFalse(node0.isSetterDef());
1030:       assertFalse(node0.isDelProp());
1031:       assertFalse(node0.isAdd());
1032:       assertFalse(node0.isIn());
1033:       assertFalse(node0.isTrue());
1034:       assertFalse(node0.isNE());
1035:       assertFalse(node0.isNull());
1036:       assertFalse(node0.isString());
1037:       assertFalse(node0.isContinue());
1038:       assertFalse(node0.isWhile());
1039:       assertFalse(node0.isInc());
1040:       assertTrue(node0.isNumber());
1041:       assertFalse(node0.isReturn());
1042:       assertFalse(node0.isTypeOf());
1043:       assertFalse(node0.hasChildren());
1044:       assertFalse(node0.isDec());
1045:       assertFalse(node0.isFalse());
1046:       assertFalse(node0.isCast());
1047:       assertFalse(node0.isGetProp());
1048:       assertFalse(node0.isDebugger());
1049:       assertFalse(node0.isObjectLit());
1050:       assertEquals((-1), node0.getSourcePosition());
1051:       assertFalse(node0.isNot());
1052:       assertFalse(node0.isWith());
1053:       assertFalse(node0.isAnd());
1054:       assertFalse(node0.isScript());
1055:       assertFalse(node0.isExprResult());
1056:       assertFalse(node0.isInstanceOf());
1057:       assertFalse(node0.isThis());
1058:       assertFalse(node0.isComma());
1059:       assertFalse(node0.isAssign());
1060:       assertFalse(node0.isGetElem());
1061:       assertFalse(node0.isThrow());
1062:       assertFalse(node0.isBreak());
1063:       assertFalse(node0.isOr());
1064:       assertFalse(node0.isDo());
1065:       assertFalse(node0.isCase());
1066:       assertEquals(39, node0.getType());
1067:       assertFalse(node0.isSwitch());
1068:       assertFalse(node0.isNew());
1069:       assertEquals((-1), node0.getLineno());
1070:       assertFalse(node0.isAssignAdd());
1071:       assertFalse(node0.isLabel());
1072:       assertFalse(node0.isBlock());
1073:       assertFalse(node0.isVar());
1074:       assertFalse(node0.isHook());
1075:       assertFalse(node0.hasMoreThanOneChild());
1076:       assertFalse(node0.isFor());
1077:       assertFalse(node0.isLabelName());
1078:       assertFalse(node0.isStringKey());
1079:       assertFalse(node0.isArrayLit());
1080:       assertFalse(node0.hasOneChild());
1081:       assertFalse(node0.isParamList());
1082:       assertEquals((-1), node0.getCharno());
1083:       assertFalse(node0.isGetterDef());
1084:       
1085:       Node node3 = Node.newString((-3816), "", 38, 2954);
1086:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1087:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1088:       assertEquals(53, Node.INPUT_ID);
1089:       assertEquals(29, Node.JSDOC_INFO_PROP);
1090:       assertEquals(47, Node.IS_DISPATCHER);
1091:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1092:       assertEquals(2, Node.POST_FLAG);
1093:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1094:       assertEquals(32, Node.INCRDECR_PROP);
1095:       assertEquals(1, Node.DECR_FLAG);
1096:       assertEquals(43, Node.IS_CONSTANT_NAME);
1097:       assertEquals(50, Node.FREE_CALL);
1098:       assertEquals(46, Node.IS_NAMESPACE);
1099:       assertEquals(54, Node.SLASH_V);
1100:       assertEquals(57, Node.REFLECTED_OBJECT);
1101:       assertEquals(52, Node.LENGTH);
1102:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1103:       assertEquals(40, Node.ORIGINALNAME_PROP);
1104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1105:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1106:       assertEquals(57, Node.LAST_PROP);
1107:       assertEquals(30, Node.VAR_ARGS_NAME);
1108:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1110:       assertEquals(12, Node.COLUMN_BITS);
1111:       assertEquals(4095, Node.COLUMN_MASK);
1112:       assertEquals(37, Node.OPT_ARG_NAME);
1113:       assertEquals(55, Node.INFERRED_FUNCTION);
1114:       assertEquals(39, Node.EMPTY_BLOCK);
1115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1116:       assertEquals(56, Node.CHANGE_TIME);
1117:       assertEquals(36, Node.QUOTED_PROP);
1118:       assertEquals(8, Node.FLAG_NO_THROWS);
1119:       assertEquals(48, Node.DIRECTIVES);
1120:       assertEquals(49, Node.DIRECT_EVAL);
1121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1122:       assertNotSame(node3, node1);
1123:       assertNotNull(node3);
1124:       assertFalse(node3.equals((Object)node0));
1125:       assertFalse(node3.equals((Object)node1));
1126:       assertFalse(node3.equals((Object)node2));
1127:       assertFalse(node3.isIn());
1128:       assertFalse(node3.isEmpty());
1129:       assertFalse(node3.isFor());
1130:       assertFalse(node3.isCase());
1131:       assertEquals(38, node3.getLineno());
1132:       assertFalse(node3.isTry());
1133:       assertFalse(node3.isFunction());
1134:       assertFalse(node3.isDebugger());
1135:       assertFalse(node3.isArrayLit());
1136:       assertFalse(node3.isString());
1137:       assertFalse(node3.isGetterDef());
1138:       assertFalse(node3.isSwitch());
1139:       assertEquals((-3816), node3.getType());
1140:       assertFalse(node3.isGetProp());
1141:       assertFalse(node3.isComma());
1142:       assertEquals(0, node3.getChildCount());
1143:       assertEquals(2954, node3.getCharno());
1144:       assertFalse(node3.isVar());
1145:       assertFalse(node3.isDefaultCase());
1146:       assertFalse(node3.isNew());
1147:       assertFalse(node3.isAdd());
1148:       assertFalse(node3.isVoid());
1149:       assertFalse(node3.isExprResult());
1150:       assertFalse(node3.isCall());
1151:       assertFalse(node3.isName());
1152:       assertFalse(node3.isGetElem());
1153:       assertFalse(node3.isBreak());
1154:       assertEquals(158602, node3.getSourcePosition());
1155:       assertFalse(node3.isDelProp());
1156:       assertFalse(node3.isNull());
1157:       assertFalse(node3.isTrue());
1158:       assertFalse(node3.isLabel());
1159:       assertFalse(node3.isReturn());
1160:       assertFalse(node3.isAssignAdd());
1161:       assertFalse(node3.isOr());
1162:       assertFalse(node3.isTypeOf());
1163:       assertFalse(node3.hasMoreThanOneChild());
1164:       assertFalse(node3.isNumber());
1165:       assertFalse(node3.isContinue());
1166:       assertFalse(node3.isDec());
1167:       assertFalse(node3.isAssign());
1168:       assertFalse(node3.isDo());
1169:       assertFalse(node3.hasChildren());
1170:       assertFalse(node3.isWhile());
1171:       assertFalse(node3.hasOneChild());
1172:       assertFalse(node3.isScript());
1173:       assertFalse(node3.isCast());
1174:       assertFalse(node3.isObjectLit());
1175:       assertFalse(node3.isNot());
1176:       assertFalse(node3.isLabelName());
1177:       assertFalse(node3.isAnd());
1178:       assertFalse(node3.isParamList());
1179:       assertFalse(node3.isStringKey());
1180:       assertFalse(node3.isSetterDef());
1181:       assertFalse(node3.isInstanceOf());
1182:       assertFalse(node3.isCatch());
1183:       assertFalse(node3.isFalse());
1184:       assertFalse(node3.isWith());
1185:       assertFalse(node3.isHook());
1186:       assertFalse(node3.isThis());
1187:       assertFalse(node3.isThrow());
1188:       assertFalse(node3.isBlock());
1189:       assertFalse(node3.isRegExp());
1190:       assertFalse(node3.isInc());
1191:       assertFalse(node3.isIf());
1192:       assertFalse(node3.isNE());
1193:       
1194:       // Undeclared exception!
1195:       try { 
1196:         node1.removeChildAfter(node3);
1197:         fail("Expecting exception: IllegalArgumentException");
1198:       
1199:       } catch(IllegalArgumentException e) {
1200:          //
1201:          // prev is not a child of this node.
1202:          //
1203:          verifyException("com.google.common.base.Preconditions", e);
1204:       }
1205:   }
1206: }
RegularFileObject[/tmp/EvoSuite_147_1628157886236/com/google/javascript/rhino/Node_147_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:46 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_147_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_147_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_147_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:46.436 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1078.87509966889, (-2786), (-2786));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node0);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());

boolean boolean0 = node0.isContinue();
assertFalse(boolean0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());

Node node1 = Node.newString(47, "The new child node has siblings.", 38, 4);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isAssign());
assertEquals(38, node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertEquals(155652, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(47, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(4, node1.getCharno());

Node node2 = new Node(57, node0, node1, node1, node0, 1023, 799);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isAssign());
assertEquals(38, node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertEquals(155652, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(47, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(4, node1.getCharno());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertEquals(1023, node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertEquals(57, node2.getType());
assertFalse(node2.isDelProp());
assertTrue(node2.hasChildren());
assertFalse(node2.isArrayLit());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertEquals(799, node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isComma());
assertEquals(4191007, node2.getSourcePosition());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());

boolean boolean1 = node1.isEmpty();
assertFalse(boolean1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isAssign());
assertEquals(38, node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertEquals(155652, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(47, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(4, node1.getCharno());

boolean boolean2 = node1.isDo();
assertFalse(boolean2);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertTrue(node1.isRegExp());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isAssign());
assertEquals(38, node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertEquals(155652, node1.getSourcePosition());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertEquals(47, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(4, node1.getCharno());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());

boolean boolean3 = node0.isCall();
assertFalse(boolean3);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isAdd());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());

Node node3 = Node.newString((-3816), "", 38, 2954);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotSame(node3, node1);
assertNotNull(node3);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertEquals(38, node3.getLineno());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isArrayLit());
assertFalse(node3.isString());
assertFalse(node3.isGetterDef());
assertFalse(node3.isSwitch());
assertEquals((-3816), node3.getType());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertEquals(0, node3.getChildCount());
assertEquals(2954, node3.getCharno());
assertFalse(node3.isVar());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isBreak());
assertEquals(158602, node3.getSourcePosition());
assertFalse(node3.isDelProp());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNumber());
assertFalse(node3.isContinue());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isDo());
assertFalse(node3.hasChildren());
assertFalse(node3.isWhile());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isCast());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isLabelName());
assertFalse(node3.isAnd());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isFalse());
assertFalse(node3.isWith());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isThrow());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertFalse(node3.isInc());
assertFalse(node3.isIf());
assertFalse(node3.isNE());

node1.removeChildAfter(node3);

[MASTER] 10:04:47.179 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_153_1628157887082/com/google/javascript/rhino/Node_153_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_153_1628157887082/com/google/javascript/rhino/Node_153_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:47.180 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:47.180 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:47.180 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 665
[MASTER] 10:04:47.181 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_153_1628157887082/com/google/javascript/rhino/Node_153_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:47 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.FileSystemHandling;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_153_tmp__ESTest extends Node_153_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
22:       assertNotNull(fileSystemHandling0);
23:       
24:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
25:       assertTrue(boolean0);
26:       
27:       Node node0 = Node.newString("com.google.javacript.rhino.jstype.NumbrType", 162, 162);
28:       assertEquals(30, Node.VAR_ARGS_NAME);
29:       assertEquals(49, Node.DIRECT_EVAL);
30:       assertEquals(57, Node.LAST_PROP);
31:       assertEquals(1, Node.DECR_FLAG);
32:       assertEquals(51, Node.STATIC_SOURCE_FILE);
33:       assertEquals(46, Node.IS_NAMESPACE);
34:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
35:       assertEquals(54, Node.SLASH_V);
36:       assertEquals(12, Node.COLUMN_BITS);
37:       assertEquals(52, Node.LENGTH);
38:       assertEquals(32, Node.INCRDECR_PROP);
39:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
40:       assertEquals(15, Node.NO_SIDE_EFFECTS);
41:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
42:       assertEquals(29, Node.JSDOC_INFO_PROP);
43:       assertEquals(56, Node.CHANGE_TIME);
44:       assertEquals(57, Node.REFLECTED_OBJECT);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(4095, Node.COLUMN_MASK);
47:       assertEquals(37, Node.OPT_ARG_NAME);
48:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
49:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
50:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
51:       assertEquals(43, Node.IS_CONSTANT_NAME);
52:       assertEquals(36, Node.QUOTED_PROP);
53:       assertEquals(8, Node.FLAG_NO_THROWS);
54:       assertEquals(55, Node.INFERRED_FUNCTION);
55:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
56:       assertEquals(39, Node.EMPTY_BLOCK);
57:       assertEquals(53, Node.INPUT_ID);
58:       assertEquals(50, Node.FREE_CALL);
59:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
60:       assertEquals(2, Node.POST_FLAG);
61:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
62:       assertEquals(47, Node.IS_DISPATCHER);
63:       assertEquals(40, Node.ORIGINALNAME_PROP);
64:       assertNotNull(node0);
65:       assertFalse(node0.isFalse());
66:       assertFalse(node0.isHook());
67:       assertFalse(node0.isThrow());
68:       assertFalse(node0.isInc());
69:       assertFalse(node0.isGetProp());
70:       assertFalse(node0.isCase());
71:       assertFalse(node0.isComma());
72:       assertFalse(node0.isThis());
73:       assertFalse(node0.isExprResult());
74:       assertFalse(node0.isDelProp());
75:       assertFalse(node0.isWith());
76:       assertFalse(node0.isBreak());
77:       assertFalse(node0.isInstanceOf());
78:       assertEquals(162, node0.getLineno());
79:       assertFalse(node0.isAssign());
80:       assertFalse(node0.hasChildren());
81:       assertFalse(node0.isIf());
82:       assertFalse(node0.isNE());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isIn());
85:       assertFalse(node0.isAnd());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isNot());
88:       assertFalse(node0.isObjectLit());
89:       assertEquals(40, node0.getType());
90:       assertEquals(162, node0.getCharno());
91:       assertFalse(node0.isFunction());
92:       assertEquals(663714, node0.getSourcePosition());
93:       assertFalse(node0.isCast());
94:       assertFalse(node0.isCall());
95:       assertFalse(node0.isName());
96:       assertFalse(node0.isStringKey());
97:       assertFalse(node0.isBlock());
98:       assertFalse(node0.isNull());
99:       assertFalse(node0.isVar());
100:       assertFalse(node0.isSetterDef());
101:       assertTrue(node0.isString());
102:       assertFalse(node0.isNew());
103:       assertFalse(node0.isAdd());
104:       assertFalse(node0.hasMoreThanOneChild());
105:       assertFalse(node0.isCatch());
106:       assertFalse(node0.isReturn());
107:       assertFalse(node0.isWhile());
108:       assertFalse(node0.isDec());
109:       assertFalse(node0.isTypeOf());
110:       assertFalse(node0.isVoid());
111:       assertFalse(node0.isRegExp());
112:       assertFalse(node0.isGetElem());
113:       assertFalse(node0.isArrayLit());
114:       assertFalse(node0.hasOneChild());
115:       assertFalse(node0.isLabelName());
116:       assertFalse(node0.isFor());
117:       assertFalse(node0.isTrue());
118:       assertFalse(node0.isNumber());
119:       assertFalse(node0.isOr());
120:       assertFalse(node0.isTry());
121:       assertFalse(node0.isGetterDef());
122:       assertFalse(node0.isEmpty());
123:       assertFalse(node0.isScript());
124:       assertEquals(0, node0.getChildCount());
125:       assertFalse(node0.isDo());
126:       assertFalse(node0.isAssignAdd());
127:       assertFalse(node0.isDefaultCase());
128:       assertFalse(node0.isLabel());
129:       assertFalse(node0.isSwitch());
130:       assertFalse(node0.isParamList());
131:       
132:       node0.detachChildren();
133:       assertEquals(30, Node.VAR_ARGS_NAME);
134:       assertEquals(49, Node.DIRECT_EVAL);
135:       assertEquals(57, Node.LAST_PROP);
136:       assertEquals(1, Node.DECR_FLAG);
137:       assertEquals(51, Node.STATIC_SOURCE_FILE);
138:       assertEquals(46, Node.IS_NAMESPACE);
139:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
140:       assertEquals(54, Node.SLASH_V);
141:       assertEquals(12, Node.COLUMN_BITS);
142:       assertEquals(52, Node.LENGTH);
143:       assertEquals(32, Node.INCRDECR_PROP);
144:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
145:       assertEquals(15, Node.NO_SIDE_EFFECTS);
146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
147:       assertEquals(29, Node.JSDOC_INFO_PROP);
148:       assertEquals(56, Node.CHANGE_TIME);
149:       assertEquals(57, Node.REFLECTED_OBJECT);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(4095, Node.COLUMN_MASK);
152:       assertEquals(37, Node.OPT_ARG_NAME);
153:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
156:       assertEquals(43, Node.IS_CONSTANT_NAME);
157:       assertEquals(36, Node.QUOTED_PROP);
158:       assertEquals(8, Node.FLAG_NO_THROWS);
159:       assertEquals(55, Node.INFERRED_FUNCTION);
160:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
161:       assertEquals(39, Node.EMPTY_BLOCK);
162:       assertEquals(53, Node.INPUT_ID);
163:       assertEquals(50, Node.FREE_CALL);
164:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
165:       assertEquals(2, Node.POST_FLAG);
166:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
167:       assertEquals(47, Node.IS_DISPATCHER);
168:       assertEquals(40, Node.ORIGINALNAME_PROP);
169:       assertFalse(node0.isFalse());
170:       assertFalse(node0.isHook());
171:       assertFalse(node0.isThrow());
172:       assertFalse(node0.isInc());
173:       assertFalse(node0.isGetProp());
174:       assertFalse(node0.isCase());
175:       assertFalse(node0.isComma());
176:       assertFalse(node0.isThis());
177:       assertFalse(node0.isExprResult());
178:       assertFalse(node0.isDelProp());
179:       assertFalse(node0.isWith());
180:       assertFalse(node0.isBreak());
181:       assertFalse(node0.isInstanceOf());
182:       assertEquals(162, node0.getLineno());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.hasChildren());
185:       assertFalse(node0.isIf());
186:       assertFalse(node0.isNE());
187:       assertFalse(node0.isDebugger());
188:       assertFalse(node0.isIn());
189:       assertFalse(node0.isAnd());
190:       assertFalse(node0.isContinue());
191:       assertFalse(node0.isNot());
192:       assertFalse(node0.isObjectLit());
193:       assertEquals(40, node0.getType());
194:       assertEquals(162, node0.getCharno());
195:       assertFalse(node0.isFunction());
196:       assertEquals(663714, node0.getSourcePosition());
197:       assertFalse(node0.isCast());
198:       assertFalse(node0.isCall());
199:       assertFalse(node0.isName());
200:       assertFalse(node0.isStringKey());
201:       assertFalse(node0.isBlock());
202:       assertFalse(node0.isNull());
203:       assertFalse(node0.isVar());
204:       assertFalse(node0.isSetterDef());
205:       assertTrue(node0.isString());
206:       assertFalse(node0.isNew());
207:       assertFalse(node0.isAdd());
208:       assertFalse(node0.hasMoreThanOneChild());
209:       assertFalse(node0.isCatch());
210:       assertFalse(node0.isReturn());
211:       assertFalse(node0.isWhile());
212:       assertFalse(node0.isDec());
213:       assertFalse(node0.isTypeOf());
214:       assertFalse(node0.isVoid());
215:       assertFalse(node0.isRegExp());
216:       assertFalse(node0.isGetElem());
217:       assertFalse(node0.isArrayLit());
218:       assertFalse(node0.hasOneChild());
219:       assertFalse(node0.isLabelName());
220:       assertFalse(node0.isFor());
221:       assertFalse(node0.isTrue());
222:       assertFalse(node0.isNumber());
223:       assertFalse(node0.isOr());
224:       assertFalse(node0.isTry());
225:       assertFalse(node0.isGetterDef());
226:       assertFalse(node0.isEmpty());
227:       assertFalse(node0.isScript());
228:       assertEquals(0, node0.getChildCount());
229:       assertFalse(node0.isDo());
230:       assertFalse(node0.isAssignAdd());
231:       assertFalse(node0.isDefaultCase());
232:       assertFalse(node0.isLabel());
233:       assertFalse(node0.isSwitch());
234:       assertFalse(node0.isParamList());
235:       
236:       Node node1 = Node.newString("", 12, 54);
237:       assertEquals(37, Node.OPT_ARG_NAME);
238:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
239:       assertEquals(47, Node.IS_DISPATCHER);
240:       assertEquals(51, Node.STATIC_SOURCE_FILE);
241:       assertEquals(2, Node.POST_FLAG);
242:       assertEquals(1, Node.DECR_FLAG);
243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
244:       assertEquals(29, Node.JSDOC_INFO_PROP);
245:       assertEquals(12, Node.COLUMN_BITS);
246:       assertEquals(57, Node.LAST_PROP);
247:       assertEquals(32, Node.INCRDECR_PROP);
248:       assertEquals(54, Node.SLASH_V);
249:       assertEquals(30, Node.VAR_ARGS_NAME);
250:       assertEquals(40, Node.ORIGINALNAME_PROP);
251:       assertEquals(46, Node.IS_NAMESPACE);
252:       assertEquals(43, Node.IS_CONSTANT_NAME);
253:       assertEquals(48, Node.DIRECTIVES);
254:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
255:       assertEquals(39, Node.EMPTY_BLOCK);
256:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
257:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
258:       assertEquals(50, Node.FREE_CALL);
259:       assertEquals(4095, Node.COLUMN_MASK);
260:       assertEquals(8, Node.FLAG_NO_THROWS);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(55, Node.INFERRED_FUNCTION);
263:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
264:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
266:       assertEquals(53, Node.INPUT_ID);
267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
268:       assertEquals(36, Node.QUOTED_PROP);
269:       assertEquals(52, Node.LENGTH);
270:       assertEquals(57, Node.REFLECTED_OBJECT);
271:       assertEquals(56, Node.CHANGE_TIME);
272:       assertEquals(49, Node.DIRECT_EVAL);
273:       assertNotSame(node1, node0);
274:       assertNotNull(node1);
275:       assertFalse(node1.equals((Object)node0));
276:       assertFalse(node1.isInc());
277:       assertFalse(node1.isHook());
278:       assertFalse(node1.isIn());
279:       assertFalse(node1.isThrow());
280:       assertFalse(node1.isCase());
281:       assertFalse(node1.isFalse());
282:       assertFalse(node1.isGetterDef());
283:       assertFalse(node1.isArrayLit());
284:       assertFalse(node1.isAnd());
285:       assertFalse(node1.isSwitch());
286:       assertFalse(node1.isScript());
287:       assertEquals(40, node1.getType());
288:       assertFalse(node1.isFunction());
289:       assertFalse(node1.isWith());
290:       assertFalse(node1.isRegExp());
291:       assertFalse(node1.hasOneChild());
292:       assertEquals(54, node1.getCharno());
293:       assertFalse(node1.isTry());
294:       assertFalse(node1.isIf());
295:       assertFalse(node1.isThis());
296:       assertFalse(node1.isSetterDef());
297:       assertFalse(node1.isNE());
298:       assertFalse(node1.isFor());
299:       assertFalse(node1.isInstanceOf());
300:       assertFalse(node1.isCatch());
301:       assertFalse(node1.isWhile());
302:       assertFalse(node1.isBlock());
303:       assertFalse(node1.isContinue());
304:       assertEquals(49206, node1.getSourcePosition());
305:       assertFalse(node1.hasMoreThanOneChild());
306:       assertEquals(12, node1.getLineno());
307:       assertFalse(node1.isReturn());
308:       assertFalse(node1.isVar());
309:       assertFalse(node1.isAdd());
310:       assertFalse(node1.isNew());
311:       assertFalse(node1.isAssignAdd());
312:       assertTrue(node1.isString());
313:       assertFalse(node1.isDo());
314:       assertFalse(node1.isNumber());
315:       assertFalse(node1.isParamList());
316:       assertFalse(node1.isLabel());
317:       assertFalse(node1.isCast());
318:       assertFalse(node1.isStringKey());
319:       assertFalse(node1.isLabelName());
320:       assertFalse(node1.isDefaultCase());
321:       assertFalse(node1.isExprResult());
322:       assertFalse(node1.isTrue());
323:       assertFalse(node1.isDebugger());
324:       assertFalse(node1.isNot());
325:       assertFalse(node1.isObjectLit());
326:       assertEquals(0, node1.getChildCount());
327:       assertFalse(node1.isGetProp());
328:       assertFalse(node1.isDec());
329:       assertFalse(node1.isBreak());
330:       assertFalse(node1.hasChildren());
331:       assertFalse(node1.isEmpty());
332:       assertFalse(node1.isNull());
333:       assertFalse(node1.isComma());
334:       assertFalse(node1.isAssign());
335:       assertFalse(node1.isTypeOf());
336:       assertFalse(node1.isOr());
337:       assertFalse(node1.isCall());
338:       assertFalse(node1.isGetElem());
339:       assertFalse(node1.isDelProp());
340:       assertFalse(node1.isVoid());
341:       assertFalse(node1.isName());
342:       
343:       boolean boolean1 = node0.isEquivalentTo(node1, true, true, true);
344:       assertFalse(boolean1);
345:       assertEquals(30, Node.VAR_ARGS_NAME);
346:       assertEquals(49, Node.DIRECT_EVAL);
347:       assertEquals(57, Node.LAST_PROP);
348:       assertEquals(1, Node.DECR_FLAG);
349:       assertEquals(51, Node.STATIC_SOURCE_FILE);
350:       assertEquals(46, Node.IS_NAMESPACE);
351:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
352:       assertEquals(54, Node.SLASH_V);
353:       assertEquals(12, Node.COLUMN_BITS);
354:       assertEquals(52, Node.LENGTH);
355:       assertEquals(32, Node.INCRDECR_PROP);
356:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
357:       assertEquals(15, Node.NO_SIDE_EFFECTS);
358:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
359:       assertEquals(29, Node.JSDOC_INFO_PROP);
360:       assertEquals(56, Node.CHANGE_TIME);
361:       assertEquals(57, Node.REFLECTED_OBJECT);
362:       assertEquals(48, Node.DIRECTIVES);
363:       assertEquals(4095, Node.COLUMN_MASK);
364:       assertEquals(37, Node.OPT_ARG_NAME);
365:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
366:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
368:       assertEquals(43, Node.IS_CONSTANT_NAME);
369:       assertEquals(36, Node.QUOTED_PROP);
370:       assertEquals(8, Node.FLAG_NO_THROWS);
371:       assertEquals(55, Node.INFERRED_FUNCTION);
372:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
373:       assertEquals(39, Node.EMPTY_BLOCK);
374:       assertEquals(53, Node.INPUT_ID);
375:       assertEquals(50, Node.FREE_CALL);
376:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
377:       assertEquals(2, Node.POST_FLAG);
378:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
379:       assertEquals(47, Node.IS_DISPATCHER);
380:       assertEquals(40, Node.ORIGINALNAME_PROP);
381:       assertEquals(37, Node.OPT_ARG_NAME);
382:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
383:       assertEquals(47, Node.IS_DISPATCHER);
384:       assertEquals(51, Node.STATIC_SOURCE_FILE);
385:       assertEquals(2, Node.POST_FLAG);
386:       assertEquals(1, Node.DECR_FLAG);
387:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
388:       assertEquals(29, Node.JSDOC_INFO_PROP);
389:       assertEquals(12, Node.COLUMN_BITS);
390:       assertEquals(57, Node.LAST_PROP);
391:       assertEquals(32, Node.INCRDECR_PROP);
392:       assertEquals(54, Node.SLASH_V);
393:       assertEquals(30, Node.VAR_ARGS_NAME);
394:       assertEquals(40, Node.ORIGINALNAME_PROP);
395:       assertEquals(46, Node.IS_NAMESPACE);
396:       assertEquals(43, Node.IS_CONSTANT_NAME);
397:       assertEquals(48, Node.DIRECTIVES);
398:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
399:       assertEquals(39, Node.EMPTY_BLOCK);
400:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
401:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
402:       assertEquals(50, Node.FREE_CALL);
403:       assertEquals(4095, Node.COLUMN_MASK);
404:       assertEquals(8, Node.FLAG_NO_THROWS);
405:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
406:       assertEquals(55, Node.INFERRED_FUNCTION);
407:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
408:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
409:       assertEquals(15, Node.NO_SIDE_EFFECTS);
410:       assertEquals(53, Node.INPUT_ID);
411:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
412:       assertEquals(36, Node.QUOTED_PROP);
413:       assertEquals(52, Node.LENGTH);
414:       assertEquals(57, Node.REFLECTED_OBJECT);
415:       assertEquals(56, Node.CHANGE_TIME);
416:       assertEquals(49, Node.DIRECT_EVAL);
417:       assertNotSame(node0, node1);
418:       assertNotSame(node1, node0);
419:       assertFalse(node0.equals((Object)node1));
420:       assertFalse(node1.equals((Object)node0));
421:       assertFalse(boolean1 == boolean0);
422:       assertFalse(node0.isFalse());
423:       assertFalse(node0.isHook());
424:       assertFalse(node0.isThrow());
425:       assertFalse(node0.isInc());
426:       assertFalse(node0.isGetProp());
427:       assertFalse(node0.isCase());
428:       assertFalse(node0.isComma());
429:       assertFalse(node0.isThis());
430:       assertFalse(node0.isExprResult());
431:       assertFalse(node0.isDelProp());
432:       assertFalse(node0.isWith());
433:       assertFalse(node0.isBreak());
434:       assertFalse(node0.isInstanceOf());
435:       assertEquals(162, node0.getLineno());
436:       assertFalse(node0.isAssign());
437:       assertFalse(node0.hasChildren());
438:       assertFalse(node0.isIf());
439:       assertFalse(node0.isNE());
440:       assertFalse(node0.isDebugger());
441:       assertFalse(node0.isIn());
442:       assertFalse(node0.isAnd());
443:       assertFalse(node0.isContinue());
444:       assertFalse(node0.isNot());
445:       assertFalse(node0.isObjectLit());
446:       assertEquals(40, node0.getType());
447:       assertEquals(162, node0.getCharno());
448:       assertFalse(node0.isFunction());
449:       assertEquals(663714, node0.getSourcePosition());
450:       assertFalse(node0.isCast());
451:       assertFalse(node0.isCall());
452:       assertFalse(node0.isName());
453:       assertFalse(node0.isStringKey());
454:       assertFalse(node0.isBlock());
455:       assertFalse(node0.isNull());
456:       assertFalse(node0.isVar());
457:       assertFalse(node0.isSetterDef());
458:       assertTrue(node0.isString());
459:       assertFalse(node0.isNew());
460:       assertFalse(node0.isAdd());
461:       assertFalse(node0.hasMoreThanOneChild());
462:       assertFalse(node0.isCatch());
463:       assertFalse(node0.isReturn());
464:       assertFalse(node0.isWhile());
465:       assertFalse(node0.isDec());
466:       assertFalse(node0.isTypeOf());
467:       assertFalse(node0.isVoid());
468:       assertFalse(node0.isRegExp());
469:       assertFalse(node0.isGetElem());
470:       assertFalse(node0.isArrayLit());
471:       assertFalse(node0.hasOneChild());
472:       assertFalse(node0.isLabelName());
473:       assertFalse(node0.isFor());
474:       assertFalse(node0.isTrue());
475:       assertFalse(node0.isNumber());
476:       assertFalse(node0.isOr());
477:       assertFalse(node0.isTry());
478:       assertFalse(node0.isGetterDef());
479:       assertFalse(node0.isEmpty());
480:       assertFalse(node0.isScript());
481:       assertEquals(0, node0.getChildCount());
482:       assertFalse(node0.isDo());
483:       assertFalse(node0.isAssignAdd());
484:       assertFalse(node0.isDefaultCase());
485:       assertFalse(node0.isLabel());
486:       assertFalse(node0.isSwitch());
487:       assertFalse(node0.isParamList());
488:       assertFalse(node1.isInc());
489:       assertFalse(node1.isHook());
490:       assertFalse(node1.isIn());
491:       assertFalse(node1.isThrow());
492:       assertFalse(node1.isCase());
493:       assertFalse(node1.isFalse());
494:       assertFalse(node1.isGetterDef());
495:       assertFalse(node1.isArrayLit());
496:       assertFalse(node1.isAnd());
497:       assertFalse(node1.isSwitch());
498:       assertFalse(node1.isScript());
499:       assertEquals(40, node1.getType());
500:       assertFalse(node1.isFunction());
501:       assertFalse(node1.isWith());
502:       assertFalse(node1.isRegExp());
503:       assertFalse(node1.hasOneChild());
504:       assertEquals(54, node1.getCharno());
505:       assertFalse(node1.isTry());
506:       assertFalse(node1.isIf());
507:       assertFalse(node1.isThis());
508:       assertFalse(node1.isSetterDef());
509:       assertFalse(node1.isNE());
510:       assertFalse(node1.isFor());
511:       assertFalse(node1.isInstanceOf());
512:       assertFalse(node1.isCatch());
513:       assertFalse(node1.isWhile());
514:       assertFalse(node1.isBlock());
515:       assertFalse(node1.isContinue());
516:       assertEquals(49206, node1.getSourcePosition());
517:       assertFalse(node1.hasMoreThanOneChild());
518:       assertEquals(12, node1.getLineno());
519:       assertFalse(node1.isReturn());
520:       assertFalse(node1.isVar());
521:       assertFalse(node1.isAdd());
522:       assertFalse(node1.isNew());
523:       assertFalse(node1.isAssignAdd());
524:       assertTrue(node1.isString());
525:       assertFalse(node1.isDo());
526:       assertFalse(node1.isNumber());
527:       assertFalse(node1.isParamList());
528:       assertFalse(node1.isLabel());
529:       assertFalse(node1.isCast());
530:       assertFalse(node1.isStringKey());
531:       assertFalse(node1.isLabelName());
532:       assertFalse(node1.isDefaultCase());
533:       assertFalse(node1.isExprResult());
534:       assertFalse(node1.isTrue());
535:       assertFalse(node1.isDebugger());
536:       assertFalse(node1.isNot());
537:       assertFalse(node1.isObjectLit());
538:       assertEquals(0, node1.getChildCount());
539:       assertFalse(node1.isGetProp());
540:       assertFalse(node1.isDec());
541:       assertFalse(node1.isBreak());
542:       assertFalse(node1.hasChildren());
543:       assertFalse(node1.isEmpty());
544:       assertFalse(node1.isNull());
545:       assertFalse(node1.isComma());
546:       assertFalse(node1.isAssign());
547:       assertFalse(node1.isTypeOf());
548:       assertFalse(node1.isOr());
549:       assertFalse(node1.isCall());
550:       assertFalse(node1.isGetElem());
551:       assertFalse(node1.isDelProp());
552:       assertFalse(node1.isVoid());
553:       assertFalse(node1.isName());
554:       
555:       boolean boolean2 = node1.isDo();
556:       assertFalse(boolean2);
557:       assertEquals(37, Node.OPT_ARG_NAME);
558:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
559:       assertEquals(47, Node.IS_DISPATCHER);
560:       assertEquals(51, Node.STATIC_SOURCE_FILE);
561:       assertEquals(2, Node.POST_FLAG);
562:       assertEquals(1, Node.DECR_FLAG);
563:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
564:       assertEquals(29, Node.JSDOC_INFO_PROP);
565:       assertEquals(12, Node.COLUMN_BITS);
566:       assertEquals(57, Node.LAST_PROP);
567:       assertEquals(32, Node.INCRDECR_PROP);
568:       assertEquals(54, Node.SLASH_V);
569:       assertEquals(30, Node.VAR_ARGS_NAME);
570:       assertEquals(40, Node.ORIGINALNAME_PROP);
571:       assertEquals(46, Node.IS_NAMESPACE);
572:       assertEquals(43, Node.IS_CONSTANT_NAME);
573:       assertEquals(48, Node.DIRECTIVES);
574:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
575:       assertEquals(39, Node.EMPTY_BLOCK);
576:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
577:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
578:       assertEquals(50, Node.FREE_CALL);
579:       assertEquals(4095, Node.COLUMN_MASK);
580:       assertEquals(8, Node.FLAG_NO_THROWS);
581:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
582:       assertEquals(55, Node.INFERRED_FUNCTION);
583:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
584:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
585:       assertEquals(15, Node.NO_SIDE_EFFECTS);
586:       assertEquals(53, Node.INPUT_ID);
587:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
588:       assertEquals(36, Node.QUOTED_PROP);
589:       assertEquals(52, Node.LENGTH);
590:       assertEquals(57, Node.REFLECTED_OBJECT);
591:       assertEquals(56, Node.CHANGE_TIME);
592:       assertEquals(49, Node.DIRECT_EVAL);
593:       assertNotSame(node1, node0);
594:       assertFalse(node1.equals((Object)node0));
595:       assertTrue(boolean2 == boolean1);
596:       assertFalse(boolean2 == boolean0);
597:       assertFalse(node1.isInc());
598:       assertFalse(node1.isHook());
599:       assertFalse(node1.isIn());
600:       assertFalse(node1.isThrow());
601:       assertFalse(node1.isCase());
602:       assertFalse(node1.isFalse());
603:       assertFalse(node1.isGetterDef());
604:       assertFalse(node1.isArrayLit());
605:       assertFalse(node1.isAnd());
606:       assertFalse(node1.isSwitch());
607:       assertFalse(node1.isScript());
608:       assertEquals(40, node1.getType());
609:       assertFalse(node1.isFunction());
610:       assertFalse(node1.isWith());
611:       assertFalse(node1.isRegExp());
612:       assertFalse(node1.hasOneChild());
613:       assertEquals(54, node1.getCharno());
614:       assertFalse(node1.isTry());
615:       assertFalse(node1.isIf());
616:       assertFalse(node1.isThis());
617:       assertFalse(node1.isSetterDef());
618:       assertFalse(node1.isNE());
619:       assertFalse(node1.isFor());
620:       assertFalse(node1.isInstanceOf());
621:       assertFalse(node1.isCatch());
622:       assertFalse(node1.isWhile());
623:       assertFalse(node1.isBlock());
624:       assertFalse(node1.isContinue());
625:       assertEquals(49206, node1.getSourcePosition());
626:       assertFalse(node1.hasMoreThanOneChild());
627:       assertEquals(12, node1.getLineno());
628:       assertFalse(node1.isReturn());
629:       assertFalse(node1.isVar());
630:       assertFalse(node1.isAdd());
631:       assertFalse(node1.isNew());
632:       assertFalse(node1.isAssignAdd());
633:       assertTrue(node1.isString());
634:       assertFalse(node1.isDo());
635:       assertFalse(node1.isNumber());
636:       assertFalse(node1.isParamList());
637:       assertFalse(node1.isLabel());
638:       assertFalse(node1.isCast());
639:       assertFalse(node1.isStringKey());
640:       assertFalse(node1.isLabelName());
641:       assertFalse(node1.isDefaultCase());
642:       assertFalse(node1.isExprResult());
643:       assertFalse(node1.isTrue());
644:       assertFalse(node1.isDebugger());
645:       assertFalse(node1.isNot());
646:       assertFalse(node1.isObjectLit());
647:       assertEquals(0, node1.getChildCount());
648:       assertFalse(node1.isGetProp());
649:       assertFalse(node1.isDec());
650:       assertFalse(node1.isBreak());
651:       assertFalse(node1.hasChildren());
652:       assertFalse(node1.isEmpty());
653:       assertFalse(node1.isNull());
654:       assertFalse(node1.isComma());
655:       assertFalse(node1.isAssign());
656:       assertFalse(node1.isTypeOf());
657:       assertFalse(node1.isOr());
658:       assertFalse(node1.isCall());
659:       assertFalse(node1.isGetElem());
660:       assertFalse(node1.isDelProp());
661:       assertFalse(node1.isVoid());
662:       assertFalse(node1.isName());
663:       
664:       Iterable<Node> iterable0 = node1.children();
665:       assertFalse(iterable0.contains(node0));
666:       assertEquals(37, Node.OPT_ARG_NAME);
667:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
668:       assertEquals(47, Node.IS_DISPATCHER);
669:       assertEquals(51, Node.STATIC_SOURCE_FILE);
670:       assertEquals(2, Node.POST_FLAG);
671:       assertEquals(1, Node.DECR_FLAG);
672:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
673:       assertEquals(29, Node.JSDOC_INFO_PROP);
674:       assertEquals(12, Node.COLUMN_BITS);
675:       assertEquals(57, Node.LAST_PROP);
676:       assertEquals(32, Node.INCRDECR_PROP);
677:       assertEquals(54, Node.SLASH_V);
678:       assertEquals(30, Node.VAR_ARGS_NAME);
679:       assertEquals(40, Node.ORIGINALNAME_PROP);
680:       assertEquals(46, Node.IS_NAMESPACE);
681:       assertEquals(43, Node.IS_CONSTANT_NAME);
682:       assertEquals(48, Node.DIRECTIVES);
683:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
684:       assertEquals(39, Node.EMPTY_BLOCK);
685:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
686:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
687:       assertEquals(50, Node.FREE_CALL);
688:       assertEquals(4095, Node.COLUMN_MASK);
689:       assertEquals(8, Node.FLAG_NO_THROWS);
690:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
691:       assertEquals(55, Node.INFERRED_FUNCTION);
692:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
693:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
694:       assertEquals(15, Node.NO_SIDE_EFFECTS);
695:       assertEquals(53, Node.INPUT_ID);
696:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
697:       assertEquals(36, Node.QUOTED_PROP);
698:       assertEquals(52, Node.LENGTH);
699:       assertEquals(57, Node.REFLECTED_OBJECT);
700:       assertEquals(56, Node.CHANGE_TIME);
701:       assertEquals(49, Node.DIRECT_EVAL);
702:       assertNotSame(node1, node0);
703:       assertNotNull(iterable0);
704:       assertFalse(node1.equals((Object)node0));
705:       assertFalse(node1.isInc());
706:       assertFalse(node1.isHook());
707:       assertFalse(node1.isIn());
708:       assertFalse(node1.isThrow());
709:       assertFalse(node1.isCase());
710:       assertFalse(node1.isFalse());
711:       assertFalse(node1.isGetterDef());
712:       assertFalse(node1.isArrayLit());
713:       assertFalse(node1.isAnd());
714:       assertFalse(node1.isSwitch());
715:       assertFalse(node1.isScript());
716:       assertEquals(40, node1.getType());
717:       assertFalse(node1.isFunction());
718:       assertFalse(node1.isWith());
719:       assertFalse(node1.isRegExp());
720:       assertFalse(node1.hasOneChild());
721:       assertEquals(54, node1.getCharno());
722:       assertFalse(node1.isTry());
723:       assertFalse(node1.isIf());
724:       assertFalse(node1.isThis());
725:       assertFalse(node1.isSetterDef());
726:       assertFalse(node1.isNE());
727:       assertFalse(node1.isFor());
728:       assertFalse(node1.isInstanceOf());
729:       assertFalse(node1.isCatch());
730:       assertFalse(node1.isWhile());
731:       assertFalse(node1.isBlock());
732:       assertFalse(node1.isContinue());
733:       assertEquals(49206, node1.getSourcePosition());
734:       assertFalse(node1.hasMoreThanOneChild());
735:       assertEquals(12, node1.getLineno());
736:       assertFalse(node1.isReturn());
737:       assertFalse(node1.isVar());
738:       assertFalse(node1.isAdd());
739:       assertFalse(node1.isNew());
740:       assertFalse(node1.isAssignAdd());
741:       assertTrue(node1.isString());
742:       assertFalse(node1.isDo());
743:       assertFalse(node1.isNumber());
744:       assertFalse(node1.isParamList());
745:       assertFalse(node1.isLabel());
746:       assertFalse(node1.isCast());
747:       assertFalse(node1.isStringKey());
748:       assertFalse(node1.isLabelName());
749:       assertFalse(node1.isDefaultCase());
750:       assertFalse(node1.isExprResult());
751:       assertFalse(node1.isTrue());
752:       assertFalse(node1.isDebugger());
753:       assertFalse(node1.isNot());
754:       assertFalse(node1.isObjectLit());
755:       assertEquals(0, node1.getChildCount());
756:       assertFalse(node1.isGetProp());
757:       assertFalse(node1.isDec());
758:       assertFalse(node1.isBreak());
759:       assertFalse(node1.hasChildren());
760:       assertFalse(node1.isEmpty());
761:       assertFalse(node1.isNull());
762:       assertFalse(node1.isComma());
763:       assertFalse(node1.isAssign());
764:       assertFalse(node1.isTypeOf());
765:       assertFalse(node1.isOr());
766:       assertFalse(node1.isCall());
767:       assertFalse(node1.isGetElem());
768:       assertFalse(node1.isDelProp());
769:       assertFalse(node1.isVoid());
770:       assertFalse(node1.isName());
771:       
772:       boolean boolean3 = node1.isNoSideEffectsCall();
773:       assertFalse(boolean3);
774:       assertEquals(37, Node.OPT_ARG_NAME);
775:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
776:       assertEquals(47, Node.IS_DISPATCHER);
777:       assertEquals(51, Node.STATIC_SOURCE_FILE);
778:       assertEquals(2, Node.POST_FLAG);
779:       assertEquals(1, Node.DECR_FLAG);
780:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
781:       assertEquals(29, Node.JSDOC_INFO_PROP);
782:       assertEquals(12, Node.COLUMN_BITS);
783:       assertEquals(57, Node.LAST_PROP);
784:       assertEquals(32, Node.INCRDECR_PROP);
785:       assertEquals(54, Node.SLASH_V);
786:       assertEquals(30, Node.VAR_ARGS_NAME);
787:       assertEquals(40, Node.ORIGINALNAME_PROP);
788:       assertEquals(46, Node.IS_NAMESPACE);
789:       assertEquals(43, Node.IS_CONSTANT_NAME);
790:       assertEquals(48, Node.DIRECTIVES);
791:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
792:       assertEquals(39, Node.EMPTY_BLOCK);
793:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
794:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
795:       assertEquals(50, Node.FREE_CALL);
796:       assertEquals(4095, Node.COLUMN_MASK);
797:       assertEquals(8, Node.FLAG_NO_THROWS);
798:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
799:       assertEquals(55, Node.INFERRED_FUNCTION);
800:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
801:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
802:       assertEquals(15, Node.NO_SIDE_EFFECTS);
803:       assertEquals(53, Node.INPUT_ID);
804:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
805:       assertEquals(36, Node.QUOTED_PROP);
806:       assertEquals(52, Node.LENGTH);
807:       assertEquals(57, Node.REFLECTED_OBJECT);
808:       assertEquals(56, Node.CHANGE_TIME);
809:       assertEquals(49, Node.DIRECT_EVAL);
810:       assertNotSame(node1, node0);
811:       assertFalse(node1.equals((Object)node0));
812:       assertTrue(boolean3 == boolean2);
813:       assertTrue(boolean3 == boolean1);
814:       assertFalse(boolean3 == boolean0);
815:       assertFalse(node1.isInc());
816:       assertFalse(node1.isHook());
817:       assertFalse(node1.isIn());
818:       assertFalse(node1.isThrow());
819:       assertFalse(node1.isCase());
820:       assertFalse(node1.isFalse());
821:       assertFalse(node1.isGetterDef());
822:       assertFalse(node1.isArrayLit());
823:       assertFalse(node1.isAnd());
824:       assertFalse(node1.isSwitch());
825:       assertFalse(node1.isScript());
826:       assertEquals(40, node1.getType());
827:       assertFalse(node1.isFunction());
828:       assertFalse(node1.isWith());
829:       assertFalse(node1.isRegExp());
830:       assertFalse(node1.hasOneChild());
831:       assertEquals(54, node1.getCharno());
832:       assertFalse(node1.isTry());
833:       assertFalse(node1.isIf());
834:       assertFalse(node1.isThis());
835:       assertFalse(node1.isSetterDef());
836:       assertFalse(node1.isNE());
837:       assertFalse(node1.isFor());
838:       assertFalse(node1.isInstanceOf());
839:       assertFalse(node1.isCatch());
840:       assertFalse(node1.isWhile());
841:       assertFalse(node1.isBlock());
842:       assertFalse(node1.isContinue());
843:       assertEquals(49206, node1.getSourcePosition());
844:       assertFalse(node1.hasMoreThanOneChild());
845:       assertEquals(12, node1.getLineno());
846:       assertFalse(node1.isReturn());
847:       assertFalse(node1.isVar());
848:       assertFalse(node1.isAdd());
849:       assertFalse(node1.isNew());
850:       assertFalse(node1.isAssignAdd());
851:       assertTrue(node1.isString());
852:       assertFalse(node1.isDo());
853:       assertFalse(node1.isNumber());
854:       assertFalse(node1.isParamList());
855:       assertFalse(node1.isLabel());
856:       assertFalse(node1.isCast());
857:       assertFalse(node1.isStringKey());
858:       assertFalse(node1.isLabelName());
859:       assertFalse(node1.isDefaultCase());
860:       assertFalse(node1.isExprResult());
861:       assertFalse(node1.isTrue());
862:       assertFalse(node1.isDebugger());
863:       assertFalse(node1.isNot());
864:       assertFalse(node1.isObjectLit());
865:       assertEquals(0, node1.getChildCount());
866:       assertFalse(node1.isGetProp());
867:       assertFalse(node1.isDec());
868:       assertFalse(node1.isBreak());
869:       assertFalse(node1.hasChildren());
870:       assertFalse(node1.isEmpty());
871:       assertFalse(node1.isNull());
872:       assertFalse(node1.isComma());
873:       assertFalse(node1.isAssign());
874:       assertFalse(node1.isTypeOf());
875:       assertFalse(node1.isOr());
876:       assertFalse(node1.isCall());
877:       assertFalse(node1.isGetElem());
878:       assertFalse(node1.isDelProp());
879:       assertFalse(node1.isVoid());
880:       assertFalse(node1.isName());
881:       
882:       boolean boolean4 = node1.isCall();
883:       assertFalse(boolean4);
884:       assertEquals(37, Node.OPT_ARG_NAME);
885:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
886:       assertEquals(47, Node.IS_DISPATCHER);
887:       assertEquals(51, Node.STATIC_SOURCE_FILE);
888:       assertEquals(2, Node.POST_FLAG);
889:       assertEquals(1, Node.DECR_FLAG);
890:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
891:       assertEquals(29, Node.JSDOC_INFO_PROP);
892:       assertEquals(12, Node.COLUMN_BITS);
893:       assertEquals(57, Node.LAST_PROP);
894:       assertEquals(32, Node.INCRDECR_PROP);
895:       assertEquals(54, Node.SLASH_V);
896:       assertEquals(30, Node.VAR_ARGS_NAME);
897:       assertEquals(40, Node.ORIGINALNAME_PROP);
898:       assertEquals(46, Node.IS_NAMESPACE);
899:       assertEquals(43, Node.IS_CONSTANT_NAME);
900:       assertEquals(48, Node.DIRECTIVES);
901:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
902:       assertEquals(39, Node.EMPTY_BLOCK);
903:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
904:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
905:       assertEquals(50, Node.FREE_CALL);
906:       assertEquals(4095, Node.COLUMN_MASK);
907:       assertEquals(8, Node.FLAG_NO_THROWS);
908:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
909:       assertEquals(55, Node.INFERRED_FUNCTION);
910:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
911:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
912:       assertEquals(15, Node.NO_SIDE_EFFECTS);
913:       assertEquals(53, Node.INPUT_ID);
914:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
915:       assertEquals(36, Node.QUOTED_PROP);
916:       assertEquals(52, Node.LENGTH);
917:       assertEquals(57, Node.REFLECTED_OBJECT);
918:       assertEquals(56, Node.CHANGE_TIME);
919:       assertEquals(49, Node.DIRECT_EVAL);
920:       assertNotSame(node1, node0);
921:       assertFalse(node1.equals((Object)node0));
922:       assertFalse(boolean4 == boolean0);
923:       assertTrue(boolean4 == boolean2);
924:       assertTrue(boolean4 == boolean3);
925:       assertTrue(boolean4 == boolean1);
926:       assertFalse(node1.isInc());
927:       assertFalse(node1.isHook());
928:       assertFalse(node1.isIn());
929:       assertFalse(node1.isThrow());
930:       assertFalse(node1.isCase());
931:       assertFalse(node1.isFalse());
932:       assertFalse(node1.isGetterDef());
933:       assertFalse(node1.isArrayLit());
934:       assertFalse(node1.isAnd());
935:       assertFalse(node1.isSwitch());
936:       assertFalse(node1.isScript());
937:       assertEquals(40, node1.getType());
938:       assertFalse(node1.isFunction());
939:       assertFalse(node1.isWith());
940:       assertFalse(node1.isRegExp());
941:       assertFalse(node1.hasOneChild());
942:       assertEquals(54, node1.getCharno());
943:       assertFalse(node1.isTry());
944:       assertFalse(node1.isIf());
945:       assertFalse(node1.isThis());
946:       assertFalse(node1.isSetterDef());
947:       assertFalse(node1.isNE());
948:       assertFalse(node1.isFor());
949:       assertFalse(node1.isInstanceOf());
950:       assertFalse(node1.isCatch());
951:       assertFalse(node1.isWhile());
952:       assertFalse(node1.isBlock());
953:       assertFalse(node1.isContinue());
954:       assertEquals(49206, node1.getSourcePosition());
955:       assertFalse(node1.hasMoreThanOneChild());
956:       assertEquals(12, node1.getLineno());
957:       assertFalse(node1.isReturn());
958:       assertFalse(node1.isVar());
959:       assertFalse(node1.isAdd());
960:       assertFalse(node1.isNew());
961:       assertFalse(node1.isAssignAdd());
962:       assertTrue(node1.isString());
963:       assertFalse(node1.isDo());
964:       assertFalse(node1.isNumber());
965:       assertFalse(node1.isParamList());
966:       assertFalse(node1.isLabel());
967:       assertFalse(node1.isCast());
968:       assertFalse(node1.isStringKey());
969:       assertFalse(node1.isLabelName());
970:       assertFalse(node1.isDefaultCase());
971:       assertFalse(node1.isExprResult());
972:       assertFalse(node1.isTrue());
973:       assertFalse(node1.isDebugger());
974:       assertFalse(node1.isNot());
975:       assertFalse(node1.isObjectLit());
976:       assertEquals(0, node1.getChildCount());
977:       assertFalse(node1.isGetProp());
978:       assertFalse(node1.isDec());
979:       assertFalse(node1.isBreak());
980:       assertFalse(node1.hasChildren());
981:       assertFalse(node1.isEmpty());
982:       assertFalse(node1.isNull());
983:       assertFalse(node1.isComma());
984:       assertFalse(node1.isAssign());
985:       assertFalse(node1.isTypeOf());
986:       assertFalse(node1.isOr());
987:       assertFalse(node1.isCall());
988:       assertFalse(node1.isGetElem());
989:       assertFalse(node1.isDelProp());
990:       assertFalse(node1.isVoid());
991:       assertFalse(node1.isName());
992:       
993:       int int0 = node0.getType();
994:       assertEquals(40, int0);
995:       assertEquals(30, Node.VAR_ARGS_NAME);
996:       assertEquals(49, Node.DIRECT_EVAL);
997:       assertEquals(57, Node.LAST_PROP);
998:       assertEquals(1, Node.DECR_FLAG);
999:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1000:       assertEquals(46, Node.IS_NAMESPACE);
1001:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1002:       assertEquals(54, Node.SLASH_V);
1003:       assertEquals(12, Node.COLUMN_BITS);
1004:       assertEquals(52, Node.LENGTH);
1005:       assertEquals(32, Node.INCRDECR_PROP);
1006:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1007:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1008:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1009:       assertEquals(29, Node.JSDOC_INFO_PROP);
1010:       assertEquals(56, Node.CHANGE_TIME);
1011:       assertEquals(57, Node.REFLECTED_OBJECT);
1012:       assertEquals(48, Node.DIRECTIVES);
1013:       assertEquals(4095, Node.COLUMN_MASK);
1014:       assertEquals(37, Node.OPT_ARG_NAME);
1015:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1016:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1017:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1018:       assertEquals(43, Node.IS_CONSTANT_NAME);
1019:       assertEquals(36, Node.QUOTED_PROP);
1020:       assertEquals(8, Node.FLAG_NO_THROWS);
1021:       assertEquals(55, Node.INFERRED_FUNCTION);
1022:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1023:       assertEquals(39, Node.EMPTY_BLOCK);
1024:       assertEquals(53, Node.INPUT_ID);
1025:       assertEquals(50, Node.FREE_CALL);
1026:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1027:       assertEquals(2, Node.POST_FLAG);
1028:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1029:       assertEquals(47, Node.IS_DISPATCHER);
1030:       assertEquals(40, Node.ORIGINALNAME_PROP);
1031:       assertNotSame(node0, node1);
1032:       assertFalse(node0.equals((Object)node1));
1033:       assertFalse(node0.isFalse());
1034:       assertFalse(node0.isHook());
1035:       assertFalse(node0.isThrow());
1036:       assertFalse(node0.isInc());
1037:       assertFalse(node0.isGetProp());
1038:       assertFalse(node0.isCase());
1039:       assertFalse(node0.isComma());
1040:       assertFalse(node0.isThis());
1041:       assertFalse(node0.isExprResult());
1042:       assertFalse(node0.isDelProp());
1043:       assertFalse(node0.isWith());
1044:       assertFalse(node0.isBreak());
1045:       assertFalse(node0.isInstanceOf());
1046:       assertEquals(162, node0.getLineno());
1047:       assertFalse(node0.isAssign());
1048:       assertFalse(node0.hasChildren());
1049:       assertFalse(node0.isIf());
1050:       assertFalse(node0.isNE());
1051:       assertFalse(node0.isDebugger());
1052:       assertFalse(node0.isIn());
1053:       assertFalse(node0.isAnd());
1054:       assertFalse(node0.isContinue());
1055:       assertFalse(node0.isNot());
1056:       assertFalse(node0.isObjectLit());
1057:       assertEquals(40, node0.getType());
1058:       assertEquals(162, node0.getCharno());
1059:       assertFalse(node0.isFunction());
1060:       assertEquals(663714, node0.getSourcePosition());
1061:       assertFalse(node0.isCast());
1062:       assertFalse(node0.isCall());
1063:       assertFalse(node0.isName());
1064:       assertFalse(node0.isStringKey());
1065:       assertFalse(node0.isBlock());
1066:       assertFalse(node0.isNull());
1067:       assertFalse(node0.isVar());
1068:       assertFalse(node0.isSetterDef());
1069:       assertTrue(node0.isString());
1070:       assertFalse(node0.isNew());
1071:       assertFalse(node0.isAdd());
1072:       assertFalse(node0.hasMoreThanOneChild());
1073:       assertFalse(node0.isCatch());
1074:       assertFalse(node0.isReturn());
1075:       assertFalse(node0.isWhile());
1076:       assertFalse(node0.isDec());
1077:       assertFalse(node0.isTypeOf());
1078:       assertFalse(node0.isVoid());
1079:       assertFalse(node0.isRegExp());
1080:       assertFalse(node0.isGetElem());
1081:       assertFalse(node0.isArrayLit());
1082:       assertFalse(node0.hasOneChild());
1083:       assertFalse(node0.isLabelName());
1084:       assertFalse(node0.isFor());
1085:       assertFalse(node0.isTrue());
1086:       assertFalse(node0.isNumber());
1087:       assertFalse(node0.isOr());
1088:       assertFalse(node0.isTry());
1089:       assertFalse(node0.isGetterDef());
1090:       assertFalse(node0.isEmpty());
1091:       assertFalse(node0.isScript());
1092:       assertEquals(0, node0.getChildCount());
1093:       assertFalse(node0.isDo());
1094:       assertFalse(node0.isAssignAdd());
1095:       assertFalse(node0.isDefaultCase());
1096:       assertFalse(node0.isLabel());
1097:       assertFalse(node0.isSwitch());
1098:       assertFalse(node0.isParamList());
1099:   }
1100: }
RegularFileObject[/tmp/EvoSuite_153_1628157887082/com/google/javascript/rhino/Node_153_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:47 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_153_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_153_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_153_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:47.207 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

Node node0 = Node.newString("com.google.javacript.rhino.jstype.NumbrType", 162, 162);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertEquals(162, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertEquals(162, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(663714, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());

node0.detachChildren();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertEquals(162, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertEquals(162, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(663714, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());

Node node1 = Node.newString("", 12, 54);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals(40, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertEquals(54, node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertEquals(49206, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(12, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isName());

boolean boolean1 = node0.isEquivalentTo(node1, true, true, true);
assertFalse(boolean1);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertEquals(162, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertEquals(162, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(663714, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals(40, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertEquals(54, node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertEquals(49206, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(12, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isName());

boolean boolean2 = node1.isDo();
assertFalse(boolean2);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals(40, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertEquals(54, node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertEquals(49206, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(12, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isName());

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node1, node0);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals(40, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertEquals(54, node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertEquals(49206, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(12, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isName());

boolean boolean3 = node1.isNoSideEffectsCall();
assertFalse(boolean3);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals(40, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertEquals(54, node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertEquals(49206, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(12, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isName());

boolean boolean4 = node1.isCall();
assertFalse(boolean4);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals(40, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertEquals(54, node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertEquals(49206, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(12, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isName());

int int0 = node0.getType();
assertEquals(40, int0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertEquals(162, node0.getLineno());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertEquals(162, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(663714, node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());


[MASTER] 10:04:48.356 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_159_1628157887962/com/google/javascript/rhino/Node_159_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_159_1628157887962/com/google/javascript/rhino/Node_159_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:48.356 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:48.356 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:48.378 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 872
[MASTER] 10:04:48.379 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_159_1628157887962/com/google/javascript/rhino/Node_159_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:47 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_159_tmp__ESTest extends Node_159_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString(126, "U`*}|T8Eq#<");
23:       assertEquals(2, Node.POST_FLAG);
24:       assertEquals(56, Node.CHANGE_TIME);
25:       assertEquals(37, Node.OPT_ARG_NAME);
26:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
27:       assertEquals(47, Node.IS_DISPATCHER);
28:       assertEquals(29, Node.JSDOC_INFO_PROP);
29:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
30:       assertEquals(12, Node.COLUMN_BITS);
31:       assertEquals(1, Node.DECR_FLAG);
32:       assertEquals(32, Node.INCRDECR_PROP);
33:       assertEquals(57, Node.LAST_PROP);
34:       assertEquals(36, Node.QUOTED_PROP);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
37:       assertEquals(53, Node.INPUT_ID);
38:       assertEquals(52, Node.LENGTH);
39:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
40:       assertEquals(4095, Node.COLUMN_MASK);
41:       assertEquals(57, Node.REFLECTED_OBJECT);
42:       assertEquals(49, Node.DIRECT_EVAL);
43:       assertEquals(48, Node.DIRECTIVES);
44:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
45:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
46:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
47:       assertEquals(39, Node.EMPTY_BLOCK);
48:       assertEquals(50, Node.FREE_CALL);
49:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(55, Node.INFERRED_FUNCTION);
52:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
53:       assertEquals(43, Node.IS_CONSTANT_NAME);
54:       assertEquals(54, Node.SLASH_V);
55:       assertEquals(30, Node.VAR_ARGS_NAME);
56:       assertEquals(51, Node.STATIC_SOURCE_FILE);
57:       assertEquals(40, Node.ORIGINALNAME_PROP);
58:       assertEquals(46, Node.IS_NAMESPACE);
59:       assertNotNull(node0);
60:       assertFalse(node0.isDo());
61:       assertFalse(node0.isWhile());
62:       assertFalse(node0.hasMoreThanOneChild());
63:       assertFalse(node0.isContinue());
64:       assertFalse(node0.isAssignAdd());
65:       assertFalse(node0.isNew());
66:       assertFalse(node0.isReturn());
67:       assertFalse(node0.isBlock());
68:       assertFalse(node0.isAdd());
69:       assertFalse(node0.isVar());
70:       assertFalse(node0.isAssign());
71:       assertFalse(node0.hasChildren());
72:       assertFalse(node0.isGetElem());
73:       assertFalse(node0.isCall());
74:       assertFalse(node0.isNull());
75:       assertFalse(node0.isDec());
76:       assertFalse(node0.isTypeOf());
77:       assertFalse(node0.isOr());
78:       assertEquals(126, node0.getType());
79:       assertEquals((-1), node0.getLineno());
80:       assertFalse(node0.isExprResult());
81:       assertFalse(node0.isName());
82:       assertFalse(node0.isNot());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isFunction());
85:       assertFalse(node0.isObjectLit());
86:       assertFalse(node0.isGetProp());
87:       assertFalse(node0.isSetterDef());
88:       assertFalse(node0.isThrow());
89:       assertFalse(node0.isCast());
90:       assertEquals((-1), node0.getSourcePosition());
91:       assertFalse(node0.isFalse());
92:       assertFalse(node0.isAnd());
93:       assertFalse(node0.isString());
94:       assertFalse(node0.isCase());
95:       assertTrue(node0.isLabel());
96:       assertFalse(node0.isIn());
97:       assertFalse(node0.isHook());
98:       assertFalse(node0.isInc());
99:       assertFalse(node0.isEmpty());
100:       assertFalse(node0.isFor());
101:       assertFalse(node0.isBreak());
102:       assertFalse(node0.isComma());
103:       assertFalse(node0.isTrue());
104:       assertFalse(node0.isNE());
105:       assertFalse(node0.isVoid());
106:       assertFalse(node0.isIf());
107:       assertFalse(node0.isDelProp());
108:       assertFalse(node0.isWith());
109:       assertFalse(node0.isCatch());
110:       assertFalse(node0.isScript());
111:       assertFalse(node0.isInstanceOf());
112:       assertEquals(0, node0.getChildCount());
113:       assertFalse(node0.isRegExp());
114:       assertFalse(node0.isTry());
115:       assertFalse(node0.isThis());
116:       assertFalse(node0.hasOneChild());
117:       assertFalse(node0.isDefaultCase());
118:       assertFalse(node0.isLabelName());
119:       assertFalse(node0.isStringKey());
120:       assertFalse(node0.isGetterDef());
121:       assertFalse(node0.isNumber());
122:       assertEquals((-1), node0.getCharno());
123:       assertFalse(node0.isSwitch());
124:       assertFalse(node0.isArrayLit());
125:       assertFalse(node0.isParamList());
126:       
127:       Node node1 = Node.newString("U`*}|T8Eq#<");
128:       assertEquals(52, Node.LENGTH);
129:       assertEquals(54, Node.SLASH_V);
130:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
131:       assertEquals(57, Node.REFLECTED_OBJECT);
132:       assertEquals(30, Node.VAR_ARGS_NAME);
133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
134:       assertEquals(49, Node.DIRECT_EVAL);
135:       assertEquals(40, Node.ORIGINALNAME_PROP);
136:       assertEquals(48, Node.DIRECTIVES);
137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
138:       assertEquals(8, Node.FLAG_NO_THROWS);
139:       assertEquals(2, Node.POST_FLAG);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(29, Node.JSDOC_INFO_PROP);
142:       assertEquals(57, Node.LAST_PROP);
143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
144:       assertEquals(55, Node.INFERRED_FUNCTION);
145:       assertEquals(39, Node.EMPTY_BLOCK);
146:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
147:       assertEquals(15, Node.NO_SIDE_EFFECTS);
148:       assertEquals(53, Node.INPUT_ID);
149:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
151:       assertEquals(36, Node.QUOTED_PROP);
152:       assertEquals(43, Node.IS_CONSTANT_NAME);
153:       assertEquals(56, Node.CHANGE_TIME);
154:       assertEquals(37, Node.OPT_ARG_NAME);
155:       assertEquals(32, Node.INCRDECR_PROP);
156:       assertEquals(46, Node.IS_NAMESPACE);
157:       assertEquals(4095, Node.COLUMN_MASK);
158:       assertEquals(12, Node.COLUMN_BITS);
159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
160:       assertEquals(50, Node.FREE_CALL);
161:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
164:       assertNotSame(node1, node0);
165:       assertNotNull(node1);
166:       assertFalse(node1.equals((Object)node0));
167:       assertFalse(node1.isComma());
168:       assertFalse(node1.isThis());
169:       assertFalse(node1.isAnd());
170:       assertFalse(node1.isFalse());
171:       assertFalse(node1.isWith());
172:       assertFalse(node1.isInstanceOf());
173:       assertFalse(node1.isBreak());
174:       assertFalse(node1.isInc());
175:       assertFalse(node1.isThrow());
176:       assertFalse(node1.isIn());
177:       assertFalse(node1.isTypeOf());
178:       assertFalse(node1.isDec());
179:       assertFalse(node1.isAssign());
180:       assertFalse(node1.isOr());
181:       assertEquals((-1), node1.getSourcePosition());
182:       assertFalse(node1.hasChildren());
183:       assertFalse(node1.isReturn());
184:       assertFalse(node1.isContinue());
185:       assertFalse(node1.isCast());
186:       assertFalse(node1.isDelProp());
187:       assertFalse(node1.isGetElem());
188:       assertFalse(node1.isExprResult());
189:       assertFalse(node1.isDebugger());
190:       assertFalse(node1.isWhile());
191:       assertFalse(node1.isNot());
192:       assertFalse(node1.isObjectLit());
193:       assertFalse(node1.isGetProp());
194:       assertFalse(node1.isParamList());
195:       assertEquals(0, node1.getChildCount());
196:       assertFalse(node1.isNull());
197:       assertFalse(node1.isCall());
198:       assertFalse(node1.isStringKey());
199:       assertFalse(node1.isCatch());
200:       assertFalse(node1.isName());
201:       assertFalse(node1.isVoid());
202:       assertFalse(node1.isFunction());
203:       assertFalse(node1.isTrue());
204:       assertFalse(node1.isDefaultCase());
205:       assertFalse(node1.isVar());
206:       assertEquals(40, node1.getType());
207:       assertFalse(node1.isDo());
208:       assertFalse(node1.isEmpty());
209:       assertFalse(node1.isNew());
210:       assertFalse(node1.isAdd());
211:       assertFalse(node1.isSetterDef());
212:       assertFalse(node1.isNE());
213:       assertFalse(node1.isAssignAdd());
214:       assertFalse(node1.isIf());
215:       assertFalse(node1.isNumber());
216:       assertFalse(node1.isGetterDef());
217:       assertFalse(node1.isFor());
218:       assertFalse(node1.isLabel());
219:       assertFalse(node1.hasMoreThanOneChild());
220:       assertEquals((-1), node1.getLineno());
221:       assertFalse(node1.isLabelName());
222:       assertFalse(node1.isArrayLit());
223:       assertEquals((-1), node1.getCharno());
224:       assertTrue(node1.isString());
225:       assertFalse(node1.isTry());
226:       assertFalse(node1.isRegExp());
227:       assertFalse(node1.isSwitch());
228:       assertFalse(node1.isBlock());
229:       assertFalse(node1.isHook());
230:       assertFalse(node1.hasOneChild());
231:       assertFalse(node1.isCase());
232:       assertFalse(node1.isScript());
233:       
234:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
235:       assertEquals(2, Node.POST_FLAG);
236:       assertEquals(56, Node.CHANGE_TIME);
237:       assertEquals(37, Node.OPT_ARG_NAME);
238:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
239:       assertEquals(47, Node.IS_DISPATCHER);
240:       assertEquals(29, Node.JSDOC_INFO_PROP);
241:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
242:       assertEquals(12, Node.COLUMN_BITS);
243:       assertEquals(1, Node.DECR_FLAG);
244:       assertEquals(32, Node.INCRDECR_PROP);
245:       assertEquals(57, Node.LAST_PROP);
246:       assertEquals(36, Node.QUOTED_PROP);
247:       assertEquals(15, Node.NO_SIDE_EFFECTS);
248:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
249:       assertEquals(53, Node.INPUT_ID);
250:       assertEquals(52, Node.LENGTH);
251:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
252:       assertEquals(4095, Node.COLUMN_MASK);
253:       assertEquals(57, Node.REFLECTED_OBJECT);
254:       assertEquals(49, Node.DIRECT_EVAL);
255:       assertEquals(48, Node.DIRECTIVES);
256:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
257:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
258:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
259:       assertEquals(39, Node.EMPTY_BLOCK);
260:       assertEquals(50, Node.FREE_CALL);
261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
262:       assertEquals(8, Node.FLAG_NO_THROWS);
263:       assertEquals(55, Node.INFERRED_FUNCTION);
264:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
265:       assertEquals(43, Node.IS_CONSTANT_NAME);
266:       assertEquals(54, Node.SLASH_V);
267:       assertEquals(30, Node.VAR_ARGS_NAME);
268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
269:       assertEquals(40, Node.ORIGINALNAME_PROP);
270:       assertEquals(46, Node.IS_NAMESPACE);
271:       assertEquals(52, Node.LENGTH);
272:       assertEquals(54, Node.SLASH_V);
273:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
274:       assertEquals(57, Node.REFLECTED_OBJECT);
275:       assertEquals(30, Node.VAR_ARGS_NAME);
276:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
277:       assertEquals(49, Node.DIRECT_EVAL);
278:       assertEquals(40, Node.ORIGINALNAME_PROP);
279:       assertEquals(48, Node.DIRECTIVES);
280:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
281:       assertEquals(8, Node.FLAG_NO_THROWS);
282:       assertEquals(2, Node.POST_FLAG);
283:       assertEquals(47, Node.IS_DISPATCHER);
284:       assertEquals(29, Node.JSDOC_INFO_PROP);
285:       assertEquals(57, Node.LAST_PROP);
286:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
287:       assertEquals(55, Node.INFERRED_FUNCTION);
288:       assertEquals(39, Node.EMPTY_BLOCK);
289:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
290:       assertEquals(15, Node.NO_SIDE_EFFECTS);
291:       assertEquals(53, Node.INPUT_ID);
292:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
293:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
294:       assertEquals(36, Node.QUOTED_PROP);
295:       assertEquals(43, Node.IS_CONSTANT_NAME);
296:       assertEquals(56, Node.CHANGE_TIME);
297:       assertEquals(37, Node.OPT_ARG_NAME);
298:       assertEquals(32, Node.INCRDECR_PROP);
299:       assertEquals(46, Node.IS_NAMESPACE);
300:       assertEquals(4095, Node.COLUMN_MASK);
301:       assertEquals(12, Node.COLUMN_BITS);
302:       assertEquals(51, Node.STATIC_SOURCE_FILE);
303:       assertEquals(50, Node.FREE_CALL);
304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
305:       assertEquals(1, Node.DECR_FLAG);
306:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
307:       assertNotSame(node0, node1);
308:       assertNotSame(node1, node0);
309:       assertNotNull(node_NodeMismatch0);
310:       assertFalse(node0.equals((Object)node1));
311:       assertFalse(node1.equals((Object)node0));
312:       assertFalse(node0.isDo());
313:       assertFalse(node0.isWhile());
314:       assertFalse(node0.hasMoreThanOneChild());
315:       assertFalse(node0.isContinue());
316:       assertFalse(node0.isAssignAdd());
317:       assertFalse(node0.isNew());
318:       assertFalse(node0.isReturn());
319:       assertFalse(node0.isBlock());
320:       assertFalse(node0.isAdd());
321:       assertFalse(node0.isVar());
322:       assertFalse(node0.isAssign());
323:       assertFalse(node0.hasChildren());
324:       assertFalse(node0.isGetElem());
325:       assertFalse(node0.isCall());
326:       assertFalse(node0.isNull());
327:       assertFalse(node0.isDec());
328:       assertFalse(node0.isTypeOf());
329:       assertFalse(node0.isOr());
330:       assertEquals(126, node0.getType());
331:       assertEquals((-1), node0.getLineno());
332:       assertFalse(node0.isExprResult());
333:       assertFalse(node0.isName());
334:       assertFalse(node0.isNot());
335:       assertFalse(node0.isDebugger());
336:       assertFalse(node0.isFunction());
337:       assertFalse(node0.isObjectLit());
338:       assertFalse(node0.isGetProp());
339:       assertFalse(node0.isSetterDef());
340:       assertFalse(node0.isThrow());
341:       assertFalse(node0.isCast());
342:       assertEquals((-1), node0.getSourcePosition());
343:       assertFalse(node0.isFalse());
344:       assertFalse(node0.isAnd());
345:       assertFalse(node0.isString());
346:       assertFalse(node0.isCase());
347:       assertTrue(node0.isLabel());
348:       assertFalse(node0.isIn());
349:       assertFalse(node0.isHook());
350:       assertFalse(node0.isInc());
351:       assertFalse(node0.isEmpty());
352:       assertFalse(node0.isFor());
353:       assertFalse(node0.isBreak());
354:       assertFalse(node0.isComma());
355:       assertFalse(node0.isTrue());
356:       assertFalse(node0.isNE());
357:       assertFalse(node0.isVoid());
358:       assertFalse(node0.isIf());
359:       assertFalse(node0.isDelProp());
360:       assertFalse(node0.isWith());
361:       assertFalse(node0.isCatch());
362:       assertFalse(node0.isScript());
363:       assertFalse(node0.isInstanceOf());
364:       assertEquals(0, node0.getChildCount());
365:       assertFalse(node0.isRegExp());
366:       assertFalse(node0.isTry());
367:       assertFalse(node0.isThis());
368:       assertFalse(node0.hasOneChild());
369:       assertFalse(node0.isDefaultCase());
370:       assertFalse(node0.isLabelName());
371:       assertFalse(node0.isStringKey());
372:       assertFalse(node0.isGetterDef());
373:       assertFalse(node0.isNumber());
374:       assertEquals((-1), node0.getCharno());
375:       assertFalse(node0.isSwitch());
376:       assertFalse(node0.isArrayLit());
377:       assertFalse(node0.isParamList());
378:       assertFalse(node1.isComma());
379:       assertFalse(node1.isThis());
380:       assertFalse(node1.isAnd());
381:       assertFalse(node1.isFalse());
382:       assertFalse(node1.isWith());
383:       assertFalse(node1.isInstanceOf());
384:       assertFalse(node1.isBreak());
385:       assertFalse(node1.isInc());
386:       assertFalse(node1.isThrow());
387:       assertFalse(node1.isIn());
388:       assertFalse(node1.isTypeOf());
389:       assertFalse(node1.isDec());
390:       assertFalse(node1.isAssign());
391:       assertFalse(node1.isOr());
392:       assertEquals((-1), node1.getSourcePosition());
393:       assertFalse(node1.hasChildren());
394:       assertFalse(node1.isReturn());
395:       assertFalse(node1.isContinue());
396:       assertFalse(node1.isCast());
397:       assertFalse(node1.isDelProp());
398:       assertFalse(node1.isGetElem());
399:       assertFalse(node1.isExprResult());
400:       assertFalse(node1.isDebugger());
401:       assertFalse(node1.isWhile());
402:       assertFalse(node1.isNot());
403:       assertFalse(node1.isObjectLit());
404:       assertFalse(node1.isGetProp());
405:       assertFalse(node1.isParamList());
406:       assertEquals(0, node1.getChildCount());
407:       assertFalse(node1.isNull());
408:       assertFalse(node1.isCall());
409:       assertFalse(node1.isStringKey());
410:       assertFalse(node1.isCatch());
411:       assertFalse(node1.isName());
412:       assertFalse(node1.isVoid());
413:       assertFalse(node1.isFunction());
414:       assertFalse(node1.isTrue());
415:       assertFalse(node1.isDefaultCase());
416:       assertFalse(node1.isVar());
417:       assertEquals(40, node1.getType());
418:       assertFalse(node1.isDo());
419:       assertFalse(node1.isEmpty());
420:       assertFalse(node1.isNew());
421:       assertFalse(node1.isAdd());
422:       assertFalse(node1.isSetterDef());
423:       assertFalse(node1.isNE());
424:       assertFalse(node1.isAssignAdd());
425:       assertFalse(node1.isIf());
426:       assertFalse(node1.isNumber());
427:       assertFalse(node1.isGetterDef());
428:       assertFalse(node1.isFor());
429:       assertFalse(node1.isLabel());
430:       assertFalse(node1.hasMoreThanOneChild());
431:       assertEquals((-1), node1.getLineno());
432:       assertFalse(node1.isLabelName());
433:       assertFalse(node1.isArrayLit());
434:       assertEquals((-1), node1.getCharno());
435:       assertTrue(node1.isString());
436:       assertFalse(node1.isTry());
437:       assertFalse(node1.isRegExp());
438:       assertFalse(node1.isSwitch());
439:       assertFalse(node1.isBlock());
440:       assertFalse(node1.isHook());
441:       assertFalse(node1.hasOneChild());
442:       assertFalse(node1.isCase());
443:       assertFalse(node1.isScript());
444:       
445:       JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PROTECTED;
446:       assertEquals(JSDocInfo.Visibility.PROTECTED, jSDocInfo_Visibility0);
447:       
448:       boolean boolean0 = node_NodeMismatch0.equals(jSDocInfo_Visibility0);
449:       assertFalse(boolean0);
450:       assertEquals(2, Node.POST_FLAG);
451:       assertEquals(56, Node.CHANGE_TIME);
452:       assertEquals(37, Node.OPT_ARG_NAME);
453:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
454:       assertEquals(47, Node.IS_DISPATCHER);
455:       assertEquals(29, Node.JSDOC_INFO_PROP);
456:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
457:       assertEquals(12, Node.COLUMN_BITS);
458:       assertEquals(1, Node.DECR_FLAG);
459:       assertEquals(32, Node.INCRDECR_PROP);
460:       assertEquals(57, Node.LAST_PROP);
461:       assertEquals(36, Node.QUOTED_PROP);
462:       assertEquals(15, Node.NO_SIDE_EFFECTS);
463:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
464:       assertEquals(53, Node.INPUT_ID);
465:       assertEquals(52, Node.LENGTH);
466:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
467:       assertEquals(4095, Node.COLUMN_MASK);
468:       assertEquals(57, Node.REFLECTED_OBJECT);
469:       assertEquals(49, Node.DIRECT_EVAL);
470:       assertEquals(48, Node.DIRECTIVES);
471:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
472:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
473:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
474:       assertEquals(39, Node.EMPTY_BLOCK);
475:       assertEquals(50, Node.FREE_CALL);
476:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
477:       assertEquals(8, Node.FLAG_NO_THROWS);
478:       assertEquals(55, Node.INFERRED_FUNCTION);
479:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
480:       assertEquals(43, Node.IS_CONSTANT_NAME);
481:       assertEquals(54, Node.SLASH_V);
482:       assertEquals(30, Node.VAR_ARGS_NAME);
483:       assertEquals(51, Node.STATIC_SOURCE_FILE);
484:       assertEquals(40, Node.ORIGINALNAME_PROP);
485:       assertEquals(46, Node.IS_NAMESPACE);
486:       assertEquals(52, Node.LENGTH);
487:       assertEquals(54, Node.SLASH_V);
488:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
489:       assertEquals(57, Node.REFLECTED_OBJECT);
490:       assertEquals(30, Node.VAR_ARGS_NAME);
491:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
492:       assertEquals(49, Node.DIRECT_EVAL);
493:       assertEquals(40, Node.ORIGINALNAME_PROP);
494:       assertEquals(48, Node.DIRECTIVES);
495:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
496:       assertEquals(8, Node.FLAG_NO_THROWS);
497:       assertEquals(2, Node.POST_FLAG);
498:       assertEquals(47, Node.IS_DISPATCHER);
499:       assertEquals(29, Node.JSDOC_INFO_PROP);
500:       assertEquals(57, Node.LAST_PROP);
501:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
502:       assertEquals(55, Node.INFERRED_FUNCTION);
503:       assertEquals(39, Node.EMPTY_BLOCK);
504:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
505:       assertEquals(15, Node.NO_SIDE_EFFECTS);
506:       assertEquals(53, Node.INPUT_ID);
507:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
508:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
509:       assertEquals(36, Node.QUOTED_PROP);
510:       assertEquals(43, Node.IS_CONSTANT_NAME);
511:       assertEquals(56, Node.CHANGE_TIME);
512:       assertEquals(37, Node.OPT_ARG_NAME);
513:       assertEquals(32, Node.INCRDECR_PROP);
514:       assertEquals(46, Node.IS_NAMESPACE);
515:       assertEquals(4095, Node.COLUMN_MASK);
516:       assertEquals(12, Node.COLUMN_BITS);
517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
518:       assertEquals(50, Node.FREE_CALL);
519:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
520:       assertEquals(1, Node.DECR_FLAG);
521:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
522:       assertNotSame(node0, node1);
523:       assertNotSame(node1, node0);
524:       assertFalse(node0.equals((Object)node1));
525:       assertFalse(node1.equals((Object)node0));
526:       assertFalse(node0.isDo());
527:       assertFalse(node0.isWhile());
528:       assertFalse(node0.hasMoreThanOneChild());
529:       assertFalse(node0.isContinue());
530:       assertFalse(node0.isAssignAdd());
531:       assertFalse(node0.isNew());
532:       assertFalse(node0.isReturn());
533:       assertFalse(node0.isBlock());
534:       assertFalse(node0.isAdd());
535:       assertFalse(node0.isVar());
536:       assertFalse(node0.isAssign());
537:       assertFalse(node0.hasChildren());
538:       assertFalse(node0.isGetElem());
539:       assertFalse(node0.isCall());
540:       assertFalse(node0.isNull());
541:       assertFalse(node0.isDec());
542:       assertFalse(node0.isTypeOf());
543:       assertFalse(node0.isOr());
544:       assertEquals(126, node0.getType());
545:       assertEquals((-1), node0.getLineno());
546:       assertFalse(node0.isExprResult());
547:       assertFalse(node0.isName());
548:       assertFalse(node0.isNot());
549:       assertFalse(node0.isDebugger());
550:       assertFalse(node0.isFunction());
551:       assertFalse(node0.isObjectLit());
552:       assertFalse(node0.isGetProp());
553:       assertFalse(node0.isSetterDef());
554:       assertFalse(node0.isThrow());
555:       assertFalse(node0.isCast());
556:       assertEquals((-1), node0.getSourcePosition());
557:       assertFalse(node0.isFalse());
558:       assertFalse(node0.isAnd());
559:       assertFalse(node0.isString());
560:       assertFalse(node0.isCase());
561:       assertTrue(node0.isLabel());
562:       assertFalse(node0.isIn());
563:       assertFalse(node0.isHook());
564:       assertFalse(node0.isInc());
565:       assertFalse(node0.isEmpty());
566:       assertFalse(node0.isFor());
567:       assertFalse(node0.isBreak());
568:       assertFalse(node0.isComma());
569:       assertFalse(node0.isTrue());
570:       assertFalse(node0.isNE());
571:       assertFalse(node0.isVoid());
572:       assertFalse(node0.isIf());
573:       assertFalse(node0.isDelProp());
574:       assertFalse(node0.isWith());
575:       assertFalse(node0.isCatch());
576:       assertFalse(node0.isScript());
577:       assertFalse(node0.isInstanceOf());
578:       assertEquals(0, node0.getChildCount());
579:       assertFalse(node0.isRegExp());
580:       assertFalse(node0.isTry());
581:       assertFalse(node0.isThis());
582:       assertFalse(node0.hasOneChild());
583:       assertFalse(node0.isDefaultCase());
584:       assertFalse(node0.isLabelName());
585:       assertFalse(node0.isStringKey());
586:       assertFalse(node0.isGetterDef());
587:       assertFalse(node0.isNumber());
588:       assertEquals((-1), node0.getCharno());
589:       assertFalse(node0.isSwitch());
590:       assertFalse(node0.isArrayLit());
591:       assertFalse(node0.isParamList());
592:       assertFalse(node1.isComma());
593:       assertFalse(node1.isThis());
594:       assertFalse(node1.isAnd());
595:       assertFalse(node1.isFalse());
596:       assertFalse(node1.isWith());
597:       assertFalse(node1.isInstanceOf());
598:       assertFalse(node1.isBreak());
599:       assertFalse(node1.isInc());
600:       assertFalse(node1.isThrow());
601:       assertFalse(node1.isIn());
602:       assertFalse(node1.isTypeOf());
603:       assertFalse(node1.isDec());
604:       assertFalse(node1.isAssign());
605:       assertFalse(node1.isOr());
606:       assertEquals((-1), node1.getSourcePosition());
607:       assertFalse(node1.hasChildren());
608:       assertFalse(node1.isReturn());
609:       assertFalse(node1.isContinue());
610:       assertFalse(node1.isCast());
611:       assertFalse(node1.isDelProp());
612:       assertFalse(node1.isGetElem());
613:       assertFalse(node1.isExprResult());
614:       assertFalse(node1.isDebugger());
615:       assertFalse(node1.isWhile());
616:       assertFalse(node1.isNot());
617:       assertFalse(node1.isObjectLit());
618:       assertFalse(node1.isGetProp());
619:       assertFalse(node1.isParamList());
620:       assertEquals(0, node1.getChildCount());
621:       assertFalse(node1.isNull());
622:       assertFalse(node1.isCall());
623:       assertFalse(node1.isStringKey());
624:       assertFalse(node1.isCatch());
625:       assertFalse(node1.isName());
626:       assertFalse(node1.isVoid());
627:       assertFalse(node1.isFunction());
628:       assertFalse(node1.isTrue());
629:       assertFalse(node1.isDefaultCase());
630:       assertFalse(node1.isVar());
631:       assertEquals(40, node1.getType());
632:       assertFalse(node1.isDo());
633:       assertFalse(node1.isEmpty());
634:       assertFalse(node1.isNew());
635:       assertFalse(node1.isAdd());
636:       assertFalse(node1.isSetterDef());
637:       assertFalse(node1.isNE());
638:       assertFalse(node1.isAssignAdd());
639:       assertFalse(node1.isIf());
640:       assertFalse(node1.isNumber());
641:       assertFalse(node1.isGetterDef());
642:       assertFalse(node1.isFor());
643:       assertFalse(node1.isLabel());
644:       assertFalse(node1.hasMoreThanOneChild());
645:       assertEquals((-1), node1.getLineno());
646:       assertFalse(node1.isLabelName());
647:       assertFalse(node1.isArrayLit());
648:       assertEquals((-1), node1.getCharno());
649:       assertTrue(node1.isString());
650:       assertFalse(node1.isTry());
651:       assertFalse(node1.isRegExp());
652:       assertFalse(node1.isSwitch());
653:       assertFalse(node1.isBlock());
654:       assertFalse(node1.isHook());
655:       assertFalse(node1.hasOneChild());
656:       assertFalse(node1.isCase());
657:       assertFalse(node1.isScript());
658:       
659:       boolean boolean1 = node1.isEquivalentTo(node0, false, true, false);
660:       assertFalse(boolean1);
661:       assertEquals(2, Node.POST_FLAG);
662:       assertEquals(56, Node.CHANGE_TIME);
663:       assertEquals(37, Node.OPT_ARG_NAME);
664:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
665:       assertEquals(47, Node.IS_DISPATCHER);
666:       assertEquals(29, Node.JSDOC_INFO_PROP);
667:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
668:       assertEquals(12, Node.COLUMN_BITS);
669:       assertEquals(1, Node.DECR_FLAG);
670:       assertEquals(32, Node.INCRDECR_PROP);
671:       assertEquals(57, Node.LAST_PROP);
672:       assertEquals(36, Node.QUOTED_PROP);
673:       assertEquals(15, Node.NO_SIDE_EFFECTS);
674:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
675:       assertEquals(53, Node.INPUT_ID);
676:       assertEquals(52, Node.LENGTH);
677:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
678:       assertEquals(4095, Node.COLUMN_MASK);
679:       assertEquals(57, Node.REFLECTED_OBJECT);
680:       assertEquals(49, Node.DIRECT_EVAL);
681:       assertEquals(48, Node.DIRECTIVES);
682:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
683:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
684:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
685:       assertEquals(39, Node.EMPTY_BLOCK);
686:       assertEquals(50, Node.FREE_CALL);
687:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
688:       assertEquals(8, Node.FLAG_NO_THROWS);
689:       assertEquals(55, Node.INFERRED_FUNCTION);
690:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
691:       assertEquals(43, Node.IS_CONSTANT_NAME);
692:       assertEquals(54, Node.SLASH_V);
693:       assertEquals(30, Node.VAR_ARGS_NAME);
694:       assertEquals(51, Node.STATIC_SOURCE_FILE);
695:       assertEquals(40, Node.ORIGINALNAME_PROP);
696:       assertEquals(46, Node.IS_NAMESPACE);
697:       assertEquals(52, Node.LENGTH);
698:       assertEquals(54, Node.SLASH_V);
699:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
700:       assertEquals(57, Node.REFLECTED_OBJECT);
701:       assertEquals(30, Node.VAR_ARGS_NAME);
702:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
703:       assertEquals(49, Node.DIRECT_EVAL);
704:       assertEquals(40, Node.ORIGINALNAME_PROP);
705:       assertEquals(48, Node.DIRECTIVES);
706:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
707:       assertEquals(8, Node.FLAG_NO_THROWS);
708:       assertEquals(2, Node.POST_FLAG);
709:       assertEquals(47, Node.IS_DISPATCHER);
710:       assertEquals(29, Node.JSDOC_INFO_PROP);
711:       assertEquals(57, Node.LAST_PROP);
712:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
713:       assertEquals(55, Node.INFERRED_FUNCTION);
714:       assertEquals(39, Node.EMPTY_BLOCK);
715:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
716:       assertEquals(15, Node.NO_SIDE_EFFECTS);
717:       assertEquals(53, Node.INPUT_ID);
718:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
719:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
720:       assertEquals(36, Node.QUOTED_PROP);
721:       assertEquals(43, Node.IS_CONSTANT_NAME);
722:       assertEquals(56, Node.CHANGE_TIME);
723:       assertEquals(37, Node.OPT_ARG_NAME);
724:       assertEquals(32, Node.INCRDECR_PROP);
725:       assertEquals(46, Node.IS_NAMESPACE);
726:       assertEquals(4095, Node.COLUMN_MASK);
727:       assertEquals(12, Node.COLUMN_BITS);
728:       assertEquals(51, Node.STATIC_SOURCE_FILE);
729:       assertEquals(50, Node.FREE_CALL);
730:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
731:       assertEquals(1, Node.DECR_FLAG);
732:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
733:       assertNotSame(node0, node1);
734:       assertNotSame(node1, node0);
735:       assertFalse(node0.equals((Object)node1));
736:       assertFalse(node1.equals((Object)node0));
737:       assertTrue(boolean1 == boolean0);
738:       assertFalse(node0.isDo());
739:       assertFalse(node0.isWhile());
740:       assertFalse(node0.hasMoreThanOneChild());
741:       assertFalse(node0.isContinue());
742:       assertFalse(node0.isAssignAdd());
743:       assertFalse(node0.isNew());
744:       assertFalse(node0.isReturn());
745:       assertFalse(node0.isBlock());
746:       assertFalse(node0.isAdd());
747:       assertFalse(node0.isVar());
748:       assertFalse(node0.isAssign());
749:       assertFalse(node0.hasChildren());
750:       assertFalse(node0.isGetElem());
751:       assertFalse(node0.isCall());
752:       assertFalse(node0.isNull());
753:       assertFalse(node0.isDec());
754:       assertFalse(node0.isTypeOf());
755:       assertFalse(node0.isOr());
756:       assertEquals(126, node0.getType());
757:       assertEquals((-1), node0.getLineno());
758:       assertFalse(node0.isExprResult());
759:       assertFalse(node0.isName());
760:       assertFalse(node0.isNot());
761:       assertFalse(node0.isDebugger());
762:       assertFalse(node0.isFunction());
763:       assertFalse(node0.isObjectLit());
764:       assertFalse(node0.isGetProp());
765:       assertFalse(node0.isSetterDef());
766:       assertFalse(node0.isThrow());
767:       assertFalse(node0.isCast());
768:       assertEquals((-1), node0.getSourcePosition());
769:       assertFalse(node0.isFalse());
770:       assertFalse(node0.isAnd());
771:       assertFalse(node0.isString());
772:       assertFalse(node0.isCase());
773:       assertTrue(node0.isLabel());
774:       assertFalse(node0.isIn());
775:       assertFalse(node0.isHook());
776:       assertFalse(node0.isInc());
777:       assertFalse(node0.isEmpty());
778:       assertFalse(node0.isFor());
779:       assertFalse(node0.isBreak());
780:       assertFalse(node0.isComma());
781:       assertFalse(node0.isTrue());
782:       assertFalse(node0.isNE());
783:       assertFalse(node0.isVoid());
784:       assertFalse(node0.isIf());
785:       assertFalse(node0.isDelProp());
786:       assertFalse(node0.isWith());
787:       assertFalse(node0.isCatch());
788:       assertFalse(node0.isScript());
789:       assertFalse(node0.isInstanceOf());
790:       assertEquals(0, node0.getChildCount());
791:       assertFalse(node0.isRegExp());
792:       assertFalse(node0.isTry());
793:       assertFalse(node0.isThis());
794:       assertFalse(node0.hasOneChild());
795:       assertFalse(node0.isDefaultCase());
796:       assertFalse(node0.isLabelName());
797:       assertFalse(node0.isStringKey());
798:       assertFalse(node0.isGetterDef());
799:       assertFalse(node0.isNumber());
800:       assertEquals((-1), node0.getCharno());
801:       assertFalse(node0.isSwitch());
802:       assertFalse(node0.isArrayLit());
803:       assertFalse(node0.isParamList());
804:       assertFalse(node1.isComma());
805:       assertFalse(node1.isThis());
806:       assertFalse(node1.isAnd());
807:       assertFalse(node1.isFalse());
808:       assertFalse(node1.isWith());
809:       assertFalse(node1.isInstanceOf());
810:       assertFalse(node1.isBreak());
811:       assertFalse(node1.isInc());
812:       assertFalse(node1.isThrow());
813:       assertFalse(node1.isIn());
814:       assertFalse(node1.isTypeOf());
815:       assertFalse(node1.isDec());
816:       assertFalse(node1.isAssign());
817:       assertFalse(node1.isOr());
818:       assertEquals((-1), node1.getSourcePosition());
819:       assertFalse(node1.hasChildren());
820:       assertFalse(node1.isReturn());
821:       assertFalse(node1.isContinue());
822:       assertFalse(node1.isCast());
823:       assertFalse(node1.isDelProp());
824:       assertFalse(node1.isGetElem());
825:       assertFalse(node1.isExprResult());
826:       assertFalse(node1.isDebugger());
827:       assertFalse(node1.isWhile());
828:       assertFalse(node1.isNot());
829:       assertFalse(node1.isObjectLit());
830:       assertFalse(node1.isGetProp());
831:       assertFalse(node1.isParamList());
832:       assertEquals(0, node1.getChildCount());
833:       assertFalse(node1.isNull());
834:       assertFalse(node1.isCall());
835:       assertFalse(node1.isStringKey());
836:       assertFalse(node1.isCatch());
837:       assertFalse(node1.isName());
838:       assertFalse(node1.isVoid());
839:       assertFalse(node1.isFunction());
840:       assertFalse(node1.isTrue());
841:       assertFalse(node1.isDefaultCase());
842:       assertFalse(node1.isVar());
843:       assertEquals(40, node1.getType());
844:       assertFalse(node1.isDo());
845:       assertFalse(node1.isEmpty());
846:       assertFalse(node1.isNew());
847:       assertFalse(node1.isAdd());
848:       assertFalse(node1.isSetterDef());
849:       assertFalse(node1.isNE());
850:       assertFalse(node1.isAssignAdd());
851:       assertFalse(node1.isIf());
852:       assertFalse(node1.isNumber());
853:       assertFalse(node1.isGetterDef());
854:       assertFalse(node1.isFor());
855:       assertFalse(node1.isLabel());
856:       assertFalse(node1.hasMoreThanOneChild());
857:       assertEquals((-1), node1.getLineno());
858:       assertFalse(node1.isLabelName());
859:       assertFalse(node1.isArrayLit());
860:       assertEquals((-1), node1.getCharno());
861:       assertTrue(node1.isString());
862:       assertFalse(node1.isTry());
863:       assertFalse(node1.isRegExp());
864:       assertFalse(node1.isSwitch());
865:       assertFalse(node1.isBlock());
866:       assertFalse(node1.isHook());
867:       assertFalse(node1.hasOneChild());
868:       assertFalse(node1.isCase());
869:       assertFalse(node1.isScript());
870:       
871:       Iterable<Node> iterable0 = node1.children();
872:       assertFalse(iterable0.contains(node0));
873:       assertEquals(52, Node.LENGTH);
874:       assertEquals(54, Node.SLASH_V);
875:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
876:       assertEquals(57, Node.REFLECTED_OBJECT);
877:       assertEquals(30, Node.VAR_ARGS_NAME);
878:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
879:       assertEquals(49, Node.DIRECT_EVAL);
880:       assertEquals(40, Node.ORIGINALNAME_PROP);
881:       assertEquals(48, Node.DIRECTIVES);
882:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
883:       assertEquals(8, Node.FLAG_NO_THROWS);
884:       assertEquals(2, Node.POST_FLAG);
885:       assertEquals(47, Node.IS_DISPATCHER);
886:       assertEquals(29, Node.JSDOC_INFO_PROP);
887:       assertEquals(57, Node.LAST_PROP);
888:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
889:       assertEquals(55, Node.INFERRED_FUNCTION);
890:       assertEquals(39, Node.EMPTY_BLOCK);
891:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
892:       assertEquals(15, Node.NO_SIDE_EFFECTS);
893:       assertEquals(53, Node.INPUT_ID);
894:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
895:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
896:       assertEquals(36, Node.QUOTED_PROP);
897:       assertEquals(43, Node.IS_CONSTANT_NAME);
898:       assertEquals(56, Node.CHANGE_TIME);
899:       assertEquals(37, Node.OPT_ARG_NAME);
900:       assertEquals(32, Node.INCRDECR_PROP);
901:       assertEquals(46, Node.IS_NAMESPACE);
902:       assertEquals(4095, Node.COLUMN_MASK);
903:       assertEquals(12, Node.COLUMN_BITS);
904:       assertEquals(51, Node.STATIC_SOURCE_FILE);
905:       assertEquals(50, Node.FREE_CALL);
906:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
907:       assertEquals(1, Node.DECR_FLAG);
908:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
909:       assertNotSame(node1, node0);
910:       assertNotNull(iterable0);
911:       assertFalse(node1.equals((Object)node0));
912:       assertFalse(node1.isComma());
913:       assertFalse(node1.isThis());
914:       assertFalse(node1.isAnd());
915:       assertFalse(node1.isFalse());
916:       assertFalse(node1.isWith());
917:       assertFalse(node1.isInstanceOf());
918:       assertFalse(node1.isBreak());
919:       assertFalse(node1.isInc());
920:       assertFalse(node1.isThrow());
921:       assertFalse(node1.isIn());
922:       assertFalse(node1.isTypeOf());
923:       assertFalse(node1.isDec());
924:       assertFalse(node1.isAssign());
925:       assertFalse(node1.isOr());
926:       assertEquals((-1), node1.getSourcePosition());
927:       assertFalse(node1.hasChildren());
928:       assertFalse(node1.isReturn());
929:       assertFalse(node1.isContinue());
930:       assertFalse(node1.isCast());
931:       assertFalse(node1.isDelProp());
932:       assertFalse(node1.isGetElem());
933:       assertFalse(node1.isExprResult());
934:       assertFalse(node1.isDebugger());
935:       assertFalse(node1.isWhile());
936:       assertFalse(node1.isNot());
937:       assertFalse(node1.isObjectLit());
938:       assertFalse(node1.isGetProp());
939:       assertFalse(node1.isParamList());
940:       assertEquals(0, node1.getChildCount());
941:       assertFalse(node1.isNull());
942:       assertFalse(node1.isCall());
943:       assertFalse(node1.isStringKey());
944:       assertFalse(node1.isCatch());
945:       assertFalse(node1.isName());
946:       assertFalse(node1.isVoid());
947:       assertFalse(node1.isFunction());
948:       assertFalse(node1.isTrue());
949:       assertFalse(node1.isDefaultCase());
950:       assertFalse(node1.isVar());
951:       assertEquals(40, node1.getType());
952:       assertFalse(node1.isDo());
953:       assertFalse(node1.isEmpty());
954:       assertFalse(node1.isNew());
955:       assertFalse(node1.isAdd());
956:       assertFalse(node1.isSetterDef());
957:       assertFalse(node1.isNE());
958:       assertFalse(node1.isAssignAdd());
959:       assertFalse(node1.isIf());
960:       assertFalse(node1.isNumber());
961:       assertFalse(node1.isGetterDef());
962:       assertFalse(node1.isFor());
963:       assertFalse(node1.isLabel());
964:       assertFalse(node1.hasMoreThanOneChild());
965:       assertEquals((-1), node1.getLineno());
966:       assertFalse(node1.isLabelName());
967:       assertFalse(node1.isArrayLit());
968:       assertEquals((-1), node1.getCharno());
969:       assertTrue(node1.isString());
970:       assertFalse(node1.isTry());
971:       assertFalse(node1.isRegExp());
972:       assertFalse(node1.isSwitch());
973:       assertFalse(node1.isBlock());
974:       assertFalse(node1.isHook());
975:       assertFalse(node1.hasOneChild());
976:       assertFalse(node1.isCase());
977:       assertFalse(node1.isScript());
978:       
979:       boolean boolean2 = node1.isIf();
980:       assertFalse(boolean2);
981:       assertEquals(52, Node.LENGTH);
982:       assertEquals(54, Node.SLASH_V);
983:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
984:       assertEquals(57, Node.REFLECTED_OBJECT);
985:       assertEquals(30, Node.VAR_ARGS_NAME);
986:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
987:       assertEquals(49, Node.DIRECT_EVAL);
988:       assertEquals(40, Node.ORIGINALNAME_PROP);
989:       assertEquals(48, Node.DIRECTIVES);
990:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
991:       assertEquals(8, Node.FLAG_NO_THROWS);
992:       assertEquals(2, Node.POST_FLAG);
993:       assertEquals(47, Node.IS_DISPATCHER);
994:       assertEquals(29, Node.JSDOC_INFO_PROP);
995:       assertEquals(57, Node.LAST_PROP);
996:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
997:       assertEquals(55, Node.INFERRED_FUNCTION);
998:       assertEquals(39, Node.EMPTY_BLOCK);
999:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1000:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1001:       assertEquals(53, Node.INPUT_ID);
1002:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1003:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1004:       assertEquals(36, Node.QUOTED_PROP);
1005:       assertEquals(43, Node.IS_CONSTANT_NAME);
1006:       assertEquals(56, Node.CHANGE_TIME);
1007:       assertEquals(37, Node.OPT_ARG_NAME);
1008:       assertEquals(32, Node.INCRDECR_PROP);
1009:       assertEquals(46, Node.IS_NAMESPACE);
1010:       assertEquals(4095, Node.COLUMN_MASK);
1011:       assertEquals(12, Node.COLUMN_BITS);
1012:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1013:       assertEquals(50, Node.FREE_CALL);
1014:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1015:       assertEquals(1, Node.DECR_FLAG);
1016:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1017:       assertNotSame(node1, node0);
1018:       assertFalse(node1.equals((Object)node0));
1019:       assertTrue(boolean2 == boolean1);
1020:       assertTrue(boolean2 == boolean0);
1021:       assertFalse(node1.isComma());
1022:       assertFalse(node1.isThis());
1023:       assertFalse(node1.isAnd());
1024:       assertFalse(node1.isFalse());
1025:       assertFalse(node1.isWith());
1026:       assertFalse(node1.isInstanceOf());
1027:       assertFalse(node1.isBreak());
1028:       assertFalse(node1.isInc());
1029:       assertFalse(node1.isThrow());
1030:       assertFalse(node1.isIn());
1031:       assertFalse(node1.isTypeOf());
1032:       assertFalse(node1.isDec());
1033:       assertFalse(node1.isAssign());
1034:       assertFalse(node1.isOr());
1035:       assertEquals((-1), node1.getSourcePosition());
1036:       assertFalse(node1.hasChildren());
1037:       assertFalse(node1.isReturn());
1038:       assertFalse(node1.isContinue());
1039:       assertFalse(node1.isCast());
1040:       assertFalse(node1.isDelProp());
1041:       assertFalse(node1.isGetElem());
1042:       assertFalse(node1.isExprResult());
1043:       assertFalse(node1.isDebugger());
1044:       assertFalse(node1.isWhile());
1045:       assertFalse(node1.isNot());
1046:       assertFalse(node1.isObjectLit());
1047:       assertFalse(node1.isGetProp());
1048:       assertFalse(node1.isParamList());
1049:       assertEquals(0, node1.getChildCount());
1050:       assertFalse(node1.isNull());
1051:       assertFalse(node1.isCall());
1052:       assertFalse(node1.isStringKey());
1053:       assertFalse(node1.isCatch());
1054:       assertFalse(node1.isName());
1055:       assertFalse(node1.isVoid());
1056:       assertFalse(node1.isFunction());
1057:       assertFalse(node1.isTrue());
1058:       assertFalse(node1.isDefaultCase());
1059:       assertFalse(node1.isVar());
1060:       assertEquals(40, node1.getType());
1061:       assertFalse(node1.isDo());
1062:       assertFalse(node1.isEmpty());
1063:       assertFalse(node1.isNew());
1064:       assertFalse(node1.isAdd());
1065:       assertFalse(node1.isSetterDef());
1066:       assertFalse(node1.isNE());
1067:       assertFalse(node1.isAssignAdd());
1068:       assertFalse(node1.isIf());
1069:       assertFalse(node1.isNumber());
1070:       assertFalse(node1.isGetterDef());
1071:       assertFalse(node1.isFor());
1072:       assertFalse(node1.isLabel());
1073:       assertFalse(node1.hasMoreThanOneChild());
1074:       assertEquals((-1), node1.getLineno());
1075:       assertFalse(node1.isLabelName());
1076:       assertFalse(node1.isArrayLit());
1077:       assertEquals((-1), node1.getCharno());
1078:       assertTrue(node1.isString());
1079:       assertFalse(node1.isTry());
1080:       assertFalse(node1.isRegExp());
1081:       assertFalse(node1.isSwitch());
1082:       assertFalse(node1.isBlock());
1083:       assertFalse(node1.isHook());
1084:       assertFalse(node1.hasOneChild());
1085:       assertFalse(node1.isCase());
1086:       assertFalse(node1.isScript());
1087:       
1088:       Node node2 = new Node(40, node1);
1089:       assertEquals(52, Node.LENGTH);
1090:       assertEquals(54, Node.SLASH_V);
1091:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1092:       assertEquals(57, Node.REFLECTED_OBJECT);
1093:       assertEquals(30, Node.VAR_ARGS_NAME);
1094:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1095:       assertEquals(49, Node.DIRECT_EVAL);
1096:       assertEquals(40, Node.ORIGINALNAME_PROP);
1097:       assertEquals(48, Node.DIRECTIVES);
1098:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1099:       assertEquals(8, Node.FLAG_NO_THROWS);
1100:       assertEquals(2, Node.POST_FLAG);
1101:       assertEquals(47, Node.IS_DISPATCHER);
1102:       assertEquals(29, Node.JSDOC_INFO_PROP);
1103:       assertEquals(57, Node.LAST_PROP);
1104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1105:       assertEquals(55, Node.INFERRED_FUNCTION);
1106:       assertEquals(39, Node.EMPTY_BLOCK);
1107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1108:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1109:       assertEquals(53, Node.INPUT_ID);
1110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1111:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1112:       assertEquals(36, Node.QUOTED_PROP);
1113:       assertEquals(43, Node.IS_CONSTANT_NAME);
1114:       assertEquals(56, Node.CHANGE_TIME);
1115:       assertEquals(37, Node.OPT_ARG_NAME);
1116:       assertEquals(32, Node.INCRDECR_PROP);
1117:       assertEquals(46, Node.IS_NAMESPACE);
1118:       assertEquals(4095, Node.COLUMN_MASK);
1119:       assertEquals(12, Node.COLUMN_BITS);
1120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1121:       assertEquals(50, Node.FREE_CALL);
1122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1123:       assertEquals(1, Node.DECR_FLAG);
1124:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1125:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1126:       assertEquals(4095, Node.COLUMN_MASK);
1127:       assertEquals(43, Node.IS_CONSTANT_NAME);
1128:       assertEquals(36, Node.QUOTED_PROP);
1129:       assertEquals(53, Node.INPUT_ID);
1130:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1131:       assertEquals(8, Node.FLAG_NO_THROWS);
1132:       assertEquals(55, Node.INFERRED_FUNCTION);
1133:       assertEquals(39, Node.EMPTY_BLOCK);
1134:       assertEquals(29, Node.JSDOC_INFO_PROP);
1135:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1136:       assertEquals(56, Node.CHANGE_TIME);
1137:       assertEquals(57, Node.REFLECTED_OBJECT);
1138:       assertEquals(48, Node.DIRECTIVES);
1139:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1140:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1142:       assertEquals(37, Node.OPT_ARG_NAME);
1143:       assertEquals(30, Node.VAR_ARGS_NAME);
1144:       assertEquals(49, Node.DIRECT_EVAL);
1145:       assertEquals(1, Node.DECR_FLAG);
1146:       assertEquals(57, Node.LAST_PROP);
1147:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1148:       assertEquals(12, Node.COLUMN_BITS);
1149:       assertEquals(46, Node.IS_NAMESPACE);
1150:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1151:       assertEquals(32, Node.INCRDECR_PROP);
1152:       assertEquals(52, Node.LENGTH);
1153:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1154:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1155:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1156:       assertEquals(50, Node.FREE_CALL);
1157:       assertEquals(2, Node.POST_FLAG);
1158:       assertEquals(47, Node.IS_DISPATCHER);
1159:       assertEquals(54, Node.SLASH_V);
1160:       assertEquals(40, Node.ORIGINALNAME_PROP);
1161:       assertNotNull(node2);
1162:       assertFalse(node1.equals((Object)node0));
1163:       assertFalse(node2.equals((Object)node1));
1164:       assertFalse(node2.equals((Object)node0));
1165:       assertFalse(node1.isComma());
1166:       assertFalse(node1.isThis());
1167:       assertFalse(node1.isAnd());
1168:       assertFalse(node1.isFalse());
1169:       assertFalse(node1.isWith());
1170:       assertFalse(node1.isInstanceOf());
1171:       assertFalse(node1.isBreak());
1172:       assertFalse(node1.isInc());
1173:       assertFalse(node1.isThrow());
1174:       assertFalse(node1.isIn());
1175:       assertFalse(node1.isTypeOf());
1176:       assertFalse(node1.isDec());
1177:       assertFalse(node1.isAssign());
1178:       assertFalse(node1.isOr());
1179:       assertEquals((-1), node1.getSourcePosition());
1180:       assertFalse(node1.hasChildren());
1181:       assertFalse(node1.isReturn());
1182:       assertFalse(node1.isContinue());
1183:       assertFalse(node1.isCast());
1184:       assertFalse(node1.isDelProp());
1185:       assertFalse(node1.isGetElem());
1186:       assertFalse(node1.isExprResult());
1187:       assertFalse(node1.isDebugger());
1188:       assertFalse(node1.isWhile());
1189:       assertFalse(node1.isNot());
1190:       assertFalse(node1.isObjectLit());
1191:       assertFalse(node1.isGetProp());
1192:       assertFalse(node1.isParamList());
1193:       assertEquals(0, node1.getChildCount());
1194:       assertFalse(node1.isNull());
1195:       assertFalse(node1.isCall());
1196:       assertFalse(node1.isStringKey());
1197:       assertFalse(node1.isCatch());
1198:       assertFalse(node1.isName());
1199:       assertFalse(node1.isVoid());
1200:       assertFalse(node1.isFunction());
1201:       assertFalse(node1.isTrue());
1202:       assertFalse(node1.isDefaultCase());
1203:       assertFalse(node1.isVar());
1204:       assertEquals(40, node1.getType());
1205:       assertFalse(node1.isDo());
1206:       assertFalse(node1.isEmpty());
1207:       assertFalse(node1.isNew());
1208:       assertFalse(node1.isAdd());
1209:       assertFalse(node1.isSetterDef());
1210:       assertFalse(node1.isNE());
1211:       assertFalse(node1.isAssignAdd());
1212:       assertFalse(node1.isIf());
1213:       assertFalse(node1.isNumber());
1214:       assertFalse(node1.isGetterDef());
1215:       assertFalse(node1.isFor());
1216:       assertFalse(node1.isLabel());
1217:       assertFalse(node1.hasMoreThanOneChild());
1218:       assertEquals((-1), node1.getLineno());
1219:       assertFalse(node1.isLabelName());
1220:       assertFalse(node1.isArrayLit());
1221:       assertEquals((-1), node1.getCharno());
1222:       assertTrue(node1.isString());
1223:       assertFalse(node1.isTry());
1224:       assertFalse(node1.isRegExp());
1225:       assertFalse(node1.isSwitch());
1226:       assertFalse(node1.isBlock());
1227:       assertFalse(node1.isHook());
1228:       assertFalse(node1.hasOneChild());
1229:       assertFalse(node1.isCase());
1230:       assertFalse(node1.isScript());
1231:       assertFalse(node2.isArrayLit());
1232:       assertFalse(node2.isFor());
1233:       assertFalse(node2.isDebugger());
1234:       assertFalse(node2.isTrue());
1235:       assertTrue(node2.hasOneChild());
1236:       assertFalse(node2.isDefaultCase());
1237:       assertFalse(node2.isGetterDef());
1238:       assertFalse(node2.isEmpty());
1239:       assertFalse(node2.isTry());
1240:       assertFalse(node2.isCatch());
1241:       assertFalse(node2.isIn());
1242:       assertEquals(1, node2.getChildCount());
1243:       assertFalse(node2.isNE());
1244:       assertFalse(node2.isRegExp());
1245:       assertFalse(node2.isDelProp());
1246:       assertFalse(node2.isVoid());
1247:       assertFalse(node2.isIf());
1248:       assertTrue(node2.hasChildren());
1249:       assertFalse(node2.isCall());
1250:       assertFalse(node2.isVar());
1251:       assertFalse(node2.isName());
1252:       assertFalse(node2.isStringKey());
1253:       assertEquals((-1), node2.getCharno());
1254:       assertFalse(node2.isHook());
1255:       assertFalse(node2.isBlock());
1256:       assertFalse(node2.isNull());
1257:       assertTrue(node2.isString());
1258:       assertFalse(node2.isDo());
1259:       assertFalse(node2.isAdd());
1260:       assertFalse(node2.isNew());
1261:       assertFalse(node2.isCase());
1262:       assertFalse(node2.isAssignAdd());
1263:       assertFalse(node2.isLabel());
1264:       assertFalse(node2.isParamList());
1265:       assertFalse(node2.isSwitch());
1266:       assertFalse(node2.isLabelName());
1267:       assertFalse(node2.isCast());
1268:       assertFalse(node2.isAssign());
1269:       assertFalse(node2.isScript());
1270:       assertEquals((-1), node2.getSourcePosition());
1271:       assertFalse(node2.isNumber());
1272:       assertFalse(node2.isInstanceOf());
1273:       assertFalse(node2.hasMoreThanOneChild());
1274:       assertFalse(node2.isOr());
1275:       assertFalse(node2.isWhile());
1276:       assertFalse(node2.isThis());
1277:       assertFalse(node2.isReturn());
1278:       assertFalse(node2.isTypeOf());
1279:       assertFalse(node2.isComma());
1280:       assertFalse(node2.isDec());
1281:       assertFalse(node2.isWith());
1282:       assertEquals((-1), node2.getLineno());
1283:       assertFalse(node2.isBreak());
1284:       assertFalse(node2.isGetElem());
1285:       assertFalse(node2.isExprResult());
1286:       assertFalse(node2.isFalse());
1287:       assertFalse(node2.isThrow());
1288:       assertFalse(node2.isGetProp());
1289:       assertFalse(node2.isInc());
1290:       assertFalse(node2.isSetterDef());
1291:       assertFalse(node2.isAnd());
1292:       assertFalse(node2.isObjectLit());
1293:       assertFalse(node2.isContinue());
1294:       assertFalse(node2.isNot());
1295:       assertEquals(40, node2.getType());
1296:       assertFalse(node2.isFunction());
1297:       
1298:       boolean boolean3 = node0.isEquivalentTo(node1);
1299:       assertFalse(boolean3);
1300:       assertEquals(2, Node.POST_FLAG);
1301:       assertEquals(56, Node.CHANGE_TIME);
1302:       assertEquals(37, Node.OPT_ARG_NAME);
1303:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1304:       assertEquals(47, Node.IS_DISPATCHER);
1305:       assertEquals(29, Node.JSDOC_INFO_PROP);
1306:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1307:       assertEquals(12, Node.COLUMN_BITS);
1308:       assertEquals(1, Node.DECR_FLAG);
1309:       assertEquals(32, Node.INCRDECR_PROP);
1310:       assertEquals(57, Node.LAST_PROP);
1311:       assertEquals(36, Node.QUOTED_PROP);
1312:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1313:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1314:       assertEquals(53, Node.INPUT_ID);
1315:       assertEquals(52, Node.LENGTH);
1316:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1317:       assertEquals(4095, Node.COLUMN_MASK);
1318:       assertEquals(57, Node.REFLECTED_OBJECT);
1319:       assertEquals(49, Node.DIRECT_EVAL);
1320:       assertEquals(48, Node.DIRECTIVES);
1321:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1322:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1323:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1324:       assertEquals(39, Node.EMPTY_BLOCK);
1325:       assertEquals(50, Node.FREE_CALL);
1326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1327:       assertEquals(8, Node.FLAG_NO_THROWS);
1328:       assertEquals(55, Node.INFERRED_FUNCTION);
1329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1330:       assertEquals(43, Node.IS_CONSTANT_NAME);
1331:       assertEquals(54, Node.SLASH_V);
1332:       assertEquals(30, Node.VAR_ARGS_NAME);
1333:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1334:       assertEquals(40, Node.ORIGINALNAME_PROP);
1335:       assertEquals(46, Node.IS_NAMESPACE);
1336:       assertEquals(52, Node.LENGTH);
1337:       assertEquals(54, Node.SLASH_V);
1338:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1339:       assertEquals(57, Node.REFLECTED_OBJECT);
1340:       assertEquals(30, Node.VAR_ARGS_NAME);
1341:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1342:       assertEquals(49, Node.DIRECT_EVAL);
1343:       assertEquals(40, Node.ORIGINALNAME_PROP);
1344:       assertEquals(48, Node.DIRECTIVES);
1345:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1346:       assertEquals(8, Node.FLAG_NO_THROWS);
1347:       assertEquals(2, Node.POST_FLAG);
1348:       assertEquals(47, Node.IS_DISPATCHER);
1349:       assertEquals(29, Node.JSDOC_INFO_PROP);
1350:       assertEquals(57, Node.LAST_PROP);
1351:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1352:       assertEquals(55, Node.INFERRED_FUNCTION);
1353:       assertEquals(39, Node.EMPTY_BLOCK);
1354:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1355:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1356:       assertEquals(53, Node.INPUT_ID);
1357:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1358:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1359:       assertEquals(36, Node.QUOTED_PROP);
1360:       assertEquals(43, Node.IS_CONSTANT_NAME);
1361:       assertEquals(56, Node.CHANGE_TIME);
1362:       assertEquals(37, Node.OPT_ARG_NAME);
1363:       assertEquals(32, Node.INCRDECR_PROP);
1364:       assertEquals(46, Node.IS_NAMESPACE);
1365:       assertEquals(4095, Node.COLUMN_MASK);
1366:       assertEquals(12, Node.COLUMN_BITS);
1367:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1368:       assertEquals(50, Node.FREE_CALL);
1369:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1370:       assertEquals(1, Node.DECR_FLAG);
1371:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1372:       assertNotSame(node0, node1);
1373:       assertNotSame(node1, node0);
1374:       assertFalse(node0.equals((Object)node2));
1375:       assertFalse(node0.equals((Object)node1));
1376:       assertFalse(node1.equals((Object)node0));
1377:       assertFalse(node1.equals((Object)node2));
1378:       assertTrue(boolean3 == boolean2);
1379:       assertTrue(boolean3 == boolean1);
1380:       assertTrue(boolean3 == boolean0);
1381:       assertFalse(node0.isDo());
1382:       assertFalse(node0.isWhile());
1383:       assertFalse(node0.hasMoreThanOneChild());
1384:       assertFalse(node0.isContinue());
1385:       assertFalse(node0.isAssignAdd());
1386:       assertFalse(node0.isNew());
1387:       assertFalse(node0.isReturn());
1388:       assertFalse(node0.isBlock());
1389:       assertFalse(node0.isAdd());
1390:       assertFalse(node0.isVar());
1391:       assertFalse(node0.isAssign());
1392:       assertFalse(node0.hasChildren());
1393:       assertFalse(node0.isGetElem());
1394:       assertFalse(node0.isCall());
1395:       assertFalse(node0.isNull());
1396:       assertFalse(node0.isDec());
1397:       assertFalse(node0.isTypeOf());
1398:       assertFalse(node0.isOr());
1399:       assertEquals(126, node0.getType());
1400:       assertEquals((-1), node0.getLineno());
1401:       assertFalse(node0.isExprResult());
1402:       assertFalse(node0.isName());
1403:       assertFalse(node0.isNot());
1404:       assertFalse(node0.isDebugger());
1405:       assertFalse(node0.isFunction());
1406:       assertFalse(node0.isObjectLit());
1407:       assertFalse(node0.isGetProp());
1408:       assertFalse(node0.isSetterDef());
1409:       assertFalse(node0.isThrow());
1410:       assertFalse(node0.isCast());
1411:       assertEquals((-1), node0.getSourcePosition());
1412:       assertFalse(node0.isFalse());
1413:       assertFalse(node0.isAnd());
1414:       assertFalse(node0.isString());
1415:       assertFalse(node0.isCase());
1416:       assertTrue(node0.isLabel());
1417:       assertFalse(node0.isIn());
1418:       assertFalse(node0.isHook());
1419:       assertFalse(node0.isInc());
1420:       assertFalse(node0.isEmpty());
1421:       assertFalse(node0.isFor());
1422:       assertFalse(node0.isBreak());
1423:       assertFalse(node0.isComma());
1424:       assertFalse(node0.isTrue());
1425:       assertFalse(node0.isNE());
1426:       assertFalse(node0.isVoid());
1427:       assertFalse(node0.isIf());
1428:       assertFalse(node0.isDelProp());
1429:       assertFalse(node0.isWith());
1430:       assertFalse(node0.isCatch());
1431:       assertFalse(node0.isScript());
1432:       assertFalse(node0.isInstanceOf());
1433:       assertEquals(0, node0.getChildCount());
1434:       assertFalse(node0.isRegExp());
1435:       assertFalse(node0.isTry());
1436:       assertFalse(node0.isThis());
1437:       assertFalse(node0.hasOneChild());
1438:       assertFalse(node0.isDefaultCase());
1439:       assertFalse(node0.isLabelName());
1440:       assertFalse(node0.isStringKey());
1441:       assertFalse(node0.isGetterDef());
1442:       assertFalse(node0.isNumber());
1443:       assertEquals((-1), node0.getCharno());
1444:       assertFalse(node0.isSwitch());
1445:       assertFalse(node0.isArrayLit());
1446:       assertFalse(node0.isParamList());
1447:       assertFalse(node1.isComma());
1448:       assertFalse(node1.isThis());
1449:       assertFalse(node1.isAnd());
1450:       assertFalse(node1.isFalse());
1451:       assertFalse(node1.isWith());
1452:       assertFalse(node1.isInstanceOf());
1453:       assertFalse(node1.isBreak());
1454:       assertFalse(node1.isInc());
1455:       assertFalse(node1.isThrow());
1456:       assertFalse(node1.isIn());
1457:       assertFalse(node1.isTypeOf());
1458:       assertFalse(node1.isDec());
1459:       assertFalse(node1.isAssign());
1460:       assertFalse(node1.isOr());
1461:       assertEquals((-1), node1.getSourcePosition());
1462:       assertFalse(node1.hasChildren());
1463:       assertFalse(node1.isReturn());
1464:       assertFalse(node1.isContinue());
1465:       assertFalse(node1.isCast());
1466:       assertFalse(node1.isDelProp());
1467:       assertFalse(node1.isGetElem());
1468:       assertFalse(node1.isExprResult());
1469:       assertFalse(node1.isDebugger());
1470:       assertFalse(node1.isWhile());
1471:       assertFalse(node1.isNot());
1472:       assertFalse(node1.isObjectLit());
1473:       assertFalse(node1.isGetProp());
1474:       assertFalse(node1.isParamList());
1475:       assertEquals(0, node1.getChildCount());
1476:       assertFalse(node1.isNull());
1477:       assertFalse(node1.isCall());
1478:       assertFalse(node1.isStringKey());
1479:       assertFalse(node1.isCatch());
1480:       assertFalse(node1.isName());
1481:       assertFalse(node1.isVoid());
1482:       assertFalse(node1.isFunction());
1483:       assertFalse(node1.isTrue());
1484:       assertFalse(node1.isDefaultCase());
1485:       assertFalse(node1.isVar());
1486:       assertEquals(40, node1.getType());
1487:       assertFalse(node1.isDo());
1488:       assertFalse(node1.isEmpty());
1489:       assertFalse(node1.isNew());
1490:       assertFalse(node1.isAdd());
1491:       assertFalse(node1.isSetterDef());
1492:       assertFalse(node1.isNE());
1493:       assertFalse(node1.isAssignAdd());
1494:       assertFalse(node1.isIf());
1495:       assertFalse(node1.isNumber());
1496:       assertFalse(node1.isGetterDef());
1497:       assertFalse(node1.isFor());
1498:       assertFalse(node1.isLabel());
1499:       assertFalse(node1.hasMoreThanOneChild());
1500:       assertEquals((-1), node1.getLineno());
1501:       assertFalse(node1.isLabelName());
1502:       assertFalse(node1.isArrayLit());
1503:       assertEquals((-1), node1.getCharno());
1504:       assertTrue(node1.isString());
1505:       assertFalse(node1.isTry());
1506:       assertFalse(node1.isRegExp());
1507:       assertFalse(node1.isSwitch());
1508:       assertFalse(node1.isBlock());
1509:       assertFalse(node1.isHook());
1510:       assertFalse(node1.hasOneChild());
1511:       assertFalse(node1.isCase());
1512:       assertFalse(node1.isScript());
1513:       
1514:       String string0 = node0.checkTreeEquals(node2);
1515:       assertEquals("Node tree inequality:\nTree1:\nLABEL U`*}|T8Eq#<\n\n\nTree2:\nSTRING\n    STRING U`*}|T8Eq#<\n\n\nSubtree1: LABEL U`*}|T8Eq#<\n\n\nSubtree2: STRING\n    STRING U`*}|T8Eq#<\n", string0);
1516:       assertEquals(2, Node.POST_FLAG);
1517:       assertEquals(56, Node.CHANGE_TIME);
1518:       assertEquals(37, Node.OPT_ARG_NAME);
1519:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1520:       assertEquals(47, Node.IS_DISPATCHER);
1521:       assertEquals(29, Node.JSDOC_INFO_PROP);
1522:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1523:       assertEquals(12, Node.COLUMN_BITS);
1524:       assertEquals(1, Node.DECR_FLAG);
1525:       assertEquals(32, Node.INCRDECR_PROP);
1526:       assertEquals(57, Node.LAST_PROP);
1527:       assertEquals(36, Node.QUOTED_PROP);
1528:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1530:       assertEquals(53, Node.INPUT_ID);
1531:       assertEquals(52, Node.LENGTH);
1532:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1533:       assertEquals(4095, Node.COLUMN_MASK);
1534:       assertEquals(57, Node.REFLECTED_OBJECT);
1535:       assertEquals(49, Node.DIRECT_EVAL);
1536:       assertEquals(48, Node.DIRECTIVES);
1537:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1538:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1539:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1540:       assertEquals(39, Node.EMPTY_BLOCK);
1541:       assertEquals(50, Node.FREE_CALL);
1542:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1543:       assertEquals(8, Node.FLAG_NO_THROWS);
1544:       assertEquals(55, Node.INFERRED_FUNCTION);
1545:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1546:       assertEquals(43, Node.IS_CONSTANT_NAME);
1547:       assertEquals(54, Node.SLASH_V);
1548:       assertEquals(30, Node.VAR_ARGS_NAME);
1549:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1550:       assertEquals(40, Node.ORIGINALNAME_PROP);
1551:       assertEquals(46, Node.IS_NAMESPACE);
1552:       assertEquals(52, Node.LENGTH);
1553:       assertEquals(54, Node.SLASH_V);
1554:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1555:       assertEquals(57, Node.REFLECTED_OBJECT);
1556:       assertEquals(30, Node.VAR_ARGS_NAME);
1557:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1558:       assertEquals(49, Node.DIRECT_EVAL);
1559:       assertEquals(40, Node.ORIGINALNAME_PROP);
1560:       assertEquals(48, Node.DIRECTIVES);
1561:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1562:       assertEquals(8, Node.FLAG_NO_THROWS);
1563:       assertEquals(2, Node.POST_FLAG);
1564:       assertEquals(47, Node.IS_DISPATCHER);
1565:       assertEquals(29, Node.JSDOC_INFO_PROP);
1566:       assertEquals(57, Node.LAST_PROP);
1567:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1568:       assertEquals(55, Node.INFERRED_FUNCTION);
1569:       assertEquals(39, Node.EMPTY_BLOCK);
1570:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1571:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1572:       assertEquals(53, Node.INPUT_ID);
1573:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1574:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1575:       assertEquals(36, Node.QUOTED_PROP);
1576:       assertEquals(43, Node.IS_CONSTANT_NAME);
1577:       assertEquals(56, Node.CHANGE_TIME);
1578:       assertEquals(37, Node.OPT_ARG_NAME);
1579:       assertEquals(32, Node.INCRDECR_PROP);
1580:       assertEquals(46, Node.IS_NAMESPACE);
1581:       assertEquals(4095, Node.COLUMN_MASK);
1582:       assertEquals(12, Node.COLUMN_BITS);
1583:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1584:       assertEquals(50, Node.FREE_CALL);
1585:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1586:       assertEquals(1, Node.DECR_FLAG);
1587:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1588:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1589:       assertEquals(4095, Node.COLUMN_MASK);
1590:       assertEquals(43, Node.IS_CONSTANT_NAME);
1591:       assertEquals(36, Node.QUOTED_PROP);
1592:       assertEquals(53, Node.INPUT_ID);
1593:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1594:       assertEquals(8, Node.FLAG_NO_THROWS);
1595:       assertEquals(55, Node.INFERRED_FUNCTION);
1596:       assertEquals(39, Node.EMPTY_BLOCK);
1597:       assertEquals(29, Node.JSDOC_INFO_PROP);
1598:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1599:       assertEquals(56, Node.CHANGE_TIME);
1600:       assertEquals(57, Node.REFLECTED_OBJECT);
1601:       assertEquals(48, Node.DIRECTIVES);
1602:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1603:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1604:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1605:       assertEquals(37, Node.OPT_ARG_NAME);
1606:       assertEquals(30, Node.VAR_ARGS_NAME);
1607:       assertEquals(49, Node.DIRECT_EVAL);
1608:       assertEquals(1, Node.DECR_FLAG);
1609:       assertEquals(57, Node.LAST_PROP);
1610:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1611:       assertEquals(12, Node.COLUMN_BITS);
1612:       assertEquals(46, Node.IS_NAMESPACE);
1613:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1614:       assertEquals(32, Node.INCRDECR_PROP);
1615:       assertEquals(52, Node.LENGTH);
1616:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1617:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1618:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1619:       assertEquals(50, Node.FREE_CALL);
1620:       assertEquals(2, Node.POST_FLAG);
1621:       assertEquals(47, Node.IS_DISPATCHER);
1622:       assertEquals(54, Node.SLASH_V);
1623:       assertEquals(40, Node.ORIGINALNAME_PROP);
1624:       assertNotSame(node0, node1);
1625:       assertNotSame(node1, node0);
1626:       assertNotNull(string0);
1627:       assertFalse(node0.equals((Object)node2));
1628:       assertFalse(node0.equals((Object)node1));
1629:       assertFalse(node1.equals((Object)node0));
1630:       assertFalse(node1.equals((Object)node2));
1631:       assertFalse(node2.equals((Object)node1));
1632:       assertFalse(node2.equals((Object)node0));
1633:       assertFalse(node0.isDo());
1634:       assertFalse(node0.isWhile());
1635:       assertFalse(node0.hasMoreThanOneChild());
1636:       assertFalse(node0.isContinue());
1637:       assertFalse(node0.isAssignAdd());
1638:       assertFalse(node0.isNew());
1639:       assertFalse(node0.isReturn());
1640:       assertFalse(node0.isBlock());
1641:       assertFalse(node0.isAdd());
1642:       assertFalse(node0.isVar());
1643:       assertFalse(node0.isAssign());
1644:       assertFalse(node0.hasChildren());
1645:       assertFalse(node0.isGetElem());
1646:       assertFalse(node0.isCall());
1647:       assertFalse(node0.isNull());
1648:       assertFalse(node0.isDec());
1649:       assertFalse(node0.isTypeOf());
1650:       assertFalse(node0.isOr());
1651:       assertEquals(126, node0.getType());
1652:       assertEquals((-1), node0.getLineno());
1653:       assertFalse(node0.isExprResult());
1654:       assertFalse(node0.isName());
1655:       assertFalse(node0.isNot());
1656:       assertFalse(node0.isDebugger());
1657:       assertFalse(node0.isFunction());
1658:       assertFalse(node0.isObjectLit());
1659:       assertFalse(node0.isGetProp());
1660:       assertFalse(node0.isSetterDef());
1661:       assertFalse(node0.isThrow());
1662:       assertFalse(node0.isCast());
1663:       assertEquals((-1), node0.getSourcePosition());
1664:       assertFalse(node0.isFalse());
1665:       assertFalse(node0.isAnd());
1666:       assertFalse(node0.isString());
1667:       assertFalse(node0.isCase());
1668:       assertTrue(node0.isLabel());
1669:       assertFalse(node0.isIn());
1670:       assertFalse(node0.isHook());
1671:       assertFalse(node0.isInc());
1672:       assertFalse(node0.isEmpty());
1673:       assertFalse(node0.isFor());
1674:       assertFalse(node0.isBreak());
1675:       assertFalse(node0.isComma());
1676:       assertFalse(node0.isTrue());
1677:       assertFalse(node0.isNE());
1678:       assertFalse(node0.isVoid());
1679:       assertFalse(node0.isIf());
1680:       assertFalse(node0.isDelProp());
1681:       assertFalse(node0.isWith());
1682:       assertFalse(node0.isCatch());
1683:       assertFalse(node0.isScript());
1684:       assertFalse(node0.isInstanceOf());
1685:       assertEquals(0, node0.getChildCount());
1686:       assertFalse(node0.isRegExp());
1687:       assertFalse(node0.isTry());
1688:       assertFalse(node0.isThis());
1689:       assertFalse(node0.hasOneChild());
1690:       assertFalse(node0.isDefaultCase());
1691:       assertFalse(node0.isLabelName());
1692:       assertFalse(node0.isStringKey());
1693:       assertFalse(node0.isGetterDef());
1694:       assertFalse(node0.isNumber());
1695:       assertEquals((-1), node0.getCharno());
1696:       assertFalse(node0.isSwitch());
1697:       assertFalse(node0.isArrayLit());
1698:       assertFalse(node0.isParamList());
1699:       assertFalse(node1.isComma());
1700:       assertFalse(node1.isThis());
1701:       assertFalse(node1.isAnd());
1702:       assertFalse(node1.isFalse());
1703:       assertFalse(node1.isWith());
1704:       assertFalse(node1.isInstanceOf());
1705:       assertFalse(node1.isBreak());
1706:       assertFalse(node1.isInc());
1707:       assertFalse(node1.isThrow());
1708:       assertFalse(node1.isIn());
1709:       assertFalse(node1.isTypeOf());
1710:       assertFalse(node1.isDec());
1711:       assertFalse(node1.isAssign());
1712:       assertFalse(node1.isOr());
1713:       assertEquals((-1), node1.getSourcePosition());
1714:       assertFalse(node1.hasChildren());
1715:       assertFalse(node1.isReturn());
1716:       assertFalse(node1.isContinue());
1717:       assertFalse(node1.isCast());
1718:       assertFalse(node1.isDelProp());
1719:       assertFalse(node1.isGetElem());
1720:       assertFalse(node1.isExprResult());
1721:       assertFalse(node1.isDebugger());
1722:       assertFalse(node1.isWhile());
1723:       assertFalse(node1.isNot());
1724:       assertFalse(node1.isObjectLit());
1725:       assertFalse(node1.isGetProp());
1726:       assertFalse(node1.isParamList());
1727:       assertEquals(0, node1.getChildCount());
1728:       assertFalse(node1.isNull());
1729:       assertFalse(node1.isCall());
1730:       assertFalse(node1.isStringKey());
1731:       assertFalse(node1.isCatch());
1732:       assertFalse(node1.isName());
1733:       assertFalse(node1.isVoid());
1734:       assertFalse(node1.isFunction());
1735:       assertFalse(node1.isTrue());
1736:       assertFalse(node1.isDefaultCase());
1737:       assertFalse(node1.isVar());
1738:       assertEquals(40, node1.getType());
1739:       assertFalse(node1.isDo());
1740:       assertFalse(node1.isEmpty());
1741:       assertFalse(node1.isNew());
1742:       assertFalse(node1.isAdd());
1743:       assertFalse(node1.isSetterDef());
1744:       assertFalse(node1.isNE());
1745:       assertFalse(node1.isAssignAdd());
1746:       assertFalse(node1.isIf());
1747:       assertFalse(node1.isNumber());
1748:       assertFalse(node1.isGetterDef());
1749:       assertFalse(node1.isFor());
1750:       assertFalse(node1.isLabel());
1751:       assertFalse(node1.hasMoreThanOneChild());
1752:       assertEquals((-1), node1.getLineno());
1753:       assertFalse(node1.isLabelName());
1754:       assertFalse(node1.isArrayLit());
1755:       assertEquals((-1), node1.getCharno());
1756:       assertTrue(node1.isString());
1757:       assertFalse(node1.isTry());
1758:       assertFalse(node1.isRegExp());
1759:       assertFalse(node1.isSwitch());
1760:       assertFalse(node1.isBlock());
1761:       assertFalse(node1.isHook());
1762:       assertFalse(node1.hasOneChild());
1763:       assertFalse(node1.isCase());
1764:       assertFalse(node1.isScript());
1765:       assertFalse(node2.isArrayLit());
1766:       assertFalse(node2.isFor());
1767:       assertFalse(node2.isDebugger());
1768:       assertFalse(node2.isTrue());
1769:       assertTrue(node2.hasOneChild());
1770:       assertFalse(node2.isDefaultCase());
1771:       assertFalse(node2.isGetterDef());
1772:       assertFalse(node2.isEmpty());
1773:       assertFalse(node2.isTry());
1774:       assertFalse(node2.isCatch());
1775:       assertFalse(node2.isIn());
1776:       assertEquals(1, node2.getChildCount());
1777:       assertFalse(node2.isNE());
1778:       assertFalse(node2.isRegExp());
1779:       assertFalse(node2.isDelProp());
1780:       assertFalse(node2.isVoid());
1781:       assertFalse(node2.isIf());
1782:       assertTrue(node2.hasChildren());
1783:       assertFalse(node2.isCall());
1784:       assertFalse(node2.isVar());
1785:       assertFalse(node2.isName());
1786:       assertFalse(node2.isStringKey());
1787:       assertEquals((-1), node2.getCharno());
1788:       assertFalse(node2.isHook());
1789:       assertFalse(node2.isBlock());
1790:       assertFalse(node2.isNull());
1791:       assertTrue(node2.isString());
1792:       assertFalse(node2.isDo());
1793:       assertFalse(node2.isAdd());
1794:       assertFalse(node2.isNew());
1795:       assertFalse(node2.isCase());
1796:       assertFalse(node2.isAssignAdd());
1797:       assertFalse(node2.isLabel());
1798:       assertFalse(node2.isParamList());
1799:       assertFalse(node2.isSwitch());
1800:       assertFalse(node2.isLabelName());
1801:       assertFalse(node2.isCast());
1802:       assertFalse(node2.isAssign());
1803:       assertFalse(node2.isScript());
1804:       assertEquals((-1), node2.getSourcePosition());
1805:       assertFalse(node2.isNumber());
1806:       assertFalse(node2.isInstanceOf());
1807:       assertFalse(node2.hasMoreThanOneChild());
1808:       assertFalse(node2.isOr());
1809:       assertFalse(node2.isWhile());
1810:       assertFalse(node2.isThis());
1811:       assertFalse(node2.isReturn());
1812:       assertFalse(node2.isTypeOf());
1813:       assertFalse(node2.isComma());
1814:       assertFalse(node2.isDec());
1815:       assertFalse(node2.isWith());
1816:       assertEquals((-1), node2.getLineno());
1817:       assertFalse(node2.isBreak());
1818:       assertFalse(node2.isGetElem());
1819:       assertFalse(node2.isExprResult());
1820:       assertFalse(node2.isFalse());
1821:       assertFalse(node2.isThrow());
1822:       assertFalse(node2.isGetProp());
1823:       assertFalse(node2.isInc());
1824:       assertFalse(node2.isSetterDef());
1825:       assertFalse(node2.isAnd());
1826:       assertFalse(node2.isObjectLit());
1827:       assertFalse(node2.isContinue());
1828:       assertFalse(node2.isNot());
1829:       assertEquals(40, node2.getType());
1830:       assertFalse(node2.isFunction());
1831:       
1832:       InputId inputId0 = node2.getInputId();
1833:       assertEquals(52, Node.LENGTH);
1834:       assertEquals(54, Node.SLASH_V);
1835:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1836:       assertEquals(57, Node.REFLECTED_OBJECT);
1837:       assertEquals(30, Node.VAR_ARGS_NAME);
1838:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1839:       assertEquals(49, Node.DIRECT_EVAL);
1840:       assertEquals(40, Node.ORIGINALNAME_PROP);
1841:       assertEquals(48, Node.DIRECTIVES);
1842:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1843:       assertEquals(8, Node.FLAG_NO_THROWS);
1844:       assertEquals(2, Node.POST_FLAG);
1845:       assertEquals(47, Node.IS_DISPATCHER);
1846:       assertEquals(29, Node.JSDOC_INFO_PROP);
1847:       assertEquals(57, Node.LAST_PROP);
1848:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1849:       assertEquals(55, Node.INFERRED_FUNCTION);
1850:       assertEquals(39, Node.EMPTY_BLOCK);
1851:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1852:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1853:       assertEquals(53, Node.INPUT_ID);
1854:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1855:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1856:       assertEquals(36, Node.QUOTED_PROP);
1857:       assertEquals(43, Node.IS_CONSTANT_NAME);
1858:       assertEquals(56, Node.CHANGE_TIME);
1859:       assertEquals(37, Node.OPT_ARG_NAME);
1860:       assertEquals(32, Node.INCRDECR_PROP);
1861:       assertEquals(46, Node.IS_NAMESPACE);
1862:       assertEquals(4095, Node.COLUMN_MASK);
1863:       assertEquals(12, Node.COLUMN_BITS);
1864:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1865:       assertEquals(50, Node.FREE_CALL);
1866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1867:       assertEquals(1, Node.DECR_FLAG);
1868:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1869:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1870:       assertEquals(4095, Node.COLUMN_MASK);
1871:       assertEquals(43, Node.IS_CONSTANT_NAME);
1872:       assertEquals(36, Node.QUOTED_PROP);
1873:       assertEquals(53, Node.INPUT_ID);
1874:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1875:       assertEquals(8, Node.FLAG_NO_THROWS);
1876:       assertEquals(55, Node.INFERRED_FUNCTION);
1877:       assertEquals(39, Node.EMPTY_BLOCK);
1878:       assertEquals(29, Node.JSDOC_INFO_PROP);
1879:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1880:       assertEquals(56, Node.CHANGE_TIME);
1881:       assertEquals(57, Node.REFLECTED_OBJECT);
1882:       assertEquals(48, Node.DIRECTIVES);
1883:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1884:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1885:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1886:       assertEquals(37, Node.OPT_ARG_NAME);
1887:       assertEquals(30, Node.VAR_ARGS_NAME);
1888:       assertEquals(49, Node.DIRECT_EVAL);
1889:       assertEquals(1, Node.DECR_FLAG);
1890:       assertEquals(57, Node.LAST_PROP);
1891:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1892:       assertEquals(12, Node.COLUMN_BITS);
1893:       assertEquals(46, Node.IS_NAMESPACE);
1894:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1895:       assertEquals(32, Node.INCRDECR_PROP);
1896:       assertEquals(52, Node.LENGTH);
1897:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1898:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1899:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1900:       assertEquals(50, Node.FREE_CALL);
1901:       assertEquals(2, Node.POST_FLAG);
1902:       assertEquals(47, Node.IS_DISPATCHER);
1903:       assertEquals(54, Node.SLASH_V);
1904:       assertEquals(40, Node.ORIGINALNAME_PROP);
1905:       assertNotSame(node1, node0);
1906:       assertNull(inputId0);
1907:       assertFalse(node1.equals((Object)node0));
1908:       assertFalse(node1.equals((Object)node2));
1909:       assertFalse(node2.equals((Object)node1));
1910:       assertFalse(node2.equals((Object)node0));
1911:       assertFalse(node1.isComma());
1912:       assertFalse(node1.isThis());
1913:       assertFalse(node1.isAnd());
1914:       assertFalse(node1.isFalse());
1915:       assertFalse(node1.isWith());
1916:       assertFalse(node1.isInstanceOf());
1917:       assertFalse(node1.isBreak());
1918:       assertFalse(node1.isInc());
1919:       assertFalse(node1.isThrow());
1920:       assertFalse(node1.isIn());
1921:       assertFalse(node1.isTypeOf());
1922:       assertFalse(node1.isDec());
1923:       assertFalse(node1.isAssign());
1924:       assertFalse(node1.isOr());
1925:       assertEquals((-1), node1.getSourcePosition());
1926:       assertFalse(node1.hasChildren());
1927:       assertFalse(node1.isReturn());
1928:       assertFalse(node1.isContinue());
1929:       assertFalse(node1.isCast());
1930:       assertFalse(node1.isDelProp());
1931:       assertFalse(node1.isGetElem());
1932:       assertFalse(node1.isExprResult());
1933:       assertFalse(node1.isDebugger());
1934:       assertFalse(node1.isWhile());
1935:       assertFalse(node1.isNot());
1936:       assertFalse(node1.isObjectLit());
1937:       assertFalse(node1.isGetProp());
1938:       assertFalse(node1.isParamList());
1939:       assertEquals(0, node1.getChildCount());
1940:       assertFalse(node1.isNull());
1941:       assertFalse(node1.isCall());
1942:       assertFalse(node1.isStringKey());
1943:       assertFalse(node1.isCatch());
1944:       assertFalse(node1.isName());
1945:       assertFalse(node1.isVoid());
1946:       assertFalse(node1.isFunction());
1947:       assertFalse(node1.isTrue());
1948:       assertFalse(node1.isDefaultCase());
1949:       assertFalse(node1.isVar());
1950:       assertEquals(40, node1.getType());
1951:       assertFalse(node1.isDo());
1952:       assertFalse(node1.isEmpty());
1953:       assertFalse(node1.isNew());
1954:       assertFalse(node1.isAdd());
1955:       assertFalse(node1.isSetterDef());
1956:       assertFalse(node1.isNE());
1957:       assertFalse(node1.isAssignAdd());
1958:       assertFalse(node1.isIf());
1959:       assertFalse(node1.isNumber());
1960:       assertFalse(node1.isGetterDef());
1961:       assertFalse(node1.isFor());
1962:       assertFalse(node1.isLabel());
1963:       assertFalse(node1.hasMoreThanOneChild());
1964:       assertEquals((-1), node1.getLineno());
1965:       assertFalse(node1.isLabelName());
1966:       assertFalse(node1.isArrayLit());
1967:       assertEquals((-1), node1.getCharno());
1968:       assertTrue(node1.isString());
1969:       assertFalse(node1.isTry());
1970:       assertFalse(node1.isRegExp());
1971:       assertFalse(node1.isSwitch());
1972:       assertFalse(node1.isBlock());
1973:       assertFalse(node1.isHook());
1974:       assertFalse(node1.hasOneChild());
1975:       assertFalse(node1.isCase());
1976:       assertFalse(node1.isScript());
1977:       assertFalse(node2.isArrayLit());
1978:       assertFalse(node2.isFor());
1979:       assertFalse(node2.isDebugger());
1980:       assertFalse(node2.isTrue());
1981:       assertTrue(node2.hasOneChild());
1982:       assertFalse(node2.isDefaultCase());
1983:       assertFalse(node2.isGetterDef());
1984:       assertFalse(node2.isEmpty());
1985:       assertFalse(node2.isTry());
1986:       assertFalse(node2.isCatch());
1987:       assertFalse(node2.isIn());
1988:       assertEquals(1, node2.getChildCount());
1989:       assertFalse(node2.isNE());
1990:       assertFalse(node2.isRegExp());
1991:       assertFalse(node2.isDelProp());
1992:       assertFalse(node2.isVoid());
1993:       assertFalse(node2.isIf());
1994:       assertTrue(node2.hasChildren());
1995:       assertFalse(node2.isCall());
1996:       assertFalse(node2.isVar());
1997:       assertFalse(node2.isName());
1998:       assertFalse(node2.isStringKey());
1999:       assertEquals((-1), node2.getCharno());
2000:       assertFalse(node2.isHook());
2001:       assertFalse(node2.isBlock());
2002:       assertFalse(node2.isNull());
2003:       assertTrue(node2.isString());
2004:       assertFalse(node2.isDo());
2005:       assertFalse(node2.isAdd());
2006:       assertFalse(node2.isNew());
2007:       assertFalse(node2.isCase());
2008:       assertFalse(node2.isAssignAdd());
2009:       assertFalse(node2.isLabel());
2010:       assertFalse(node2.isParamList());
2011:       assertFalse(node2.isSwitch());
2012:       assertFalse(node2.isLabelName());
2013:       assertFalse(node2.isCast());
2014:       assertFalse(node2.isAssign());
2015:       assertFalse(node2.isScript());
2016:       assertEquals((-1), node2.getSourcePosition());
2017:       assertFalse(node2.isNumber());
2018:       assertFalse(node2.isInstanceOf());
2019:       assertFalse(node2.hasMoreThanOneChild());
2020:       assertFalse(node2.isOr());
2021:       assertFalse(node2.isWhile());
2022:       assertFalse(node2.isThis());
2023:       assertFalse(node2.isReturn());
2024:       assertFalse(node2.isTypeOf());
2025:       assertFalse(node2.isComma());
2026:       assertFalse(node2.isDec());
2027:       assertFalse(node2.isWith());
2028:       assertEquals((-1), node2.getLineno());
2029:       assertFalse(node2.isBreak());
2030:       assertFalse(node2.isGetElem());
2031:       assertFalse(node2.isExprResult());
2032:       assertFalse(node2.isFalse());
2033:       assertFalse(node2.isThrow());
2034:       assertFalse(node2.isGetProp());
2035:       assertFalse(node2.isInc());
2036:       assertFalse(node2.isSetterDef());
2037:       assertFalse(node2.isAnd());
2038:       assertFalse(node2.isObjectLit());
2039:       assertFalse(node2.isContinue());
2040:       assertFalse(node2.isNot());
2041:       assertEquals(40, node2.getType());
2042:       assertFalse(node2.isFunction());
2043:       
2044:       node2.setInputId((InputId) null);
2045:       assertEquals(52, Node.LENGTH);
2046:       assertEquals(54, Node.SLASH_V);
2047:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2048:       assertEquals(57, Node.REFLECTED_OBJECT);
2049:       assertEquals(30, Node.VAR_ARGS_NAME);
2050:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2051:       assertEquals(49, Node.DIRECT_EVAL);
2052:       assertEquals(40, Node.ORIGINALNAME_PROP);
2053:       assertEquals(48, Node.DIRECTIVES);
2054:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2055:       assertEquals(8, Node.FLAG_NO_THROWS);
2056:       assertEquals(2, Node.POST_FLAG);
2057:       assertEquals(47, Node.IS_DISPATCHER);
2058:       assertEquals(29, Node.JSDOC_INFO_PROP);
2059:       assertEquals(57, Node.LAST_PROP);
2060:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2061:       assertEquals(55, Node.INFERRED_FUNCTION);
2062:       assertEquals(39, Node.EMPTY_BLOCK);
2063:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2064:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2065:       assertEquals(53, Node.INPUT_ID);
2066:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2067:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2068:       assertEquals(36, Node.QUOTED_PROP);
2069:       assertEquals(43, Node.IS_CONSTANT_NAME);
2070:       assertEquals(56, Node.CHANGE_TIME);
2071:       assertEquals(37, Node.OPT_ARG_NAME);
2072:       assertEquals(32, Node.INCRDECR_PROP);
2073:       assertEquals(46, Node.IS_NAMESPACE);
2074:       assertEquals(4095, Node.COLUMN_MASK);
2075:       assertEquals(12, Node.COLUMN_BITS);
2076:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2077:       assertEquals(50, Node.FREE_CALL);
2078:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2079:       assertEquals(1, Node.DECR_FLAG);
2080:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2081:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2082:       assertEquals(4095, Node.COLUMN_MASK);
2083:       assertEquals(43, Node.IS_CONSTANT_NAME);
2084:       assertEquals(36, Node.QUOTED_PROP);
2085:       assertEquals(53, Node.INPUT_ID);
2086:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2087:       assertEquals(8, Node.FLAG_NO_THROWS);
2088:       assertEquals(55, Node.INFERRED_FUNCTION);
2089:       assertEquals(39, Node.EMPTY_BLOCK);
2090:       assertEquals(29, Node.JSDOC_INFO_PROP);
2091:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2092:       assertEquals(56, Node.CHANGE_TIME);
2093:       assertEquals(57, Node.REFLECTED_OBJECT);
2094:       assertEquals(48, Node.DIRECTIVES);
2095:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2096:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2097:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2098:       assertEquals(37, Node.OPT_ARG_NAME);
2099:       assertEquals(30, Node.VAR_ARGS_NAME);
2100:       assertEquals(49, Node.DIRECT_EVAL);
2101:       assertEquals(1, Node.DECR_FLAG);
2102:       assertEquals(57, Node.LAST_PROP);
2103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2104:       assertEquals(12, Node.COLUMN_BITS);
2105:       assertEquals(46, Node.IS_NAMESPACE);
2106:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2107:       assertEquals(32, Node.INCRDECR_PROP);
2108:       assertEquals(52, Node.LENGTH);
2109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2111:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2112:       assertEquals(50, Node.FREE_CALL);
2113:       assertEquals(2, Node.POST_FLAG);
2114:       assertEquals(47, Node.IS_DISPATCHER);
2115:       assertEquals(54, Node.SLASH_V);
2116:       assertEquals(40, Node.ORIGINALNAME_PROP);
2117:       assertNotSame(node1, node0);
2118:       assertFalse(node1.equals((Object)node0));
2119:       assertFalse(node1.equals((Object)node2));
2120:       assertFalse(node2.equals((Object)node1));
2121:       assertFalse(node2.equals((Object)node0));
2122:       assertFalse(node1.isComma());
2123:       assertFalse(node1.isThis());
2124:       assertFalse(node1.isAnd());
2125:       assertFalse(node1.isFalse());
2126:       assertFalse(node1.isWith());
2127:       assertFalse(node1.isInstanceOf());
2128:       assertFalse(node1.isBreak());
2129:       assertFalse(node1.isInc());
2130:       assertFalse(node1.isThrow());
2131:       assertFalse(node1.isIn());
2132:       assertFalse(node1.isTypeOf());
2133:       assertFalse(node1.isDec());
2134:       assertFalse(node1.isAssign());
2135:       assertFalse(node1.isOr());
2136:       assertEquals((-1), node1.getSourcePosition());
2137:       assertFalse(node1.hasChildren());
2138:       assertFalse(node1.isReturn());
2139:       assertFalse(node1.isContinue());
2140:       assertFalse(node1.isCast());
2141:       assertFalse(node1.isDelProp());
2142:       assertFalse(node1.isGetElem());
2143:       assertFalse(node1.isExprResult());
2144:       assertFalse(node1.isDebugger());
2145:       assertFalse(node1.isWhile());
2146:       assertFalse(node1.isNot());
2147:       assertFalse(node1.isObjectLit());
2148:       assertFalse(node1.isGetProp());
2149:       assertFalse(node1.isParamList());
2150:       assertEquals(0, node1.getChildCount());
2151:       assertFalse(node1.isNull());
2152:       assertFalse(node1.isCall());
2153:       assertFalse(node1.isStringKey());
2154:       assertFalse(node1.isCatch());
2155:       assertFalse(node1.isName());
2156:       assertFalse(node1.isVoid());
2157:       assertFalse(node1.isFunction());
2158:       assertFalse(node1.isTrue());
2159:       assertFalse(node1.isDefaultCase());
2160:       assertFalse(node1.isVar());
2161:       assertEquals(40, node1.getType());
2162:       assertFalse(node1.isDo());
2163:       assertFalse(node1.isEmpty());
2164:       assertFalse(node1.isNew());
2165:       assertFalse(node1.isAdd());
2166:       assertFalse(node1.isSetterDef());
2167:       assertFalse(node1.isNE());
2168:       assertFalse(node1.isAssignAdd());
2169:       assertFalse(node1.isIf());
2170:       assertFalse(node1.isNumber());
2171:       assertFalse(node1.isGetterDef());
2172:       assertFalse(node1.isFor());
2173:       assertFalse(node1.isLabel());
2174:       assertFalse(node1.hasMoreThanOneChild());
2175:       assertEquals((-1), node1.getLineno());
2176:       assertFalse(node1.isLabelName());
2177:       assertFalse(node1.isArrayLit());
2178:       assertEquals((-1), node1.getCharno());
2179:       assertTrue(node1.isString());
2180:       assertFalse(node1.isTry());
2181:       assertFalse(node1.isRegExp());
2182:       assertFalse(node1.isSwitch());
2183:       assertFalse(node1.isBlock());
2184:       assertFalse(node1.isHook());
2185:       assertFalse(node1.hasOneChild());
2186:       assertFalse(node1.isCase());
2187:       assertFalse(node1.isScript());
2188:       assertFalse(node2.isArrayLit());
2189:       assertFalse(node2.isFor());
2190:       assertFalse(node2.isDebugger());
2191:       assertFalse(node2.isTrue());
2192:       assertTrue(node2.hasOneChild());
2193:       assertFalse(node2.isDefaultCase());
2194:       assertFalse(node2.isGetterDef());
2195:       assertFalse(node2.isEmpty());
2196:       assertFalse(node2.isTry());
2197:       assertFalse(node2.isCatch());
2198:       assertFalse(node2.isIn());
2199:       assertEquals(1, node2.getChildCount());
2200:       assertFalse(node2.isNE());
2201:       assertFalse(node2.isRegExp());
2202:       assertFalse(node2.isDelProp());
2203:       assertFalse(node2.isVoid());
2204:       assertFalse(node2.isIf());
2205:       assertTrue(node2.hasChildren());
2206:       assertFalse(node2.isCall());
2207:       assertFalse(node2.isVar());
2208:       assertFalse(node2.isName());
2209:       assertFalse(node2.isStringKey());
2210:       assertEquals((-1), node2.getCharno());
2211:       assertFalse(node2.isHook());
2212:       assertFalse(node2.isBlock());
2213:       assertFalse(node2.isNull());
2214:       assertTrue(node2.isString());
2215:       assertFalse(node2.isDo());
2216:       assertFalse(node2.isAdd());
2217:       assertFalse(node2.isNew());
2218:       assertFalse(node2.isCase());
2219:       assertFalse(node2.isAssignAdd());
2220:       assertFalse(node2.isLabel());
2221:       assertFalse(node2.isParamList());
2222:       assertFalse(node2.isSwitch());
2223:       assertFalse(node2.isLabelName());
2224:       assertFalse(node2.isCast());
2225:       assertFalse(node2.isAssign());
2226:       assertFalse(node2.isScript());
2227:       assertEquals((-1), node2.getSourcePosition());
2228:       assertFalse(node2.isNumber());
2229:       assertFalse(node2.isInstanceOf());
2230:       assertFalse(node2.hasMoreThanOneChild());
2231:       assertFalse(node2.isOr());
2232:       assertFalse(node2.isWhile());
2233:       assertFalse(node2.isThis());
2234:       assertFalse(node2.isReturn());
2235:       assertFalse(node2.isTypeOf());
2236:       assertFalse(node2.isComma());
2237:       assertFalse(node2.isDec());
2238:       assertFalse(node2.isWith());
2239:       assertEquals((-1), node2.getLineno());
2240:       assertFalse(node2.isBreak());
2241:       assertFalse(node2.isGetElem());
2242:       assertFalse(node2.isExprResult());
2243:       assertFalse(node2.isFalse());
2244:       assertFalse(node2.isThrow());
2245:       assertFalse(node2.isGetProp());
2246:       assertFalse(node2.isInc());
2247:       assertFalse(node2.isSetterDef());
2248:       assertFalse(node2.isAnd());
2249:       assertFalse(node2.isObjectLit());
2250:       assertFalse(node2.isContinue());
2251:       assertFalse(node2.isNot());
2252:       assertEquals(40, node2.getType());
2253:       assertFalse(node2.isFunction());
2254:       
2255:       node0.setType(49);
2256:       assertEquals(2, Node.POST_FLAG);
2257:       assertEquals(56, Node.CHANGE_TIME);
2258:       assertEquals(37, Node.OPT_ARG_NAME);
2259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2260:       assertEquals(47, Node.IS_DISPATCHER);
2261:       assertEquals(29, Node.JSDOC_INFO_PROP);
2262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2263:       assertEquals(12, Node.COLUMN_BITS);
2264:       assertEquals(1, Node.DECR_FLAG);
2265:       assertEquals(32, Node.INCRDECR_PROP);
2266:       assertEquals(57, Node.LAST_PROP);
2267:       assertEquals(36, Node.QUOTED_PROP);
2268:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2269:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2270:       assertEquals(53, Node.INPUT_ID);
2271:       assertEquals(52, Node.LENGTH);
2272:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2273:       assertEquals(4095, Node.COLUMN_MASK);
2274:       assertEquals(57, Node.REFLECTED_OBJECT);
2275:       assertEquals(49, Node.DIRECT_EVAL);
2276:       assertEquals(48, Node.DIRECTIVES);
2277:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2278:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2279:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2280:       assertEquals(39, Node.EMPTY_BLOCK);
2281:       assertEquals(50, Node.FREE_CALL);
2282:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2283:       assertEquals(8, Node.FLAG_NO_THROWS);
2284:       assertEquals(55, Node.INFERRED_FUNCTION);
2285:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2286:       assertEquals(43, Node.IS_CONSTANT_NAME);
2287:       assertEquals(54, Node.SLASH_V);
2288:       assertEquals(30, Node.VAR_ARGS_NAME);
2289:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2290:       assertEquals(40, Node.ORIGINALNAME_PROP);
2291:       assertEquals(46, Node.IS_NAMESPACE);
2292:       assertNotSame(node0, node1);
2293:       assertFalse(node0.equals((Object)node2));
2294:       assertFalse(node0.equals((Object)node1));
2295:       assertFalse(node0.isDo());
2296:       assertFalse(node0.isWhile());
2297:       assertFalse(node0.hasMoreThanOneChild());
2298:       assertFalse(node0.isContinue());
2299:       assertFalse(node0.isAssignAdd());
2300:       assertFalse(node0.isLabel());
2301:       assertFalse(node0.isNew());
2302:       assertFalse(node0.isReturn());
2303:       assertFalse(node0.isBlock());
2304:       assertFalse(node0.isAdd());
2305:       assertFalse(node0.isVar());
2306:       assertFalse(node0.isAssign());
2307:       assertFalse(node0.hasChildren());
2308:       assertFalse(node0.isGetElem());
2309:       assertFalse(node0.isCall());
2310:       assertFalse(node0.isNull());
2311:       assertFalse(node0.isDec());
2312:       assertFalse(node0.isTypeOf());
2313:       assertFalse(node0.isOr());
2314:       assertEquals((-1), node0.getLineno());
2315:       assertFalse(node0.isExprResult());
2316:       assertFalse(node0.isName());
2317:       assertFalse(node0.isNot());
2318:       assertFalse(node0.isDebugger());
2319:       assertFalse(node0.isFunction());
2320:       assertFalse(node0.isObjectLit());
2321:       assertFalse(node0.isGetProp());
2322:       assertFalse(node0.isSetterDef());
2323:       assertFalse(node0.isCast());
2324:       
2325:       boolean boolean4 = node2.isSetterDef();
2326:       assertFalse(boolean4);
2327:       assertEquals(52, Node.LENGTH);
2328:       assertEquals(54, Node.SLASH_V);
2329:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2330:       assertEquals(57, Node.REFLECTED_OBJECT);
2331:       assertEquals(30, Node.VAR_ARGS_NAME);
2332:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2333:       assertEquals(49, Node.DIRECT_EVAL);
2334:       assertEquals(40, Node.ORIGINALNAME_PROP);
2335:       assertEquals(48, Node.DIRECTIVES);
2336:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2337:       assertEquals(8, Node.FLAG_NO_THROWS);
2338:       assertEquals(2, Node.POST_FLAG);
2339:       assertEquals(47, Node.IS_DISPATCHER);
2340:       assertEquals(29, Node.JSDOC_INFO_PROP);
2341:       assertEquals(57, Node.LAST_PROP);
2342:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2343:       assertEquals(55, Node.INFERRED_FUNCTION);
2344:       assertEquals(39, Node.EMPTY_BLOCK);
2345:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2346:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2347:       assertEquals(53, Node.INPUT_ID);
2348:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2349:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2350:       assertEquals(36, Node.QUOTED_PROP);
2351:       assertEquals(43, Node.IS_CONSTANT_NAME);
2352:       assertEquals(56, Node.CHANGE_TIME);
2353:       assertEquals(37, Node.OPT_ARG_NAME);
2354:       assertEquals(32, Node.INCRDECR_PROP);
2355:       assertEquals(46, Node.IS_NAMESPACE);
2356:       assertEquals(4095, Node.COLUMN_MASK);
2357:       assertEquals(12, Node.COLUMN_BITS);
2358:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2359:       assertEquals(50, Node.FREE_CALL);
2360:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2361:       assertEquals(1, Node.DECR_FLAG);
2362:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2363:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2364:       assertEquals(4095, Node.COLUMN_MASK);
2365:       assertEquals(43, Node.IS_CONSTANT_NAME);
2366:       assertEquals(36, Node.QUOTED_PROP);
2367:       assertEquals(53, Node.INPUT_ID);
2368:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2369:       assertEquals(8, Node.FLAG_NO_THROWS);
2370:       assertEquals(55, Node.INFERRED_FUNCTION);
2371:       assertEquals(39, Node.EMPTY_BLOCK);
2372:       assertEquals(29, Node.JSDOC_INFO_PROP);
2373:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2374:       assertEquals(56, Node.CHANGE_TIME);
2375:       assertEquals(57, Node.REFLECTED_OBJECT);
2376:       assertEquals(48, Node.DIRECTIVES);
2377:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2378:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2379:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2380:       assertEquals(37, Node.OPT_ARG_NAME);
2381:       assertEquals(30, Node.VAR_ARGS_NAME);
2382:       assertEquals(49, Node.DIRECT_EVAL);
2383:       assertEquals(1, Node.DECR_FLAG);
2384:       assertEquals(57, Node.LAST_PROP);
2385:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2386:       assertEquals(12, Node.COLUMN_BITS);
2387:       assertEquals(46, Node.IS_NAMESPACE);
2388:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2389:       assertEquals(32, Node.INCRDECR_PROP);
2390:       assertEquals(52, Node.LENGTH);
2391:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2392:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2393:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2394:       assertEquals(50, Node.FREE_CALL);
2395:       assertEquals(2, Node.POST_FLAG);
2396:       assertEquals(47, Node.IS_DISPATCHER);
2397:       assertEquals(54, Node.SLASH_V);
2398:       assertEquals(40, Node.ORIGINALNAME_PROP);
2399:       assertNotSame(node1, node0);
2400:       assertFalse(node1.equals((Object)node0));
2401:       assertFalse(node1.equals((Object)node2));
2402:       assertFalse(node2.equals((Object)node1));
2403:       assertFalse(node2.equals((Object)node0));
2404:       assertTrue(boolean4 == boolean1);
2405:       assertTrue(boolean4 == boolean3);
2406:       assertTrue(boolean4 == boolean0);
2407:       assertTrue(boolean4 == boolean2);
2408:       
2409:       int int0 = node0.getChildCount();
2410:       assertEquals(0, int0);
2411:       assertEquals(2, Node.POST_FLAG);
2412:       assertEquals(56, Node.CHANGE_TIME);
2413:       assertEquals(37, Node.OPT_ARG_NAME);
2414:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2415:       assertEquals(47, Node.IS_DISPATCHER);
2416:       assertEquals(29, Node.JSDOC_INFO_PROP);
2417:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2418:       assertEquals(12, Node.COLUMN_BITS);
2419:       assertEquals(1, Node.DECR_FLAG);
2420:       assertEquals(32, Node.INCRDECR_PROP);
2421:       assertEquals(57, Node.LAST_PROP);
2422:       assertEquals(36, Node.QUOTED_PROP);
2423:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2425:       assertEquals(53, Node.INPUT_ID);
2426:       assertEquals(52, Node.LENGTH);
2427:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2428:       assertEquals(4095, Node.COLUMN_MASK);
2429:       assertEquals(57, Node.REFLECTED_OBJECT);
2430:       assertEquals(49, Node.DIRECT_EVAL);
2431:       assertEquals(48, Node.DIRECTIVES);
2432:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2433:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2434:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2435:       assertEquals(39, Node.EMPTY_BLOCK);
2436:       assertEquals(50, Node.FREE_CALL);
2437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2438:       assertEquals(8, Node.FLAG_NO_THROWS);
2439:       assertEquals(55, Node.INFERRED_FUNCTION);
2440:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2441:       assertEquals(43, Node.IS_CONSTANT_NAME);
2442:       assertEquals(54, Node.SLASH_V);
2443:       assertEquals(30, Node.VAR_ARGS_NAME);
2444:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2445:       assertEquals(40, Node.ORIGINALNAME_PROP);
2446:       assertEquals(46, Node.IS_NAMESPACE);
2447:       assertNotSame(node0, node1);
2448:       assertFalse(node0.equals((Object)node2));
2449:       assertFalse(node0.equals((Object)node1));
2450:       
2451:       boolean boolean5 = node2.isEmpty();
2452:       assertFalse(boolean5);
2453:       assertEquals(52, Node.LENGTH);
2454:       assertEquals(54, Node.SLASH_V);
2455:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2456:       assertEquals(57, Node.REFLECTED_OBJECT);
2457:       assertEquals(30, Node.VAR_ARGS_NAME);
2458:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2459:       assertEquals(49, Node.DIRECT_EVAL);
2460:       assertEquals(40, Node.ORIGINALNAME_PROP);
2461:       assertEquals(48, Node.DIRECTIVES);
2462:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2463:       assertEquals(8, Node.FLAG_NO_THROWS);
2464:       assertEquals(2, Node.POST_FLAG);
2465:       assertEquals(47, Node.IS_DISPATCHER);
2466:       assertEquals(29, Node.JSDOC_INFO_PROP);
2467:       assertEquals(57, Node.LAST_PROP);
2468:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2469:       assertEquals(55, Node.INFERRED_FUNCTION);
2470:       assertEquals(39, Node.EMPTY_BLOCK);
2471:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2472:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2473:       assertEquals(53, Node.INPUT_ID);
2474:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2475:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2476:       assertEquals(36, Node.QUOTED_PROP);
2477:       assertEquals(43, Node.IS_CONSTANT_NAME);
2478:       assertEquals(56, Node.CHANGE_TIME);
2479:       assertEquals(37, Node.OPT_ARG_NAME);
2480:       assertEquals(32, Node.INCRDECR_PROP);
2481:       assertEquals(46, Node.IS_NAMESPACE);
2482:       assertEquals(4095, Node.COLUMN_MASK);
2483:       assertEquals(12, Node.COLUMN_BITS);
2484:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2485:       assertEquals(50, Node.FREE_CALL);
2486:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2487:       assertEquals(1, Node.DECR_FLAG);
2488:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2489:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2490:       assertEquals(4095, Node.COLUMN_MASK);
2491:       assertEquals(43, Node.IS_CONSTANT_NAME);
2492:       assertEquals(36, Node.QUOTED_PROP);
2493:       assertEquals(53, Node.INPUT_ID);
2494:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2495:       assertEquals(8, Node.FLAG_NO_THROWS);
2496:       assertEquals(55, Node.INFERRED_FUNCTION);
2497:       assertEquals(39, Node.EMPTY_BLOCK);
2498:       assertEquals(29, Node.JSDOC_INFO_PROP);
2499:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2500:       assertEquals(56, Node.CHANGE_TIME);
2501:       assertEquals(57, Node.REFLECTED_OBJECT);
2502:       assertEquals(48, Node.DIRECTIVES);
2503:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2504:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2505:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2506:       assertEquals(37, Node.OPT_ARG_NAME);
2507:       assertEquals(30, Node.VAR_ARGS_NAME);
2508:       assertEquals(49, Node.DIRECT_EVAL);
2509:       assertEquals(1, Node.DECR_FLAG);
2510:       assertEquals(57, Node.LAST_PROP);
2511:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2512:       assertEquals(12, Node.COLUMN_BITS);
2513:       assertEquals(46, Node.IS_NAMESPACE);
2514:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2515:       assertEquals(32, Node.INCRDECR_PROP);
2516:       assertEquals(52, Node.LENGTH);
2517:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2518:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2519:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2520:       assertEquals(50, Node.FREE_CALL);
2521:       assertEquals(2, Node.POST_FLAG);
2522:       assertEquals(47, Node.IS_DISPATCHER);
2523:       assertEquals(54, Node.SLASH_V);
2524:       assertEquals(40, Node.ORIGINALNAME_PROP);
2525:       assertNotSame(node1, node0);
2526:       assertTrue(boolean5 == boolean2);
2527:       assertTrue(boolean5 == boolean0);
2528:       assertTrue(boolean5 == boolean3);
2529:       assertTrue(boolean5 == boolean4);
2530:       assertTrue(boolean5 == boolean1);
2531:       assertFalse(node1.equals((Object)node0));
2532:       assertFalse(node1.equals((Object)node2));
2533:       assertFalse(node2.equals((Object)node1));
2534:       assertFalse(node2.equals((Object)node0));
2535:       
2536:       int int1 = Node.DIRECTIVES;
2537:       assertEquals(48, int1);
2538:       assertFalse(int1 == int0);
2539:   }
2540: }
RegularFileObject[/tmp/EvoSuite_159_1628157887962/com/google/javascript/rhino/Node_159_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:48 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_159_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_159_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_159_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:48.673 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(126, "U`*}|T8Eq#<");
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertNotNull(node0);
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals(126, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());

Node node1 = Node.newString("U`*}|T8Eq#<");
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals(126, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());

JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PROTECTED;
assertEquals(JSDocInfo.Visibility.PROTECTED, jSDocInfo_Visibility0);

boolean boolean0 = node_NodeMismatch0.equals(jSDocInfo_Visibility0);
assertFalse(boolean0);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals(126, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());

boolean boolean1 = node1.isEquivalentTo(node0, false, true, false);
assertFalse(boolean1);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals(126, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node0));
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node1, node0);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());

boolean boolean2 = node1.isIf();
assertFalse(boolean2);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());

Node node2 = new Node(40, node1);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertTrue(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isScript());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());

boolean boolean3 = node0.isEquivalentTo(node1);
assertFalse(boolean3);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals(126, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());

String string0 = node0.checkTreeEquals(node2);
assertEquals("Node tree inequality:\nTree1:\nLABEL U`*}|T8Eq#<\n\n\nTree2:\nSTRING\n    STRING U`*}|T8Eq#<\n\n\nSubtree1: LABEL U`*}|T8Eq#<\n\n\nSubtree2: STRING\n    STRING U`*}|T8Eq#<\n", string0);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(string0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals(126, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertTrue(node0.isLabel());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertTrue(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isScript());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());

InputId inputId0 = node2.getInputId();
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node1, node0);
assertNull(inputId0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertTrue(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isScript());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());

node2.setInputId((InputId) null);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(40, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals((-1), node1.getCharno());
assertTrue(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isSwitch());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertTrue(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isScript());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());

node0.setType(49);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());

boolean boolean4 = node2.isSetterDef();
assertFalse(boolean4);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);

int int0 = node0.getChildCount();
assertEquals(0, int0);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));

boolean boolean5 = node2.isEmpty();
assertFalse(boolean5);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node1, node0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));

int int1 = Node.DIRECTIVES;
assertEquals(48, int1);
assertFalse(int1 == int0);


[MASTER] 10:04:51.918 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_177_1628157891818/com/google/javascript/rhino/Node_177_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_177_1628157891818/com/google/javascript/rhino/Node_177_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:51.918 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:51.918 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:51.918 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 774
[MASTER] 10:04:51.919 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_177_1628157891818/com/google/javascript/rhino/Node_177_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.FileSystemHandling;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_177_tmp__ESTest extends Node_177_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
22:       assertNotNull(fileSystemHandling0);
23:       
24:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
25:       assertTrue(boolean0);
26:       
27:       Node node0 = Node.newString("vaQi{plm;SC", 124, 936);
28:       assertEquals(15, Node.NO_SIDE_EFFECTS);
29:       assertEquals(57, Node.LAST_PROP);
30:       assertEquals(49, Node.DIRECT_EVAL);
31:       assertEquals(30, Node.VAR_ARGS_NAME);
32:       assertEquals(1, Node.DECR_FLAG);
33:       assertEquals(46, Node.IS_NAMESPACE);
34:       assertEquals(52, Node.LENGTH);
35:       assertEquals(51, Node.STATIC_SOURCE_FILE);
36:       assertEquals(54, Node.SLASH_V);
37:       assertEquals(57, Node.REFLECTED_OBJECT);
38:       assertEquals(56, Node.CHANGE_TIME);
39:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
40:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
41:       assertEquals(50, Node.FREE_CALL);
42:       assertEquals(37, Node.OPT_ARG_NAME);
43:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
44:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
45:       assertEquals(32, Node.INCRDECR_PROP);
46:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
47:       assertEquals(12, Node.COLUMN_BITS);
48:       assertEquals(36, Node.QUOTED_PROP);
49:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
50:       assertEquals(4095, Node.COLUMN_MASK);
51:       assertEquals(53, Node.INPUT_ID);
52:       assertEquals(55, Node.INFERRED_FUNCTION);
53:       assertEquals(48, Node.DIRECTIVES);
54:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
55:       assertEquals(43, Node.IS_CONSTANT_NAME);
56:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
57:       assertEquals(47, Node.IS_DISPATCHER);
58:       assertEquals(2, Node.POST_FLAG);
59:       assertEquals(40, Node.ORIGINALNAME_PROP);
60:       assertEquals(8, Node.FLAG_NO_THROWS);
61:       assertEquals(39, Node.EMPTY_BLOCK);
62:       assertEquals(29, Node.JSDOC_INFO_PROP);
63:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
64:       assertNotNull(node0);
65:       assertFalse(node0.isCall());
66:       assertFalse(node0.isName());
67:       assertFalse(node0.isNull());
68:       assertEquals(124, node0.getLineno());
69:       assertFalse(node0.isStringKey());
70:       assertFalse(node0.isParamList());
71:       assertFalse(node0.isRegExp());
72:       assertFalse(node0.hasMoreThanOneChild());
73:       assertFalse(node0.isCatch());
74:       assertTrue(node0.isString());
75:       assertFalse(node0.isBlock());
76:       assertFalse(node0.isTry());
77:       assertFalse(node0.hasChildren());
78:       assertFalse(node0.isReturn());
79:       assertFalse(node0.isWhile());
80:       assertFalse(node0.isFor());
81:       assertFalse(node0.isCast());
82:       assertFalse(node0.isDebugger());
83:       assertFalse(node0.isIf());
84:       assertFalse(node0.isNE());
85:       assertFalse(node0.isContinue());
86:       assertEquals(40, node0.getType());
87:       assertFalse(node0.isIn());
88:       assertFalse(node0.isInc());
89:       assertFalse(node0.isFunction());
90:       assertFalse(node0.isSetterDef());
91:       assertEquals(508840, node0.getSourcePosition());
92:       assertFalse(node0.isThrow());
93:       assertFalse(node0.isFalse());
94:       assertFalse(node0.isBreak());
95:       assertFalse(node0.isSwitch());
96:       assertFalse(node0.isAnd());
97:       assertFalse(node0.isObjectLit());
98:       assertFalse(node0.isNot());
99:       assertFalse(node0.isCase());
100:       assertFalse(node0.isWith());
101:       assertFalse(node0.isScript());
102:       assertFalse(node0.isInstanceOf());
103:       assertFalse(node0.isGetProp());
104:       assertFalse(node0.isThis());
105:       assertFalse(node0.isComma());
106:       assertFalse(node0.isHook());
107:       assertFalse(node0.isGetElem());
108:       assertFalse(node0.isAssign());
109:       assertFalse(node0.isLabelName());
110:       assertFalse(node0.hasOneChild());
111:       assertFalse(node0.isArrayLit());
112:       assertFalse(node0.isDec());
113:       assertFalse(node0.isGetterDef());
114:       assertFalse(node0.isTypeOf());
115:       assertFalse(node0.isNumber());
116:       assertFalse(node0.isEmpty());
117:       assertFalse(node0.isVoid());
118:       assertFalse(node0.isExprResult());
119:       assertFalse(node0.isTrue());
120:       assertFalse(node0.isOr());
121:       assertFalse(node0.isDelProp());
122:       assertFalse(node0.isDo());
123:       assertEquals(936, node0.getCharno());
124:       assertEquals(0, node0.getChildCount());
125:       assertFalse(node0.isAdd());
126:       assertFalse(node0.isLabel());
127:       assertFalse(node0.isNew());
128:       assertFalse(node0.isDefaultCase());
129:       assertFalse(node0.isVar());
130:       assertFalse(node0.isAssignAdd());
131:       
132:       node0.detachChildren();
133:       assertEquals(15, Node.NO_SIDE_EFFECTS);
134:       assertEquals(57, Node.LAST_PROP);
135:       assertEquals(49, Node.DIRECT_EVAL);
136:       assertEquals(30, Node.VAR_ARGS_NAME);
137:       assertEquals(1, Node.DECR_FLAG);
138:       assertEquals(46, Node.IS_NAMESPACE);
139:       assertEquals(52, Node.LENGTH);
140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
141:       assertEquals(54, Node.SLASH_V);
142:       assertEquals(57, Node.REFLECTED_OBJECT);
143:       assertEquals(56, Node.CHANGE_TIME);
144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
145:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
146:       assertEquals(50, Node.FREE_CALL);
147:       assertEquals(37, Node.OPT_ARG_NAME);
148:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
149:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
150:       assertEquals(32, Node.INCRDECR_PROP);
151:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
152:       assertEquals(12, Node.COLUMN_BITS);
153:       assertEquals(36, Node.QUOTED_PROP);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(4095, Node.COLUMN_MASK);
156:       assertEquals(53, Node.INPUT_ID);
157:       assertEquals(55, Node.INFERRED_FUNCTION);
158:       assertEquals(48, Node.DIRECTIVES);
159:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
162:       assertEquals(47, Node.IS_DISPATCHER);
163:       assertEquals(2, Node.POST_FLAG);
164:       assertEquals(40, Node.ORIGINALNAME_PROP);
165:       assertEquals(8, Node.FLAG_NO_THROWS);
166:       assertEquals(39, Node.EMPTY_BLOCK);
167:       assertEquals(29, Node.JSDOC_INFO_PROP);
168:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
169:       assertFalse(node0.isCall());
170:       assertFalse(node0.isName());
171:       assertFalse(node0.isNull());
172:       assertEquals(124, node0.getLineno());
173:       assertFalse(node0.isStringKey());
174:       assertFalse(node0.isParamList());
175:       assertFalse(node0.isRegExp());
176:       assertFalse(node0.hasMoreThanOneChild());
177:       assertFalse(node0.isCatch());
178:       assertTrue(node0.isString());
179:       assertFalse(node0.isBlock());
180:       assertFalse(node0.isTry());
181:       assertFalse(node0.hasChildren());
182:       assertFalse(node0.isReturn());
183:       assertFalse(node0.isWhile());
184:       assertFalse(node0.isFor());
185:       assertFalse(node0.isCast());
186:       assertFalse(node0.isDebugger());
187:       assertFalse(node0.isIf());
188:       assertFalse(node0.isNE());
189:       assertFalse(node0.isContinue());
190:       assertEquals(40, node0.getType());
191:       assertFalse(node0.isIn());
192:       assertFalse(node0.isInc());
193:       assertFalse(node0.isFunction());
194:       assertFalse(node0.isSetterDef());
195:       assertEquals(508840, node0.getSourcePosition());
196:       assertFalse(node0.isThrow());
197:       assertFalse(node0.isFalse());
198:       assertFalse(node0.isBreak());
199:       assertFalse(node0.isSwitch());
200:       assertFalse(node0.isAnd());
201:       assertFalse(node0.isObjectLit());
202:       assertFalse(node0.isNot());
203:       assertFalse(node0.isCase());
204:       assertFalse(node0.isWith());
205:       assertFalse(node0.isScript());
206:       assertFalse(node0.isInstanceOf());
207:       assertFalse(node0.isGetProp());
208:       assertFalse(node0.isThis());
209:       assertFalse(node0.isComma());
210:       assertFalse(node0.isHook());
211:       assertFalse(node0.isGetElem());
212:       assertFalse(node0.isAssign());
213:       assertFalse(node0.isLabelName());
214:       assertFalse(node0.hasOneChild());
215:       assertFalse(node0.isArrayLit());
216:       assertFalse(node0.isDec());
217:       assertFalse(node0.isGetterDef());
218:       assertFalse(node0.isTypeOf());
219:       assertFalse(node0.isNumber());
220:       assertFalse(node0.isEmpty());
221:       assertFalse(node0.isVoid());
222:       assertFalse(node0.isExprResult());
223:       assertFalse(node0.isTrue());
224:       assertFalse(node0.isOr());
225:       assertFalse(node0.isDelProp());
226:       assertFalse(node0.isDo());
227:       assertEquals(936, node0.getCharno());
228:       assertEquals(0, node0.getChildCount());
229:       assertFalse(node0.isAdd());
230:       assertFalse(node0.isLabel());
231:       assertFalse(node0.isNew());
232:       assertFalse(node0.isDefaultCase());
233:       assertFalse(node0.isVar());
234:       assertFalse(node0.isAssignAdd());
235:       
236:       Node node1 = Node.newString("com.google.javascript.rhino.JSDocInfo$TypePosition", 57, 46);
237:       assertEquals(43, Node.IS_CONSTANT_NAME);
238:       assertEquals(36, Node.QUOTED_PROP);
239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
240:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
241:       assertEquals(4095, Node.COLUMN_MASK);
242:       assertEquals(48, Node.DIRECTIVES);
243:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
244:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
245:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
246:       assertEquals(50, Node.FREE_CALL);
247:       assertEquals(12, Node.COLUMN_BITS);
248:       assertEquals(32, Node.INCRDECR_PROP);
249:       assertEquals(1, Node.DECR_FLAG);
250:       assertEquals(15, Node.NO_SIDE_EFFECTS);
251:       assertEquals(57, Node.LAST_PROP);
252:       assertEquals(54, Node.SLASH_V);
253:       assertEquals(52, Node.LENGTH);
254:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
255:       assertEquals(30, Node.VAR_ARGS_NAME);
256:       assertEquals(51, Node.STATIC_SOURCE_FILE);
257:       assertEquals(57, Node.REFLECTED_OBJECT);
258:       assertEquals(40, Node.ORIGINALNAME_PROP);
259:       assertEquals(46, Node.IS_NAMESPACE);
260:       assertEquals(37, Node.OPT_ARG_NAME);
261:       assertEquals(49, Node.DIRECT_EVAL);
262:       assertEquals(56, Node.CHANGE_TIME);
263:       assertEquals(47, Node.IS_DISPATCHER);
264:       assertEquals(39, Node.EMPTY_BLOCK);
265:       assertEquals(29, Node.JSDOC_INFO_PROP);
266:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
267:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
268:       assertEquals(8, Node.FLAG_NO_THROWS);
269:       assertEquals(2, Node.POST_FLAG);
270:       assertEquals(55, Node.INFERRED_FUNCTION);
271:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
272:       assertEquals(53, Node.INPUT_ID);
273:       assertNotSame(node1, node0);
274:       assertNotNull(node1);
275:       assertFalse(node1.equals((Object)node0));
276:       assertFalse(node1.isAssign());
277:       assertFalse(node1.isLabelName());
278:       assertFalse(node1.isGetElem());
279:       assertFalse(node1.isTypeOf());
280:       assertFalse(node1.isNumber());
281:       assertFalse(node1.hasChildren());
282:       assertFalse(node1.isDec());
283:       assertEquals(46, node1.getCharno());
284:       assertFalse(node1.isCast());
285:       assertFalse(node1.isExprResult());
286:       assertFalse(node1.isNot());
287:       assertFalse(node1.isWith());
288:       assertFalse(node1.isAnd());
289:       assertFalse(node1.isWhile());
290:       assertFalse(node1.hasMoreThanOneChild());
291:       assertFalse(node1.isObjectLit());
292:       assertFalse(node1.isReturn());
293:       assertTrue(node1.isString());
294:       assertFalse(node1.isBlock());
295:       assertFalse(node1.isScript());
296:       assertFalse(node1.isGetProp());
297:       assertFalse(node1.hasOneChild());
298:       assertFalse(node1.isName());
299:       assertFalse(node1.isStringKey());
300:       assertFalse(node1.isVar());
301:       assertFalse(node1.isNull());
302:       assertFalse(node1.isComma());
303:       assertFalse(node1.isParamList());
304:       assertFalse(node1.isCall());
305:       assertFalse(node1.isSwitch());
306:       assertFalse(node1.isBreak());
307:       assertFalse(node1.isDo());
308:       assertFalse(node1.isDefaultCase());
309:       assertFalse(node1.isTrue());
310:       assertEquals(0, node1.getChildCount());
311:       assertFalse(node1.isAssignAdd());
312:       assertFalse(node1.isAdd());
313:       assertFalse(node1.isOr());
314:       assertFalse(node1.isLabel());
315:       assertFalse(node1.isNew());
316:       assertFalse(node1.isEmpty());
317:       assertFalse(node1.isFor());
318:       assertFalse(node1.isIf());
319:       assertFalse(node1.isNE());
320:       assertEquals(233518, node1.getSourcePosition());
321:       assertFalse(node1.isGetterDef());
322:       assertFalse(node1.isArrayLit());
323:       assertFalse(node1.isDelProp());
324:       assertFalse(node1.isVoid());
325:       assertFalse(node1.isCatch());
326:       assertFalse(node1.isRegExp());
327:       assertFalse(node1.isDebugger());
328:       assertFalse(node1.isTry());
329:       assertFalse(node1.isCase());
330:       assertFalse(node1.isFalse());
331:       assertFalse(node1.isThrow());
332:       assertFalse(node1.isHook());
333:       assertFalse(node1.isThis());
334:       assertFalse(node1.isInstanceOf());
335:       assertEquals(40, node1.getType());
336:       assertEquals(57, node1.getLineno());
337:       assertFalse(node1.isContinue());
338:       assertFalse(node1.isFunction());
339:       assertFalse(node1.isIn());
340:       assertFalse(node1.isInc());
341:       assertFalse(node1.isSetterDef());
342:       
343:       boolean boolean1 = node1.isEquivalentTo(node0, true, false, true);
344:       assertFalse(boolean1);
345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
346:       assertEquals(57, Node.LAST_PROP);
347:       assertEquals(49, Node.DIRECT_EVAL);
348:       assertEquals(30, Node.VAR_ARGS_NAME);
349:       assertEquals(1, Node.DECR_FLAG);
350:       assertEquals(46, Node.IS_NAMESPACE);
351:       assertEquals(52, Node.LENGTH);
352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
353:       assertEquals(54, Node.SLASH_V);
354:       assertEquals(57, Node.REFLECTED_OBJECT);
355:       assertEquals(56, Node.CHANGE_TIME);
356:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
357:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
358:       assertEquals(50, Node.FREE_CALL);
359:       assertEquals(37, Node.OPT_ARG_NAME);
360:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
361:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
362:       assertEquals(32, Node.INCRDECR_PROP);
363:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
364:       assertEquals(12, Node.COLUMN_BITS);
365:       assertEquals(36, Node.QUOTED_PROP);
366:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
367:       assertEquals(4095, Node.COLUMN_MASK);
368:       assertEquals(53, Node.INPUT_ID);
369:       assertEquals(55, Node.INFERRED_FUNCTION);
370:       assertEquals(48, Node.DIRECTIVES);
371:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
372:       assertEquals(43, Node.IS_CONSTANT_NAME);
373:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
374:       assertEquals(47, Node.IS_DISPATCHER);
375:       assertEquals(2, Node.POST_FLAG);
376:       assertEquals(40, Node.ORIGINALNAME_PROP);
377:       assertEquals(8, Node.FLAG_NO_THROWS);
378:       assertEquals(39, Node.EMPTY_BLOCK);
379:       assertEquals(29, Node.JSDOC_INFO_PROP);
380:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
381:       assertEquals(43, Node.IS_CONSTANT_NAME);
382:       assertEquals(36, Node.QUOTED_PROP);
383:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
384:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
385:       assertEquals(4095, Node.COLUMN_MASK);
386:       assertEquals(48, Node.DIRECTIVES);
387:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
388:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
389:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
390:       assertEquals(50, Node.FREE_CALL);
391:       assertEquals(12, Node.COLUMN_BITS);
392:       assertEquals(32, Node.INCRDECR_PROP);
393:       assertEquals(1, Node.DECR_FLAG);
394:       assertEquals(15, Node.NO_SIDE_EFFECTS);
395:       assertEquals(57, Node.LAST_PROP);
396:       assertEquals(54, Node.SLASH_V);
397:       assertEquals(52, Node.LENGTH);
398:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
399:       assertEquals(30, Node.VAR_ARGS_NAME);
400:       assertEquals(51, Node.STATIC_SOURCE_FILE);
401:       assertEquals(57, Node.REFLECTED_OBJECT);
402:       assertEquals(40, Node.ORIGINALNAME_PROP);
403:       assertEquals(46, Node.IS_NAMESPACE);
404:       assertEquals(37, Node.OPT_ARG_NAME);
405:       assertEquals(49, Node.DIRECT_EVAL);
406:       assertEquals(56, Node.CHANGE_TIME);
407:       assertEquals(47, Node.IS_DISPATCHER);
408:       assertEquals(39, Node.EMPTY_BLOCK);
409:       assertEquals(29, Node.JSDOC_INFO_PROP);
410:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
411:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
412:       assertEquals(8, Node.FLAG_NO_THROWS);
413:       assertEquals(2, Node.POST_FLAG);
414:       assertEquals(55, Node.INFERRED_FUNCTION);
415:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
416:       assertEquals(53, Node.INPUT_ID);
417:       assertNotSame(node0, node1);
418:       assertNotSame(node1, node0);
419:       assertFalse(node0.equals((Object)node1));
420:       assertFalse(node1.equals((Object)node0));
421:       assertFalse(boolean1 == boolean0);
422:       assertFalse(node0.isCall());
423:       assertFalse(node0.isName());
424:       assertFalse(node0.isNull());
425:       assertEquals(124, node0.getLineno());
426:       assertFalse(node0.isStringKey());
427:       assertFalse(node0.isParamList());
428:       assertFalse(node0.isRegExp());
429:       assertFalse(node0.hasMoreThanOneChild());
430:       assertFalse(node0.isCatch());
431:       assertTrue(node0.isString());
432:       assertFalse(node0.isBlock());
433:       assertFalse(node0.isTry());
434:       assertFalse(node0.hasChildren());
435:       assertFalse(node0.isReturn());
436:       assertFalse(node0.isWhile());
437:       assertFalse(node0.isFor());
438:       assertFalse(node0.isCast());
439:       assertFalse(node0.isDebugger());
440:       assertFalse(node0.isIf());
441:       assertFalse(node0.isNE());
442:       assertFalse(node0.isContinue());
443:       assertEquals(40, node0.getType());
444:       assertFalse(node0.isIn());
445:       assertFalse(node0.isInc());
446:       assertFalse(node0.isFunction());
447:       assertFalse(node0.isSetterDef());
448:       assertEquals(508840, node0.getSourcePosition());
449:       assertFalse(node0.isThrow());
450:       assertFalse(node0.isFalse());
451:       assertFalse(node0.isBreak());
452:       assertFalse(node0.isSwitch());
453:       assertFalse(node0.isAnd());
454:       assertFalse(node0.isObjectLit());
455:       assertFalse(node0.isNot());
456:       assertFalse(node0.isCase());
457:       assertFalse(node0.isWith());
458:       assertFalse(node0.isScript());
459:       assertFalse(node0.isInstanceOf());
460:       assertFalse(node0.isGetProp());
461:       assertFalse(node0.isThis());
462:       assertFalse(node0.isComma());
463:       assertFalse(node0.isHook());
464:       assertFalse(node0.isGetElem());
465:       assertFalse(node0.isAssign());
466:       assertFalse(node0.isLabelName());
467:       assertFalse(node0.hasOneChild());
468:       assertFalse(node0.isArrayLit());
469:       assertFalse(node0.isDec());
470:       assertFalse(node0.isGetterDef());
471:       assertFalse(node0.isTypeOf());
472:       assertFalse(node0.isNumber());
473:       assertFalse(node0.isEmpty());
474:       assertFalse(node0.isVoid());
475:       assertFalse(node0.isExprResult());
476:       assertFalse(node0.isTrue());
477:       assertFalse(node0.isOr());
478:       assertFalse(node0.isDelProp());
479:       assertFalse(node0.isDo());
480:       assertEquals(936, node0.getCharno());
481:       assertEquals(0, node0.getChildCount());
482:       assertFalse(node0.isAdd());
483:       assertFalse(node0.isLabel());
484:       assertFalse(node0.isNew());
485:       assertFalse(node0.isDefaultCase());
486:       assertFalse(node0.isVar());
487:       assertFalse(node0.isAssignAdd());
488:       assertFalse(node1.isAssign());
489:       assertFalse(node1.isLabelName());
490:       assertFalse(node1.isGetElem());
491:       assertFalse(node1.isTypeOf());
492:       assertFalse(node1.isNumber());
493:       assertFalse(node1.hasChildren());
494:       assertFalse(node1.isDec());
495:       assertEquals(46, node1.getCharno());
496:       assertFalse(node1.isCast());
497:       assertFalse(node1.isExprResult());
498:       assertFalse(node1.isNot());
499:       assertFalse(node1.isWith());
500:       assertFalse(node1.isAnd());
501:       assertFalse(node1.isWhile());
502:       assertFalse(node1.hasMoreThanOneChild());
503:       assertFalse(node1.isObjectLit());
504:       assertFalse(node1.isReturn());
505:       assertTrue(node1.isString());
506:       assertFalse(node1.isBlock());
507:       assertFalse(node1.isScript());
508:       assertFalse(node1.isGetProp());
509:       assertFalse(node1.hasOneChild());
510:       assertFalse(node1.isName());
511:       assertFalse(node1.isStringKey());
512:       assertFalse(node1.isVar());
513:       assertFalse(node1.isNull());
514:       assertFalse(node1.isComma());
515:       assertFalse(node1.isParamList());
516:       assertFalse(node1.isCall());
517:       assertFalse(node1.isSwitch());
518:       assertFalse(node1.isBreak());
519:       assertFalse(node1.isDo());
520:       assertFalse(node1.isDefaultCase());
521:       assertFalse(node1.isTrue());
522:       assertEquals(0, node1.getChildCount());
523:       assertFalse(node1.isAssignAdd());
524:       assertFalse(node1.isAdd());
525:       assertFalse(node1.isOr());
526:       assertFalse(node1.isLabel());
527:       assertFalse(node1.isNew());
528:       assertFalse(node1.isEmpty());
529:       assertFalse(node1.isFor());
530:       assertFalse(node1.isIf());
531:       assertFalse(node1.isNE());
532:       assertEquals(233518, node1.getSourcePosition());
533:       assertFalse(node1.isGetterDef());
534:       assertFalse(node1.isArrayLit());
535:       assertFalse(node1.isDelProp());
536:       assertFalse(node1.isVoid());
537:       assertFalse(node1.isCatch());
538:       assertFalse(node1.isRegExp());
539:       assertFalse(node1.isDebugger());
540:       assertFalse(node1.isTry());
541:       assertFalse(node1.isCase());
542:       assertFalse(node1.isFalse());
543:       assertFalse(node1.isThrow());
544:       assertFalse(node1.isHook());
545:       assertFalse(node1.isThis());
546:       assertFalse(node1.isInstanceOf());
547:       assertEquals(40, node1.getType());
548:       assertEquals(57, node1.getLineno());
549:       assertFalse(node1.isContinue());
550:       assertFalse(node1.isFunction());
551:       assertFalse(node1.isIn());
552:       assertFalse(node1.isInc());
553:       assertFalse(node1.isSetterDef());
554:       
555:       boolean boolean2 = node1.isInc();
556:       assertFalse(boolean2);
557:       assertEquals(43, Node.IS_CONSTANT_NAME);
558:       assertEquals(36, Node.QUOTED_PROP);
559:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
560:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
561:       assertEquals(4095, Node.COLUMN_MASK);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
564:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
565:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
566:       assertEquals(50, Node.FREE_CALL);
567:       assertEquals(12, Node.COLUMN_BITS);
568:       assertEquals(32, Node.INCRDECR_PROP);
569:       assertEquals(1, Node.DECR_FLAG);
570:       assertEquals(15, Node.NO_SIDE_EFFECTS);
571:       assertEquals(57, Node.LAST_PROP);
572:       assertEquals(54, Node.SLASH_V);
573:       assertEquals(52, Node.LENGTH);
574:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
575:       assertEquals(30, Node.VAR_ARGS_NAME);
576:       assertEquals(51, Node.STATIC_SOURCE_FILE);
577:       assertEquals(57, Node.REFLECTED_OBJECT);
578:       assertEquals(40, Node.ORIGINALNAME_PROP);
579:       assertEquals(46, Node.IS_NAMESPACE);
580:       assertEquals(37, Node.OPT_ARG_NAME);
581:       assertEquals(49, Node.DIRECT_EVAL);
582:       assertEquals(56, Node.CHANGE_TIME);
583:       assertEquals(47, Node.IS_DISPATCHER);
584:       assertEquals(39, Node.EMPTY_BLOCK);
585:       assertEquals(29, Node.JSDOC_INFO_PROP);
586:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
587:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
588:       assertEquals(8, Node.FLAG_NO_THROWS);
589:       assertEquals(2, Node.POST_FLAG);
590:       assertEquals(55, Node.INFERRED_FUNCTION);
591:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
592:       assertEquals(53, Node.INPUT_ID);
593:       assertNotSame(node1, node0);
594:       assertFalse(node1.equals((Object)node0));
595:       assertTrue(boolean2 == boolean1);
596:       assertFalse(boolean2 == boolean0);
597:       assertFalse(node1.isAssign());
598:       assertFalse(node1.isLabelName());
599:       assertFalse(node1.isGetElem());
600:       assertFalse(node1.isTypeOf());
601:       assertFalse(node1.isNumber());
602:       assertFalse(node1.hasChildren());
603:       assertFalse(node1.isDec());
604:       assertEquals(46, node1.getCharno());
605:       assertFalse(node1.isCast());
606:       assertFalse(node1.isExprResult());
607:       assertFalse(node1.isNot());
608:       assertFalse(node1.isWith());
609:       assertFalse(node1.isAnd());
610:       assertFalse(node1.isWhile());
611:       assertFalse(node1.hasMoreThanOneChild());
612:       assertFalse(node1.isObjectLit());
613:       assertFalse(node1.isReturn());
614:       assertTrue(node1.isString());
615:       assertFalse(node1.isBlock());
616:       assertFalse(node1.isScript());
617:       assertFalse(node1.isGetProp());
618:       assertFalse(node1.hasOneChild());
619:       assertFalse(node1.isName());
620:       assertFalse(node1.isStringKey());
621:       assertFalse(node1.isVar());
622:       assertFalse(node1.isNull());
623:       assertFalse(node1.isComma());
624:       assertFalse(node1.isParamList());
625:       assertFalse(node1.isCall());
626:       assertFalse(node1.isSwitch());
627:       assertFalse(node1.isBreak());
628:       assertFalse(node1.isDo());
629:       assertFalse(node1.isDefaultCase());
630:       assertFalse(node1.isTrue());
631:       assertEquals(0, node1.getChildCount());
632:       assertFalse(node1.isAssignAdd());
633:       assertFalse(node1.isAdd());
634:       assertFalse(node1.isOr());
635:       assertFalse(node1.isLabel());
636:       assertFalse(node1.isNew());
637:       assertFalse(node1.isEmpty());
638:       assertFalse(node1.isFor());
639:       assertFalse(node1.isIf());
640:       assertFalse(node1.isNE());
641:       assertEquals(233518, node1.getSourcePosition());
642:       assertFalse(node1.isGetterDef());
643:       assertFalse(node1.isArrayLit());
644:       assertFalse(node1.isDelProp());
645:       assertFalse(node1.isVoid());
646:       assertFalse(node1.isCatch());
647:       assertFalse(node1.isRegExp());
648:       assertFalse(node1.isDebugger());
649:       assertFalse(node1.isTry());
650:       assertFalse(node1.isCase());
651:       assertFalse(node1.isFalse());
652:       assertFalse(node1.isThrow());
653:       assertFalse(node1.isHook());
654:       assertFalse(node1.isThis());
655:       assertFalse(node1.isInstanceOf());
656:       assertEquals(40, node1.getType());
657:       assertEquals(57, node1.getLineno());
658:       assertFalse(node1.isContinue());
659:       assertFalse(node1.isFunction());
660:       assertFalse(node1.isIn());
661:       assertFalse(node1.isInc());
662:       assertFalse(node1.isSetterDef());
663:       
664:       Node node2 = Node.newString("S[H> ", 791, 4);
665:       assertEquals(40, Node.ORIGINALNAME_PROP);
666:       assertEquals(57, Node.REFLECTED_OBJECT);
667:       assertEquals(54, Node.SLASH_V);
668:       assertEquals(15, Node.NO_SIDE_EFFECTS);
669:       assertEquals(39, Node.EMPTY_BLOCK);
670:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
671:       assertEquals(50, Node.FREE_CALL);
672:       assertEquals(52, Node.LENGTH);
673:       assertEquals(8, Node.FLAG_NO_THROWS);
674:       assertEquals(12, Node.COLUMN_BITS);
675:       assertEquals(4095, Node.COLUMN_MASK);
676:       assertEquals(49, Node.DIRECT_EVAL);
677:       assertEquals(1, Node.DECR_FLAG);
678:       assertEquals(48, Node.DIRECTIVES);
679:       assertEquals(32, Node.INCRDECR_PROP);
680:       assertEquals(37, Node.OPT_ARG_NAME);
681:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
682:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
683:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
684:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
685:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
686:       assertEquals(43, Node.IS_CONSTANT_NAME);
687:       assertEquals(56, Node.CHANGE_TIME);
688:       assertEquals(36, Node.QUOTED_PROP);
689:       assertEquals(53, Node.INPUT_ID);
690:       assertEquals(29, Node.JSDOC_INFO_PROP);
691:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
692:       assertEquals(55, Node.INFERRED_FUNCTION);
693:       assertEquals(51, Node.STATIC_SOURCE_FILE);
694:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
695:       assertEquals(46, Node.IS_NAMESPACE);
696:       assertEquals(57, Node.LAST_PROP);
697:       assertEquals(2, Node.POST_FLAG);
698:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
699:       assertEquals(47, Node.IS_DISPATCHER);
700:       assertEquals(30, Node.VAR_ARGS_NAME);
701:       assertNotSame(node2, node1);
702:       assertNotSame(node2, node0);
703:       assertNotNull(node2);
704:       assertFalse(node2.equals((Object)node1));
705:       assertFalse(node2.equals((Object)node0));
706:       assertFalse(node2.isInstanceOf());
707:       assertFalse(node2.isGetProp());
708:       assertFalse(node2.isAnd());
709:       assertEquals(4, node2.getCharno());
710:       assertEquals(791, node2.getLineno());
711:       assertFalse(node2.isScript());
712:       assertFalse(node2.isNot());
713:       assertFalse(node2.isObjectLit());
714:       assertFalse(node2.isHook());
715:       assertFalse(node2.isExprResult());
716:       assertFalse(node2.hasOneChild());
717:       assertFalse(node2.isAssign());
718:       assertFalse(node2.isWith());
719:       assertFalse(node2.isBreak());
720:       assertFalse(node2.hasChildren());
721:       assertFalse(node2.isGetElem());
722:       assertFalse(node2.isComma());
723:       assertFalse(node2.isThis());
724:       assertFalse(node2.isDec());
725:       assertFalse(node2.isTypeOf());
726:       assertFalse(node2.isReturn());
727:       assertFalse(node2.isNE());
728:       assertFalse(node2.isIf());
729:       assertFalse(node2.isIn());
730:       assertFalse(node2.isInc());
731:       assertFalse(node2.isThrow());
732:       assertEquals(40, node2.getType());
733:       assertFalse(node2.isCast());
734:       assertFalse(node2.isFunction());
735:       assertFalse(node2.isContinue());
736:       assertFalse(node2.isFalse());
737:       assertFalse(node2.isSetterDef());
738:       assertFalse(node2.isParamList());
739:       assertFalse(node2.isStringKey());
740:       assertFalse(node2.isNull());
741:       assertFalse(node2.isDebugger());
742:       assertFalse(node2.isBlock());
743:       assertFalse(node2.isTrue());
744:       assertFalse(node2.isVoid());
745:       assertTrue(node2.isString());
746:       assertFalse(node2.isName());
747:       assertFalse(node2.isTry());
748:       assertEquals(3239940, node2.getSourcePosition());
749:       assertFalse(node2.isWhile());
750:       assertFalse(node2.isCall());
751:       assertFalse(node2.isFor());
752:       assertFalse(node2.hasMoreThanOneChild());
753:       assertFalse(node2.isCatch());
754:       assertFalse(node2.isRegExp());
755:       assertFalse(node2.isAssignAdd());
756:       assertFalse(node2.isOr());
757:       assertFalse(node2.isLabel());
758:       assertFalse(node2.isDelProp());
759:       assertFalse(node2.isDo());
760:       assertFalse(node2.isCase());
761:       assertFalse(node2.isEmpty());
762:       assertFalse(node2.isNumber());
763:       assertFalse(node2.isGetterDef());
764:       assertFalse(node2.isVar());
765:       assertFalse(node2.isAdd());
766:       assertFalse(node2.isSwitch());
767:       assertFalse(node2.isArrayLit());
768:       assertFalse(node2.isNew());
769:       assertFalse(node2.isDefaultCase());
770:       assertFalse(node2.isLabelName());
771:       assertEquals(0, node2.getChildCount());
772:       
773:       Iterable<Node> iterable0 = node2.children();
774:       assertFalse(iterable0.contains(node0));
775:       assertEquals(40, Node.ORIGINALNAME_PROP);
776:       assertEquals(57, Node.REFLECTED_OBJECT);
777:       assertEquals(54, Node.SLASH_V);
778:       assertEquals(15, Node.NO_SIDE_EFFECTS);
779:       assertEquals(39, Node.EMPTY_BLOCK);
780:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
781:       assertEquals(50, Node.FREE_CALL);
782:       assertEquals(52, Node.LENGTH);
783:       assertEquals(8, Node.FLAG_NO_THROWS);
784:       assertEquals(12, Node.COLUMN_BITS);
785:       assertEquals(4095, Node.COLUMN_MASK);
786:       assertEquals(49, Node.DIRECT_EVAL);
787:       assertEquals(1, Node.DECR_FLAG);
788:       assertEquals(48, Node.DIRECTIVES);
789:       assertEquals(32, Node.INCRDECR_PROP);
790:       assertEquals(37, Node.OPT_ARG_NAME);
791:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
792:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
793:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
794:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
795:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
796:       assertEquals(43, Node.IS_CONSTANT_NAME);
797:       assertEquals(56, Node.CHANGE_TIME);
798:       assertEquals(36, Node.QUOTED_PROP);
799:       assertEquals(53, Node.INPUT_ID);
800:       assertEquals(29, Node.JSDOC_INFO_PROP);
801:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
802:       assertEquals(55, Node.INFERRED_FUNCTION);
803:       assertEquals(51, Node.STATIC_SOURCE_FILE);
804:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
805:       assertEquals(46, Node.IS_NAMESPACE);
806:       assertEquals(57, Node.LAST_PROP);
807:       assertEquals(2, Node.POST_FLAG);
808:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
809:       assertEquals(47, Node.IS_DISPATCHER);
810:       assertEquals(30, Node.VAR_ARGS_NAME);
811:       assertNotSame(node2, node1);
812:       assertNotSame(node2, node0);
813:       assertNotNull(iterable0);
814:       assertFalse(node2.equals((Object)node1));
815:       assertFalse(node2.equals((Object)node0));
816:       assertFalse(node2.isInstanceOf());
817:       assertFalse(node2.isGetProp());
818:       assertFalse(node2.isAnd());
819:       assertEquals(4, node2.getCharno());
820:       assertEquals(791, node2.getLineno());
821:       assertFalse(node2.isScript());
822:       assertFalse(node2.isNot());
823:       assertFalse(node2.isObjectLit());
824:       assertFalse(node2.isHook());
825:       assertFalse(node2.isExprResult());
826:       assertFalse(node2.hasOneChild());
827:       assertFalse(node2.isAssign());
828:       assertFalse(node2.isWith());
829:       assertFalse(node2.isBreak());
830:       assertFalse(node2.hasChildren());
831:       assertFalse(node2.isGetElem());
832:       assertFalse(node2.isComma());
833:       assertFalse(node2.isThis());
834:       assertFalse(node2.isDec());
835:       assertFalse(node2.isTypeOf());
836:       assertFalse(node2.isReturn());
837:       assertFalse(node2.isNE());
838:       assertFalse(node2.isIf());
839:       assertFalse(node2.isIn());
840:       assertFalse(node2.isInc());
841:       assertFalse(node2.isThrow());
842:       assertEquals(40, node2.getType());
843:       assertFalse(node2.isCast());
844:       assertFalse(node2.isFunction());
845:       assertFalse(node2.isContinue());
846:       assertFalse(node2.isFalse());
847:       assertFalse(node2.isSetterDef());
848:       assertFalse(node2.isParamList());
849:       assertFalse(node2.isStringKey());
850:       assertFalse(node2.isNull());
851:       assertFalse(node2.isDebugger());
852:       assertFalse(node2.isBlock());
853:       assertFalse(node2.isTrue());
854:       assertFalse(node2.isVoid());
855:       assertTrue(node2.isString());
856:       assertFalse(node2.isName());
857:       assertFalse(node2.isTry());
858:       assertEquals(3239940, node2.getSourcePosition());
859:       assertFalse(node2.isWhile());
860:       assertFalse(node2.isCall());
861:       assertFalse(node2.isFor());
862:       assertFalse(node2.hasMoreThanOneChild());
863:       assertFalse(node2.isCatch());
864:       assertFalse(node2.isRegExp());
865:       assertFalse(node2.isAssignAdd());
866:       assertFalse(node2.isOr());
867:       assertFalse(node2.isLabel());
868:       assertFalse(node2.isDelProp());
869:       assertFalse(node2.isDo());
870:       assertFalse(node2.isCase());
871:       assertFalse(node2.isEmpty());
872:       assertFalse(node2.isNumber());
873:       assertFalse(node2.isGetterDef());
874:       assertFalse(node2.isVar());
875:       assertFalse(node2.isAdd());
876:       assertFalse(node2.isSwitch());
877:       assertFalse(node2.isArrayLit());
878:       assertFalse(node2.isNew());
879:       assertFalse(node2.isDefaultCase());
880:       assertFalse(node2.isLabelName());
881:       assertEquals(0, node2.getChildCount());
882:       
883:       boolean boolean3 = node1.isNoSideEffectsCall();
884:       assertFalse(boolean3);
885:       assertEquals(43, Node.IS_CONSTANT_NAME);
886:       assertEquals(36, Node.QUOTED_PROP);
887:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
888:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
889:       assertEquals(4095, Node.COLUMN_MASK);
890:       assertEquals(48, Node.DIRECTIVES);
891:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
892:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
893:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
894:       assertEquals(50, Node.FREE_CALL);
895:       assertEquals(12, Node.COLUMN_BITS);
896:       assertEquals(32, Node.INCRDECR_PROP);
897:       assertEquals(1, Node.DECR_FLAG);
898:       assertEquals(15, Node.NO_SIDE_EFFECTS);
899:       assertEquals(57, Node.LAST_PROP);
900:       assertEquals(54, Node.SLASH_V);
901:       assertEquals(52, Node.LENGTH);
902:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
903:       assertEquals(30, Node.VAR_ARGS_NAME);
904:       assertEquals(51, Node.STATIC_SOURCE_FILE);
905:       assertEquals(57, Node.REFLECTED_OBJECT);
906:       assertEquals(40, Node.ORIGINALNAME_PROP);
907:       assertEquals(46, Node.IS_NAMESPACE);
908:       assertEquals(37, Node.OPT_ARG_NAME);
909:       assertEquals(49, Node.DIRECT_EVAL);
910:       assertEquals(56, Node.CHANGE_TIME);
911:       assertEquals(47, Node.IS_DISPATCHER);
912:       assertEquals(39, Node.EMPTY_BLOCK);
913:       assertEquals(29, Node.JSDOC_INFO_PROP);
914:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
915:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
916:       assertEquals(8, Node.FLAG_NO_THROWS);
917:       assertEquals(2, Node.POST_FLAG);
918:       assertEquals(55, Node.INFERRED_FUNCTION);
919:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
920:       assertEquals(53, Node.INPUT_ID);
921:       assertNotSame(node1, node2);
922:       assertNotSame(node1, node0);
923:       assertFalse(node1.equals((Object)node2));
924:       assertFalse(node1.equals((Object)node0));
925:       assertTrue(boolean3 == boolean1);
926:       assertTrue(boolean3 == boolean2);
927:       assertFalse(boolean3 == boolean0);
928:       assertFalse(node1.isAssign());
929:       assertFalse(node1.isLabelName());
930:       assertFalse(node1.isGetElem());
931:       assertFalse(node1.isTypeOf());
932:       assertFalse(node1.isNumber());
933:       assertFalse(node1.hasChildren());
934:       assertFalse(node1.isDec());
935:       assertEquals(46, node1.getCharno());
936:       assertFalse(node1.isCast());
937:       assertFalse(node1.isExprResult());
938:       assertFalse(node1.isNot());
939:       assertFalse(node1.isWith());
940:       assertFalse(node1.isAnd());
941:       assertFalse(node1.isWhile());
942:       assertFalse(node1.hasMoreThanOneChild());
943:       assertFalse(node1.isObjectLit());
944:       assertFalse(node1.isReturn());
945:       assertTrue(node1.isString());
946:       assertFalse(node1.isBlock());
947:       assertFalse(node1.isScript());
948:       assertFalse(node1.isGetProp());
949:       assertFalse(node1.hasOneChild());
950:       assertFalse(node1.isName());
951:       assertFalse(node1.isStringKey());
952:       assertFalse(node1.isVar());
953:       assertFalse(node1.isNull());
954:       assertFalse(node1.isComma());
955:       assertFalse(node1.isParamList());
956:       assertFalse(node1.isCall());
957:       assertFalse(node1.isSwitch());
958:       assertFalse(node1.isBreak());
959:       assertFalse(node1.isDo());
960:       assertFalse(node1.isDefaultCase());
961:       assertFalse(node1.isTrue());
962:       assertEquals(0, node1.getChildCount());
963:       assertFalse(node1.isAssignAdd());
964:       assertFalse(node1.isAdd());
965:       assertFalse(node1.isOr());
966:       assertFalse(node1.isLabel());
967:       assertFalse(node1.isNew());
968:       assertFalse(node1.isEmpty());
969:       assertFalse(node1.isFor());
970:       assertFalse(node1.isIf());
971:       assertFalse(node1.isNE());
972:       assertEquals(233518, node1.getSourcePosition());
973:       assertFalse(node1.isGetterDef());
974:       assertFalse(node1.isArrayLit());
975:       assertFalse(node1.isDelProp());
976:       assertFalse(node1.isVoid());
977:       assertFalse(node1.isCatch());
978:       assertFalse(node1.isRegExp());
979:       assertFalse(node1.isDebugger());
980:       assertFalse(node1.isTry());
981:       assertFalse(node1.isCase());
982:       assertFalse(node1.isFalse());
983:       assertFalse(node1.isThrow());
984:       assertFalse(node1.isHook());
985:       assertFalse(node1.isThis());
986:       assertFalse(node1.isInstanceOf());
987:       assertEquals(40, node1.getType());
988:       assertEquals(57, node1.getLineno());
989:       assertFalse(node1.isContinue());
990:       assertFalse(node1.isFunction());
991:       assertFalse(node1.isIn());
992:       assertFalse(node1.isInc());
993:       assertFalse(node1.isSetterDef());
994:       
995:       Node node3 = Node.newString(100, "com.google.javacript.rhino.jstype.NumbrType", 162, 2277);
996:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
997:       assertEquals(54, Node.SLASH_V);
998:       assertEquals(52, Node.LENGTH);
999:       assertEquals(40, Node.ORIGINALNAME_PROP);
1000:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1001:       assertEquals(1, Node.DECR_FLAG);
1002:       assertEquals(30, Node.VAR_ARGS_NAME);
1003:       assertEquals(57, Node.LAST_PROP);
1004:       assertEquals(12, Node.COLUMN_BITS);
1005:       assertEquals(48, Node.DIRECTIVES);
1006:       assertEquals(37, Node.OPT_ARG_NAME);
1007:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1008:       assertEquals(8, Node.FLAG_NO_THROWS);
1009:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1010:       assertEquals(55, Node.INFERRED_FUNCTION);
1011:       assertEquals(29, Node.JSDOC_INFO_PROP);
1012:       assertEquals(39, Node.EMPTY_BLOCK);
1013:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1014:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1015:       assertEquals(49, Node.DIRECT_EVAL);
1016:       assertEquals(56, Node.CHANGE_TIME);
1017:       assertEquals(36, Node.QUOTED_PROP);
1018:       assertEquals(57, Node.REFLECTED_OBJECT);
1019:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1020:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1021:       assertEquals(53, Node.INPUT_ID);
1022:       assertEquals(4095, Node.COLUMN_MASK);
1023:       assertEquals(47, Node.IS_DISPATCHER);
1024:       assertEquals(2, Node.POST_FLAG);
1025:       assertEquals(32, Node.INCRDECR_PROP);
1026:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1027:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1028:       assertEquals(50, Node.FREE_CALL);
1029:       assertEquals(46, Node.IS_NAMESPACE);
1030:       assertEquals(43, Node.IS_CONSTANT_NAME);
1031:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1032:       assertNotSame(node3, node1);
1033:       assertNotSame(node3, node2);
1034:       assertNotSame(node3, node0);
1035:       assertNotNull(node3);
1036:       assertFalse(node3.equals((Object)node1));
1037:       assertFalse(node3.equals((Object)node2));
1038:       assertFalse(node3.equals((Object)node0));
1039:       assertFalse(node3.isBreak());
1040:       assertFalse(node3.isComma());
1041:       assertFalse(node3.isFalse());
1042:       assertFalse(node3.isGetProp());
1043:       assertFalse(node3.isHook());
1044:       assertFalse(node3.isInstanceOf());
1045:       assertFalse(node3.isThrow());
1046:       assertFalse(node3.isThis());
1047:       assertFalse(node3.isWith());
1048:       assertTrue(node3.isOr());
1049:       assertFalse(node3.isInc());
1050:       assertFalse(node3.isExprResult());
1051:       assertFalse(node3.isIn());
1052:       assertFalse(node3.isNE());
1053:       assertFalse(node3.isDec());
1054:       assertFalse(node3.hasChildren());
1055:       assertFalse(node3.isDelProp());
1056:       assertFalse(node3.isAssign());
1057:       assertFalse(node3.isTypeOf());
1058:       assertFalse(node3.isGetElem());
1059:       assertFalse(node3.isCast());
1060:       assertEquals(162, node3.getLineno());
1061:       assertFalse(node3.isReturn());
1062:       assertFalse(node3.isWhile());
1063:       assertFalse(node3.isString());
1064:       assertFalse(node3.isFunction());
1065:       assertFalse(node3.isNot());
1066:       assertFalse(node3.isContinue());
1067:       assertFalse(node3.isObjectLit());
1068:       assertFalse(node3.isAnd());
1069:       assertFalse(node3.isDebugger());
1070:       assertFalse(node3.isName());
1071:       assertFalse(node3.isSetterDef());
1072:       assertEquals(665829, node3.getSourcePosition());
1073:       assertFalse(node3.isCall());
1074:       assertEquals(0, node3.getChildCount());
1075:       assertFalse(node3.isBlock());
1076:       assertFalse(node3.isVar());
1077:       assertFalse(node3.isDefaultCase());
1078:       assertFalse(node3.isVoid());
1079:       assertFalse(node3.isDo());
1080:       assertFalse(node3.isRegExp());
1081:       assertFalse(node3.isNew());
1082:       assertFalse(node3.isCatch());
1083:       assertFalse(node3.isAdd());
1084:       assertEquals(2277, node3.getCharno());
1085:       assertFalse(node3.isTrue());
1086:       assertFalse(node3.isNull());
1087:       assertFalse(node3.isNumber());
1088:       assertFalse(node3.isIf());
1089:       assertFalse(node3.isLabelName());
1090:       assertFalse(node3.isGetterDef());
1091:       assertFalse(node3.isEmpty());
1092:       assertFalse(node3.hasOneChild());
1093:       assertFalse(node3.hasMoreThanOneChild());
1094:       assertFalse(node3.isTry());
1095:       assertFalse(node3.isAssignAdd());
1096:       assertFalse(node3.isLabel());
1097:       assertFalse(node3.isFor());
1098:       assertEquals(100, node3.getType());
1099:       assertFalse(node3.isSwitch());
1100:       assertFalse(node3.isCase());
1101:       assertFalse(node3.isScript());
1102:       assertFalse(node3.isArrayLit());
1103:       assertFalse(node3.isStringKey());
1104:       assertFalse(node3.isParamList());
1105:       
1106:       boolean boolean4 = node3.isCall();
1107:       assertFalse(boolean4);
1108:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1109:       assertEquals(54, Node.SLASH_V);
1110:       assertEquals(52, Node.LENGTH);
1111:       assertEquals(40, Node.ORIGINALNAME_PROP);
1112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1113:       assertEquals(1, Node.DECR_FLAG);
1114:       assertEquals(30, Node.VAR_ARGS_NAME);
1115:       assertEquals(57, Node.LAST_PROP);
1116:       assertEquals(12, Node.COLUMN_BITS);
1117:       assertEquals(48, Node.DIRECTIVES);
1118:       assertEquals(37, Node.OPT_ARG_NAME);
1119:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1120:       assertEquals(8, Node.FLAG_NO_THROWS);
1121:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1122:       assertEquals(55, Node.INFERRED_FUNCTION);
1123:       assertEquals(29, Node.JSDOC_INFO_PROP);
1124:       assertEquals(39, Node.EMPTY_BLOCK);
1125:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1126:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1127:       assertEquals(49, Node.DIRECT_EVAL);
1128:       assertEquals(56, Node.CHANGE_TIME);
1129:       assertEquals(36, Node.QUOTED_PROP);
1130:       assertEquals(57, Node.REFLECTED_OBJECT);
1131:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1132:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1133:       assertEquals(53, Node.INPUT_ID);
1134:       assertEquals(4095, Node.COLUMN_MASK);
1135:       assertEquals(47, Node.IS_DISPATCHER);
1136:       assertEquals(2, Node.POST_FLAG);
1137:       assertEquals(32, Node.INCRDECR_PROP);
1138:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1139:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1140:       assertEquals(50, Node.FREE_CALL);
1141:       assertEquals(46, Node.IS_NAMESPACE);
1142:       assertEquals(43, Node.IS_CONSTANT_NAME);
1143:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1144:       assertNotSame(node3, node1);
1145:       assertNotSame(node3, node2);
1146:       assertNotSame(node3, node0);
1147:       assertFalse(node3.equals((Object)node1));
1148:       assertFalse(node3.equals((Object)node2));
1149:       assertFalse(node3.equals((Object)node0));
1150:       assertTrue(boolean4 == boolean1);
1151:       assertTrue(boolean4 == boolean2);
1152:       assertTrue(boolean4 == boolean3);
1153:       assertFalse(boolean4 == boolean0);
1154:       assertFalse(node3.isBreak());
1155:       assertFalse(node3.isComma());
1156:       assertFalse(node3.isFalse());
1157:       assertFalse(node3.isGetProp());
1158:       assertFalse(node3.isHook());
1159:       assertFalse(node3.isInstanceOf());
1160:       assertFalse(node3.isThrow());
1161:       assertFalse(node3.isThis());
1162:       assertFalse(node3.isWith());
1163:       assertTrue(node3.isOr());
1164:       assertFalse(node3.isInc());
1165:       assertFalse(node3.isExprResult());
1166:       assertFalse(node3.isIn());
1167:       assertFalse(node3.isNE());
1168:       assertFalse(node3.isDec());
1169:       assertFalse(node3.hasChildren());
1170:       assertFalse(node3.isDelProp());
1171:       assertFalse(node3.isAssign());
1172:       assertFalse(node3.isTypeOf());
1173:       assertFalse(node3.isGetElem());
1174:       assertFalse(node3.isCast());
1175:       assertEquals(162, node3.getLineno());
1176:       assertFalse(node3.isReturn());
1177:       assertFalse(node3.isWhile());
1178:       assertFalse(node3.isString());
1179:       assertFalse(node3.isFunction());
1180:       assertFalse(node3.isNot());
1181:       assertFalse(node3.isContinue());
1182:       assertFalse(node3.isObjectLit());
1183:       assertFalse(node3.isAnd());
1184:       assertFalse(node3.isDebugger());
1185:       assertFalse(node3.isName());
1186:       assertFalse(node3.isSetterDef());
1187:       assertEquals(665829, node3.getSourcePosition());
1188:       assertFalse(node3.isCall());
1189:       assertEquals(0, node3.getChildCount());
1190:       assertFalse(node3.isBlock());
1191:       assertFalse(node3.isVar());
1192:       assertFalse(node3.isDefaultCase());
1193:       assertFalse(node3.isVoid());
1194:       assertFalse(node3.isDo());
1195:       assertFalse(node3.isRegExp());
1196:       assertFalse(node3.isNew());
1197:       assertFalse(node3.isCatch());
1198:       assertFalse(node3.isAdd());
1199:       assertEquals(2277, node3.getCharno());
1200:       assertFalse(node3.isTrue());
1201:       assertFalse(node3.isNull());
1202:       assertFalse(node3.isNumber());
1203:       assertFalse(node3.isIf());
1204:       assertFalse(node3.isLabelName());
1205:       assertFalse(node3.isGetterDef());
1206:       assertFalse(node3.isEmpty());
1207:       assertFalse(node3.hasOneChild());
1208:       assertFalse(node3.hasMoreThanOneChild());
1209:       assertFalse(node3.isTry());
1210:       assertFalse(node3.isAssignAdd());
1211:       assertFalse(node3.isLabel());
1212:       assertFalse(node3.isFor());
1213:       assertEquals(100, node3.getType());
1214:       assertFalse(node3.isSwitch());
1215:       assertFalse(node3.isCase());
1216:       assertFalse(node3.isScript());
1217:       assertFalse(node3.isArrayLit());
1218:       assertFalse(node3.isStringKey());
1219:       assertFalse(node3.isParamList());
1220:   }
1221: }
RegularFileObject[/tmp/EvoSuite_177_1628157891818/com/google/javascript/rhino/Node_177_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_177_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_177_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_177_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:51.948 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

Node node0 = Node.newString("vaQi{plm;SC", 124, 936);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node0);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(124, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(508840, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(936, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());

node0.detachChildren();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(124, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(508840, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(936, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());

Node node1 = Node.newString("com.google.javascript.rhino.JSDocInfo$TypePosition", 57, 46);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(233518, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertEquals(40, node1.getType());
assertEquals(57, node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

boolean boolean1 = node1.isEquivalentTo(node0, true, false, true);
assertFalse(boolean1);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(124, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(508840, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(936, node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(233518, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertEquals(40, node1.getType());
assertEquals(57, node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

boolean boolean2 = node1.isInc();
assertFalse(boolean2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(233518, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertEquals(40, node1.getType());
assertEquals(57, node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

Node node2 = Node.newString("S[H> ", 791, 4);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertEquals(4, node2.getCharno());
assertEquals(791, node2.getLineno());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertEquals(40, node2.getType());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isDebugger());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertTrue(node2.isString());
assertFalse(node2.isName());
assertFalse(node2.isTry());
assertEquals(3239940, node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isDelProp());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabelName());
assertEquals(0, node2.getChildCount());

Iterable<Node> iterable0 = node2.children();
assertFalse(iterable0.contains(node0));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertNotNull(iterable0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertEquals(4, node2.getCharno());
assertEquals(791, node2.getLineno());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isHook());
assertFalse(node2.isExprResult());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetElem());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertEquals(40, node2.getType());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isDebugger());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertTrue(node2.isString());
assertFalse(node2.isName());
assertFalse(node2.isTry());
assertEquals(3239940, node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isDelProp());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabelName());
assertEquals(0, node2.getChildCount());

boolean boolean3 = node1.isNoSideEffectsCall();
assertFalse(boolean3);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(46, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(233518, node1.getSourcePosition());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertEquals(40, node1.getType());
assertEquals(57, node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

Node node3 = Node.newString(100, "com.google.javacript.rhino.jstype.NumbrType", 162, 2277);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertNotSame(node3, node0);
assertNotNull(node3);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThrow());
assertFalse(node3.isThis());
assertFalse(node3.isWith());
assertTrue(node3.isOr());
assertFalse(node3.isInc());
assertFalse(node3.isExprResult());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertEquals(162, node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isFunction());
assertFalse(node3.isNot());
assertFalse(node3.isContinue());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isName());
assertFalse(node3.isSetterDef());
assertEquals(665829, node3.getSourcePosition());
assertFalse(node3.isCall());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isDo());
assertFalse(node3.isRegExp());
assertFalse(node3.isNew());
assertFalse(node3.isCatch());
assertFalse(node3.isAdd());
assertEquals(2277, node3.getCharno());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isNumber());
assertFalse(node3.isIf());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.hasOneChild());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isFor());
assertEquals(100, node3.getType());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());

boolean boolean4 = node3.isCall();
assertFalse(boolean4);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertNotSame(node3, node0);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4 == boolean0);
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThrow());
assertFalse(node3.isThis());
assertFalse(node3.isWith());
assertTrue(node3.isOr());
assertFalse(node3.isInc());
assertFalse(node3.isExprResult());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertEquals(162, node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isFunction());
assertFalse(node3.isNot());
assertFalse(node3.isContinue());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isName());
assertFalse(node3.isSetterDef());
assertEquals(665829, node3.getSourcePosition());
assertFalse(node3.isCall());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isDo());
assertFalse(node3.isRegExp());
assertFalse(node3.isNew());
assertFalse(node3.isCatch());
assertFalse(node3.isAdd());
assertEquals(2277, node3.getCharno());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isNumber());
assertFalse(node3.isIf());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.hasOneChild());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isFor());
assertEquals(100, node3.getType());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());


[MASTER] 10:04:55.365 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_196_1628157895223/com/google/javascript/rhino/Node_196_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_196_1628157895223/com/google/javascript/rhino/Node_196_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:55.365 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:55.365 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:55.366 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 870
[MASTER] 10:04:55.366 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_196_1628157895223/com/google/javascript/rhino/Node_196_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:55 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.FileSystemHandling;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_196_tmp__ESTest extends Node_196_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
22:       assertNotNull(fileSystemHandling0);
23:       
24:       Node node0 = new Node(308, 308, 308);
25:       assertEquals(36, Node.QUOTED_PROP);
26:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
27:       assertEquals(43, Node.IS_CONSTANT_NAME);
28:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
29:       assertEquals(8, Node.FLAG_NO_THROWS);
30:       assertEquals(39, Node.EMPTY_BLOCK);
31:       assertEquals(29, Node.JSDOC_INFO_PROP);
32:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
33:       assertEquals(53, Node.INPUT_ID);
34:       assertEquals(55, Node.INFERRED_FUNCTION);
35:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
36:       assertEquals(57, Node.REFLECTED_OBJECT);
37:       assertEquals(56, Node.CHANGE_TIME);
38:       assertEquals(48, Node.DIRECTIVES);
39:       assertEquals(37, Node.OPT_ARG_NAME);
40:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
41:       assertEquals(4095, Node.COLUMN_MASK);
42:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
43:       assertEquals(15, Node.NO_SIDE_EFFECTS);
44:       assertEquals(57, Node.LAST_PROP);
45:       assertEquals(49, Node.DIRECT_EVAL);
46:       assertEquals(30, Node.VAR_ARGS_NAME);
47:       assertEquals(1, Node.DECR_FLAG);
48:       assertEquals(54, Node.SLASH_V);
49:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
50:       assertEquals(12, Node.COLUMN_BITS);
51:       assertEquals(32, Node.INCRDECR_PROP);
52:       assertEquals(46, Node.IS_NAMESPACE);
53:       assertEquals(52, Node.LENGTH);
54:       assertEquals(51, Node.STATIC_SOURCE_FILE);
55:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
56:       assertEquals(47, Node.IS_DISPATCHER);
57:       assertEquals(50, Node.FREE_CALL);
58:       assertEquals(2, Node.POST_FLAG);
59:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
60:       assertEquals(40, Node.ORIGINALNAME_PROP);
61:       assertNotNull(node0);
62:       assertFalse(node0.isArrayLit());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isDelProp());
65:       assertEquals(308, node0.getCharno());
66:       assertFalse(node0.isNE());
67:       assertFalse(node0.isFor());
68:       assertFalse(node0.isTrue());
69:       assertFalse(node0.isTry());
70:       assertFalse(node0.isDebugger());
71:       assertFalse(node0.isIn());
72:       assertFalse(node0.isGetterDef());
73:       assertFalse(node0.isEmpty());
74:       assertFalse(node0.isCase());
75:       assertFalse(node0.isVoid());
76:       assertFalse(node0.isRegExp());
77:       assertFalse(node0.isCatch());
78:       assertFalse(node0.isThrow());
79:       assertFalse(node0.isFalse());
80:       assertFalse(node0.isGetProp());
81:       assertFalse(node0.isInc());
82:       assertFalse(node0.isSetterDef());
83:       assertEquals(308, node0.getType());
84:       assertFalse(node0.isString());
85:       assertFalse(node0.isAnd());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isObjectLit());
88:       assertFalse(node0.isNot());
89:       assertFalse(node0.isFunction());
90:       assertFalse(node0.isCast());
91:       assertFalse(node0.isGetElem());
92:       assertFalse(node0.isAssign());
93:       assertFalse(node0.isLabelName());
94:       assertFalse(node0.hasOneChild());
95:       assertFalse(node0.hasChildren());
96:       assertFalse(node0.isOr());
97:       assertFalse(node0.isNumber());
98:       assertFalse(node0.isScript());
99:       assertEquals(308, node0.getLineno());
100:       assertFalse(node0.isReturn());
101:       assertFalse(node0.isWhile());
102:       assertFalse(node0.isThis());
103:       assertFalse(node0.isExprResult());
104:       assertFalse(node0.isBlock());
105:       assertFalse(node0.isComma());
106:       assertFalse(node0.isDec());
107:       assertFalse(node0.isBreak());
108:       assertFalse(node0.isTypeOf());
109:       assertFalse(node0.hasMoreThanOneChild());
110:       assertFalse(node0.isWith());
111:       assertFalse(node0.isInstanceOf());
112:       assertFalse(node0.isCall());
113:       assertFalse(node0.isName());
114:       assertFalse(node0.isHook());
115:       assertFalse(node0.isNull());
116:       assertFalse(node0.isVar());
117:       assertFalse(node0.isStringKey());
118:       assertFalse(node0.isParamList());
119:       assertFalse(node0.isAdd());
120:       assertEquals(1261876, node0.getSourcePosition());
121:       assertFalse(node0.isNew());
122:       assertFalse(node0.isDo());
123:       assertFalse(node0.isDefaultCase());
124:       assertFalse(node0.isAssignAdd());
125:       assertFalse(node0.isSwitch());
126:       assertFalse(node0.isLabel());
127:       assertEquals(0, node0.getChildCount());
128:       
129:       Node node1 = Node.newNumber(1.0, 0, 3979);
130:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
131:       assertEquals(43, Node.IS_CONSTANT_NAME);
132:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
133:       assertEquals(53, Node.INPUT_ID);
134:       assertEquals(39, Node.EMPTY_BLOCK);
135:       assertEquals(36, Node.QUOTED_PROP);
136:       assertEquals(55, Node.INFERRED_FUNCTION);
137:       assertEquals(8, Node.FLAG_NO_THROWS);
138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
139:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
140:       assertEquals(56, Node.CHANGE_TIME);
141:       assertEquals(57, Node.REFLECTED_OBJECT);
142:       assertEquals(48, Node.DIRECTIVES);
143:       assertEquals(37, Node.OPT_ARG_NAME);
144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
145:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
146:       assertEquals(4095, Node.COLUMN_MASK);
147:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
148:       assertEquals(30, Node.VAR_ARGS_NAME);
149:       assertEquals(49, Node.DIRECT_EVAL);
150:       assertEquals(1, Node.DECR_FLAG);
151:       assertEquals(15, Node.NO_SIDE_EFFECTS);
152:       assertEquals(12, Node.COLUMN_BITS);
153:       assertEquals(46, Node.IS_NAMESPACE);
154:       assertEquals(32, Node.INCRDECR_PROP);
155:       assertEquals(57, Node.LAST_PROP);
156:       assertEquals(54, Node.SLASH_V);
157:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
159:       assertEquals(52, Node.LENGTH);
160:       assertEquals(29, Node.JSDOC_INFO_PROP);
161:       assertEquals(50, Node.FREE_CALL);
162:       assertEquals(40, Node.ORIGINALNAME_PROP);
163:       assertEquals(47, Node.IS_DISPATCHER);
164:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
165:       assertEquals(2, Node.POST_FLAG);
166:       assertNotNull(node1);
167:       assertFalse(node1.equals((Object)node0));
168:       assertFalse(node1.isCast());
169:       assertFalse(node1.hasOneChild());
170:       assertFalse(node1.isGetElem());
171:       assertFalse(node1.isLabelName());
172:       assertFalse(node1.isScript());
173:       assertFalse(node1.isNot());
174:       assertFalse(node1.isOr());
175:       assertFalse(node1.isObjectLit());
176:       assertFalse(node1.hasMoreThanOneChild());
177:       assertFalse(node1.isInstanceOf());
178:       assertFalse(node1.isReturn());
179:       assertFalse(node1.isWhile());
180:       assertFalse(node1.isComma());
181:       assertFalse(node1.isDec());
182:       assertFalse(node1.isBreak());
183:       assertFalse(node1.hasChildren());
184:       assertFalse(node1.isThis());
185:       assertFalse(node1.isExprResult());
186:       assertFalse(node1.isBlock());
187:       assertFalse(node1.isAssign());
188:       assertEquals(39, node1.getType());
189:       assertFalse(node1.isTypeOf());
190:       assertFalse(node1.isWith());
191:       assertFalse(node1.isVar());
192:       assertFalse(node1.isHook());
193:       assertFalse(node1.isCall());
194:       assertFalse(node1.isNew());
195:       assertFalse(node1.isStringKey());
196:       assertFalse(node1.isName());
197:       assertFalse(node1.isSwitch());
198:       assertFalse(node1.isParamList());
199:       assertFalse(node1.isNull());
200:       assertFalse(node1.isAdd());
201:       assertFalse(node1.isAssignAdd());
202:       assertFalse(node1.isDo());
203:       assertFalse(node1.isDefaultCase());
204:       assertEquals(3979, node1.getCharno());
205:       assertFalse(node1.isLabel());
206:       assertEquals(0, node1.getChildCount());
207:       assertFalse(node1.isArrayLit());
208:       assertFalse(node1.isFor());
209:       assertFalse(node1.isTry());
210:       assertFalse(node1.isDelProp());
211:       assertFalse(node1.isVoid());
212:       assertFalse(node1.isIf());
213:       assertFalse(node1.isNE());
214:       assertFalse(node1.isDebugger());
215:       assertFalse(node1.isTrue());
216:       assertFalse(node1.isEmpty());
217:       assertFalse(node1.isIn());
218:       assertFalse(node1.isGetterDef());
219:       assertFalse(node1.isCatch());
220:       assertFalse(node1.isCase());
221:       assertTrue(node1.isNumber());
222:       assertFalse(node1.isRegExp());
223:       assertFalse(node1.isThrow());
224:       assertFalse(node1.isGetProp());
225:       assertFalse(node1.isInc());
226:       assertFalse(node1.isSetterDef());
227:       assertFalse(node1.isString());
228:       assertEquals(0, node1.getLineno());
229:       assertFalse(node1.isAnd());
230:       assertEquals(3979, node1.getSourcePosition());
231:       assertFalse(node1.isContinue());
232:       assertFalse(node1.isFalse());
233:       assertFalse(node1.isFunction());
234:       
235:       Node node2 = node0.clonePropsFrom(node1);
236:       assertEquals(36, Node.QUOTED_PROP);
237:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
238:       assertEquals(43, Node.IS_CONSTANT_NAME);
239:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
240:       assertEquals(8, Node.FLAG_NO_THROWS);
241:       assertEquals(39, Node.EMPTY_BLOCK);
242:       assertEquals(29, Node.JSDOC_INFO_PROP);
243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
244:       assertEquals(53, Node.INPUT_ID);
245:       assertEquals(55, Node.INFERRED_FUNCTION);
246:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
247:       assertEquals(57, Node.REFLECTED_OBJECT);
248:       assertEquals(56, Node.CHANGE_TIME);
249:       assertEquals(48, Node.DIRECTIVES);
250:       assertEquals(37, Node.OPT_ARG_NAME);
251:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
252:       assertEquals(4095, Node.COLUMN_MASK);
253:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
254:       assertEquals(15, Node.NO_SIDE_EFFECTS);
255:       assertEquals(57, Node.LAST_PROP);
256:       assertEquals(49, Node.DIRECT_EVAL);
257:       assertEquals(30, Node.VAR_ARGS_NAME);
258:       assertEquals(1, Node.DECR_FLAG);
259:       assertEquals(54, Node.SLASH_V);
260:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
261:       assertEquals(12, Node.COLUMN_BITS);
262:       assertEquals(32, Node.INCRDECR_PROP);
263:       assertEquals(46, Node.IS_NAMESPACE);
264:       assertEquals(52, Node.LENGTH);
265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
267:       assertEquals(47, Node.IS_DISPATCHER);
268:       assertEquals(50, Node.FREE_CALL);
269:       assertEquals(2, Node.POST_FLAG);
270:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
271:       assertEquals(40, Node.ORIGINALNAME_PROP);
272:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
273:       assertEquals(43, Node.IS_CONSTANT_NAME);
274:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
275:       assertEquals(53, Node.INPUT_ID);
276:       assertEquals(39, Node.EMPTY_BLOCK);
277:       assertEquals(36, Node.QUOTED_PROP);
278:       assertEquals(55, Node.INFERRED_FUNCTION);
279:       assertEquals(8, Node.FLAG_NO_THROWS);
280:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
281:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
282:       assertEquals(56, Node.CHANGE_TIME);
283:       assertEquals(57, Node.REFLECTED_OBJECT);
284:       assertEquals(48, Node.DIRECTIVES);
285:       assertEquals(37, Node.OPT_ARG_NAME);
286:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
287:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
288:       assertEquals(4095, Node.COLUMN_MASK);
289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
290:       assertEquals(30, Node.VAR_ARGS_NAME);
291:       assertEquals(49, Node.DIRECT_EVAL);
292:       assertEquals(1, Node.DECR_FLAG);
293:       assertEquals(15, Node.NO_SIDE_EFFECTS);
294:       assertEquals(12, Node.COLUMN_BITS);
295:       assertEquals(46, Node.IS_NAMESPACE);
296:       assertEquals(32, Node.INCRDECR_PROP);
297:       assertEquals(57, Node.LAST_PROP);
298:       assertEquals(54, Node.SLASH_V);
299:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
301:       assertEquals(52, Node.LENGTH);
302:       assertEquals(29, Node.JSDOC_INFO_PROP);
303:       assertEquals(50, Node.FREE_CALL);
304:       assertEquals(40, Node.ORIGINALNAME_PROP);
305:       assertEquals(47, Node.IS_DISPATCHER);
306:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
307:       assertEquals(2, Node.POST_FLAG);
308:       assertEquals(55, Node.INFERRED_FUNCTION);
309:       assertEquals(4095, Node.COLUMN_MASK);
310:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
311:       assertEquals(8, Node.FLAG_NO_THROWS);
312:       assertEquals(48, Node.DIRECTIVES);
313:       assertEquals(36, Node.QUOTED_PROP);
314:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
315:       assertEquals(43, Node.IS_CONSTANT_NAME);
316:       assertEquals(40, Node.ORIGINALNAME_PROP);
317:       assertEquals(57, Node.REFLECTED_OBJECT);
318:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
319:       assertEquals(29, Node.JSDOC_INFO_PROP);
320:       assertEquals(52, Node.LENGTH);
321:       assertEquals(53, Node.INPUT_ID);
322:       assertEquals(2, Node.POST_FLAG);
323:       assertEquals(15, Node.NO_SIDE_EFFECTS);
324:       assertEquals(39, Node.EMPTY_BLOCK);
325:       assertEquals(47, Node.IS_DISPATCHER);
326:       assertEquals(57, Node.LAST_PROP);
327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
328:       assertEquals(12, Node.COLUMN_BITS);
329:       assertEquals(32, Node.INCRDECR_PROP);
330:       assertEquals(1, Node.DECR_FLAG);
331:       assertEquals(51, Node.STATIC_SOURCE_FILE);
332:       assertEquals(30, Node.VAR_ARGS_NAME);
333:       assertEquals(37, Node.OPT_ARG_NAME);
334:       assertEquals(49, Node.DIRECT_EVAL);
335:       assertEquals(46, Node.IS_NAMESPACE);
336:       assertEquals(54, Node.SLASH_V);
337:       assertEquals(56, Node.CHANGE_TIME);
338:       assertEquals(50, Node.FREE_CALL);
339:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
340:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
341:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
342:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
343:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
344:       assertSame(node0, node2);
345:       assertSame(node2, node0);
346:       assertNotNull(node2);
347:       assertFalse(node0.equals((Object)node1));
348:       assertFalse(node1.equals((Object)node0));
349:       assertFalse(node2.equals((Object)node1));
350:       assertFalse(node0.isArrayLit());
351:       assertFalse(node0.isIf());
352:       assertFalse(node0.isDelProp());
353:       assertEquals(308, node0.getCharno());
354:       assertFalse(node0.isNE());
355:       assertFalse(node0.isFor());
356:       assertFalse(node0.isTrue());
357:       assertFalse(node0.isTry());
358:       assertFalse(node0.isDebugger());
359:       assertFalse(node0.isIn());
360:       assertFalse(node0.isGetterDef());
361:       assertFalse(node0.isEmpty());
362:       assertFalse(node0.isCase());
363:       assertFalse(node0.isVoid());
364:       assertFalse(node0.isRegExp());
365:       assertFalse(node0.isCatch());
366:       assertFalse(node0.isThrow());
367:       assertFalse(node0.isFalse());
368:       assertFalse(node0.isGetProp());
369:       assertFalse(node0.isInc());
370:       assertFalse(node0.isSetterDef());
371:       assertEquals(308, node0.getType());
372:       assertFalse(node0.isString());
373:       assertFalse(node0.isAnd());
374:       assertFalse(node0.isContinue());
375:       assertFalse(node0.isObjectLit());
376:       assertFalse(node0.isNot());
377:       assertFalse(node0.isFunction());
378:       assertFalse(node0.isCast());
379:       assertFalse(node0.isGetElem());
380:       assertFalse(node0.isAssign());
381:       assertFalse(node0.isLabelName());
382:       assertFalse(node0.hasOneChild());
383:       assertFalse(node0.hasChildren());
384:       assertFalse(node0.isOr());
385:       assertFalse(node0.isNumber());
386:       assertFalse(node0.isScript());
387:       assertEquals(308, node0.getLineno());
388:       assertFalse(node0.isReturn());
389:       assertFalse(node0.isWhile());
390:       assertFalse(node0.isThis());
391:       assertFalse(node0.isExprResult());
392:       assertFalse(node0.isBlock());
393:       assertFalse(node0.isComma());
394:       assertFalse(node0.isDec());
395:       assertFalse(node0.isBreak());
396:       assertFalse(node0.isTypeOf());
397:       assertFalse(node0.hasMoreThanOneChild());
398:       assertFalse(node0.isWith());
399:       assertFalse(node0.isInstanceOf());
400:       assertFalse(node0.isCall());
401:       assertFalse(node0.isName());
402:       assertFalse(node0.isHook());
403:       assertFalse(node0.isNull());
404:       assertFalse(node0.isVar());
405:       assertFalse(node0.isStringKey());
406:       assertFalse(node0.isParamList());
407:       assertFalse(node0.isAdd());
408:       assertEquals(1261876, node0.getSourcePosition());
409:       assertFalse(node0.isNew());
410:       assertFalse(node0.isDo());
411:       assertFalse(node0.isDefaultCase());
412:       assertFalse(node0.isAssignAdd());
413:       assertFalse(node0.isSwitch());
414:       assertFalse(node0.isLabel());
415:       assertEquals(0, node0.getChildCount());
416:       assertFalse(node1.isCast());
417:       assertFalse(node1.hasOneChild());
418:       assertFalse(node1.isGetElem());
419:       assertFalse(node1.isLabelName());
420:       assertFalse(node1.isScript());
421:       assertFalse(node1.isNot());
422:       assertFalse(node1.isOr());
423:       assertFalse(node1.isObjectLit());
424:       assertFalse(node1.hasMoreThanOneChild());
425:       assertFalse(node1.isInstanceOf());
426:       assertFalse(node1.isReturn());
427:       assertFalse(node1.isWhile());
428:       assertFalse(node1.isComma());
429:       assertFalse(node1.isDec());
430:       assertFalse(node1.isBreak());
431:       assertFalse(node1.hasChildren());
432:       assertFalse(node1.isThis());
433:       assertFalse(node1.isExprResult());
434:       assertFalse(node1.isBlock());
435:       assertFalse(node1.isAssign());
436:       assertEquals(39, node1.getType());
437:       assertFalse(node1.isTypeOf());
438:       assertFalse(node1.isWith());
439:       assertFalse(node1.isVar());
440:       assertFalse(node1.isHook());
441:       assertFalse(node1.isCall());
442:       assertFalse(node1.isNew());
443:       assertFalse(node1.isStringKey());
444:       assertFalse(node1.isName());
445:       assertFalse(node1.isSwitch());
446:       assertFalse(node1.isParamList());
447:       assertFalse(node1.isNull());
448:       assertFalse(node1.isAdd());
449:       assertFalse(node1.isAssignAdd());
450:       assertFalse(node1.isDo());
451:       assertFalse(node1.isDefaultCase());
452:       assertEquals(3979, node1.getCharno());
453:       assertFalse(node1.isLabel());
454:       assertEquals(0, node1.getChildCount());
455:       assertFalse(node1.isArrayLit());
456:       assertFalse(node1.isFor());
457:       assertFalse(node1.isTry());
458:       assertFalse(node1.isDelProp());
459:       assertFalse(node1.isVoid());
460:       assertFalse(node1.isIf());
461:       assertFalse(node1.isNE());
462:       assertFalse(node1.isDebugger());
463:       assertFalse(node1.isTrue());
464:       assertFalse(node1.isEmpty());
465:       assertFalse(node1.isIn());
466:       assertFalse(node1.isGetterDef());
467:       assertFalse(node1.isCatch());
468:       assertFalse(node1.isCase());
469:       assertTrue(node1.isNumber());
470:       assertFalse(node1.isRegExp());
471:       assertFalse(node1.isThrow());
472:       assertFalse(node1.isGetProp());
473:       assertFalse(node1.isInc());
474:       assertFalse(node1.isSetterDef());
475:       assertFalse(node1.isString());
476:       assertEquals(0, node1.getLineno());
477:       assertFalse(node1.isAnd());
478:       assertEquals(3979, node1.getSourcePosition());
479:       assertFalse(node1.isContinue());
480:       assertFalse(node1.isFalse());
481:       assertFalse(node1.isFunction());
482:       assertFalse(node2.isTry());
483:       assertFalse(node2.isDebugger());
484:       assertFalse(node2.isArrayLit());
485:       assertFalse(node2.isFunction());
486:       assertFalse(node2.isRegExp());
487:       assertFalse(node2.isDelProp());
488:       assertFalse(node2.isGetterDef());
489:       assertFalse(node2.isNE());
490:       assertFalse(node2.isVoid());
491:       assertFalse(node2.isTrue());
492:       assertFalse(node2.isIf());
493:       assertEquals(0, node2.getChildCount());
494:       assertFalse(node2.isSetterDef());
495:       assertEquals(308, node2.getType());
496:       assertFalse(node2.isIn());
497:       assertEquals(308, node2.getCharno());
498:       assertFalse(node2.isEmpty());
499:       assertFalse(node2.isVar());
500:       assertFalse(node2.isDefaultCase());
501:       assertFalse(node2.isAdd());
502:       assertFalse(node2.isNew());
503:       assertFalse(node2.isCall());
504:       assertFalse(node2.isFalse());
505:       assertFalse(node2.isString());
506:       assertFalse(node2.isName());
507:       assertFalse(node2.isBreak());
508:       assertFalse(node2.isNull());
509:       assertFalse(node2.isReturn());
510:       assertFalse(node2.isGetProp());
511:       assertFalse(node2.isComma());
512:       assertFalse(node2.isTypeOf());
513:       assertFalse(node2.isObjectLit());
514:       assertFalse(node2.isWhile());
515:       assertFalse(node2.isAssign());
516:       assertFalse(node2.isDec());
517:       assertFalse(node2.hasChildren());
518:       assertFalse(node2.hasOneChild());
519:       assertFalse(node2.isCast());
520:       assertFalse(node2.isExprResult());
521:       assertFalse(node2.isScript());
522:       assertEquals(308, node2.getLineno());
523:       assertFalse(node2.isNot());
524:       assertFalse(node2.isLabelName());
525:       assertFalse(node2.isGetElem());
526:       assertFalse(node2.isAnd());
527:       assertFalse(node2.isOr());
528:       assertFalse(node2.isLabel());
529:       assertFalse(node2.isContinue());
530:       assertFalse(node2.isDo());
531:       assertFalse(node2.isThrow());
532:       assertFalse(node2.isAssignAdd());
533:       assertFalse(node2.isHook());
534:       assertFalse(node2.isBlock());
535:       assertEquals(1261876, node2.getSourcePosition());
536:       assertFalse(node2.isInc());
537:       assertFalse(node2.isSwitch());
538:       assertFalse(node2.isParamList());
539:       assertFalse(node2.isStringKey());
540:       assertFalse(node2.hasMoreThanOneChild());
541:       assertFalse(node2.isCatch());
542:       assertFalse(node2.isInstanceOf());
543:       assertFalse(node2.isNumber());
544:       assertFalse(node2.isWith());
545:       assertFalse(node2.isFor());
546:       assertFalse(node2.isCase());
547:       assertFalse(node2.isThis());
548:       
549:       Node node3 = new Node(0, node0, 40, 41);
550:       assertEquals(36, Node.QUOTED_PROP);
551:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
552:       assertEquals(43, Node.IS_CONSTANT_NAME);
553:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
554:       assertEquals(8, Node.FLAG_NO_THROWS);
555:       assertEquals(39, Node.EMPTY_BLOCK);
556:       assertEquals(29, Node.JSDOC_INFO_PROP);
557:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
558:       assertEquals(53, Node.INPUT_ID);
559:       assertEquals(55, Node.INFERRED_FUNCTION);
560:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
561:       assertEquals(57, Node.REFLECTED_OBJECT);
562:       assertEquals(56, Node.CHANGE_TIME);
563:       assertEquals(48, Node.DIRECTIVES);
564:       assertEquals(37, Node.OPT_ARG_NAME);
565:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
566:       assertEquals(4095, Node.COLUMN_MASK);
567:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
568:       assertEquals(15, Node.NO_SIDE_EFFECTS);
569:       assertEquals(57, Node.LAST_PROP);
570:       assertEquals(49, Node.DIRECT_EVAL);
571:       assertEquals(30, Node.VAR_ARGS_NAME);
572:       assertEquals(1, Node.DECR_FLAG);
573:       assertEquals(54, Node.SLASH_V);
574:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
575:       assertEquals(12, Node.COLUMN_BITS);
576:       assertEquals(32, Node.INCRDECR_PROP);
577:       assertEquals(46, Node.IS_NAMESPACE);
578:       assertEquals(52, Node.LENGTH);
579:       assertEquals(51, Node.STATIC_SOURCE_FILE);
580:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
581:       assertEquals(47, Node.IS_DISPATCHER);
582:       assertEquals(50, Node.FREE_CALL);
583:       assertEquals(2, Node.POST_FLAG);
584:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
585:       assertEquals(40, Node.ORIGINALNAME_PROP);
586:       assertEquals(53, Node.INPUT_ID);
587:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
588:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
589:       assertEquals(43, Node.IS_CONSTANT_NAME);
590:       assertEquals(56, Node.CHANGE_TIME);
591:       assertEquals(29, Node.JSDOC_INFO_PROP);
592:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
593:       assertEquals(55, Node.INFERRED_FUNCTION);
594:       assertEquals(36, Node.QUOTED_PROP);
595:       assertEquals(12, Node.COLUMN_BITS);
596:       assertEquals(37, Node.OPT_ARG_NAME);
597:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
598:       assertEquals(1, Node.DECR_FLAG);
599:       assertEquals(48, Node.DIRECTIVES);
600:       assertEquals(49, Node.DIRECT_EVAL);
601:       assertEquals(32, Node.INCRDECR_PROP);
602:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
603:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
604:       assertEquals(4095, Node.COLUMN_MASK);
605:       assertEquals(52, Node.LENGTH);
606:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
607:       assertEquals(57, Node.REFLECTED_OBJECT);
608:       assertEquals(54, Node.SLASH_V);
609:       assertEquals(40, Node.ORIGINALNAME_PROP);
610:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
611:       assertEquals(15, Node.NO_SIDE_EFFECTS);
612:       assertEquals(8, Node.FLAG_NO_THROWS);
613:       assertEquals(51, Node.STATIC_SOURCE_FILE);
614:       assertEquals(50, Node.FREE_CALL);
615:       assertEquals(46, Node.IS_NAMESPACE);
616:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
617:       assertEquals(39, Node.EMPTY_BLOCK);
618:       assertEquals(57, Node.LAST_PROP);
619:       assertEquals(47, Node.IS_DISPATCHER);
620:       assertEquals(2, Node.POST_FLAG);
621:       assertEquals(30, Node.VAR_ARGS_NAME);
622:       assertNotNull(node3);
623:       assertFalse(node0.equals((Object)node1));
624:       assertFalse(node3.equals((Object)node0));
625:       assertFalse(node3.equals((Object)node2));
626:       assertFalse(node3.equals((Object)node1));
627:       assertFalse(node0.isArrayLit());
628:       assertFalse(node0.isIf());
629:       assertFalse(node0.isDelProp());
630:       assertEquals(308, node0.getCharno());
631:       assertFalse(node0.isNE());
632:       assertFalse(node0.isFor());
633:       assertFalse(node0.isTrue());
634:       assertFalse(node0.isTry());
635:       assertFalse(node0.isDebugger());
636:       assertFalse(node0.isIn());
637:       assertFalse(node0.isGetterDef());
638:       assertFalse(node0.isEmpty());
639:       assertFalse(node0.isCase());
640:       assertFalse(node0.isVoid());
641:       assertFalse(node0.isRegExp());
642:       assertFalse(node0.isCatch());
643:       assertFalse(node0.isThrow());
644:       assertFalse(node0.isFalse());
645:       assertFalse(node0.isGetProp());
646:       assertFalse(node0.isInc());
647:       assertFalse(node0.isSetterDef());
648:       assertEquals(308, node0.getType());
649:       assertFalse(node0.isString());
650:       assertFalse(node0.isAnd());
651:       assertFalse(node0.isContinue());
652:       assertFalse(node0.isObjectLit());
653:       assertFalse(node0.isNot());
654:       assertFalse(node0.isFunction());
655:       assertFalse(node0.isCast());
656:       assertFalse(node0.isGetElem());
657:       assertFalse(node0.isAssign());
658:       assertFalse(node0.isLabelName());
659:       assertFalse(node0.hasOneChild());
660:       assertFalse(node0.hasChildren());
661:       assertFalse(node0.isOr());
662:       assertFalse(node0.isNumber());
663:       assertFalse(node0.isScript());
664:       assertEquals(308, node0.getLineno());
665:       assertFalse(node0.isReturn());
666:       assertFalse(node0.isWhile());
667:       assertFalse(node0.isThis());
668:       assertFalse(node0.isExprResult());
669:       assertFalse(node0.isBlock());
670:       assertFalse(node0.isComma());
671:       assertFalse(node0.isDec());
672:       assertFalse(node0.isBreak());
673:       assertFalse(node0.isTypeOf());
674:       assertFalse(node0.hasMoreThanOneChild());
675:       assertFalse(node0.isWith());
676:       assertFalse(node0.isInstanceOf());
677:       assertFalse(node0.isCall());
678:       assertFalse(node0.isName());
679:       assertFalse(node0.isHook());
680:       assertFalse(node0.isNull());
681:       assertFalse(node0.isVar());
682:       assertFalse(node0.isStringKey());
683:       assertFalse(node0.isParamList());
684:       assertFalse(node0.isAdd());
685:       assertEquals(1261876, node0.getSourcePosition());
686:       assertFalse(node0.isNew());
687:       assertFalse(node0.isDo());
688:       assertFalse(node0.isDefaultCase());
689:       assertFalse(node0.isAssignAdd());
690:       assertFalse(node0.isSwitch());
691:       assertFalse(node0.isLabel());
692:       assertEquals(0, node0.getChildCount());
693:       assertTrue(node3.hasChildren());
694:       assertFalse(node3.isNE());
695:       assertFalse(node3.isDelProp());
696:       assertFalse(node3.isIf());
697:       assertEquals(163881, node3.getSourcePosition());
698:       assertFalse(node3.isEmpty());
699:       assertFalse(node3.isString());
700:       assertFalse(node3.isGetterDef());
701:       assertFalse(node3.isIn());
702:       assertFalse(node3.isVoid());
703:       assertFalse(node3.isTrue());
704:       assertEquals(0, node3.getType());
705:       assertFalse(node3.isTry());
706:       assertFalse(node3.isCase());
707:       assertFalse(node3.isFor());
708:       assertFalse(node3.isCatch());
709:       assertEquals(1, node3.getChildCount());
710:       assertFalse(node3.isHook());
711:       assertTrue(node3.hasOneChild());
712:       assertFalse(node3.isRegExp());
713:       assertFalse(node3.isComma());
714:       assertFalse(node3.isGetProp());
715:       assertFalse(node3.isSetterDef());
716:       assertFalse(node3.isAnd());
717:       assertFalse(node3.isObjectLit());
718:       assertFalse(node3.isNot());
719:       assertFalse(node3.isDebugger());
720:       assertFalse(node3.isInc());
721:       assertFalse(node3.isFunction());
722:       assertFalse(node3.isContinue());
723:       assertFalse(node3.isFalse());
724:       assertFalse(node3.isThrow());
725:       assertFalse(node3.isCast());
726:       assertFalse(node3.isAssignAdd());
727:       assertFalse(node3.isLabelName());
728:       assertFalse(node3.isNumber());
729:       assertFalse(node3.isOr());
730:       assertFalse(node3.isExprResult());
731:       assertFalse(node3.isBlock());
732:       assertFalse(node3.isScript());
733:       assertFalse(node3.isWhile());
734:       assertFalse(node3.isCall());
735:       assertFalse(node3.isGetElem());
736:       assertFalse(node3.hasMoreThanOneChild());
737:       assertEquals(41, node3.getCharno());
738:       assertFalse(node3.isInstanceOf());
739:       assertFalse(node3.isReturn());
740:       assertFalse(node3.isWith());
741:       assertFalse(node3.isTypeOf());
742:       assertEquals(40, node3.getLineno());
743:       assertFalse(node3.isDec());
744:       assertFalse(node3.isAssign());
745:       assertFalse(node3.isParamList());
746:       assertFalse(node3.isThis());
747:       assertFalse(node3.isNull());
748:       assertFalse(node3.isBreak());
749:       assertFalse(node3.isName());
750:       assertFalse(node3.isStringKey());
751:       assertFalse(node3.isSwitch());
752:       assertFalse(node3.isAdd());
753:       assertFalse(node3.isDefaultCase());
754:       assertFalse(node3.isArrayLit());
755:       assertFalse(node3.isNew());
756:       assertFalse(node3.isDo());
757:       assertFalse(node3.isVar());
758:       assertFalse(node3.isLabel());
759:       
760:       boolean boolean0 = node0.isDo();
761:       assertFalse(boolean0);
762:       assertEquals(36, Node.QUOTED_PROP);
763:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
764:       assertEquals(43, Node.IS_CONSTANT_NAME);
765:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
766:       assertEquals(8, Node.FLAG_NO_THROWS);
767:       assertEquals(39, Node.EMPTY_BLOCK);
768:       assertEquals(29, Node.JSDOC_INFO_PROP);
769:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
770:       assertEquals(53, Node.INPUT_ID);
771:       assertEquals(55, Node.INFERRED_FUNCTION);
772:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
773:       assertEquals(57, Node.REFLECTED_OBJECT);
774:       assertEquals(56, Node.CHANGE_TIME);
775:       assertEquals(48, Node.DIRECTIVES);
776:       assertEquals(37, Node.OPT_ARG_NAME);
777:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
778:       assertEquals(4095, Node.COLUMN_MASK);
779:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
780:       assertEquals(15, Node.NO_SIDE_EFFECTS);
781:       assertEquals(57, Node.LAST_PROP);
782:       assertEquals(49, Node.DIRECT_EVAL);
783:       assertEquals(30, Node.VAR_ARGS_NAME);
784:       assertEquals(1, Node.DECR_FLAG);
785:       assertEquals(54, Node.SLASH_V);
786:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
787:       assertEquals(12, Node.COLUMN_BITS);
788:       assertEquals(32, Node.INCRDECR_PROP);
789:       assertEquals(46, Node.IS_NAMESPACE);
790:       assertEquals(52, Node.LENGTH);
791:       assertEquals(51, Node.STATIC_SOURCE_FILE);
792:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
793:       assertEquals(47, Node.IS_DISPATCHER);
794:       assertEquals(50, Node.FREE_CALL);
795:       assertEquals(2, Node.POST_FLAG);
796:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
797:       assertEquals(40, Node.ORIGINALNAME_PROP);
798:       assertSame(node0, node2);
799:       assertNotSame(node0, node3);
800:       assertFalse(node0.equals((Object)node3));
801:       assertFalse(node0.equals((Object)node1));
802:       assertFalse(node0.isArrayLit());
803:       assertFalse(node0.isIf());
804:       assertFalse(node0.isDelProp());
805:       assertEquals(308, node0.getCharno());
806:       assertFalse(node0.isNE());
807:       assertFalse(node0.isFor());
808:       assertFalse(node0.isTrue());
809:       assertFalse(node0.isTry());
810:       assertFalse(node0.isDebugger());
811:       assertFalse(node0.isIn());
812:       assertFalse(node0.isGetterDef());
813:       assertFalse(node0.isEmpty());
814:       assertFalse(node0.isCase());
815:       assertFalse(node0.isVoid());
816:       assertFalse(node0.isRegExp());
817:       assertFalse(node0.isCatch());
818:       assertFalse(node0.isThrow());
819:       assertFalse(node0.isFalse());
820:       assertFalse(node0.isGetProp());
821:       assertFalse(node0.isInc());
822:       assertFalse(node0.isSetterDef());
823:       assertEquals(308, node0.getType());
824:       assertFalse(node0.isString());
825:       assertFalse(node0.isAnd());
826:       assertFalse(node0.isContinue());
827:       assertFalse(node0.isObjectLit());
828:       assertFalse(node0.isNot());
829:       assertFalse(node0.isFunction());
830:       assertFalse(node0.isCast());
831:       assertFalse(node0.isGetElem());
832:       assertFalse(node0.isAssign());
833:       assertFalse(node0.isLabelName());
834:       assertFalse(node0.hasOneChild());
835:       assertFalse(node0.hasChildren());
836:       assertFalse(node0.isOr());
837:       assertFalse(node0.isNumber());
838:       assertFalse(node0.isScript());
839:       assertEquals(308, node0.getLineno());
840:       assertFalse(node0.isReturn());
841:       assertFalse(node0.isWhile());
842:       assertFalse(node0.isThis());
843:       assertFalse(node0.isExprResult());
844:       assertFalse(node0.isBlock());
845:       assertFalse(node0.isComma());
846:       assertFalse(node0.isDec());
847:       assertFalse(node0.isBreak());
848:       assertFalse(node0.isTypeOf());
849:       assertFalse(node0.hasMoreThanOneChild());
850:       assertFalse(node0.isWith());
851:       assertFalse(node0.isInstanceOf());
852:       assertFalse(node0.isCall());
853:       assertFalse(node0.isName());
854:       assertFalse(node0.isHook());
855:       assertFalse(node0.isNull());
856:       assertFalse(node0.isVar());
857:       assertFalse(node0.isStringKey());
858:       assertFalse(node0.isParamList());
859:       assertFalse(node0.isAdd());
860:       assertEquals(1261876, node0.getSourcePosition());
861:       assertFalse(node0.isNew());
862:       assertFalse(node0.isDo());
863:       assertFalse(node0.isDefaultCase());
864:       assertFalse(node0.isAssignAdd());
865:       assertFalse(node0.isSwitch());
866:       assertFalse(node0.isLabel());
867:       assertEquals(0, node0.getChildCount());
868:       
869:       Iterable<Node> iterable0 = node0.children();
870:       assertFalse(iterable0.contains(node0));
871:       assertEquals(36, Node.QUOTED_PROP);
872:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
873:       assertEquals(43, Node.IS_CONSTANT_NAME);
874:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
875:       assertEquals(8, Node.FLAG_NO_THROWS);
876:       assertEquals(39, Node.EMPTY_BLOCK);
877:       assertEquals(29, Node.JSDOC_INFO_PROP);
878:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
879:       assertEquals(53, Node.INPUT_ID);
880:       assertEquals(55, Node.INFERRED_FUNCTION);
881:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
882:       assertEquals(57, Node.REFLECTED_OBJECT);
883:       assertEquals(56, Node.CHANGE_TIME);
884:       assertEquals(48, Node.DIRECTIVES);
885:       assertEquals(37, Node.OPT_ARG_NAME);
886:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
887:       assertEquals(4095, Node.COLUMN_MASK);
888:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
889:       assertEquals(15, Node.NO_SIDE_EFFECTS);
890:       assertEquals(57, Node.LAST_PROP);
891:       assertEquals(49, Node.DIRECT_EVAL);
892:       assertEquals(30, Node.VAR_ARGS_NAME);
893:       assertEquals(1, Node.DECR_FLAG);
894:       assertEquals(54, Node.SLASH_V);
895:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
896:       assertEquals(12, Node.COLUMN_BITS);
897:       assertEquals(32, Node.INCRDECR_PROP);
898:       assertEquals(46, Node.IS_NAMESPACE);
899:       assertEquals(52, Node.LENGTH);
900:       assertEquals(51, Node.STATIC_SOURCE_FILE);
901:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
902:       assertEquals(47, Node.IS_DISPATCHER);
903:       assertEquals(50, Node.FREE_CALL);
904:       assertEquals(2, Node.POST_FLAG);
905:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
906:       assertEquals(40, Node.ORIGINALNAME_PROP);
907:       assertSame(node0, node2);
908:       assertNotSame(node0, node3);
909:       assertNotNull(iterable0);
910:       assertFalse(node0.equals((Object)node3));
911:       assertFalse(node0.equals((Object)node1));
912:       assertFalse(node0.isArrayLit());
913:       assertFalse(node0.isIf());
914:       assertFalse(node0.isDelProp());
915:       assertEquals(308, node0.getCharno());
916:       assertFalse(node0.isNE());
917:       assertFalse(node0.isFor());
918:       assertFalse(node0.isTrue());
919:       assertFalse(node0.isTry());
920:       assertFalse(node0.isDebugger());
921:       assertFalse(node0.isIn());
922:       assertFalse(node0.isGetterDef());
923:       assertFalse(node0.isEmpty());
924:       assertFalse(node0.isCase());
925:       assertFalse(node0.isVoid());
926:       assertFalse(node0.isRegExp());
927:       assertFalse(node0.isCatch());
928:       assertFalse(node0.isThrow());
929:       assertFalse(node0.isFalse());
930:       assertFalse(node0.isGetProp());
931:       assertFalse(node0.isInc());
932:       assertFalse(node0.isSetterDef());
933:       assertEquals(308, node0.getType());
934:       assertFalse(node0.isString());
935:       assertFalse(node0.isAnd());
936:       assertFalse(node0.isContinue());
937:       assertFalse(node0.isObjectLit());
938:       assertFalse(node0.isNot());
939:       assertFalse(node0.isFunction());
940:       assertFalse(node0.isCast());
941:       assertFalse(node0.isGetElem());
942:       assertFalse(node0.isAssign());
943:       assertFalse(node0.isLabelName());
944:       assertFalse(node0.hasOneChild());
945:       assertFalse(node0.hasChildren());
946:       assertFalse(node0.isOr());
947:       assertFalse(node0.isNumber());
948:       assertFalse(node0.isScript());
949:       assertEquals(308, node0.getLineno());
950:       assertFalse(node0.isReturn());
951:       assertFalse(node0.isWhile());
952:       assertFalse(node0.isThis());
953:       assertFalse(node0.isExprResult());
954:       assertFalse(node0.isBlock());
955:       assertFalse(node0.isComma());
956:       assertFalse(node0.isDec());
957:       assertFalse(node0.isBreak());
958:       assertFalse(node0.isTypeOf());
959:       assertFalse(node0.hasMoreThanOneChild());
960:       assertFalse(node0.isWith());
961:       assertFalse(node0.isInstanceOf());
962:       assertFalse(node0.isCall());
963:       assertFalse(node0.isName());
964:       assertFalse(node0.isHook());
965:       assertFalse(node0.isNull());
966:       assertFalse(node0.isVar());
967:       assertFalse(node0.isStringKey());
968:       assertFalse(node0.isParamList());
969:       assertFalse(node0.isAdd());
970:       assertEquals(1261876, node0.getSourcePosition());
971:       assertFalse(node0.isNew());
972:       assertFalse(node0.isDo());
973:       assertFalse(node0.isDefaultCase());
974:       assertFalse(node0.isAssignAdd());
975:       assertFalse(node0.isSwitch());
976:       assertFalse(node0.isLabel());
977:       assertEquals(0, node0.getChildCount());
978:       
979:       String string0 = node0.getQualifiedName();
980:       assertEquals(36, Node.QUOTED_PROP);
981:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
982:       assertEquals(43, Node.IS_CONSTANT_NAME);
983:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
984:       assertEquals(8, Node.FLAG_NO_THROWS);
985:       assertEquals(39, Node.EMPTY_BLOCK);
986:       assertEquals(29, Node.JSDOC_INFO_PROP);
987:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
988:       assertEquals(53, Node.INPUT_ID);
989:       assertEquals(55, Node.INFERRED_FUNCTION);
990:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
991:       assertEquals(57, Node.REFLECTED_OBJECT);
992:       assertEquals(56, Node.CHANGE_TIME);
993:       assertEquals(48, Node.DIRECTIVES);
994:       assertEquals(37, Node.OPT_ARG_NAME);
995:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
996:       assertEquals(4095, Node.COLUMN_MASK);
997:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
998:       assertEquals(15, Node.NO_SIDE_EFFECTS);
999:       assertEquals(57, Node.LAST_PROP);
1000:       assertEquals(49, Node.DIRECT_EVAL);
1001:       assertEquals(30, Node.VAR_ARGS_NAME);
1002:       assertEquals(1, Node.DECR_FLAG);
1003:       assertEquals(54, Node.SLASH_V);
1004:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1005:       assertEquals(12, Node.COLUMN_BITS);
1006:       assertEquals(32, Node.INCRDECR_PROP);
1007:       assertEquals(46, Node.IS_NAMESPACE);
1008:       assertEquals(52, Node.LENGTH);
1009:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1010:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1011:       assertEquals(47, Node.IS_DISPATCHER);
1012:       assertEquals(50, Node.FREE_CALL);
1013:       assertEquals(2, Node.POST_FLAG);
1014:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1015:       assertEquals(40, Node.ORIGINALNAME_PROP);
1016:       assertSame(node0, node2);
1017:       assertNotSame(node0, node3);
1018:       assertNull(string0);
1019:       assertFalse(node0.equals((Object)node3));
1020:       assertFalse(node0.equals((Object)node1));
1021:       assertFalse(node0.isArrayLit());
1022:       assertFalse(node0.isIf());
1023:       assertFalse(node0.isDelProp());
1024:       assertEquals(308, node0.getCharno());
1025:       assertFalse(node0.isNE());
1026:       assertFalse(node0.isFor());
1027:       assertFalse(node0.isTrue());
1028:       assertFalse(node0.isTry());
1029:       assertFalse(node0.isDebugger());
1030:       assertFalse(node0.isIn());
1031:       assertFalse(node0.isGetterDef());
1032:       assertFalse(node0.isEmpty());
1033:       assertFalse(node0.isCase());
1034:       assertFalse(node0.isVoid());
1035:       assertFalse(node0.isRegExp());
1036:       assertFalse(node0.isCatch());
1037:       assertFalse(node0.isThrow());
1038:       assertFalse(node0.isFalse());
1039:       assertFalse(node0.isGetProp());
1040:       assertFalse(node0.isInc());
1041:       assertFalse(node0.isSetterDef());
1042:       assertEquals(308, node0.getType());
1043:       assertFalse(node0.isString());
1044:       assertFalse(node0.isAnd());
1045:       assertFalse(node0.isContinue());
1046:       assertFalse(node0.isObjectLit());
1047:       assertFalse(node0.isNot());
1048:       assertFalse(node0.isFunction());
1049:       assertFalse(node0.isCast());
1050:       assertFalse(node0.isGetElem());
1051:       assertFalse(node0.isAssign());
1052:       assertFalse(node0.isLabelName());
1053:       assertFalse(node0.hasOneChild());
1054:       assertFalse(node0.hasChildren());
1055:       assertFalse(node0.isOr());
1056:       assertFalse(node0.isNumber());
1057:       assertFalse(node0.isScript());
1058:       assertEquals(308, node0.getLineno());
1059:       assertFalse(node0.isReturn());
1060:       assertFalse(node0.isWhile());
1061:       assertFalse(node0.isThis());
1062:       assertFalse(node0.isExprResult());
1063:       assertFalse(node0.isBlock());
1064:       assertFalse(node0.isComma());
1065:       assertFalse(node0.isDec());
1066:       assertFalse(node0.isBreak());
1067:       assertFalse(node0.isTypeOf());
1068:       assertFalse(node0.hasMoreThanOneChild());
1069:       assertFalse(node0.isWith());
1070:       assertFalse(node0.isInstanceOf());
1071:       assertFalse(node0.isCall());
1072:       assertFalse(node0.isName());
1073:       assertFalse(node0.isHook());
1074:       assertFalse(node0.isNull());
1075:       assertFalse(node0.isVar());
1076:       assertFalse(node0.isStringKey());
1077:       assertFalse(node0.isParamList());
1078:       assertFalse(node0.isAdd());
1079:       assertEquals(1261876, node0.getSourcePosition());
1080:       assertFalse(node0.isNew());
1081:       assertFalse(node0.isDo());
1082:       assertFalse(node0.isDefaultCase());
1083:       assertFalse(node0.isAssignAdd());
1084:       assertFalse(node0.isSwitch());
1085:       assertFalse(node0.isLabel());
1086:       assertEquals(0, node0.getChildCount());
1087:       
1088:       boolean boolean1 = node0.isHook();
1089:       assertFalse(boolean1);
1090:       assertEquals(36, Node.QUOTED_PROP);
1091:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1092:       assertEquals(43, Node.IS_CONSTANT_NAME);
1093:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1094:       assertEquals(8, Node.FLAG_NO_THROWS);
1095:       assertEquals(39, Node.EMPTY_BLOCK);
1096:       assertEquals(29, Node.JSDOC_INFO_PROP);
1097:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1098:       assertEquals(53, Node.INPUT_ID);
1099:       assertEquals(55, Node.INFERRED_FUNCTION);
1100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1101:       assertEquals(57, Node.REFLECTED_OBJECT);
1102:       assertEquals(56, Node.CHANGE_TIME);
1103:       assertEquals(48, Node.DIRECTIVES);
1104:       assertEquals(37, Node.OPT_ARG_NAME);
1105:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1106:       assertEquals(4095, Node.COLUMN_MASK);
1107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1108:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1109:       assertEquals(57, Node.LAST_PROP);
1110:       assertEquals(49, Node.DIRECT_EVAL);
1111:       assertEquals(30, Node.VAR_ARGS_NAME);
1112:       assertEquals(1, Node.DECR_FLAG);
1113:       assertEquals(54, Node.SLASH_V);
1114:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1115:       assertEquals(12, Node.COLUMN_BITS);
1116:       assertEquals(32, Node.INCRDECR_PROP);
1117:       assertEquals(46, Node.IS_NAMESPACE);
1118:       assertEquals(52, Node.LENGTH);
1119:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1121:       assertEquals(47, Node.IS_DISPATCHER);
1122:       assertEquals(50, Node.FREE_CALL);
1123:       assertEquals(2, Node.POST_FLAG);
1124:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1125:       assertEquals(40, Node.ORIGINALNAME_PROP);
1126:       assertSame(node0, node2);
1127:       assertNotSame(node0, node3);
1128:       assertFalse(node0.equals((Object)node3));
1129:       assertFalse(node0.equals((Object)node1));
1130:       assertTrue(boolean1 == boolean0);
1131:       assertFalse(node0.isArrayLit());
1132:       assertFalse(node0.isIf());
1133:       assertFalse(node0.isDelProp());
1134:       assertEquals(308, node0.getCharno());
1135:       assertFalse(node0.isNE());
1136:       assertFalse(node0.isFor());
1137:       assertFalse(node0.isTrue());
1138:       assertFalse(node0.isTry());
1139:       assertFalse(node0.isDebugger());
1140:       assertFalse(node0.isIn());
1141:       assertFalse(node0.isGetterDef());
1142:       assertFalse(node0.isEmpty());
1143:       assertFalse(node0.isCase());
1144:       assertFalse(node0.isVoid());
1145:       assertFalse(node0.isRegExp());
1146:       assertFalse(node0.isCatch());
1147:       assertFalse(node0.isThrow());
1148:       assertFalse(node0.isFalse());
1149:       assertFalse(node0.isGetProp());
1150:       assertFalse(node0.isInc());
1151:       assertFalse(node0.isSetterDef());
1152:       assertEquals(308, node0.getType());
1153:       assertFalse(node0.isString());
1154:       assertFalse(node0.isAnd());
1155:       assertFalse(node0.isContinue());
1156:       assertFalse(node0.isObjectLit());
1157:       assertFalse(node0.isNot());
1158:       assertFalse(node0.isFunction());
1159:       assertFalse(node0.isCast());
1160:       assertFalse(node0.isGetElem());
1161:       assertFalse(node0.isAssign());
1162:       assertFalse(node0.isLabelName());
1163:       assertFalse(node0.hasOneChild());
1164:       assertFalse(node0.hasChildren());
1165:       assertFalse(node0.isOr());
1166:       assertFalse(node0.isNumber());
1167:       assertFalse(node0.isScript());
1168:       assertEquals(308, node0.getLineno());
1169:       assertFalse(node0.isReturn());
1170:       assertFalse(node0.isWhile());
1171:       assertFalse(node0.isThis());
1172:       assertFalse(node0.isExprResult());
1173:       assertFalse(node0.isBlock());
1174:       assertFalse(node0.isComma());
1175:       assertFalse(node0.isDec());
1176:       assertFalse(node0.isBreak());
1177:       assertFalse(node0.isTypeOf());
1178:       assertFalse(node0.hasMoreThanOneChild());
1179:       assertFalse(node0.isWith());
1180:       assertFalse(node0.isInstanceOf());
1181:       assertFalse(node0.isCall());
1182:       assertFalse(node0.isName());
1183:       assertFalse(node0.isHook());
1184:       assertFalse(node0.isNull());
1185:       assertFalse(node0.isVar());
1186:       assertFalse(node0.isStringKey());
1187:       assertFalse(node0.isParamList());
1188:       assertFalse(node0.isAdd());
1189:       assertEquals(1261876, node0.getSourcePosition());
1190:       assertFalse(node0.isNew());
1191:       assertFalse(node0.isDo());
1192:       assertFalse(node0.isDefaultCase());
1193:       assertFalse(node0.isAssignAdd());
1194:       assertFalse(node0.isSwitch());
1195:       assertFalse(node0.isLabel());
1196:       assertEquals(0, node0.getChildCount());
1197:       
1198:       Node node4 = new Node(1, 32, 37);
1199:       assertEquals(1, Node.DECR_FLAG);
1200:       assertEquals(12, Node.COLUMN_BITS);
1201:       assertEquals(30, Node.VAR_ARGS_NAME);
1202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1203:       assertEquals(37, Node.OPT_ARG_NAME);
1204:       assertEquals(54, Node.SLASH_V);
1205:       assertEquals(46, Node.IS_NAMESPACE);
1206:       assertEquals(56, Node.CHANGE_TIME);
1207:       assertEquals(49, Node.DIRECT_EVAL);
1208:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1210:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1211:       assertEquals(50, Node.FREE_CALL);
1212:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1213:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1214:       assertEquals(32, Node.INCRDECR_PROP);
1215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1216:       assertEquals(55, Node.INFERRED_FUNCTION);
1217:       assertEquals(36, Node.QUOTED_PROP);
1218:       assertEquals(4095, Node.COLUMN_MASK);
1219:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1220:       assertEquals(48, Node.DIRECTIVES);
1221:       assertEquals(43, Node.IS_CONSTANT_NAME);
1222:       assertEquals(40, Node.ORIGINALNAME_PROP);
1223:       assertEquals(29, Node.JSDOC_INFO_PROP);
1224:       assertEquals(57, Node.REFLECTED_OBJECT);
1225:       assertEquals(2, Node.POST_FLAG);
1226:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1227:       assertEquals(52, Node.LENGTH);
1228:       assertEquals(8, Node.FLAG_NO_THROWS);
1229:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1230:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1231:       assertEquals(39, Node.EMPTY_BLOCK);
1232:       assertEquals(47, Node.IS_DISPATCHER);
1233:       assertEquals(53, Node.INPUT_ID);
1234:       assertEquals(57, Node.LAST_PROP);
1235:       assertNotNull(node4);
1236:       assertFalse(node4.equals((Object)node2));
1237:       assertFalse(node4.equals((Object)node0));
1238:       assertFalse(node4.equals((Object)node3));
1239:       assertFalse(node4.equals((Object)node1));
1240:       assertFalse(node4.isHook());
1241:       assertFalse(node4.isFalse());
1242:       assertFalse(node4.isBreak());
1243:       assertEquals(131109, node4.getSourcePosition());
1244:       assertFalse(node4.isSwitch());
1245:       assertFalse(node4.isInstanceOf());
1246:       assertFalse(node4.isComma());
1247:       assertFalse(node4.isNot());
1248:       assertFalse(node4.isWith());
1249:       assertFalse(node4.isObjectLit());
1250:       assertFalse(node4.isString());
1251:       assertFalse(node4.isThis());
1252:       assertFalse(node4.isFor());
1253:       assertFalse(node4.isScript());
1254:       assertFalse(node4.isGetProp());
1255:       assertFalse(node4.isCase());
1256:       assertFalse(node4.isCast());
1257:       assertFalse(node4.isDebugger());
1258:       assertFalse(node4.isFunction());
1259:       assertFalse(node4.isRegExp());
1260:       assertFalse(node4.isIf());
1261:       assertFalse(node4.isNE());
1262:       assertFalse(node4.isAnd());
1263:       assertEquals(32, node4.getLineno());
1264:       assertEquals(37, node4.getCharno());
1265:       assertFalse(node4.isIn());
1266:       assertFalse(node4.isContinue());
1267:       assertFalse(node4.isInc());
1268:       assertFalse(node4.isSetterDef());
1269:       assertFalse(node4.isThrow());
1270:       assertFalse(node4.isVar());
1271:       assertFalse(node4.isCall());
1272:       assertFalse(node4.isBlock());
1273:       assertFalse(node4.isAdd());
1274:       assertFalse(node4.isNull());
1275:       assertFalse(node4.isStringKey());
1276:       assertFalse(node4.isParamList());
1277:       assertFalse(node4.isName());
1278:       assertFalse(node4.isReturn());
1279:       assertFalse(node4.isCatch());
1280:       assertFalse(node4.hasMoreThanOneChild());
1281:       assertFalse(node4.isTypeOf());
1282:       assertFalse(node4.isDec());
1283:       assertFalse(node4.hasChildren());
1284:       assertFalse(node4.isNumber());
1285:       assertFalse(node4.isWhile());
1286:       assertFalse(node4.isTry());
1287:       assertFalse(node4.hasOneChild());
1288:       assertFalse(node4.isArrayLit());
1289:       assertEquals(1, node4.getType());
1290:       assertFalse(node4.isAssign());
1291:       assertFalse(node4.isGetterDef());
1292:       assertFalse(node4.isExprResult());
1293:       assertFalse(node4.isTrue());
1294:       assertFalse(node4.isGetElem());
1295:       assertFalse(node4.isLabelName());
1296:       assertFalse(node4.isDelProp());
1297:       assertFalse(node4.isVoid());
1298:       assertEquals(0, node4.getChildCount());
1299:       assertFalse(node4.isLabel());
1300:       assertFalse(node4.isOr());
1301:       assertFalse(node4.isDefaultCase());
1302:       assertFalse(node4.isEmpty());
1303:       assertFalse(node4.isNew());
1304:       assertFalse(node4.isAssignAdd());
1305:       assertFalse(node4.isDo());
1306:       
1307:       boolean boolean2 = node4.isAssign();
1308:       assertFalse(boolean2);
1309:       assertEquals(1, Node.DECR_FLAG);
1310:       assertEquals(12, Node.COLUMN_BITS);
1311:       assertEquals(30, Node.VAR_ARGS_NAME);
1312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1313:       assertEquals(37, Node.OPT_ARG_NAME);
1314:       assertEquals(54, Node.SLASH_V);
1315:       assertEquals(46, Node.IS_NAMESPACE);
1316:       assertEquals(56, Node.CHANGE_TIME);
1317:       assertEquals(49, Node.DIRECT_EVAL);
1318:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1320:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1321:       assertEquals(50, Node.FREE_CALL);
1322:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1323:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1324:       assertEquals(32, Node.INCRDECR_PROP);
1325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1326:       assertEquals(55, Node.INFERRED_FUNCTION);
1327:       assertEquals(36, Node.QUOTED_PROP);
1328:       assertEquals(4095, Node.COLUMN_MASK);
1329:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1330:       assertEquals(48, Node.DIRECTIVES);
1331:       assertEquals(43, Node.IS_CONSTANT_NAME);
1332:       assertEquals(40, Node.ORIGINALNAME_PROP);
1333:       assertEquals(29, Node.JSDOC_INFO_PROP);
1334:       assertEquals(57, Node.REFLECTED_OBJECT);
1335:       assertEquals(2, Node.POST_FLAG);
1336:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1337:       assertEquals(52, Node.LENGTH);
1338:       assertEquals(8, Node.FLAG_NO_THROWS);
1339:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1341:       assertEquals(39, Node.EMPTY_BLOCK);
1342:       assertEquals(47, Node.IS_DISPATCHER);
1343:       assertEquals(53, Node.INPUT_ID);
1344:       assertEquals(57, Node.LAST_PROP);
1345:       assertNotSame(node4, node2);
1346:       assertNotSame(node4, node0);
1347:       assertNotSame(node4, node3);
1348:       assertFalse(node4.equals((Object)node2));
1349:       assertFalse(node4.equals((Object)node0));
1350:       assertFalse(node4.equals((Object)node3));
1351:       assertFalse(node4.equals((Object)node1));
1352:       assertTrue(boolean2 == boolean1);
1353:       assertTrue(boolean2 == boolean0);
1354:       assertFalse(node4.isHook());
1355:       assertFalse(node4.isFalse());
1356:       assertFalse(node4.isBreak());
1357:       assertEquals(131109, node4.getSourcePosition());
1358:       assertFalse(node4.isSwitch());
1359:       assertFalse(node4.isInstanceOf());
1360:       assertFalse(node4.isComma());
1361:       assertFalse(node4.isNot());
1362:       assertFalse(node4.isWith());
1363:       assertFalse(node4.isObjectLit());
1364:       assertFalse(node4.isString());
1365:       assertFalse(node4.isThis());
1366:       assertFalse(node4.isFor());
1367:       assertFalse(node4.isScript());
1368:       assertFalse(node4.isGetProp());
1369:       assertFalse(node4.isCase());
1370:       assertFalse(node4.isCast());
1371:       assertFalse(node4.isDebugger());
1372:       assertFalse(node4.isFunction());
1373:       assertFalse(node4.isRegExp());
1374:       assertFalse(node4.isIf());
1375:       assertFalse(node4.isNE());
1376:       assertFalse(node4.isAnd());
1377:       assertEquals(32, node4.getLineno());
1378:       assertEquals(37, node4.getCharno());
1379:       assertFalse(node4.isIn());
1380:       assertFalse(node4.isContinue());
1381:       assertFalse(node4.isInc());
1382:       assertFalse(node4.isSetterDef());
1383:       assertFalse(node4.isThrow());
1384:       assertFalse(node4.isVar());
1385:       assertFalse(node4.isCall());
1386:       assertFalse(node4.isBlock());
1387:       assertFalse(node4.isAdd());
1388:       assertFalse(node4.isNull());
1389:       assertFalse(node4.isStringKey());
1390:       assertFalse(node4.isParamList());
1391:       assertFalse(node4.isName());
1392:       assertFalse(node4.isReturn());
1393:       assertFalse(node4.isCatch());
1394:       assertFalse(node4.hasMoreThanOneChild());
1395:       assertFalse(node4.isTypeOf());
1396:       assertFalse(node4.isDec());
1397:       assertFalse(node4.hasChildren());
1398:       assertFalse(node4.isNumber());
1399:       assertFalse(node4.isWhile());
1400:       assertFalse(node4.isTry());
1401:       assertFalse(node4.hasOneChild());
1402:       assertFalse(node4.isArrayLit());
1403:       assertEquals(1, node4.getType());
1404:       assertFalse(node4.isAssign());
1405:       assertFalse(node4.isGetterDef());
1406:       assertFalse(node4.isExprResult());
1407:       assertFalse(node4.isTrue());
1408:       assertFalse(node4.isGetElem());
1409:       assertFalse(node4.isLabelName());
1410:       assertFalse(node4.isDelProp());
1411:       assertFalse(node4.isVoid());
1412:       assertEquals(0, node4.getChildCount());
1413:       assertFalse(node4.isLabel());
1414:       assertFalse(node4.isOr());
1415:       assertFalse(node4.isDefaultCase());
1416:       assertFalse(node4.isEmpty());
1417:       assertFalse(node4.isNew());
1418:       assertFalse(node4.isAssignAdd());
1419:       assertFalse(node4.isDo());
1420:   }
1421: }
RegularFileObject[/tmp/EvoSuite_196_1628157895223/com/google/javascript/rhino/Node_196_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:55 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_196_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_196_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_196_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:55.418 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Node node0 = new Node(308, 308, 308);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(308, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(308, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals(308, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isHook());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

Node node1 = Node.newNumber(1.0, 0, 3979);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(3979, node1.getCharno());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isRegExp());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isString());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertEquals(3979, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());

Node node2 = node0.clonePropsFrom(node1);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertSame(node0, node2);
assertSame(node2, node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(308, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(308, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals(308, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isHook());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(3979, node1.getCharno());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isRegExp());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isString());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertEquals(3979, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isIf());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isSetterDef());
assertEquals(308, node2.getType());
assertFalse(node2.isIn());
assertEquals(308, node2.getCharno());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertEquals(308, node2.getLineno());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isAnd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals(1261876, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNumber());
assertFalse(node2.isWith());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isThis());

Node node3 = new Node(0, node0, 40, 41);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(308, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(308, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals(308, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isHook());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertTrue(node3.hasChildren());
assertFalse(node3.isNE());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertEquals(163881, node3.getSourcePosition());
assertFalse(node3.isEmpty());
assertFalse(node3.isString());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertEquals(0, node3.getType());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertFalse(node3.isCatch());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isHook());
assertTrue(node3.hasOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isComma());
assertFalse(node3.isGetProp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isInc());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabelName());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isExprResult());
assertFalse(node3.isBlock());
assertFalse(node3.isScript());
assertFalse(node3.isWhile());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(41, node3.getCharno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isReturn());
assertFalse(node3.isWith());
assertFalse(node3.isTypeOf());
assertEquals(40, node3.getLineno());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isParamList());
assertFalse(node3.isThis());
assertFalse(node3.isNull());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isSwitch());
assertFalse(node3.isAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isArrayLit());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());

boolean boolean0 = node0.isDo();
assertFalse(boolean0);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(308, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(308, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals(308, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isHook());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(308, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(308, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals(308, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isHook());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

String string0 = node0.getQualifiedName();
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNull(string0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(308, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(308, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals(308, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isHook());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

boolean boolean1 = node0.isHook();
assertFalse(boolean1);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertEquals(308, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(308, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertEquals(308, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isHook());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAdd());
assertEquals(1261876, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());

Node node4 = new Node(1, 32, 37);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node4);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isBreak());
assertEquals(131109, node4.getSourcePosition());
assertFalse(node4.isSwitch());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isComma());
assertFalse(node4.isNot());
assertFalse(node4.isWith());
assertFalse(node4.isObjectLit());
assertFalse(node4.isString());
assertFalse(node4.isThis());
assertFalse(node4.isFor());
assertFalse(node4.isScript());
assertFalse(node4.isGetProp());
assertFalse(node4.isCase());
assertFalse(node4.isCast());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isAnd());
assertEquals(32, node4.getLineno());
assertEquals(37, node4.getCharno());
assertFalse(node4.isIn());
assertFalse(node4.isContinue());
assertFalse(node4.isInc());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertFalse(node4.isVar());
assertFalse(node4.isCall());
assertFalse(node4.isBlock());
assertFalse(node4.isAdd());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.isName());
assertFalse(node4.isReturn());
assertFalse(node4.isCatch());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isNumber());
assertFalse(node4.isWhile());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isArrayLit());
assertEquals(1, node4.getType());
assertFalse(node4.isAssign());
assertFalse(node4.isGetterDef());
assertFalse(node4.isExprResult());
assertFalse(node4.isTrue());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isDelProp());
assertFalse(node4.isVoid());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertFalse(node4.isOr());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isEmpty());
assertFalse(node4.isNew());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());

boolean boolean2 = node4.isAssign();
assertFalse(boolean2);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertNotSame(node4, node3);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isBreak());
assertEquals(131109, node4.getSourcePosition());
assertFalse(node4.isSwitch());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isComma());
assertFalse(node4.isNot());
assertFalse(node4.isWith());
assertFalse(node4.isObjectLit());
assertFalse(node4.isString());
assertFalse(node4.isThis());
assertFalse(node4.isFor());
assertFalse(node4.isScript());
assertFalse(node4.isGetProp());
assertFalse(node4.isCase());
assertFalse(node4.isCast());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isAnd());
assertEquals(32, node4.getLineno());
assertEquals(37, node4.getCharno());
assertFalse(node4.isIn());
assertFalse(node4.isContinue());
assertFalse(node4.isInc());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertFalse(node4.isVar());
assertFalse(node4.isCall());
assertFalse(node4.isBlock());
assertFalse(node4.isAdd());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.isName());
assertFalse(node4.isReturn());
assertFalse(node4.isCatch());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isNumber());
assertFalse(node4.isWhile());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isArrayLit());
assertEquals(1, node4.getType());
assertFalse(node4.isAssign());
assertFalse(node4.isGetterDef());
assertFalse(node4.isExprResult());
assertFalse(node4.isTrue());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isDelProp());
assertFalse(node4.isVoid());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertFalse(node4.isOr());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isEmpty());
assertFalse(node4.isNew());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());


[MASTER] 10:04:56.074 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_200_1628157895669/com/google/javascript/rhino/Node_200_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_200_1628157895669/com/google/javascript/rhino/Node_200_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:56.074 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:56.074 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:56.075 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1550
[MASTER] 10:04:56.076 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_200_1628157895669/com/google/javascript/rhino/Node_200_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:55 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_200_tmp__ESTest extends Node_200_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(2743.39422263819, 242, 242);
22:       assertEquals(32, Node.INCRDECR_PROP);
23:       assertEquals(46, Node.IS_NAMESPACE);
24:       assertEquals(51, Node.STATIC_SOURCE_FILE);
25:       assertEquals(12, Node.COLUMN_BITS);
26:       assertEquals(37, Node.OPT_ARG_NAME);
27:       assertEquals(1, Node.DECR_FLAG);
28:       assertEquals(49, Node.DIRECT_EVAL);
29:       assertEquals(30, Node.VAR_ARGS_NAME);
30:       assertEquals(47, Node.IS_DISPATCHER);
31:       assertEquals(2, Node.POST_FLAG);
32:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
33:       assertEquals(53, Node.INPUT_ID);
34:       assertEquals(57, Node.REFLECTED_OBJECT);
35:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
36:       assertEquals(57, Node.LAST_PROP);
37:       assertEquals(56, Node.CHANGE_TIME);
38:       assertEquals(29, Node.JSDOC_INFO_PROP);
39:       assertEquals(36, Node.QUOTED_PROP);
40:       assertEquals(15, Node.NO_SIDE_EFFECTS);
41:       assertEquals(39, Node.EMPTY_BLOCK);
42:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
43:       assertEquals(55, Node.INFERRED_FUNCTION);
44:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
45:       assertEquals(52, Node.LENGTH);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(48, Node.DIRECTIVES);
48:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
49:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
50:       assertEquals(40, Node.ORIGINALNAME_PROP);
51:       assertEquals(4095, Node.COLUMN_MASK);
52:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
53:       assertEquals(54, Node.SLASH_V);
54:       assertEquals(43, Node.IS_CONSTANT_NAME);
55:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
56:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
57:       assertEquals(50, Node.FREE_CALL);
58:       assertNotNull(node0);
59:       assertFalse(node0.isInc());
60:       assertFalse(node0.isSwitch());
61:       assertFalse(node0.isThrow());
62:       assertFalse(node0.isHook());
63:       assertFalse(node0.isFalse());
64:       assertFalse(node0.isNE());
65:       assertFalse(node0.isBreak());
66:       assertFalse(node0.isIf());
67:       assertEquals(242, node0.getCharno());
68:       assertFalse(node0.isDelProp());
69:       assertFalse(node0.isEmpty());
70:       assertFalse(node0.isIn());
71:       assertEquals(242, node0.getLineno());
72:       assertFalse(node0.isScript());
73:       assertFalse(node0.isDefaultCase());
74:       assertFalse(node0.hasOneChild());
75:       assertFalse(node0.isArrayLit());
76:       assertFalse(node0.isTry());
77:       assertFalse(node0.isCatch());
78:       assertFalse(node0.isFor());
79:       assertEquals(0, node0.getChildCount());
80:       assertFalse(node0.isInstanceOf());
81:       assertFalse(node0.isWith());
82:       assertFalse(node0.isRegExp());
83:       assertFalse(node0.isParamList());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isLabelName());
86:       assertFalse(node0.isStringKey());
87:       assertFalse(node0.isCase());
88:       assertFalse(node0.isGetterDef());
89:       assertEquals(991474, node0.getSourcePosition());
90:       assertFalse(node0.isNew());
91:       assertFalse(node0.isBlock());
92:       assertFalse(node0.isAdd());
93:       assertFalse(node0.isWhile());
94:       assertFalse(node0.isDo());
95:       assertFalse(node0.isContinue());
96:       assertFalse(node0.isVar());
97:       assertEquals(39, node0.getType());
98:       assertFalse(node0.isCall());
99:       assertFalse(node0.hasMoreThanOneChild());
100:       assertFalse(node0.isLabel());
101:       assertFalse(node0.isSetterDef());
102:       assertFalse(node0.isNull());
103:       assertFalse(node0.isAssignAdd());
104:       assertFalse(node0.isName());
105:       assertFalse(node0.isOr());
106:       assertFalse(node0.isVoid());
107:       assertFalse(node0.isDebugger());
108:       assertFalse(node0.isExprResult());
109:       assertFalse(node0.isTrue());
110:       assertFalse(node0.isCast());
111:       assertFalse(node0.isGetElem());
112:       assertFalse(node0.isDec());
113:       assertFalse(node0.hasChildren());
114:       assertFalse(node0.isAssign());
115:       assertFalse(node0.isFunction());
116:       assertFalse(node0.isTypeOf());
117:       assertFalse(node0.isGetProp());
118:       assertFalse(node0.isComma());
119:       assertFalse(node0.isReturn());
120:       assertTrue(node0.isNumber());
121:       assertFalse(node0.isAnd());
122:       assertFalse(node0.isString());
123:       assertFalse(node0.isNot());
124:       assertFalse(node0.isObjectLit());
125:       
126:       Node node1 = new Node((-2596), 32, (-4612));
127:       assertEquals(37, Node.OPT_ARG_NAME);
128:       assertEquals(2, Node.POST_FLAG);
129:       assertEquals(47, Node.IS_DISPATCHER);
130:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
131:       assertEquals(32, Node.INCRDECR_PROP);
132:       assertEquals(46, Node.IS_NAMESPACE);
133:       assertEquals(56, Node.CHANGE_TIME);
134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
135:       assertEquals(1, Node.DECR_FLAG);
136:       assertEquals(29, Node.JSDOC_INFO_PROP);
137:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
138:       assertEquals(54, Node.SLASH_V);
139:       assertEquals(15, Node.NO_SIDE_EFFECTS);
140:       assertEquals(53, Node.INPUT_ID);
141:       assertEquals(43, Node.IS_CONSTANT_NAME);
142:       assertEquals(57, Node.LAST_PROP);
143:       assertEquals(40, Node.ORIGINALNAME_PROP);
144:       assertEquals(30, Node.VAR_ARGS_NAME);
145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
146:       assertEquals(8, Node.FLAG_NO_THROWS);
147:       assertEquals(39, Node.EMPTY_BLOCK);
148:       assertEquals(48, Node.DIRECTIVES);
149:       assertEquals(55, Node.INFERRED_FUNCTION);
150:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
151:       assertEquals(57, Node.REFLECTED_OBJECT);
152:       assertEquals(52, Node.LENGTH);
153:       assertEquals(50, Node.FREE_CALL);
154:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
157:       assertEquals(49, Node.DIRECT_EVAL);
158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
159:       assertEquals(12, Node.COLUMN_BITS);
160:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
161:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
162:       assertEquals(4095, Node.COLUMN_MASK);
163:       assertNotNull(node1);
164:       assertFalse(node1.equals((Object)node0));
165:       assertFalse(node1.isWhile());
166:       assertFalse(node1.isDo());
167:       assertFalse(node1.isNew());
168:       assertFalse(node1.isOr());
169:       assertFalse(node1.isAdd());
170:       assertFalse(node1.isNumber());
171:       assertEquals((-1), node1.getSourcePosition());
172:       assertFalse(node1.isSetterDef());
173:       assertFalse(node1.isParamList());
174:       assertFalse(node1.isStringKey());
175:       assertEquals((-2596), node1.getType());
176:       assertFalse(node1.isAssignAdd());
177:       assertFalse(node1.isLabelName());
178:       assertEquals(0, node1.getChildCount());
179:       assertFalse(node1.isVar());
180:       assertFalse(node1.isLabel());
181:       assertFalse(node1.isContinue());
182:       assertFalse(node1.isCast());
183:       assertFalse(node1.isScript());
184:       assertFalse(node1.isTry());
185:       assertFalse(node1.hasOneChild());
186:       assertFalse(node1.isFor());
187:       assertFalse(node1.isThis());
188:       assertFalse(node1.isNE());
189:       assertFalse(node1.isIf());
190:       assertFalse(node1.isInstanceOf());
191:       assertEquals((-1), node1.getLineno());
192:       assertFalse(node1.isBlock());
193:       assertFalse(node1.isHook());
194:       assertFalse(node1.isCatch());
195:       assertFalse(node1.isRegExp());
196:       assertFalse(node1.hasMoreThanOneChild());
197:       assertFalse(node1.isWith());
198:       assertFalse(node1.isString());
199:       assertFalse(node1.isCase());
200:       assertFalse(node1.isInc());
201:       assertFalse(node1.isSwitch());
202:       assertEquals((-1), node1.getCharno());
203:       assertFalse(node1.isIn());
204:       assertFalse(node1.isGetterDef());
205:       assertFalse(node1.isEmpty());
206:       assertFalse(node1.isThrow());
207:       assertFalse(node1.isArrayLit());
208:       assertFalse(node1.isFalse());
209:       assertFalse(node1.isFunction());
210:       assertFalse(node1.isVoid());
211:       assertFalse(node1.isAnd());
212:       assertFalse(node1.isTrue());
213:       assertFalse(node1.isDefaultCase());
214:       assertFalse(node1.isGetProp());
215:       assertFalse(node1.isDebugger());
216:       assertFalse(node1.isObjectLit());
217:       assertFalse(node1.isNot());
218:       assertFalse(node1.isBreak());
219:       assertFalse(node1.isDelProp());
220:       assertFalse(node1.hasChildren());
221:       assertFalse(node1.isDec());
222:       assertFalse(node1.isAssign());
223:       assertFalse(node1.isNull());
224:       assertFalse(node1.isGetElem());
225:       assertFalse(node1.isName());
226:       assertFalse(node1.isReturn());
227:       assertFalse(node1.isExprResult());
228:       assertFalse(node1.isCall());
229:       assertFalse(node1.isComma());
230:       assertFalse(node1.isTypeOf());
231:       
232:       Node node2 = new Node(405, node0, node0, node1, 1, 107);
233:       assertEquals(32, Node.INCRDECR_PROP);
234:       assertEquals(46, Node.IS_NAMESPACE);
235:       assertEquals(51, Node.STATIC_SOURCE_FILE);
236:       assertEquals(12, Node.COLUMN_BITS);
237:       assertEquals(37, Node.OPT_ARG_NAME);
238:       assertEquals(1, Node.DECR_FLAG);
239:       assertEquals(49, Node.DIRECT_EVAL);
240:       assertEquals(30, Node.VAR_ARGS_NAME);
241:       assertEquals(47, Node.IS_DISPATCHER);
242:       assertEquals(2, Node.POST_FLAG);
243:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
244:       assertEquals(53, Node.INPUT_ID);
245:       assertEquals(57, Node.REFLECTED_OBJECT);
246:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
247:       assertEquals(57, Node.LAST_PROP);
248:       assertEquals(56, Node.CHANGE_TIME);
249:       assertEquals(29, Node.JSDOC_INFO_PROP);
250:       assertEquals(36, Node.QUOTED_PROP);
251:       assertEquals(15, Node.NO_SIDE_EFFECTS);
252:       assertEquals(39, Node.EMPTY_BLOCK);
253:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
254:       assertEquals(55, Node.INFERRED_FUNCTION);
255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
256:       assertEquals(52, Node.LENGTH);
257:       assertEquals(8, Node.FLAG_NO_THROWS);
258:       assertEquals(48, Node.DIRECTIVES);
259:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
261:       assertEquals(40, Node.ORIGINALNAME_PROP);
262:       assertEquals(4095, Node.COLUMN_MASK);
263:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
264:       assertEquals(54, Node.SLASH_V);
265:       assertEquals(43, Node.IS_CONSTANT_NAME);
266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
267:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
268:       assertEquals(50, Node.FREE_CALL);
269:       assertEquals(37, Node.OPT_ARG_NAME);
270:       assertEquals(2, Node.POST_FLAG);
271:       assertEquals(47, Node.IS_DISPATCHER);
272:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
273:       assertEquals(32, Node.INCRDECR_PROP);
274:       assertEquals(46, Node.IS_NAMESPACE);
275:       assertEquals(56, Node.CHANGE_TIME);
276:       assertEquals(51, Node.STATIC_SOURCE_FILE);
277:       assertEquals(1, Node.DECR_FLAG);
278:       assertEquals(29, Node.JSDOC_INFO_PROP);
279:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
280:       assertEquals(54, Node.SLASH_V);
281:       assertEquals(15, Node.NO_SIDE_EFFECTS);
282:       assertEquals(53, Node.INPUT_ID);
283:       assertEquals(43, Node.IS_CONSTANT_NAME);
284:       assertEquals(57, Node.LAST_PROP);
285:       assertEquals(40, Node.ORIGINALNAME_PROP);
286:       assertEquals(30, Node.VAR_ARGS_NAME);
287:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
288:       assertEquals(8, Node.FLAG_NO_THROWS);
289:       assertEquals(39, Node.EMPTY_BLOCK);
290:       assertEquals(48, Node.DIRECTIVES);
291:       assertEquals(55, Node.INFERRED_FUNCTION);
292:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
293:       assertEquals(57, Node.REFLECTED_OBJECT);
294:       assertEquals(52, Node.LENGTH);
295:       assertEquals(50, Node.FREE_CALL);
296:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
297:       assertEquals(36, Node.QUOTED_PROP);
298:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
299:       assertEquals(49, Node.DIRECT_EVAL);
300:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
301:       assertEquals(12, Node.COLUMN_BITS);
302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
304:       assertEquals(4095, Node.COLUMN_MASK);
305:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(39, Node.EMPTY_BLOCK);
308:       assertEquals(48, Node.DIRECTIVES);
309:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
310:       assertEquals(57, Node.REFLECTED_OBJECT);
311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
312:       assertEquals(55, Node.INFERRED_FUNCTION);
313:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
314:       assertEquals(52, Node.LENGTH);
315:       assertEquals(8, Node.FLAG_NO_THROWS);
316:       assertEquals(30, Node.VAR_ARGS_NAME);
317:       assertEquals(15, Node.NO_SIDE_EFFECTS);
318:       assertEquals(54, Node.SLASH_V);
319:       assertEquals(43, Node.IS_CONSTANT_NAME);
320:       assertEquals(57, Node.LAST_PROP);
321:       assertEquals(40, Node.ORIGINALNAME_PROP);
322:       assertEquals(2, Node.POST_FLAG);
323:       assertEquals(29, Node.JSDOC_INFO_PROP);
324:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
325:       assertEquals(47, Node.IS_DISPATCHER);
326:       assertEquals(37, Node.OPT_ARG_NAME);
327:       assertEquals(56, Node.CHANGE_TIME);
328:       assertEquals(32, Node.INCRDECR_PROP);
329:       assertEquals(46, Node.IS_NAMESPACE);
330:       assertEquals(51, Node.STATIC_SOURCE_FILE);
331:       assertEquals(53, Node.INPUT_ID);
332:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
333:       assertEquals(49, Node.DIRECT_EVAL);
334:       assertEquals(36, Node.QUOTED_PROP);
335:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
336:       assertEquals(1, Node.DECR_FLAG);
337:       assertEquals(12, Node.COLUMN_BITS);
338:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
339:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
340:       assertEquals(4095, Node.COLUMN_MASK);
341:       assertNotNull(node2);
342:       assertFalse(node0.equals((Object)node1));
343:       assertFalse(node1.equals((Object)node0));
344:       assertFalse(node2.equals((Object)node1));
345:       assertFalse(node2.equals((Object)node0));
346:       assertFalse(node0.isInc());
347:       assertFalse(node0.isSwitch());
348:       assertFalse(node0.isThrow());
349:       assertFalse(node0.isHook());
350:       assertFalse(node0.isFalse());
351:       assertFalse(node0.isNE());
352:       assertFalse(node0.isBreak());
353:       assertFalse(node0.isIf());
354:       assertEquals(242, node0.getCharno());
355:       assertFalse(node0.isDelProp());
356:       assertFalse(node0.isEmpty());
357:       assertFalse(node0.isIn());
358:       assertEquals(242, node0.getLineno());
359:       assertFalse(node0.isScript());
360:       assertFalse(node0.isDefaultCase());
361:       assertFalse(node0.hasOneChild());
362:       assertFalse(node0.isArrayLit());
363:       assertFalse(node0.isTry());
364:       assertFalse(node0.isCatch());
365:       assertFalse(node0.isFor());
366:       assertEquals(0, node0.getChildCount());
367:       assertFalse(node0.isInstanceOf());
368:       assertFalse(node0.isWith());
369:       assertFalse(node0.isRegExp());
370:       assertFalse(node0.isParamList());
371:       assertFalse(node0.isThis());
372:       assertFalse(node0.isLabelName());
373:       assertFalse(node0.isStringKey());
374:       assertFalse(node0.isCase());
375:       assertFalse(node0.isGetterDef());
376:       assertEquals(991474, node0.getSourcePosition());
377:       assertFalse(node0.isNew());
378:       assertFalse(node0.isBlock());
379:       assertFalse(node0.isAdd());
380:       assertFalse(node0.isWhile());
381:       assertFalse(node0.isDo());
382:       assertFalse(node0.isContinue());
383:       assertFalse(node0.isVar());
384:       assertEquals(39, node0.getType());
385:       assertFalse(node0.isCall());
386:       assertFalse(node0.hasMoreThanOneChild());
387:       assertFalse(node0.isLabel());
388:       assertFalse(node0.isSetterDef());
389:       assertFalse(node0.isNull());
390:       assertFalse(node0.isAssignAdd());
391:       assertFalse(node0.isName());
392:       assertFalse(node0.isOr());
393:       assertFalse(node0.isVoid());
394:       assertFalse(node0.isDebugger());
395:       assertFalse(node0.isExprResult());
396:       assertFalse(node0.isTrue());
397:       assertFalse(node0.isCast());
398:       assertFalse(node0.isGetElem());
399:       assertFalse(node0.isDec());
400:       assertFalse(node0.hasChildren());
401:       assertFalse(node0.isAssign());
402:       assertFalse(node0.isFunction());
403:       assertFalse(node0.isTypeOf());
404:       assertFalse(node0.isGetProp());
405:       assertFalse(node0.isComma());
406:       assertFalse(node0.isReturn());
407:       assertTrue(node0.isNumber());
408:       assertFalse(node0.isAnd());
409:       assertFalse(node0.isString());
410:       assertFalse(node0.isNot());
411:       assertFalse(node0.isObjectLit());
412:       assertFalse(node1.isWhile());
413:       assertFalse(node1.isDo());
414:       assertFalse(node1.isNew());
415:       assertFalse(node1.isOr());
416:       assertFalse(node1.isAdd());
417:       assertFalse(node1.isNumber());
418:       assertEquals((-1), node1.getSourcePosition());
419:       assertFalse(node1.isSetterDef());
420:       assertFalse(node1.isParamList());
421:       assertFalse(node1.isStringKey());
422:       assertEquals((-2596), node1.getType());
423:       assertFalse(node1.isAssignAdd());
424:       assertFalse(node1.isLabelName());
425:       assertEquals(0, node1.getChildCount());
426:       assertFalse(node1.isVar());
427:       assertFalse(node1.isLabel());
428:       assertFalse(node1.isContinue());
429:       assertFalse(node1.isCast());
430:       assertFalse(node1.isScript());
431:       assertFalse(node1.isTry());
432:       assertFalse(node1.hasOneChild());
433:       assertFalse(node1.isFor());
434:       assertFalse(node1.isThis());
435:       assertFalse(node1.isNE());
436:       assertFalse(node1.isIf());
437:       assertFalse(node1.isInstanceOf());
438:       assertEquals((-1), node1.getLineno());
439:       assertFalse(node1.isBlock());
440:       assertFalse(node1.isHook());
441:       assertFalse(node1.isCatch());
442:       assertFalse(node1.isRegExp());
443:       assertFalse(node1.hasMoreThanOneChild());
444:       assertFalse(node1.isWith());
445:       assertFalse(node1.isString());
446:       assertFalse(node1.isCase());
447:       assertFalse(node1.isInc());
448:       assertFalse(node1.isSwitch());
449:       assertEquals((-1), node1.getCharno());
450:       assertFalse(node1.isIn());
451:       assertFalse(node1.isGetterDef());
452:       assertFalse(node1.isEmpty());
453:       assertFalse(node1.isThrow());
454:       assertFalse(node1.isArrayLit());
455:       assertFalse(node1.isFalse());
456:       assertFalse(node1.isFunction());
457:       assertFalse(node1.isVoid());
458:       assertFalse(node1.isAnd());
459:       assertFalse(node1.isTrue());
460:       assertFalse(node1.isDefaultCase());
461:       assertFalse(node1.isGetProp());
462:       assertFalse(node1.isDebugger());
463:       assertFalse(node1.isObjectLit());
464:       assertFalse(node1.isNot());
465:       assertFalse(node1.isBreak());
466:       assertFalse(node1.isDelProp());
467:       assertFalse(node1.hasChildren());
468:       assertFalse(node1.isDec());
469:       assertFalse(node1.isAssign());
470:       assertFalse(node1.isNull());
471:       assertFalse(node1.isGetElem());
472:       assertFalse(node1.isName());
473:       assertFalse(node1.isReturn());
474:       assertFalse(node1.isExprResult());
475:       assertFalse(node1.isCall());
476:       assertFalse(node1.isComma());
477:       assertFalse(node1.isTypeOf());
478:       assertFalse(node2.isCatch());
479:       assertFalse(node2.isDefaultCase());
480:       assertFalse(node2.isDebugger());
481:       assertFalse(node2.isParamList());
482:       assertFalse(node2.isSetterDef());
483:       assertFalse(node2.isTrue());
484:       assertFalse(node2.isNull());
485:       assertFalse(node2.isStringKey());
486:       assertFalse(node2.isEmpty());
487:       assertFalse(node2.isVar());
488:       assertFalse(node2.isArrayLit());
489:       assertFalse(node2.isFunction());
490:       assertFalse(node2.isCase());
491:       assertFalse(node2.isSwitch());
492:       assertFalse(node2.isNE());
493:       assertFalse(node2.isInc());
494:       assertFalse(node2.isIn());
495:       assertFalse(node2.isGetterDef());
496:       assertFalse(node2.isNumber());
497:       assertFalse(node2.isFor());
498:       assertFalse(node2.isHook());
499:       assertFalse(node2.isIf());
500:       assertFalse(node2.hasOneChild());
501:       assertFalse(node2.isTry());
502:       assertTrue(node2.hasChildren());
503:       assertFalse(node2.isThis());
504:       assertFalse(node2.isBlock());
505:       assertEquals(107, node2.getCharno());
506:       assertFalse(node2.isInstanceOf());
507:       assertFalse(node2.isWith());
508:       assertFalse(node2.isRegExp());
509:       assertFalse(node2.isAnd());
510:       assertFalse(node2.isGetProp());
511:       assertFalse(node2.isScript());
512:       assertEquals(405, node2.getType());
513:       assertFalse(node2.isNot());
514:       assertFalse(node2.isObjectLit());
515:       assertFalse(node2.isThrow());
516:       assertFalse(node2.isCast());
517:       assertFalse(node2.isLabelName());
518:       assertEquals(2, node2.getChildCount());
519:       assertFalse(node2.isLabel());
520:       assertFalse(node2.isFalse());
521:       assertFalse(node2.isContinue());
522:       assertTrue(node2.hasMoreThanOneChild());
523:       assertFalse(node2.isWhile());
524:       assertFalse(node2.isAssignAdd());
525:       assertFalse(node2.isDo());
526:       assertFalse(node2.isNew());
527:       assertFalse(node2.isAdd());
528:       assertFalse(node2.isString());
529:       assertFalse(node2.isOr());
530:       assertFalse(node2.isGetElem());
531:       assertFalse(node2.isCall());
532:       assertFalse(node2.isBreak());
533:       assertFalse(node2.isDelProp());
534:       assertFalse(node2.isName());
535:       assertFalse(node2.isVoid());
536:       assertFalse(node2.isComma());
537:       assertEquals(4203, node2.getSourcePosition());
538:       assertFalse(node2.isExprResult());
539:       assertFalse(node2.isReturn());
540:       assertEquals(1, node2.getLineno());
541:       assertFalse(node2.isDec());
542:       assertFalse(node2.isAssign());
543:       assertFalse(node2.isTypeOf());
544:       
545:       Node node3 = new Node(49, node2);
546:       assertEquals(32, Node.INCRDECR_PROP);
547:       assertEquals(46, Node.IS_NAMESPACE);
548:       assertEquals(51, Node.STATIC_SOURCE_FILE);
549:       assertEquals(12, Node.COLUMN_BITS);
550:       assertEquals(37, Node.OPT_ARG_NAME);
551:       assertEquals(1, Node.DECR_FLAG);
552:       assertEquals(49, Node.DIRECT_EVAL);
553:       assertEquals(30, Node.VAR_ARGS_NAME);
554:       assertEquals(47, Node.IS_DISPATCHER);
555:       assertEquals(2, Node.POST_FLAG);
556:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
557:       assertEquals(53, Node.INPUT_ID);
558:       assertEquals(57, Node.REFLECTED_OBJECT);
559:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
560:       assertEquals(57, Node.LAST_PROP);
561:       assertEquals(56, Node.CHANGE_TIME);
562:       assertEquals(29, Node.JSDOC_INFO_PROP);
563:       assertEquals(36, Node.QUOTED_PROP);
564:       assertEquals(15, Node.NO_SIDE_EFFECTS);
565:       assertEquals(39, Node.EMPTY_BLOCK);
566:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
567:       assertEquals(55, Node.INFERRED_FUNCTION);
568:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
569:       assertEquals(52, Node.LENGTH);
570:       assertEquals(8, Node.FLAG_NO_THROWS);
571:       assertEquals(48, Node.DIRECTIVES);
572:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
573:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
574:       assertEquals(40, Node.ORIGINALNAME_PROP);
575:       assertEquals(4095, Node.COLUMN_MASK);
576:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
577:       assertEquals(54, Node.SLASH_V);
578:       assertEquals(43, Node.IS_CONSTANT_NAME);
579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
580:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
581:       assertEquals(50, Node.FREE_CALL);
582:       assertEquals(37, Node.OPT_ARG_NAME);
583:       assertEquals(2, Node.POST_FLAG);
584:       assertEquals(47, Node.IS_DISPATCHER);
585:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
586:       assertEquals(32, Node.INCRDECR_PROP);
587:       assertEquals(46, Node.IS_NAMESPACE);
588:       assertEquals(56, Node.CHANGE_TIME);
589:       assertEquals(51, Node.STATIC_SOURCE_FILE);
590:       assertEquals(1, Node.DECR_FLAG);
591:       assertEquals(29, Node.JSDOC_INFO_PROP);
592:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
593:       assertEquals(54, Node.SLASH_V);
594:       assertEquals(15, Node.NO_SIDE_EFFECTS);
595:       assertEquals(53, Node.INPUT_ID);
596:       assertEquals(43, Node.IS_CONSTANT_NAME);
597:       assertEquals(57, Node.LAST_PROP);
598:       assertEquals(40, Node.ORIGINALNAME_PROP);
599:       assertEquals(30, Node.VAR_ARGS_NAME);
600:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
601:       assertEquals(8, Node.FLAG_NO_THROWS);
602:       assertEquals(39, Node.EMPTY_BLOCK);
603:       assertEquals(48, Node.DIRECTIVES);
604:       assertEquals(55, Node.INFERRED_FUNCTION);
605:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
606:       assertEquals(57, Node.REFLECTED_OBJECT);
607:       assertEquals(52, Node.LENGTH);
608:       assertEquals(50, Node.FREE_CALL);
609:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
610:       assertEquals(36, Node.QUOTED_PROP);
611:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
612:       assertEquals(49, Node.DIRECT_EVAL);
613:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
614:       assertEquals(12, Node.COLUMN_BITS);
615:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
616:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
617:       assertEquals(4095, Node.COLUMN_MASK);
618:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
619:       assertEquals(50, Node.FREE_CALL);
620:       assertEquals(39, Node.EMPTY_BLOCK);
621:       assertEquals(48, Node.DIRECTIVES);
622:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
623:       assertEquals(57, Node.REFLECTED_OBJECT);
624:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
625:       assertEquals(55, Node.INFERRED_FUNCTION);
626:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
627:       assertEquals(52, Node.LENGTH);
628:       assertEquals(8, Node.FLAG_NO_THROWS);
629:       assertEquals(30, Node.VAR_ARGS_NAME);
630:       assertEquals(15, Node.NO_SIDE_EFFECTS);
631:       assertEquals(54, Node.SLASH_V);
632:       assertEquals(43, Node.IS_CONSTANT_NAME);
633:       assertEquals(57, Node.LAST_PROP);
634:       assertEquals(40, Node.ORIGINALNAME_PROP);
635:       assertEquals(2, Node.POST_FLAG);
636:       assertEquals(29, Node.JSDOC_INFO_PROP);
637:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
638:       assertEquals(47, Node.IS_DISPATCHER);
639:       assertEquals(37, Node.OPT_ARG_NAME);
640:       assertEquals(56, Node.CHANGE_TIME);
641:       assertEquals(32, Node.INCRDECR_PROP);
642:       assertEquals(46, Node.IS_NAMESPACE);
643:       assertEquals(51, Node.STATIC_SOURCE_FILE);
644:       assertEquals(53, Node.INPUT_ID);
645:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
646:       assertEquals(49, Node.DIRECT_EVAL);
647:       assertEquals(36, Node.QUOTED_PROP);
648:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
649:       assertEquals(1, Node.DECR_FLAG);
650:       assertEquals(12, Node.COLUMN_BITS);
651:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
652:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
653:       assertEquals(4095, Node.COLUMN_MASK);
654:       assertEquals(48, Node.DIRECTIVES);
655:       assertEquals(8, Node.FLAG_NO_THROWS);
656:       assertEquals(4095, Node.COLUMN_MASK);
657:       assertEquals(55, Node.INFERRED_FUNCTION);
658:       assertEquals(39, Node.EMPTY_BLOCK);
659:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
660:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
661:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
662:       assertEquals(50, Node.FREE_CALL);
663:       assertEquals(43, Node.IS_CONSTANT_NAME);
664:       assertEquals(36, Node.QUOTED_PROP);
665:       assertEquals(57, Node.REFLECTED_OBJECT);
666:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
667:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
668:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
669:       assertEquals(1, Node.DECR_FLAG);
670:       assertEquals(12, Node.COLUMN_BITS);
671:       assertEquals(37, Node.OPT_ARG_NAME);
672:       assertEquals(2, Node.POST_FLAG);
673:       assertEquals(32, Node.INCRDECR_PROP);
674:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
675:       assertEquals(29, Node.JSDOC_INFO_PROP);
676:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
677:       assertEquals(49, Node.DIRECT_EVAL);
678:       assertEquals(56, Node.CHANGE_TIME);
679:       assertEquals(51, Node.STATIC_SOURCE_FILE);
680:       assertEquals(46, Node.IS_NAMESPACE);
681:       assertEquals(54, Node.SLASH_V);
682:       assertEquals(52, Node.LENGTH);
683:       assertEquals(15, Node.NO_SIDE_EFFECTS);
684:       assertEquals(40, Node.ORIGINALNAME_PROP);
685:       assertEquals(53, Node.INPUT_ID);
686:       assertEquals(30, Node.VAR_ARGS_NAME);
687:       assertEquals(57, Node.LAST_PROP);
688:       assertEquals(47, Node.IS_DISPATCHER);
689:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
690:       assertNotNull(node3);
691:       assertFalse(node0.equals((Object)node1));
692:       assertFalse(node0.equals((Object)node2));
693:       assertFalse(node1.equals((Object)node0));
694:       assertFalse(node1.equals((Object)node2));
695:       assertFalse(node2.equals((Object)node1));
696:       assertFalse(node2.equals((Object)node0));
697:       assertFalse(node3.equals((Object)node1));
698:       assertFalse(node3.equals((Object)node2));
699:       assertFalse(node3.equals((Object)node0));
700:       assertFalse(node0.isInc());
701:       assertFalse(node0.isSwitch());
702:       assertFalse(node0.isThrow());
703:       assertFalse(node0.isHook());
704:       assertFalse(node0.isFalse());
705:       assertFalse(node0.isNE());
706:       assertFalse(node0.isBreak());
707:       assertFalse(node0.isIf());
708:       assertEquals(242, node0.getCharno());
709:       assertFalse(node0.isDelProp());
710:       assertFalse(node0.isEmpty());
711:       assertFalse(node0.isIn());
712:       assertEquals(242, node0.getLineno());
713:       assertFalse(node0.isScript());
714:       assertFalse(node0.isDefaultCase());
715:       assertFalse(node0.hasOneChild());
716:       assertFalse(node0.isArrayLit());
717:       assertFalse(node0.isTry());
718:       assertFalse(node0.isCatch());
719:       assertFalse(node0.isFor());
720:       assertEquals(0, node0.getChildCount());
721:       assertFalse(node0.isInstanceOf());
722:       assertFalse(node0.isWith());
723:       assertFalse(node0.isRegExp());
724:       assertFalse(node0.isParamList());
725:       assertFalse(node0.isThis());
726:       assertFalse(node0.isLabelName());
727:       assertFalse(node0.isStringKey());
728:       assertFalse(node0.isCase());
729:       assertFalse(node0.isGetterDef());
730:       assertEquals(991474, node0.getSourcePosition());
731:       assertFalse(node0.isNew());
732:       assertFalse(node0.isBlock());
733:       assertFalse(node0.isAdd());
734:       assertFalse(node0.isWhile());
735:       assertFalse(node0.isDo());
736:       assertFalse(node0.isContinue());
737:       assertFalse(node0.isVar());
738:       assertEquals(39, node0.getType());
739:       assertFalse(node0.isCall());
740:       assertFalse(node0.hasMoreThanOneChild());
741:       assertFalse(node0.isLabel());
742:       assertFalse(node0.isSetterDef());
743:       assertFalse(node0.isNull());
744:       assertFalse(node0.isAssignAdd());
745:       assertFalse(node0.isName());
746:       assertFalse(node0.isOr());
747:       assertFalse(node0.isVoid());
748:       assertFalse(node0.isDebugger());
749:       assertFalse(node0.isExprResult());
750:       assertFalse(node0.isTrue());
751:       assertFalse(node0.isCast());
752:       assertFalse(node0.isGetElem());
753:       assertFalse(node0.isDec());
754:       assertFalse(node0.hasChildren());
755:       assertFalse(node0.isAssign());
756:       assertFalse(node0.isFunction());
757:       assertFalse(node0.isTypeOf());
758:       assertFalse(node0.isGetProp());
759:       assertFalse(node0.isComma());
760:       assertFalse(node0.isReturn());
761:       assertTrue(node0.isNumber());
762:       assertFalse(node0.isAnd());
763:       assertFalse(node0.isString());
764:       assertFalse(node0.isNot());
765:       assertFalse(node0.isObjectLit());
766:       assertFalse(node1.isWhile());
767:       assertFalse(node1.isDo());
768:       assertFalse(node1.isNew());
769:       assertFalse(node1.isOr());
770:       assertFalse(node1.isAdd());
771:       assertFalse(node1.isNumber());
772:       assertEquals((-1), node1.getSourcePosition());
773:       assertFalse(node1.isSetterDef());
774:       assertFalse(node1.isParamList());
775:       assertFalse(node1.isStringKey());
776:       assertEquals((-2596), node1.getType());
777:       assertFalse(node1.isAssignAdd());
778:       assertFalse(node1.isLabelName());
779:       assertEquals(0, node1.getChildCount());
780:       assertFalse(node1.isVar());
781:       assertFalse(node1.isLabel());
782:       assertFalse(node1.isContinue());
783:       assertFalse(node1.isCast());
784:       assertFalse(node1.isScript());
785:       assertFalse(node1.isTry());
786:       assertFalse(node1.hasOneChild());
787:       assertFalse(node1.isFor());
788:       assertFalse(node1.isThis());
789:       assertFalse(node1.isNE());
790:       assertFalse(node1.isIf());
791:       assertFalse(node1.isInstanceOf());
792:       assertEquals((-1), node1.getLineno());
793:       assertFalse(node1.isBlock());
794:       assertFalse(node1.isHook());
795:       assertFalse(node1.isCatch());
796:       assertFalse(node1.isRegExp());
797:       assertFalse(node1.hasMoreThanOneChild());
798:       assertFalse(node1.isWith());
799:       assertFalse(node1.isString());
800:       assertFalse(node1.isCase());
801:       assertFalse(node1.isInc());
802:       assertFalse(node1.isSwitch());
803:       assertEquals((-1), node1.getCharno());
804:       assertFalse(node1.isIn());
805:       assertFalse(node1.isGetterDef());
806:       assertFalse(node1.isEmpty());
807:       assertFalse(node1.isThrow());
808:       assertFalse(node1.isArrayLit());
809:       assertFalse(node1.isFalse());
810:       assertFalse(node1.isFunction());
811:       assertFalse(node1.isVoid());
812:       assertFalse(node1.isAnd());
813:       assertFalse(node1.isTrue());
814:       assertFalse(node1.isDefaultCase());
815:       assertFalse(node1.isGetProp());
816:       assertFalse(node1.isDebugger());
817:       assertFalse(node1.isObjectLit());
818:       assertFalse(node1.isNot());
819:       assertFalse(node1.isBreak());
820:       assertFalse(node1.isDelProp());
821:       assertFalse(node1.hasChildren());
822:       assertFalse(node1.isDec());
823:       assertFalse(node1.isAssign());
824:       assertFalse(node1.isNull());
825:       assertFalse(node1.isGetElem());
826:       assertFalse(node1.isName());
827:       assertFalse(node1.isReturn());
828:       assertFalse(node1.isExprResult());
829:       assertFalse(node1.isCall());
830:       assertFalse(node1.isComma());
831:       assertFalse(node1.isTypeOf());
832:       assertFalse(node2.isCatch());
833:       assertFalse(node2.isDefaultCase());
834:       assertFalse(node2.isDebugger());
835:       assertFalse(node2.isParamList());
836:       assertFalse(node2.isSetterDef());
837:       assertFalse(node2.isTrue());
838:       assertFalse(node2.isNull());
839:       assertFalse(node2.isStringKey());
840:       assertFalse(node2.isEmpty());
841:       assertFalse(node2.isVar());
842:       assertFalse(node2.isArrayLit());
843:       assertFalse(node2.isFunction());
844:       assertFalse(node2.isCase());
845:       assertFalse(node2.isSwitch());
846:       assertFalse(node2.isNE());
847:       assertFalse(node2.isInc());
848:       assertFalse(node2.isIn());
849:       assertFalse(node2.isGetterDef());
850:       assertFalse(node2.isNumber());
851:       assertFalse(node2.isFor());
852:       assertFalse(node2.isHook());
853:       assertFalse(node2.isIf());
854:       assertFalse(node2.hasOneChild());
855:       assertFalse(node2.isTry());
856:       assertTrue(node2.hasChildren());
857:       assertFalse(node2.isThis());
858:       assertFalse(node2.isBlock());
859:       assertEquals(107, node2.getCharno());
860:       assertFalse(node2.isInstanceOf());
861:       assertFalse(node2.isWith());
862:       assertFalse(node2.isRegExp());
863:       assertFalse(node2.isAnd());
864:       assertFalse(node2.isGetProp());
865:       assertFalse(node2.isScript());
866:       assertEquals(405, node2.getType());
867:       assertFalse(node2.isNot());
868:       assertFalse(node2.isObjectLit());
869:       assertFalse(node2.isThrow());
870:       assertFalse(node2.isCast());
871:       assertFalse(node2.isLabelName());
872:       assertEquals(2, node2.getChildCount());
873:       assertFalse(node2.isLabel());
874:       assertFalse(node2.isFalse());
875:       assertFalse(node2.isContinue());
876:       assertTrue(node2.hasMoreThanOneChild());
877:       assertFalse(node2.isWhile());
878:       assertFalse(node2.isAssignAdd());
879:       assertFalse(node2.isDo());
880:       assertFalse(node2.isNew());
881:       assertFalse(node2.isAdd());
882:       assertFalse(node2.isString());
883:       assertFalse(node2.isOr());
884:       assertFalse(node2.isGetElem());
885:       assertFalse(node2.isCall());
886:       assertFalse(node2.isBreak());
887:       assertFalse(node2.isDelProp());
888:       assertFalse(node2.isName());
889:       assertFalse(node2.isVoid());
890:       assertFalse(node2.isComma());
891:       assertEquals(4203, node2.getSourcePosition());
892:       assertFalse(node2.isExprResult());
893:       assertFalse(node2.isReturn());
894:       assertEquals(1, node2.getLineno());
895:       assertFalse(node2.isDec());
896:       assertFalse(node2.isAssign());
897:       assertFalse(node2.isTypeOf());
898:       assertFalse(node3.isRegExp());
899:       assertFalse(node3.isDefaultCase());
900:       assertFalse(node3.isFunction());
901:       assertFalse(node3.isDebugger());
902:       assertFalse(node3.isVoid());
903:       assertFalse(node3.isCatch());
904:       assertFalse(node3.isArrayLit());
905:       assertFalse(node3.isTrue());
906:       assertFalse(node3.isParamList());
907:       assertFalse(node3.isIf());
908:       assertFalse(node3.isDelProp());
909:       assertFalse(node3.isGetterDef());
910:       assertFalse(node3.isCall());
911:       assertTrue(node3.hasChildren());
912:       assertEquals(49, node3.getType());
913:       assertEquals(1, node3.getChildCount());
914:       assertFalse(node3.isTry());
915:       assertFalse(node3.isBlock());
916:       assertFalse(node3.isFor());
917:       assertTrue(node3.hasOneChild());
918:       assertFalse(node3.isContinue());
919:       assertFalse(node3.isInc());
920:       assertFalse(node3.isString());
921:       assertFalse(node3.isIn());
922:       assertEquals((-1), node3.getLineno());
923:       assertFalse(node3.isNE());
924:       assertFalse(node3.isSetterDef());
925:       assertFalse(node3.isFalse());
926:       assertFalse(node3.isCast());
927:       assertFalse(node3.isNot());
928:       assertFalse(node3.isWith());
929:       assertFalse(node3.isExprResult());
930:       assertFalse(node3.isScript());
931:       assertFalse(node3.isObjectLit());
932:       assertFalse(node3.isAnd());
933:       assertEquals((-1), node3.getSourcePosition());
934:       assertFalse(node3.isTypeOf());
935:       assertFalse(node3.isNumber());
936:       assertFalse(node3.isBreak());
937:       assertFalse(node3.isComma());
938:       assertFalse(node3.isDec());
939:       assertFalse(node3.isAssign());
940:       assertFalse(node3.isGetElem());
941:       assertFalse(node3.isGetProp());
942:       assertFalse(node3.isHook());
943:       assertFalse(node3.isInstanceOf());
944:       assertFalse(node3.hasMoreThanOneChild());
945:       assertFalse(node3.isThis());
946:       assertFalse(node3.isReturn());
947:       assertFalse(node3.isWhile());
948:       assertFalse(node3.isSwitch());
949:       assertFalse(node3.isDo());
950:       assertFalse(node3.isNew());
951:       assertFalse(node3.isAdd());
952:       assertFalse(node3.isCase());
953:       assertFalse(node3.isOr());
954:       assertFalse(node3.isStringKey());
955:       assertFalse(node3.isName());
956:       assertEquals((-1), node3.getCharno());
957:       assertFalse(node3.isNull());
958:       assertTrue(node3.isThrow());
959:       assertFalse(node3.isLabelName());
960:       assertFalse(node3.isEmpty());
961:       assertFalse(node3.isAssignAdd());
962:       assertFalse(node3.isLabel());
963:       assertFalse(node3.isVar());
964:       
965:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node3);
966:       assertEquals(32, Node.INCRDECR_PROP);
967:       assertEquals(46, Node.IS_NAMESPACE);
968:       assertEquals(51, Node.STATIC_SOURCE_FILE);
969:       assertEquals(12, Node.COLUMN_BITS);
970:       assertEquals(37, Node.OPT_ARG_NAME);
971:       assertEquals(1, Node.DECR_FLAG);
972:       assertEquals(49, Node.DIRECT_EVAL);
973:       assertEquals(30, Node.VAR_ARGS_NAME);
974:       assertEquals(47, Node.IS_DISPATCHER);
975:       assertEquals(2, Node.POST_FLAG);
976:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
977:       assertEquals(53, Node.INPUT_ID);
978:       assertEquals(57, Node.REFLECTED_OBJECT);
979:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
980:       assertEquals(57, Node.LAST_PROP);
981:       assertEquals(56, Node.CHANGE_TIME);
982:       assertEquals(29, Node.JSDOC_INFO_PROP);
983:       assertEquals(36, Node.QUOTED_PROP);
984:       assertEquals(15, Node.NO_SIDE_EFFECTS);
985:       assertEquals(39, Node.EMPTY_BLOCK);
986:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
987:       assertEquals(55, Node.INFERRED_FUNCTION);
988:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
989:       assertEquals(52, Node.LENGTH);
990:       assertEquals(8, Node.FLAG_NO_THROWS);
991:       assertEquals(48, Node.DIRECTIVES);
992:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
993:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
994:       assertEquals(40, Node.ORIGINALNAME_PROP);
995:       assertEquals(4095, Node.COLUMN_MASK);
996:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
997:       assertEquals(54, Node.SLASH_V);
998:       assertEquals(43, Node.IS_CONSTANT_NAME);
999:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1000:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1001:       assertEquals(50, Node.FREE_CALL);
1002:       assertEquals(37, Node.OPT_ARG_NAME);
1003:       assertEquals(2, Node.POST_FLAG);
1004:       assertEquals(47, Node.IS_DISPATCHER);
1005:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1006:       assertEquals(32, Node.INCRDECR_PROP);
1007:       assertEquals(46, Node.IS_NAMESPACE);
1008:       assertEquals(56, Node.CHANGE_TIME);
1009:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1010:       assertEquals(1, Node.DECR_FLAG);
1011:       assertEquals(29, Node.JSDOC_INFO_PROP);
1012:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1013:       assertEquals(54, Node.SLASH_V);
1014:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1015:       assertEquals(53, Node.INPUT_ID);
1016:       assertEquals(43, Node.IS_CONSTANT_NAME);
1017:       assertEquals(57, Node.LAST_PROP);
1018:       assertEquals(40, Node.ORIGINALNAME_PROP);
1019:       assertEquals(30, Node.VAR_ARGS_NAME);
1020:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1021:       assertEquals(8, Node.FLAG_NO_THROWS);
1022:       assertEquals(39, Node.EMPTY_BLOCK);
1023:       assertEquals(48, Node.DIRECTIVES);
1024:       assertEquals(55, Node.INFERRED_FUNCTION);
1025:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1026:       assertEquals(57, Node.REFLECTED_OBJECT);
1027:       assertEquals(52, Node.LENGTH);
1028:       assertEquals(50, Node.FREE_CALL);
1029:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1030:       assertEquals(36, Node.QUOTED_PROP);
1031:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1032:       assertEquals(49, Node.DIRECT_EVAL);
1033:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1034:       assertEquals(12, Node.COLUMN_BITS);
1035:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1036:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1037:       assertEquals(4095, Node.COLUMN_MASK);
1038:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1039:       assertEquals(50, Node.FREE_CALL);
1040:       assertEquals(39, Node.EMPTY_BLOCK);
1041:       assertEquals(48, Node.DIRECTIVES);
1042:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1043:       assertEquals(57, Node.REFLECTED_OBJECT);
1044:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1045:       assertEquals(55, Node.INFERRED_FUNCTION);
1046:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1047:       assertEquals(52, Node.LENGTH);
1048:       assertEquals(8, Node.FLAG_NO_THROWS);
1049:       assertEquals(30, Node.VAR_ARGS_NAME);
1050:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1051:       assertEquals(54, Node.SLASH_V);
1052:       assertEquals(43, Node.IS_CONSTANT_NAME);
1053:       assertEquals(57, Node.LAST_PROP);
1054:       assertEquals(40, Node.ORIGINALNAME_PROP);
1055:       assertEquals(2, Node.POST_FLAG);
1056:       assertEquals(29, Node.JSDOC_INFO_PROP);
1057:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1058:       assertEquals(47, Node.IS_DISPATCHER);
1059:       assertEquals(37, Node.OPT_ARG_NAME);
1060:       assertEquals(56, Node.CHANGE_TIME);
1061:       assertEquals(32, Node.INCRDECR_PROP);
1062:       assertEquals(46, Node.IS_NAMESPACE);
1063:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1064:       assertEquals(53, Node.INPUT_ID);
1065:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1066:       assertEquals(49, Node.DIRECT_EVAL);
1067:       assertEquals(36, Node.QUOTED_PROP);
1068:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1069:       assertEquals(1, Node.DECR_FLAG);
1070:       assertEquals(12, Node.COLUMN_BITS);
1071:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1072:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1073:       assertEquals(4095, Node.COLUMN_MASK);
1074:       assertEquals(48, Node.DIRECTIVES);
1075:       assertEquals(8, Node.FLAG_NO_THROWS);
1076:       assertEquals(4095, Node.COLUMN_MASK);
1077:       assertEquals(55, Node.INFERRED_FUNCTION);
1078:       assertEquals(39, Node.EMPTY_BLOCK);
1079:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1080:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1081:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1082:       assertEquals(50, Node.FREE_CALL);
1083:       assertEquals(43, Node.IS_CONSTANT_NAME);
1084:       assertEquals(36, Node.QUOTED_PROP);
1085:       assertEquals(57, Node.REFLECTED_OBJECT);
1086:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1087:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1088:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1089:       assertEquals(1, Node.DECR_FLAG);
1090:       assertEquals(12, Node.COLUMN_BITS);
1091:       assertEquals(37, Node.OPT_ARG_NAME);
1092:       assertEquals(2, Node.POST_FLAG);
1093:       assertEquals(32, Node.INCRDECR_PROP);
1094:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1095:       assertEquals(29, Node.JSDOC_INFO_PROP);
1096:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1097:       assertEquals(49, Node.DIRECT_EVAL);
1098:       assertEquals(56, Node.CHANGE_TIME);
1099:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1100:       assertEquals(46, Node.IS_NAMESPACE);
1101:       assertEquals(54, Node.SLASH_V);
1102:       assertEquals(52, Node.LENGTH);
1103:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1104:       assertEquals(40, Node.ORIGINALNAME_PROP);
1105:       assertEquals(53, Node.INPUT_ID);
1106:       assertEquals(30, Node.VAR_ARGS_NAME);
1107:       assertEquals(57, Node.LAST_PROP);
1108:       assertEquals(47, Node.IS_DISPATCHER);
1109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1110:       assertNotSame(node1, node3);
1111:       assertNotSame(node1, node2);
1112:       assertNotSame(node2, node1);
1113:       assertNotSame(node2, node3);
1114:       assertNotSame(node3, node1);
1115:       assertNotSame(node3, node2);
1116:       assertNotNull(node_NodeMismatch0);
1117:       assertFalse(node0.equals((Object)node3));
1118:       assertFalse(node0.equals((Object)node1));
1119:       assertFalse(node0.equals((Object)node2));
1120:       assertFalse(node1.equals((Object)node3));
1121:       assertFalse(node1.equals((Object)node0));
1122:       assertFalse(node1.equals((Object)node2));
1123:       assertFalse(node2.equals((Object)node1));
1124:       assertFalse(node2.equals((Object)node3));
1125:       assertFalse(node2.equals((Object)node0));
1126:       assertFalse(node3.equals((Object)node1));
1127:       assertFalse(node3.equals((Object)node2));
1128:       assertFalse(node3.equals((Object)node0));
1129:       assertFalse(node0.isInc());
1130:       assertFalse(node0.isSwitch());
1131:       assertFalse(node0.isThrow());
1132:       assertFalse(node0.isHook());
1133:       assertFalse(node0.isFalse());
1134:       assertFalse(node0.isNE());
1135:       assertFalse(node0.isBreak());
1136:       assertFalse(node0.isIf());
1137:       assertEquals(242, node0.getCharno());
1138:       assertFalse(node0.isDelProp());
1139:       assertFalse(node0.isEmpty());
1140:       assertFalse(node0.isIn());
1141:       assertEquals(242, node0.getLineno());
1142:       assertFalse(node0.isScript());
1143:       assertFalse(node0.isDefaultCase());
1144:       assertFalse(node0.hasOneChild());
1145:       assertFalse(node0.isArrayLit());
1146:       assertFalse(node0.isTry());
1147:       assertFalse(node0.isCatch());
1148:       assertFalse(node0.isFor());
1149:       assertEquals(0, node0.getChildCount());
1150:       assertFalse(node0.isInstanceOf());
1151:       assertFalse(node0.isWith());
1152:       assertFalse(node0.isRegExp());
1153:       assertFalse(node0.isParamList());
1154:       assertFalse(node0.isThis());
1155:       assertFalse(node0.isLabelName());
1156:       assertFalse(node0.isStringKey());
1157:       assertFalse(node0.isCase());
1158:       assertFalse(node0.isGetterDef());
1159:       assertEquals(991474, node0.getSourcePosition());
1160:       assertFalse(node0.isNew());
1161:       assertFalse(node0.isBlock());
1162:       assertFalse(node0.isAdd());
1163:       assertFalse(node0.isWhile());
1164:       assertFalse(node0.isDo());
1165:       assertFalse(node0.isContinue());
1166:       assertFalse(node0.isVar());
1167:       assertEquals(39, node0.getType());
1168:       assertFalse(node0.isCall());
1169:       assertFalse(node0.hasMoreThanOneChild());
1170:       assertFalse(node0.isLabel());
1171:       assertFalse(node0.isSetterDef());
1172:       assertFalse(node0.isNull());
1173:       assertFalse(node0.isAssignAdd());
1174:       assertFalse(node0.isName());
1175:       assertFalse(node0.isOr());
1176:       assertFalse(node0.isVoid());
1177:       assertFalse(node0.isDebugger());
1178:       assertFalse(node0.isExprResult());
1179:       assertFalse(node0.isTrue());
1180:       assertFalse(node0.isCast());
1181:       assertFalse(node0.isGetElem());
1182:       assertFalse(node0.isDec());
1183:       assertFalse(node0.hasChildren());
1184:       assertFalse(node0.isAssign());
1185:       assertFalse(node0.isFunction());
1186:       assertFalse(node0.isTypeOf());
1187:       assertFalse(node0.isGetProp());
1188:       assertFalse(node0.isComma());
1189:       assertFalse(node0.isReturn());
1190:       assertTrue(node0.isNumber());
1191:       assertFalse(node0.isAnd());
1192:       assertFalse(node0.isString());
1193:       assertFalse(node0.isNot());
1194:       assertFalse(node0.isObjectLit());
1195:       assertFalse(node1.isWhile());
1196:       assertFalse(node1.isDo());
1197:       assertFalse(node1.isNew());
1198:       assertFalse(node1.isOr());
1199:       assertFalse(node1.isAdd());
1200:       assertFalse(node1.isNumber());
1201:       assertEquals((-1), node1.getSourcePosition());
1202:       assertFalse(node1.isSetterDef());
1203:       assertFalse(node1.isParamList());
1204:       assertFalse(node1.isStringKey());
1205:       assertEquals((-2596), node1.getType());
1206:       assertFalse(node1.isAssignAdd());
1207:       assertFalse(node1.isLabelName());
1208:       assertEquals(0, node1.getChildCount());
1209:       assertFalse(node1.isVar());
1210:       assertFalse(node1.isLabel());
1211:       assertFalse(node1.isContinue());
1212:       assertFalse(node1.isCast());
1213:       assertFalse(node1.isScript());
1214:       assertFalse(node1.isTry());
1215:       assertFalse(node1.hasOneChild());
1216:       assertFalse(node1.isFor());
1217:       
1218:       boolean boolean0 = node_NodeMismatch0.equals(node0);
1219:       assertFalse(boolean0);
1220:       assertEquals(32, Node.INCRDECR_PROP);
1221:       assertEquals(46, Node.IS_NAMESPACE);
1222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1223:       assertEquals(12, Node.COLUMN_BITS);
1224:       assertEquals(37, Node.OPT_ARG_NAME);
1225:       assertEquals(1, Node.DECR_FLAG);
1226:       assertEquals(49, Node.DIRECT_EVAL);
1227:       assertEquals(30, Node.VAR_ARGS_NAME);
1228:       assertEquals(47, Node.IS_DISPATCHER);
1229:       assertEquals(2, Node.POST_FLAG);
1230:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1231:       assertEquals(53, Node.INPUT_ID);
1232:       assertEquals(57, Node.REFLECTED_OBJECT);
1233:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1234:       assertEquals(57, Node.LAST_PROP);
1235:       assertEquals(56, Node.CHANGE_TIME);
1236:       assertEquals(29, Node.JSDOC_INFO_PROP);
1237:       assertEquals(36, Node.QUOTED_PROP);
1238:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1239:       assertEquals(39, Node.EMPTY_BLOCK);
1240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1241:       assertEquals(55, Node.INFERRED_FUNCTION);
1242:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1243:       assertEquals(52, Node.LENGTH);
1244:       assertEquals(8, Node.FLAG_NO_THROWS);
1245:       assertEquals(48, Node.DIRECTIVES);
1246:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1247:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1248:       assertEquals(40, Node.ORIGINALNAME_PROP);
1249:       assertEquals(4095, Node.COLUMN_MASK);
1250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1251:       assertEquals(54, Node.SLASH_V);
1252:       assertEquals(43, Node.IS_CONSTANT_NAME);
1253:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1254:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1255:       assertEquals(50, Node.FREE_CALL);
1256:       assertEquals(37, Node.OPT_ARG_NAME);
1257:       assertEquals(2, Node.POST_FLAG);
1258:       assertEquals(47, Node.IS_DISPATCHER);
1259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1260:       assertEquals(32, Node.INCRDECR_PROP);
1261:       assertEquals(46, Node.IS_NAMESPACE);
1262:       assertEquals(56, Node.CHANGE_TIME);
1263:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1264:       assertEquals(1, Node.DECR_FLAG);
1265:       assertEquals(29, Node.JSDOC_INFO_PROP);
1266:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1267:       assertEquals(54, Node.SLASH_V);
1268:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1269:       assertEquals(53, Node.INPUT_ID);
1270:       assertEquals(43, Node.IS_CONSTANT_NAME);
1271:       assertEquals(57, Node.LAST_PROP);
1272:       assertEquals(40, Node.ORIGINALNAME_PROP);
1273:       assertEquals(30, Node.VAR_ARGS_NAME);
1274:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1275:       assertEquals(8, Node.FLAG_NO_THROWS);
1276:       assertEquals(39, Node.EMPTY_BLOCK);
1277:       assertEquals(48, Node.DIRECTIVES);
1278:       assertEquals(55, Node.INFERRED_FUNCTION);
1279:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1280:       assertEquals(57, Node.REFLECTED_OBJECT);
1281:       assertEquals(52, Node.LENGTH);
1282:       assertEquals(50, Node.FREE_CALL);
1283:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1284:       assertEquals(36, Node.QUOTED_PROP);
1285:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1286:       assertEquals(49, Node.DIRECT_EVAL);
1287:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1288:       assertEquals(12, Node.COLUMN_BITS);
1289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1290:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1291:       assertEquals(4095, Node.COLUMN_MASK);
1292:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1293:       assertEquals(50, Node.FREE_CALL);
1294:       assertEquals(39, Node.EMPTY_BLOCK);
1295:       assertEquals(48, Node.DIRECTIVES);
1296:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1297:       assertEquals(57, Node.REFLECTED_OBJECT);
1298:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1299:       assertEquals(55, Node.INFERRED_FUNCTION);
1300:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1301:       assertEquals(52, Node.LENGTH);
1302:       assertEquals(8, Node.FLAG_NO_THROWS);
1303:       assertEquals(30, Node.VAR_ARGS_NAME);
1304:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1305:       assertEquals(54, Node.SLASH_V);
1306:       assertEquals(43, Node.IS_CONSTANT_NAME);
1307:       assertEquals(57, Node.LAST_PROP);
1308:       assertEquals(40, Node.ORIGINALNAME_PROP);
1309:       assertEquals(2, Node.POST_FLAG);
1310:       assertEquals(29, Node.JSDOC_INFO_PROP);
1311:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1312:       assertEquals(47, Node.IS_DISPATCHER);
1313:       assertEquals(37, Node.OPT_ARG_NAME);
1314:       assertEquals(56, Node.CHANGE_TIME);
1315:       assertEquals(32, Node.INCRDECR_PROP);
1316:       assertEquals(46, Node.IS_NAMESPACE);
1317:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1318:       assertEquals(53, Node.INPUT_ID);
1319:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1320:       assertEquals(49, Node.DIRECT_EVAL);
1321:       assertEquals(36, Node.QUOTED_PROP);
1322:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1323:       assertEquals(1, Node.DECR_FLAG);
1324:       assertEquals(12, Node.COLUMN_BITS);
1325:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1327:       assertEquals(4095, Node.COLUMN_MASK);
1328:       assertEquals(48, Node.DIRECTIVES);
1329:       assertEquals(8, Node.FLAG_NO_THROWS);
1330:       assertEquals(4095, Node.COLUMN_MASK);
1331:       assertEquals(55, Node.INFERRED_FUNCTION);
1332:       assertEquals(39, Node.EMPTY_BLOCK);
1333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1334:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1335:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1336:       assertEquals(50, Node.FREE_CALL);
1337:       assertEquals(43, Node.IS_CONSTANT_NAME);
1338:       assertEquals(36, Node.QUOTED_PROP);
1339:       assertEquals(57, Node.REFLECTED_OBJECT);
1340:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1341:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1342:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1343:       assertEquals(1, Node.DECR_FLAG);
1344:       assertEquals(12, Node.COLUMN_BITS);
1345:       assertEquals(37, Node.OPT_ARG_NAME);
1346:       assertEquals(2, Node.POST_FLAG);
1347:       assertEquals(32, Node.INCRDECR_PROP);
1348:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1349:       assertEquals(29, Node.JSDOC_INFO_PROP);
1350:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1351:       assertEquals(49, Node.DIRECT_EVAL);
1352:       assertEquals(56, Node.CHANGE_TIME);
1353:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1354:       assertEquals(46, Node.IS_NAMESPACE);
1355:       assertEquals(54, Node.SLASH_V);
1356:       assertEquals(52, Node.LENGTH);
1357:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1358:       assertEquals(40, Node.ORIGINALNAME_PROP);
1359:       assertEquals(53, Node.INPUT_ID);
1360:       assertEquals(30, Node.VAR_ARGS_NAME);
1361:       assertEquals(57, Node.LAST_PROP);
1362:       assertEquals(47, Node.IS_DISPATCHER);
1363:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1364:       assertNotSame(node1, node3);
1365:       assertNotSame(node1, node2);
1366:       assertNotSame(node2, node1);
1367:       assertNotSame(node2, node3);
1368:       assertNotSame(node3, node1);
1369:       assertNotSame(node3, node2);
1370:       assertFalse(node0.equals((Object)node3));
1371:       assertFalse(node0.equals((Object)node1));
1372:       assertFalse(node0.equals((Object)node2));
1373:       assertFalse(node1.equals((Object)node3));
1374:       assertFalse(node1.equals((Object)node0));
1375:       assertFalse(node1.equals((Object)node2));
1376:       assertFalse(node2.equals((Object)node1));
1377:       assertFalse(node2.equals((Object)node3));
1378:       assertFalse(node2.equals((Object)node0));
1379:       assertFalse(node3.equals((Object)node1));
1380:       assertFalse(node3.equals((Object)node2));
1381:       assertFalse(node3.equals((Object)node0));
1382:       
1383:       boolean boolean1 = node0.isEquivalentTo(node3, false, true, true);
1384:       assertFalse(boolean1);
1385:       assertEquals(32, Node.INCRDECR_PROP);
1386:       assertEquals(46, Node.IS_NAMESPACE);
1387:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1388:       assertEquals(12, Node.COLUMN_BITS);
1389:       assertEquals(37, Node.OPT_ARG_NAME);
1390:       assertEquals(1, Node.DECR_FLAG);
1391:       assertEquals(49, Node.DIRECT_EVAL);
1392:       assertEquals(30, Node.VAR_ARGS_NAME);
1393:       assertEquals(47, Node.IS_DISPATCHER);
1394:       assertEquals(2, Node.POST_FLAG);
1395:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1396:       assertEquals(53, Node.INPUT_ID);
1397:       assertEquals(57, Node.REFLECTED_OBJECT);
1398:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1399:       assertEquals(57, Node.LAST_PROP);
1400:       assertEquals(56, Node.CHANGE_TIME);
1401:       assertEquals(29, Node.JSDOC_INFO_PROP);
1402:       assertEquals(36, Node.QUOTED_PROP);
1403:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1404:       assertEquals(39, Node.EMPTY_BLOCK);
1405:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1406:       assertEquals(55, Node.INFERRED_FUNCTION);
1407:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1408:       assertEquals(52, Node.LENGTH);
1409:       assertEquals(8, Node.FLAG_NO_THROWS);
1410:       assertEquals(48, Node.DIRECTIVES);
1411:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1412:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1413:       assertEquals(40, Node.ORIGINALNAME_PROP);
1414:       assertEquals(4095, Node.COLUMN_MASK);
1415:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1416:       assertEquals(54, Node.SLASH_V);
1417:       assertEquals(43, Node.IS_CONSTANT_NAME);
1418:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1420:       assertEquals(50, Node.FREE_CALL);
1421:       assertEquals(37, Node.OPT_ARG_NAME);
1422:       assertEquals(2, Node.POST_FLAG);
1423:       assertEquals(47, Node.IS_DISPATCHER);
1424:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1425:       assertEquals(32, Node.INCRDECR_PROP);
1426:       assertEquals(46, Node.IS_NAMESPACE);
1427:       assertEquals(56, Node.CHANGE_TIME);
1428:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1429:       assertEquals(1, Node.DECR_FLAG);
1430:       assertEquals(29, Node.JSDOC_INFO_PROP);
1431:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1432:       assertEquals(54, Node.SLASH_V);
1433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1434:       assertEquals(53, Node.INPUT_ID);
1435:       assertEquals(43, Node.IS_CONSTANT_NAME);
1436:       assertEquals(57, Node.LAST_PROP);
1437:       assertEquals(40, Node.ORIGINALNAME_PROP);
1438:       assertEquals(30, Node.VAR_ARGS_NAME);
1439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1440:       assertEquals(8, Node.FLAG_NO_THROWS);
1441:       assertEquals(39, Node.EMPTY_BLOCK);
1442:       assertEquals(48, Node.DIRECTIVES);
1443:       assertEquals(55, Node.INFERRED_FUNCTION);
1444:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1445:       assertEquals(57, Node.REFLECTED_OBJECT);
1446:       assertEquals(52, Node.LENGTH);
1447:       assertEquals(50, Node.FREE_CALL);
1448:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1449:       assertEquals(36, Node.QUOTED_PROP);
1450:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1451:       assertEquals(49, Node.DIRECT_EVAL);
1452:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1453:       assertEquals(12, Node.COLUMN_BITS);
1454:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1455:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1456:       assertEquals(4095, Node.COLUMN_MASK);
1457:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1458:       assertEquals(50, Node.FREE_CALL);
1459:       assertEquals(39, Node.EMPTY_BLOCK);
1460:       assertEquals(48, Node.DIRECTIVES);
1461:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1462:       assertEquals(57, Node.REFLECTED_OBJECT);
1463:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1464:       assertEquals(55, Node.INFERRED_FUNCTION);
1465:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1466:       assertEquals(52, Node.LENGTH);
1467:       assertEquals(8, Node.FLAG_NO_THROWS);
1468:       assertEquals(30, Node.VAR_ARGS_NAME);
1469:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1470:       assertEquals(54, Node.SLASH_V);
1471:       assertEquals(43, Node.IS_CONSTANT_NAME);
1472:       assertEquals(57, Node.LAST_PROP);
1473:       assertEquals(40, Node.ORIGINALNAME_PROP);
1474:       assertEquals(2, Node.POST_FLAG);
1475:       assertEquals(29, Node.JSDOC_INFO_PROP);
1476:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1477:       assertEquals(47, Node.IS_DISPATCHER);
1478:       assertEquals(37, Node.OPT_ARG_NAME);
1479:       assertEquals(56, Node.CHANGE_TIME);
1480:       assertEquals(32, Node.INCRDECR_PROP);
1481:       assertEquals(46, Node.IS_NAMESPACE);
1482:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1483:       assertEquals(53, Node.INPUT_ID);
1484:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1485:       assertEquals(49, Node.DIRECT_EVAL);
1486:       assertEquals(36, Node.QUOTED_PROP);
1487:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1488:       assertEquals(1, Node.DECR_FLAG);
1489:       assertEquals(12, Node.COLUMN_BITS);
1490:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1491:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1492:       assertEquals(4095, Node.COLUMN_MASK);
1493:       assertEquals(48, Node.DIRECTIVES);
1494:       assertEquals(8, Node.FLAG_NO_THROWS);
1495:       assertEquals(4095, Node.COLUMN_MASK);
1496:       assertEquals(55, Node.INFERRED_FUNCTION);
1497:       assertEquals(39, Node.EMPTY_BLOCK);
1498:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1499:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1500:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1501:       assertEquals(50, Node.FREE_CALL);
1502:       assertEquals(43, Node.IS_CONSTANT_NAME);
1503:       assertEquals(36, Node.QUOTED_PROP);
1504:       assertEquals(57, Node.REFLECTED_OBJECT);
1505:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1506:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1507:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1508:       assertEquals(1, Node.DECR_FLAG);
1509:       assertEquals(12, Node.COLUMN_BITS);
1510:       assertEquals(37, Node.OPT_ARG_NAME);
1511:       assertEquals(2, Node.POST_FLAG);
1512:       assertEquals(32, Node.INCRDECR_PROP);
1513:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1514:       assertEquals(29, Node.JSDOC_INFO_PROP);
1515:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1516:       assertEquals(49, Node.DIRECT_EVAL);
1517:       assertEquals(56, Node.CHANGE_TIME);
1518:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1519:       assertEquals(46, Node.IS_NAMESPACE);
1520:       assertEquals(54, Node.SLASH_V);
1521:       assertEquals(52, Node.LENGTH);
1522:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1523:       assertEquals(40, Node.ORIGINALNAME_PROP);
1524:       assertEquals(53, Node.INPUT_ID);
1525:       assertEquals(30, Node.VAR_ARGS_NAME);
1526:       assertEquals(57, Node.LAST_PROP);
1527:       assertEquals(47, Node.IS_DISPATCHER);
1528:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1529:       assertNotSame(node1, node3);
1530:       assertNotSame(node1, node2);
1531:       assertNotSame(node2, node1);
1532:       assertNotSame(node2, node3);
1533:       assertNotSame(node3, node1);
1534:       assertNotSame(node3, node2);
1535:       assertFalse(node0.equals((Object)node3));
1536:       assertFalse(node0.equals((Object)node1));
1537:       assertFalse(node0.equals((Object)node2));
1538:       assertFalse(node1.equals((Object)node3));
1539:       assertFalse(node1.equals((Object)node0));
1540:       assertFalse(node1.equals((Object)node2));
1541:       assertFalse(node2.equals((Object)node1));
1542:       assertFalse(node2.equals((Object)node3));
1543:       assertFalse(node2.equals((Object)node0));
1544:       assertFalse(node3.equals((Object)node1));
1545:       assertFalse(node3.equals((Object)node2));
1546:       assertFalse(node3.equals((Object)node0));
1547:       assertTrue(boolean1 == boolean0);
1548:       
1549:       Iterable<Node> iterable0 = node1.children();
1550:       assertFalse(iterable0.contains(node3));
1551:       assertEquals(37, Node.OPT_ARG_NAME);
1552:       assertEquals(2, Node.POST_FLAG);
1553:       assertEquals(47, Node.IS_DISPATCHER);
1554:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1555:       assertEquals(32, Node.INCRDECR_PROP);
1556:       assertEquals(46, Node.IS_NAMESPACE);
1557:       assertEquals(56, Node.CHANGE_TIME);
1558:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1559:       assertEquals(1, Node.DECR_FLAG);
1560:       assertEquals(29, Node.JSDOC_INFO_PROP);
1561:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1562:       assertEquals(54, Node.SLASH_V);
1563:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1564:       assertEquals(53, Node.INPUT_ID);
1565:       assertEquals(43, Node.IS_CONSTANT_NAME);
1566:       assertEquals(57, Node.LAST_PROP);
1567:       assertEquals(40, Node.ORIGINALNAME_PROP);
1568:       assertEquals(30, Node.VAR_ARGS_NAME);
1569:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1570:       assertEquals(8, Node.FLAG_NO_THROWS);
1571:       assertEquals(39, Node.EMPTY_BLOCK);
1572:       assertEquals(48, Node.DIRECTIVES);
1573:       assertEquals(55, Node.INFERRED_FUNCTION);
1574:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1575:       assertEquals(57, Node.REFLECTED_OBJECT);
1576:       assertEquals(52, Node.LENGTH);
1577:       assertEquals(50, Node.FREE_CALL);
1578:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1579:       assertEquals(36, Node.QUOTED_PROP);
1580:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1581:       assertEquals(49, Node.DIRECT_EVAL);
1582:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1583:       assertEquals(12, Node.COLUMN_BITS);
1584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1585:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1586:       assertEquals(4095, Node.COLUMN_MASK);
1587:       assertNotSame(node1, node3);
1588:       assertNotSame(node1, node2);
1589:       assertNotNull(iterable0);
1590:       assertFalse(node1.equals((Object)node3));
1591:       assertFalse(node1.equals((Object)node0));
1592:       assertFalse(node1.equals((Object)node2));
1593:       
1594:       boolean boolean2 = node3.isIf();
1595:       assertFalse(boolean2);
1596:       assertEquals(32, Node.INCRDECR_PROP);
1597:       assertEquals(46, Node.IS_NAMESPACE);
1598:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1599:       assertEquals(12, Node.COLUMN_BITS);
1600:       assertEquals(37, Node.OPT_ARG_NAME);
1601:       assertEquals(1, Node.DECR_FLAG);
1602:       assertEquals(49, Node.DIRECT_EVAL);
1603:       assertEquals(30, Node.VAR_ARGS_NAME);
1604:       assertEquals(47, Node.IS_DISPATCHER);
1605:       assertEquals(2, Node.POST_FLAG);
1606:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1607:       assertEquals(53, Node.INPUT_ID);
1608:       assertEquals(57, Node.REFLECTED_OBJECT);
1609:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1610:       assertEquals(57, Node.LAST_PROP);
1611:       assertEquals(56, Node.CHANGE_TIME);
1612:       assertEquals(29, Node.JSDOC_INFO_PROP);
1613:       assertEquals(36, Node.QUOTED_PROP);
1614:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1615:       assertEquals(39, Node.EMPTY_BLOCK);
1616:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1617:       assertEquals(55, Node.INFERRED_FUNCTION);
1618:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1619:       assertEquals(52, Node.LENGTH);
1620:       assertEquals(8, Node.FLAG_NO_THROWS);
1621:       assertEquals(48, Node.DIRECTIVES);
1622:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1623:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1624:       assertEquals(40, Node.ORIGINALNAME_PROP);
1625:       assertEquals(4095, Node.COLUMN_MASK);
1626:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1627:       assertEquals(54, Node.SLASH_V);
1628:       assertEquals(43, Node.IS_CONSTANT_NAME);
1629:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1630:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1631:       assertEquals(50, Node.FREE_CALL);
1632:       assertEquals(37, Node.OPT_ARG_NAME);
1633:       assertEquals(2, Node.POST_FLAG);
1634:       assertEquals(47, Node.IS_DISPATCHER);
1635:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1636:       assertEquals(32, Node.INCRDECR_PROP);
1637:       assertEquals(46, Node.IS_NAMESPACE);
1638:       assertEquals(56, Node.CHANGE_TIME);
1639:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1640:       assertEquals(1, Node.DECR_FLAG);
1641:       assertEquals(29, Node.JSDOC_INFO_PROP);
1642:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1643:       assertEquals(54, Node.SLASH_V);
1644:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1645:       assertEquals(53, Node.INPUT_ID);
1646:       assertEquals(43, Node.IS_CONSTANT_NAME);
1647:       assertEquals(57, Node.LAST_PROP);
1648:       assertEquals(40, Node.ORIGINALNAME_PROP);
1649:       assertEquals(30, Node.VAR_ARGS_NAME);
1650:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1651:       assertEquals(8, Node.FLAG_NO_THROWS);
1652:       assertEquals(39, Node.EMPTY_BLOCK);
1653:       assertEquals(48, Node.DIRECTIVES);
1654:       assertEquals(55, Node.INFERRED_FUNCTION);
1655:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1656:       assertEquals(57, Node.REFLECTED_OBJECT);
1657:       assertEquals(52, Node.LENGTH);
1658:       assertEquals(50, Node.FREE_CALL);
1659:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1660:       assertEquals(36, Node.QUOTED_PROP);
1661:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1662:       assertEquals(49, Node.DIRECT_EVAL);
1663:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1664:       assertEquals(12, Node.COLUMN_BITS);
1665:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1666:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1667:       assertEquals(4095, Node.COLUMN_MASK);
1668:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1669:       assertEquals(50, Node.FREE_CALL);
1670:       assertEquals(39, Node.EMPTY_BLOCK);
1671:       assertEquals(48, Node.DIRECTIVES);
1672:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1673:       assertEquals(57, Node.REFLECTED_OBJECT);
1674:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1675:       assertEquals(55, Node.INFERRED_FUNCTION);
1676:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1677:       assertEquals(52, Node.LENGTH);
1678:       assertEquals(8, Node.FLAG_NO_THROWS);
1679:       assertEquals(30, Node.VAR_ARGS_NAME);
1680:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1681:       assertEquals(54, Node.SLASH_V);
1682:       assertEquals(43, Node.IS_CONSTANT_NAME);
1683:       assertEquals(57, Node.LAST_PROP);
1684:       assertEquals(40, Node.ORIGINALNAME_PROP);
1685:       assertEquals(2, Node.POST_FLAG);
1686:       assertEquals(29, Node.JSDOC_INFO_PROP);
1687:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1688:       assertEquals(47, Node.IS_DISPATCHER);
1689:       assertEquals(37, Node.OPT_ARG_NAME);
1690:       assertEquals(56, Node.CHANGE_TIME);
1691:       assertEquals(32, Node.INCRDECR_PROP);
1692:       assertEquals(46, Node.IS_NAMESPACE);
1693:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1694:       assertEquals(53, Node.INPUT_ID);
1695:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1696:       assertEquals(49, Node.DIRECT_EVAL);
1697:       assertEquals(36, Node.QUOTED_PROP);
1698:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1699:       assertEquals(1, Node.DECR_FLAG);
1700:       assertEquals(12, Node.COLUMN_BITS);
1701:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1702:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1703:       assertEquals(4095, Node.COLUMN_MASK);
1704:       assertEquals(48, Node.DIRECTIVES);
1705:       assertEquals(8, Node.FLAG_NO_THROWS);
1706:       assertEquals(4095, Node.COLUMN_MASK);
1707:       assertEquals(55, Node.INFERRED_FUNCTION);
1708:       assertEquals(39, Node.EMPTY_BLOCK);
1709:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1710:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1711:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1712:       assertEquals(50, Node.FREE_CALL);
1713:       assertEquals(43, Node.IS_CONSTANT_NAME);
1714:       assertEquals(36, Node.QUOTED_PROP);
1715:       assertEquals(57, Node.REFLECTED_OBJECT);
1716:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1717:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1718:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1719:       assertEquals(1, Node.DECR_FLAG);
1720:       assertEquals(12, Node.COLUMN_BITS);
1721:       assertEquals(37, Node.OPT_ARG_NAME);
1722:       assertEquals(2, Node.POST_FLAG);
1723:       assertEquals(32, Node.INCRDECR_PROP);
1724:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1725:       assertEquals(29, Node.JSDOC_INFO_PROP);
1726:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1727:       assertEquals(49, Node.DIRECT_EVAL);
1728:       assertEquals(56, Node.CHANGE_TIME);
1729:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1730:       assertEquals(46, Node.IS_NAMESPACE);
1731:       assertEquals(54, Node.SLASH_V);
1732:       assertEquals(52, Node.LENGTH);
1733:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1734:       assertEquals(40, Node.ORIGINALNAME_PROP);
1735:       assertEquals(53, Node.INPUT_ID);
1736:       assertEquals(30, Node.VAR_ARGS_NAME);
1737:       assertEquals(57, Node.LAST_PROP);
1738:       assertEquals(47, Node.IS_DISPATCHER);
1739:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1740:       assertNotSame(node1, node3);
1741:       assertNotSame(node1, node2);
1742:       assertNotSame(node2, node1);
1743:       assertNotSame(node2, node3);
1744:       assertNotSame(node3, node1);
1745:       assertNotSame(node3, node2);
1746:       assertFalse(node0.equals((Object)node3));
1747:       assertFalse(node0.equals((Object)node1));
1748:       assertFalse(node0.equals((Object)node2));
1749:       assertFalse(node1.equals((Object)node3));
1750:       assertFalse(node1.equals((Object)node0));
1751:       assertFalse(node1.equals((Object)node2));
1752:       assertFalse(node2.equals((Object)node1));
1753:       assertFalse(node2.equals((Object)node3));
1754:       assertFalse(node2.equals((Object)node0));
1755:       assertFalse(node3.equals((Object)node1));
1756:       assertFalse(node3.equals((Object)node2));
1757:       assertFalse(node3.equals((Object)node0));
1758:       assertTrue(boolean2 == boolean0);
1759:       assertTrue(boolean2 == boolean1);
1760:       
1761:       boolean boolean3 = node2.isEquivalentTo(node0);
1762:       assertFalse(boolean3);
1763:       assertEquals(32, Node.INCRDECR_PROP);
1764:       assertEquals(46, Node.IS_NAMESPACE);
1765:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1766:       assertEquals(12, Node.COLUMN_BITS);
1767:       assertEquals(37, Node.OPT_ARG_NAME);
1768:       assertEquals(1, Node.DECR_FLAG);
1769:       assertEquals(49, Node.DIRECT_EVAL);
1770:       assertEquals(30, Node.VAR_ARGS_NAME);
1771:       assertEquals(47, Node.IS_DISPATCHER);
1772:       assertEquals(2, Node.POST_FLAG);
1773:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1774:       assertEquals(53, Node.INPUT_ID);
1775:       assertEquals(57, Node.REFLECTED_OBJECT);
1776:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1777:       assertEquals(57, Node.LAST_PROP);
1778:       assertEquals(56, Node.CHANGE_TIME);
1779:       assertEquals(29, Node.JSDOC_INFO_PROP);
1780:       assertEquals(36, Node.QUOTED_PROP);
1781:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1782:       assertEquals(39, Node.EMPTY_BLOCK);
1783:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1784:       assertEquals(55, Node.INFERRED_FUNCTION);
1785:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1786:       assertEquals(52, Node.LENGTH);
1787:       assertEquals(8, Node.FLAG_NO_THROWS);
1788:       assertEquals(48, Node.DIRECTIVES);
1789:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1790:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1791:       assertEquals(40, Node.ORIGINALNAME_PROP);
1792:       assertEquals(4095, Node.COLUMN_MASK);
1793:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1794:       assertEquals(54, Node.SLASH_V);
1795:       assertEquals(43, Node.IS_CONSTANT_NAME);
1796:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1797:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1798:       assertEquals(50, Node.FREE_CALL);
1799:       assertEquals(37, Node.OPT_ARG_NAME);
1800:       assertEquals(2, Node.POST_FLAG);
1801:       assertEquals(47, Node.IS_DISPATCHER);
1802:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1803:       assertEquals(32, Node.INCRDECR_PROP);
1804:       assertEquals(46, Node.IS_NAMESPACE);
1805:       assertEquals(56, Node.CHANGE_TIME);
1806:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1807:       assertEquals(1, Node.DECR_FLAG);
1808:       assertEquals(29, Node.JSDOC_INFO_PROP);
1809:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1810:       assertEquals(54, Node.SLASH_V);
1811:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1812:       assertEquals(53, Node.INPUT_ID);
1813:       assertEquals(43, Node.IS_CONSTANT_NAME);
1814:       assertEquals(57, Node.LAST_PROP);
1815:       assertEquals(40, Node.ORIGINALNAME_PROP);
1816:       assertEquals(30, Node.VAR_ARGS_NAME);
1817:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1818:       assertEquals(8, Node.FLAG_NO_THROWS);
1819:       assertEquals(39, Node.EMPTY_BLOCK);
1820:       assertEquals(48, Node.DIRECTIVES);
1821:       assertEquals(55, Node.INFERRED_FUNCTION);
1822:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1823:       assertEquals(57, Node.REFLECTED_OBJECT);
1824:       assertEquals(52, Node.LENGTH);
1825:       assertEquals(50, Node.FREE_CALL);
1826:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1827:       assertEquals(36, Node.QUOTED_PROP);
1828:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1829:       assertEquals(49, Node.DIRECT_EVAL);
1830:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1831:       assertEquals(12, Node.COLUMN_BITS);
1832:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1833:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1834:       assertEquals(4095, Node.COLUMN_MASK);
1835:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1836:       assertEquals(50, Node.FREE_CALL);
1837:       assertEquals(39, Node.EMPTY_BLOCK);
1838:       assertEquals(48, Node.DIRECTIVES);
1839:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1840:       assertEquals(57, Node.REFLECTED_OBJECT);
1841:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1842:       assertEquals(55, Node.INFERRED_FUNCTION);
1843:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1844:       assertEquals(52, Node.LENGTH);
1845:       assertEquals(8, Node.FLAG_NO_THROWS);
1846:       assertEquals(30, Node.VAR_ARGS_NAME);
1847:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1848:       assertEquals(54, Node.SLASH_V);
1849:       assertEquals(43, Node.IS_CONSTANT_NAME);
1850:       assertEquals(57, Node.LAST_PROP);
1851:       assertEquals(40, Node.ORIGINALNAME_PROP);
1852:       assertEquals(2, Node.POST_FLAG);
1853:       assertEquals(29, Node.JSDOC_INFO_PROP);
1854:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1855:       assertEquals(47, Node.IS_DISPATCHER);
1856:       assertEquals(37, Node.OPT_ARG_NAME);
1857:       assertEquals(56, Node.CHANGE_TIME);
1858:       assertEquals(32, Node.INCRDECR_PROP);
1859:       assertEquals(46, Node.IS_NAMESPACE);
1860:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1861:       assertEquals(53, Node.INPUT_ID);
1862:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1863:       assertEquals(49, Node.DIRECT_EVAL);
1864:       assertEquals(36, Node.QUOTED_PROP);
1865:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1866:       assertEquals(1, Node.DECR_FLAG);
1867:       assertEquals(12, Node.COLUMN_BITS);
1868:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1869:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1870:       assertEquals(4095, Node.COLUMN_MASK);
1871:       assertNotSame(node1, node3);
1872:       assertNotSame(node1, node2);
1873:       assertNotSame(node2, node1);
1874:       assertNotSame(node2, node3);
1875:       assertFalse(node0.equals((Object)node3));
1876:       assertFalse(node0.equals((Object)node1));
1877:       assertFalse(node0.equals((Object)node2));
1878:       assertFalse(node1.equals((Object)node3));
1879:       assertFalse(node1.equals((Object)node0));
1880:       assertFalse(node1.equals((Object)node2));
1881:       assertFalse(node2.equals((Object)node1));
1882:       assertFalse(node2.equals((Object)node3));
1883:       assertFalse(node2.equals((Object)node0));
1884:       assertTrue(boolean3 == boolean1);
1885:       assertTrue(boolean3 == boolean2);
1886:       assertTrue(boolean3 == boolean0);
1887:       
1888:       node2.setInputId((InputId) null);
1889:       assertEquals(32, Node.INCRDECR_PROP);
1890:       assertEquals(46, Node.IS_NAMESPACE);
1891:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1892:       assertEquals(12, Node.COLUMN_BITS);
1893:       assertEquals(37, Node.OPT_ARG_NAME);
1894:       assertEquals(1, Node.DECR_FLAG);
1895:       assertEquals(49, Node.DIRECT_EVAL);
1896:       assertEquals(30, Node.VAR_ARGS_NAME);
1897:       assertEquals(47, Node.IS_DISPATCHER);
1898:       assertEquals(2, Node.POST_FLAG);
1899:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1900:       assertEquals(53, Node.INPUT_ID);
1901:       assertEquals(57, Node.REFLECTED_OBJECT);
1902:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1903:       assertEquals(57, Node.LAST_PROP);
1904:       assertEquals(56, Node.CHANGE_TIME);
1905:       assertEquals(29, Node.JSDOC_INFO_PROP);
1906:       assertEquals(36, Node.QUOTED_PROP);
1907:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1908:       assertEquals(39, Node.EMPTY_BLOCK);
1909:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1910:       assertEquals(55, Node.INFERRED_FUNCTION);
1911:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1912:       assertEquals(52, Node.LENGTH);
1913:       assertEquals(8, Node.FLAG_NO_THROWS);
1914:       assertEquals(48, Node.DIRECTIVES);
1915:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1916:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1917:       assertEquals(40, Node.ORIGINALNAME_PROP);
1918:       assertEquals(4095, Node.COLUMN_MASK);
1919:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1920:       assertEquals(54, Node.SLASH_V);
1921:       assertEquals(43, Node.IS_CONSTANT_NAME);
1922:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1923:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1924:       assertEquals(50, Node.FREE_CALL);
1925:       assertEquals(37, Node.OPT_ARG_NAME);
1926:       assertEquals(2, Node.POST_FLAG);
1927:       assertEquals(47, Node.IS_DISPATCHER);
1928:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1929:       assertEquals(32, Node.INCRDECR_PROP);
1930:       assertEquals(46, Node.IS_NAMESPACE);
1931:       assertEquals(56, Node.CHANGE_TIME);
1932:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1933:       assertEquals(1, Node.DECR_FLAG);
1934:       assertEquals(29, Node.JSDOC_INFO_PROP);
1935:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1936:       assertEquals(54, Node.SLASH_V);
1937:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1938:       assertEquals(53, Node.INPUT_ID);
1939:       assertEquals(43, Node.IS_CONSTANT_NAME);
1940:       assertEquals(57, Node.LAST_PROP);
1941:       assertEquals(40, Node.ORIGINALNAME_PROP);
1942:       assertEquals(30, Node.VAR_ARGS_NAME);
1943:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1944:       assertEquals(8, Node.FLAG_NO_THROWS);
1945:       assertEquals(39, Node.EMPTY_BLOCK);
1946:       assertEquals(48, Node.DIRECTIVES);
1947:       assertEquals(55, Node.INFERRED_FUNCTION);
1948:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1949:       assertEquals(57, Node.REFLECTED_OBJECT);
1950:       assertEquals(52, Node.LENGTH);
1951:       assertEquals(50, Node.FREE_CALL);
1952:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1953:       assertEquals(36, Node.QUOTED_PROP);
1954:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1955:       assertEquals(49, Node.DIRECT_EVAL);
1956:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1957:       assertEquals(12, Node.COLUMN_BITS);
1958:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1959:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1960:       assertEquals(4095, Node.COLUMN_MASK);
1961:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1962:       assertEquals(50, Node.FREE_CALL);
1963:       assertEquals(39, Node.EMPTY_BLOCK);
1964:       assertEquals(48, Node.DIRECTIVES);
1965:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1966:       assertEquals(57, Node.REFLECTED_OBJECT);
1967:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1968:       assertEquals(55, Node.INFERRED_FUNCTION);
1969:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1970:       assertEquals(52, Node.LENGTH);
1971:       assertEquals(8, Node.FLAG_NO_THROWS);
1972:       assertEquals(30, Node.VAR_ARGS_NAME);
1973:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1974:       assertEquals(54, Node.SLASH_V);
1975:       assertEquals(43, Node.IS_CONSTANT_NAME);
1976:       assertEquals(57, Node.LAST_PROP);
1977:       assertEquals(40, Node.ORIGINALNAME_PROP);
1978:       assertEquals(2, Node.POST_FLAG);
1979:       assertEquals(29, Node.JSDOC_INFO_PROP);
1980:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1981:       assertEquals(47, Node.IS_DISPATCHER);
1982:       assertEquals(37, Node.OPT_ARG_NAME);
1983:       assertEquals(56, Node.CHANGE_TIME);
1984:       assertEquals(32, Node.INCRDECR_PROP);
1985:       assertEquals(46, Node.IS_NAMESPACE);
1986:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1987:       assertEquals(53, Node.INPUT_ID);
1988:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1989:       assertEquals(49, Node.DIRECT_EVAL);
1990:       assertEquals(36, Node.QUOTED_PROP);
1991:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1992:       assertEquals(1, Node.DECR_FLAG);
1993:       assertEquals(12, Node.COLUMN_BITS);
1994:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1995:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1996:       assertEquals(4095, Node.COLUMN_MASK);
1997:       assertNotSame(node1, node3);
1998:       assertNotSame(node1, node2);
1999:       assertNotSame(node2, node1);
2000:       assertNotSame(node2, node3);
2001:       assertFalse(node0.equals((Object)node3));
2002:       assertFalse(node0.equals((Object)node1));
2003:       assertFalse(node0.equals((Object)node2));
2004:       assertFalse(node1.equals((Object)node3));
2005:       assertFalse(node1.equals((Object)node0));
2006:       assertFalse(node1.equals((Object)node2));
2007:       assertFalse(node2.equals((Object)node1));
2008:       assertFalse(node2.equals((Object)node3));
2009:       assertFalse(node2.equals((Object)node0));
2010:       
2011:       node3.setType(242);
2012:       assertEquals(32, Node.INCRDECR_PROP);
2013:       assertEquals(46, Node.IS_NAMESPACE);
2014:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2015:       assertEquals(12, Node.COLUMN_BITS);
2016:       assertEquals(37, Node.OPT_ARG_NAME);
2017:       assertEquals(1, Node.DECR_FLAG);
2018:       assertEquals(49, Node.DIRECT_EVAL);
2019:       assertEquals(30, Node.VAR_ARGS_NAME);
2020:       assertEquals(47, Node.IS_DISPATCHER);
2021:       assertEquals(2, Node.POST_FLAG);
2022:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2023:       assertEquals(53, Node.INPUT_ID);
2024:       assertEquals(57, Node.REFLECTED_OBJECT);
2025:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2026:       assertEquals(57, Node.LAST_PROP);
2027:       assertEquals(56, Node.CHANGE_TIME);
2028:       assertEquals(29, Node.JSDOC_INFO_PROP);
2029:       assertEquals(36, Node.QUOTED_PROP);
2030:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2031:       assertEquals(39, Node.EMPTY_BLOCK);
2032:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2033:       assertEquals(55, Node.INFERRED_FUNCTION);
2034:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2035:       assertEquals(52, Node.LENGTH);
2036:       assertEquals(8, Node.FLAG_NO_THROWS);
2037:       assertEquals(48, Node.DIRECTIVES);
2038:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2039:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2040:       assertEquals(40, Node.ORIGINALNAME_PROP);
2041:       assertEquals(4095, Node.COLUMN_MASK);
2042:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2043:       assertEquals(54, Node.SLASH_V);
2044:       assertEquals(43, Node.IS_CONSTANT_NAME);
2045:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2046:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2047:       assertEquals(50, Node.FREE_CALL);
2048:       assertEquals(37, Node.OPT_ARG_NAME);
2049:       assertEquals(2, Node.POST_FLAG);
2050:       assertEquals(47, Node.IS_DISPATCHER);
2051:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2052:       assertEquals(32, Node.INCRDECR_PROP);
2053:       assertEquals(46, Node.IS_NAMESPACE);
2054:       assertEquals(56, Node.CHANGE_TIME);
2055:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2056:       assertEquals(1, Node.DECR_FLAG);
2057:       assertEquals(29, Node.JSDOC_INFO_PROP);
2058:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2059:       assertEquals(54, Node.SLASH_V);
2060:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2061:       assertEquals(53, Node.INPUT_ID);
2062:       assertEquals(43, Node.IS_CONSTANT_NAME);
2063:       assertEquals(57, Node.LAST_PROP);
2064:       assertEquals(40, Node.ORIGINALNAME_PROP);
2065:       assertEquals(30, Node.VAR_ARGS_NAME);
2066:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2067:       assertEquals(8, Node.FLAG_NO_THROWS);
2068:       assertEquals(39, Node.EMPTY_BLOCK);
2069:       assertEquals(48, Node.DIRECTIVES);
2070:       assertEquals(55, Node.INFERRED_FUNCTION);
2071:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2072:       assertEquals(57, Node.REFLECTED_OBJECT);
2073:       assertEquals(52, Node.LENGTH);
2074:       assertEquals(50, Node.FREE_CALL);
2075:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2076:       assertEquals(36, Node.QUOTED_PROP);
2077:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2078:       assertEquals(49, Node.DIRECT_EVAL);
2079:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2080:       assertEquals(12, Node.COLUMN_BITS);
2081:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2082:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2083:       assertEquals(4095, Node.COLUMN_MASK);
2084:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2085:       assertEquals(50, Node.FREE_CALL);
2086:       assertEquals(39, Node.EMPTY_BLOCK);
2087:       assertEquals(48, Node.DIRECTIVES);
2088:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2089:       assertEquals(57, Node.REFLECTED_OBJECT);
2090:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2091:       assertEquals(55, Node.INFERRED_FUNCTION);
2092:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2093:       assertEquals(52, Node.LENGTH);
2094:       assertEquals(8, Node.FLAG_NO_THROWS);
2095:       assertEquals(30, Node.VAR_ARGS_NAME);
2096:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2097:       assertEquals(54, Node.SLASH_V);
2098:       assertEquals(43, Node.IS_CONSTANT_NAME);
2099:       assertEquals(57, Node.LAST_PROP);
2100:       assertEquals(40, Node.ORIGINALNAME_PROP);
2101:       assertEquals(2, Node.POST_FLAG);
2102:       assertEquals(29, Node.JSDOC_INFO_PROP);
2103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2104:       assertEquals(47, Node.IS_DISPATCHER);
2105:       assertEquals(37, Node.OPT_ARG_NAME);
2106:       assertEquals(56, Node.CHANGE_TIME);
2107:       assertEquals(32, Node.INCRDECR_PROP);
2108:       assertEquals(46, Node.IS_NAMESPACE);
2109:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2110:       assertEquals(53, Node.INPUT_ID);
2111:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2112:       assertEquals(49, Node.DIRECT_EVAL);
2113:       assertEquals(36, Node.QUOTED_PROP);
2114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2115:       assertEquals(1, Node.DECR_FLAG);
2116:       assertEquals(12, Node.COLUMN_BITS);
2117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2118:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2119:       assertEquals(4095, Node.COLUMN_MASK);
2120:       assertEquals(48, Node.DIRECTIVES);
2121:       assertEquals(8, Node.FLAG_NO_THROWS);
2122:       assertEquals(4095, Node.COLUMN_MASK);
2123:       assertEquals(55, Node.INFERRED_FUNCTION);
2124:       assertEquals(39, Node.EMPTY_BLOCK);
2125:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2126:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2127:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2128:       assertEquals(50, Node.FREE_CALL);
2129:       assertEquals(43, Node.IS_CONSTANT_NAME);
2130:       assertEquals(36, Node.QUOTED_PROP);
2131:       assertEquals(57, Node.REFLECTED_OBJECT);
2132:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2133:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2134:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2135:       assertEquals(1, Node.DECR_FLAG);
2136:       assertEquals(12, Node.COLUMN_BITS);
2137:       assertEquals(37, Node.OPT_ARG_NAME);
2138:       assertEquals(2, Node.POST_FLAG);
2139:       assertEquals(32, Node.INCRDECR_PROP);
2140:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2141:       assertEquals(29, Node.JSDOC_INFO_PROP);
2142:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2143:       assertEquals(49, Node.DIRECT_EVAL);
2144:       assertEquals(56, Node.CHANGE_TIME);
2145:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2146:       assertEquals(46, Node.IS_NAMESPACE);
2147:       assertEquals(54, Node.SLASH_V);
2148:       assertEquals(52, Node.LENGTH);
2149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2150:       assertEquals(40, Node.ORIGINALNAME_PROP);
2151:       assertEquals(53, Node.INPUT_ID);
2152:       assertEquals(30, Node.VAR_ARGS_NAME);
2153:       assertEquals(57, Node.LAST_PROP);
2154:       assertEquals(47, Node.IS_DISPATCHER);
2155:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2156:       assertNotSame(node1, node3);
2157:       assertNotSame(node1, node2);
2158:       assertNotSame(node2, node1);
2159:       assertNotSame(node2, node3);
2160:       assertNotSame(node3, node1);
2161:       assertNotSame(node3, node2);
2162:       assertFalse(node0.equals((Object)node3));
2163:       assertFalse(node0.equals((Object)node1));
2164:       assertFalse(node0.equals((Object)node2));
2165:       assertFalse(node1.equals((Object)node3));
2166:       assertFalse(node1.equals((Object)node0));
2167:       assertFalse(node1.equals((Object)node2));
2168:       assertFalse(node2.equals((Object)node1));
2169:       assertFalse(node2.equals((Object)node3));
2170:       assertFalse(node2.equals((Object)node0));
2171:       assertFalse(node3.equals((Object)node1));
2172:       assertFalse(node3.equals((Object)node2));
2173:       assertFalse(node3.equals((Object)node0));
2174:       
2175:       Node[] nodeArray0 = new Node[0];
2176:       Node node4 = new Node((-2127), nodeArray0);
2177:       assertEquals(57, Node.LAST_PROP);
2178:       assertEquals(30, Node.VAR_ARGS_NAME);
2179:       assertEquals(54, Node.SLASH_V);
2180:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2181:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2182:       assertEquals(12, Node.COLUMN_BITS);
2183:       assertEquals(32, Node.INCRDECR_PROP);
2184:       assertEquals(52, Node.LENGTH);
2185:       assertEquals(1, Node.DECR_FLAG);
2186:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2187:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2188:       assertEquals(2, Node.POST_FLAG);
2189:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2190:       assertEquals(50, Node.FREE_CALL);
2191:       assertEquals(47, Node.IS_DISPATCHER);
2192:       assertEquals(46, Node.IS_NAMESPACE);
2193:       assertEquals(40, Node.ORIGINALNAME_PROP);
2194:       assertEquals(43, Node.IS_CONSTANT_NAME);
2195:       assertEquals(36, Node.QUOTED_PROP);
2196:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2197:       assertEquals(55, Node.INFERRED_FUNCTION);
2198:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2199:       assertEquals(53, Node.INPUT_ID);
2200:       assertEquals(29, Node.JSDOC_INFO_PROP);
2201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2202:       assertEquals(39, Node.EMPTY_BLOCK);
2203:       assertEquals(56, Node.CHANGE_TIME);
2204:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2205:       assertEquals(8, Node.FLAG_NO_THROWS);
2206:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2208:       assertEquals(4095, Node.COLUMN_MASK);
2209:       assertEquals(57, Node.REFLECTED_OBJECT);
2210:       assertEquals(48, Node.DIRECTIVES);
2211:       assertEquals(49, Node.DIRECT_EVAL);
2212:       assertEquals(37, Node.OPT_ARG_NAME);
2213:       assertNotNull(node4);
2214:       assertEquals(0, nodeArray0.length);
2215:       assertFalse(node4.equals((Object)node2));
2216:       assertFalse(node4.equals((Object)node0));
2217:       assertFalse(node4.equals((Object)node3));
2218:       assertFalse(node4.equals((Object)node1));
2219:       
2220:       boolean boolean4 = node4.isSetterDef();
2221:       assertFalse(boolean4);
2222:       assertEquals(57, Node.LAST_PROP);
2223:       assertEquals(30, Node.VAR_ARGS_NAME);
2224:       assertEquals(54, Node.SLASH_V);
2225:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2226:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2227:       assertEquals(12, Node.COLUMN_BITS);
2228:       assertEquals(32, Node.INCRDECR_PROP);
2229:       assertEquals(52, Node.LENGTH);
2230:       assertEquals(1, Node.DECR_FLAG);
2231:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2232:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2233:       assertEquals(2, Node.POST_FLAG);
2234:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2235:       assertEquals(50, Node.FREE_CALL);
2236:       assertEquals(47, Node.IS_DISPATCHER);
2237:       assertEquals(46, Node.IS_NAMESPACE);
2238:       assertEquals(40, Node.ORIGINALNAME_PROP);
2239:       assertEquals(43, Node.IS_CONSTANT_NAME);
2240:       assertEquals(36, Node.QUOTED_PROP);
2241:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2242:       assertEquals(55, Node.INFERRED_FUNCTION);
2243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2244:       assertEquals(53, Node.INPUT_ID);
2245:       assertEquals(29, Node.JSDOC_INFO_PROP);
2246:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2247:       assertEquals(39, Node.EMPTY_BLOCK);
2248:       assertEquals(56, Node.CHANGE_TIME);
2249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2250:       assertEquals(8, Node.FLAG_NO_THROWS);
2251:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2252:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2253:       assertEquals(4095, Node.COLUMN_MASK);
2254:       assertEquals(57, Node.REFLECTED_OBJECT);
2255:       assertEquals(48, Node.DIRECTIVES);
2256:       assertEquals(49, Node.DIRECT_EVAL);
2257:       assertEquals(37, Node.OPT_ARG_NAME);
2258:       assertNotSame(node4, node2);
2259:       assertNotSame(node4, node3);
2260:       assertNotSame(node4, node1);
2261:       assertEquals(0, nodeArray0.length);
2262:       assertFalse(node4.equals((Object)node2));
2263:       assertFalse(node4.equals((Object)node0));
2264:       assertFalse(node4.equals((Object)node3));
2265:       assertFalse(node4.equals((Object)node1));
2266:       assertTrue(boolean4 == boolean3);
2267:       assertTrue(boolean4 == boolean1);
2268:       assertTrue(boolean4 == boolean2);
2269:       assertTrue(boolean4 == boolean0);
2270:       
2271:       int int0 = node4.getChildCount();
2272:       assertEquals(0, int0);
2273:       assertEquals(57, Node.LAST_PROP);
2274:       assertEquals(30, Node.VAR_ARGS_NAME);
2275:       assertEquals(54, Node.SLASH_V);
2276:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2277:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2278:       assertEquals(12, Node.COLUMN_BITS);
2279:       assertEquals(32, Node.INCRDECR_PROP);
2280:       assertEquals(52, Node.LENGTH);
2281:       assertEquals(1, Node.DECR_FLAG);
2282:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2283:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2284:       assertEquals(2, Node.POST_FLAG);
2285:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2286:       assertEquals(50, Node.FREE_CALL);
2287:       assertEquals(47, Node.IS_DISPATCHER);
2288:       assertEquals(46, Node.IS_NAMESPACE);
2289:       assertEquals(40, Node.ORIGINALNAME_PROP);
2290:       assertEquals(43, Node.IS_CONSTANT_NAME);
2291:       assertEquals(36, Node.QUOTED_PROP);
2292:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2293:       assertEquals(55, Node.INFERRED_FUNCTION);
2294:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2295:       assertEquals(53, Node.INPUT_ID);
2296:       assertEquals(29, Node.JSDOC_INFO_PROP);
2297:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2298:       assertEquals(39, Node.EMPTY_BLOCK);
2299:       assertEquals(56, Node.CHANGE_TIME);
2300:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2301:       assertEquals(8, Node.FLAG_NO_THROWS);
2302:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2304:       assertEquals(4095, Node.COLUMN_MASK);
2305:       assertEquals(57, Node.REFLECTED_OBJECT);
2306:       assertEquals(48, Node.DIRECTIVES);
2307:       assertEquals(49, Node.DIRECT_EVAL);
2308:       assertEquals(37, Node.OPT_ARG_NAME);
2309:       assertNotSame(node4, node2);
2310:       assertNotSame(node4, node3);
2311:       assertNotSame(node4, node1);
2312:       assertEquals(0, nodeArray0.length);
2313:       assertFalse(node4.equals((Object)node2));
2314:       assertFalse(node4.equals((Object)node0));
2315:       assertFalse(node4.equals((Object)node3));
2316:       assertFalse(node4.equals((Object)node1));
2317:       
2318:       Node node5 = node3.useSourceInfoFrom(node0);
2319:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2320:       assertEquals(36, Node.QUOTED_PROP);
2321:       assertEquals(4095, Node.COLUMN_MASK);
2322:       assertEquals(55, Node.INFERRED_FUNCTION);
2323:       assertEquals(53, Node.INPUT_ID);
2324:       assertEquals(39, Node.EMPTY_BLOCK);
2325:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2327:       assertEquals(29, Node.JSDOC_INFO_PROP);
2328:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2329:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2330:       assertEquals(52, Node.LENGTH);
2331:       assertEquals(8, Node.FLAG_NO_THROWS);
2332:       assertEquals(48, Node.DIRECTIVES);
2333:       assertEquals(37, Node.OPT_ARG_NAME);
2334:       assertEquals(57, Node.REFLECTED_OBJECT);
2335:       assertEquals(56, Node.CHANGE_TIME);
2336:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2337:       assertEquals(49, Node.DIRECT_EVAL);
2338:       assertEquals(30, Node.VAR_ARGS_NAME);
2339:       assertEquals(1, Node.DECR_FLAG);
2340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2341:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2342:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2343:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2344:       assertEquals(12, Node.COLUMN_BITS);
2345:       assertEquals(32, Node.INCRDECR_PROP);
2346:       assertEquals(57, Node.LAST_PROP);
2347:       assertEquals(50, Node.FREE_CALL);
2348:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2349:       assertEquals(40, Node.ORIGINALNAME_PROP);
2350:       assertEquals(47, Node.IS_DISPATCHER);
2351:       assertEquals(2, Node.POST_FLAG);
2352:       assertEquals(46, Node.IS_NAMESPACE);
2353:       assertEquals(54, Node.SLASH_V);
2354:       assertEquals(43, Node.IS_CONSTANT_NAME);
2355:       assertEquals(32, Node.INCRDECR_PROP);
2356:       assertEquals(46, Node.IS_NAMESPACE);
2357:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2358:       assertEquals(12, Node.COLUMN_BITS);
2359:       assertEquals(37, Node.OPT_ARG_NAME);
2360:       assertEquals(1, Node.DECR_FLAG);
2361:       assertEquals(49, Node.DIRECT_EVAL);
2362:       assertEquals(30, Node.VAR_ARGS_NAME);
2363:       assertEquals(47, Node.IS_DISPATCHER);
2364:       assertEquals(2, Node.POST_FLAG);
2365:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2366:       assertEquals(53, Node.INPUT_ID);
2367:       assertEquals(57, Node.REFLECTED_OBJECT);
2368:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2369:       assertEquals(57, Node.LAST_PROP);
2370:       assertEquals(56, Node.CHANGE_TIME);
2371:       assertEquals(29, Node.JSDOC_INFO_PROP);
2372:       assertEquals(36, Node.QUOTED_PROP);
2373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2374:       assertEquals(39, Node.EMPTY_BLOCK);
2375:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2376:       assertEquals(55, Node.INFERRED_FUNCTION);
2377:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2378:       assertEquals(52, Node.LENGTH);
2379:       assertEquals(8, Node.FLAG_NO_THROWS);
2380:       assertEquals(48, Node.DIRECTIVES);
2381:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2382:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2383:       assertEquals(40, Node.ORIGINALNAME_PROP);
2384:       assertEquals(4095, Node.COLUMN_MASK);
2385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2386:       assertEquals(54, Node.SLASH_V);
2387:       assertEquals(43, Node.IS_CONSTANT_NAME);
2388:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2389:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2390:       assertEquals(50, Node.FREE_CALL);
2391:       assertEquals(37, Node.OPT_ARG_NAME);
2392:       assertEquals(2, Node.POST_FLAG);
2393:       assertEquals(47, Node.IS_DISPATCHER);
2394:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2395:       assertEquals(32, Node.INCRDECR_PROP);
2396:       assertEquals(46, Node.IS_NAMESPACE);
2397:       assertEquals(56, Node.CHANGE_TIME);
2398:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2399:       assertEquals(1, Node.DECR_FLAG);
2400:       assertEquals(29, Node.JSDOC_INFO_PROP);
2401:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2402:       assertEquals(54, Node.SLASH_V);
2403:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2404:       assertEquals(53, Node.INPUT_ID);
2405:       assertEquals(43, Node.IS_CONSTANT_NAME);
2406:       assertEquals(57, Node.LAST_PROP);
2407:       assertEquals(40, Node.ORIGINALNAME_PROP);
2408:       assertEquals(30, Node.VAR_ARGS_NAME);
2409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2410:       assertEquals(8, Node.FLAG_NO_THROWS);
2411:       assertEquals(39, Node.EMPTY_BLOCK);
2412:       assertEquals(48, Node.DIRECTIVES);
2413:       assertEquals(55, Node.INFERRED_FUNCTION);
2414:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2415:       assertEquals(57, Node.REFLECTED_OBJECT);
2416:       assertEquals(52, Node.LENGTH);
2417:       assertEquals(50, Node.FREE_CALL);
2418:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2419:       assertEquals(36, Node.QUOTED_PROP);
2420:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2421:       assertEquals(49, Node.DIRECT_EVAL);
2422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2423:       assertEquals(12, Node.COLUMN_BITS);
2424:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2425:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2426:       assertEquals(4095, Node.COLUMN_MASK);
2427:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2428:       assertEquals(50, Node.FREE_CALL);
2429:       assertEquals(39, Node.EMPTY_BLOCK);
2430:       assertEquals(48, Node.DIRECTIVES);
2431:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2432:       assertEquals(57, Node.REFLECTED_OBJECT);
2433:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2434:       assertEquals(55, Node.INFERRED_FUNCTION);
2435:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2436:       assertEquals(52, Node.LENGTH);
2437:       assertEquals(8, Node.FLAG_NO_THROWS);
2438:       assertEquals(30, Node.VAR_ARGS_NAME);
2439:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2440:       assertEquals(54, Node.SLASH_V);
2441:       assertEquals(43, Node.IS_CONSTANT_NAME);
2442:       assertEquals(57, Node.LAST_PROP);
2443:       assertEquals(40, Node.ORIGINALNAME_PROP);
2444:       assertEquals(2, Node.POST_FLAG);
2445:       assertEquals(29, Node.JSDOC_INFO_PROP);
2446:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2447:       assertEquals(47, Node.IS_DISPATCHER);
2448:       assertEquals(37, Node.OPT_ARG_NAME);
2449:       assertEquals(56, Node.CHANGE_TIME);
2450:       assertEquals(32, Node.INCRDECR_PROP);
2451:       assertEquals(46, Node.IS_NAMESPACE);
2452:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2453:       assertEquals(53, Node.INPUT_ID);
2454:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2455:       assertEquals(49, Node.DIRECT_EVAL);
2456:       assertEquals(36, Node.QUOTED_PROP);
2457:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2458:       assertEquals(1, Node.DECR_FLAG);
2459:       assertEquals(12, Node.COLUMN_BITS);
2460:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2461:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2462:       assertEquals(4095, Node.COLUMN_MASK);
2463:       assertEquals(48, Node.DIRECTIVES);
2464:       assertEquals(8, Node.FLAG_NO_THROWS);
2465:       assertEquals(4095, Node.COLUMN_MASK);
2466:       assertEquals(55, Node.INFERRED_FUNCTION);
2467:       assertEquals(39, Node.EMPTY_BLOCK);
2468:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2469:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2470:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2471:       assertEquals(50, Node.FREE_CALL);
2472:       assertEquals(43, Node.IS_CONSTANT_NAME);
2473:       assertEquals(36, Node.QUOTED_PROP);
2474:       assertEquals(57, Node.REFLECTED_OBJECT);
2475:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2476:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2477:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2478:       assertEquals(1, Node.DECR_FLAG);
2479:       assertEquals(12, Node.COLUMN_BITS);
2480:       assertEquals(37, Node.OPT_ARG_NAME);
2481:       assertEquals(2, Node.POST_FLAG);
2482:       assertEquals(32, Node.INCRDECR_PROP);
2483:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2484:       assertEquals(29, Node.JSDOC_INFO_PROP);
2485:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2486:       assertEquals(49, Node.DIRECT_EVAL);
2487:       assertEquals(56, Node.CHANGE_TIME);
2488:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2489:       assertEquals(46, Node.IS_NAMESPACE);
2490:       assertEquals(54, Node.SLASH_V);
2491:       assertEquals(52, Node.LENGTH);
2492:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2493:       assertEquals(40, Node.ORIGINALNAME_PROP);
2494:       assertEquals(53, Node.INPUT_ID);
2495:       assertEquals(30, Node.VAR_ARGS_NAME);
2496:       assertEquals(57, Node.LAST_PROP);
2497:       assertEquals(47, Node.IS_DISPATCHER);
2498:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2499:       assertNotSame(node5, node1);
2500:       assertNotSame(node5, node2);
2501:       assertNotSame(node5, node4);
2502:       assertSame(node5, node3);
2503:       assertNotSame(node1, node4);
2504:       assertNotSame(node1, node3);
2505:       assertNotSame(node1, node2);
2506:       assertNotSame(node1, node5);
2507:       assertNotSame(node2, node5);
2508:       assertNotSame(node2, node1);
2509:       assertNotSame(node2, node3);
2510:       assertNotSame(node2, node4);
2511:       assertNotSame(node3, node4);
2512:       assertSame(node3, node5);
2513:       assertNotSame(node3, node1);
2514:       assertNotSame(node3, node2);
2515:       assertNotNull(node5);
2516:       assertFalse(node5.equals((Object)node1));
2517:       assertFalse(node5.equals((Object)node2));
2518:       assertFalse(node5.equals((Object)node4));
2519:       assertFalse(node5.equals((Object)node0));
2520:       assertFalse(node0.equals((Object)node3));
2521:       assertFalse(node0.equals((Object)node1));
2522:       assertFalse(node0.equals((Object)node2));
2523:       assertFalse(node0.equals((Object)node4));
2524:       assertFalse(node1.equals((Object)node4));
2525:       assertFalse(node1.equals((Object)node3));
2526:       assertFalse(node1.equals((Object)node0));
2527:       assertFalse(node1.equals((Object)node2));
2528:       assertFalse(node2.equals((Object)node1));
2529:       assertFalse(node2.equals((Object)node3));
2530:       assertFalse(node2.equals((Object)node0));
2531:       assertFalse(node2.equals((Object)node4));
2532:       assertFalse(node3.equals((Object)node4));
2533:       assertFalse(node3.equals((Object)node1));
2534:       assertFalse(node3.equals((Object)node2));
2535:       assertFalse(node3.equals((Object)node0));
2536:   }
2537: }
RegularFileObject[/tmp/EvoSuite_200_1628157895669/com/google/javascript/rhino/Node_200_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:56 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_200_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_200_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_200_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:56.286 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(2743.39422263819, 242, 242);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node0);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertEquals(242, node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertEquals(242, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertEquals(991474, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());

Node node1 = new Node((-2596), 32, (-4612));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals((-2596), node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());

Node node2 = new Node(405, node0, node0, node1, 1, 107);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertEquals(242, node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertEquals(242, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertEquals(991474, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals((-2596), node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertTrue(node2.hasChildren());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertEquals(107, node2.getCharno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertEquals(405, node2.getType());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertEquals(4203, node2.getSourcePosition());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertEquals(1, node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());

Node node3 = new Node(49, node2);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertEquals(242, node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertEquals(242, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertEquals(991474, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals((-2596), node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertTrue(node2.hasChildren());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertEquals(107, node2.getCharno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertEquals(405, node2.getType());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertEquals(4203, node2.getSourcePosition());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertEquals(1, node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isParamList());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCall());
assertTrue(node3.hasChildren());
assertEquals(49, node3.getType());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isTry());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertTrue(node3.hasOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNE());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isGetProp());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isThis());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCase());
assertFalse(node3.isOr());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNull());
assertTrue(node3.isThrow());
assertFalse(node3.isLabelName());
assertFalse(node3.isEmpty());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node3);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertEquals(242, node0.getCharno());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertEquals(242, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertEquals(991474, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isFunction());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals((-2596), node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());

boolean boolean0 = node_NodeMismatch0.equals(node0);
assertFalse(boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));

boolean boolean1 = node0.isEquivalentTo(node3, false, true, true);
assertFalse(boolean1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean1 == boolean0);

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node3));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

boolean boolean2 = node3.isIf();
assertFalse(boolean2);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

boolean boolean3 = node2.isEquivalentTo(node0);
assertFalse(boolean3);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);

node2.setInputId((InputId) null);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));

node3.setType(242);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));

Node[] nodeArray0 = new Node[0];
Node node4 = new Node((-2127), nodeArray0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(node4);
assertEquals(0, nodeArray0.length);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));

boolean boolean4 = node4.isSetterDef();
assertFalse(boolean4);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotSame(node4, node2);
assertNotSame(node4, node3);
assertNotSame(node4, node1);
assertEquals(0, nodeArray0.length);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);

int int0 = node4.getChildCount();
assertEquals(0, int0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotSame(node4, node2);
assertNotSame(node4, node3);
assertNotSame(node4, node1);
assertEquals(0, nodeArray0.length);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));

Node node5 = node3.useSourceInfoFrom(node0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotSame(node5, node1);
assertNotSame(node5, node2);
assertNotSame(node5, node4);
assertSame(node5, node3);
assertNotSame(node1, node4);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node1, node5);
assertNotSame(node2, node5);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertNotSame(node2, node4);
assertNotSame(node3, node4);
assertSame(node3, node5);
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertNotNull(node5);
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));


[MASTER] 10:04:59.081 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_215_1628157898685/com/google/javascript/rhino/Node_215_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_215_1628157898685/com/google/javascript/rhino/Node_215_tmp__ESTest_scaffolding.java]]
[MASTER] 10:04:59.081 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:59.081 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:04:59.082 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 861
[MASTER] 10:04:59.084 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_215_1628157898685/com/google/javascript/rhino/Node_215_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:04:58 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_215_tmp__ESTest extends Node_215_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(0.0);
22:       assertEquals(1, Node.DECR_FLAG);
23:       assertEquals(30, Node.VAR_ARGS_NAME);
24:       assertEquals(49, Node.DIRECT_EVAL);
25:       assertEquals(15, Node.NO_SIDE_EFFECTS);
26:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
27:       assertEquals(2, Node.POST_FLAG);
28:       assertEquals(32, Node.INCRDECR_PROP);
29:       assertEquals(57, Node.LAST_PROP);
30:       assertEquals(47, Node.IS_DISPATCHER);
31:       assertEquals(12, Node.COLUMN_BITS);
32:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
33:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
34:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(39, Node.EMPTY_BLOCK);
37:       assertEquals(53, Node.INPUT_ID);
38:       assertEquals(48, Node.DIRECTIVES);
39:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
40:       assertEquals(37, Node.OPT_ARG_NAME);
41:       assertEquals(52, Node.LENGTH);
42:       assertEquals(8, Node.FLAG_NO_THROWS);
43:       assertEquals(56, Node.CHANGE_TIME);
44:       assertEquals(36, Node.QUOTED_PROP);
45:       assertEquals(57, Node.REFLECTED_OBJECT);
46:       assertEquals(4095, Node.COLUMN_MASK);
47:       assertEquals(55, Node.INFERRED_FUNCTION);
48:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
49:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
50:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
51:       assertEquals(50, Node.FREE_CALL);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(40, Node.ORIGINALNAME_PROP);
54:       assertEquals(54, Node.SLASH_V);
55:       assertEquals(46, Node.IS_NAMESPACE);
56:       assertEquals(43, Node.IS_CONSTANT_NAME);
57:       assertEquals(51, Node.STATIC_SOURCE_FILE);
58:       assertNotNull(node0);
59:       assertFalse(node0.isNew());
60:       assertFalse(node0.isCall());
61:       assertFalse(node0.isAdd());
62:       assertFalse(node0.isDo());
63:       assertFalse(node0.isBlock());
64:       assertEquals(39, node0.getType());
65:       assertFalse(node0.isWhile());
66:       assertFalse(node0.isVar());
67:       assertFalse(node0.hasMoreThanOneChild());
68:       assertEquals((-1), node0.getLineno());
69:       assertFalse(node0.isOr());
70:       assertFalse(node0.isCatch());
71:       assertFalse(node0.isSetterDef());
72:       assertFalse(node0.isNull());
73:       assertFalse(node0.isVoid());
74:       assertFalse(node0.isName());
75:       assertFalse(node0.isTrue());
76:       assertFalse(node0.hasOneChild());
77:       assertFalse(node0.isArrayLit());
78:       assertFalse(node0.isTry());
79:       assertFalse(node0.isEmpty());
80:       assertFalse(node0.isScript());
81:       assertFalse(node0.isDefaultCase());
82:       assertFalse(node0.isRegExp());
83:       assertFalse(node0.isAssignAdd());
84:       assertFalse(node0.isLabel());
85:       assertFalse(node0.isFor());
86:       assertEquals(0, node0.getChildCount());
87:       assertFalse(node0.isCase());
88:       assertFalse(node0.isSwitch());
89:       assertFalse(node0.isLabelName());
90:       assertFalse(node0.isGetterDef());
91:       assertFalse(node0.isStringKey());
92:       assertEquals((-1), node0.getCharno());
93:       assertFalse(node0.isParamList());
94:       assertFalse(node0.isHook());
95:       assertFalse(node0.isFalse());
96:       assertFalse(node0.isInc());
97:       assertFalse(node0.isComma());
98:       assertFalse(node0.isThis());
99:       assertFalse(node0.isThrow());
100:       assertFalse(node0.isInstanceOf());
101:       assertFalse(node0.isIn());
102:       assertFalse(node0.isWith());
103:       assertFalse(node0.isBreak());
104:       assertFalse(node0.isIf());
105:       assertFalse(node0.isDelProp());
106:       assertFalse(node0.isNE());
107:       assertFalse(node0.isGetElem());
108:       assertFalse(node0.isExprResult());
109:       assertFalse(node0.isCast());
110:       assertFalse(node0.isDec());
111:       assertFalse(node0.isTypeOf());
112:       assertFalse(node0.hasChildren());
113:       assertFalse(node0.isFunction());
114:       assertFalse(node0.isAssign());
115:       assertFalse(node0.isReturn());
116:       assertTrue(node0.isNumber());
117:       assertFalse(node0.isObjectLit());
118:       assertFalse(node0.isGetProp());
119:       assertFalse(node0.isContinue());
120:       assertFalse(node0.isString());
121:       assertEquals((-1), node0.getSourcePosition());
122:       assertFalse(node0.isNot());
123:       assertFalse(node0.isAnd());
124:       assertFalse(node0.isDebugger());
125:       
126:       Node node1 = Node.newString(0, "", 4, 38);
127:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
128:       assertEquals(43, Node.IS_CONSTANT_NAME);
129:       assertEquals(53, Node.INPUT_ID);
130:       assertEquals(55, Node.INFERRED_FUNCTION);
131:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
132:       assertEquals(29, Node.JSDOC_INFO_PROP);
133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
134:       assertEquals(36, Node.QUOTED_PROP);
135:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
136:       assertEquals(37, Node.OPT_ARG_NAME);
137:       assertEquals(56, Node.CHANGE_TIME);
138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(32, Node.INCRDECR_PROP);
141:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
142:       assertEquals(4095, Node.COLUMN_MASK);
143:       assertEquals(12, Node.COLUMN_BITS);
144:       assertEquals(15, Node.NO_SIDE_EFFECTS);
145:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
146:       assertEquals(54, Node.SLASH_V);
147:       assertEquals(57, Node.LAST_PROP);
148:       assertEquals(1, Node.DECR_FLAG);
149:       assertEquals(49, Node.DIRECT_EVAL);
150:       assertEquals(57, Node.REFLECTED_OBJECT);
151:       assertEquals(46, Node.IS_NAMESPACE);
152:       assertEquals(52, Node.LENGTH);
153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
154:       assertEquals(51, Node.STATIC_SOURCE_FILE);
155:       assertEquals(50, Node.FREE_CALL);
156:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
157:       assertEquals(8, Node.FLAG_NO_THROWS);
158:       assertEquals(39, Node.EMPTY_BLOCK);
159:       assertEquals(47, Node.IS_DISPATCHER);
160:       assertEquals(40, Node.ORIGINALNAME_PROP);
161:       assertEquals(30, Node.VAR_ARGS_NAME);
162:       assertEquals(2, Node.POST_FLAG);
163:       assertNotNull(node1);
164:       assertFalse(node1.equals((Object)node0));
165:       assertFalse(node1.isDelProp());
166:       assertFalse(node1.isGetterDef());
167:       assertFalse(node1.isIf());
168:       assertFalse(node1.isEmpty());
169:       assertFalse(node1.isFor());
170:       assertFalse(node1.isNE());
171:       assertFalse(node1.isArrayLit());
172:       assertFalse(node1.isIn());
173:       assertFalse(node1.isDebugger());
174:       assertFalse(node1.isTrue());
175:       assertEquals(16422, node1.getSourcePosition());
176:       assertFalse(node1.isString());
177:       assertFalse(node1.isVoid());
178:       assertFalse(node1.isTry());
179:       assertFalse(node1.isCase());
180:       assertFalse(node1.isHook());
181:       assertEquals(0, node1.getType());
182:       assertFalse(node1.isCatch());
183:       assertFalse(node1.isRegExp());
184:       assertFalse(node1.isBreak());
185:       assertFalse(node1.isNull());
186:       assertFalse(node1.isStringKey());
187:       assertFalse(node1.isCall());
188:       assertFalse(node1.isParamList());
189:       assertFalse(node1.isName());
190:       assertFalse(node1.isAdd());
191:       assertFalse(node1.isDefaultCase());
192:       assertFalse(node1.isSwitch());
193:       assertFalse(node1.isNew());
194:       assertFalse(node1.isDo());
195:       assertFalse(node1.isAssignAdd());
196:       assertFalse(node1.isVar());
197:       assertFalse(node1.isLabel());
198:       assertEquals(0, node1.getChildCount());
199:       assertFalse(node1.hasChildren());
200:       assertFalse(node1.isNumber());
201:       assertFalse(node1.isGetElem());
202:       assertFalse(node1.hasOneChild());
203:       assertFalse(node1.isLabelName());
204:       assertFalse(node1.isOr());
205:       assertFalse(node1.isWhile());
206:       assertFalse(node1.isWith());
207:       assertFalse(node1.isScript());
208:       assertFalse(node1.isExprResult());
209:       assertFalse(node1.isReturn());
210:       assertFalse(node1.isBlock());
211:       assertFalse(node1.isInstanceOf());
212:       assertFalse(node1.isThis());
213:       assertFalse(node1.hasMoreThanOneChild());
214:       assertFalse(node1.isTypeOf());
215:       assertFalse(node1.isComma());
216:       assertFalse(node1.isDec());
217:       assertFalse(node1.isAssign());
218:       assertEquals(4, node1.getLineno());
219:       assertFalse(node1.isThrow());
220:       assertFalse(node1.isGetProp());
221:       assertFalse(node1.isSetterDef());
222:       assertFalse(node1.isObjectLit());
223:       assertFalse(node1.isNot());
224:       assertFalse(node1.isAnd());
225:       assertFalse(node1.isInc());
226:       assertEquals(38, node1.getCharno());
227:       assertFalse(node1.isCast());
228:       assertFalse(node1.isFunction());
229:       assertFalse(node1.isContinue());
230:       assertFalse(node1.isFalse());
231:       
232:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
233:       assertEquals(1, Node.DECR_FLAG);
234:       assertEquals(30, Node.VAR_ARGS_NAME);
235:       assertEquals(49, Node.DIRECT_EVAL);
236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
237:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
238:       assertEquals(2, Node.POST_FLAG);
239:       assertEquals(32, Node.INCRDECR_PROP);
240:       assertEquals(57, Node.LAST_PROP);
241:       assertEquals(47, Node.IS_DISPATCHER);
242:       assertEquals(12, Node.COLUMN_BITS);
243:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
244:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
245:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
246:       assertEquals(29, Node.JSDOC_INFO_PROP);
247:       assertEquals(39, Node.EMPTY_BLOCK);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(48, Node.DIRECTIVES);
250:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
251:       assertEquals(37, Node.OPT_ARG_NAME);
252:       assertEquals(52, Node.LENGTH);
253:       assertEquals(8, Node.FLAG_NO_THROWS);
254:       assertEquals(56, Node.CHANGE_TIME);
255:       assertEquals(36, Node.QUOTED_PROP);
256:       assertEquals(57, Node.REFLECTED_OBJECT);
257:       assertEquals(4095, Node.COLUMN_MASK);
258:       assertEquals(55, Node.INFERRED_FUNCTION);
259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
260:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
261:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
262:       assertEquals(50, Node.FREE_CALL);
263:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
264:       assertEquals(40, Node.ORIGINALNAME_PROP);
265:       assertEquals(54, Node.SLASH_V);
266:       assertEquals(46, Node.IS_NAMESPACE);
267:       assertEquals(43, Node.IS_CONSTANT_NAME);
268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
269:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
270:       assertEquals(43, Node.IS_CONSTANT_NAME);
271:       assertEquals(53, Node.INPUT_ID);
272:       assertEquals(55, Node.INFERRED_FUNCTION);
273:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
274:       assertEquals(29, Node.JSDOC_INFO_PROP);
275:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
276:       assertEquals(36, Node.QUOTED_PROP);
277:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
278:       assertEquals(37, Node.OPT_ARG_NAME);
279:       assertEquals(56, Node.CHANGE_TIME);
280:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
281:       assertEquals(48, Node.DIRECTIVES);
282:       assertEquals(32, Node.INCRDECR_PROP);
283:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
284:       assertEquals(4095, Node.COLUMN_MASK);
285:       assertEquals(12, Node.COLUMN_BITS);
286:       assertEquals(15, Node.NO_SIDE_EFFECTS);
287:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
288:       assertEquals(54, Node.SLASH_V);
289:       assertEquals(57, Node.LAST_PROP);
290:       assertEquals(1, Node.DECR_FLAG);
291:       assertEquals(49, Node.DIRECT_EVAL);
292:       assertEquals(57, Node.REFLECTED_OBJECT);
293:       assertEquals(46, Node.IS_NAMESPACE);
294:       assertEquals(52, Node.LENGTH);
295:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
296:       assertEquals(51, Node.STATIC_SOURCE_FILE);
297:       assertEquals(50, Node.FREE_CALL);
298:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
299:       assertEquals(8, Node.FLAG_NO_THROWS);
300:       assertEquals(39, Node.EMPTY_BLOCK);
301:       assertEquals(47, Node.IS_DISPATCHER);
302:       assertEquals(40, Node.ORIGINALNAME_PROP);
303:       assertEquals(30, Node.VAR_ARGS_NAME);
304:       assertEquals(2, Node.POST_FLAG);
305:       assertNotNull(node_NodeMismatch0);
306:       assertFalse(node0.equals((Object)node1));
307:       assertFalse(node1.equals((Object)node0));
308:       assertFalse(node0.isNew());
309:       assertFalse(node0.isCall());
310:       assertFalse(node0.isAdd());
311:       assertFalse(node0.isDo());
312:       assertFalse(node0.isBlock());
313:       assertEquals(39, node0.getType());
314:       assertFalse(node0.isWhile());
315:       assertFalse(node0.isVar());
316:       assertFalse(node0.hasMoreThanOneChild());
317:       assertEquals((-1), node0.getLineno());
318:       assertFalse(node0.isOr());
319:       assertFalse(node0.isCatch());
320:       assertFalse(node0.isSetterDef());
321:       assertFalse(node0.isNull());
322:       assertFalse(node0.isVoid());
323:       assertFalse(node0.isName());
324:       assertFalse(node0.isTrue());
325:       assertFalse(node0.hasOneChild());
326:       assertFalse(node0.isArrayLit());
327:       assertFalse(node0.isTry());
328:       assertFalse(node0.isEmpty());
329:       assertFalse(node0.isScript());
330:       assertFalse(node0.isDefaultCase());
331:       assertFalse(node0.isRegExp());
332:       assertFalse(node0.isAssignAdd());
333:       assertFalse(node0.isLabel());
334:       assertFalse(node0.isFor());
335:       assertEquals(0, node0.getChildCount());
336:       assertFalse(node0.isCase());
337:       assertFalse(node0.isSwitch());
338:       assertFalse(node0.isLabelName());
339:       assertFalse(node0.isGetterDef());
340:       assertFalse(node0.isStringKey());
341:       assertEquals((-1), node0.getCharno());
342:       assertFalse(node0.isParamList());
343:       assertFalse(node0.isHook());
344:       assertFalse(node0.isFalse());
345:       assertFalse(node0.isInc());
346:       assertFalse(node0.isComma());
347:       assertFalse(node0.isThis());
348:       assertFalse(node0.isThrow());
349:       assertFalse(node0.isInstanceOf());
350:       assertFalse(node0.isIn());
351:       assertFalse(node0.isWith());
352:       assertFalse(node0.isBreak());
353:       assertFalse(node0.isIf());
354:       assertFalse(node0.isDelProp());
355:       assertFalse(node0.isNE());
356:       assertFalse(node0.isGetElem());
357:       assertFalse(node0.isExprResult());
358:       assertFalse(node0.isCast());
359:       assertFalse(node0.isDec());
360:       assertFalse(node0.isTypeOf());
361:       assertFalse(node0.hasChildren());
362:       assertFalse(node0.isFunction());
363:       assertFalse(node0.isAssign());
364:       assertFalse(node0.isReturn());
365:       assertTrue(node0.isNumber());
366:       assertFalse(node0.isObjectLit());
367:       assertFalse(node0.isGetProp());
368:       assertFalse(node0.isContinue());
369:       assertFalse(node0.isString());
370:       assertEquals((-1), node0.getSourcePosition());
371:       assertFalse(node0.isNot());
372:       assertFalse(node0.isAnd());
373:       assertFalse(node0.isDebugger());
374:       assertFalse(node1.isDelProp());
375:       assertFalse(node1.isGetterDef());
376:       assertFalse(node1.isIf());
377:       assertFalse(node1.isEmpty());
378:       assertFalse(node1.isFor());
379:       assertFalse(node1.isNE());
380:       assertFalse(node1.isArrayLit());
381:       assertFalse(node1.isIn());
382:       assertFalse(node1.isDebugger());
383:       assertFalse(node1.isTrue());
384:       assertEquals(16422, node1.getSourcePosition());
385:       assertFalse(node1.isString());
386:       assertFalse(node1.isVoid());
387:       assertFalse(node1.isTry());
388:       assertFalse(node1.isCase());
389:       assertFalse(node1.isHook());
390:       assertEquals(0, node1.getType());
391:       assertFalse(node1.isCatch());
392:       assertFalse(node1.isRegExp());
393:       assertFalse(node1.isBreak());
394:       assertFalse(node1.isNull());
395:       assertFalse(node1.isStringKey());
396:       assertFalse(node1.isCall());
397:       assertFalse(node1.isParamList());
398:       assertFalse(node1.isName());
399:       assertFalse(node1.isAdd());
400:       assertFalse(node1.isDefaultCase());
401:       assertFalse(node1.isSwitch());
402:       assertFalse(node1.isNew());
403:       assertFalse(node1.isDo());
404:       assertFalse(node1.isAssignAdd());
405:       assertFalse(node1.isVar());
406:       assertFalse(node1.isLabel());
407:       assertEquals(0, node1.getChildCount());
408:       assertFalse(node1.hasChildren());
409:       assertFalse(node1.isNumber());
410:       assertFalse(node1.isGetElem());
411:       assertFalse(node1.hasOneChild());
412:       assertFalse(node1.isLabelName());
413:       assertFalse(node1.isOr());
414:       assertFalse(node1.isWhile());
415:       assertFalse(node1.isWith());
416:       assertFalse(node1.isScript());
417:       assertFalse(node1.isExprResult());
418:       assertFalse(node1.isReturn());
419:       assertFalse(node1.isBlock());
420:       assertFalse(node1.isInstanceOf());
421:       assertFalse(node1.isThis());
422:       assertFalse(node1.hasMoreThanOneChild());
423:       assertFalse(node1.isTypeOf());
424:       assertFalse(node1.isComma());
425:       assertFalse(node1.isDec());
426:       assertFalse(node1.isAssign());
427:       assertEquals(4, node1.getLineno());
428:       assertFalse(node1.isThrow());
429:       assertFalse(node1.isGetProp());
430:       assertFalse(node1.isSetterDef());
431:       assertFalse(node1.isObjectLit());
432:       assertFalse(node1.isNot());
433:       assertFalse(node1.isAnd());
434:       assertFalse(node1.isInc());
435:       assertEquals(38, node1.getCharno());
436:       assertFalse(node1.isCast());
437:       assertFalse(node1.isFunction());
438:       assertFalse(node1.isContinue());
439:       assertFalse(node1.isFalse());
440:       
441:       boolean boolean0 = node_NodeMismatch0.equals("");
442:       assertFalse(boolean0);
443:       assertEquals(1, Node.DECR_FLAG);
444:       assertEquals(30, Node.VAR_ARGS_NAME);
445:       assertEquals(49, Node.DIRECT_EVAL);
446:       assertEquals(15, Node.NO_SIDE_EFFECTS);
447:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
448:       assertEquals(2, Node.POST_FLAG);
449:       assertEquals(32, Node.INCRDECR_PROP);
450:       assertEquals(57, Node.LAST_PROP);
451:       assertEquals(47, Node.IS_DISPATCHER);
452:       assertEquals(12, Node.COLUMN_BITS);
453:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
454:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
455:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
456:       assertEquals(29, Node.JSDOC_INFO_PROP);
457:       assertEquals(39, Node.EMPTY_BLOCK);
458:       assertEquals(53, Node.INPUT_ID);
459:       assertEquals(48, Node.DIRECTIVES);
460:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
461:       assertEquals(37, Node.OPT_ARG_NAME);
462:       assertEquals(52, Node.LENGTH);
463:       assertEquals(8, Node.FLAG_NO_THROWS);
464:       assertEquals(56, Node.CHANGE_TIME);
465:       assertEquals(36, Node.QUOTED_PROP);
466:       assertEquals(57, Node.REFLECTED_OBJECT);
467:       assertEquals(4095, Node.COLUMN_MASK);
468:       assertEquals(55, Node.INFERRED_FUNCTION);
469:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
470:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
471:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
472:       assertEquals(50, Node.FREE_CALL);
473:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
474:       assertEquals(40, Node.ORIGINALNAME_PROP);
475:       assertEquals(54, Node.SLASH_V);
476:       assertEquals(46, Node.IS_NAMESPACE);
477:       assertEquals(43, Node.IS_CONSTANT_NAME);
478:       assertEquals(51, Node.STATIC_SOURCE_FILE);
479:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
480:       assertEquals(43, Node.IS_CONSTANT_NAME);
481:       assertEquals(53, Node.INPUT_ID);
482:       assertEquals(55, Node.INFERRED_FUNCTION);
483:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
484:       assertEquals(29, Node.JSDOC_INFO_PROP);
485:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
486:       assertEquals(36, Node.QUOTED_PROP);
487:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
488:       assertEquals(37, Node.OPT_ARG_NAME);
489:       assertEquals(56, Node.CHANGE_TIME);
490:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
491:       assertEquals(48, Node.DIRECTIVES);
492:       assertEquals(32, Node.INCRDECR_PROP);
493:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
494:       assertEquals(4095, Node.COLUMN_MASK);
495:       assertEquals(12, Node.COLUMN_BITS);
496:       assertEquals(15, Node.NO_SIDE_EFFECTS);
497:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
498:       assertEquals(54, Node.SLASH_V);
499:       assertEquals(57, Node.LAST_PROP);
500:       assertEquals(1, Node.DECR_FLAG);
501:       assertEquals(49, Node.DIRECT_EVAL);
502:       assertEquals(57, Node.REFLECTED_OBJECT);
503:       assertEquals(46, Node.IS_NAMESPACE);
504:       assertEquals(52, Node.LENGTH);
505:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
506:       assertEquals(51, Node.STATIC_SOURCE_FILE);
507:       assertEquals(50, Node.FREE_CALL);
508:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
509:       assertEquals(8, Node.FLAG_NO_THROWS);
510:       assertEquals(39, Node.EMPTY_BLOCK);
511:       assertEquals(47, Node.IS_DISPATCHER);
512:       assertEquals(40, Node.ORIGINALNAME_PROP);
513:       assertEquals(30, Node.VAR_ARGS_NAME);
514:       assertEquals(2, Node.POST_FLAG);
515:       assertFalse(node0.equals((Object)node1));
516:       assertFalse(node1.equals((Object)node0));
517:       assertFalse(node0.isNew());
518:       assertFalse(node0.isCall());
519:       assertFalse(node0.isAdd());
520:       assertFalse(node0.isDo());
521:       assertFalse(node0.isBlock());
522:       assertEquals(39, node0.getType());
523:       assertFalse(node0.isWhile());
524:       assertFalse(node0.isVar());
525:       assertFalse(node0.hasMoreThanOneChild());
526:       assertEquals((-1), node0.getLineno());
527:       assertFalse(node0.isOr());
528:       assertFalse(node0.isCatch());
529:       assertFalse(node0.isSetterDef());
530:       assertFalse(node0.isNull());
531:       assertFalse(node0.isVoid());
532:       assertFalse(node0.isName());
533:       assertFalse(node0.isTrue());
534:       assertFalse(node0.hasOneChild());
535:       assertFalse(node0.isArrayLit());
536:       assertFalse(node0.isTry());
537:       assertFalse(node0.isEmpty());
538:       assertFalse(node0.isScript());
539:       assertFalse(node0.isDefaultCase());
540:       assertFalse(node0.isRegExp());
541:       assertFalse(node0.isAssignAdd());
542:       assertFalse(node0.isLabel());
543:       assertFalse(node0.isFor());
544:       assertEquals(0, node0.getChildCount());
545:       assertFalse(node0.isCase());
546:       assertFalse(node0.isSwitch());
547:       assertFalse(node0.isLabelName());
548:       assertFalse(node0.isGetterDef());
549:       assertFalse(node0.isStringKey());
550:       assertEquals((-1), node0.getCharno());
551:       assertFalse(node0.isParamList());
552:       assertFalse(node0.isHook());
553:       assertFalse(node0.isFalse());
554:       assertFalse(node0.isInc());
555:       assertFalse(node0.isComma());
556:       assertFalse(node0.isThis());
557:       assertFalse(node0.isThrow());
558:       assertFalse(node0.isInstanceOf());
559:       assertFalse(node0.isIn());
560:       assertFalse(node0.isWith());
561:       assertFalse(node0.isBreak());
562:       assertFalse(node0.isIf());
563:       assertFalse(node0.isDelProp());
564:       assertFalse(node0.isNE());
565:       assertFalse(node0.isGetElem());
566:       assertFalse(node0.isExprResult());
567:       assertFalse(node0.isCast());
568:       assertFalse(node0.isDec());
569:       assertFalse(node0.isTypeOf());
570:       assertFalse(node0.hasChildren());
571:       assertFalse(node0.isFunction());
572:       assertFalse(node0.isAssign());
573:       assertFalse(node0.isReturn());
574:       assertTrue(node0.isNumber());
575:       assertFalse(node0.isObjectLit());
576:       assertFalse(node0.isGetProp());
577:       assertFalse(node0.isContinue());
578:       assertFalse(node0.isString());
579:       assertEquals((-1), node0.getSourcePosition());
580:       assertFalse(node0.isNot());
581:       assertFalse(node0.isAnd());
582:       assertFalse(node0.isDebugger());
583:       assertFalse(node1.isDelProp());
584:       assertFalse(node1.isGetterDef());
585:       assertFalse(node1.isIf());
586:       assertFalse(node1.isEmpty());
587:       assertFalse(node1.isFor());
588:       assertFalse(node1.isNE());
589:       assertFalse(node1.isArrayLit());
590:       assertFalse(node1.isIn());
591:       assertFalse(node1.isDebugger());
592:       assertFalse(node1.isTrue());
593:       assertEquals(16422, node1.getSourcePosition());
594:       assertFalse(node1.isString());
595:       assertFalse(node1.isVoid());
596:       assertFalse(node1.isTry());
597:       assertFalse(node1.isCase());
598:       assertFalse(node1.isHook());
599:       assertEquals(0, node1.getType());
600:       assertFalse(node1.isCatch());
601:       assertFalse(node1.isRegExp());
602:       assertFalse(node1.isBreak());
603:       assertFalse(node1.isNull());
604:       assertFalse(node1.isStringKey());
605:       assertFalse(node1.isCall());
606:       assertFalse(node1.isParamList());
607:       assertFalse(node1.isName());
608:       assertFalse(node1.isAdd());
609:       assertFalse(node1.isDefaultCase());
610:       assertFalse(node1.isSwitch());
611:       assertFalse(node1.isNew());
612:       assertFalse(node1.isDo());
613:       assertFalse(node1.isAssignAdd());
614:       assertFalse(node1.isVar());
615:       assertFalse(node1.isLabel());
616:       assertEquals(0, node1.getChildCount());
617:       assertFalse(node1.hasChildren());
618:       assertFalse(node1.isNumber());
619:       assertFalse(node1.isGetElem());
620:       assertFalse(node1.hasOneChild());
621:       assertFalse(node1.isLabelName());
622:       assertFalse(node1.isOr());
623:       assertFalse(node1.isWhile());
624:       assertFalse(node1.isWith());
625:       assertFalse(node1.isScript());
626:       assertFalse(node1.isExprResult());
627:       assertFalse(node1.isReturn());
628:       assertFalse(node1.isBlock());
629:       assertFalse(node1.isInstanceOf());
630:       assertFalse(node1.isThis());
631:       assertFalse(node1.hasMoreThanOneChild());
632:       assertFalse(node1.isTypeOf());
633:       assertFalse(node1.isComma());
634:       assertFalse(node1.isDec());
635:       assertFalse(node1.isAssign());
636:       assertEquals(4, node1.getLineno());
637:       assertFalse(node1.isThrow());
638:       assertFalse(node1.isGetProp());
639:       assertFalse(node1.isSetterDef());
640:       assertFalse(node1.isObjectLit());
641:       assertFalse(node1.isNot());
642:       assertFalse(node1.isAnd());
643:       assertFalse(node1.isInc());
644:       assertEquals(38, node1.getCharno());
645:       assertFalse(node1.isCast());
646:       assertFalse(node1.isFunction());
647:       assertFalse(node1.isContinue());
648:       assertFalse(node1.isFalse());
649:       
650:       boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
651:       assertFalse(boolean1);
652:       assertEquals(1, Node.DECR_FLAG);
653:       assertEquals(30, Node.VAR_ARGS_NAME);
654:       assertEquals(49, Node.DIRECT_EVAL);
655:       assertEquals(15, Node.NO_SIDE_EFFECTS);
656:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
657:       assertEquals(2, Node.POST_FLAG);
658:       assertEquals(32, Node.INCRDECR_PROP);
659:       assertEquals(57, Node.LAST_PROP);
660:       assertEquals(47, Node.IS_DISPATCHER);
661:       assertEquals(12, Node.COLUMN_BITS);
662:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
663:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
664:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
665:       assertEquals(29, Node.JSDOC_INFO_PROP);
666:       assertEquals(39, Node.EMPTY_BLOCK);
667:       assertEquals(53, Node.INPUT_ID);
668:       assertEquals(48, Node.DIRECTIVES);
669:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
670:       assertEquals(37, Node.OPT_ARG_NAME);
671:       assertEquals(52, Node.LENGTH);
672:       assertEquals(8, Node.FLAG_NO_THROWS);
673:       assertEquals(56, Node.CHANGE_TIME);
674:       assertEquals(36, Node.QUOTED_PROP);
675:       assertEquals(57, Node.REFLECTED_OBJECT);
676:       assertEquals(4095, Node.COLUMN_MASK);
677:       assertEquals(55, Node.INFERRED_FUNCTION);
678:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
679:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
680:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
681:       assertEquals(50, Node.FREE_CALL);
682:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
683:       assertEquals(40, Node.ORIGINALNAME_PROP);
684:       assertEquals(54, Node.SLASH_V);
685:       assertEquals(46, Node.IS_NAMESPACE);
686:       assertEquals(43, Node.IS_CONSTANT_NAME);
687:       assertEquals(51, Node.STATIC_SOURCE_FILE);
688:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
689:       assertEquals(43, Node.IS_CONSTANT_NAME);
690:       assertEquals(53, Node.INPUT_ID);
691:       assertEquals(55, Node.INFERRED_FUNCTION);
692:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
693:       assertEquals(29, Node.JSDOC_INFO_PROP);
694:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
695:       assertEquals(36, Node.QUOTED_PROP);
696:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
697:       assertEquals(37, Node.OPT_ARG_NAME);
698:       assertEquals(56, Node.CHANGE_TIME);
699:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
700:       assertEquals(48, Node.DIRECTIVES);
701:       assertEquals(32, Node.INCRDECR_PROP);
702:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
703:       assertEquals(4095, Node.COLUMN_MASK);
704:       assertEquals(12, Node.COLUMN_BITS);
705:       assertEquals(15, Node.NO_SIDE_EFFECTS);
706:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
707:       assertEquals(54, Node.SLASH_V);
708:       assertEquals(57, Node.LAST_PROP);
709:       assertEquals(1, Node.DECR_FLAG);
710:       assertEquals(49, Node.DIRECT_EVAL);
711:       assertEquals(57, Node.REFLECTED_OBJECT);
712:       assertEquals(46, Node.IS_NAMESPACE);
713:       assertEquals(52, Node.LENGTH);
714:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
715:       assertEquals(51, Node.STATIC_SOURCE_FILE);
716:       assertEquals(50, Node.FREE_CALL);
717:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
718:       assertEquals(8, Node.FLAG_NO_THROWS);
719:       assertEquals(39, Node.EMPTY_BLOCK);
720:       assertEquals(47, Node.IS_DISPATCHER);
721:       assertEquals(40, Node.ORIGINALNAME_PROP);
722:       assertEquals(30, Node.VAR_ARGS_NAME);
723:       assertEquals(2, Node.POST_FLAG);
724:       assertFalse(node0.equals((Object)node1));
725:       assertFalse(node1.equals((Object)node0));
726:       assertTrue(boolean1 == boolean0);
727:       assertFalse(node0.isNew());
728:       assertFalse(node0.isCall());
729:       assertFalse(node0.isAdd());
730:       assertFalse(node0.isDo());
731:       assertFalse(node0.isBlock());
732:       assertEquals(39, node0.getType());
733:       assertFalse(node0.isWhile());
734:       assertFalse(node0.isVar());
735:       assertFalse(node0.hasMoreThanOneChild());
736:       assertEquals((-1), node0.getLineno());
737:       assertFalse(node0.isOr());
738:       assertFalse(node0.isCatch());
739:       assertFalse(node0.isSetterDef());
740:       assertFalse(node0.isNull());
741:       assertFalse(node0.isVoid());
742:       assertFalse(node0.isName());
743:       assertFalse(node0.isTrue());
744:       assertFalse(node0.hasOneChild());
745:       assertFalse(node0.isArrayLit());
746:       assertFalse(node0.isTry());
747:       assertFalse(node0.isEmpty());
748:       assertFalse(node0.isScript());
749:       assertFalse(node0.isDefaultCase());
750:       assertFalse(node0.isRegExp());
751:       assertFalse(node0.isAssignAdd());
752:       assertFalse(node0.isLabel());
753:       assertFalse(node0.isFor());
754:       assertEquals(0, node0.getChildCount());
755:       assertFalse(node0.isCase());
756:       assertFalse(node0.isSwitch());
757:       assertFalse(node0.isLabelName());
758:       assertFalse(node0.isGetterDef());
759:       assertFalse(node0.isStringKey());
760:       assertEquals((-1), node0.getCharno());
761:       assertFalse(node0.isParamList());
762:       assertFalse(node0.isHook());
763:       assertFalse(node0.isFalse());
764:       assertFalse(node0.isInc());
765:       assertFalse(node0.isComma());
766:       assertFalse(node0.isThis());
767:       assertFalse(node0.isThrow());
768:       assertFalse(node0.isInstanceOf());
769:       assertFalse(node0.isIn());
770:       assertFalse(node0.isWith());
771:       assertFalse(node0.isBreak());
772:       assertFalse(node0.isIf());
773:       assertFalse(node0.isDelProp());
774:       assertFalse(node0.isNE());
775:       assertFalse(node0.isGetElem());
776:       assertFalse(node0.isExprResult());
777:       assertFalse(node0.isCast());
778:       assertFalse(node0.isDec());
779:       assertFalse(node0.isTypeOf());
780:       assertFalse(node0.hasChildren());
781:       assertFalse(node0.isFunction());
782:       assertFalse(node0.isAssign());
783:       assertFalse(node0.isReturn());
784:       assertTrue(node0.isNumber());
785:       assertFalse(node0.isObjectLit());
786:       assertFalse(node0.isGetProp());
787:       assertFalse(node0.isContinue());
788:       assertFalse(node0.isString());
789:       assertEquals((-1), node0.getSourcePosition());
790:       assertFalse(node0.isNot());
791:       assertFalse(node0.isAnd());
792:       assertFalse(node0.isDebugger());
793:       assertFalse(node1.isDelProp());
794:       assertFalse(node1.isGetterDef());
795:       assertFalse(node1.isIf());
796:       assertFalse(node1.isEmpty());
797:       assertFalse(node1.isFor());
798:       assertFalse(node1.isNE());
799:       assertFalse(node1.isArrayLit());
800:       assertFalse(node1.isIn());
801:       assertFalse(node1.isDebugger());
802:       assertFalse(node1.isTrue());
803:       assertEquals(16422, node1.getSourcePosition());
804:       assertFalse(node1.isString());
805:       assertFalse(node1.isVoid());
806:       assertFalse(node1.isTry());
807:       assertFalse(node1.isCase());
808:       assertFalse(node1.isHook());
809:       assertEquals(0, node1.getType());
810:       assertFalse(node1.isCatch());
811:       assertFalse(node1.isRegExp());
812:       assertFalse(node1.isBreak());
813:       assertFalse(node1.isNull());
814:       assertFalse(node1.isStringKey());
815:       assertFalse(node1.isCall());
816:       assertFalse(node1.isParamList());
817:       assertFalse(node1.isName());
818:       assertFalse(node1.isAdd());
819:       assertFalse(node1.isDefaultCase());
820:       assertFalse(node1.isSwitch());
821:       assertFalse(node1.isNew());
822:       assertFalse(node1.isDo());
823:       assertFalse(node1.isAssignAdd());
824:       assertFalse(node1.isVar());
825:       assertFalse(node1.isLabel());
826:       assertEquals(0, node1.getChildCount());
827:       assertFalse(node1.hasChildren());
828:       assertFalse(node1.isNumber());
829:       assertFalse(node1.isGetElem());
830:       assertFalse(node1.hasOneChild());
831:       assertFalse(node1.isLabelName());
832:       assertFalse(node1.isOr());
833:       assertFalse(node1.isWhile());
834:       assertFalse(node1.isWith());
835:       assertFalse(node1.isScript());
836:       assertFalse(node1.isExprResult());
837:       assertFalse(node1.isReturn());
838:       assertFalse(node1.isBlock());
839:       assertFalse(node1.isInstanceOf());
840:       assertFalse(node1.isThis());
841:       assertFalse(node1.hasMoreThanOneChild());
842:       assertFalse(node1.isTypeOf());
843:       assertFalse(node1.isComma());
844:       assertFalse(node1.isDec());
845:       assertFalse(node1.isAssign());
846:       assertEquals(4, node1.getLineno());
847:       assertFalse(node1.isThrow());
848:       assertFalse(node1.isGetProp());
849:       assertFalse(node1.isSetterDef());
850:       assertFalse(node1.isObjectLit());
851:       assertFalse(node1.isNot());
852:       assertFalse(node1.isAnd());
853:       assertFalse(node1.isInc());
854:       assertEquals(38, node1.getCharno());
855:       assertFalse(node1.isCast());
856:       assertFalse(node1.isFunction());
857:       assertFalse(node1.isContinue());
858:       assertFalse(node1.isFalse());
859:       
860:       Iterable<Node> iterable0 = node0.children();
861:       assertFalse(iterable0.contains(node0));
862:       assertEquals(1, Node.DECR_FLAG);
863:       assertEquals(30, Node.VAR_ARGS_NAME);
864:       assertEquals(49, Node.DIRECT_EVAL);
865:       assertEquals(15, Node.NO_SIDE_EFFECTS);
866:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
867:       assertEquals(2, Node.POST_FLAG);
868:       assertEquals(32, Node.INCRDECR_PROP);
869:       assertEquals(57, Node.LAST_PROP);
870:       assertEquals(47, Node.IS_DISPATCHER);
871:       assertEquals(12, Node.COLUMN_BITS);
872:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
873:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
874:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
875:       assertEquals(29, Node.JSDOC_INFO_PROP);
876:       assertEquals(39, Node.EMPTY_BLOCK);
877:       assertEquals(53, Node.INPUT_ID);
878:       assertEquals(48, Node.DIRECTIVES);
879:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
880:       assertEquals(37, Node.OPT_ARG_NAME);
881:       assertEquals(52, Node.LENGTH);
882:       assertEquals(8, Node.FLAG_NO_THROWS);
883:       assertEquals(56, Node.CHANGE_TIME);
884:       assertEquals(36, Node.QUOTED_PROP);
885:       assertEquals(57, Node.REFLECTED_OBJECT);
886:       assertEquals(4095, Node.COLUMN_MASK);
887:       assertEquals(55, Node.INFERRED_FUNCTION);
888:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
889:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
890:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
891:       assertEquals(50, Node.FREE_CALL);
892:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
893:       assertEquals(40, Node.ORIGINALNAME_PROP);
894:       assertEquals(54, Node.SLASH_V);
895:       assertEquals(46, Node.IS_NAMESPACE);
896:       assertEquals(43, Node.IS_CONSTANT_NAME);
897:       assertEquals(51, Node.STATIC_SOURCE_FILE);
898:       assertNotNull(iterable0);
899:       assertFalse(node0.equals((Object)node1));
900:       assertFalse(node0.isNew());
901:       assertFalse(node0.isCall());
902:       assertFalse(node0.isAdd());
903:       assertFalse(node0.isDo());
904:       assertFalse(node0.isBlock());
905:       assertEquals(39, node0.getType());
906:       assertFalse(node0.isWhile());
907:       assertFalse(node0.isVar());
908:       assertFalse(node0.hasMoreThanOneChild());
909:       assertEquals((-1), node0.getLineno());
910:       assertFalse(node0.isOr());
911:       assertFalse(node0.isCatch());
912:       assertFalse(node0.isSetterDef());
913:       assertFalse(node0.isNull());
914:       assertFalse(node0.isVoid());
915:       assertFalse(node0.isName());
916:       assertFalse(node0.isTrue());
917:       assertFalse(node0.hasOneChild());
918:       assertFalse(node0.isArrayLit());
919:       assertFalse(node0.isTry());
920:       assertFalse(node0.isEmpty());
921:       assertFalse(node0.isScript());
922:       assertFalse(node0.isDefaultCase());
923:       assertFalse(node0.isRegExp());
924:       assertFalse(node0.isAssignAdd());
925:       assertFalse(node0.isLabel());
926:       assertFalse(node0.isFor());
927:       assertEquals(0, node0.getChildCount());
928:       assertFalse(node0.isCase());
929:       assertFalse(node0.isSwitch());
930:       assertFalse(node0.isLabelName());
931:       assertFalse(node0.isGetterDef());
932:       assertFalse(node0.isStringKey());
933:       assertEquals((-1), node0.getCharno());
934:       assertFalse(node0.isParamList());
935:       assertFalse(node0.isHook());
936:       assertFalse(node0.isFalse());
937:       assertFalse(node0.isInc());
938:       assertFalse(node0.isComma());
939:       assertFalse(node0.isThis());
940:       assertFalse(node0.isThrow());
941:       assertFalse(node0.isInstanceOf());
942:       assertFalse(node0.isIn());
943:       assertFalse(node0.isWith());
944:       assertFalse(node0.isBreak());
945:       assertFalse(node0.isIf());
946:       assertFalse(node0.isDelProp());
947:       assertFalse(node0.isNE());
948:       assertFalse(node0.isGetElem());
949:       assertFalse(node0.isExprResult());
950:       assertFalse(node0.isCast());
951:       assertFalse(node0.isDec());
952:       assertFalse(node0.isTypeOf());
953:       assertFalse(node0.hasChildren());
954:       assertFalse(node0.isFunction());
955:       assertFalse(node0.isAssign());
956:       assertFalse(node0.isReturn());
957:       assertTrue(node0.isNumber());
958:       assertFalse(node0.isObjectLit());
959:       assertFalse(node0.isGetProp());
960:       assertFalse(node0.isContinue());
961:       assertFalse(node0.isString());
962:       assertEquals((-1), node0.getSourcePosition());
963:       assertFalse(node0.isNot());
964:       assertFalse(node0.isAnd());
965:       assertFalse(node0.isDebugger());
966:       
967:       boolean boolean2 = node0.isIf();
968:       assertFalse(boolean2);
969:       assertEquals(1, Node.DECR_FLAG);
970:       assertEquals(30, Node.VAR_ARGS_NAME);
971:       assertEquals(49, Node.DIRECT_EVAL);
972:       assertEquals(15, Node.NO_SIDE_EFFECTS);
973:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
974:       assertEquals(2, Node.POST_FLAG);
975:       assertEquals(32, Node.INCRDECR_PROP);
976:       assertEquals(57, Node.LAST_PROP);
977:       assertEquals(47, Node.IS_DISPATCHER);
978:       assertEquals(12, Node.COLUMN_BITS);
979:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
980:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
981:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
982:       assertEquals(29, Node.JSDOC_INFO_PROP);
983:       assertEquals(39, Node.EMPTY_BLOCK);
984:       assertEquals(53, Node.INPUT_ID);
985:       assertEquals(48, Node.DIRECTIVES);
986:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
987:       assertEquals(37, Node.OPT_ARG_NAME);
988:       assertEquals(52, Node.LENGTH);
989:       assertEquals(8, Node.FLAG_NO_THROWS);
990:       assertEquals(56, Node.CHANGE_TIME);
991:       assertEquals(36, Node.QUOTED_PROP);
992:       assertEquals(57, Node.REFLECTED_OBJECT);
993:       assertEquals(4095, Node.COLUMN_MASK);
994:       assertEquals(55, Node.INFERRED_FUNCTION);
995:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
996:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
997:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
998:       assertEquals(50, Node.FREE_CALL);
999:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1000:       assertEquals(40, Node.ORIGINALNAME_PROP);
1001:       assertEquals(54, Node.SLASH_V);
1002:       assertEquals(46, Node.IS_NAMESPACE);
1003:       assertEquals(43, Node.IS_CONSTANT_NAME);
1004:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1005:       assertFalse(node0.equals((Object)node1));
1006:       assertTrue(boolean2 == boolean0);
1007:       assertTrue(boolean2 == boolean1);
1008:       assertFalse(node0.isNew());
1009:       assertFalse(node0.isCall());
1010:       assertFalse(node0.isAdd());
1011:       assertFalse(node0.isDo());
1012:       assertFalse(node0.isBlock());
1013:       assertEquals(39, node0.getType());
1014:       assertFalse(node0.isWhile());
1015:       assertFalse(node0.isVar());
1016:       assertFalse(node0.hasMoreThanOneChild());
1017:       assertEquals((-1), node0.getLineno());
1018:       assertFalse(node0.isOr());
1019:       assertFalse(node0.isCatch());
1020:       assertFalse(node0.isSetterDef());
1021:       assertFalse(node0.isNull());
1022:       assertFalse(node0.isVoid());
1023:       assertFalse(node0.isName());
1024:       assertFalse(node0.isTrue());
1025:       assertFalse(node0.hasOneChild());
1026:       assertFalse(node0.isArrayLit());
1027:       assertFalse(node0.isTry());
1028:       assertFalse(node0.isEmpty());
1029:       assertFalse(node0.isScript());
1030:       assertFalse(node0.isDefaultCase());
1031:       assertFalse(node0.isRegExp());
1032:       assertFalse(node0.isAssignAdd());
1033:       assertFalse(node0.isLabel());
1034:       assertFalse(node0.isFor());
1035:       assertEquals(0, node0.getChildCount());
1036:       assertFalse(node0.isCase());
1037:       assertFalse(node0.isSwitch());
1038:       assertFalse(node0.isLabelName());
1039:       assertFalse(node0.isGetterDef());
1040:       assertFalse(node0.isStringKey());
1041:       assertEquals((-1), node0.getCharno());
1042:       assertFalse(node0.isParamList());
1043:       assertFalse(node0.isHook());
1044:       assertFalse(node0.isFalse());
1045:       assertFalse(node0.isInc());
1046:       assertFalse(node0.isComma());
1047:       assertFalse(node0.isThis());
1048:       assertFalse(node0.isThrow());
1049:       assertFalse(node0.isInstanceOf());
1050:       assertFalse(node0.isIn());
1051:       assertFalse(node0.isWith());
1052:       assertFalse(node0.isBreak());
1053:       assertFalse(node0.isIf());
1054:       assertFalse(node0.isDelProp());
1055:       assertFalse(node0.isNE());
1056:       assertFalse(node0.isGetElem());
1057:       assertFalse(node0.isExprResult());
1058:       assertFalse(node0.isCast());
1059:       assertFalse(node0.isDec());
1060:       assertFalse(node0.isTypeOf());
1061:       assertFalse(node0.hasChildren());
1062:       assertFalse(node0.isFunction());
1063:       assertFalse(node0.isAssign());
1064:       assertFalse(node0.isReturn());
1065:       assertTrue(node0.isNumber());
1066:       assertFalse(node0.isObjectLit());
1067:       assertFalse(node0.isGetProp());
1068:       assertFalse(node0.isContinue());
1069:       assertFalse(node0.isString());
1070:       assertEquals((-1), node0.getSourcePosition());
1071:       assertFalse(node0.isNot());
1072:       assertFalse(node0.isAnd());
1073:       assertFalse(node0.isDebugger());
1074:       
1075:       boolean boolean3 = node1.isEquivalentTo(node0);
1076:       assertFalse(boolean3);
1077:       assertEquals(1, Node.DECR_FLAG);
1078:       assertEquals(30, Node.VAR_ARGS_NAME);
1079:       assertEquals(49, Node.DIRECT_EVAL);
1080:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1081:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1082:       assertEquals(2, Node.POST_FLAG);
1083:       assertEquals(32, Node.INCRDECR_PROP);
1084:       assertEquals(57, Node.LAST_PROP);
1085:       assertEquals(47, Node.IS_DISPATCHER);
1086:       assertEquals(12, Node.COLUMN_BITS);
1087:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1088:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1089:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1090:       assertEquals(29, Node.JSDOC_INFO_PROP);
1091:       assertEquals(39, Node.EMPTY_BLOCK);
1092:       assertEquals(53, Node.INPUT_ID);
1093:       assertEquals(48, Node.DIRECTIVES);
1094:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1095:       assertEquals(37, Node.OPT_ARG_NAME);
1096:       assertEquals(52, Node.LENGTH);
1097:       assertEquals(8, Node.FLAG_NO_THROWS);
1098:       assertEquals(56, Node.CHANGE_TIME);
1099:       assertEquals(36, Node.QUOTED_PROP);
1100:       assertEquals(57, Node.REFLECTED_OBJECT);
1101:       assertEquals(4095, Node.COLUMN_MASK);
1102:       assertEquals(55, Node.INFERRED_FUNCTION);
1103:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1105:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1106:       assertEquals(50, Node.FREE_CALL);
1107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1108:       assertEquals(40, Node.ORIGINALNAME_PROP);
1109:       assertEquals(54, Node.SLASH_V);
1110:       assertEquals(46, Node.IS_NAMESPACE);
1111:       assertEquals(43, Node.IS_CONSTANT_NAME);
1112:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1114:       assertEquals(43, Node.IS_CONSTANT_NAME);
1115:       assertEquals(53, Node.INPUT_ID);
1116:       assertEquals(55, Node.INFERRED_FUNCTION);
1117:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1118:       assertEquals(29, Node.JSDOC_INFO_PROP);
1119:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1120:       assertEquals(36, Node.QUOTED_PROP);
1121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1122:       assertEquals(37, Node.OPT_ARG_NAME);
1123:       assertEquals(56, Node.CHANGE_TIME);
1124:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1125:       assertEquals(48, Node.DIRECTIVES);
1126:       assertEquals(32, Node.INCRDECR_PROP);
1127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1128:       assertEquals(4095, Node.COLUMN_MASK);
1129:       assertEquals(12, Node.COLUMN_BITS);
1130:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1131:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1132:       assertEquals(54, Node.SLASH_V);
1133:       assertEquals(57, Node.LAST_PROP);
1134:       assertEquals(1, Node.DECR_FLAG);
1135:       assertEquals(49, Node.DIRECT_EVAL);
1136:       assertEquals(57, Node.REFLECTED_OBJECT);
1137:       assertEquals(46, Node.IS_NAMESPACE);
1138:       assertEquals(52, Node.LENGTH);
1139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1141:       assertEquals(50, Node.FREE_CALL);
1142:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1143:       assertEquals(8, Node.FLAG_NO_THROWS);
1144:       assertEquals(39, Node.EMPTY_BLOCK);
1145:       assertEquals(47, Node.IS_DISPATCHER);
1146:       assertEquals(40, Node.ORIGINALNAME_PROP);
1147:       assertEquals(30, Node.VAR_ARGS_NAME);
1148:       assertEquals(2, Node.POST_FLAG);
1149:       assertFalse(node0.equals((Object)node1));
1150:       assertFalse(node1.equals((Object)node0));
1151:       assertTrue(boolean3 == boolean0);
1152:       assertTrue(boolean3 == boolean1);
1153:       assertTrue(boolean3 == boolean2);
1154:       assertFalse(node0.isNew());
1155:       assertFalse(node0.isCall());
1156:       assertFalse(node0.isAdd());
1157:       assertFalse(node0.isDo());
1158:       assertFalse(node0.isBlock());
1159:       assertEquals(39, node0.getType());
1160:       assertFalse(node0.isWhile());
1161:       assertFalse(node0.isVar());
1162:       assertFalse(node0.hasMoreThanOneChild());
1163:       assertEquals((-1), node0.getLineno());
1164:       assertFalse(node0.isOr());
1165:       assertFalse(node0.isCatch());
1166:       assertFalse(node0.isSetterDef());
1167:       assertFalse(node0.isNull());
1168:       assertFalse(node0.isVoid());
1169:       assertFalse(node0.isName());
1170:       assertFalse(node0.isTrue());
1171:       assertFalse(node0.hasOneChild());
1172:       assertFalse(node0.isArrayLit());
1173:       assertFalse(node0.isTry());
1174:       assertFalse(node0.isEmpty());
1175:       assertFalse(node0.isScript());
1176:       assertFalse(node0.isDefaultCase());
1177:       assertFalse(node0.isRegExp());
1178:       assertFalse(node0.isAssignAdd());
1179:       assertFalse(node0.isLabel());
1180:       assertFalse(node0.isFor());
1181:       assertEquals(0, node0.getChildCount());
1182:       assertFalse(node0.isCase());
1183:       assertFalse(node0.isSwitch());
1184:       assertFalse(node0.isLabelName());
1185:       assertFalse(node0.isGetterDef());
1186:       assertFalse(node0.isStringKey());
1187:       assertEquals((-1), node0.getCharno());
1188:       assertFalse(node0.isParamList());
1189:       assertFalse(node0.isHook());
1190:       assertFalse(node0.isFalse());
1191:       assertFalse(node0.isInc());
1192:       assertFalse(node0.isComma());
1193:       assertFalse(node0.isThis());
1194:       assertFalse(node0.isThrow());
1195:       assertFalse(node0.isInstanceOf());
1196:       assertFalse(node0.isIn());
1197:       assertFalse(node0.isWith());
1198:       assertFalse(node0.isBreak());
1199:       assertFalse(node0.isIf());
1200:       assertFalse(node0.isDelProp());
1201:       assertFalse(node0.isNE());
1202:       assertFalse(node0.isGetElem());
1203:       assertFalse(node0.isExprResult());
1204:       assertFalse(node0.isCast());
1205:       assertFalse(node0.isDec());
1206:       assertFalse(node0.isTypeOf());
1207:       assertFalse(node0.hasChildren());
1208:       assertFalse(node0.isFunction());
1209:       assertFalse(node0.isAssign());
1210:       assertFalse(node0.isReturn());
1211:       assertTrue(node0.isNumber());
1212:       assertFalse(node0.isObjectLit());
1213:       assertFalse(node0.isGetProp());
1214:       assertFalse(node0.isContinue());
1215:       assertFalse(node0.isString());
1216:       assertEquals((-1), node0.getSourcePosition());
1217:       assertFalse(node0.isNot());
1218:       assertFalse(node0.isAnd());
1219:       assertFalse(node0.isDebugger());
1220:       assertFalse(node1.isDelProp());
1221:       assertFalse(node1.isGetterDef());
1222:       assertFalse(node1.isIf());
1223:       assertFalse(node1.isEmpty());
1224:       assertFalse(node1.isFor());
1225:       assertFalse(node1.isNE());
1226:       assertFalse(node1.isArrayLit());
1227:       assertFalse(node1.isIn());
1228:       assertFalse(node1.isDebugger());
1229:       assertFalse(node1.isTrue());
1230:       assertEquals(16422, node1.getSourcePosition());
1231:       assertFalse(node1.isString());
1232:       assertFalse(node1.isVoid());
1233:       assertFalse(node1.isTry());
1234:       assertFalse(node1.isCase());
1235:       assertFalse(node1.isHook());
1236:       assertEquals(0, node1.getType());
1237:       assertFalse(node1.isCatch());
1238:       assertFalse(node1.isRegExp());
1239:       assertFalse(node1.isBreak());
1240:       assertFalse(node1.isNull());
1241:       assertFalse(node1.isStringKey());
1242:       assertFalse(node1.isCall());
1243:       assertFalse(node1.isParamList());
1244:       assertFalse(node1.isName());
1245:       assertFalse(node1.isAdd());
1246:       assertFalse(node1.isDefaultCase());
1247:       assertFalse(node1.isSwitch());
1248:       assertFalse(node1.isNew());
1249:       assertFalse(node1.isDo());
1250:       assertFalse(node1.isAssignAdd());
1251:       assertFalse(node1.isVar());
1252:       assertFalse(node1.isLabel());
1253:       assertEquals(0, node1.getChildCount());
1254:       assertFalse(node1.hasChildren());
1255:       assertFalse(node1.isNumber());
1256:       assertFalse(node1.isGetElem());
1257:       assertFalse(node1.hasOneChild());
1258:       assertFalse(node1.isLabelName());
1259:       assertFalse(node1.isOr());
1260:       assertFalse(node1.isWhile());
1261:       assertFalse(node1.isWith());
1262:       assertFalse(node1.isScript());
1263:       assertFalse(node1.isExprResult());
1264:       assertFalse(node1.isReturn());
1265:       assertFalse(node1.isBlock());
1266:       assertFalse(node1.isInstanceOf());
1267:       assertFalse(node1.isThis());
1268:       assertFalse(node1.hasMoreThanOneChild());
1269:       assertFalse(node1.isTypeOf());
1270:       assertFalse(node1.isComma());
1271:       assertFalse(node1.isDec());
1272:       assertFalse(node1.isAssign());
1273:       assertEquals(4, node1.getLineno());
1274:       assertFalse(node1.isThrow());
1275:       assertFalse(node1.isGetProp());
1276:       assertFalse(node1.isSetterDef());
1277:       assertFalse(node1.isObjectLit());
1278:       assertFalse(node1.isNot());
1279:       assertFalse(node1.isAnd());
1280:       assertFalse(node1.isInc());
1281:       assertEquals(38, node1.getCharno());
1282:       assertFalse(node1.isCast());
1283:       assertFalse(node1.isFunction());
1284:       assertFalse(node1.isContinue());
1285:       assertFalse(node1.isFalse());
1286:       
1287:       node0.setInputId((InputId) null);
1288:       assertEquals(1, Node.DECR_FLAG);
1289:       assertEquals(30, Node.VAR_ARGS_NAME);
1290:       assertEquals(49, Node.DIRECT_EVAL);
1291:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1292:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1293:       assertEquals(2, Node.POST_FLAG);
1294:       assertEquals(32, Node.INCRDECR_PROP);
1295:       assertEquals(57, Node.LAST_PROP);
1296:       assertEquals(47, Node.IS_DISPATCHER);
1297:       assertEquals(12, Node.COLUMN_BITS);
1298:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1299:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1301:       assertEquals(29, Node.JSDOC_INFO_PROP);
1302:       assertEquals(39, Node.EMPTY_BLOCK);
1303:       assertEquals(53, Node.INPUT_ID);
1304:       assertEquals(48, Node.DIRECTIVES);
1305:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1306:       assertEquals(37, Node.OPT_ARG_NAME);
1307:       assertEquals(52, Node.LENGTH);
1308:       assertEquals(8, Node.FLAG_NO_THROWS);
1309:       assertEquals(56, Node.CHANGE_TIME);
1310:       assertEquals(36, Node.QUOTED_PROP);
1311:       assertEquals(57, Node.REFLECTED_OBJECT);
1312:       assertEquals(4095, Node.COLUMN_MASK);
1313:       assertEquals(55, Node.INFERRED_FUNCTION);
1314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1315:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1316:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1317:       assertEquals(50, Node.FREE_CALL);
1318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1319:       assertEquals(40, Node.ORIGINALNAME_PROP);
1320:       assertEquals(54, Node.SLASH_V);
1321:       assertEquals(46, Node.IS_NAMESPACE);
1322:       assertEquals(43, Node.IS_CONSTANT_NAME);
1323:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1324:       assertFalse(node0.equals((Object)node1));
1325:       assertFalse(node0.isNew());
1326:       assertFalse(node0.isCall());
1327:       assertFalse(node0.isAdd());
1328:       assertFalse(node0.isDo());
1329:       assertFalse(node0.isBlock());
1330:       assertEquals(39, node0.getType());
1331:       assertFalse(node0.isWhile());
1332:       assertFalse(node0.isVar());
1333:       assertFalse(node0.hasMoreThanOneChild());
1334:       assertEquals((-1), node0.getLineno());
1335:       assertFalse(node0.isOr());
1336:       assertFalse(node0.isCatch());
1337:       assertFalse(node0.isSetterDef());
1338:       assertFalse(node0.isNull());
1339:       assertFalse(node0.isVoid());
1340:       assertFalse(node0.isName());
1341:       assertFalse(node0.isTrue());
1342:       assertFalse(node0.hasOneChild());
1343:       assertFalse(node0.isArrayLit());
1344:       assertFalse(node0.isTry());
1345:       assertFalse(node0.isEmpty());
1346:       assertFalse(node0.isScript());
1347:       assertFalse(node0.isDefaultCase());
1348:       assertFalse(node0.isRegExp());
1349:       assertFalse(node0.isAssignAdd());
1350:       assertFalse(node0.isLabel());
1351:       assertFalse(node0.isFor());
1352:       assertEquals(0, node0.getChildCount());
1353:       assertFalse(node0.isCase());
1354:       assertFalse(node0.isSwitch());
1355:       assertFalse(node0.isLabelName());
1356:       assertFalse(node0.isGetterDef());
1357:       assertFalse(node0.isStringKey());
1358:       assertEquals((-1), node0.getCharno());
1359:       assertFalse(node0.isParamList());
1360:       assertFalse(node0.isHook());
1361:       assertFalse(node0.isFalse());
1362:       assertFalse(node0.isInc());
1363:       assertFalse(node0.isComma());
1364:       assertFalse(node0.isThis());
1365:       assertFalse(node0.isThrow());
1366:       assertFalse(node0.isInstanceOf());
1367:       assertFalse(node0.isIn());
1368:       assertFalse(node0.isWith());
1369:       assertFalse(node0.isBreak());
1370:       assertFalse(node0.isIf());
1371:       assertFalse(node0.isDelProp());
1372:       assertFalse(node0.isNE());
1373:       assertFalse(node0.isGetElem());
1374:       assertFalse(node0.isExprResult());
1375:       assertFalse(node0.isCast());
1376:       assertFalse(node0.isDec());
1377:       assertFalse(node0.isTypeOf());
1378:       assertFalse(node0.hasChildren());
1379:       assertFalse(node0.isFunction());
1380:       assertFalse(node0.isAssign());
1381:       assertFalse(node0.isReturn());
1382:       assertTrue(node0.isNumber());
1383:       assertFalse(node0.isObjectLit());
1384:       assertFalse(node0.isGetProp());
1385:       assertFalse(node0.isContinue());
1386:       assertFalse(node0.isString());
1387:       assertEquals((-1), node0.getSourcePosition());
1388:       assertFalse(node0.isNot());
1389:       assertFalse(node0.isAnd());
1390:       assertFalse(node0.isDebugger());
1391:       
1392:       node0.setType(46);
1393:       assertEquals(1, Node.DECR_FLAG);
1394:       assertEquals(30, Node.VAR_ARGS_NAME);
1395:       assertEquals(49, Node.DIRECT_EVAL);
1396:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1397:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1398:       assertEquals(2, Node.POST_FLAG);
1399:       assertEquals(32, Node.INCRDECR_PROP);
1400:       assertEquals(57, Node.LAST_PROP);
1401:       assertEquals(47, Node.IS_DISPATCHER);
1402:       assertEquals(12, Node.COLUMN_BITS);
1403:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1404:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1405:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1406:       assertEquals(29, Node.JSDOC_INFO_PROP);
1407:       assertEquals(39, Node.EMPTY_BLOCK);
1408:       assertEquals(53, Node.INPUT_ID);
1409:       assertEquals(48, Node.DIRECTIVES);
1410:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1411:       assertEquals(37, Node.OPT_ARG_NAME);
1412:       assertEquals(52, Node.LENGTH);
1413:       assertEquals(8, Node.FLAG_NO_THROWS);
1414:       assertEquals(56, Node.CHANGE_TIME);
1415:       assertEquals(36, Node.QUOTED_PROP);
1416:       assertEquals(57, Node.REFLECTED_OBJECT);
1417:       assertEquals(4095, Node.COLUMN_MASK);
1418:       assertEquals(55, Node.INFERRED_FUNCTION);
1419:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1420:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1421:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1422:       assertEquals(50, Node.FREE_CALL);
1423:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1424:       assertEquals(40, Node.ORIGINALNAME_PROP);
1425:       assertEquals(54, Node.SLASH_V);
1426:       assertEquals(46, Node.IS_NAMESPACE);
1427:       assertEquals(43, Node.IS_CONSTANT_NAME);
1428:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1429:       assertFalse(node0.equals((Object)node1));
1430:       assertFalse(node0.isNew());
1431:       assertFalse(node0.isCall());
1432:       assertFalse(node0.isAdd());
1433:       assertFalse(node0.isDo());
1434:       assertFalse(node0.isBlock());
1435:       assertFalse(node0.isWhile());
1436:       assertFalse(node0.isVar());
1437:       assertFalse(node0.hasMoreThanOneChild());
1438:       assertEquals((-1), node0.getLineno());
1439:       assertFalse(node0.isOr());
1440:       assertFalse(node0.isCatch());
1441:       assertFalse(node0.isSetterDef());
1442:       assertFalse(node0.isNull());
1443:       assertFalse(node0.isVoid());
1444:       assertFalse(node0.isName());
1445:       assertFalse(node0.isTrue());
1446:       assertFalse(node0.hasOneChild());
1447:       assertFalse(node0.isArrayLit());
1448:       assertFalse(node0.isTry());
1449:       assertFalse(node0.isEmpty());
1450:       assertFalse(node0.isScript());
1451:       assertFalse(node0.isDefaultCase());
1452:       assertFalse(node0.isRegExp());
1453:       assertFalse(node0.isAssignAdd());
1454:       assertFalse(node0.isLabel());
1455:       assertFalse(node0.isFor());
1456:       assertEquals(0, node0.getChildCount());
1457:       assertFalse(node0.isCase());
1458:       assertFalse(node0.isNumber());
1459:       assertFalse(node0.isSwitch());
1460:       assertFalse(node0.isLabelName());
1461:       assertFalse(node0.isGetterDef());
1462:       assertFalse(node0.isStringKey());
1463:       assertEquals((-1), node0.getCharno());
1464:       assertFalse(node0.isParamList());
1465:       assertFalse(node0.isHook());
1466:       assertFalse(node0.isFalse());
1467:       assertFalse(node0.isInc());
1468:       assertFalse(node0.isComma());
1469:       assertFalse(node0.isThis());
1470:       assertFalse(node0.isThrow());
1471:       assertFalse(node0.isInstanceOf());
1472:       assertFalse(node0.isIn());
1473:       assertEquals(46, node0.getType());
1474:       assertFalse(node0.isWith());
1475:       assertFalse(node0.isBreak());
1476:       assertFalse(node0.isIf());
1477:       assertFalse(node0.isDelProp());
1478:       assertFalse(node0.isNE());
1479:       assertFalse(node0.isGetElem());
1480:       assertFalse(node0.isExprResult());
1481:       assertFalse(node0.isCast());
1482:       assertFalse(node0.isDec());
1483:       assertFalse(node0.isTypeOf());
1484:       assertFalse(node0.hasChildren());
1485:       assertFalse(node0.isFunction());
1486:       assertFalse(node0.isAssign());
1487:       assertFalse(node0.isReturn());
1488:       assertFalse(node0.isObjectLit());
1489:       assertFalse(node0.isGetProp());
1490:       assertFalse(node0.isContinue());
1491:       assertFalse(node0.isString());
1492:       assertEquals((-1), node0.getSourcePosition());
1493:       assertFalse(node0.isNot());
1494:       assertFalse(node0.isAnd());
1495:       assertFalse(node0.isDebugger());
1496:       
1497:       boolean boolean4 = node0.isSetterDef();
1498:       assertFalse(boolean4);
1499:       assertEquals(1, Node.DECR_FLAG);
1500:       assertEquals(30, Node.VAR_ARGS_NAME);
1501:       assertEquals(49, Node.DIRECT_EVAL);
1502:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1503:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1504:       assertEquals(2, Node.POST_FLAG);
1505:       assertEquals(32, Node.INCRDECR_PROP);
1506:       assertEquals(57, Node.LAST_PROP);
1507:       assertEquals(47, Node.IS_DISPATCHER);
1508:       assertEquals(12, Node.COLUMN_BITS);
1509:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1511:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1512:       assertEquals(29, Node.JSDOC_INFO_PROP);
1513:       assertEquals(39, Node.EMPTY_BLOCK);
1514:       assertEquals(53, Node.INPUT_ID);
1515:       assertEquals(48, Node.DIRECTIVES);
1516:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1517:       assertEquals(37, Node.OPT_ARG_NAME);
1518:       assertEquals(52, Node.LENGTH);
1519:       assertEquals(8, Node.FLAG_NO_THROWS);
1520:       assertEquals(56, Node.CHANGE_TIME);
1521:       assertEquals(36, Node.QUOTED_PROP);
1522:       assertEquals(57, Node.REFLECTED_OBJECT);
1523:       assertEquals(4095, Node.COLUMN_MASK);
1524:       assertEquals(55, Node.INFERRED_FUNCTION);
1525:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1526:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1527:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1528:       assertEquals(50, Node.FREE_CALL);
1529:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1530:       assertEquals(40, Node.ORIGINALNAME_PROP);
1531:       assertEquals(54, Node.SLASH_V);
1532:       assertEquals(46, Node.IS_NAMESPACE);
1533:       assertEquals(43, Node.IS_CONSTANT_NAME);
1534:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1535:       assertFalse(node0.equals((Object)node1));
1536:       assertTrue(boolean4 == boolean0);
1537:       assertTrue(boolean4 == boolean1);
1538:       assertTrue(boolean4 == boolean3);
1539:       assertTrue(boolean4 == boolean2);
1540:       assertFalse(node0.isNew());
1541:       assertFalse(node0.isCall());
1542:       assertFalse(node0.isAdd());
1543:       assertFalse(node0.isDo());
1544:       assertFalse(node0.isBlock());
1545:       assertFalse(node0.isWhile());
1546:       assertFalse(node0.isVar());
1547:       assertFalse(node0.hasMoreThanOneChild());
1548:       assertEquals((-1), node0.getLineno());
1549:       assertFalse(node0.isOr());
1550:       assertFalse(node0.isCatch());
1551:       assertFalse(node0.isSetterDef());
1552:       assertFalse(node0.isNull());
1553:       assertFalse(node0.isVoid());
1554:       assertFalse(node0.isName());
1555:       assertFalse(node0.isTrue());
1556:       assertFalse(node0.hasOneChild());
1557:       assertFalse(node0.isArrayLit());
1558:       assertFalse(node0.isTry());
1559:       assertFalse(node0.isEmpty());
1560:       assertFalse(node0.isScript());
1561:       assertFalse(node0.isDefaultCase());
1562:       assertFalse(node0.isRegExp());
1563:       assertFalse(node0.isAssignAdd());
1564:       assertFalse(node0.isLabel());
1565:       assertFalse(node0.isFor());
1566:       assertEquals(0, node0.getChildCount());
1567:       assertFalse(node0.isCase());
1568:       assertFalse(node0.isNumber());
1569:       assertFalse(node0.isSwitch());
1570:       assertFalse(node0.isLabelName());
1571:       assertFalse(node0.isGetterDef());
1572:       assertFalse(node0.isStringKey());
1573:       assertEquals((-1), node0.getCharno());
1574:       assertFalse(node0.isParamList());
1575:       assertFalse(node0.isHook());
1576:       assertFalse(node0.isFalse());
1577:       assertFalse(node0.isInc());
1578:       assertFalse(node0.isComma());
1579:       assertFalse(node0.isThis());
1580:       assertFalse(node0.isThrow());
1581:       assertFalse(node0.isInstanceOf());
1582:       assertFalse(node0.isIn());
1583:       assertEquals(46, node0.getType());
1584:       assertFalse(node0.isWith());
1585:       assertFalse(node0.isBreak());
1586:       assertFalse(node0.isIf());
1587:       assertFalse(node0.isDelProp());
1588:       assertFalse(node0.isNE());
1589:       assertFalse(node0.isGetElem());
1590:       assertFalse(node0.isExprResult());
1591:       assertFalse(node0.isCast());
1592:       assertFalse(node0.isDec());
1593:       assertFalse(node0.isTypeOf());
1594:       assertFalse(node0.hasChildren());
1595:       assertFalse(node0.isFunction());
1596:       assertFalse(node0.isAssign());
1597:       assertFalse(node0.isReturn());
1598:       assertFalse(node0.isObjectLit());
1599:       assertFalse(node0.isGetProp());
1600:       assertFalse(node0.isContinue());
1601:       assertFalse(node0.isString());
1602:       assertEquals((-1), node0.getSourcePosition());
1603:       assertFalse(node0.isNot());
1604:       assertFalse(node0.isAnd());
1605:       assertFalse(node0.isDebugger());
1606:       
1607:       int int0 = node1.getChildCount();
1608:       assertEquals(0, int0);
1609:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1610:       assertEquals(43, Node.IS_CONSTANT_NAME);
1611:       assertEquals(53, Node.INPUT_ID);
1612:       assertEquals(55, Node.INFERRED_FUNCTION);
1613:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1614:       assertEquals(29, Node.JSDOC_INFO_PROP);
1615:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1616:       assertEquals(36, Node.QUOTED_PROP);
1617:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1618:       assertEquals(37, Node.OPT_ARG_NAME);
1619:       assertEquals(56, Node.CHANGE_TIME);
1620:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1621:       assertEquals(48, Node.DIRECTIVES);
1622:       assertEquals(32, Node.INCRDECR_PROP);
1623:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1624:       assertEquals(4095, Node.COLUMN_MASK);
1625:       assertEquals(12, Node.COLUMN_BITS);
1626:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1627:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1628:       assertEquals(54, Node.SLASH_V);
1629:       assertEquals(57, Node.LAST_PROP);
1630:       assertEquals(1, Node.DECR_FLAG);
1631:       assertEquals(49, Node.DIRECT_EVAL);
1632:       assertEquals(57, Node.REFLECTED_OBJECT);
1633:       assertEquals(46, Node.IS_NAMESPACE);
1634:       assertEquals(52, Node.LENGTH);
1635:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1636:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1637:       assertEquals(50, Node.FREE_CALL);
1638:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1639:       assertEquals(8, Node.FLAG_NO_THROWS);
1640:       assertEquals(39, Node.EMPTY_BLOCK);
1641:       assertEquals(47, Node.IS_DISPATCHER);
1642:       assertEquals(40, Node.ORIGINALNAME_PROP);
1643:       assertEquals(30, Node.VAR_ARGS_NAME);
1644:       assertEquals(2, Node.POST_FLAG);
1645:       assertFalse(node1.equals((Object)node0));
1646:       assertFalse(node1.isDelProp());
1647:       assertFalse(node1.isGetterDef());
1648:       assertFalse(node1.isIf());
1649:       assertFalse(node1.isEmpty());
1650:       assertFalse(node1.isFor());
1651:       assertFalse(node1.isNE());
1652:       assertFalse(node1.isArrayLit());
1653:       assertFalse(node1.isIn());
1654:       assertFalse(node1.isDebugger());
1655:       assertFalse(node1.isTrue());
1656:       assertEquals(16422, node1.getSourcePosition());
1657:       assertFalse(node1.isString());
1658:       assertFalse(node1.isVoid());
1659:       assertFalse(node1.isTry());
1660:       assertFalse(node1.isCase());
1661:       assertFalse(node1.isHook());
1662:       assertEquals(0, node1.getType());
1663:       assertFalse(node1.isCatch());
1664:       assertFalse(node1.isRegExp());
1665:       assertFalse(node1.isBreak());
1666:       assertFalse(node1.isNull());
1667:       assertFalse(node1.isStringKey());
1668:       assertFalse(node1.isCall());
1669:       assertFalse(node1.isParamList());
1670:       assertFalse(node1.isName());
1671:       assertFalse(node1.isAdd());
1672:       assertFalse(node1.isDefaultCase());
1673:       assertFalse(node1.isSwitch());
1674:       assertFalse(node1.isNew());
1675:       assertFalse(node1.isDo());
1676:       assertFalse(node1.isAssignAdd());
1677:       assertFalse(node1.isVar());
1678:       assertFalse(node1.isLabel());
1679:       assertEquals(0, node1.getChildCount());
1680:       assertFalse(node1.hasChildren());
1681:       assertFalse(node1.isNumber());
1682:       assertFalse(node1.isGetElem());
1683:       assertFalse(node1.hasOneChild());
1684:       assertFalse(node1.isLabelName());
1685:       assertFalse(node1.isOr());
1686:       assertFalse(node1.isWhile());
1687:       assertFalse(node1.isWith());
1688:       assertFalse(node1.isScript());
1689:       assertFalse(node1.isExprResult());
1690:       assertFalse(node1.isReturn());
1691:       assertFalse(node1.isBlock());
1692:       assertFalse(node1.isInstanceOf());
1693:       assertFalse(node1.isThis());
1694:       assertFalse(node1.hasMoreThanOneChild());
1695:       assertFalse(node1.isTypeOf());
1696:       assertFalse(node1.isComma());
1697:       assertFalse(node1.isDec());
1698:       assertFalse(node1.isAssign());
1699:       assertEquals(4, node1.getLineno());
1700:       assertFalse(node1.isThrow());
1701:       assertFalse(node1.isGetProp());
1702:       assertFalse(node1.isSetterDef());
1703:       assertFalse(node1.isObjectLit());
1704:       assertFalse(node1.isNot());
1705:       assertFalse(node1.isAnd());
1706:       assertFalse(node1.isInc());
1707:       assertEquals(38, node1.getCharno());
1708:       assertFalse(node1.isCast());
1709:       assertFalse(node1.isFunction());
1710:       assertFalse(node1.isContinue());
1711:       assertFalse(node1.isFalse());
1712:       
1713:       boolean boolean5 = node1.isTypeOf();
1714:       assertFalse(boolean5);
1715:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1716:       assertEquals(43, Node.IS_CONSTANT_NAME);
1717:       assertEquals(53, Node.INPUT_ID);
1718:       assertEquals(55, Node.INFERRED_FUNCTION);
1719:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1720:       assertEquals(29, Node.JSDOC_INFO_PROP);
1721:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1722:       assertEquals(36, Node.QUOTED_PROP);
1723:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1724:       assertEquals(37, Node.OPT_ARG_NAME);
1725:       assertEquals(56, Node.CHANGE_TIME);
1726:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1727:       assertEquals(48, Node.DIRECTIVES);
1728:       assertEquals(32, Node.INCRDECR_PROP);
1729:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1730:       assertEquals(4095, Node.COLUMN_MASK);
1731:       assertEquals(12, Node.COLUMN_BITS);
1732:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1733:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1734:       assertEquals(54, Node.SLASH_V);
1735:       assertEquals(57, Node.LAST_PROP);
1736:       assertEquals(1, Node.DECR_FLAG);
1737:       assertEquals(49, Node.DIRECT_EVAL);
1738:       assertEquals(57, Node.REFLECTED_OBJECT);
1739:       assertEquals(46, Node.IS_NAMESPACE);
1740:       assertEquals(52, Node.LENGTH);
1741:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1742:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1743:       assertEquals(50, Node.FREE_CALL);
1744:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1745:       assertEquals(8, Node.FLAG_NO_THROWS);
1746:       assertEquals(39, Node.EMPTY_BLOCK);
1747:       assertEquals(47, Node.IS_DISPATCHER);
1748:       assertEquals(40, Node.ORIGINALNAME_PROP);
1749:       assertEquals(30, Node.VAR_ARGS_NAME);
1750:       assertEquals(2, Node.POST_FLAG);
1751:       assertFalse(node1.equals((Object)node0));
1752:       assertTrue(boolean5 == boolean2);
1753:       assertTrue(boolean5 == boolean4);
1754:       assertTrue(boolean5 == boolean1);
1755:       assertTrue(boolean5 == boolean3);
1756:       assertTrue(boolean5 == boolean0);
1757:       assertFalse(node1.isDelProp());
1758:       assertFalse(node1.isGetterDef());
1759:       assertFalse(node1.isIf());
1760:       assertFalse(node1.isEmpty());
1761:       assertFalse(node1.isFor());
1762:       assertFalse(node1.isNE());
1763:       assertFalse(node1.isArrayLit());
1764:       assertFalse(node1.isIn());
1765:       assertFalse(node1.isDebugger());
1766:       assertFalse(node1.isTrue());
1767:       assertEquals(16422, node1.getSourcePosition());
1768:       assertFalse(node1.isString());
1769:       assertFalse(node1.isVoid());
1770:       assertFalse(node1.isTry());
1771:       assertFalse(node1.isCase());
1772:       assertFalse(node1.isHook());
1773:       assertEquals(0, node1.getType());
1774:       assertFalse(node1.isCatch());
1775:       assertFalse(node1.isRegExp());
1776:       assertFalse(node1.isBreak());
1777:       assertFalse(node1.isNull());
1778:       assertFalse(node1.isStringKey());
1779:       assertFalse(node1.isCall());
1780:       assertFalse(node1.isParamList());
1781:       assertFalse(node1.isName());
1782:       assertFalse(node1.isAdd());
1783:       assertFalse(node1.isDefaultCase());
1784:       assertFalse(node1.isSwitch());
1785:       assertFalse(node1.isNew());
1786:       assertFalse(node1.isDo());
1787:       assertFalse(node1.isAssignAdd());
1788:       assertFalse(node1.isVar());
1789:       assertFalse(node1.isLabel());
1790:       assertEquals(0, node1.getChildCount());
1791:       assertFalse(node1.hasChildren());
1792:       assertFalse(node1.isNumber());
1793:       assertFalse(node1.isGetElem());
1794:       assertFalse(node1.hasOneChild());
1795:       assertFalse(node1.isLabelName());
1796:       assertFalse(node1.isOr());
1797:       assertFalse(node1.isWhile());
1798:       assertFalse(node1.isWith());
1799:       assertFalse(node1.isScript());
1800:       assertFalse(node1.isExprResult());
1801:       assertFalse(node1.isReturn());
1802:       assertFalse(node1.isBlock());
1803:       assertFalse(node1.isInstanceOf());
1804:       assertFalse(node1.isThis());
1805:       assertFalse(node1.hasMoreThanOneChild());
1806:       assertFalse(node1.isTypeOf());
1807:       assertFalse(node1.isComma());
1808:       assertFalse(node1.isDec());
1809:       assertFalse(node1.isAssign());
1810:       assertEquals(4, node1.getLineno());
1811:       assertFalse(node1.isThrow());
1812:       assertFalse(node1.isGetProp());
1813:       assertFalse(node1.isSetterDef());
1814:       assertFalse(node1.isObjectLit());
1815:       assertFalse(node1.isNot());
1816:       assertFalse(node1.isAnd());
1817:       assertFalse(node1.isInc());
1818:       assertEquals(38, node1.getCharno());
1819:       assertFalse(node1.isCast());
1820:       assertFalse(node1.isFunction());
1821:       assertFalse(node1.isContinue());
1822:       assertFalse(node1.isFalse());
1823:       
1824:       boolean boolean6 = node1.isWhile();
1825:       assertFalse(boolean6);
1826:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1827:       assertEquals(43, Node.IS_CONSTANT_NAME);
1828:       assertEquals(53, Node.INPUT_ID);
1829:       assertEquals(55, Node.INFERRED_FUNCTION);
1830:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1831:       assertEquals(29, Node.JSDOC_INFO_PROP);
1832:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1833:       assertEquals(36, Node.QUOTED_PROP);
1834:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1835:       assertEquals(37, Node.OPT_ARG_NAME);
1836:       assertEquals(56, Node.CHANGE_TIME);
1837:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1838:       assertEquals(48, Node.DIRECTIVES);
1839:       assertEquals(32, Node.INCRDECR_PROP);
1840:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1841:       assertEquals(4095, Node.COLUMN_MASK);
1842:       assertEquals(12, Node.COLUMN_BITS);
1843:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1844:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1845:       assertEquals(54, Node.SLASH_V);
1846:       assertEquals(57, Node.LAST_PROP);
1847:       assertEquals(1, Node.DECR_FLAG);
1848:       assertEquals(49, Node.DIRECT_EVAL);
1849:       assertEquals(57, Node.REFLECTED_OBJECT);
1850:       assertEquals(46, Node.IS_NAMESPACE);
1851:       assertEquals(52, Node.LENGTH);
1852:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1853:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1854:       assertEquals(50, Node.FREE_CALL);
1855:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1856:       assertEquals(8, Node.FLAG_NO_THROWS);
1857:       assertEquals(39, Node.EMPTY_BLOCK);
1858:       assertEquals(47, Node.IS_DISPATCHER);
1859:       assertEquals(40, Node.ORIGINALNAME_PROP);
1860:       assertEquals(30, Node.VAR_ARGS_NAME);
1861:       assertEquals(2, Node.POST_FLAG);
1862:       assertFalse(node1.equals((Object)node0));
1863:       assertTrue(boolean6 == boolean4);
1864:       assertTrue(boolean6 == boolean0);
1865:       assertTrue(boolean6 == boolean5);
1866:       assertTrue(boolean6 == boolean1);
1867:       assertTrue(boolean6 == boolean3);
1868:       assertTrue(boolean6 == boolean2);
1869:       assertFalse(node1.isDelProp());
1870:       assertFalse(node1.isGetterDef());
1871:       assertFalse(node1.isIf());
1872:       assertFalse(node1.isEmpty());
1873:       assertFalse(node1.isFor());
1874:       assertFalse(node1.isNE());
1875:       assertFalse(node1.isArrayLit());
1876:       assertFalse(node1.isIn());
1877:       assertFalse(node1.isDebugger());
1878:       assertFalse(node1.isTrue());
1879:       assertEquals(16422, node1.getSourcePosition());
1880:       assertFalse(node1.isString());
1881:       assertFalse(node1.isVoid());
1882:       assertFalse(node1.isTry());
1883:       assertFalse(node1.isCase());
1884:       assertFalse(node1.isHook());
1885:       assertEquals(0, node1.getType());
1886:       assertFalse(node1.isCatch());
1887:       assertFalse(node1.isRegExp());
1888:       assertFalse(node1.isBreak());
1889:       assertFalse(node1.isNull());
1890:       assertFalse(node1.isStringKey());
1891:       assertFalse(node1.isCall());
1892:       assertFalse(node1.isParamList());
1893:       assertFalse(node1.isName());
1894:       assertFalse(node1.isAdd());
1895:       assertFalse(node1.isDefaultCase());
1896:       assertFalse(node1.isSwitch());
1897:       assertFalse(node1.isNew());
1898:       assertFalse(node1.isDo());
1899:       assertFalse(node1.isAssignAdd());
1900:       assertFalse(node1.isVar());
1901:       assertFalse(node1.isLabel());
1902:       assertEquals(0, node1.getChildCount());
1903:       assertFalse(node1.hasChildren());
1904:       assertFalse(node1.isNumber());
1905:       assertFalse(node1.isGetElem());
1906:       assertFalse(node1.hasOneChild());
1907:       assertFalse(node1.isLabelName());
1908:       assertFalse(node1.isOr());
1909:       assertFalse(node1.isWhile());
1910:       assertFalse(node1.isWith());
1911:       assertFalse(node1.isScript());
1912:       assertFalse(node1.isExprResult());
1913:       assertFalse(node1.isReturn());
1914:       assertFalse(node1.isBlock());
1915:       assertFalse(node1.isInstanceOf());
1916:       assertFalse(node1.isThis());
1917:       assertFalse(node1.hasMoreThanOneChild());
1918:       assertFalse(node1.isTypeOf());
1919:       assertFalse(node1.isComma());
1920:       assertFalse(node1.isDec());
1921:       assertFalse(node1.isAssign());
1922:       assertEquals(4, node1.getLineno());
1923:       assertFalse(node1.isThrow());
1924:       assertFalse(node1.isGetProp());
1925:       assertFalse(node1.isSetterDef());
1926:       assertFalse(node1.isObjectLit());
1927:       assertFalse(node1.isNot());
1928:       assertFalse(node1.isAnd());
1929:       assertFalse(node1.isInc());
1930:       assertEquals(38, node1.getCharno());
1931:       assertFalse(node1.isCast());
1932:       assertFalse(node1.isFunction());
1933:       assertFalse(node1.isContinue());
1934:       assertFalse(node1.isFalse());
1935:       
1936:       boolean boolean7 = node0.isThis();
1937:       assertFalse(boolean7);
1938:       assertEquals(1, Node.DECR_FLAG);
1939:       assertEquals(30, Node.VAR_ARGS_NAME);
1940:       assertEquals(49, Node.DIRECT_EVAL);
1941:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1942:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1943:       assertEquals(2, Node.POST_FLAG);
1944:       assertEquals(32, Node.INCRDECR_PROP);
1945:       assertEquals(57, Node.LAST_PROP);
1946:       assertEquals(47, Node.IS_DISPATCHER);
1947:       assertEquals(12, Node.COLUMN_BITS);
1948:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1949:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1950:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1951:       assertEquals(29, Node.JSDOC_INFO_PROP);
1952:       assertEquals(39, Node.EMPTY_BLOCK);
1953:       assertEquals(53, Node.INPUT_ID);
1954:       assertEquals(48, Node.DIRECTIVES);
1955:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1956:       assertEquals(37, Node.OPT_ARG_NAME);
1957:       assertEquals(52, Node.LENGTH);
1958:       assertEquals(8, Node.FLAG_NO_THROWS);
1959:       assertEquals(56, Node.CHANGE_TIME);
1960:       assertEquals(36, Node.QUOTED_PROP);
1961:       assertEquals(57, Node.REFLECTED_OBJECT);
1962:       assertEquals(4095, Node.COLUMN_MASK);
1963:       assertEquals(55, Node.INFERRED_FUNCTION);
1964:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1965:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1966:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1967:       assertEquals(50, Node.FREE_CALL);
1968:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1969:       assertEquals(40, Node.ORIGINALNAME_PROP);
1970:       assertEquals(54, Node.SLASH_V);
1971:       assertEquals(46, Node.IS_NAMESPACE);
1972:       assertEquals(43, Node.IS_CONSTANT_NAME);
1973:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1974:       assertFalse(node0.equals((Object)node1));
1975:       assertTrue(boolean7 == boolean6);
1976:       assertTrue(boolean7 == boolean2);
1977:       assertTrue(boolean7 == boolean0);
1978:       assertTrue(boolean7 == boolean5);
1979:       assertTrue(boolean7 == boolean1);
1980:       assertTrue(boolean7 == boolean3);
1981:       assertTrue(boolean7 == boolean4);
1982:       assertFalse(node0.isNew());
1983:       assertFalse(node0.isCall());
1984:       assertFalse(node0.isAdd());
1985:       assertFalse(node0.isDo());
1986:       assertFalse(node0.isBlock());
1987:       assertFalse(node0.isWhile());
1988:       assertFalse(node0.isVar());
1989:       assertFalse(node0.hasMoreThanOneChild());
1990:       assertEquals((-1), node0.getLineno());
1991:       assertFalse(node0.isOr());
1992:       assertFalse(node0.isCatch());
1993:       assertFalse(node0.isSetterDef());
1994:       assertFalse(node0.isNull());
1995:       assertFalse(node0.isVoid());
1996:       assertFalse(node0.isName());
1997:       assertFalse(node0.isTrue());
1998:       assertFalse(node0.hasOneChild());
1999:       assertFalse(node0.isArrayLit());
2000:       assertFalse(node0.isTry());
2001:       assertFalse(node0.isEmpty());
2002:       assertFalse(node0.isScript());
2003:       assertFalse(node0.isDefaultCase());
2004:       assertFalse(node0.isRegExp());
2005:       assertFalse(node0.isAssignAdd());
2006:       assertFalse(node0.isLabel());
2007:       assertFalse(node0.isFor());
2008:       assertEquals(0, node0.getChildCount());
2009:       assertFalse(node0.isCase());
2010:       assertFalse(node0.isNumber());
2011:       assertFalse(node0.isSwitch());
2012:       assertFalse(node0.isLabelName());
2013:       assertFalse(node0.isGetterDef());
2014:       assertFalse(node0.isStringKey());
2015:       assertEquals((-1), node0.getCharno());
2016:       assertFalse(node0.isParamList());
2017:       assertFalse(node0.isHook());
2018:       assertFalse(node0.isFalse());
2019:       assertFalse(node0.isInc());
2020:       assertFalse(node0.isComma());
2021:       assertFalse(node0.isThis());
2022:       assertFalse(node0.isThrow());
2023:       assertFalse(node0.isInstanceOf());
2024:       assertFalse(node0.isIn());
2025:       assertEquals(46, node0.getType());
2026:       assertFalse(node0.isWith());
2027:       assertFalse(node0.isBreak());
2028:       assertFalse(node0.isIf());
2029:       assertFalse(node0.isDelProp());
2030:       assertFalse(node0.isNE());
2031:       assertFalse(node0.isGetElem());
2032:       assertFalse(node0.isExprResult());
2033:       assertFalse(node0.isCast());
2034:       assertFalse(node0.isDec());
2035:       assertFalse(node0.isTypeOf());
2036:       assertFalse(node0.hasChildren());
2037:       assertFalse(node0.isFunction());
2038:       assertFalse(node0.isAssign());
2039:       assertFalse(node0.isReturn());
2040:       assertFalse(node0.isObjectLit());
2041:       assertFalse(node0.isGetProp());
2042:       assertFalse(node0.isContinue());
2043:       assertFalse(node0.isString());
2044:       assertEquals((-1), node0.getSourcePosition());
2045:       assertFalse(node0.isNot());
2046:       assertFalse(node0.isAnd());
2047:       assertFalse(node0.isDebugger());
2048:   }
2049: }
RegularFileObject[/tmp/EvoSuite_215_1628157898685/com/google/javascript/rhino/Node_215_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:04:59 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_215_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_215_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_215_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:04:59.191 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node0);
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());

Node node1 = Node.newString(0, "", 4, 38);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertEquals(4, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertEquals(4, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());

boolean boolean0 = node_NodeMismatch0.equals("");
assertFalse(boolean0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertEquals(4, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());

boolean boolean1 = node1.isEquivalentTo(node0, true, true, true);
assertFalse(boolean1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertEquals(4, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());

boolean boolean2 = node0.isIf();
assertFalse(boolean2);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());

boolean boolean3 = node1.isEquivalentTo(node0);
assertFalse(boolean3);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertEquals(4, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());

node0.setInputId((InputId) null);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());

node0.setType(46);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertEquals(46, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());

boolean boolean4 = node0.isSetterDef();
assertFalse(boolean4);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertEquals(46, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());

int int0 = node1.getChildCount();
assertEquals(0, int0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertEquals(4, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());

boolean boolean5 = node1.isTypeOf();
assertFalse(boolean5);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertEquals(4, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());

boolean boolean6 = node1.isWhile();
assertFalse(boolean6);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean2);
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertEquals(16422, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(0, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertEquals(4, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInc());
assertEquals(38, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());

boolean boolean7 = node0.isThis();
assertFalse(boolean7);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean4);
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertEquals(46, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());


[MASTER] 10:05:01.077 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_231_1628157900958/com/google/javascript/rhino/Node_231_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_231_1628157900958/com/google/javascript/rhino/Node_231_tmp__ESTest_scaffolding.java]]
[MASTER] 10:05:01.077 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:05:01.077 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:05:01.077 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 867
[MASTER] 10:05:01.078 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_231_1628157900958/com/google/javascript/rhino/Node_231_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:05:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_231_tmp__ESTest extends Node_231_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(1078.87509966889, 3768, 3768);
21:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
22:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
23:       assertEquals(40, Node.ORIGINALNAME_PROP);
24:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
25:       assertEquals(39, Node.EMPTY_BLOCK);
26:       assertEquals(48, Node.DIRECTIVES);
27:       assertEquals(52, Node.LENGTH);
28:       assertEquals(57, Node.REFLECTED_OBJECT);
29:       assertEquals(54, Node.SLASH_V);
30:       assertEquals(55, Node.INFERRED_FUNCTION);
31:       assertEquals(8, Node.FLAG_NO_THROWS);
32:       assertEquals(50, Node.FREE_CALL);
33:       assertEquals(57, Node.LAST_PROP);
34:       assertEquals(43, Node.IS_CONSTANT_NAME);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
37:       assertEquals(2, Node.POST_FLAG);
38:       assertEquals(30, Node.VAR_ARGS_NAME);
39:       assertEquals(47, Node.IS_DISPATCHER);
40:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
41:       assertEquals(56, Node.CHANGE_TIME);
42:       assertEquals(29, Node.JSDOC_INFO_PROP);
43:       assertEquals(37, Node.OPT_ARG_NAME);
44:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
45:       assertEquals(53, Node.INPUT_ID);
46:       assertEquals(46, Node.IS_NAMESPACE);
47:       assertEquals(51, Node.STATIC_SOURCE_FILE);
48:       assertEquals(36, Node.QUOTED_PROP);
49:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
50:       assertEquals(1, Node.DECR_FLAG);
51:       assertEquals(49, Node.DIRECT_EVAL);
52:       assertEquals(32, Node.INCRDECR_PROP);
53:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
54:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
55:       assertEquals(12, Node.COLUMN_BITS);
56:       assertEquals(4095, Node.COLUMN_MASK);
57:       assertNotNull(node0);
58:       assertFalse(node0.isAnd());
59:       assertFalse(node0.isObjectLit());
60:       assertFalse(node0.isInstanceOf());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isScript());
63:       assertFalse(node0.isNot());
64:       assertEquals(3768, node0.getLineno());
65:       assertFalse(node0.isFalse());
66:       assertFalse(node0.isThrow());
67:       assertFalse(node0.isCast());
68:       assertFalse(node0.isLabelName());
69:       assertEquals(15437496, node0.getSourcePosition());
70:       assertFalse(node0.isAssignAdd());
71:       assertFalse(node0.isLabel());
72:       assertFalse(node0.hasMoreThanOneChild());
73:       assertFalse(node0.isCase());
74:       assertFalse(node0.isInc());
75:       assertFalse(node0.isSwitch());
76:       assertFalse(node0.isNE());
77:       assertFalse(node0.isIn());
78:       assertFalse(node0.isGetterDef());
79:       assertFalse(node0.isFor());
80:       assertFalse(node0.isIf());
81:       assertFalse(node0.isTry());
82:       assertFalse(node0.hasOneChild());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isBlock());
85:       assertFalse(node0.isHook());
86:       assertEquals(39, node0.getType());
87:       assertFalse(node0.isWith());
88:       assertFalse(node0.isRegExp());
89:       assertFalse(node0.isCatch());
90:       assertFalse(node0.isDefaultCase());
91:       assertFalse(node0.isVoid());
92:       assertFalse(node0.isDebugger());
93:       assertFalse(node0.isTrue());
94:       assertFalse(node0.isSetterDef());
95:       assertFalse(node0.isNull());
96:       assertFalse(node0.isParamList());
97:       assertFalse(node0.isEmpty());
98:       assertFalse(node0.isVar());
99:       assertFalse(node0.isStringKey());
100:       assertFalse(node0.isArrayLit());
101:       assertFalse(node0.isNew());
102:       assertEquals(3768, node0.getCharno());
103:       assertFalse(node0.isFunction());
104:       assertEquals(0, node0.getChildCount());
105:       assertFalse(node0.isContinue());
106:       assertFalse(node0.isWhile());
107:       assertFalse(node0.isDo());
108:       assertTrue(node0.isNumber());
109:       assertFalse(node0.isAdd());
110:       assertFalse(node0.isString());
111:       assertFalse(node0.isOr());
112:       assertFalse(node0.isCall());
113:       assertFalse(node0.isGetElem());
114:       assertFalse(node0.isBreak());
115:       assertFalse(node0.isDelProp());
116:       assertFalse(node0.isName());
117:       assertFalse(node0.isExprResult());
118:       assertFalse(node0.hasChildren());
119:       assertFalse(node0.isReturn());
120:       assertFalse(node0.isAssign());
121:       assertFalse(node0.isTypeOf());
122:       assertFalse(node0.isComma());
123:       assertFalse(node0.isDec());
124:       
125:       boolean boolean0 = node0.isContinue();
126:       assertFalse(boolean0);
127:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
128:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
129:       assertEquals(40, Node.ORIGINALNAME_PROP);
130:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
131:       assertEquals(39, Node.EMPTY_BLOCK);
132:       assertEquals(48, Node.DIRECTIVES);
133:       assertEquals(52, Node.LENGTH);
134:       assertEquals(57, Node.REFLECTED_OBJECT);
135:       assertEquals(54, Node.SLASH_V);
136:       assertEquals(55, Node.INFERRED_FUNCTION);
137:       assertEquals(8, Node.FLAG_NO_THROWS);
138:       assertEquals(50, Node.FREE_CALL);
139:       assertEquals(57, Node.LAST_PROP);
140:       assertEquals(43, Node.IS_CONSTANT_NAME);
141:       assertEquals(15, Node.NO_SIDE_EFFECTS);
142:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(30, Node.VAR_ARGS_NAME);
145:       assertEquals(47, Node.IS_DISPATCHER);
146:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
147:       assertEquals(56, Node.CHANGE_TIME);
148:       assertEquals(29, Node.JSDOC_INFO_PROP);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
151:       assertEquals(53, Node.INPUT_ID);
152:       assertEquals(46, Node.IS_NAMESPACE);
153:       assertEquals(51, Node.STATIC_SOURCE_FILE);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
156:       assertEquals(1, Node.DECR_FLAG);
157:       assertEquals(49, Node.DIRECT_EVAL);
158:       assertEquals(32, Node.INCRDECR_PROP);
159:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
160:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
161:       assertEquals(12, Node.COLUMN_BITS);
162:       assertEquals(4095, Node.COLUMN_MASK);
163:       assertFalse(node0.isAnd());
164:       assertFalse(node0.isObjectLit());
165:       assertFalse(node0.isInstanceOf());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.isScript());
168:       assertFalse(node0.isNot());
169:       assertEquals(3768, node0.getLineno());
170:       assertFalse(node0.isFalse());
171:       assertFalse(node0.isThrow());
172:       assertFalse(node0.isCast());
173:       assertFalse(node0.isLabelName());
174:       assertEquals(15437496, node0.getSourcePosition());
175:       assertFalse(node0.isAssignAdd());
176:       assertFalse(node0.isLabel());
177:       assertFalse(node0.hasMoreThanOneChild());
178:       assertFalse(node0.isCase());
179:       assertFalse(node0.isInc());
180:       assertFalse(node0.isSwitch());
181:       assertFalse(node0.isNE());
182:       assertFalse(node0.isIn());
183:       assertFalse(node0.isGetterDef());
184:       assertFalse(node0.isFor());
185:       assertFalse(node0.isIf());
186:       assertFalse(node0.isTry());
187:       assertFalse(node0.hasOneChild());
188:       assertFalse(node0.isThis());
189:       assertFalse(node0.isBlock());
190:       assertFalse(node0.isHook());
191:       assertEquals(39, node0.getType());
192:       assertFalse(node0.isWith());
193:       assertFalse(node0.isRegExp());
194:       assertFalse(node0.isCatch());
195:       assertFalse(node0.isDefaultCase());
196:       assertFalse(node0.isVoid());
197:       assertFalse(node0.isDebugger());
198:       assertFalse(node0.isTrue());
199:       assertFalse(node0.isSetterDef());
200:       assertFalse(node0.isNull());
201:       assertFalse(node0.isParamList());
202:       assertFalse(node0.isEmpty());
203:       assertFalse(node0.isVar());
204:       assertFalse(node0.isStringKey());
205:       assertFalse(node0.isArrayLit());
206:       assertFalse(node0.isNew());
207:       assertEquals(3768, node0.getCharno());
208:       assertFalse(node0.isFunction());
209:       assertEquals(0, node0.getChildCount());
210:       assertFalse(node0.isContinue());
211:       assertFalse(node0.isWhile());
212:       assertFalse(node0.isDo());
213:       assertTrue(node0.isNumber());
214:       assertFalse(node0.isAdd());
215:       assertFalse(node0.isString());
216:       assertFalse(node0.isOr());
217:       assertFalse(node0.isCall());
218:       assertFalse(node0.isGetElem());
219:       assertFalse(node0.isBreak());
220:       assertFalse(node0.isDelProp());
221:       assertFalse(node0.isName());
222:       assertFalse(node0.isExprResult());
223:       assertFalse(node0.hasChildren());
224:       assertFalse(node0.isReturn());
225:       assertFalse(node0.isAssign());
226:       assertFalse(node0.isTypeOf());
227:       assertFalse(node0.isComma());
228:       assertFalse(node0.isDec());
229:       
230:       Node node1 = Node.newString(47, "The new child node has siblings.", 38, 4);
231:       assertEquals(30, Node.VAR_ARGS_NAME);
232:       assertEquals(49, Node.DIRECT_EVAL);
233:       assertEquals(1, Node.DECR_FLAG);
234:       assertEquals(15, Node.NO_SIDE_EFFECTS);
235:       assertEquals(51, Node.STATIC_SOURCE_FILE);
236:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
237:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
238:       assertEquals(12, Node.COLUMN_BITS);
239:       assertEquals(32, Node.INCRDECR_PROP);
240:       assertEquals(57, Node.LAST_PROP);
241:       assertEquals(29, Node.JSDOC_INFO_PROP);
242:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
243:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
244:       assertEquals(8, Node.FLAG_NO_THROWS);
245:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
246:       assertEquals(52, Node.LENGTH);
247:       assertEquals(48, Node.DIRECTIVES);
248:       assertEquals(37, Node.OPT_ARG_NAME);
249:       assertEquals(56, Node.CHANGE_TIME);
250:       assertEquals(57, Node.REFLECTED_OBJECT);
251:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
252:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
253:       assertEquals(36, Node.QUOTED_PROP);
254:       assertEquals(55, Node.INFERRED_FUNCTION);
255:       assertEquals(4095, Node.COLUMN_MASK);
256:       assertEquals(53, Node.INPUT_ID);
257:       assertEquals(39, Node.EMPTY_BLOCK);
258:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
259:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
260:       assertEquals(50, Node.FREE_CALL);
261:       assertEquals(40, Node.ORIGINALNAME_PROP);
262:       assertEquals(47, Node.IS_DISPATCHER);
263:       assertEquals(2, Node.POST_FLAG);
264:       assertEquals(54, Node.SLASH_V);
265:       assertEquals(43, Node.IS_CONSTANT_NAME);
266:       assertEquals(46, Node.IS_NAMESPACE);
267:       assertNotNull(node1);
268:       assertFalse(node1.equals((Object)node0));
269:       assertFalse(node1.isVar());
270:       assertFalse(node1.isCall());
271:       assertFalse(node1.isAdd());
272:       assertFalse(node1.isBlock());
273:       assertFalse(node1.isSetterDef());
274:       assertFalse(node1.isDo());
275:       assertFalse(node1.isWhile());
276:       assertFalse(node1.isNew());
277:       assertFalse(node1.isCatch());
278:       assertFalse(node1.isReturn());
279:       assertFalse(node1.isOr());
280:       assertFalse(node1.hasMoreThanOneChild());
281:       assertFalse(node1.isTrue());
282:       assertFalse(node1.isNull());
283:       assertFalse(node1.isVoid());
284:       assertFalse(node1.isName());
285:       assertFalse(node1.isCast());
286:       assertTrue(node1.isRegExp());
287:       assertFalse(node1.isGetElem());
288:       assertFalse(node1.isAssign());
289:       assertEquals(38, node1.getLineno());
290:       assertFalse(node1.isFunction());
291:       assertFalse(node1.isTypeOf());
292:       assertFalse(node1.isDec());
293:       assertFalse(node1.hasChildren());
294:       assertFalse(node1.isNot());
295:       assertFalse(node1.isString());
296:       assertFalse(node1.isObjectLit());
297:       assertFalse(node1.isContinue());
298:       assertFalse(node1.isDebugger());
299:       assertFalse(node1.isAnd());
300:       assertFalse(node1.isThrow());
301:       assertFalse(node1.isHook());
302:       assertFalse(node1.isFalse());
303:       assertFalse(node1.isComma());
304:       assertEquals(155652, node1.getSourcePosition());
305:       assertFalse(node1.isGetProp());
306:       assertFalse(node1.isThis());
307:       assertFalse(node1.isInc());
308:       assertFalse(node1.isCase());
309:       assertFalse(node1.isInstanceOf());
310:       assertFalse(node1.isIn());
311:       assertFalse(node1.isWith());
312:       assertFalse(node1.isNE());
313:       assertFalse(node1.isBreak());
314:       assertFalse(node1.isExprResult());
315:       assertFalse(node1.isDelProp());
316:       assertFalse(node1.isIf());
317:       assertEquals(4, node1.getCharno());
318:       assertFalse(node1.isArrayLit());
319:       assertFalse(node1.hasOneChild());
320:       assertFalse(node1.isEmpty());
321:       assertFalse(node1.isGetterDef());
322:       assertFalse(node1.isNumber());
323:       assertFalse(node1.isScript());
324:       assertFalse(node1.isAssignAdd());
325:       assertEquals(47, node1.getType());
326:       assertFalse(node1.isFor());
327:       assertFalse(node1.isTry());
328:       assertFalse(node1.isDefaultCase());
329:       assertFalse(node1.isLabel());
330:       assertEquals(0, node1.getChildCount());
331:       assertFalse(node1.isSwitch());
332:       assertFalse(node1.isParamList());
333:       assertFalse(node1.isLabelName());
334:       assertFalse(node1.isStringKey());
335:       
336:       Node node2 = new Node(57, node0, node1, node1, node0, 1022, 799);
337:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
338:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
339:       assertEquals(40, Node.ORIGINALNAME_PROP);
340:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
341:       assertEquals(39, Node.EMPTY_BLOCK);
342:       assertEquals(48, Node.DIRECTIVES);
343:       assertEquals(52, Node.LENGTH);
344:       assertEquals(57, Node.REFLECTED_OBJECT);
345:       assertEquals(54, Node.SLASH_V);
346:       assertEquals(55, Node.INFERRED_FUNCTION);
347:       assertEquals(8, Node.FLAG_NO_THROWS);
348:       assertEquals(50, Node.FREE_CALL);
349:       assertEquals(57, Node.LAST_PROP);
350:       assertEquals(43, Node.IS_CONSTANT_NAME);
351:       assertEquals(15, Node.NO_SIDE_EFFECTS);
352:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
353:       assertEquals(2, Node.POST_FLAG);
354:       assertEquals(30, Node.VAR_ARGS_NAME);
355:       assertEquals(47, Node.IS_DISPATCHER);
356:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
357:       assertEquals(56, Node.CHANGE_TIME);
358:       assertEquals(29, Node.JSDOC_INFO_PROP);
359:       assertEquals(37, Node.OPT_ARG_NAME);
360:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
361:       assertEquals(53, Node.INPUT_ID);
362:       assertEquals(46, Node.IS_NAMESPACE);
363:       assertEquals(51, Node.STATIC_SOURCE_FILE);
364:       assertEquals(36, Node.QUOTED_PROP);
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(1, Node.DECR_FLAG);
367:       assertEquals(49, Node.DIRECT_EVAL);
368:       assertEquals(32, Node.INCRDECR_PROP);
369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
371:       assertEquals(12, Node.COLUMN_BITS);
372:       assertEquals(4095, Node.COLUMN_MASK);
373:       assertEquals(30, Node.VAR_ARGS_NAME);
374:       assertEquals(49, Node.DIRECT_EVAL);
375:       assertEquals(1, Node.DECR_FLAG);
376:       assertEquals(15, Node.NO_SIDE_EFFECTS);
377:       assertEquals(51, Node.STATIC_SOURCE_FILE);
378:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
379:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
380:       assertEquals(12, Node.COLUMN_BITS);
381:       assertEquals(32, Node.INCRDECR_PROP);
382:       assertEquals(57, Node.LAST_PROP);
383:       assertEquals(29, Node.JSDOC_INFO_PROP);
384:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
385:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
386:       assertEquals(8, Node.FLAG_NO_THROWS);
387:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
388:       assertEquals(52, Node.LENGTH);
389:       assertEquals(48, Node.DIRECTIVES);
390:       assertEquals(37, Node.OPT_ARG_NAME);
391:       assertEquals(56, Node.CHANGE_TIME);
392:       assertEquals(57, Node.REFLECTED_OBJECT);
393:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
394:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
395:       assertEquals(36, Node.QUOTED_PROP);
396:       assertEquals(55, Node.INFERRED_FUNCTION);
397:       assertEquals(4095, Node.COLUMN_MASK);
398:       assertEquals(53, Node.INPUT_ID);
399:       assertEquals(39, Node.EMPTY_BLOCK);
400:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
401:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
402:       assertEquals(50, Node.FREE_CALL);
403:       assertEquals(40, Node.ORIGINALNAME_PROP);
404:       assertEquals(47, Node.IS_DISPATCHER);
405:       assertEquals(2, Node.POST_FLAG);
406:       assertEquals(54, Node.SLASH_V);
407:       assertEquals(43, Node.IS_CONSTANT_NAME);
408:       assertEquals(46, Node.IS_NAMESPACE);
409:       assertEquals(51, Node.STATIC_SOURCE_FILE);
410:       assertEquals(12, Node.COLUMN_BITS);
411:       assertEquals(30, Node.VAR_ARGS_NAME);
412:       assertEquals(46, Node.IS_NAMESPACE);
413:       assertEquals(54, Node.SLASH_V);
414:       assertEquals(56, Node.CHANGE_TIME);
415:       assertEquals(37, Node.OPT_ARG_NAME);
416:       assertEquals(49, Node.DIRECT_EVAL);
417:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
418:       assertEquals(40, Node.ORIGINALNAME_PROP);
419:       assertEquals(29, Node.JSDOC_INFO_PROP);
420:       assertEquals(57, Node.REFLECTED_OBJECT);
421:       assertEquals(47, Node.IS_DISPATCHER);
422:       assertEquals(8, Node.FLAG_NO_THROWS);
423:       assertEquals(2, Node.POST_FLAG);
424:       assertEquals(53, Node.INPUT_ID);
425:       assertEquals(52, Node.LENGTH);
426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
427:       assertEquals(39, Node.EMPTY_BLOCK);
428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
429:       assertEquals(57, Node.LAST_PROP);
430:       assertEquals(55, Node.INFERRED_FUNCTION);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(36, Node.QUOTED_PROP);
433:       assertEquals(4095, Node.COLUMN_MASK);
434:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
435:       assertEquals(43, Node.IS_CONSTANT_NAME);
436:       assertEquals(48, Node.DIRECTIVES);
437:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
438:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
439:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
440:       assertEquals(50, Node.FREE_CALL);
441:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
443:       assertEquals(32, Node.INCRDECR_PROP);
444:       assertEquals(1, Node.DECR_FLAG);
445:       assertNotNull(node2);
446:       assertFalse(node0.equals((Object)node1));
447:       assertFalse(node1.equals((Object)node0));
448:       assertFalse(node2.equals((Object)node0));
449:       assertFalse(node2.equals((Object)node1));
450:       assertFalse(node0.isAnd());
451:       assertFalse(node0.isObjectLit());
452:       assertFalse(node0.isInstanceOf());
453:       assertFalse(node0.isGetProp());
454:       assertFalse(node0.isScript());
455:       assertFalse(node0.isNot());
456:       assertEquals(3768, node0.getLineno());
457:       assertFalse(node0.isFalse());
458:       assertFalse(node0.isThrow());
459:       assertFalse(node0.isCast());
460:       assertFalse(node0.isLabelName());
461:       assertEquals(15437496, node0.getSourcePosition());
462:       assertFalse(node0.isAssignAdd());
463:       assertFalse(node0.isLabel());
464:       assertFalse(node0.hasMoreThanOneChild());
465:       assertFalse(node0.isCase());
466:       assertFalse(node0.isInc());
467:       assertFalse(node0.isSwitch());
468:       assertFalse(node0.isNE());
469:       assertFalse(node0.isIn());
470:       assertFalse(node0.isGetterDef());
471:       assertFalse(node0.isFor());
472:       assertFalse(node0.isIf());
473:       assertFalse(node0.isTry());
474:       assertFalse(node0.hasOneChild());
475:       assertFalse(node0.isThis());
476:       assertFalse(node0.isBlock());
477:       assertFalse(node0.isHook());
478:       assertEquals(39, node0.getType());
479:       assertFalse(node0.isWith());
480:       assertFalse(node0.isRegExp());
481:       assertFalse(node0.isCatch());
482:       assertFalse(node0.isDefaultCase());
483:       assertFalse(node0.isVoid());
484:       assertFalse(node0.isDebugger());
485:       assertFalse(node0.isTrue());
486:       assertFalse(node0.isSetterDef());
487:       assertFalse(node0.isNull());
488:       assertFalse(node0.isParamList());
489:       assertFalse(node0.isEmpty());
490:       assertFalse(node0.isVar());
491:       assertFalse(node0.isStringKey());
492:       assertFalse(node0.isArrayLit());
493:       assertFalse(node0.isNew());
494:       assertEquals(3768, node0.getCharno());
495:       assertFalse(node0.isFunction());
496:       assertEquals(0, node0.getChildCount());
497:       assertFalse(node0.isContinue());
498:       assertFalse(node0.isWhile());
499:       assertFalse(node0.isDo());
500:       assertTrue(node0.isNumber());
501:       assertFalse(node0.isAdd());
502:       assertFalse(node0.isString());
503:       assertFalse(node0.isOr());
504:       assertFalse(node0.isCall());
505:       assertFalse(node0.isGetElem());
506:       assertFalse(node0.isBreak());
507:       assertFalse(node0.isDelProp());
508:       assertFalse(node0.isName());
509:       assertFalse(node0.isExprResult());
510:       assertFalse(node0.hasChildren());
511:       assertFalse(node0.isReturn());
512:       assertFalse(node0.isAssign());
513:       assertFalse(node0.isTypeOf());
514:       assertFalse(node0.isComma());
515:       assertFalse(node0.isDec());
516:       assertFalse(node1.isVar());
517:       assertFalse(node1.isCall());
518:       assertFalse(node1.isAdd());
519:       assertFalse(node1.isBlock());
520:       assertFalse(node1.isSetterDef());
521:       assertFalse(node1.isDo());
522:       assertFalse(node1.isWhile());
523:       assertFalse(node1.isNew());
524:       assertFalse(node1.isCatch());
525:       assertFalse(node1.isReturn());
526:       assertFalse(node1.isOr());
527:       assertFalse(node1.hasMoreThanOneChild());
528:       assertFalse(node1.isTrue());
529:       assertFalse(node1.isNull());
530:       assertFalse(node1.isVoid());
531:       assertFalse(node1.isName());
532:       assertFalse(node1.isCast());
533:       assertTrue(node1.isRegExp());
534:       assertFalse(node1.isGetElem());
535:       assertFalse(node1.isAssign());
536:       assertEquals(38, node1.getLineno());
537:       assertFalse(node1.isFunction());
538:       assertFalse(node1.isTypeOf());
539:       assertFalse(node1.isDec());
540:       assertFalse(node1.hasChildren());
541:       assertFalse(node1.isNot());
542:       assertFalse(node1.isString());
543:       assertFalse(node1.isObjectLit());
544:       assertFalse(node1.isContinue());
545:       assertFalse(node1.isDebugger());
546:       assertFalse(node1.isAnd());
547:       assertFalse(node1.isThrow());
548:       assertFalse(node1.isHook());
549:       assertFalse(node1.isFalse());
550:       assertFalse(node1.isComma());
551:       assertEquals(155652, node1.getSourcePosition());
552:       assertFalse(node1.isGetProp());
553:       assertFalse(node1.isThis());
554:       assertFalse(node1.isInc());
555:       assertFalse(node1.isCase());
556:       assertFalse(node1.isInstanceOf());
557:       assertFalse(node1.isIn());
558:       assertFalse(node1.isWith());
559:       assertFalse(node1.isNE());
560:       assertFalse(node1.isBreak());
561:       assertFalse(node1.isExprResult());
562:       assertFalse(node1.isDelProp());
563:       assertFalse(node1.isIf());
564:       assertEquals(4, node1.getCharno());
565:       assertFalse(node1.isArrayLit());
566:       assertFalse(node1.hasOneChild());
567:       assertFalse(node1.isEmpty());
568:       assertFalse(node1.isGetterDef());
569:       assertFalse(node1.isNumber());
570:       assertFalse(node1.isScript());
571:       assertFalse(node1.isAssignAdd());
572:       assertEquals(47, node1.getType());
573:       assertFalse(node1.isFor());
574:       assertFalse(node1.isTry());
575:       assertFalse(node1.isDefaultCase());
576:       assertFalse(node1.isLabel());
577:       assertEquals(0, node1.getChildCount());
578:       assertFalse(node1.isSwitch());
579:       assertFalse(node1.isParamList());
580:       assertFalse(node1.isLabelName());
581:       assertFalse(node1.isStringKey());
582:       assertFalse(node2.isVar());
583:       assertFalse(node2.isCall());
584:       assertFalse(node2.isStringKey());
585:       assertFalse(node2.isBlock());
586:       assertFalse(node2.isNull());
587:       assertEquals(4186911, node2.getSourcePosition());
588:       assertFalse(node2.isParamList());
589:       assertFalse(node2.isName());
590:       assertFalse(node2.isContinue());
591:       assertFalse(node2.isOr());
592:       assertFalse(node2.isLabel());
593:       assertFalse(node2.isDefaultCase());
594:       assertFalse(node2.isSetterDef());
595:       assertFalse(node2.isAssignAdd());
596:       assertFalse(node2.isDo());
597:       assertFalse(node2.isAdd());
598:       assertFalse(node2.isNew());
599:       assertFalse(node2.isCast());
600:       assertEquals(57, node2.getType());
601:       assertFalse(node2.isAssign());
602:       assertTrue(node2.hasOneChild());
603:       assertFalse(node2.isDebugger());
604:       assertEquals(799, node2.getCharno());
605:       assertFalse(node2.isDec());
606:       assertFalse(node2.isTypeOf());
607:       assertFalse(node2.isFunction());
608:       assertFalse(node2.isTrue());
609:       assertFalse(node2.isExprResult());
610:       assertFalse(node2.isGetElem());
611:       assertFalse(node2.isDelProp());
612:       assertFalse(node2.isVoid());
613:       assertFalse(node2.isAnd());
614:       assertFalse(node2.isNot());
615:       assertFalse(node2.isReturn());
616:       assertFalse(node2.isObjectLit());
617:       assertFalse(node2.isComma());
618:       assertFalse(node2.isWhile());
619:       assertFalse(node2.isString());
620:       assertFalse(node2.isGetProp());
621:       assertFalse(node2.isHook());
622:       assertFalse(node2.isThrow());
623:       assertFalse(node2.isFalse());
624:       assertFalse(node2.isSwitch());
625:       assertFalse(node2.isBreak());
626:       assertEquals(1022, node2.getLineno());
627:       assertFalse(node2.isIn());
628:       assertFalse(node2.isInc());
629:       assertFalse(node2.isEmpty());
630:       assertFalse(node2.isArrayLit());
631:       assertFalse(node2.isFor());
632:       assertFalse(node2.isGetterDef());
633:       assertFalse(node2.isNE());
634:       assertFalse(node2.isRegExp());
635:       assertFalse(node2.isIf());
636:       assertTrue(node2.hasChildren());
637:       assertFalse(node2.isLabelName());
638:       assertFalse(node2.hasMoreThanOneChild());
639:       assertFalse(node2.isInstanceOf());
640:       assertFalse(node2.isCatch());
641:       assertFalse(node2.isWith());
642:       assertEquals(1, node2.getChildCount());
643:       assertFalse(node2.isScript());
644:       assertFalse(node2.isThis());
645:       assertFalse(node2.isNumber());
646:       assertFalse(node2.isTry());
647:       assertFalse(node2.isCase());
648:       
649:       boolean boolean1 = node1.isEmpty();
650:       assertFalse(boolean1);
651:       assertEquals(30, Node.VAR_ARGS_NAME);
652:       assertEquals(49, Node.DIRECT_EVAL);
653:       assertEquals(1, Node.DECR_FLAG);
654:       assertEquals(15, Node.NO_SIDE_EFFECTS);
655:       assertEquals(51, Node.STATIC_SOURCE_FILE);
656:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
657:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
658:       assertEquals(12, Node.COLUMN_BITS);
659:       assertEquals(32, Node.INCRDECR_PROP);
660:       assertEquals(57, Node.LAST_PROP);
661:       assertEquals(29, Node.JSDOC_INFO_PROP);
662:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
663:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
664:       assertEquals(8, Node.FLAG_NO_THROWS);
665:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
666:       assertEquals(52, Node.LENGTH);
667:       assertEquals(48, Node.DIRECTIVES);
668:       assertEquals(37, Node.OPT_ARG_NAME);
669:       assertEquals(56, Node.CHANGE_TIME);
670:       assertEquals(57, Node.REFLECTED_OBJECT);
671:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
672:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
673:       assertEquals(36, Node.QUOTED_PROP);
674:       assertEquals(55, Node.INFERRED_FUNCTION);
675:       assertEquals(4095, Node.COLUMN_MASK);
676:       assertEquals(53, Node.INPUT_ID);
677:       assertEquals(39, Node.EMPTY_BLOCK);
678:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
679:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
680:       assertEquals(50, Node.FREE_CALL);
681:       assertEquals(40, Node.ORIGINALNAME_PROP);
682:       assertEquals(47, Node.IS_DISPATCHER);
683:       assertEquals(2, Node.POST_FLAG);
684:       assertEquals(54, Node.SLASH_V);
685:       assertEquals(43, Node.IS_CONSTANT_NAME);
686:       assertEquals(46, Node.IS_NAMESPACE);
687:       assertFalse(node1.equals((Object)node2));
688:       assertFalse(node1.equals((Object)node0));
689:       assertTrue(boolean1 == boolean0);
690:       assertFalse(node1.isVar());
691:       assertFalse(node1.isCall());
692:       assertFalse(node1.isAdd());
693:       assertFalse(node1.isBlock());
694:       assertFalse(node1.isSetterDef());
695:       assertFalse(node1.isDo());
696:       assertFalse(node1.isWhile());
697:       assertFalse(node1.isNew());
698:       assertFalse(node1.isCatch());
699:       assertFalse(node1.isReturn());
700:       assertFalse(node1.isOr());
701:       assertFalse(node1.hasMoreThanOneChild());
702:       assertFalse(node1.isTrue());
703:       assertFalse(node1.isNull());
704:       assertFalse(node1.isVoid());
705:       assertFalse(node1.isName());
706:       assertFalse(node1.isCast());
707:       assertTrue(node1.isRegExp());
708:       assertFalse(node1.isGetElem());
709:       assertFalse(node1.isAssign());
710:       assertEquals(38, node1.getLineno());
711:       assertFalse(node1.isFunction());
712:       assertFalse(node1.isTypeOf());
713:       assertFalse(node1.isDec());
714:       assertFalse(node1.hasChildren());
715:       assertFalse(node1.isNot());
716:       assertFalse(node1.isString());
717:       assertFalse(node1.isObjectLit());
718:       assertFalse(node1.isContinue());
719:       assertFalse(node1.isDebugger());
720:       assertFalse(node1.isAnd());
721:       assertFalse(node1.isThrow());
722:       assertFalse(node1.isHook());
723:       assertFalse(node1.isFalse());
724:       assertFalse(node1.isComma());
725:       assertEquals(155652, node1.getSourcePosition());
726:       assertFalse(node1.isGetProp());
727:       assertFalse(node1.isThis());
728:       assertFalse(node1.isInc());
729:       assertFalse(node1.isCase());
730:       assertFalse(node1.isInstanceOf());
731:       assertFalse(node1.isIn());
732:       assertFalse(node1.isWith());
733:       assertFalse(node1.isNE());
734:       assertFalse(node1.isBreak());
735:       assertFalse(node1.isExprResult());
736:       assertFalse(node1.isDelProp());
737:       assertFalse(node1.isIf());
738:       assertEquals(4, node1.getCharno());
739:       assertFalse(node1.isArrayLit());
740:       assertFalse(node1.hasOneChild());
741:       assertFalse(node1.isEmpty());
742:       assertFalse(node1.isGetterDef());
743:       assertFalse(node1.isNumber());
744:       assertFalse(node1.isScript());
745:       assertFalse(node1.isAssignAdd());
746:       assertEquals(47, node1.getType());
747:       assertFalse(node1.isFor());
748:       assertFalse(node1.isTry());
749:       assertFalse(node1.isDefaultCase());
750:       assertFalse(node1.isLabel());
751:       assertEquals(0, node1.getChildCount());
752:       assertFalse(node1.isSwitch());
753:       assertFalse(node1.isParamList());
754:       assertFalse(node1.isLabelName());
755:       assertFalse(node1.isStringKey());
756:       
757:       boolean boolean2 = node1.isDo();
758:       assertFalse(boolean2);
759:       assertEquals(30, Node.VAR_ARGS_NAME);
760:       assertEquals(49, Node.DIRECT_EVAL);
761:       assertEquals(1, Node.DECR_FLAG);
762:       assertEquals(15, Node.NO_SIDE_EFFECTS);
763:       assertEquals(51, Node.STATIC_SOURCE_FILE);
764:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
765:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
766:       assertEquals(12, Node.COLUMN_BITS);
767:       assertEquals(32, Node.INCRDECR_PROP);
768:       assertEquals(57, Node.LAST_PROP);
769:       assertEquals(29, Node.JSDOC_INFO_PROP);
770:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
771:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
772:       assertEquals(8, Node.FLAG_NO_THROWS);
773:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
774:       assertEquals(52, Node.LENGTH);
775:       assertEquals(48, Node.DIRECTIVES);
776:       assertEquals(37, Node.OPT_ARG_NAME);
777:       assertEquals(56, Node.CHANGE_TIME);
778:       assertEquals(57, Node.REFLECTED_OBJECT);
779:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
780:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
781:       assertEquals(36, Node.QUOTED_PROP);
782:       assertEquals(55, Node.INFERRED_FUNCTION);
783:       assertEquals(4095, Node.COLUMN_MASK);
784:       assertEquals(53, Node.INPUT_ID);
785:       assertEquals(39, Node.EMPTY_BLOCK);
786:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
787:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
788:       assertEquals(50, Node.FREE_CALL);
789:       assertEquals(40, Node.ORIGINALNAME_PROP);
790:       assertEquals(47, Node.IS_DISPATCHER);
791:       assertEquals(2, Node.POST_FLAG);
792:       assertEquals(54, Node.SLASH_V);
793:       assertEquals(43, Node.IS_CONSTANT_NAME);
794:       assertEquals(46, Node.IS_NAMESPACE);
795:       assertFalse(node1.equals((Object)node2));
796:       assertFalse(node1.equals((Object)node0));
797:       assertTrue(boolean2 == boolean0);
798:       assertTrue(boolean2 == boolean1);
799:       assertFalse(node1.isVar());
800:       assertFalse(node1.isCall());
801:       assertFalse(node1.isAdd());
802:       assertFalse(node1.isBlock());
803:       assertFalse(node1.isSetterDef());
804:       assertFalse(node1.isDo());
805:       assertFalse(node1.isWhile());
806:       assertFalse(node1.isNew());
807:       assertFalse(node1.isCatch());
808:       assertFalse(node1.isReturn());
809:       assertFalse(node1.isOr());
810:       assertFalse(node1.hasMoreThanOneChild());
811:       assertFalse(node1.isTrue());
812:       assertFalse(node1.isNull());
813:       assertFalse(node1.isVoid());
814:       assertFalse(node1.isName());
815:       assertFalse(node1.isCast());
816:       assertTrue(node1.isRegExp());
817:       assertFalse(node1.isGetElem());
818:       assertFalse(node1.isAssign());
819:       assertEquals(38, node1.getLineno());
820:       assertFalse(node1.isFunction());
821:       assertFalse(node1.isTypeOf());
822:       assertFalse(node1.isDec());
823:       assertFalse(node1.hasChildren());
824:       assertFalse(node1.isNot());
825:       assertFalse(node1.isString());
826:       assertFalse(node1.isObjectLit());
827:       assertFalse(node1.isContinue());
828:       assertFalse(node1.isDebugger());
829:       assertFalse(node1.isAnd());
830:       assertFalse(node1.isThrow());
831:       assertFalse(node1.isHook());
832:       assertFalse(node1.isFalse());
833:       assertFalse(node1.isComma());
834:       assertEquals(155652, node1.getSourcePosition());
835:       assertFalse(node1.isGetProp());
836:       assertFalse(node1.isThis());
837:       assertFalse(node1.isInc());
838:       assertFalse(node1.isCase());
839:       assertFalse(node1.isInstanceOf());
840:       assertFalse(node1.isIn());
841:       assertFalse(node1.isWith());
842:       assertFalse(node1.isNE());
843:       assertFalse(node1.isBreak());
844:       assertFalse(node1.isExprResult());
845:       assertFalse(node1.isDelProp());
846:       assertFalse(node1.isIf());
847:       assertEquals(4, node1.getCharno());
848:       assertFalse(node1.isArrayLit());
849:       assertFalse(node1.hasOneChild());
850:       assertFalse(node1.isEmpty());
851:       assertFalse(node1.isGetterDef());
852:       assertFalse(node1.isNumber());
853:       assertFalse(node1.isScript());
854:       assertFalse(node1.isAssignAdd());
855:       assertEquals(47, node1.getType());
856:       assertFalse(node1.isFor());
857:       assertFalse(node1.isTry());
858:       assertFalse(node1.isDefaultCase());
859:       assertFalse(node1.isLabel());
860:       assertEquals(0, node1.getChildCount());
861:       assertFalse(node1.isSwitch());
862:       assertFalse(node1.isParamList());
863:       assertFalse(node1.isLabelName());
864:       assertFalse(node1.isStringKey());
865:       
866:       Iterable<Node> iterable0 = node0.children();
867:       assertFalse(iterable0.contains(node1));
868:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
869:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
870:       assertEquals(40, Node.ORIGINALNAME_PROP);
871:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
872:       assertEquals(39, Node.EMPTY_BLOCK);
873:       assertEquals(48, Node.DIRECTIVES);
874:       assertEquals(52, Node.LENGTH);
875:       assertEquals(57, Node.REFLECTED_OBJECT);
876:       assertEquals(54, Node.SLASH_V);
877:       assertEquals(55, Node.INFERRED_FUNCTION);
878:       assertEquals(8, Node.FLAG_NO_THROWS);
879:       assertEquals(50, Node.FREE_CALL);
880:       assertEquals(57, Node.LAST_PROP);
881:       assertEquals(43, Node.IS_CONSTANT_NAME);
882:       assertEquals(15, Node.NO_SIDE_EFFECTS);
883:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
884:       assertEquals(2, Node.POST_FLAG);
885:       assertEquals(30, Node.VAR_ARGS_NAME);
886:       assertEquals(47, Node.IS_DISPATCHER);
887:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
888:       assertEquals(56, Node.CHANGE_TIME);
889:       assertEquals(29, Node.JSDOC_INFO_PROP);
890:       assertEquals(37, Node.OPT_ARG_NAME);
891:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
892:       assertEquals(53, Node.INPUT_ID);
893:       assertEquals(46, Node.IS_NAMESPACE);
894:       assertEquals(51, Node.STATIC_SOURCE_FILE);
895:       assertEquals(36, Node.QUOTED_PROP);
896:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
897:       assertEquals(1, Node.DECR_FLAG);
898:       assertEquals(49, Node.DIRECT_EVAL);
899:       assertEquals(32, Node.INCRDECR_PROP);
900:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
901:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
902:       assertEquals(12, Node.COLUMN_BITS);
903:       assertEquals(4095, Node.COLUMN_MASK);
904:       assertNotNull(iterable0);
905:       assertFalse(node0.equals((Object)node1));
906:       assertFalse(node0.equals((Object)node2));
907:       assertFalse(node0.isAnd());
908:       assertFalse(node0.isObjectLit());
909:       assertFalse(node0.isInstanceOf());
910:       assertFalse(node0.isGetProp());
911:       assertFalse(node0.isScript());
912:       assertFalse(node0.isNot());
913:       assertEquals(3768, node0.getLineno());
914:       assertFalse(node0.isFalse());
915:       assertFalse(node0.isThrow());
916:       assertFalse(node0.isCast());
917:       assertFalse(node0.isLabelName());
918:       assertEquals(15437496, node0.getSourcePosition());
919:       assertFalse(node0.isAssignAdd());
920:       assertFalse(node0.isLabel());
921:       assertFalse(node0.hasMoreThanOneChild());
922:       assertFalse(node0.isCase());
923:       assertFalse(node0.isInc());
924:       assertFalse(node0.isSwitch());
925:       assertFalse(node0.isNE());
926:       assertFalse(node0.isIn());
927:       assertFalse(node0.isGetterDef());
928:       assertFalse(node0.isFor());
929:       assertFalse(node0.isIf());
930:       assertFalse(node0.isTry());
931:       assertFalse(node0.hasOneChild());
932:       assertFalse(node0.isThis());
933:       assertFalse(node0.isBlock());
934:       assertFalse(node0.isHook());
935:       assertEquals(39, node0.getType());
936:       assertFalse(node0.isWith());
937:       assertFalse(node0.isRegExp());
938:       assertFalse(node0.isCatch());
939:       assertFalse(node0.isDefaultCase());
940:       assertFalse(node0.isVoid());
941:       assertFalse(node0.isDebugger());
942:       assertFalse(node0.isTrue());
943:       assertFalse(node0.isSetterDef());
944:       assertFalse(node0.isNull());
945:       assertFalse(node0.isParamList());
946:       assertFalse(node0.isEmpty());
947:       assertFalse(node0.isVar());
948:       assertFalse(node0.isStringKey());
949:       assertFalse(node0.isArrayLit());
950:       assertFalse(node0.isNew());
951:       assertEquals(3768, node0.getCharno());
952:       assertFalse(node0.isFunction());
953:       assertEquals(0, node0.getChildCount());
954:       assertFalse(node0.isContinue());
955:       assertFalse(node0.isWhile());
956:       assertFalse(node0.isDo());
957:       assertTrue(node0.isNumber());
958:       assertFalse(node0.isAdd());
959:       assertFalse(node0.isString());
960:       assertFalse(node0.isOr());
961:       assertFalse(node0.isCall());
962:       assertFalse(node0.isGetElem());
963:       assertFalse(node0.isBreak());
964:       assertFalse(node0.isDelProp());
965:       assertFalse(node0.isName());
966:       assertFalse(node0.isExprResult());
967:       assertFalse(node0.hasChildren());
968:       assertFalse(node0.isReturn());
969:       assertFalse(node0.isAssign());
970:       assertFalse(node0.isTypeOf());
971:       assertFalse(node0.isComma());
972:       assertFalse(node0.isDec());
973:       
974:       boolean boolean3 = node0.isCall();
975:       assertFalse(boolean3);
976:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
977:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
978:       assertEquals(40, Node.ORIGINALNAME_PROP);
979:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
980:       assertEquals(39, Node.EMPTY_BLOCK);
981:       assertEquals(48, Node.DIRECTIVES);
982:       assertEquals(52, Node.LENGTH);
983:       assertEquals(57, Node.REFLECTED_OBJECT);
984:       assertEquals(54, Node.SLASH_V);
985:       assertEquals(55, Node.INFERRED_FUNCTION);
986:       assertEquals(8, Node.FLAG_NO_THROWS);
987:       assertEquals(50, Node.FREE_CALL);
988:       assertEquals(57, Node.LAST_PROP);
989:       assertEquals(43, Node.IS_CONSTANT_NAME);
990:       assertEquals(15, Node.NO_SIDE_EFFECTS);
991:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
992:       assertEquals(2, Node.POST_FLAG);
993:       assertEquals(30, Node.VAR_ARGS_NAME);
994:       assertEquals(47, Node.IS_DISPATCHER);
995:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
996:       assertEquals(56, Node.CHANGE_TIME);
997:       assertEquals(29, Node.JSDOC_INFO_PROP);
998:       assertEquals(37, Node.OPT_ARG_NAME);
999:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1000:       assertEquals(53, Node.INPUT_ID);
1001:       assertEquals(46, Node.IS_NAMESPACE);
1002:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1003:       assertEquals(36, Node.QUOTED_PROP);
1004:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1005:       assertEquals(1, Node.DECR_FLAG);
1006:       assertEquals(49, Node.DIRECT_EVAL);
1007:       assertEquals(32, Node.INCRDECR_PROP);
1008:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1009:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1010:       assertEquals(12, Node.COLUMN_BITS);
1011:       assertEquals(4095, Node.COLUMN_MASK);
1012:       assertFalse(node0.equals((Object)node1));
1013:       assertFalse(node0.equals((Object)node2));
1014:       assertTrue(boolean3 == boolean1);
1015:       assertTrue(boolean3 == boolean2);
1016:       assertTrue(boolean3 == boolean0);
1017:       assertFalse(node0.isAnd());
1018:       assertFalse(node0.isObjectLit());
1019:       assertFalse(node0.isInstanceOf());
1020:       assertFalse(node0.isGetProp());
1021:       assertFalse(node0.isScript());
1022:       assertFalse(node0.isNot());
1023:       assertEquals(3768, node0.getLineno());
1024:       assertFalse(node0.isFalse());
1025:       assertFalse(node0.isThrow());
1026:       assertFalse(node0.isCast());
1027:       assertFalse(node0.isLabelName());
1028:       assertEquals(15437496, node0.getSourcePosition());
1029:       assertFalse(node0.isAssignAdd());
1030:       assertFalse(node0.isLabel());
1031:       assertFalse(node0.hasMoreThanOneChild());
1032:       assertFalse(node0.isCase());
1033:       assertFalse(node0.isInc());
1034:       assertFalse(node0.isSwitch());
1035:       assertFalse(node0.isNE());
1036:       assertFalse(node0.isIn());
1037:       assertFalse(node0.isGetterDef());
1038:       assertFalse(node0.isFor());
1039:       assertFalse(node0.isIf());
1040:       assertFalse(node0.isTry());
1041:       assertFalse(node0.hasOneChild());
1042:       assertFalse(node0.isThis());
1043:       assertFalse(node0.isBlock());
1044:       assertFalse(node0.isHook());
1045:       assertEquals(39, node0.getType());
1046:       assertFalse(node0.isWith());
1047:       assertFalse(node0.isRegExp());
1048:       assertFalse(node0.isCatch());
1049:       assertFalse(node0.isDefaultCase());
1050:       assertFalse(node0.isVoid());
1051:       assertFalse(node0.isDebugger());
1052:       assertFalse(node0.isTrue());
1053:       assertFalse(node0.isSetterDef());
1054:       assertFalse(node0.isNull());
1055:       assertFalse(node0.isParamList());
1056:       assertFalse(node0.isEmpty());
1057:       assertFalse(node0.isVar());
1058:       assertFalse(node0.isStringKey());
1059:       assertFalse(node0.isArrayLit());
1060:       assertFalse(node0.isNew());
1061:       assertEquals(3768, node0.getCharno());
1062:       assertFalse(node0.isFunction());
1063:       assertEquals(0, node0.getChildCount());
1064:       assertFalse(node0.isContinue());
1065:       assertFalse(node0.isWhile());
1066:       assertFalse(node0.isDo());
1067:       assertTrue(node0.isNumber());
1068:       assertFalse(node0.isAdd());
1069:       assertFalse(node0.isString());
1070:       assertFalse(node0.isOr());
1071:       assertFalse(node0.isCall());
1072:       assertFalse(node0.isGetElem());
1073:       assertFalse(node0.isBreak());
1074:       assertFalse(node0.isDelProp());
1075:       assertFalse(node0.isName());
1076:       assertFalse(node0.isExprResult());
1077:       assertFalse(node0.hasChildren());
1078:       assertFalse(node0.isReturn());
1079:       assertFalse(node0.isAssign());
1080:       assertFalse(node0.isTypeOf());
1081:       assertFalse(node0.isComma());
1082:       assertFalse(node0.isDec());
1083:       
1084:       int int0 = node1.getSourcePosition();
1085:       assertEquals(155652, int0);
1086:       assertEquals(30, Node.VAR_ARGS_NAME);
1087:       assertEquals(49, Node.DIRECT_EVAL);
1088:       assertEquals(1, Node.DECR_FLAG);
1089:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1090:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1091:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1092:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1093:       assertEquals(12, Node.COLUMN_BITS);
1094:       assertEquals(32, Node.INCRDECR_PROP);
1095:       assertEquals(57, Node.LAST_PROP);
1096:       assertEquals(29, Node.JSDOC_INFO_PROP);
1097:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1098:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1099:       assertEquals(8, Node.FLAG_NO_THROWS);
1100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1101:       assertEquals(52, Node.LENGTH);
1102:       assertEquals(48, Node.DIRECTIVES);
1103:       assertEquals(37, Node.OPT_ARG_NAME);
1104:       assertEquals(56, Node.CHANGE_TIME);
1105:       assertEquals(57, Node.REFLECTED_OBJECT);
1106:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1108:       assertEquals(36, Node.QUOTED_PROP);
1109:       assertEquals(55, Node.INFERRED_FUNCTION);
1110:       assertEquals(4095, Node.COLUMN_MASK);
1111:       assertEquals(53, Node.INPUT_ID);
1112:       assertEquals(39, Node.EMPTY_BLOCK);
1113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1114:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1115:       assertEquals(50, Node.FREE_CALL);
1116:       assertEquals(40, Node.ORIGINALNAME_PROP);
1117:       assertEquals(47, Node.IS_DISPATCHER);
1118:       assertEquals(2, Node.POST_FLAG);
1119:       assertEquals(54, Node.SLASH_V);
1120:       assertEquals(43, Node.IS_CONSTANT_NAME);
1121:       assertEquals(46, Node.IS_NAMESPACE);
1122:       assertFalse(node1.equals((Object)node2));
1123:       assertFalse(node1.equals((Object)node0));
1124:       assertFalse(node1.isVar());
1125:       assertFalse(node1.isCall());
1126:       assertFalse(node1.isAdd());
1127:       assertFalse(node1.isBlock());
1128:       assertFalse(node1.isSetterDef());
1129:       assertFalse(node1.isDo());
1130:       assertFalse(node1.isWhile());
1131:       assertFalse(node1.isNew());
1132:       assertFalse(node1.isCatch());
1133:       assertFalse(node1.isReturn());
1134:       assertFalse(node1.isOr());
1135:       assertFalse(node1.hasMoreThanOneChild());
1136:       assertFalse(node1.isTrue());
1137:       assertFalse(node1.isNull());
1138:       assertFalse(node1.isVoid());
1139:       assertFalse(node1.isName());
1140:       assertFalse(node1.isCast());
1141:       assertTrue(node1.isRegExp());
1142:       assertFalse(node1.isGetElem());
1143:       assertFalse(node1.isAssign());
1144:       assertEquals(38, node1.getLineno());
1145:       assertFalse(node1.isFunction());
1146:       assertFalse(node1.isTypeOf());
1147:       assertFalse(node1.isDec());
1148:       assertFalse(node1.hasChildren());
1149:       assertFalse(node1.isNot());
1150:       assertFalse(node1.isString());
1151:       assertFalse(node1.isObjectLit());
1152:       assertFalse(node1.isContinue());
1153:       assertFalse(node1.isDebugger());
1154:       assertFalse(node1.isAnd());
1155:       assertFalse(node1.isThrow());
1156:       assertFalse(node1.isHook());
1157:       assertFalse(node1.isFalse());
1158:       assertFalse(node1.isComma());
1159:       assertEquals(155652, node1.getSourcePosition());
1160:       assertFalse(node1.isGetProp());
1161:       assertFalse(node1.isThis());
1162:       assertFalse(node1.isInc());
1163:       assertFalse(node1.isCase());
1164:       assertFalse(node1.isInstanceOf());
1165:       assertFalse(node1.isIn());
1166:       assertFalse(node1.isWith());
1167:       assertFalse(node1.isNE());
1168:       assertFalse(node1.isBreak());
1169:       assertFalse(node1.isExprResult());
1170:       assertFalse(node1.isDelProp());
1171:       assertFalse(node1.isIf());
1172:       assertEquals(4, node1.getCharno());
1173:       assertFalse(node1.isArrayLit());
1174:       assertFalse(node1.hasOneChild());
1175:       assertFalse(node1.isEmpty());
1176:       assertFalse(node1.isGetterDef());
1177:       assertFalse(node1.isNumber());
1178:       assertFalse(node1.isScript());
1179:       assertFalse(node1.isAssignAdd());
1180:       assertEquals(47, node1.getType());
1181:       assertFalse(node1.isFor());
1182:       assertFalse(node1.isTry());
1183:       assertFalse(node1.isDefaultCase());
1184:       assertFalse(node1.isLabel());
1185:       assertEquals(0, node1.getChildCount());
1186:       assertFalse(node1.isSwitch());
1187:       assertFalse(node1.isParamList());
1188:       assertFalse(node1.isLabelName());
1189:       assertFalse(node1.isStringKey());
1190:       
1191:       Node node3 = node1.cloneTree();
1192:       assertEquals(30, Node.VAR_ARGS_NAME);
1193:       assertEquals(49, Node.DIRECT_EVAL);
1194:       assertEquals(1, Node.DECR_FLAG);
1195:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1196:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1197:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1198:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1199:       assertEquals(12, Node.COLUMN_BITS);
1200:       assertEquals(32, Node.INCRDECR_PROP);
1201:       assertEquals(57, Node.LAST_PROP);
1202:       assertEquals(29, Node.JSDOC_INFO_PROP);
1203:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1204:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1205:       assertEquals(8, Node.FLAG_NO_THROWS);
1206:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1207:       assertEquals(52, Node.LENGTH);
1208:       assertEquals(48, Node.DIRECTIVES);
1209:       assertEquals(37, Node.OPT_ARG_NAME);
1210:       assertEquals(56, Node.CHANGE_TIME);
1211:       assertEquals(57, Node.REFLECTED_OBJECT);
1212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1213:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1214:       assertEquals(36, Node.QUOTED_PROP);
1215:       assertEquals(55, Node.INFERRED_FUNCTION);
1216:       assertEquals(4095, Node.COLUMN_MASK);
1217:       assertEquals(53, Node.INPUT_ID);
1218:       assertEquals(39, Node.EMPTY_BLOCK);
1219:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1220:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1221:       assertEquals(50, Node.FREE_CALL);
1222:       assertEquals(40, Node.ORIGINALNAME_PROP);
1223:       assertEquals(47, Node.IS_DISPATCHER);
1224:       assertEquals(2, Node.POST_FLAG);
1225:       assertEquals(54, Node.SLASH_V);
1226:       assertEquals(43, Node.IS_CONSTANT_NAME);
1227:       assertEquals(46, Node.IS_NAMESPACE);
1228:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1229:       assertEquals(43, Node.IS_CONSTANT_NAME);
1230:       assertEquals(53, Node.INPUT_ID);
1231:       assertEquals(36, Node.QUOTED_PROP);
1232:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1233:       assertEquals(4095, Node.COLUMN_MASK);
1234:       assertEquals(48, Node.DIRECTIVES);
1235:       assertEquals(37, Node.OPT_ARG_NAME);
1236:       assertEquals(46, Node.IS_NAMESPACE);
1237:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1238:       assertEquals(50, Node.FREE_CALL);
1239:       assertEquals(12, Node.COLUMN_BITS);
1240:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1241:       assertEquals(32, Node.INCRDECR_PROP);
1242:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1243:       assertEquals(1, Node.DECR_FLAG);
1244:       assertEquals(54, Node.SLASH_V);
1245:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1246:       assertEquals(52, Node.LENGTH);
1247:       assertEquals(57, Node.REFLECTED_OBJECT);
1248:       assertEquals(30, Node.VAR_ARGS_NAME);
1249:       assertEquals(40, Node.ORIGINALNAME_PROP);
1250:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1251:       assertEquals(49, Node.DIRECT_EVAL);
1252:       assertEquals(8, Node.FLAG_NO_THROWS);
1253:       assertEquals(39, Node.EMPTY_BLOCK);
1254:       assertEquals(56, Node.CHANGE_TIME);
1255:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1256:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1257:       assertEquals(47, Node.IS_DISPATCHER);
1258:       assertEquals(2, Node.POST_FLAG);
1259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1260:       assertEquals(29, Node.JSDOC_INFO_PROP);
1261:       assertEquals(55, Node.INFERRED_FUNCTION);
1262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1263:       assertEquals(57, Node.LAST_PROP);
1264:       assertNotSame(node1, node3);
1265:       assertNotSame(node3, node1);
1266:       assertNotNull(node3);
1267:       assertFalse(node1.equals((Object)node2));
1268:       assertFalse(node1.equals((Object)node0));
1269:       assertFalse(node3.equals((Object)node2));
1270:       assertFalse(node3.equals((Object)node1));
1271:       assertFalse(node3.equals((Object)node0));
1272:       assertFalse(node1.isVar());
1273:       assertFalse(node1.isCall());
1274:       assertFalse(node1.isAdd());
1275:       assertFalse(node1.isBlock());
1276:       assertFalse(node1.isSetterDef());
1277:       assertFalse(node1.isDo());
1278:       assertFalse(node1.isWhile());
1279:       assertFalse(node1.isNew());
1280:       assertFalse(node1.isCatch());
1281:       assertFalse(node1.isReturn());
1282:       assertFalse(node1.isOr());
1283:       assertFalse(node1.hasMoreThanOneChild());
1284:       assertFalse(node1.isTrue());
1285:       assertFalse(node1.isNull());
1286:       assertFalse(node1.isVoid());
1287:       assertFalse(node1.isName());
1288:       assertFalse(node1.isCast());
1289:       assertTrue(node1.isRegExp());
1290:       assertFalse(node1.isGetElem());
1291:       assertFalse(node1.isAssign());
1292:       assertEquals(38, node1.getLineno());
1293:       assertFalse(node1.isFunction());
1294:       assertFalse(node1.isTypeOf());
1295:       assertFalse(node1.isDec());
1296:       assertFalse(node1.hasChildren());
1297:       assertFalse(node1.isNot());
1298:       assertFalse(node1.isString());
1299:       assertFalse(node1.isObjectLit());
1300:       assertFalse(node1.isContinue());
1301:       assertFalse(node1.isDebugger());
1302:       assertFalse(node1.isAnd());
1303:       assertFalse(node1.isThrow());
1304:       assertFalse(node1.isHook());
1305:       assertFalse(node1.isFalse());
1306:       assertFalse(node1.isComma());
1307:       assertEquals(155652, node1.getSourcePosition());
1308:       assertFalse(node1.isGetProp());
1309:       assertFalse(node1.isThis());
1310:       assertFalse(node1.isInc());
1311:       assertFalse(node1.isCase());
1312:       assertFalse(node1.isInstanceOf());
1313:       assertFalse(node1.isIn());
1314:       assertFalse(node1.isWith());
1315:       assertFalse(node1.isNE());
1316:       assertFalse(node1.isBreak());
1317:       assertFalse(node1.isExprResult());
1318:       assertFalse(node1.isDelProp());
1319:       assertFalse(node1.isIf());
1320:       assertEquals(4, node1.getCharno());
1321:       assertFalse(node1.isArrayLit());
1322:       assertFalse(node1.hasOneChild());
1323:       assertFalse(node1.isEmpty());
1324:       assertFalse(node1.isGetterDef());
1325:       assertFalse(node1.isNumber());
1326:       assertFalse(node1.isScript());
1327:       assertFalse(node1.isAssignAdd());
1328:       assertEquals(47, node1.getType());
1329:       assertFalse(node1.isFor());
1330:       assertFalse(node1.isTry());
1331:       assertFalse(node1.isDefaultCase());
1332:       assertFalse(node1.isLabel());
1333:       assertEquals(0, node1.getChildCount());
1334:       assertFalse(node1.isSwitch());
1335:       assertFalse(node1.isParamList());
1336:       assertFalse(node1.isLabelName());
1337:       assertFalse(node1.isStringKey());
1338:       assertFalse(node3.isDec());
1339:       assertFalse(node3.hasChildren());
1340:       assertFalse(node3.isTypeOf());
1341:       assertFalse(node3.isNumber());
1342:       assertFalse(node3.isAssign());
1343:       assertFalse(node3.isOr());
1344:       assertFalse(node3.isLabel());
1345:       assertFalse(node3.isCast());
1346:       assertFalse(node3.hasMoreThanOneChild());
1347:       assertFalse(node3.isGetElem());
1348:       assertFalse(node3.isExprResult());
1349:       assertFalse(node3.isLabelName());
1350:       assertTrue(node3.isRegExp());
1351:       assertFalse(node3.isScript());
1352:       assertFalse(node3.isWith());
1353:       assertFalse(node3.isWhile());
1354:       assertFalse(node3.isObjectLit());
1355:       assertFalse(node3.isBlock());
1356:       assertFalse(node3.isNot());
1357:       assertFalse(node3.isReturn());
1358:       assertFalse(node3.isGetProp());
1359:       assertEquals(47, node3.getType());
1360:       assertFalse(node3.hasOneChild());
1361:       assertFalse(node3.isThrow());
1362:       assertFalse(node3.isFalse());
1363:       assertFalse(node3.isThis());
1364:       assertFalse(node3.isCatch());
1365:       assertFalse(node3.isInstanceOf());
1366:       assertFalse(node3.isAnd());
1367:       assertEquals(4, node3.getCharno());
1368:       assertEquals(155652, node3.getSourcePosition());
1369:       assertFalse(node3.isContinue());
1370:       assertFalse(node3.isFunction());
1371:       assertFalse(node3.isIn());
1372:       assertFalse(node3.isInc());
1373:       assertFalse(node3.isSetterDef());
1374:       assertFalse(node3.isIf());
1375:       assertEquals(38, node3.getLineno());
1376:       assertFalse(node3.isGetterDef());
1377:       assertFalse(node3.isDelProp());
1378:       assertFalse(node3.isNE());
1379:       assertFalse(node3.isEmpty());
1380:       assertFalse(node3.isFor());
1381:       assertFalse(node3.isVoid());
1382:       assertFalse(node3.isArrayLit());
1383:       assertFalse(node3.isSwitch());
1384:       assertFalse(node3.isString());
1385:       assertFalse(node3.isDebugger());
1386:       assertFalse(node3.isHook());
1387:       assertFalse(node3.isTry());
1388:       assertFalse(node3.isCase());
1389:       assertFalse(node3.isBreak());
1390:       assertFalse(node3.isNull());
1391:       assertFalse(node3.isParamList());
1392:       assertFalse(node3.isStringKey());
1393:       assertFalse(node3.isComma());
1394:       assertEquals(0, node3.getChildCount());
1395:       assertFalse(node3.isCall());
1396:       assertFalse(node3.isName());
1397:       assertFalse(node3.isDefaultCase());
1398:       assertFalse(node3.isTrue());
1399:       assertFalse(node3.isVar());
1400:       assertFalse(node3.isAssignAdd());
1401:       assertFalse(node3.isAdd());
1402:       assertFalse(node3.isDo());
1403:       assertFalse(node3.isNew());
1404:   }
1405: }
RegularFileObject[/tmp/EvoSuite_231_1628157900958/com/google/javascript/rhino/Node_231_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:05:01 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_231_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_231_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_231_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:05:01.115 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1078.87509966889, 3768, 3768);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node0);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertEquals(3768, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals(15437496, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertEquals(3768, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());

boolean boolean0 = node0.isContinue();
assertFalse(boolean0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertEquals(3768, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals(15437496, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertEquals(3768, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());

Node node1 = Node.newString(47, "The new child node has siblings.", 38, 4);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCast());
assertTrue(node1.isRegExp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertEquals(38, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertEquals(155652, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertEquals(4, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertEquals(47, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());

Node node2 = new Node(57, node0, node1, node1, node0, 1022, 799);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertEquals(3768, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals(15437496, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertEquals(3768, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCast());
assertTrue(node1.isRegExp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertEquals(38, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertEquals(155652, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertEquals(4, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertEquals(47, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertEquals(4186911, node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCast());
assertEquals(57, node2.getType());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertEquals(799, node2.getCharno());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertEquals(1022, node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertTrue(node2.hasChildren());
assertFalse(node2.isLabelName());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isNumber());
assertFalse(node2.isTry());
assertFalse(node2.isCase());

boolean boolean1 = node1.isEmpty();
assertFalse(boolean1);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCast());
assertTrue(node1.isRegExp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertEquals(38, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertEquals(155652, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertEquals(4, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertEquals(47, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());

boolean boolean2 = node1.isDo();
assertFalse(boolean2);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCast());
assertTrue(node1.isRegExp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertEquals(38, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertEquals(155652, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertEquals(4, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertEquals(47, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertEquals(3768, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals(15437496, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertEquals(3768, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());

boolean boolean3 = node0.isCall();
assertFalse(boolean3);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertEquals(3768, node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals(15437496, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertEquals(3768, node0.getCharno());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());

int int0 = node1.getSourcePosition();
assertEquals(155652, int0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCast());
assertTrue(node1.isRegExp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertEquals(38, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertEquals(155652, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertEquals(4, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertEquals(47, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());

Node node3 = node1.cloneTree();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertNotSame(node1, node3);
assertNotSame(node3, node1);
assertNotNull(node3);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isCatch());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isCast());
assertTrue(node1.isRegExp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertEquals(38, node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertEquals(155652, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertEquals(4, node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertEquals(47, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.isAssign());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isCast());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isLabelName());
assertTrue(node3.isRegExp());
assertFalse(node3.isScript());
assertFalse(node3.isWith());
assertFalse(node3.isWhile());
assertFalse(node3.isObjectLit());
assertFalse(node3.isBlock());
assertFalse(node3.isNot());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertEquals(47, node3.getType());
assertFalse(node3.hasOneChild());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isThis());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAnd());
assertEquals(4, node3.getCharno());
assertEquals(155652, node3.getSourcePosition());
assertFalse(node3.isContinue());
assertFalse(node3.isFunction());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIf());
assertEquals(38, node3.getLineno());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isString());
assertFalse(node3.isDebugger());
assertFalse(node3.isHook());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isComma());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isVar());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertFalse(node3.isNew());


[MASTER] 10:05:02.817 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_245_1628157902791/com/google/javascript/rhino/Node_245_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_245_1628157902791/com/google/javascript/rhino/Node_245_tmp__ESTest_scaffolding.java]]
[MASTER] 10:05:02.817 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:05:02.817 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:05:02.817 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 129
[MASTER] 10:05:02.817 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_245_1628157902791/com/google/javascript/rhino/Node_245_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:05:02 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.JSDocInfo;
13: import com.google.javascript.rhino.Node;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_245_tmp__ESTest extends Node_245_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newString("Node tree inequality:\nTree1:\n", 0, 0);
24:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
25:       assertEquals(55, Node.INFERRED_FUNCTION);
26:       assertEquals(39, Node.EMPTY_BLOCK);
27:       assertEquals(48, Node.DIRECTIVES);
28:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
29:       assertEquals(50, Node.FREE_CALL);
30:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
31:       assertEquals(43, Node.IS_CONSTANT_NAME);
32:       assertEquals(8, Node.FLAG_NO_THROWS);
33:       assertEquals(57, Node.REFLECTED_OBJECT);
34:       assertEquals(36, Node.QUOTED_PROP);
35:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
36:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
37:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
38:       assertEquals(4095, Node.COLUMN_MASK);
39:       assertEquals(12, Node.COLUMN_BITS);
40:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
41:       assertEquals(46, Node.IS_NAMESPACE);
42:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
43:       assertEquals(32, Node.INCRDECR_PROP);
44:       assertEquals(1, Node.DECR_FLAG);
45:       assertEquals(37, Node.OPT_ARG_NAME);
46:       assertEquals(29, Node.JSDOC_INFO_PROP);
47:       assertEquals(49, Node.DIRECT_EVAL);
48:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
49:       assertEquals(56, Node.CHANGE_TIME);
50:       assertEquals(51, Node.STATIC_SOURCE_FILE);
51:       assertEquals(52, Node.LENGTH);
52:       assertEquals(53, Node.INPUT_ID);
53:       assertEquals(54, Node.SLASH_V);
54:       assertEquals(40, Node.ORIGINALNAME_PROP);
55:       assertEquals(15, Node.NO_SIDE_EFFECTS);
56:       assertEquals(30, Node.VAR_ARGS_NAME);
57:       assertEquals(57, Node.LAST_PROP);
58:       assertEquals(2, Node.POST_FLAG);
59:       assertEquals(47, Node.IS_DISPATCHER);
60:       assertNotNull(node0);
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isTrue());
63:       assertFalse(node0.isVoid());
64:       assertFalse(node0.isRegExp());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isTry());
67:       assertFalse(node0.isArrayLit());
68:       assertFalse(node0.isGetterDef());
69:       assertFalse(node0.isDebugger());
70:       assertFalse(node0.isNE());
71:       assertFalse(node0.isNull());
72:       assertFalse(node0.isIf());
73:       assertFalse(node0.isDelProp());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isCatch());
76:       assertFalse(node0.isFor());
77:       assertFalse(node0.isBlock());
78:       assertFalse(node0.isSwitch());
79:       assertTrue(node0.isString());
80:       assertFalse(node0.isDo());
81:       assertFalse(node0.isAdd());
82:       assertFalse(node0.isNew());
83:       assertFalse(node0.isCase());
84:       assertFalse(node0.isStringKey());
85:       assertFalse(node0.isName());
86:       assertFalse(node0.isOr());
87:       assertEquals(0, node0.getSourcePosition());
88:       assertFalse(node0.isParamList());
89:       assertFalse(node0.isAssignAdd());
90:       assertFalse(node0.isEmpty());
91:       assertFalse(node0.isLabelName());
92:       assertFalse(node0.isVar());
93:       assertEquals(0, node0.getChildCount());
94:       assertFalse(node0.isLabel());
95:       assertFalse(node0.isExprResult());
96:       assertEquals(0, node0.getCharno());
97:       assertFalse(node0.isScript());
98:       assertFalse(node0.hasOneChild());
99:       assertFalse(node0.isObjectLit());
100:       assertFalse(node0.isAnd());
101:       assertFalse(node0.isNot());
102:       assertFalse(node0.isComma());
103:       assertFalse(node0.isThis());
104:       assertFalse(node0.isTypeOf());
105:       assertFalse(node0.isNumber());
106:       assertFalse(node0.isGetElem());
107:       assertFalse(node0.isBreak());
108:       assertFalse(node0.isGetProp());
109:       assertFalse(node0.hasMoreThanOneChild());
110:       assertFalse(node0.isInstanceOf());
111:       assertFalse(node0.isReturn());
112:       assertFalse(node0.isWhile());
113:       assertFalse(node0.isWith());
114:       assertFalse(node0.isAssign());
115:       assertFalse(node0.isHook());
116:       assertFalse(node0.isDec());
117:       assertFalse(node0.hasChildren());
118:       assertFalse(node0.isInc());
119:       assertFalse(node0.isIn());
120:       assertFalse(node0.isSetterDef());
121:       assertEquals(0, node0.getLineno());
122:       assertFalse(node0.isThrow());
123:       assertFalse(node0.isCast());
124:       assertFalse(node0.isFalse());
125:       assertFalse(node0.isContinue());
126:       assertEquals(40, node0.getType());
127:       
128:       Iterable<Node> iterable0 = node0.children();
129:       assertFalse(iterable0.contains(node0));
130:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
131:       assertEquals(55, Node.INFERRED_FUNCTION);
132:       assertEquals(39, Node.EMPTY_BLOCK);
133:       assertEquals(48, Node.DIRECTIVES);
134:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
135:       assertEquals(50, Node.FREE_CALL);
136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
137:       assertEquals(43, Node.IS_CONSTANT_NAME);
138:       assertEquals(8, Node.FLAG_NO_THROWS);
139:       assertEquals(57, Node.REFLECTED_OBJECT);
140:       assertEquals(36, Node.QUOTED_PROP);
141:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
142:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
143:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
144:       assertEquals(4095, Node.COLUMN_MASK);
145:       assertEquals(12, Node.COLUMN_BITS);
146:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
147:       assertEquals(46, Node.IS_NAMESPACE);
148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
149:       assertEquals(32, Node.INCRDECR_PROP);
150:       assertEquals(1, Node.DECR_FLAG);
151:       assertEquals(37, Node.OPT_ARG_NAME);
152:       assertEquals(29, Node.JSDOC_INFO_PROP);
153:       assertEquals(49, Node.DIRECT_EVAL);
154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
155:       assertEquals(56, Node.CHANGE_TIME);
156:       assertEquals(51, Node.STATIC_SOURCE_FILE);
157:       assertEquals(52, Node.LENGTH);
158:       assertEquals(53, Node.INPUT_ID);
159:       assertEquals(54, Node.SLASH_V);
160:       assertEquals(40, Node.ORIGINALNAME_PROP);
161:       assertEquals(15, Node.NO_SIDE_EFFECTS);
162:       assertEquals(30, Node.VAR_ARGS_NAME);
163:       assertEquals(57, Node.LAST_PROP);
164:       assertEquals(2, Node.POST_FLAG);
165:       assertEquals(47, Node.IS_DISPATCHER);
166:       assertNotNull(iterable0);
167:       assertFalse(node0.isFunction());
168:       assertFalse(node0.isTrue());
169:       assertFalse(node0.isVoid());
170:       assertFalse(node0.isRegExp());
171:       assertFalse(node0.isDefaultCase());
172:       assertFalse(node0.isTry());
173:       assertFalse(node0.isArrayLit());
174:       assertFalse(node0.isGetterDef());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isNE());
177:       assertFalse(node0.isNull());
178:       assertFalse(node0.isIf());
179:       assertFalse(node0.isDelProp());
180:       assertFalse(node0.isCall());
181:       assertFalse(node0.isCatch());
182:       assertFalse(node0.isFor());
183:       assertFalse(node0.isBlock());
184:       assertFalse(node0.isSwitch());
185:       assertTrue(node0.isString());
186:       assertFalse(node0.isDo());
187:       assertFalse(node0.isAdd());
188:       assertFalse(node0.isNew());
189:       assertFalse(node0.isCase());
190:       assertFalse(node0.isStringKey());
191:       assertFalse(node0.isName());
192:       assertFalse(node0.isOr());
193:       assertEquals(0, node0.getSourcePosition());
194:       assertFalse(node0.isParamList());
195:       assertFalse(node0.isAssignAdd());
196:       assertFalse(node0.isEmpty());
197:       assertFalse(node0.isLabelName());
198:       assertFalse(node0.isVar());
199:       assertEquals(0, node0.getChildCount());
200:       assertFalse(node0.isLabel());
201:       assertFalse(node0.isExprResult());
202:       assertEquals(0, node0.getCharno());
203:       assertFalse(node0.isScript());
204:       assertFalse(node0.hasOneChild());
205:       assertFalse(node0.isObjectLit());
206:       assertFalse(node0.isAnd());
207:       assertFalse(node0.isNot());
208:       assertFalse(node0.isComma());
209:       assertFalse(node0.isThis());
210:       assertFalse(node0.isTypeOf());
211:       assertFalse(node0.isNumber());
212:       assertFalse(node0.isGetElem());
213:       assertFalse(node0.isBreak());
214:       assertFalse(node0.isGetProp());
215:       assertFalse(node0.hasMoreThanOneChild());
216:       assertFalse(node0.isInstanceOf());
217:       assertFalse(node0.isReturn());
218:       assertFalse(node0.isWhile());
219:       assertFalse(node0.isWith());
220:       assertFalse(node0.isAssign());
221:       assertFalse(node0.isHook());
222:       assertFalse(node0.isDec());
223:       assertFalse(node0.hasChildren());
224:       assertFalse(node0.isInc());
225:       assertFalse(node0.isIn());
226:       assertFalse(node0.isSetterDef());
227:       assertEquals(0, node0.getLineno());
228:       assertFalse(node0.isThrow());
229:       assertFalse(node0.isCast());
230:       assertFalse(node0.isFalse());
231:       assertFalse(node0.isContinue());
232:       assertEquals(40, node0.getType());
233:       
234:       boolean boolean0 = node0.isIf();
235:       assertFalse(boolean0);
236:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
237:       assertEquals(55, Node.INFERRED_FUNCTION);
238:       assertEquals(39, Node.EMPTY_BLOCK);
239:       assertEquals(48, Node.DIRECTIVES);
240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
243:       assertEquals(43, Node.IS_CONSTANT_NAME);
244:       assertEquals(8, Node.FLAG_NO_THROWS);
245:       assertEquals(57, Node.REFLECTED_OBJECT);
246:       assertEquals(36, Node.QUOTED_PROP);
247:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
250:       assertEquals(4095, Node.COLUMN_MASK);
251:       assertEquals(12, Node.COLUMN_BITS);
252:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
253:       assertEquals(46, Node.IS_NAMESPACE);
254:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
255:       assertEquals(32, Node.INCRDECR_PROP);
256:       assertEquals(1, Node.DECR_FLAG);
257:       assertEquals(37, Node.OPT_ARG_NAME);
258:       assertEquals(29, Node.JSDOC_INFO_PROP);
259:       assertEquals(49, Node.DIRECT_EVAL);
260:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
261:       assertEquals(56, Node.CHANGE_TIME);
262:       assertEquals(51, Node.STATIC_SOURCE_FILE);
263:       assertEquals(52, Node.LENGTH);
264:       assertEquals(53, Node.INPUT_ID);
265:       assertEquals(54, Node.SLASH_V);
266:       assertEquals(40, Node.ORIGINALNAME_PROP);
267:       assertEquals(15, Node.NO_SIDE_EFFECTS);
268:       assertEquals(30, Node.VAR_ARGS_NAME);
269:       assertEquals(57, Node.LAST_PROP);
270:       assertEquals(2, Node.POST_FLAG);
271:       assertEquals(47, Node.IS_DISPATCHER);
272:       assertFalse(node0.isFunction());
273:       assertFalse(node0.isTrue());
274:       assertFalse(node0.isVoid());
275:       assertFalse(node0.isRegExp());
276:       assertFalse(node0.isDefaultCase());
277:       assertFalse(node0.isTry());
278:       assertFalse(node0.isArrayLit());
279:       assertFalse(node0.isGetterDef());
280:       assertFalse(node0.isDebugger());
281:       assertFalse(node0.isNE());
282:       assertFalse(node0.isNull());
283:       assertFalse(node0.isIf());
284:       assertFalse(node0.isDelProp());
285:       assertFalse(node0.isCall());
286:       assertFalse(node0.isCatch());
287:       assertFalse(node0.isFor());
288:       assertFalse(node0.isBlock());
289:       assertFalse(node0.isSwitch());
290:       assertTrue(node0.isString());
291:       assertFalse(node0.isDo());
292:       assertFalse(node0.isAdd());
293:       assertFalse(node0.isNew());
294:       assertFalse(node0.isCase());
295:       assertFalse(node0.isStringKey());
296:       assertFalse(node0.isName());
297:       assertFalse(node0.isOr());
298:       assertEquals(0, node0.getSourcePosition());
299:       assertFalse(node0.isParamList());
300:       assertFalse(node0.isAssignAdd());
301:       assertFalse(node0.isEmpty());
302:       assertFalse(node0.isLabelName());
303:       assertFalse(node0.isVar());
304:       assertEquals(0, node0.getChildCount());
305:       assertFalse(node0.isLabel());
306:       assertFalse(node0.isExprResult());
307:       assertEquals(0, node0.getCharno());
308:       assertFalse(node0.isScript());
309:       assertFalse(node0.hasOneChild());
310:       assertFalse(node0.isObjectLit());
311:       assertFalse(node0.isAnd());
312:       assertFalse(node0.isNot());
313:       assertFalse(node0.isComma());
314:       assertFalse(node0.isThis());
315:       assertFalse(node0.isTypeOf());
316:       assertFalse(node0.isNumber());
317:       assertFalse(node0.isGetElem());
318:       assertFalse(node0.isBreak());
319:       assertFalse(node0.isGetProp());
320:       assertFalse(node0.hasMoreThanOneChild());
321:       assertFalse(node0.isInstanceOf());
322:       assertFalse(node0.isReturn());
323:       assertFalse(node0.isWhile());
324:       assertFalse(node0.isWith());
325:       assertFalse(node0.isAssign());
326:       assertFalse(node0.isHook());
327:       assertFalse(node0.isDec());
328:       assertFalse(node0.hasChildren());
329:       assertFalse(node0.isInc());
330:       assertFalse(node0.isIn());
331:       assertFalse(node0.isSetterDef());
332:       assertEquals(0, node0.getLineno());
333:       assertFalse(node0.isThrow());
334:       assertFalse(node0.isCast());
335:       assertFalse(node0.isFalse());
336:       assertFalse(node0.isContinue());
337:       assertEquals(40, node0.getType());
338:       
339:       InputId inputId0 = null;
340:       JSDocInfo jSDocInfo0 = new JSDocInfo(false);
341:       assertNotNull(jSDocInfo0);
342:       assertNull(jSDocInfo0.getMeaning());
343:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
344:       assertNull(jSDocInfo0.getVisibility());
345:       assertNull(jSDocInfo0.getFileOverview());
346:       assertNull(jSDocInfo0.getLendsName());
347:       assertNull(jSDocInfo0.getDescription());
348:       assertFalse(jSDocInfo0.isJaggerInject());
349:       assertFalse(jSDocInfo0.isExpose());
350:       assertFalse(jSDocInfo0.hasModifies());
351:       assertFalse(jSDocInfo0.isInterface());
352:       assertFalse(jSDocInfo0.hasTypedefType());
353:       assertNull(jSDocInfo0.getBlockDescription());
354:       assertFalse(jSDocInfo0.isIdGenerator());
355:       assertFalse(jSDocInfo0.isExterns());
356:       assertFalse(jSDocInfo0.isConstructor());
357:       assertFalse(jSDocInfo0.hasThisType());
358:       assertFalse(jSDocInfo0.isExport());
359:       assertNull(jSDocInfo0.getDeprecationReason());
360:       assertFalse(jSDocInfo0.hasBaseType());
361:       assertFalse(jSDocInfo0.isJavaDispatch());
362:       assertFalse(jSDocInfo0.isOverride());
363:       assertFalse(jSDocInfo0.isNoTypeCheck());
364:       assertFalse(jSDocInfo0.isWizaction());
365:       assertFalse(jSDocInfo0.isConstant());
366:       assertFalse(jSDocInfo0.isJaggerModule());
367:       assertNull(jSDocInfo0.getVersion());
368:       assertFalse(jSDocInfo0.isJaggerProvide());
369:       assertNull(jSDocInfo0.getOriginalCommentString());
370:       assertFalse(jSDocInfo0.isDisposes());
371:       assertFalse(jSDocInfo0.isImplicitCast());
372:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
373:       assertNull(jSDocInfo0.getLicense());
374:       assertFalse(jSDocInfo0.isStableIdGenerator());
375:       assertFalse(jSDocInfo0.isMappedIdGenerator());
376:       assertFalse(jSDocInfo0.hasFileOverview());
377:       assertFalse(jSDocInfo0.hasType());
378:       assertNull(jSDocInfo0.getReturnDescription());
379:       assertFalse(jSDocInfo0.isDefine());
380:       assertFalse(jSDocInfo0.isNoAlias());
381:       assertFalse(jSDocInfo0.hasReturnType());
382:       assertFalse(jSDocInfo0.isHidden());
383:       assertFalse(jSDocInfo0.isNoCompile());
384:       assertFalse(jSDocInfo0.hasEnumParameterType());
385:       assertFalse(jSDocInfo0.makesDicts());
386:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
387:       assertEquals(0, jSDocInfo0.getParameterCount());
388:       assertFalse(jSDocInfo0.isDeprecated());
389:       assertFalse(jSDocInfo0.isNoShadow());
390:       assertFalse(jSDocInfo0.isNoSideEffects());
391:       assertFalse(jSDocInfo0.isNgInject());
392:       assertFalse(jSDocInfo0.makesStructs());
393:       assertFalse(jSDocInfo0.shouldPreserveTry());
394:       assertEquals("JSDocInfo", jSDocInfo0.toString());
395:       assertFalse(jSDocInfo0.containsDeclaration());
396:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
397:       
398:       Node node1 = jSDocInfo0.getAssociatedNode();
399:       assertNull(node1);
400:       assertNull(jSDocInfo0.getMeaning());
401:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
402:       assertNull(jSDocInfo0.getVisibility());
403:       assertNull(jSDocInfo0.getFileOverview());
404:       assertNull(jSDocInfo0.getLendsName());
405:       assertNull(jSDocInfo0.getDescription());
406:       assertFalse(jSDocInfo0.isJaggerInject());
407:       assertFalse(jSDocInfo0.isExpose());
408:       assertFalse(jSDocInfo0.hasModifies());
409:       assertFalse(jSDocInfo0.isInterface());
410:       assertFalse(jSDocInfo0.hasTypedefType());
411:       assertNull(jSDocInfo0.getBlockDescription());
412:       assertFalse(jSDocInfo0.isIdGenerator());
413:       assertFalse(jSDocInfo0.isExterns());
414:       assertFalse(jSDocInfo0.isConstructor());
415:       assertFalse(jSDocInfo0.hasThisType());
416:       assertFalse(jSDocInfo0.isExport());
417:       assertNull(jSDocInfo0.getDeprecationReason());
418:       assertFalse(jSDocInfo0.hasBaseType());
419:       assertFalse(jSDocInfo0.isJavaDispatch());
420:       assertFalse(jSDocInfo0.isOverride());
421:       assertFalse(jSDocInfo0.isNoTypeCheck());
422:       assertFalse(jSDocInfo0.isWizaction());
423:       assertFalse(jSDocInfo0.isConstant());
424:       assertFalse(jSDocInfo0.isJaggerModule());
425:       assertNull(jSDocInfo0.getVersion());
426:       assertFalse(jSDocInfo0.isJaggerProvide());
427:       assertNull(jSDocInfo0.getOriginalCommentString());
428:       assertFalse(jSDocInfo0.isDisposes());
429:       assertFalse(jSDocInfo0.isImplicitCast());
430:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
431:       assertNull(jSDocInfo0.getLicense());
432:       assertFalse(jSDocInfo0.isStableIdGenerator());
433:       assertFalse(jSDocInfo0.isMappedIdGenerator());
434:       assertFalse(jSDocInfo0.hasFileOverview());
435:       assertFalse(jSDocInfo0.hasType());
436:       assertNull(jSDocInfo0.getReturnDescription());
437:       assertFalse(jSDocInfo0.isDefine());
438:       assertFalse(jSDocInfo0.isNoAlias());
439:       assertFalse(jSDocInfo0.hasReturnType());
440:       assertFalse(jSDocInfo0.isHidden());
441:       assertFalse(jSDocInfo0.isNoCompile());
442:       assertFalse(jSDocInfo0.hasEnumParameterType());
443:       assertFalse(jSDocInfo0.makesDicts());
444:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
445:       assertEquals(0, jSDocInfo0.getParameterCount());
446:       assertFalse(jSDocInfo0.isDeprecated());
447:       assertFalse(jSDocInfo0.isNoShadow());
448:       assertFalse(jSDocInfo0.isNoSideEffects());
449:       assertFalse(jSDocInfo0.isNgInject());
450:       assertFalse(jSDocInfo0.makesStructs());
451:       assertFalse(jSDocInfo0.shouldPreserveTry());
452:       assertEquals("JSDocInfo", jSDocInfo0.toString());
453:       assertFalse(jSDocInfo0.containsDeclaration());
454:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
455:       
456:       // Undeclared exception!
457:       try { 
458:         node0.isEquivalentTo((Node) null);
459:         fail("Expecting exception: NullPointerException");
460:       
461:       } catch(NullPointerException e) {
462:          //
463:          // no message in exception (getMessage() returned null)
464:          //
465:          verifyException("com.google.javascript.rhino.Node", e);
466:       }
467:   }
468: }
RegularFileObject[/tmp/EvoSuite_245_1628157902791/com/google/javascript/rhino/Node_245_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:05:02 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_245_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_245_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_245_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:05:02.822 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("Node tree inequality:\nTree1:\n", 0, 0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node0);
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(iterable0);
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());

boolean boolean0 = node0.isIf();
assertFalse(boolean0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());

InputId inputId0 = null;
JSDocInfo jSDocInfo0 = new JSDocInfo(false);
assertNotNull(jSDocInfo0);
assertNull(jSDocInfo0.getMeaning());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.makesDicts());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());

Node node1 = jSDocInfo0.getAssociatedNode();
assertNull(node1);
assertNull(jSDocInfo0.getMeaning());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getLendsName());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isExpose());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isInterface());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isExport());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isConstant());
assertFalse(jSDocInfo0.isJaggerModule());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.isJaggerProvide());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.hasType());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isNoAlias());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.makesDicts());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());

node0.isEquivalentTo((Node) null);

[MASTER] 10:05:05.108 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_260_1628157904874/com/google/javascript/rhino/Node_260_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_260_1628157904874/com/google/javascript/rhino/Node_260_tmp__ESTest_scaffolding.java]]
[MASTER] 10:05:05.108 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:05:05.108 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:05:05.109 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 654
[MASTER] 10:05:05.110 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_260_1628157904874/com/google/javascript/rhino/Node_260_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:05:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_260_tmp__ESTest extends Node_260_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(0, "NEG");
21:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
22:       assertEquals(53, Node.INPUT_ID);
23:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
24:       assertEquals(43, Node.IS_CONSTANT_NAME);
25:       assertEquals(56, Node.CHANGE_TIME);
26:       assertEquals(36, Node.QUOTED_PROP);
27:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
28:       assertEquals(37, Node.OPT_ARG_NAME);
29:       assertEquals(32, Node.INCRDECR_PROP);
30:       assertEquals(46, Node.IS_NAMESPACE);
31:       assertEquals(51, Node.STATIC_SOURCE_FILE);
32:       assertEquals(12, Node.COLUMN_BITS);
33:       assertEquals(4095, Node.COLUMN_MASK);
34:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
35:       assertEquals(1, Node.DECR_FLAG);
36:       assertEquals(40, Node.ORIGINALNAME_PROP);
37:       assertEquals(57, Node.REFLECTED_OBJECT);
38:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
39:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
40:       assertEquals(52, Node.LENGTH);
41:       assertEquals(50, Node.FREE_CALL);
42:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
43:       assertEquals(48, Node.DIRECTIVES);
44:       assertEquals(54, Node.SLASH_V);
45:       assertEquals(49, Node.DIRECT_EVAL);
46:       assertEquals(55, Node.INFERRED_FUNCTION);
47:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
48:       assertEquals(2, Node.POST_FLAG);
49:       assertEquals(30, Node.VAR_ARGS_NAME);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(57, Node.LAST_PROP);
53:       assertEquals(47, Node.IS_DISPATCHER);
54:       assertEquals(29, Node.JSDOC_INFO_PROP);
55:       assertEquals(39, Node.EMPTY_BLOCK);
56:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
57:       assertNotNull(node0);
58:       assertFalse(node0.isNE());
59:       assertFalse(node0.isIn());
60:       assertFalse(node0.isGetterDef());
61:       assertFalse(node0.isArrayLit());
62:       assertFalse(node0.isIf());
63:       assertFalse(node0.isSwitch());
64:       assertFalse(node0.isDelProp());
65:       assertEquals(0, node0.getType());
66:       assertFalse(node0.isDebugger());
67:       assertEquals((-1), node0.getCharno());
68:       assertFalse(node0.isHook());
69:       assertFalse(node0.isRegExp());
70:       assertFalse(node0.isCase());
71:       assertFalse(node0.isString());
72:       assertFalse(node0.isFor());
73:       assertFalse(node0.isTry());
74:       assertFalse(node0.isGetProp());
75:       assertFalse(node0.isThis());
76:       assertFalse(node0.isSetterDef());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isObjectLit());
79:       assertFalse(node0.isFalse());
80:       assertFalse(node0.isAnd());
81:       assertFalse(node0.isCatch());
82:       assertFalse(node0.isInc());
83:       assertFalse(node0.isFunction());
84:       assertFalse(node0.isThrow());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.isLabel());
87:       assertFalse(node0.isReturn());
88:       assertEquals((-1), node0.getSourcePosition());
89:       assertFalse(node0.isDec());
90:       assertFalse(node0.isNumber());
91:       assertFalse(node0.hasChildren());
92:       assertFalse(node0.hasMoreThanOneChild());
93:       assertFalse(node0.isAssign());
94:       assertFalse(node0.isTypeOf());
95:       assertFalse(node0.isOr());
96:       assertFalse(node0.isGetElem());
97:       assertFalse(node0.isContinue());
98:       assertFalse(node0.isCast());
99:       assertEquals((-1), node0.getLineno());
100:       assertFalse(node0.isLabelName());
101:       assertFalse(node0.isBlock());
102:       assertFalse(node0.isExprResult());
103:       assertFalse(node0.isScript());
104:       assertFalse(node0.isWith());
105:       assertFalse(node0.isNot());
106:       assertFalse(node0.isWhile());
107:       assertFalse(node0.hasOneChild());
108:       assertFalse(node0.isParamList());
109:       assertFalse(node0.isNull());
110:       assertFalse(node0.isComma());
111:       assertEquals(0, node0.getChildCount());
112:       assertFalse(node0.isStringKey());
113:       assertFalse(node0.isName());
114:       assertFalse(node0.isCall());
115:       assertFalse(node0.isBreak());
116:       assertFalse(node0.isVoid());
117:       assertFalse(node0.isNew());
118:       assertFalse(node0.isTrue());
119:       assertFalse(node0.isAdd());
120:       assertFalse(node0.isEmpty());
121:       assertFalse(node0.isVar());
122:       assertFalse(node0.isDefaultCase());
123:       assertFalse(node0.isDo());
124:       
125:       Node node1 = Node.newString(31, "NEG", 36, 52);
126:       assertEquals(55, Node.INFERRED_FUNCTION);
127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
128:       assertEquals(36, Node.QUOTED_PROP);
129:       assertEquals(4095, Node.COLUMN_MASK);
130:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
131:       assertEquals(39, Node.EMPTY_BLOCK);
132:       assertEquals(53, Node.INPUT_ID);
133:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
134:       assertEquals(29, Node.JSDOC_INFO_PROP);
135:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
136:       assertEquals(57, Node.REFLECTED_OBJECT);
137:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
138:       assertEquals(52, Node.LENGTH);
139:       assertEquals(8, Node.FLAG_NO_THROWS);
140:       assertEquals(48, Node.DIRECTIVES);
141:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
142:       assertEquals(37, Node.OPT_ARG_NAME);
143:       assertEquals(56, Node.CHANGE_TIME);
144:       assertEquals(49, Node.DIRECT_EVAL);
145:       assertEquals(1, Node.DECR_FLAG);
146:       assertEquals(12, Node.COLUMN_BITS);
147:       assertEquals(51, Node.STATIC_SOURCE_FILE);
148:       assertEquals(30, Node.VAR_ARGS_NAME);
149:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
150:       assertEquals(15, Node.NO_SIDE_EFFECTS);
151:       assertEquals(57, Node.LAST_PROP);
152:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
153:       assertEquals(32, Node.INCRDECR_PROP);
154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
155:       assertEquals(40, Node.ORIGINALNAME_PROP);
156:       assertEquals(47, Node.IS_DISPATCHER);
157:       assertEquals(2, Node.POST_FLAG);
158:       assertEquals(50, Node.FREE_CALL);
159:       assertEquals(46, Node.IS_NAMESPACE);
160:       assertEquals(54, Node.SLASH_V);
161:       assertEquals(43, Node.IS_CONSTANT_NAME);
162:       assertNotSame(node1, node0);
163:       assertNotNull(node1);
164:       assertFalse(node1.equals((Object)node0));
165:       assertFalse(node1.isArrayLit());
166:       assertFalse(node1.isFor());
167:       assertFalse(node1.isFunction());
168:       assertFalse(node1.isDebugger());
169:       assertFalse(node1.isGetterDef());
170:       assertFalse(node1.isDefaultCase());
171:       assertFalse(node1.isEmpty());
172:       assertEquals(52, node1.getCharno());
173:       assertFalse(node1.isTry());
174:       assertFalse(node1.isIn());
175:       assertFalse(node1.isCatch());
176:       assertFalse(node1.isNull());
177:       assertFalse(node1.isRegExp());
178:       assertFalse(node1.isIf());
179:       assertFalse(node1.isTrue());
180:       assertFalse(node1.isNE());
181:       assertFalse(node1.isName());
182:       assertFalse(node1.isVoid());
183:       assertFalse(node1.isCall());
184:       assertFalse(node1.isThrow());
185:       assertFalse(node1.isFalse());
186:       assertFalse(node1.isSetterDef());
187:       assertFalse(node1.isInc());
188:       assertFalse(node1.isWhile());
189:       assertFalse(node1.isString());
190:       assertFalse(node1.isGetProp());
191:       assertFalse(node1.isAnd());
192:       assertFalse(node1.isContinue());
193:       assertFalse(node1.isObjectLit());
194:       assertFalse(node1.isNot());
195:       assertFalse(node1.isCast());
196:       assertFalse(node1.isDec());
197:       assertFalse(node1.isAssign());
198:       assertFalse(node1.isScript());
199:       assertFalse(node1.hasChildren());
200:       assertFalse(node1.isNumber());
201:       assertFalse(node1.isAssignAdd());
202:       assertFalse(node1.hasOneChild());
203:       assertFalse(node1.hasMoreThanOneChild());
204:       assertFalse(node1.isInstanceOf());
205:       assertTrue(node1.isDelProp());
206:       assertFalse(node1.isReturn());
207:       assertFalse(node1.isWith());
208:       assertFalse(node1.isComma());
209:       assertFalse(node1.isOr());
210:       assertFalse(node1.isTypeOf());
211:       assertFalse(node1.isBreak());
212:       assertEquals(36, node1.getLineno());
213:       assertFalse(node1.isExprResult());
214:       assertFalse(node1.isGetElem());
215:       assertEquals(31, node1.getType());
216:       assertFalse(node1.isHook());
217:       assertFalse(node1.isVar());
218:       assertFalse(node1.isStringKey());
219:       assertFalse(node1.isBlock());
220:       assertFalse(node1.isThis());
221:       assertFalse(node1.isNew());
222:       assertFalse(node1.isAdd());
223:       assertFalse(node1.isCase());
224:       assertFalse(node1.isDo());
225:       assertFalse(node1.isLabel());
226:       assertEquals(147508, node1.getSourcePosition());
227:       assertEquals(0, node1.getChildCount());
228:       assertFalse(node1.isSwitch());
229:       assertFalse(node1.isParamList());
230:       assertFalse(node1.isLabelName());
231:       
232:       Node node2 = new Node(0, node0, node1, node1, node0, 50, 37);
233:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
234:       assertEquals(53, Node.INPUT_ID);
235:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
236:       assertEquals(43, Node.IS_CONSTANT_NAME);
237:       assertEquals(56, Node.CHANGE_TIME);
238:       assertEquals(36, Node.QUOTED_PROP);
239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
240:       assertEquals(37, Node.OPT_ARG_NAME);
241:       assertEquals(32, Node.INCRDECR_PROP);
242:       assertEquals(46, Node.IS_NAMESPACE);
243:       assertEquals(51, Node.STATIC_SOURCE_FILE);
244:       assertEquals(12, Node.COLUMN_BITS);
245:       assertEquals(4095, Node.COLUMN_MASK);
246:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
247:       assertEquals(1, Node.DECR_FLAG);
248:       assertEquals(40, Node.ORIGINALNAME_PROP);
249:       assertEquals(57, Node.REFLECTED_OBJECT);
250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
251:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
252:       assertEquals(52, Node.LENGTH);
253:       assertEquals(50, Node.FREE_CALL);
254:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
255:       assertEquals(48, Node.DIRECTIVES);
256:       assertEquals(54, Node.SLASH_V);
257:       assertEquals(49, Node.DIRECT_EVAL);
258:       assertEquals(55, Node.INFERRED_FUNCTION);
259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
260:       assertEquals(2, Node.POST_FLAG);
261:       assertEquals(30, Node.VAR_ARGS_NAME);
262:       assertEquals(8, Node.FLAG_NO_THROWS);
263:       assertEquals(15, Node.NO_SIDE_EFFECTS);
264:       assertEquals(57, Node.LAST_PROP);
265:       assertEquals(47, Node.IS_DISPATCHER);
266:       assertEquals(29, Node.JSDOC_INFO_PROP);
267:       assertEquals(39, Node.EMPTY_BLOCK);
268:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
269:       assertEquals(55, Node.INFERRED_FUNCTION);
270:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
271:       assertEquals(36, Node.QUOTED_PROP);
272:       assertEquals(4095, Node.COLUMN_MASK);
273:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
274:       assertEquals(39, Node.EMPTY_BLOCK);
275:       assertEquals(53, Node.INPUT_ID);
276:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
277:       assertEquals(29, Node.JSDOC_INFO_PROP);
278:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
279:       assertEquals(57, Node.REFLECTED_OBJECT);
280:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
281:       assertEquals(52, Node.LENGTH);
282:       assertEquals(8, Node.FLAG_NO_THROWS);
283:       assertEquals(48, Node.DIRECTIVES);
284:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
285:       assertEquals(37, Node.OPT_ARG_NAME);
286:       assertEquals(56, Node.CHANGE_TIME);
287:       assertEquals(49, Node.DIRECT_EVAL);
288:       assertEquals(1, Node.DECR_FLAG);
289:       assertEquals(12, Node.COLUMN_BITS);
290:       assertEquals(51, Node.STATIC_SOURCE_FILE);
291:       assertEquals(30, Node.VAR_ARGS_NAME);
292:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
293:       assertEquals(15, Node.NO_SIDE_EFFECTS);
294:       assertEquals(57, Node.LAST_PROP);
295:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
296:       assertEquals(32, Node.INCRDECR_PROP);
297:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
298:       assertEquals(40, Node.ORIGINALNAME_PROP);
299:       assertEquals(47, Node.IS_DISPATCHER);
300:       assertEquals(2, Node.POST_FLAG);
301:       assertEquals(50, Node.FREE_CALL);
302:       assertEquals(46, Node.IS_NAMESPACE);
303:       assertEquals(54, Node.SLASH_V);
304:       assertEquals(43, Node.IS_CONSTANT_NAME);
305:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
306:       assertEquals(29, Node.JSDOC_INFO_PROP);
307:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
308:       assertEquals(53, Node.INPUT_ID);
309:       assertEquals(43, Node.IS_CONSTANT_NAME);
310:       assertEquals(36, Node.QUOTED_PROP);
311:       assertEquals(56, Node.CHANGE_TIME);
312:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
313:       assertEquals(46, Node.IS_NAMESPACE);
314:       assertEquals(55, Node.INFERRED_FUNCTION);
315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
317:       assertEquals(39, Node.EMPTY_BLOCK);
318:       assertEquals(2, Node.POST_FLAG);
319:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
320:       assertEquals(57, Node.LAST_PROP);
321:       assertEquals(30, Node.VAR_ARGS_NAME);
322:       assertEquals(47, Node.IS_DISPATCHER);
323:       assertEquals(57, Node.REFLECTED_OBJECT);
324:       assertEquals(52, Node.LENGTH);
325:       assertEquals(40, Node.ORIGINALNAME_PROP);
326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(50, Node.FREE_CALL);
329:       assertEquals(54, Node.SLASH_V);
330:       assertEquals(51, Node.STATIC_SOURCE_FILE);
331:       assertEquals(12, Node.COLUMN_BITS);
332:       assertEquals(4095, Node.COLUMN_MASK);
333:       assertEquals(32, Node.INCRDECR_PROP);
334:       assertEquals(49, Node.DIRECT_EVAL);
335:       assertEquals(48, Node.DIRECTIVES);
336:       assertEquals(1, Node.DECR_FLAG);
337:       assertEquals(37, Node.OPT_ARG_NAME);
338:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
339:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
340:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
341:       assertNotNull(node2);
342:       assertFalse(node0.equals((Object)node1));
343:       assertFalse(node1.equals((Object)node0));
344:       assertFalse(node2.equals((Object)node1));
345:       assertFalse(node2.equals((Object)node0));
346:       assertFalse(node0.isNE());
347:       assertFalse(node0.isIn());
348:       assertFalse(node0.isGetterDef());
349:       assertFalse(node0.isArrayLit());
350:       assertFalse(node0.isIf());
351:       assertFalse(node0.isSwitch());
352:       assertFalse(node0.isDelProp());
353:       assertEquals(0, node0.getType());
354:       assertFalse(node0.isDebugger());
355:       assertEquals((-1), node0.getCharno());
356:       assertFalse(node0.isHook());
357:       assertFalse(node0.isRegExp());
358:       assertFalse(node0.isCase());
359:       assertFalse(node0.isString());
360:       assertFalse(node0.isFor());
361:       assertFalse(node0.isTry());
362:       assertFalse(node0.isGetProp());
363:       assertFalse(node0.isThis());
364:       assertFalse(node0.isSetterDef());
365:       assertFalse(node0.isInstanceOf());
366:       assertFalse(node0.isObjectLit());
367:       assertFalse(node0.isFalse());
368:       assertFalse(node0.isAnd());
369:       assertFalse(node0.isCatch());
370:       assertFalse(node0.isInc());
371:       assertFalse(node0.isFunction());
372:       assertFalse(node0.isThrow());
373:       assertFalse(node0.isAssignAdd());
374:       assertFalse(node0.isLabel());
375:       assertFalse(node0.isReturn());
376:       assertEquals((-1), node0.getSourcePosition());
377:       assertFalse(node0.isDec());
378:       assertFalse(node0.isNumber());
379:       assertFalse(node0.hasChildren());
380:       assertFalse(node0.hasMoreThanOneChild());
381:       assertFalse(node0.isAssign());
382:       assertFalse(node0.isTypeOf());
383:       assertFalse(node0.isOr());
384:       assertFalse(node0.isGetElem());
385:       assertFalse(node0.isContinue());
386:       assertFalse(node0.isCast());
387:       assertEquals((-1), node0.getLineno());
388:       assertFalse(node0.isLabelName());
389:       assertFalse(node0.isBlock());
390:       assertFalse(node0.isExprResult());
391:       assertFalse(node0.isScript());
392:       assertFalse(node0.isWith());
393:       assertFalse(node0.isNot());
394:       assertFalse(node0.isWhile());
395:       assertFalse(node0.hasOneChild());
396:       assertFalse(node0.isParamList());
397:       assertFalse(node0.isNull());
398:       assertFalse(node0.isComma());
399:       assertEquals(0, node0.getChildCount());
400:       assertFalse(node0.isStringKey());
401:       assertFalse(node0.isName());
402:       assertFalse(node0.isCall());
403:       assertFalse(node0.isBreak());
404:       assertFalse(node0.isVoid());
405:       assertFalse(node0.isNew());
406:       assertFalse(node0.isTrue());
407:       assertFalse(node0.isAdd());
408:       assertFalse(node0.isEmpty());
409:       assertFalse(node0.isVar());
410:       assertFalse(node0.isDefaultCase());
411:       assertFalse(node0.isDo());
412:       assertFalse(node1.isArrayLit());
413:       assertFalse(node1.isFor());
414:       assertFalse(node1.isFunction());
415:       assertFalse(node1.isDebugger());
416:       assertFalse(node1.isGetterDef());
417:       assertFalse(node1.isDefaultCase());
418:       assertFalse(node1.isEmpty());
419:       assertEquals(52, node1.getCharno());
420:       assertFalse(node1.isTry());
421:       assertFalse(node1.isIn());
422:       assertFalse(node1.isCatch());
423:       assertFalse(node1.isNull());
424:       assertFalse(node1.isRegExp());
425:       assertFalse(node1.isIf());
426:       assertFalse(node1.isTrue());
427:       assertFalse(node1.isNE());
428:       assertFalse(node1.isName());
429:       assertFalse(node1.isVoid());
430:       assertFalse(node1.isCall());
431:       assertFalse(node1.isThrow());
432:       assertFalse(node1.isFalse());
433:       assertFalse(node1.isSetterDef());
434:       assertFalse(node1.isInc());
435:       assertFalse(node1.isWhile());
436:       assertFalse(node1.isString());
437:       assertFalse(node1.isGetProp());
438:       assertFalse(node1.isAnd());
439:       assertFalse(node1.isContinue());
440:       assertFalse(node1.isObjectLit());
441:       assertFalse(node1.isNot());
442:       assertFalse(node1.isCast());
443:       assertFalse(node1.isDec());
444:       assertFalse(node1.isAssign());
445:       assertFalse(node1.isScript());
446:       assertFalse(node1.hasChildren());
447:       assertFalse(node1.isNumber());
448:       assertFalse(node1.isAssignAdd());
449:       assertFalse(node1.hasOneChild());
450:       assertFalse(node1.hasMoreThanOneChild());
451:       assertFalse(node1.isInstanceOf());
452:       assertTrue(node1.isDelProp());
453:       assertFalse(node1.isReturn());
454:       assertFalse(node1.isWith());
455:       assertFalse(node1.isComma());
456:       assertFalse(node1.isOr());
457:       assertFalse(node1.isTypeOf());
458:       assertFalse(node1.isBreak());
459:       assertEquals(36, node1.getLineno());
460:       assertFalse(node1.isExprResult());
461:       assertFalse(node1.isGetElem());
462:       assertEquals(31, node1.getType());
463:       assertFalse(node1.isHook());
464:       assertFalse(node1.isVar());
465:       assertFalse(node1.isStringKey());
466:       assertFalse(node1.isBlock());
467:       assertFalse(node1.isThis());
468:       assertFalse(node1.isNew());
469:       assertFalse(node1.isAdd());
470:       assertFalse(node1.isCase());
471:       assertFalse(node1.isDo());
472:       assertFalse(node1.isLabel());
473:       assertEquals(147508, node1.getSourcePosition());
474:       assertEquals(0, node1.getChildCount());
475:       assertFalse(node1.isSwitch());
476:       assertFalse(node1.isParamList());
477:       assertFalse(node1.isLabelName());
478:       assertFalse(node2.isAssignAdd());
479:       assertFalse(node2.isOr());
480:       assertFalse(node2.isLabel());
481:       assertFalse(node2.hasMoreThanOneChild());
482:       assertFalse(node2.isLabelName());
483:       assertFalse(node2.isNumber());
484:       assertFalse(node2.isNew());
485:       assertFalse(node2.isCast());
486:       assertFalse(node2.isAdd());
487:       assertFalse(node2.isDo());
488:       assertFalse(node2.isContinue());
489:       assertFalse(node2.isVar());
490:       assertFalse(node2.isCatch());
491:       assertFalse(node2.isInstanceOf());
492:       assertFalse(node2.isSetterDef());
493:       assertEquals(37, node2.getCharno());
494:       assertFalse(node2.isStringKey());
495:       assertFalse(node2.isParamList());
496:       assertFalse(node2.isTry());
497:       assertFalse(node2.isScript());
498:       assertFalse(node2.isFor());
499:       assertFalse(node2.isWith());
500:       assertFalse(node2.isCase());
501:       assertFalse(node2.isRegExp());
502:       assertFalse(node2.isHook());
503:       assertFalse(node2.isThis());
504:       assertFalse(node2.isBlock());
505:       assertTrue(node2.hasChildren());
506:       assertEquals(1, node2.getChildCount());
507:       assertFalse(node2.isIn());
508:       assertFalse(node2.isEmpty());
509:       assertFalse(node2.isString());
510:       assertFalse(node2.isIf());
511:       assertFalse(node2.isGetterDef());
512:       assertFalse(node2.isDelProp());
513:       assertEquals(204837, node2.getSourcePosition());
514:       assertFalse(node2.isNE());
515:       assertFalse(node2.isSwitch());
516:       assertFalse(node2.isFunction());
517:       assertFalse(node2.isArrayLit());
518:       assertFalse(node2.isInc());
519:       assertFalse(node2.isDefaultCase());
520:       assertFalse(node2.isFalse());
521:       assertFalse(node2.isThrow());
522:       assertFalse(node2.isBreak());
523:       assertFalse(node2.isGetProp());
524:       assertFalse(node2.isNot());
525:       assertFalse(node2.isObjectLit());
526:       assertFalse(node2.isName());
527:       assertFalse(node2.isAnd());
528:       assertFalse(node2.isDebugger());
529:       assertFalse(node2.isTrue());
530:       assertFalse(node2.isNull());
531:       assertFalse(node2.isVoid());
532:       assertEquals(50, node2.getLineno());
533:       assertFalse(node2.isGetElem());
534:       assertFalse(node2.isExprResult());
535:       assertFalse(node2.isCall());
536:       assertEquals(0, node2.getType());
537:       assertFalse(node2.isAssign());
538:       assertFalse(node2.isWhile());
539:       assertFalse(node2.isTypeOf());
540:       assertFalse(node2.isComma());
541:       assertFalse(node2.isDec());
542:       assertFalse(node2.isReturn());
543:       assertTrue(node2.hasOneChild());
544:       
545:       boolean boolean0 = node1.isEmpty();
546:       assertFalse(boolean0);
547:       assertEquals(55, Node.INFERRED_FUNCTION);
548:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
549:       assertEquals(36, Node.QUOTED_PROP);
550:       assertEquals(4095, Node.COLUMN_MASK);
551:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
552:       assertEquals(39, Node.EMPTY_BLOCK);
553:       assertEquals(53, Node.INPUT_ID);
554:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
555:       assertEquals(29, Node.JSDOC_INFO_PROP);
556:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
557:       assertEquals(57, Node.REFLECTED_OBJECT);
558:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
559:       assertEquals(52, Node.LENGTH);
560:       assertEquals(8, Node.FLAG_NO_THROWS);
561:       assertEquals(48, Node.DIRECTIVES);
562:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
563:       assertEquals(37, Node.OPT_ARG_NAME);
564:       assertEquals(56, Node.CHANGE_TIME);
565:       assertEquals(49, Node.DIRECT_EVAL);
566:       assertEquals(1, Node.DECR_FLAG);
567:       assertEquals(12, Node.COLUMN_BITS);
568:       assertEquals(51, Node.STATIC_SOURCE_FILE);
569:       assertEquals(30, Node.VAR_ARGS_NAME);
570:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
571:       assertEquals(15, Node.NO_SIDE_EFFECTS);
572:       assertEquals(57, Node.LAST_PROP);
573:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
574:       assertEquals(32, Node.INCRDECR_PROP);
575:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
576:       assertEquals(40, Node.ORIGINALNAME_PROP);
577:       assertEquals(47, Node.IS_DISPATCHER);
578:       assertEquals(2, Node.POST_FLAG);
579:       assertEquals(50, Node.FREE_CALL);
580:       assertEquals(46, Node.IS_NAMESPACE);
581:       assertEquals(54, Node.SLASH_V);
582:       assertEquals(43, Node.IS_CONSTANT_NAME);
583:       assertNotSame(node1, node0);
584:       assertFalse(node1.equals((Object)node2));
585:       assertFalse(node1.equals((Object)node0));
586:       assertFalse(node1.isArrayLit());
587:       assertFalse(node1.isFor());
588:       assertFalse(node1.isFunction());
589:       assertFalse(node1.isDebugger());
590:       assertFalse(node1.isGetterDef());
591:       assertFalse(node1.isDefaultCase());
592:       assertFalse(node1.isEmpty());
593:       assertEquals(52, node1.getCharno());
594:       assertFalse(node1.isTry());
595:       assertFalse(node1.isIn());
596:       assertFalse(node1.isCatch());
597:       assertFalse(node1.isNull());
598:       assertFalse(node1.isRegExp());
599:       assertFalse(node1.isIf());
600:       assertFalse(node1.isTrue());
601:       assertFalse(node1.isNE());
602:       assertFalse(node1.isName());
603:       assertFalse(node1.isVoid());
604:       assertFalse(node1.isCall());
605:       assertFalse(node1.isThrow());
606:       assertFalse(node1.isFalse());
607:       assertFalse(node1.isSetterDef());
608:       assertFalse(node1.isInc());
609:       assertFalse(node1.isWhile());
610:       assertFalse(node1.isString());
611:       assertFalse(node1.isGetProp());
612:       assertFalse(node1.isAnd());
613:       assertFalse(node1.isContinue());
614:       assertFalse(node1.isObjectLit());
615:       assertFalse(node1.isNot());
616:       assertFalse(node1.isCast());
617:       assertFalse(node1.isDec());
618:       assertFalse(node1.isAssign());
619:       assertFalse(node1.isScript());
620:       assertFalse(node1.hasChildren());
621:       assertFalse(node1.isNumber());
622:       assertFalse(node1.isAssignAdd());
623:       assertFalse(node1.hasOneChild());
624:       assertFalse(node1.hasMoreThanOneChild());
625:       assertFalse(node1.isInstanceOf());
626:       assertTrue(node1.isDelProp());
627:       assertFalse(node1.isReturn());
628:       assertFalse(node1.isWith());
629:       assertFalse(node1.isComma());
630:       assertFalse(node1.isOr());
631:       assertFalse(node1.isTypeOf());
632:       assertFalse(node1.isBreak());
633:       assertEquals(36, node1.getLineno());
634:       assertFalse(node1.isExprResult());
635:       assertFalse(node1.isGetElem());
636:       assertEquals(31, node1.getType());
637:       assertFalse(node1.isHook());
638:       assertFalse(node1.isVar());
639:       assertFalse(node1.isStringKey());
640:       assertFalse(node1.isBlock());
641:       assertFalse(node1.isThis());
642:       assertFalse(node1.isNew());
643:       assertFalse(node1.isAdd());
644:       assertFalse(node1.isCase());
645:       assertFalse(node1.isDo());
646:       assertFalse(node1.isLabel());
647:       assertEquals(147508, node1.getSourcePosition());
648:       assertEquals(0, node1.getChildCount());
649:       assertFalse(node1.isSwitch());
650:       assertFalse(node1.isParamList());
651:       assertFalse(node1.isLabelName());
652:       
653:       Iterable<Node> iterable0 = node1.children();
654:       assertFalse(iterable0.contains(node0));
655:       assertEquals(55, Node.INFERRED_FUNCTION);
656:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
657:       assertEquals(36, Node.QUOTED_PROP);
658:       assertEquals(4095, Node.COLUMN_MASK);
659:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
660:       assertEquals(39, Node.EMPTY_BLOCK);
661:       assertEquals(53, Node.INPUT_ID);
662:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
663:       assertEquals(29, Node.JSDOC_INFO_PROP);
664:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
665:       assertEquals(57, Node.REFLECTED_OBJECT);
666:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
667:       assertEquals(52, Node.LENGTH);
668:       assertEquals(8, Node.FLAG_NO_THROWS);
669:       assertEquals(48, Node.DIRECTIVES);
670:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
671:       assertEquals(37, Node.OPT_ARG_NAME);
672:       assertEquals(56, Node.CHANGE_TIME);
673:       assertEquals(49, Node.DIRECT_EVAL);
674:       assertEquals(1, Node.DECR_FLAG);
675:       assertEquals(12, Node.COLUMN_BITS);
676:       assertEquals(51, Node.STATIC_SOURCE_FILE);
677:       assertEquals(30, Node.VAR_ARGS_NAME);
678:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
679:       assertEquals(15, Node.NO_SIDE_EFFECTS);
680:       assertEquals(57, Node.LAST_PROP);
681:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
682:       assertEquals(32, Node.INCRDECR_PROP);
683:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
684:       assertEquals(40, Node.ORIGINALNAME_PROP);
685:       assertEquals(47, Node.IS_DISPATCHER);
686:       assertEquals(2, Node.POST_FLAG);
687:       assertEquals(50, Node.FREE_CALL);
688:       assertEquals(46, Node.IS_NAMESPACE);
689:       assertEquals(54, Node.SLASH_V);
690:       assertEquals(43, Node.IS_CONSTANT_NAME);
691:       assertNotSame(node1, node0);
692:       assertNotNull(iterable0);
693:       assertFalse(node1.equals((Object)node2));
694:       assertFalse(node1.equals((Object)node0));
695:       assertFalse(node1.isArrayLit());
696:       assertFalse(node1.isFor());
697:       assertFalse(node1.isFunction());
698:       assertFalse(node1.isDebugger());
699:       assertFalse(node1.isGetterDef());
700:       assertFalse(node1.isDefaultCase());
701:       assertFalse(node1.isEmpty());
702:       assertEquals(52, node1.getCharno());
703:       assertFalse(node1.isTry());
704:       assertFalse(node1.isIn());
705:       assertFalse(node1.isCatch());
706:       assertFalse(node1.isNull());
707:       assertFalse(node1.isRegExp());
708:       assertFalse(node1.isIf());
709:       assertFalse(node1.isTrue());
710:       assertFalse(node1.isNE());
711:       assertFalse(node1.isName());
712:       assertFalse(node1.isVoid());
713:       assertFalse(node1.isCall());
714:       assertFalse(node1.isThrow());
715:       assertFalse(node1.isFalse());
716:       assertFalse(node1.isSetterDef());
717:       assertFalse(node1.isInc());
718:       assertFalse(node1.isWhile());
719:       assertFalse(node1.isString());
720:       assertFalse(node1.isGetProp());
721:       assertFalse(node1.isAnd());
722:       assertFalse(node1.isContinue());
723:       assertFalse(node1.isObjectLit());
724:       assertFalse(node1.isNot());
725:       assertFalse(node1.isCast());
726:       assertFalse(node1.isDec());
727:       assertFalse(node1.isAssign());
728:       assertFalse(node1.isScript());
729:       assertFalse(node1.hasChildren());
730:       assertFalse(node1.isNumber());
731:       assertFalse(node1.isAssignAdd());
732:       assertFalse(node1.hasOneChild());
733:       assertFalse(node1.hasMoreThanOneChild());
734:       assertFalse(node1.isInstanceOf());
735:       assertTrue(node1.isDelProp());
736:       assertFalse(node1.isReturn());
737:       assertFalse(node1.isWith());
738:       assertFalse(node1.isComma());
739:       assertFalse(node1.isOr());
740:       assertFalse(node1.isTypeOf());
741:       assertFalse(node1.isBreak());
742:       assertEquals(36, node1.getLineno());
743:       assertFalse(node1.isExprResult());
744:       assertFalse(node1.isGetElem());
745:       assertEquals(31, node1.getType());
746:       assertFalse(node1.isHook());
747:       assertFalse(node1.isVar());
748:       assertFalse(node1.isStringKey());
749:       assertFalse(node1.isBlock());
750:       assertFalse(node1.isThis());
751:       assertFalse(node1.isNew());
752:       assertFalse(node1.isAdd());
753:       assertFalse(node1.isCase());
754:       assertFalse(node1.isDo());
755:       assertFalse(node1.isLabel());
756:       assertEquals(147508, node1.getSourcePosition());
757:       assertEquals(0, node1.getChildCount());
758:       assertFalse(node1.isSwitch());
759:       assertFalse(node1.isParamList());
760:       assertFalse(node1.isLabelName());
761:       
762:       boolean boolean1 = node1.isCall();
763:       assertFalse(boolean1);
764:       assertEquals(55, Node.INFERRED_FUNCTION);
765:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
766:       assertEquals(36, Node.QUOTED_PROP);
767:       assertEquals(4095, Node.COLUMN_MASK);
768:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
769:       assertEquals(39, Node.EMPTY_BLOCK);
770:       assertEquals(53, Node.INPUT_ID);
771:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
772:       assertEquals(29, Node.JSDOC_INFO_PROP);
773:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
774:       assertEquals(57, Node.REFLECTED_OBJECT);
775:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
776:       assertEquals(52, Node.LENGTH);
777:       assertEquals(8, Node.FLAG_NO_THROWS);
778:       assertEquals(48, Node.DIRECTIVES);
779:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
780:       assertEquals(37, Node.OPT_ARG_NAME);
781:       assertEquals(56, Node.CHANGE_TIME);
782:       assertEquals(49, Node.DIRECT_EVAL);
783:       assertEquals(1, Node.DECR_FLAG);
784:       assertEquals(12, Node.COLUMN_BITS);
785:       assertEquals(51, Node.STATIC_SOURCE_FILE);
786:       assertEquals(30, Node.VAR_ARGS_NAME);
787:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
788:       assertEquals(15, Node.NO_SIDE_EFFECTS);
789:       assertEquals(57, Node.LAST_PROP);
790:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
791:       assertEquals(32, Node.INCRDECR_PROP);
792:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
793:       assertEquals(40, Node.ORIGINALNAME_PROP);
794:       assertEquals(47, Node.IS_DISPATCHER);
795:       assertEquals(2, Node.POST_FLAG);
796:       assertEquals(50, Node.FREE_CALL);
797:       assertEquals(46, Node.IS_NAMESPACE);
798:       assertEquals(54, Node.SLASH_V);
799:       assertEquals(43, Node.IS_CONSTANT_NAME);
800:       assertNotSame(node1, node0);
801:       assertFalse(node1.equals((Object)node2));
802:       assertFalse(node1.equals((Object)node0));
803:       assertTrue(boolean1 == boolean0);
804:       assertFalse(node1.isArrayLit());
805:       assertFalse(node1.isFor());
806:       assertFalse(node1.isFunction());
807:       assertFalse(node1.isDebugger());
808:       assertFalse(node1.isGetterDef());
809:       assertFalse(node1.isDefaultCase());
810:       assertFalse(node1.isEmpty());
811:       assertEquals(52, node1.getCharno());
812:       assertFalse(node1.isTry());
813:       assertFalse(node1.isIn());
814:       assertFalse(node1.isCatch());
815:       assertFalse(node1.isNull());
816:       assertFalse(node1.isRegExp());
817:       assertFalse(node1.isIf());
818:       assertFalse(node1.isTrue());
819:       assertFalse(node1.isNE());
820:       assertFalse(node1.isName());
821:       assertFalse(node1.isVoid());
822:       assertFalse(node1.isCall());
823:       assertFalse(node1.isThrow());
824:       assertFalse(node1.isFalse());
825:       assertFalse(node1.isSetterDef());
826:       assertFalse(node1.isInc());
827:       assertFalse(node1.isWhile());
828:       assertFalse(node1.isString());
829:       assertFalse(node1.isGetProp());
830:       assertFalse(node1.isAnd());
831:       assertFalse(node1.isContinue());
832:       assertFalse(node1.isObjectLit());
833:       assertFalse(node1.isNot());
834:       assertFalse(node1.isCast());
835:       assertFalse(node1.isDec());
836:       assertFalse(node1.isAssign());
837:       assertFalse(node1.isScript());
838:       assertFalse(node1.hasChildren());
839:       assertFalse(node1.isNumber());
840:       assertFalse(node1.isAssignAdd());
841:       assertFalse(node1.hasOneChild());
842:       assertFalse(node1.hasMoreThanOneChild());
843:       assertFalse(node1.isInstanceOf());
844:       assertTrue(node1.isDelProp());
845:       assertFalse(node1.isReturn());
846:       assertFalse(node1.isWith());
847:       assertFalse(node1.isComma());
848:       assertFalse(node1.isOr());
849:       assertFalse(node1.isTypeOf());
850:       assertFalse(node1.isBreak());
851:       assertEquals(36, node1.getLineno());
852:       assertFalse(node1.isExprResult());
853:       assertFalse(node1.isGetElem());
854:       assertEquals(31, node1.getType());
855:       assertFalse(node1.isHook());
856:       assertFalse(node1.isVar());
857:       assertFalse(node1.isStringKey());
858:       assertFalse(node1.isBlock());
859:       assertFalse(node1.isThis());
860:       assertFalse(node1.isNew());
861:       assertFalse(node1.isAdd());
862:       assertFalse(node1.isCase());
863:       assertFalse(node1.isDo());
864:       assertFalse(node1.isLabel());
865:       assertEquals(147508, node1.getSourcePosition());
866:       assertEquals(0, node1.getChildCount());
867:       assertFalse(node1.isSwitch());
868:       assertFalse(node1.isParamList());
869:       assertFalse(node1.isLabelName());
870:       
871:       Node node3 = node2.removeChildAfter(node1);
872:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
873:       assertEquals(53, Node.INPUT_ID);
874:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
875:       assertEquals(43, Node.IS_CONSTANT_NAME);
876:       assertEquals(56, Node.CHANGE_TIME);
877:       assertEquals(36, Node.QUOTED_PROP);
878:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
879:       assertEquals(37, Node.OPT_ARG_NAME);
880:       assertEquals(32, Node.INCRDECR_PROP);
881:       assertEquals(46, Node.IS_NAMESPACE);
882:       assertEquals(51, Node.STATIC_SOURCE_FILE);
883:       assertEquals(12, Node.COLUMN_BITS);
884:       assertEquals(4095, Node.COLUMN_MASK);
885:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
886:       assertEquals(1, Node.DECR_FLAG);
887:       assertEquals(40, Node.ORIGINALNAME_PROP);
888:       assertEquals(57, Node.REFLECTED_OBJECT);
889:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
890:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
891:       assertEquals(52, Node.LENGTH);
892:       assertEquals(50, Node.FREE_CALL);
893:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
894:       assertEquals(48, Node.DIRECTIVES);
895:       assertEquals(54, Node.SLASH_V);
896:       assertEquals(49, Node.DIRECT_EVAL);
897:       assertEquals(55, Node.INFERRED_FUNCTION);
898:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
899:       assertEquals(2, Node.POST_FLAG);
900:       assertEquals(30, Node.VAR_ARGS_NAME);
901:       assertEquals(8, Node.FLAG_NO_THROWS);
902:       assertEquals(15, Node.NO_SIDE_EFFECTS);
903:       assertEquals(57, Node.LAST_PROP);
904:       assertEquals(47, Node.IS_DISPATCHER);
905:       assertEquals(29, Node.JSDOC_INFO_PROP);
906:       assertEquals(39, Node.EMPTY_BLOCK);
907:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
908:       assertEquals(55, Node.INFERRED_FUNCTION);
909:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
910:       assertEquals(36, Node.QUOTED_PROP);
911:       assertEquals(4095, Node.COLUMN_MASK);
912:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
913:       assertEquals(39, Node.EMPTY_BLOCK);
914:       assertEquals(53, Node.INPUT_ID);
915:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
916:       assertEquals(29, Node.JSDOC_INFO_PROP);
917:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
918:       assertEquals(57, Node.REFLECTED_OBJECT);
919:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
920:       assertEquals(52, Node.LENGTH);
921:       assertEquals(8, Node.FLAG_NO_THROWS);
922:       assertEquals(48, Node.DIRECTIVES);
923:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
924:       assertEquals(37, Node.OPT_ARG_NAME);
925:       assertEquals(56, Node.CHANGE_TIME);
926:       assertEquals(49, Node.DIRECT_EVAL);
927:       assertEquals(1, Node.DECR_FLAG);
928:       assertEquals(12, Node.COLUMN_BITS);
929:       assertEquals(51, Node.STATIC_SOURCE_FILE);
930:       assertEquals(30, Node.VAR_ARGS_NAME);
931:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
932:       assertEquals(15, Node.NO_SIDE_EFFECTS);
933:       assertEquals(57, Node.LAST_PROP);
934:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
935:       assertEquals(32, Node.INCRDECR_PROP);
936:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
937:       assertEquals(40, Node.ORIGINALNAME_PROP);
938:       assertEquals(47, Node.IS_DISPATCHER);
939:       assertEquals(2, Node.POST_FLAG);
940:       assertEquals(50, Node.FREE_CALL);
941:       assertEquals(46, Node.IS_NAMESPACE);
942:       assertEquals(54, Node.SLASH_V);
943:       assertEquals(43, Node.IS_CONSTANT_NAME);
944:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
945:       assertEquals(29, Node.JSDOC_INFO_PROP);
946:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
947:       assertEquals(53, Node.INPUT_ID);
948:       assertEquals(43, Node.IS_CONSTANT_NAME);
949:       assertEquals(36, Node.QUOTED_PROP);
950:       assertEquals(56, Node.CHANGE_TIME);
951:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
952:       assertEquals(46, Node.IS_NAMESPACE);
953:       assertEquals(55, Node.INFERRED_FUNCTION);
954:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
955:       assertEquals(15, Node.NO_SIDE_EFFECTS);
956:       assertEquals(39, Node.EMPTY_BLOCK);
957:       assertEquals(2, Node.POST_FLAG);
958:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
959:       assertEquals(57, Node.LAST_PROP);
960:       assertEquals(30, Node.VAR_ARGS_NAME);
961:       assertEquals(47, Node.IS_DISPATCHER);
962:       assertEquals(57, Node.REFLECTED_OBJECT);
963:       assertEquals(52, Node.LENGTH);
964:       assertEquals(40, Node.ORIGINALNAME_PROP);
965:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
966:       assertEquals(8, Node.FLAG_NO_THROWS);
967:       assertEquals(50, Node.FREE_CALL);
968:       assertEquals(54, Node.SLASH_V);
969:       assertEquals(51, Node.STATIC_SOURCE_FILE);
970:       assertEquals(12, Node.COLUMN_BITS);
971:       assertEquals(4095, Node.COLUMN_MASK);
972:       assertEquals(32, Node.INCRDECR_PROP);
973:       assertEquals(49, Node.DIRECT_EVAL);
974:       assertEquals(48, Node.DIRECTIVES);
975:       assertEquals(1, Node.DECR_FLAG);
976:       assertEquals(37, Node.OPT_ARG_NAME);
977:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
978:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
979:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
980:       assertEquals(52, Node.LENGTH);
981:       assertEquals(57, Node.REFLECTED_OBJECT);
982:       assertEquals(40, Node.ORIGINALNAME_PROP);
983:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
984:       assertEquals(57, Node.LAST_PROP);
985:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
986:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
987:       assertEquals(30, Node.VAR_ARGS_NAME);
988:       assertEquals(32, Node.INCRDECR_PROP);
989:       assertEquals(46, Node.IS_NAMESPACE);
990:       assertEquals(12, Node.COLUMN_BITS);
991:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
992:       assertEquals(1, Node.DECR_FLAG);
993:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
994:       assertEquals(43, Node.IS_CONSTANT_NAME);
995:       assertEquals(54, Node.SLASH_V);
996:       assertEquals(50, Node.FREE_CALL);
997:       assertEquals(51, Node.STATIC_SOURCE_FILE);
998:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
999:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1000:       assertEquals(53, Node.INPUT_ID);
1001:       assertEquals(47, Node.IS_DISPATCHER);
1002:       assertEquals(2, Node.POST_FLAG);
1003:       assertEquals(55, Node.INFERRED_FUNCTION);
1004:       assertEquals(4095, Node.COLUMN_MASK);
1005:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1006:       assertEquals(48, Node.DIRECTIVES);
1007:       assertEquals(39, Node.EMPTY_BLOCK);
1008:       assertEquals(49, Node.DIRECT_EVAL);
1009:       assertEquals(37, Node.OPT_ARG_NAME);
1010:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1011:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1012:       assertEquals(29, Node.JSDOC_INFO_PROP);
1013:       assertEquals(56, Node.CHANGE_TIME);
1014:       assertEquals(8, Node.FLAG_NO_THROWS);
1015:       assertEquals(36, Node.QUOTED_PROP);
1016:       assertSame(node0, node3);
1017:       assertNotSame(node0, node1);
1018:       assertNotSame(node1, node0);
1019:       assertNotSame(node1, node3);
1020:       assertSame(node3, node0);
1021:       assertNotSame(node3, node1);
1022:       assertNotNull(node3);
1023:       assertFalse(node0.equals((Object)node2));
1024:       assertFalse(node0.equals((Object)node1));
1025:       assertFalse(node1.equals((Object)node2));
1026:       assertFalse(node1.equals((Object)node0));
1027:       assertFalse(node2.equals((Object)node1));
1028:       assertFalse(node2.equals((Object)node0));
1029:       assertFalse(node3.equals((Object)node1));
1030:       assertFalse(node3.equals((Object)node2));
1031:       assertFalse(node0.isNE());
1032:       assertFalse(node0.isIn());
1033:       assertFalse(node0.isGetterDef());
1034:       assertFalse(node0.isArrayLit());
1035:       assertFalse(node0.isIf());
1036:       assertFalse(node0.isSwitch());
1037:       assertFalse(node0.isDelProp());
1038:       assertEquals(0, node0.getType());
1039:       assertFalse(node0.isDebugger());
1040:       assertEquals((-1), node0.getCharno());
1041:       assertFalse(node0.isHook());
1042:       assertFalse(node0.isRegExp());
1043:       assertFalse(node0.isCase());
1044:       assertFalse(node0.isString());
1045:       assertFalse(node0.isFor());
1046:       assertFalse(node0.isTry());
1047:       assertFalse(node0.isGetProp());
1048:       assertFalse(node0.isThis());
1049:       assertFalse(node0.isSetterDef());
1050:       assertFalse(node0.isInstanceOf());
1051:       assertFalse(node0.isObjectLit());
1052:       assertFalse(node0.isFalse());
1053:       assertFalse(node0.isAnd());
1054:       assertFalse(node0.isCatch());
1055:       assertFalse(node0.isInc());
1056:       assertFalse(node0.isFunction());
1057:       assertFalse(node0.isThrow());
1058:       assertFalse(node0.isAssignAdd());
1059:       assertFalse(node0.isLabel());
1060:       assertFalse(node0.isReturn());
1061:       assertEquals((-1), node0.getSourcePosition());
1062:       assertFalse(node0.isDec());
1063:       assertFalse(node0.isNumber());
1064:       assertFalse(node0.hasChildren());
1065:       assertFalse(node0.hasMoreThanOneChild());
1066:       assertFalse(node0.isAssign());
1067:       assertFalse(node0.isTypeOf());
1068:       assertFalse(node0.isOr());
1069:       assertFalse(node0.isGetElem());
1070:       assertFalse(node0.isContinue());
1071:       assertFalse(node0.isCast());
1072:       assertEquals((-1), node0.getLineno());
1073:       assertFalse(node0.isLabelName());
1074:       assertFalse(node0.isBlock());
1075:       assertFalse(node0.isExprResult());
1076:       assertFalse(node0.isScript());
1077:       assertFalse(node0.isWith());
1078:       assertFalse(node0.isNot());
1079:       assertFalse(node0.isWhile());
1080:       assertFalse(node0.hasOneChild());
1081:       assertFalse(node0.isParamList());
1082:       assertFalse(node0.isNull());
1083:       assertFalse(node0.isComma());
1084:       assertEquals(0, node0.getChildCount());
1085:       assertFalse(node0.isStringKey());
1086:       assertFalse(node0.isName());
1087:       assertFalse(node0.isCall());
1088:       assertFalse(node0.isBreak());
1089:       assertFalse(node0.isVoid());
1090:       assertFalse(node0.isNew());
1091:       assertFalse(node0.isTrue());
1092:       assertFalse(node0.isAdd());
1093:       assertFalse(node0.isEmpty());
1094:       assertFalse(node0.isVar());
1095:       assertFalse(node0.isDefaultCase());
1096:       assertFalse(node0.isDo());
1097:       assertFalse(node1.isArrayLit());
1098:       assertFalse(node1.isFor());
1099:       assertFalse(node1.isFunction());
1100:       assertFalse(node1.isDebugger());
1101:       assertFalse(node1.isGetterDef());
1102:       assertFalse(node1.isDefaultCase());
1103:       assertFalse(node1.isEmpty());
1104:       assertEquals(52, node1.getCharno());
1105:       assertFalse(node1.isTry());
1106:       assertFalse(node1.isIn());
1107:       assertFalse(node1.isCatch());
1108:       assertFalse(node1.isNull());
1109:       assertFalse(node1.isRegExp());
1110:       assertFalse(node1.isIf());
1111:       assertFalse(node1.isTrue());
1112:       assertFalse(node1.isNE());
1113:       assertFalse(node1.isName());
1114:       assertFalse(node1.isVoid());
1115:       assertFalse(node1.isCall());
1116:       assertFalse(node1.isThrow());
1117:       assertFalse(node1.isFalse());
1118:       assertFalse(node1.isSetterDef());
1119:       assertFalse(node1.isInc());
1120:       assertFalse(node1.isWhile());
1121:       assertFalse(node1.isString());
1122:       assertFalse(node1.isGetProp());
1123:       assertFalse(node1.isAnd());
1124:       assertFalse(node1.isContinue());
1125:       assertFalse(node1.isObjectLit());
1126:       assertFalse(node1.isNot());
1127:       assertFalse(node1.isCast());
1128:       assertFalse(node1.isDec());
1129:       assertFalse(node1.isAssign());
1130:       assertFalse(node1.isScript());
1131:       assertFalse(node1.hasChildren());
1132:       assertFalse(node1.isNumber());
1133:       assertFalse(node1.isAssignAdd());
1134:       assertFalse(node1.hasOneChild());
1135:       assertFalse(node1.hasMoreThanOneChild());
1136:       assertFalse(node1.isInstanceOf());
1137:       assertTrue(node1.isDelProp());
1138:       assertFalse(node1.isReturn());
1139:       assertFalse(node1.isWith());
1140:       assertFalse(node1.isComma());
1141:       assertFalse(node1.isOr());
1142:       assertFalse(node1.isTypeOf());
1143:       assertFalse(node1.isBreak());
1144:       assertEquals(36, node1.getLineno());
1145:       assertFalse(node1.isExprResult());
1146:       assertFalse(node1.isGetElem());
1147:       assertEquals(31, node1.getType());
1148:       assertFalse(node1.isHook());
1149:       assertFalse(node1.isVar());
1150:       assertFalse(node1.isStringKey());
1151:       assertFalse(node1.isBlock());
1152:       assertFalse(node1.isThis());
1153:       assertFalse(node1.isNew());
1154:       assertFalse(node1.isAdd());
1155:       assertFalse(node1.isCase());
1156:       assertFalse(node1.isDo());
1157:       assertFalse(node1.isLabel());
1158:       assertEquals(147508, node1.getSourcePosition());
1159:       assertEquals(0, node1.getChildCount());
1160:       assertFalse(node1.isSwitch());
1161:       assertFalse(node1.isParamList());
1162:       assertFalse(node1.isLabelName());
1163:       assertFalse(node2.isAssignAdd());
1164:       assertFalse(node2.isOr());
1165:       assertFalse(node2.isLabel());
1166:       assertFalse(node2.isLabelName());
1167:       assertFalse(node2.isNumber());
1168:       assertFalse(node2.isNew());
1169:       assertFalse(node2.isCast());
1170:       assertFalse(node2.isAdd());
1171:       assertFalse(node2.isDo());
1172:       assertFalse(node2.isContinue());
1173:       assertFalse(node2.isVar());
1174:       assertFalse(node2.isCatch());
1175:       assertFalse(node2.isInstanceOf());
1176:       assertFalse(node2.isSetterDef());
1177:       assertEquals(37, node2.getCharno());
1178:       assertFalse(node2.isStringKey());
1179:       assertFalse(node2.isParamList());
1180:       assertFalse(node2.isTry());
1181:       assertFalse(node2.isScript());
1182:       assertFalse(node2.hasOneChild());
1183:       assertFalse(node2.isFor());
1184:       assertFalse(node2.isWith());
1185:       assertFalse(node2.isCase());
1186:       assertFalse(node2.isRegExp());
1187:       assertFalse(node2.isHook());
1188:       assertFalse(node2.isThis());
1189:       assertFalse(node2.isBlock());
1190:       assertTrue(node2.hasChildren());
1191:       assertEquals(1, node2.getChildCount());
1192:       assertFalse(node2.isIn());
1193:       assertFalse(node2.isEmpty());
1194:       assertFalse(node2.isString());
1195:       assertTrue(node2.hasMoreThanOneChild());
1196:       assertFalse(node2.isIf());
1197:       assertFalse(node2.isGetterDef());
1198:       assertFalse(node2.isDelProp());
1199:       assertEquals(204837, node2.getSourcePosition());
1200:       assertFalse(node2.isNE());
1201:       assertFalse(node2.isSwitch());
1202:       assertFalse(node2.isFunction());
1203:       assertFalse(node2.isArrayLit());
1204:       assertFalse(node2.isInc());
1205:       assertFalse(node2.isDefaultCase());
1206:       assertFalse(node2.isFalse());
1207:       assertFalse(node2.isThrow());
1208:       assertFalse(node2.isBreak());
1209:       assertFalse(node2.isGetProp());
1210:       assertFalse(node2.isNot());
1211:       assertFalse(node2.isObjectLit());
1212:       assertFalse(node2.isName());
1213:       assertFalse(node2.isAnd());
1214:       assertFalse(node2.isDebugger());
1215:       assertFalse(node2.isTrue());
1216:       assertFalse(node2.isNull());
1217:       assertFalse(node2.isVoid());
1218:       assertEquals(50, node2.getLineno());
1219:       assertFalse(node2.isGetElem());
1220:       assertFalse(node2.isExprResult());
1221:       assertFalse(node2.isCall());
1222:       assertEquals(0, node2.getType());
1223:       assertFalse(node2.isAssign());
1224:       assertFalse(node2.isWhile());
1225:       assertFalse(node2.isTypeOf());
1226:       assertFalse(node2.isComma());
1227:       assertFalse(node2.isDec());
1228:       assertFalse(node2.isReturn());
1229:       assertFalse(node3.isGetProp());
1230:       assertFalse(node3.isInstanceOf());
1231:       assertFalse(node3.isBreak());
1232:       assertFalse(node3.isThrow());
1233:       assertFalse(node3.isFalse());
1234:       assertFalse(node3.isWith());
1235:       assertFalse(node3.isHook());
1236:       assertFalse(node3.isComma());
1237:       assertFalse(node3.isThis());
1238:       assertFalse(node3.isSwitch());
1239:       assertFalse(node3.hasOneChild());
1240:       assertFalse(node3.isScript());
1241:       assertFalse(node3.isCase());
1242:       assertFalse(node3.isNot());
1243:       assertFalse(node3.isObjectLit());
1244:       assertFalse(node3.isLabelName());
1245:       assertFalse(node3.isAnd());
1246:       assertFalse(node3.isString());
1247:       assertEquals((-1), node3.getSourcePosition());
1248:       assertFalse(node3.isNumber());
1249:       assertEquals((-1), node3.getCharno());
1250:       assertFalse(node3.isOr());
1251:       assertFalse(node3.isAssignAdd());
1252:       assertFalse(node3.isDelProp());
1253:       assertFalse(node3.isGetElem());
1254:       assertFalse(node3.isAssign());
1255:       assertFalse(node3.isDo());
1256:       assertFalse(node3.isWhile());
1257:       assertFalse(node3.isDec());
1258:       assertFalse(node3.isTypeOf());
1259:       assertFalse(node3.isReturn());
1260:       assertFalse(node3.hasChildren());
1261:       assertFalse(node3.isLabel());
1262:       assertFalse(node3.isNew());
1263:       assertFalse(node3.isVoid());
1264:       assertFalse(node3.isExprResult());
1265:       assertFalse(node3.isTrue());
1266:       assertFalse(node3.isAdd());
1267:       assertEquals(0, node3.getType());
1268:       assertFalse(node3.isDefaultCase());
1269:       assertFalse(node3.isEmpty());
1270:       assertFalse(node3.isName());
1271:       assertFalse(node3.isNull());
1272:       assertFalse(node3.isParamList());
1273:       assertFalse(node3.isSetterDef());
1274:       assertFalse(node3.isCall());
1275:       assertFalse(node3.isCatch());
1276:       assertEquals(0, node3.getChildCount());
1277:       assertFalse(node3.isVar());
1278:       assertFalse(node3.isRegExp());
1279:       assertFalse(node3.isBlock());
1280:       assertFalse(node3.isTry());
1281:       assertFalse(node3.isFunction());
1282:       assertFalse(node3.isArrayLit());
1283:       assertFalse(node3.isStringKey());
1284:       assertFalse(node3.isGetterDef());
1285:       assertFalse(node3.isDebugger());
1286:       assertFalse(node3.isIn());
1287:       assertEquals((-1), node3.getLineno());
1288:       assertFalse(node3.isFor());
1289:       assertFalse(node3.isCast());
1290:       assertFalse(node3.hasMoreThanOneChild());
1291:       assertFalse(node3.isContinue());
1292:       assertFalse(node3.isInc());
1293:       assertFalse(node3.isIf());
1294:       assertFalse(node3.isNE());
1295:       
1296:       boolean boolean2 = node0.isOnlyModifiesArgumentsCall();
1297:       assertFalse(boolean2);
1298:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1299:       assertEquals(53, Node.INPUT_ID);
1300:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1301:       assertEquals(43, Node.IS_CONSTANT_NAME);
1302:       assertEquals(56, Node.CHANGE_TIME);
1303:       assertEquals(36, Node.QUOTED_PROP);
1304:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1305:       assertEquals(37, Node.OPT_ARG_NAME);
1306:       assertEquals(32, Node.INCRDECR_PROP);
1307:       assertEquals(46, Node.IS_NAMESPACE);
1308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1309:       assertEquals(12, Node.COLUMN_BITS);
1310:       assertEquals(4095, Node.COLUMN_MASK);
1311:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1312:       assertEquals(1, Node.DECR_FLAG);
1313:       assertEquals(40, Node.ORIGINALNAME_PROP);
1314:       assertEquals(57, Node.REFLECTED_OBJECT);
1315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1317:       assertEquals(52, Node.LENGTH);
1318:       assertEquals(50, Node.FREE_CALL);
1319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1320:       assertEquals(48, Node.DIRECTIVES);
1321:       assertEquals(54, Node.SLASH_V);
1322:       assertEquals(49, Node.DIRECT_EVAL);
1323:       assertEquals(55, Node.INFERRED_FUNCTION);
1324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1325:       assertEquals(2, Node.POST_FLAG);
1326:       assertEquals(30, Node.VAR_ARGS_NAME);
1327:       assertEquals(8, Node.FLAG_NO_THROWS);
1328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1329:       assertEquals(57, Node.LAST_PROP);
1330:       assertEquals(47, Node.IS_DISPATCHER);
1331:       assertEquals(29, Node.JSDOC_INFO_PROP);
1332:       assertEquals(39, Node.EMPTY_BLOCK);
1333:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1334:       assertSame(node0, node3);
1335:       assertNotSame(node0, node1);
1336:       assertFalse(node0.equals((Object)node2));
1337:       assertFalse(node0.equals((Object)node1));
1338:       assertTrue(boolean2 == boolean1);
1339:       assertTrue(boolean2 == boolean0);
1340:       assertFalse(node0.isNE());
1341:       assertFalse(node0.isIn());
1342:       assertFalse(node0.isGetterDef());
1343:       assertFalse(node0.isArrayLit());
1344:       assertFalse(node0.isIf());
1345:       assertFalse(node0.isSwitch());
1346:       assertFalse(node0.isDelProp());
1347:       assertEquals(0, node0.getType());
1348:       assertFalse(node0.isDebugger());
1349:       assertEquals((-1), node0.getCharno());
1350:       assertFalse(node0.isHook());
1351:       assertFalse(node0.isRegExp());
1352:       assertFalse(node0.isCase());
1353:       assertFalse(node0.isString());
1354:       assertFalse(node0.isFor());
1355:       assertFalse(node0.isTry());
1356:       assertFalse(node0.isGetProp());
1357:       assertFalse(node0.isThis());
1358:       assertFalse(node0.isSetterDef());
1359:       assertFalse(node0.isInstanceOf());
1360:       assertFalse(node0.isObjectLit());
1361:       assertFalse(node0.isFalse());
1362:       assertFalse(node0.isAnd());
1363:       assertFalse(node0.isCatch());
1364:       assertFalse(node0.isInc());
1365:       assertFalse(node0.isFunction());
1366:       assertFalse(node0.isThrow());
1367:       assertFalse(node0.isAssignAdd());
1368:       assertFalse(node0.isLabel());
1369:       assertFalse(node0.isReturn());
1370:       assertEquals((-1), node0.getSourcePosition());
1371:       assertFalse(node0.isDec());
1372:       assertFalse(node0.isNumber());
1373:       assertFalse(node0.hasChildren());
1374:       assertFalse(node0.hasMoreThanOneChild());
1375:       assertFalse(node0.isAssign());
1376:       assertFalse(node0.isTypeOf());
1377:       assertFalse(node0.isOr());
1378:       assertFalse(node0.isGetElem());
1379:       assertFalse(node0.isContinue());
1380:       assertFalse(node0.isCast());
1381:       assertEquals((-1), node0.getLineno());
1382:       assertFalse(node0.isLabelName());
1383:       assertFalse(node0.isBlock());
1384:       assertFalse(node0.isExprResult());
1385:       assertFalse(node0.isScript());
1386:       assertFalse(node0.isWith());
1387:       assertFalse(node0.isNot());
1388:       assertFalse(node0.isWhile());
1389:       assertFalse(node0.hasOneChild());
1390:       assertFalse(node0.isParamList());
1391:       assertFalse(node0.isNull());
1392:       assertFalse(node0.isComma());
1393:       assertEquals(0, node0.getChildCount());
1394:       assertFalse(node0.isStringKey());
1395:       assertFalse(node0.isName());
1396:       assertFalse(node0.isCall());
1397:       assertFalse(node0.isBreak());
1398:       assertFalse(node0.isVoid());
1399:       assertFalse(node0.isNew());
1400:       assertFalse(node0.isTrue());
1401:       assertFalse(node0.isAdd());
1402:       assertFalse(node0.isEmpty());
1403:       assertFalse(node0.isVar());
1404:       assertFalse(node0.isDefaultCase());
1405:       assertFalse(node0.isDo());
1406:       
1407:       boolean boolean3 = node0.isCall();
1408:       assertFalse(boolean3);
1409:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1410:       assertEquals(53, Node.INPUT_ID);
1411:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1412:       assertEquals(43, Node.IS_CONSTANT_NAME);
1413:       assertEquals(56, Node.CHANGE_TIME);
1414:       assertEquals(36, Node.QUOTED_PROP);
1415:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1416:       assertEquals(37, Node.OPT_ARG_NAME);
1417:       assertEquals(32, Node.INCRDECR_PROP);
1418:       assertEquals(46, Node.IS_NAMESPACE);
1419:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1420:       assertEquals(12, Node.COLUMN_BITS);
1421:       assertEquals(4095, Node.COLUMN_MASK);
1422:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1423:       assertEquals(1, Node.DECR_FLAG);
1424:       assertEquals(40, Node.ORIGINALNAME_PROP);
1425:       assertEquals(57, Node.REFLECTED_OBJECT);
1426:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1427:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1428:       assertEquals(52, Node.LENGTH);
1429:       assertEquals(50, Node.FREE_CALL);
1430:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1431:       assertEquals(48, Node.DIRECTIVES);
1432:       assertEquals(54, Node.SLASH_V);
1433:       assertEquals(49, Node.DIRECT_EVAL);
1434:       assertEquals(55, Node.INFERRED_FUNCTION);
1435:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1436:       assertEquals(2, Node.POST_FLAG);
1437:       assertEquals(30, Node.VAR_ARGS_NAME);
1438:       assertEquals(8, Node.FLAG_NO_THROWS);
1439:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1440:       assertEquals(57, Node.LAST_PROP);
1441:       assertEquals(47, Node.IS_DISPATCHER);
1442:       assertEquals(29, Node.JSDOC_INFO_PROP);
1443:       assertEquals(39, Node.EMPTY_BLOCK);
1444:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1445:       assertSame(node0, node3);
1446:       assertNotSame(node0, node1);
1447:       assertFalse(node0.equals((Object)node2));
1448:       assertFalse(node0.equals((Object)node1));
1449:       assertTrue(boolean3 == boolean2);
1450:       assertTrue(boolean3 == boolean1);
1451:       assertTrue(boolean3 == boolean0);
1452:       assertFalse(node0.isNE());
1453:       assertFalse(node0.isIn());
1454:       assertFalse(node0.isGetterDef());
1455:       assertFalse(node0.isArrayLit());
1456:       assertFalse(node0.isIf());
1457:       assertFalse(node0.isSwitch());
1458:       assertFalse(node0.isDelProp());
1459:       assertEquals(0, node0.getType());
1460:       assertFalse(node0.isDebugger());
1461:       assertEquals((-1), node0.getCharno());
1462:       assertFalse(node0.isHook());
1463:       assertFalse(node0.isRegExp());
1464:       assertFalse(node0.isCase());
1465:       assertFalse(node0.isString());
1466:       assertFalse(node0.isFor());
1467:       assertFalse(node0.isTry());
1468:       assertFalse(node0.isGetProp());
1469:       assertFalse(node0.isThis());
1470:       assertFalse(node0.isSetterDef());
1471:       assertFalse(node0.isInstanceOf());
1472:       assertFalse(node0.isObjectLit());
1473:       assertFalse(node0.isFalse());
1474:       assertFalse(node0.isAnd());
1475:       assertFalse(node0.isCatch());
1476:       assertFalse(node0.isInc());
1477:       assertFalse(node0.isFunction());
1478:       assertFalse(node0.isThrow());
1479:       assertFalse(node0.isAssignAdd());
1480:       assertFalse(node0.isLabel());
1481:       assertFalse(node0.isReturn());
1482:       assertEquals((-1), node0.getSourcePosition());
1483:       assertFalse(node0.isDec());
1484:       assertFalse(node0.isNumber());
1485:       assertFalse(node0.hasChildren());
1486:       assertFalse(node0.hasMoreThanOneChild());
1487:       assertFalse(node0.isAssign());
1488:       assertFalse(node0.isTypeOf());
1489:       assertFalse(node0.isOr());
1490:       assertFalse(node0.isGetElem());
1491:       assertFalse(node0.isContinue());
1492:       assertFalse(node0.isCast());
1493:       assertEquals((-1), node0.getLineno());
1494:       assertFalse(node0.isLabelName());
1495:       assertFalse(node0.isBlock());
1496:       assertFalse(node0.isExprResult());
1497:       assertFalse(node0.isScript());
1498:       assertFalse(node0.isWith());
1499:       assertFalse(node0.isNot());
1500:       assertFalse(node0.isWhile());
1501:       assertFalse(node0.hasOneChild());
1502:       assertFalse(node0.isParamList());
1503:       assertFalse(node0.isNull());
1504:       assertFalse(node0.isComma());
1505:       assertEquals(0, node0.getChildCount());
1506:       assertFalse(node0.isStringKey());
1507:       assertFalse(node0.isName());
1508:       assertFalse(node0.isCall());
1509:       assertFalse(node0.isBreak());
1510:       assertFalse(node0.isVoid());
1511:       assertFalse(node0.isNew());
1512:       assertFalse(node0.isTrue());
1513:       assertFalse(node0.isAdd());
1514:       assertFalse(node0.isEmpty());
1515:       assertFalse(node0.isVar());
1516:       assertFalse(node0.isDefaultCase());
1517:       assertFalse(node0.isDo());
1518:   }
1519: }
RegularFileObject[/tmp/EvoSuite_260_1628157904874/com/google/javascript/rhino/Node_260_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:05:05 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_260_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_260_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_260_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:05:05.162 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(0, "NEG");
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertNotNull(node0);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());

Node node1 = Node.newString(31, "NEG", 36, 52);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertEquals(52, node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertEquals(36, node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(147508, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());

Node node2 = new Node(0, node0, node1, node1, node0, 50, 37);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertEquals(52, node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertEquals(36, node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(147508, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isNew());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertEquals(37, node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertEquals(204837, node2.getSourcePosition());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isVoid());
assertEquals(50, node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertEquals(0, node2.getType());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isReturn());
assertTrue(node2.hasOneChild());

boolean boolean0 = node1.isEmpty();
assertFalse(boolean0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertEquals(52, node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertEquals(36, node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(147508, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node0));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node1, node0);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertEquals(52, node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertEquals(36, node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(147508, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());

boolean boolean1 = node1.isCall();
assertFalse(boolean1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertEquals(52, node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertEquals(36, node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(147508, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());

Node node3 = node2.removeChildAfter(node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertSame(node3, node0);
assertNotSame(node3, node1);
assertNotNull(node3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertEquals(52, node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isDelProp());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertEquals(36, node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(147508, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isNew());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertEquals(37, node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertEquals(204837, node2.getSourcePosition());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isVoid());
assertEquals(50, node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertEquals(0, node2.getType());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isWith());
assertFalse(node3.isHook());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isSwitch());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isAnd());
assertFalse(node3.isString());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.hasChildren());
assertFalse(node3.isLabel());
assertFalse(node3.isNew());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isAdd());
assertEquals(0, node3.getType());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCall());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isVar());
assertFalse(node3.isRegExp());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isIn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isFor());
assertFalse(node3.isCast());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isInc());
assertFalse(node3.isIf());
assertFalse(node3.isNE());

boolean boolean2 = node0.isOnlyModifiesArgumentsCall();
assertFalse(boolean2);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());

boolean boolean3 = node0.isCall();
assertFalse(boolean3);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());


[MASTER] 10:05:06.684 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_268_1628157906640/com/google/javascript/rhino/Node_268_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_268_1628157906640/com/google/javascript/rhino/Node_268_tmp__ESTest_scaffolding.java]]
[MASTER] 10:05:06.684 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:05:06.684 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:05:06.685 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 127
[MASTER] 10:05:06.685 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_268_1628157906640/com/google/javascript/rhino/Node_268_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:05:06 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_268_tmp__ESTest extends Node_268_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(37, "com.google.javascript.rhino.jstype.FnctionType");
22:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
23:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
24:       assertEquals(50, Node.FREE_CALL);
25:       assertEquals(8, Node.FLAG_NO_THROWS);
26:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
27:       assertEquals(57, Node.REFLECTED_OBJECT);
28:       assertEquals(4095, Node.COLUMN_MASK);
29:       assertEquals(48, Node.DIRECTIVES);
30:       assertEquals(40, Node.ORIGINALNAME_PROP);
31:       assertEquals(43, Node.IS_CONSTANT_NAME);
32:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
33:       assertEquals(54, Node.SLASH_V);
34:       assertEquals(12, Node.COLUMN_BITS);
35:       assertEquals(51, Node.STATIC_SOURCE_FILE);
36:       assertEquals(32, Node.INCRDECR_PROP);
37:       assertEquals(1, Node.DECR_FLAG);
38:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
39:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
40:       assertEquals(47, Node.IS_DISPATCHER);
41:       assertEquals(56, Node.CHANGE_TIME);
42:       assertEquals(2, Node.POST_FLAG);
43:       assertEquals(46, Node.IS_NAMESPACE);
44:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
45:       assertEquals(37, Node.OPT_ARG_NAME);
46:       assertEquals(15, Node.NO_SIDE_EFFECTS);
47:       assertEquals(57, Node.LAST_PROP);
48:       assertEquals(36, Node.QUOTED_PROP);
49:       assertEquals(30, Node.VAR_ARGS_NAME);
50:       assertEquals(49, Node.DIRECT_EVAL);
51:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
52:       assertEquals(52, Node.LENGTH);
53:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
54:       assertEquals(55, Node.INFERRED_FUNCTION);
55:       assertEquals(29, Node.JSDOC_INFO_PROP);
56:       assertEquals(39, Node.EMPTY_BLOCK);
57:       assertEquals(53, Node.INPUT_ID);
58:       assertNotNull(node0);
59:       assertFalse(node0.isAnd());
60:       assertFalse(node0.isWith());
61:       assertFalse(node0.isNot());
62:       assertFalse(node0.isObjectLit());
63:       assertFalse(node0.isComma());
64:       assertFalse(node0.isInstanceOf());
65:       assertFalse(node0.isBreak());
66:       assertFalse(node0.isExprResult());
67:       assertFalse(node0.isCast());
68:       assertFalse(node0.isAssign());
69:       assertFalse(node0.isLabelName());
70:       assertFalse(node0.isHook());
71:       assertEquals((-1), node0.getSourcePosition());
72:       assertFalse(node0.isDec());
73:       assertFalse(node0.hasChildren());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isGetProp());
76:       assertEquals((-1), node0.getCharno());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.isNumber());
79:       assertFalse(node0.isString());
80:       assertFalse(node0.isScript());
81:       assertFalse(node0.isDo());
82:       assertEquals(37, node0.getType());
83:       assertFalse(node0.isReturn());
84:       assertFalse(node0.isWhile());
85:       assertFalse(node0.isLabel());
86:       assertFalse(node0.isSwitch());
87:       assertFalse(node0.isTypeOf());
88:       assertFalse(node0.isGetElem());
89:       assertFalse(node0.isName());
90:       assertFalse(node0.isDelProp());
91:       assertFalse(node0.isNull());
92:       assertFalse(node0.isVar());
93:       assertFalse(node0.isNew());
94:       assertFalse(node0.isAssignAdd());
95:       assertFalse(node0.isOr());
96:       assertFalse(node0.isEmpty());
97:       assertFalse(node0.isAdd());
98:       assertFalse(node0.isDefaultCase());
99:       assertFalse(node0.isTrue());
100:       assertFalse(node0.isFunction());
101:       assertFalse(node0.isVoid());
102:       assertEquals(0, node0.getChildCount());
103:       assertFalse(node0.isRegExp());
104:       assertFalse(node0.isArrayLit());
105:       assertFalse(node0.isCatch());
106:       assertFalse(node0.isStringKey());
107:       assertFalse(node0.isGetterDef());
108:       assertFalse(node0.isParamList());
109:       assertFalse(node0.isFor());
110:       assertFalse(node0.isDebugger());
111:       assertFalse(node0.isTry());
112:       assertFalse(node0.isCase());
113:       assertFalse(node0.isContinue());
114:       assertFalse(node0.hasMoreThanOneChild());
115:       assertFalse(node0.isBlock());
116:       assertEquals((-1), node0.getLineno());
117:       assertFalse(node0.isFalse());
118:       assertTrue(node0.isCall());
119:       assertFalse(node0.isIf());
120:       assertFalse(node0.isThrow());
121:       assertFalse(node0.isNE());
122:       assertFalse(node0.isIn());
123:       assertFalse(node0.isInc());
124:       assertFalse(node0.isSetterDef());
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(iterable0.contains(node0));
128:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
130:       assertEquals(50, Node.FREE_CALL);
131:       assertEquals(8, Node.FLAG_NO_THROWS);
132:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
133:       assertEquals(57, Node.REFLECTED_OBJECT);
134:       assertEquals(4095, Node.COLUMN_MASK);
135:       assertEquals(48, Node.DIRECTIVES);
136:       assertEquals(40, Node.ORIGINALNAME_PROP);
137:       assertEquals(43, Node.IS_CONSTANT_NAME);
138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
139:       assertEquals(54, Node.SLASH_V);
140:       assertEquals(12, Node.COLUMN_BITS);
141:       assertEquals(51, Node.STATIC_SOURCE_FILE);
142:       assertEquals(32, Node.INCRDECR_PROP);
143:       assertEquals(1, Node.DECR_FLAG);
144:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
145:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
146:       assertEquals(47, Node.IS_DISPATCHER);
147:       assertEquals(56, Node.CHANGE_TIME);
148:       assertEquals(2, Node.POST_FLAG);
149:       assertEquals(46, Node.IS_NAMESPACE);
150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
151:       assertEquals(37, Node.OPT_ARG_NAME);
152:       assertEquals(15, Node.NO_SIDE_EFFECTS);
153:       assertEquals(57, Node.LAST_PROP);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(30, Node.VAR_ARGS_NAME);
156:       assertEquals(49, Node.DIRECT_EVAL);
157:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
158:       assertEquals(52, Node.LENGTH);
159:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
160:       assertEquals(55, Node.INFERRED_FUNCTION);
161:       assertEquals(29, Node.JSDOC_INFO_PROP);
162:       assertEquals(39, Node.EMPTY_BLOCK);
163:       assertEquals(53, Node.INPUT_ID);
164:       assertNotNull(iterable0);
165:       assertFalse(node0.isAnd());
166:       assertFalse(node0.isWith());
167:       assertFalse(node0.isNot());
168:       assertFalse(node0.isObjectLit());
169:       assertFalse(node0.isComma());
170:       assertFalse(node0.isInstanceOf());
171:       assertFalse(node0.isBreak());
172:       assertFalse(node0.isExprResult());
173:       assertFalse(node0.isCast());
174:       assertFalse(node0.isAssign());
175:       assertFalse(node0.isLabelName());
176:       assertFalse(node0.isHook());
177:       assertEquals((-1), node0.getSourcePosition());
178:       assertFalse(node0.isDec());
179:       assertFalse(node0.hasChildren());
180:       assertFalse(node0.isThis());
181:       assertFalse(node0.isGetProp());
182:       assertEquals((-1), node0.getCharno());
183:       assertFalse(node0.hasOneChild());
184:       assertFalse(node0.isNumber());
185:       assertFalse(node0.isString());
186:       assertFalse(node0.isScript());
187:       assertFalse(node0.isDo());
188:       assertEquals(37, node0.getType());
189:       assertFalse(node0.isReturn());
190:       assertFalse(node0.isWhile());
191:       assertFalse(node0.isLabel());
192:       assertFalse(node0.isSwitch());
193:       assertFalse(node0.isTypeOf());
194:       assertFalse(node0.isGetElem());
195:       assertFalse(node0.isName());
196:       assertFalse(node0.isDelProp());
197:       assertFalse(node0.isNull());
198:       assertFalse(node0.isVar());
199:       assertFalse(node0.isNew());
200:       assertFalse(node0.isAssignAdd());
201:       assertFalse(node0.isOr());
202:       assertFalse(node0.isEmpty());
203:       assertFalse(node0.isAdd());
204:       assertFalse(node0.isDefaultCase());
205:       assertFalse(node0.isTrue());
206:       assertFalse(node0.isFunction());
207:       assertFalse(node0.isVoid());
208:       assertEquals(0, node0.getChildCount());
209:       assertFalse(node0.isRegExp());
210:       assertFalse(node0.isArrayLit());
211:       assertFalse(node0.isCatch());
212:       assertFalse(node0.isStringKey());
213:       assertFalse(node0.isGetterDef());
214:       assertFalse(node0.isParamList());
215:       assertFalse(node0.isFor());
216:       assertFalse(node0.isDebugger());
217:       assertFalse(node0.isTry());
218:       assertFalse(node0.isCase());
219:       assertFalse(node0.isContinue());
220:       assertFalse(node0.hasMoreThanOneChild());
221:       assertFalse(node0.isBlock());
222:       assertEquals((-1), node0.getLineno());
223:       assertFalse(node0.isFalse());
224:       assertTrue(node0.isCall());
225:       assertFalse(node0.isIf());
226:       assertFalse(node0.isThrow());
227:       assertFalse(node0.isNE());
228:       assertFalse(node0.isIn());
229:       assertFalse(node0.isInc());
230:       assertFalse(node0.isSetterDef());
231:       
232:       boolean boolean0 = node0.isCall();
233:       assertTrue(boolean0);
234:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
236:       assertEquals(50, Node.FREE_CALL);
237:       assertEquals(8, Node.FLAG_NO_THROWS);
238:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
239:       assertEquals(57, Node.REFLECTED_OBJECT);
240:       assertEquals(4095, Node.COLUMN_MASK);
241:       assertEquals(48, Node.DIRECTIVES);
242:       assertEquals(40, Node.ORIGINALNAME_PROP);
243:       assertEquals(43, Node.IS_CONSTANT_NAME);
244:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
245:       assertEquals(54, Node.SLASH_V);
246:       assertEquals(12, Node.COLUMN_BITS);
247:       assertEquals(51, Node.STATIC_SOURCE_FILE);
248:       assertEquals(32, Node.INCRDECR_PROP);
249:       assertEquals(1, Node.DECR_FLAG);
250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
251:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
252:       assertEquals(47, Node.IS_DISPATCHER);
253:       assertEquals(56, Node.CHANGE_TIME);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(46, Node.IS_NAMESPACE);
256:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
257:       assertEquals(37, Node.OPT_ARG_NAME);
258:       assertEquals(15, Node.NO_SIDE_EFFECTS);
259:       assertEquals(57, Node.LAST_PROP);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(30, Node.VAR_ARGS_NAME);
262:       assertEquals(49, Node.DIRECT_EVAL);
263:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
264:       assertEquals(52, Node.LENGTH);
265:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
266:       assertEquals(55, Node.INFERRED_FUNCTION);
267:       assertEquals(29, Node.JSDOC_INFO_PROP);
268:       assertEquals(39, Node.EMPTY_BLOCK);
269:       assertEquals(53, Node.INPUT_ID);
270:       assertFalse(node0.isAnd());
271:       assertFalse(node0.isWith());
272:       assertFalse(node0.isNot());
273:       assertFalse(node0.isObjectLit());
274:       assertFalse(node0.isComma());
275:       assertFalse(node0.isInstanceOf());
276:       assertFalse(node0.isBreak());
277:       assertFalse(node0.isExprResult());
278:       assertFalse(node0.isCast());
279:       assertFalse(node0.isAssign());
280:       assertFalse(node0.isLabelName());
281:       assertFalse(node0.isHook());
282:       assertEquals((-1), node0.getSourcePosition());
283:       assertFalse(node0.isDec());
284:       assertFalse(node0.hasChildren());
285:       assertFalse(node0.isThis());
286:       assertFalse(node0.isGetProp());
287:       assertEquals((-1), node0.getCharno());
288:       assertFalse(node0.hasOneChild());
289:       assertFalse(node0.isNumber());
290:       assertFalse(node0.isString());
291:       assertFalse(node0.isScript());
292:       assertFalse(node0.isDo());
293:       assertEquals(37, node0.getType());
294:       assertFalse(node0.isReturn());
295:       assertFalse(node0.isWhile());
296:       assertFalse(node0.isLabel());
297:       assertFalse(node0.isSwitch());
298:       assertFalse(node0.isTypeOf());
299:       assertFalse(node0.isGetElem());
300:       assertFalse(node0.isName());
301:       assertFalse(node0.isDelProp());
302:       assertFalse(node0.isNull());
303:       assertFalse(node0.isVar());
304:       assertFalse(node0.isNew());
305:       assertFalse(node0.isAssignAdd());
306:       assertFalse(node0.isOr());
307:       assertFalse(node0.isEmpty());
308:       assertFalse(node0.isAdd());
309:       assertFalse(node0.isDefaultCase());
310:       assertFalse(node0.isTrue());
311:       assertFalse(node0.isFunction());
312:       assertFalse(node0.isVoid());
313:       assertEquals(0, node0.getChildCount());
314:       assertFalse(node0.isRegExp());
315:       assertFalse(node0.isArrayLit());
316:       assertFalse(node0.isCatch());
317:       assertFalse(node0.isStringKey());
318:       assertFalse(node0.isGetterDef());
319:       assertFalse(node0.isParamList());
320:       assertFalse(node0.isFor());
321:       assertFalse(node0.isDebugger());
322:       assertFalse(node0.isTry());
323:       assertFalse(node0.isCase());
324:       assertFalse(node0.isContinue());
325:       assertFalse(node0.hasMoreThanOneChild());
326:       assertFalse(node0.isBlock());
327:       assertEquals((-1), node0.getLineno());
328:       assertFalse(node0.isFalse());
329:       assertTrue(node0.isCall());
330:       assertFalse(node0.isIf());
331:       assertFalse(node0.isThrow());
332:       assertFalse(node0.isNE());
333:       assertFalse(node0.isIn());
334:       assertFalse(node0.isInc());
335:       assertFalse(node0.isSetterDef());
336:       
337:       Node node1 = Node.newString(1, "com.google.javascript.rhino.jstype.FnctionType");
338:       assertEquals(37, Node.OPT_ARG_NAME);
339:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
340:       assertEquals(47, Node.IS_DISPATCHER);
341:       assertEquals(51, Node.STATIC_SOURCE_FILE);
342:       assertEquals(2, Node.POST_FLAG);
343:       assertEquals(46, Node.IS_NAMESPACE);
344:       assertEquals(56, Node.CHANGE_TIME);
345:       assertEquals(49, Node.DIRECT_EVAL);
346:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
347:       assertEquals(36, Node.QUOTED_PROP);
348:       assertEquals(53, Node.INPUT_ID);
349:       assertEquals(15, Node.NO_SIDE_EFFECTS);
350:       assertEquals(30, Node.VAR_ARGS_NAME);
351:       assertEquals(52, Node.LENGTH);
352:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
353:       assertEquals(55, Node.INFERRED_FUNCTION);
354:       assertEquals(29, Node.JSDOC_INFO_PROP);
355:       assertEquals(57, Node.LAST_PROP);
356:       assertEquals(48, Node.DIRECTIVES);
357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
358:       assertEquals(39, Node.EMPTY_BLOCK);
359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
360:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
361:       assertEquals(50, Node.FREE_CALL);
362:       assertEquals(4095, Node.COLUMN_MASK);
363:       assertEquals(8, Node.FLAG_NO_THROWS);
364:       assertEquals(40, Node.ORIGINALNAME_PROP);
365:       assertEquals(57, Node.REFLECTED_OBJECT);
366:       assertEquals(43, Node.IS_CONSTANT_NAME);
367:       assertEquals(54, Node.SLASH_V);
368:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
370:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
371:       assertEquals(1, Node.DECR_FLAG);
372:       assertEquals(12, Node.COLUMN_BITS);
373:       assertEquals(32, Node.INCRDECR_PROP);
374:       assertNotSame(node1, node0);
375:       assertNotNull(node1);
376:       assertFalse(node1.equals((Object)node0));
377:       assertFalse(node1.isWhile());
378:       assertFalse(node1.isContinue());
379:       assertFalse(node1.hasMoreThanOneChild());
380:       assertEquals((-1), node1.getLineno());
381:       assertFalse(node1.isCall());
382:       assertFalse(node1.isStringKey());
383:       assertFalse(node1.isName());
384:       assertFalse(node1.isSetterDef());
385:       assertFalse(node1.isNull());
386:       assertFalse(node1.isOr());
387:       assertEquals(0, node1.getChildCount());
388:       assertFalse(node1.isVar());
389:       assertFalse(node1.isLabel());
390:       assertFalse(node1.isAdd());
391:       assertFalse(node1.isNew());
392:       assertFalse(node1.isAssignAdd());
393:       assertFalse(node1.isDo());
394:       assertFalse(node1.isExprResult());
395:       assertFalse(node1.isTrue());
396:       assertFalse(node1.isDebugger());
397:       assertFalse(node1.isNot());
398:       assertFalse(node1.isFunction());
399:       assertFalse(node1.isObjectLit());
400:       assertFalse(node1.isCast());
401:       assertFalse(node1.isVoid());
402:       assertFalse(node1.isAnd());
403:       assertFalse(node1.isDelProp());
404:       assertFalse(node1.isBreak());
405:       assertFalse(node1.isDec());
406:       assertFalse(node1.hasChildren());
407:       assertEquals((-1), node1.getSourcePosition());
408:       assertFalse(node1.isGetElem());
409:       assertFalse(node1.isComma());
410:       assertFalse(node1.isAssign());
411:       assertFalse(node1.isTypeOf());
412:       assertFalse(node1.isReturn());
413:       assertFalse(node1.isGetProp());
414:       assertFalse(node1.isString());
415:       assertFalse(node1.isInc());
416:       assertEquals((-1), node1.getCharno());
417:       assertFalse(node1.isSwitch());
418:       assertFalse(node1.isIf());
419:       assertFalse(node1.isNE());
420:       assertFalse(node1.isEmpty());
421:       assertFalse(node1.isFalse());
422:       assertFalse(node1.isIn());
423:       assertFalse(node1.isThrow());
424:       assertFalse(node1.isDefaultCase());
425:       assertFalse(node1.isScript());
426:       assertEquals(1, node1.getType());
427:       assertFalse(node1.isWith());
428:       assertFalse(node1.isRegExp());
429:       assertFalse(node1.isInstanceOf());
430:       assertFalse(node1.isArrayLit());
431:       assertFalse(node1.isCatch());
432:       assertFalse(node1.isParamList());
433:       assertFalse(node1.isLabelName());
434:       assertFalse(node1.isNumber());
435:       assertFalse(node1.isThis());
436:       assertFalse(node1.isFor());
437:       assertFalse(node1.isGetterDef());
438:       assertFalse(node1.isHook());
439:       assertFalse(node1.hasOneChild());
440:       assertFalse(node1.isBlock());
441:       assertFalse(node1.isCase());
442:       assertFalse(node1.isTry());
443:       
444:       // Undeclared exception!
445:       try { 
446:         node1.removeChildAfter(node0);
447:         fail("Expecting exception: IllegalArgumentException");
448:       
449:       } catch(IllegalArgumentException e) {
450:          //
451:          // prev is not a child of this node.
452:          //
453:          verifyException("com.google.common.base.Preconditions", e);
454:       }
455:   }
456: }
RegularFileObject[/tmp/EvoSuite_268_1628157906640/com/google/javascript/rhino/Node_268_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:05:06 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_268_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_268_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_268_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
348:       "com.google.common.collect.Sets",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.javascript.rhino.JSDocInfo$Visibility",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.JSTypeExpression",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2",
368:       "com.google.common.collect.Platform",
369:       "com.google.common.collect.ImmutableList$1",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
375:     );
376:   }
377: }

[MASTER] 10:05:06.689 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(37, "com.google.javascript.rhino.jstype.FnctionType");
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node0);
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertEquals(37, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFalse());
assertTrue(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertNotNull(iterable0);
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertEquals(37, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFalse());
assertTrue(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

boolean boolean0 = node0.isCall();
assertTrue(boolean0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertEquals(37, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFalse());
assertTrue(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

Node node1 = Node.newString(1, "com.google.javascript.rhino.jstype.FnctionType");
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertEquals(1, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isTry());

node1.removeChildAfter(node0);

[MASTER] 10:05:22.058 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:22.411 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:22.660 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:22.913 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:23.121 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:24.151 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:24.374 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:24.577 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:24.781 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:24.980 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:25.198 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:25.383 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:25.652 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:25.848 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:26.022 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:26.218 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:26.388 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:26.564 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:26.793 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:26.973 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:27.152 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:27.360 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:27.543 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:27.710 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:27.913 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:05:28.139 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/6
* Done!

* Computation finished
