* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 14715
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3535244394
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:49:10.660 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:49:15.025 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;
[MASTER] 17:49:15.193 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;
[MASTER] 17:49:15.193 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;
[MASTER] 17:51:40.720 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 605s and 401 generations, 185105 statements, best individual has fitness: 3205.0
* Minimizing test suite
[MASTER] 18:00:28.609 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 91%
* Total number of goals: 853
* Number of covered goals: 780
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 597
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 101
* Number of covered goals: 101
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 530
* Number of covered goals: 455
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 4536
* Number of covered goals: 1928
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 714
* Number of covered goals: 557
* Generated 660 tests with total length 10505
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:01:32.767 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6672166666666667% of time used, but only 32/660 tests minimized), falling back to using all assertions
[MASTER] 18:01:52.904 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 18:02:02.651 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 9 seconds more than allowed.
[MASTER] 18:02:08.038 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_42_1629223327415/com/google/javascript/rhino/Node_42_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_42_1629223327415/com/google/javascript/rhino/Node_42_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:08.039 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:08.041 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:08.045 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 193
[MASTER] 18:02:08.048 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_42_1629223327415/com/google/javascript/rhino/Node_42_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_42_tmp__ESTest extends Node_42_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(0);
21:       assertNotNull(node0);
22:       assertFalse(node0.isIn());
23:       assertFalse(node0.isString());
24:       assertFalse(node0.isCase());
25:       assertFalse(node0.isFor());
26:       assertFalse(node0.isHook());
27:       assertFalse(node0.isInc());
28:       assertEquals(0, node0.getType());
29:       assertFalse(node0.isEmpty());
30:       assertFalse(node0.isIf());
31:       assertFalse(node0.isDelProp());
32:       assertFalse(node0.isBreak());
33:       assertFalse(node0.isVoid());
34:       assertFalse(node0.isTrue());
35:       assertFalse(node0.isNE());
36:       assertEquals(0, node0.getChildCount());
37:       assertFalse(node0.isCatch());
38:       assertFalse(node0.isInstanceOf());
39:       assertFalse(node0.isDefaultCase());
40:       assertFalse(node0.isWith());
41:       assertFalse(node0.isRegExp());
42:       assertFalse(node0.isThis());
43:       assertFalse(node0.isVar());
44:       assertFalse(node0.isArrayLit());
45:       assertFalse(node0.isTry());
46:       assertFalse(node0.hasOneChild());
47:       assertFalse(node0.isScript());
48:       assertFalse(node0.isGetterDef());
49:       assertFalse(node0.isNumber());
50:       assertFalse(node0.isLabelName());
51:       assertEquals((-1), node0.getCharno());
52:       assertFalse(node0.isSwitch());
53:       assertFalse(node0.isStringKey());
54:       assertFalse(node0.isParamList());
55:       assertFalse(node0.isReturn());
56:       assertFalse(node0.isOr());
57:       assertFalse(node0.isLabel());
58:       assertEquals((-1), node0.getLineno());
59:       assertFalse(node0.isContinue());
60:       assertFalse(node0.hasMoreThanOneChild());
61:       assertFalse(node0.hasChildren());
62:       assertFalse(node0.isTypeOf());
63:       assertFalse(node0.isAssign());
64:       assertFalse(node0.isDo());
65:       assertFalse(node0.isDec());
66:       assertFalse(node0.isBlock());
67:       assertFalse(node0.isAssignAdd());
68:       assertFalse(node0.isWhile());
69:       assertFalse(node0.isNew());
70:       assertFalse(node0.isCall());
71:       assertFalse(node0.isExprResult());
72:       assertFalse(node0.isGetElem());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isNull());
75:       assertFalse(node0.isName());
76:       assertFalse(node0.isGetProp());
77:       assertFalse(node0.isObjectLit());
78:       assertFalse(node0.isSetterDef());
79:       assertFalse(node0.isComma());
80:       assertFalse(node0.isThrow());
81:       assertFalse(node0.isFunction());
82:       assertFalse(node0.isFalse());
83:       assertFalse(node0.isCast());
84:       assertFalse(node0.isNot());
85:       assertEquals((-1), node0.getSourcePosition());
86:       assertFalse(node0.isDebugger());
87:       assertFalse(node0.isAnd());
88:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
89:       assertEquals(54, Node.SLASH_V);
90:       assertEquals(15, Node.NO_SIDE_EFFECTS);
91:       assertEquals(57, Node.LAST_PROP);
92:       assertEquals(49, Node.DIRECT_EVAL);
93:       assertEquals(1, Node.DECR_FLAG);
94:       assertEquals(57, Node.REFLECTED_OBJECT);
95:       assertEquals(51, Node.STATIC_SOURCE_FILE);
96:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
97:       assertEquals(52, Node.LENGTH);
98:       assertEquals(8, Node.FLAG_NO_THROWS);
99:       assertEquals(50, Node.FREE_CALL);
100:       assertEquals(48, Node.DIRECTIVES);
101:       assertEquals(37, Node.OPT_ARG_NAME);
102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
103:       assertEquals(56, Node.CHANGE_TIME);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(12, Node.COLUMN_BITS);
106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
108:       assertEquals(4095, Node.COLUMN_MASK);
109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
110:       assertEquals(53, Node.INPUT_ID);
111:       assertEquals(43, Node.IS_CONSTANT_NAME);
112:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(29, Node.JSDOC_INFO_PROP);
115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
118:       assertEquals(39, Node.EMPTY_BLOCK);
119:       assertEquals(46, Node.IS_NAMESPACE);
120:       assertEquals(40, Node.ORIGINALNAME_PROP);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(2, Node.POST_FLAG);
123:       assertEquals(30, Node.VAR_ARGS_NAME);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertNotNull(iterable0);
127:       assertFalse(node0.isIn());
128:       assertFalse(node0.isString());
129:       assertFalse(node0.isCase());
130:       assertFalse(node0.isFor());
131:       assertFalse(node0.isHook());
132:       assertFalse(node0.isInc());
133:       assertEquals(0, node0.getType());
134:       assertFalse(node0.isEmpty());
135:       assertFalse(node0.isIf());
136:       assertFalse(node0.isDelProp());
137:       assertFalse(node0.isBreak());
138:       assertFalse(node0.isVoid());
139:       assertFalse(node0.isTrue());
140:       assertFalse(node0.isNE());
141:       assertEquals(0, node0.getChildCount());
142:       assertFalse(node0.isCatch());
143:       assertFalse(node0.isInstanceOf());
144:       assertFalse(node0.isDefaultCase());
145:       assertFalse(node0.isWith());
146:       assertFalse(node0.isRegExp());
147:       assertFalse(node0.isThis());
148:       assertFalse(node0.isVar());
149:       assertFalse(node0.isArrayLit());
150:       assertFalse(node0.isTry());
151:       assertFalse(node0.hasOneChild());
152:       assertFalse(node0.isScript());
153:       assertFalse(node0.isGetterDef());
154:       assertFalse(node0.isNumber());
155:       assertFalse(node0.isLabelName());
156:       assertEquals((-1), node0.getCharno());
157:       assertFalse(node0.isSwitch());
158:       assertFalse(node0.isStringKey());
159:       assertFalse(node0.isParamList());
160:       assertFalse(node0.isReturn());
161:       assertFalse(node0.isOr());
162:       assertFalse(node0.isLabel());
163:       assertEquals((-1), node0.getLineno());
164:       assertFalse(node0.isContinue());
165:       assertFalse(node0.hasMoreThanOneChild());
166:       assertFalse(node0.hasChildren());
167:       assertFalse(node0.isTypeOf());
168:       assertFalse(node0.isAssign());
169:       assertFalse(node0.isDo());
170:       assertFalse(node0.isDec());
171:       assertFalse(node0.isBlock());
172:       assertFalse(node0.isAssignAdd());
173:       assertFalse(node0.isWhile());
174:       assertFalse(node0.isNew());
175:       assertFalse(node0.isCall());
176:       assertFalse(node0.isExprResult());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isNull());
180:       assertFalse(node0.isName());
181:       assertFalse(node0.isGetProp());
182:       assertFalse(node0.isObjectLit());
183:       assertFalse(node0.isSetterDef());
184:       assertFalse(node0.isComma());
185:       assertFalse(node0.isThrow());
186:       assertFalse(node0.isFunction());
187:       assertFalse(node0.isFalse());
188:       assertFalse(node0.isCast());
189:       assertFalse(node0.isNot());
190:       assertEquals((-1), node0.getSourcePosition());
191:       assertFalse(node0.isDebugger());
192:       assertFalse(node0.isAnd());
193:       assertFalse(iterable0.contains(node0));
194:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
195:       assertEquals(54, Node.SLASH_V);
196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
197:       assertEquals(57, Node.LAST_PROP);
198:       assertEquals(49, Node.DIRECT_EVAL);
199:       assertEquals(1, Node.DECR_FLAG);
200:       assertEquals(57, Node.REFLECTED_OBJECT);
201:       assertEquals(51, Node.STATIC_SOURCE_FILE);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(52, Node.LENGTH);
204:       assertEquals(8, Node.FLAG_NO_THROWS);
205:       assertEquals(50, Node.FREE_CALL);
206:       assertEquals(48, Node.DIRECTIVES);
207:       assertEquals(37, Node.OPT_ARG_NAME);
208:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
209:       assertEquals(56, Node.CHANGE_TIME);
210:       assertEquals(32, Node.INCRDECR_PROP);
211:       assertEquals(12, Node.COLUMN_BITS);
212:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
213:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
214:       assertEquals(4095, Node.COLUMN_MASK);
215:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
216:       assertEquals(53, Node.INPUT_ID);
217:       assertEquals(43, Node.IS_CONSTANT_NAME);
218:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
219:       assertEquals(55, Node.INFERRED_FUNCTION);
220:       assertEquals(29, Node.JSDOC_INFO_PROP);
221:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
222:       assertEquals(36, Node.QUOTED_PROP);
223:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
224:       assertEquals(39, Node.EMPTY_BLOCK);
225:       assertEquals(46, Node.IS_NAMESPACE);
226:       assertEquals(40, Node.ORIGINALNAME_PROP);
227:       assertEquals(47, Node.IS_DISPATCHER);
228:       assertEquals(2, Node.POST_FLAG);
229:       assertEquals(30, Node.VAR_ARGS_NAME);
230:       
231:       Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
232:       assertNotNull(node_AncestorIterable0);
233:       assertFalse(node0.isIn());
234:       assertFalse(node0.isString());
235:       assertFalse(node0.isCase());
236:       assertFalse(node0.isFor());
237:       assertFalse(node0.isHook());
238:       assertFalse(node0.isInc());
239:       assertEquals(0, node0.getType());
240:       assertFalse(node0.isEmpty());
241:       assertFalse(node0.isIf());
242:       assertFalse(node0.isDelProp());
243:       assertFalse(node0.isBreak());
244:       assertFalse(node0.isVoid());
245:       assertFalse(node0.isTrue());
246:       assertFalse(node0.isNE());
247:       assertEquals(0, node0.getChildCount());
248:       assertFalse(node0.isCatch());
249:       assertFalse(node0.isInstanceOf());
250:       assertFalse(node0.isDefaultCase());
251:       assertFalse(node0.isWith());
252:       assertFalse(node0.isRegExp());
253:       assertFalse(node0.isThis());
254:       assertFalse(node0.isVar());
255:       assertFalse(node0.isArrayLit());
256:       assertFalse(node0.isTry());
257:       assertFalse(node0.hasOneChild());
258:       assertFalse(node0.isScript());
259:       assertFalse(node0.isGetterDef());
260:       assertFalse(node0.isNumber());
261:       assertFalse(node0.isLabelName());
262:       assertEquals((-1), node0.getCharno());
263:       assertFalse(node0.isSwitch());
264:       assertFalse(node0.isStringKey());
265:       assertFalse(node0.isParamList());
266:       assertFalse(node0.isReturn());
267:       assertFalse(node0.isOr());
268:       assertFalse(node0.isLabel());
269:       assertEquals((-1), node0.getLineno());
270:       assertFalse(node0.isContinue());
271:       assertFalse(node0.hasMoreThanOneChild());
272:       assertFalse(node0.hasChildren());
273:       assertFalse(node0.isTypeOf());
274:       assertFalse(node0.isAssign());
275:       assertFalse(node0.isDo());
276:       assertFalse(node0.isDec());
277:       assertFalse(node0.isBlock());
278:       assertFalse(node0.isAssignAdd());
279:       assertFalse(node0.isWhile());
280:       assertFalse(node0.isNew());
281:       assertFalse(node0.isCall());
282:       assertFalse(node0.isExprResult());
283:       assertFalse(node0.isGetElem());
284:       assertFalse(node0.isAdd());
285:       assertFalse(node0.isNull());
286:       assertFalse(node0.isName());
287:       assertFalse(node0.isGetProp());
288:       assertFalse(node0.isObjectLit());
289:       assertFalse(node0.isSetterDef());
290:       assertFalse(node0.isComma());
291:       assertFalse(node0.isThrow());
292:       assertFalse(node0.isFunction());
293:       assertFalse(node0.isFalse());
294:       assertFalse(node0.isCast());
295:       assertFalse(node0.isNot());
296:       assertEquals((-1), node0.getSourcePosition());
297:       assertFalse(node0.isDebugger());
298:       assertFalse(node0.isAnd());
299:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
300:       assertEquals(54, Node.SLASH_V);
301:       assertEquals(15, Node.NO_SIDE_EFFECTS);
302:       assertEquals(57, Node.LAST_PROP);
303:       assertEquals(49, Node.DIRECT_EVAL);
304:       assertEquals(1, Node.DECR_FLAG);
305:       assertEquals(57, Node.REFLECTED_OBJECT);
306:       assertEquals(51, Node.STATIC_SOURCE_FILE);
307:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
308:       assertEquals(52, Node.LENGTH);
309:       assertEquals(8, Node.FLAG_NO_THROWS);
310:       assertEquals(50, Node.FREE_CALL);
311:       assertEquals(48, Node.DIRECTIVES);
312:       assertEquals(37, Node.OPT_ARG_NAME);
313:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
314:       assertEquals(56, Node.CHANGE_TIME);
315:       assertEquals(32, Node.INCRDECR_PROP);
316:       assertEquals(12, Node.COLUMN_BITS);
317:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
319:       assertEquals(4095, Node.COLUMN_MASK);
320:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
321:       assertEquals(53, Node.INPUT_ID);
322:       assertEquals(43, Node.IS_CONSTANT_NAME);
323:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
324:       assertEquals(55, Node.INFERRED_FUNCTION);
325:       assertEquals(29, Node.JSDOC_INFO_PROP);
326:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
327:       assertEquals(36, Node.QUOTED_PROP);
328:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
329:       assertEquals(39, Node.EMPTY_BLOCK);
330:       assertEquals(46, Node.IS_NAMESPACE);
331:       assertEquals(40, Node.ORIGINALNAME_PROP);
332:       assertEquals(47, Node.IS_DISPATCHER);
333:       assertEquals(2, Node.POST_FLAG);
334:       assertEquals(30, Node.VAR_ARGS_NAME);
335:       
336:       Node node1 = Node.newString(49, "");
337:       assertNotNull(node1);
338:       assertFalse(node1.isAdd());
339:       assertFalse(node1.isBlock());
340:       assertFalse(node1.isDo());
341:       assertFalse(node1.isNew());
342:       assertFalse(node1.isContinue());
343:       assertFalse(node1.isCall());
344:       assertFalse(node1.isVar());
345:       assertFalse(node1.hasMoreThanOneChild());
346:       assertFalse(node1.isWhile());
347:       assertFalse(node1.isReturn());
348:       assertFalse(node1.isLabel());
349:       assertTrue(node1.isThrow());
350:       assertFalse(node1.isParamList());
351:       assertFalse(node1.isLabelName());
352:       assertFalse(node1.isStringKey());
353:       assertFalse(node1.isNumber());
354:       assertFalse(node1.isDebugger());
355:       assertEquals((-1), node1.getSourcePosition());
356:       assertFalse(node1.isFunction());
357:       assertFalse(node1.isScript());
358:       assertFalse(node1.isTry());
359:       assertFalse(node1.hasOneChild());
360:       assertFalse(node1.isFor());
361:       assertFalse(node1.isCast());
362:       assertFalse(node1.isWith());
363:       assertFalse(node1.isCatch());
364:       assertFalse(node1.isInstanceOf());
365:       assertFalse(node1.isRegExp());
366:       assertFalse(node1.isNE());
367:       assertFalse(node1.isIf());
368:       assertFalse(node1.isSetterDef());
369:       assertEquals((-1), node1.getLineno());
370:       assertFalse(node1.isIn());
371:       assertEquals((-1), node1.getCharno());
372:       assertFalse(node1.isInc());
373:       assertFalse(node1.isSwitch());
374:       assertFalse(node1.isCase());
375:       assertFalse(node1.isFalse());
376:       assertFalse(node1.isHook());
377:       assertFalse(node1.isComma());
378:       assertFalse(node1.isGetProp());
379:       assertEquals(49, node1.getType());
380:       assertFalse(node1.isThis());
381:       assertFalse(node1.isObjectLit());
382:       assertFalse(node1.isAnd());
383:       assertFalse(node1.isString());
384:       assertFalse(node1.isGetterDef());
385:       assertFalse(node1.isNot());
386:       assertFalse(node1.isVoid());
387:       assertFalse(node1.isTrue());
388:       assertFalse(node1.isExprResult());
389:       assertFalse(node1.isDefaultCase());
390:       assertFalse(node1.isArrayLit());
391:       assertFalse(node1.isGetElem());
392:       assertFalse(node1.isDec());
393:       assertFalse(node1.hasChildren());
394:       assertEquals(0, node1.getChildCount());
395:       assertFalse(node1.isTypeOf());
396:       assertFalse(node1.isAssign());
397:       assertFalse(node1.isAssignAdd());
398:       assertFalse(node1.isBreak());
399:       assertFalse(node1.isDelProp());
400:       assertFalse(node1.isName());
401:       assertFalse(node1.isEmpty());
402:       assertFalse(node1.isNull());
403:       assertFalse(node1.isOr());
404:       assertFalse(node1.equals((Object)node0));
405:       assertEquals(8, Node.FLAG_NO_THROWS);
406:       assertEquals(50, Node.FREE_CALL);
407:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
408:       assertEquals(57, Node.REFLECTED_OBJECT);
409:       assertEquals(52, Node.LENGTH);
410:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
411:       assertEquals(55, Node.INFERRED_FUNCTION);
412:       assertEquals(39, Node.EMPTY_BLOCK);
413:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
414:       assertEquals(43, Node.IS_CONSTANT_NAME);
415:       assertEquals(15, Node.NO_SIDE_EFFECTS);
416:       assertEquals(57, Node.LAST_PROP);
417:       assertEquals(30, Node.VAR_ARGS_NAME);
418:       assertEquals(54, Node.SLASH_V);
419:       assertEquals(40, Node.ORIGINALNAME_PROP);
420:       assertEquals(56, Node.CHANGE_TIME);
421:       assertEquals(47, Node.IS_DISPATCHER);
422:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
423:       assertEquals(2, Node.POST_FLAG);
424:       assertEquals(46, Node.IS_NAMESPACE);
425:       assertEquals(51, Node.STATIC_SOURCE_FILE);
426:       assertEquals(32, Node.INCRDECR_PROP);
427:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
428:       assertEquals(1, Node.DECR_FLAG);
429:       assertEquals(29, Node.JSDOC_INFO_PROP);
430:       assertEquals(53, Node.INPUT_ID);
431:       assertEquals(36, Node.QUOTED_PROP);
432:       assertEquals(49, Node.DIRECT_EVAL);
433:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
434:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
435:       assertEquals(12, Node.COLUMN_BITS);
436:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
437:       assertEquals(4095, Node.COLUMN_MASK);
438:       assertEquals(48, Node.DIRECTIVES);
439:       assertEquals(37, Node.OPT_ARG_NAME);
440:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
441:       
442:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
443:       assertNotNull(node_NodeMismatch0);
444:       assertFalse(node0.isIn());
445:       assertFalse(node0.isString());
446:       assertFalse(node0.isCase());
447:       assertFalse(node0.isFor());
448:       assertFalse(node0.isHook());
449:       assertFalse(node0.isInc());
450:       assertEquals(0, node0.getType());
451:       assertFalse(node0.isEmpty());
452:       assertFalse(node0.isIf());
453:       assertFalse(node0.isDelProp());
454:       assertFalse(node0.isBreak());
455:       assertFalse(node0.isVoid());
456:       assertFalse(node0.isTrue());
457:       assertFalse(node0.isNE());
458:       assertEquals(0, node0.getChildCount());
459:       assertFalse(node0.isCatch());
460:       assertFalse(node0.isInstanceOf());
461:       assertFalse(node0.isDefaultCase());
462:       assertFalse(node0.isWith());
463:       assertFalse(node0.isRegExp());
464:       assertFalse(node0.isThis());
465:       assertFalse(node0.isVar());
466:       assertFalse(node0.isArrayLit());
467:       assertFalse(node0.isTry());
468:       assertFalse(node0.hasOneChild());
469:       assertFalse(node0.isScript());
470:       assertFalse(node0.isGetterDef());
471:       assertFalse(node0.isNumber());
472:       assertFalse(node0.isLabelName());
473:       assertEquals((-1), node0.getCharno());
474:       assertFalse(node0.isSwitch());
475:       assertFalse(node0.isStringKey());
476:       assertFalse(node0.isParamList());
477:       assertFalse(node0.isReturn());
478:       assertFalse(node0.isOr());
479:       assertFalse(node0.isLabel());
480:       assertEquals((-1), node0.getLineno());
481:       assertFalse(node0.isContinue());
482:       assertFalse(node0.hasMoreThanOneChild());
483:       assertFalse(node0.hasChildren());
484:       assertFalse(node0.isTypeOf());
485:       assertFalse(node0.isAssign());
486:       assertFalse(node0.isDo());
487:       assertFalse(node0.isDec());
488:       assertFalse(node0.isBlock());
489:       assertFalse(node0.isAssignAdd());
490:       assertFalse(node0.isWhile());
491:       assertFalse(node0.isNew());
492:       assertFalse(node0.isCall());
493:       assertFalse(node0.isExprResult());
494:       assertFalse(node0.isGetElem());
495:       assertFalse(node0.isAdd());
496:       assertFalse(node0.isNull());
497:       assertFalse(node0.isName());
498:       assertFalse(node0.isGetProp());
499:       assertFalse(node0.isObjectLit());
500:       assertFalse(node0.isSetterDef());
501:       assertFalse(node0.isComma());
502:       assertFalse(node0.isThrow());
503:       assertFalse(node0.isFunction());
504:       assertFalse(node0.isFalse());
505:       assertFalse(node0.isCast());
506:       assertFalse(node0.isNot());
507:       assertEquals((-1), node0.getSourcePosition());
508:       assertFalse(node0.isDebugger());
509:       assertFalse(node0.isAnd());
510:       assertFalse(node1.isAdd());
511:       assertFalse(node1.isBlock());
512:       assertFalse(node1.isDo());
513:       assertFalse(node1.isNew());
514:       assertFalse(node1.isContinue());
515:       assertFalse(node1.isCall());
516:       assertFalse(node1.isVar());
517:       assertFalse(node1.hasMoreThanOneChild());
518:       assertFalse(node1.isWhile());
519:       assertFalse(node1.isReturn());
520:       assertFalse(node1.isLabel());
521:       assertTrue(node1.isThrow());
522:       assertFalse(node1.isParamList());
523:       assertFalse(node1.isLabelName());
524:       assertFalse(node1.isStringKey());
525:       assertFalse(node1.isNumber());
526:       assertFalse(node1.isDebugger());
527:       assertEquals((-1), node1.getSourcePosition());
528:       assertFalse(node1.isFunction());
529:       assertFalse(node1.isScript());
530:       assertFalse(node1.isTry());
531:       assertFalse(node1.hasOneChild());
532:       assertFalse(node1.isFor());
533:       assertFalse(node1.isCast());
534:       assertFalse(node1.isWith());
535:       assertFalse(node1.isCatch());
536:       assertFalse(node1.isInstanceOf());
537:       assertFalse(node1.isRegExp());
538:       assertFalse(node1.isNE());
539:       assertFalse(node1.isIf());
540:       assertFalse(node1.isSetterDef());
541:       assertEquals((-1), node1.getLineno());
542:       assertFalse(node1.isIn());
543:       assertEquals((-1), node1.getCharno());
544:       assertFalse(node1.isInc());
545:       assertFalse(node1.isSwitch());
546:       assertFalse(node1.isCase());
547:       assertFalse(node1.isFalse());
548:       assertFalse(node1.isHook());
549:       assertFalse(node1.isComma());
550:       assertFalse(node1.isGetProp());
551:       assertEquals(49, node1.getType());
552:       assertFalse(node1.isThis());
553:       assertFalse(node1.isObjectLit());
554:       assertFalse(node1.isAnd());
555:       assertFalse(node1.isString());
556:       assertFalse(node1.isGetterDef());
557:       assertFalse(node1.isNot());
558:       assertFalse(node1.isVoid());
559:       assertFalse(node1.isTrue());
560:       assertFalse(node1.isExprResult());
561:       assertFalse(node1.isDefaultCase());
562:       assertFalse(node1.isArrayLit());
563:       assertFalse(node1.isGetElem());
564:       assertFalse(node1.isDec());
565:       assertFalse(node1.hasChildren());
566:       assertEquals(0, node1.getChildCount());
567:       assertFalse(node1.isTypeOf());
568:       assertFalse(node1.isAssign());
569:       assertFalse(node1.isAssignAdd());
570:       assertFalse(node1.isBreak());
571:       assertFalse(node1.isDelProp());
572:       assertFalse(node1.isName());
573:       assertFalse(node1.isEmpty());
574:       assertFalse(node1.isNull());
575:       assertFalse(node1.isOr());
576:       assertFalse(node0.equals((Object)node1));
577:       assertFalse(node1.equals((Object)node0));
578:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
579:       assertEquals(54, Node.SLASH_V);
580:       assertEquals(15, Node.NO_SIDE_EFFECTS);
581:       assertEquals(57, Node.LAST_PROP);
582:       assertEquals(49, Node.DIRECT_EVAL);
583:       assertEquals(1, Node.DECR_FLAG);
584:       assertEquals(57, Node.REFLECTED_OBJECT);
585:       assertEquals(51, Node.STATIC_SOURCE_FILE);
586:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
587:       assertEquals(52, Node.LENGTH);
588:       assertEquals(8, Node.FLAG_NO_THROWS);
589:       assertEquals(50, Node.FREE_CALL);
590:       assertEquals(48, Node.DIRECTIVES);
591:       assertEquals(37, Node.OPT_ARG_NAME);
592:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
593:       assertEquals(56, Node.CHANGE_TIME);
594:       assertEquals(32, Node.INCRDECR_PROP);
595:       assertEquals(12, Node.COLUMN_BITS);
596:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
597:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
598:       assertEquals(4095, Node.COLUMN_MASK);
599:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
600:       assertEquals(53, Node.INPUT_ID);
601:       assertEquals(43, Node.IS_CONSTANT_NAME);
602:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
603:       assertEquals(55, Node.INFERRED_FUNCTION);
604:       assertEquals(29, Node.JSDOC_INFO_PROP);
605:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
606:       assertEquals(36, Node.QUOTED_PROP);
607:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
608:       assertEquals(39, Node.EMPTY_BLOCK);
609:       assertEquals(46, Node.IS_NAMESPACE);
610:       assertEquals(40, Node.ORIGINALNAME_PROP);
611:       assertEquals(47, Node.IS_DISPATCHER);
612:       assertEquals(2, Node.POST_FLAG);
613:       assertEquals(30, Node.VAR_ARGS_NAME);
614:       assertEquals(8, Node.FLAG_NO_THROWS);
615:       assertEquals(50, Node.FREE_CALL);
616:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
617:       assertEquals(57, Node.REFLECTED_OBJECT);
618:       assertEquals(52, Node.LENGTH);
619:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
620:       assertEquals(55, Node.INFERRED_FUNCTION);
621:       assertEquals(39, Node.EMPTY_BLOCK);
622:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
623:       assertEquals(43, Node.IS_CONSTANT_NAME);
624:       assertEquals(15, Node.NO_SIDE_EFFECTS);
625:       assertEquals(57, Node.LAST_PROP);
626:       assertEquals(30, Node.VAR_ARGS_NAME);
627:       assertEquals(54, Node.SLASH_V);
628:       assertEquals(40, Node.ORIGINALNAME_PROP);
629:       assertEquals(56, Node.CHANGE_TIME);
630:       assertEquals(47, Node.IS_DISPATCHER);
631:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
632:       assertEquals(2, Node.POST_FLAG);
633:       assertEquals(46, Node.IS_NAMESPACE);
634:       assertEquals(51, Node.STATIC_SOURCE_FILE);
635:       assertEquals(32, Node.INCRDECR_PROP);
636:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
637:       assertEquals(1, Node.DECR_FLAG);
638:       assertEquals(29, Node.JSDOC_INFO_PROP);
639:       assertEquals(53, Node.INPUT_ID);
640:       assertEquals(36, Node.QUOTED_PROP);
641:       assertEquals(49, Node.DIRECT_EVAL);
642:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
643:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
644:       assertEquals(12, Node.COLUMN_BITS);
645:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
646:       assertEquals(4095, Node.COLUMN_MASK);
647:       assertEquals(48, Node.DIRECTIVES);
648:       assertEquals(37, Node.OPT_ARG_NAME);
649:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
650:       
651:       boolean boolean0 = node0.wasEmptyNode();
652:       assertFalse(node0.isIn());
653:       assertFalse(node0.isString());
654:       assertFalse(node0.isCase());
655:       assertFalse(node0.isFor());
656:       assertFalse(node0.isHook());
657:       assertFalse(node0.isInc());
658:       assertEquals(0, node0.getType());
659:       assertFalse(node0.isEmpty());
660:       assertFalse(node0.isIf());
661:       assertFalse(node0.isDelProp());
662:       assertFalse(node0.isBreak());
663:       assertFalse(node0.isVoid());
664:       assertFalse(node0.isTrue());
665:       assertFalse(node0.isNE());
666:       assertEquals(0, node0.getChildCount());
667:       assertFalse(node0.isCatch());
668:       assertFalse(node0.isInstanceOf());
669:       assertFalse(node0.isDefaultCase());
670:       assertFalse(node0.isWith());
671:       assertFalse(node0.isRegExp());
672:       assertFalse(node0.isThis());
673:       assertFalse(node0.isVar());
674:       assertFalse(node0.isArrayLit());
675:       assertFalse(node0.isTry());
676:       assertFalse(node0.hasOneChild());
677:       assertFalse(node0.isScript());
678:       assertFalse(node0.isGetterDef());
679:       assertFalse(node0.isNumber());
680:       assertFalse(node0.isLabelName());
681:       assertEquals((-1), node0.getCharno());
682:       assertFalse(node0.isSwitch());
683:       assertFalse(node0.isStringKey());
684:       assertFalse(node0.isParamList());
685:       assertFalse(node0.isReturn());
686:       assertFalse(node0.isOr());
687:       assertFalse(node0.isLabel());
688:       assertEquals((-1), node0.getLineno());
689:       assertFalse(node0.isContinue());
690:       assertFalse(node0.hasMoreThanOneChild());
691:       assertFalse(node0.hasChildren());
692:       assertFalse(node0.isTypeOf());
693:       assertFalse(node0.isAssign());
694:       assertFalse(node0.isDo());
695:       assertFalse(node0.isDec());
696:       assertFalse(node0.isBlock());
697:       assertFalse(node0.isAssignAdd());
698:       assertFalse(node0.isWhile());
699:       assertFalse(node0.isNew());
700:       assertFalse(node0.isCall());
701:       assertFalse(node0.isExprResult());
702:       assertFalse(node0.isGetElem());
703:       assertFalse(node0.isAdd());
704:       assertFalse(node0.isNull());
705:       assertFalse(node0.isName());
706:       assertFalse(node0.isGetProp());
707:       assertFalse(node0.isObjectLit());
708:       assertFalse(node0.isSetterDef());
709:       assertFalse(node0.isComma());
710:       assertFalse(node0.isThrow());
711:       assertFalse(node0.isFunction());
712:       assertFalse(node0.isFalse());
713:       assertFalse(node0.isCast());
714:       assertFalse(node0.isNot());
715:       assertEquals((-1), node0.getSourcePosition());
716:       assertFalse(node0.isDebugger());
717:       assertFalse(node0.isAnd());
718:       assertFalse(boolean0);
719:       assertFalse(node0.equals((Object)node1));
720:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
721:       assertEquals(54, Node.SLASH_V);
722:       assertEquals(15, Node.NO_SIDE_EFFECTS);
723:       assertEquals(57, Node.LAST_PROP);
724:       assertEquals(49, Node.DIRECT_EVAL);
725:       assertEquals(1, Node.DECR_FLAG);
726:       assertEquals(57, Node.REFLECTED_OBJECT);
727:       assertEquals(51, Node.STATIC_SOURCE_FILE);
728:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
729:       assertEquals(52, Node.LENGTH);
730:       assertEquals(8, Node.FLAG_NO_THROWS);
731:       assertEquals(50, Node.FREE_CALL);
732:       assertEquals(48, Node.DIRECTIVES);
733:       assertEquals(37, Node.OPT_ARG_NAME);
734:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
735:       assertEquals(56, Node.CHANGE_TIME);
736:       assertEquals(32, Node.INCRDECR_PROP);
737:       assertEquals(12, Node.COLUMN_BITS);
738:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
739:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
740:       assertEquals(4095, Node.COLUMN_MASK);
741:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
742:       assertEquals(53, Node.INPUT_ID);
743:       assertEquals(43, Node.IS_CONSTANT_NAME);
744:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
745:       assertEquals(55, Node.INFERRED_FUNCTION);
746:       assertEquals(29, Node.JSDOC_INFO_PROP);
747:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
748:       assertEquals(36, Node.QUOTED_PROP);
749:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
750:       assertEquals(39, Node.EMPTY_BLOCK);
751:       assertEquals(46, Node.IS_NAMESPACE);
752:       assertEquals(40, Node.ORIGINALNAME_PROP);
753:       assertEquals(47, Node.IS_DISPATCHER);
754:       assertEquals(2, Node.POST_FLAG);
755:       assertEquals(30, Node.VAR_ARGS_NAME);
756:       
757:       Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeTypeAwareEqualsImpl(node0);
758:       assertNotNull(node_NodeMismatch1);
759:       assertFalse(node0.isIn());
760:       assertFalse(node0.isString());
761:       assertFalse(node0.isCase());
762:       assertFalse(node0.isFor());
763:       assertFalse(node0.isHook());
764:       assertFalse(node0.isInc());
765:       assertEquals(0, node0.getType());
766:       assertFalse(node0.isEmpty());
767:       assertFalse(node0.isIf());
768:       assertFalse(node0.isDelProp());
769:       assertFalse(node0.isBreak());
770:       assertFalse(node0.isVoid());
771:       assertFalse(node0.isTrue());
772:       assertFalse(node0.isNE());
773:       assertEquals(0, node0.getChildCount());
774:       assertFalse(node0.isCatch());
775:       assertFalse(node0.isInstanceOf());
776:       assertFalse(node0.isDefaultCase());
777:       assertFalse(node0.isWith());
778:       assertFalse(node0.isRegExp());
779:       assertFalse(node0.isThis());
780:       assertFalse(node0.isVar());
781:       assertFalse(node0.isArrayLit());
782:       assertFalse(node0.isTry());
783:       assertFalse(node0.hasOneChild());
784:       assertFalse(node0.isScript());
785:       assertFalse(node0.isGetterDef());
786:       assertFalse(node0.isNumber());
787:       assertFalse(node0.isLabelName());
788:       assertEquals((-1), node0.getCharno());
789:       assertFalse(node0.isSwitch());
790:       assertFalse(node0.isStringKey());
791:       assertFalse(node0.isParamList());
792:       assertFalse(node0.isReturn());
793:       assertFalse(node0.isOr());
794:       assertFalse(node0.isLabel());
795:       assertEquals((-1), node0.getLineno());
796:       assertFalse(node0.isContinue());
797:       assertFalse(node0.hasMoreThanOneChild());
798:       assertFalse(node0.hasChildren());
799:       assertFalse(node0.isTypeOf());
800:       assertFalse(node0.isAssign());
801:       assertFalse(node0.isDo());
802:       assertFalse(node0.isDec());
803:       assertFalse(node0.isBlock());
804:       assertFalse(node0.isAssignAdd());
805:       assertFalse(node0.isWhile());
806:       assertFalse(node0.isNew());
807:       assertFalse(node0.isCall());
808:       assertFalse(node0.isExprResult());
809:       assertFalse(node0.isGetElem());
810:       assertFalse(node0.isAdd());
811:       assertFalse(node0.isNull());
812:       assertFalse(node0.isName());
813:       assertFalse(node0.isGetProp());
814:       assertFalse(node0.isObjectLit());
815:       assertFalse(node0.isSetterDef());
816:       assertFalse(node0.isComma());
817:       assertFalse(node0.isThrow());
818:       assertFalse(node0.isFunction());
819:       assertFalse(node0.isFalse());
820:       assertFalse(node0.isCast());
821:       assertFalse(node0.isNot());
822:       assertEquals((-1), node0.getSourcePosition());
823:       assertFalse(node0.isDebugger());
824:       assertFalse(node0.isAnd());
825:       assertFalse(node1.isAdd());
826:       assertFalse(node1.isBlock());
827:       assertFalse(node1.isDo());
828:       assertFalse(node1.isNew());
829:       assertFalse(node1.isContinue());
830:       assertFalse(node1.isCall());
831:       assertFalse(node1.isVar());
832:       assertFalse(node1.hasMoreThanOneChild());
833:       assertFalse(node1.isWhile());
834:       assertFalse(node1.isReturn());
835:       assertFalse(node1.isLabel());
836:       assertTrue(node1.isThrow());
837:       assertFalse(node1.isParamList());
838:       assertFalse(node1.isLabelName());
839:       assertFalse(node1.isStringKey());
840:       assertFalse(node1.isNumber());
841:       assertFalse(node1.isDebugger());
842:       assertEquals((-1), node1.getSourcePosition());
843:       assertFalse(node1.isFunction());
844:       assertFalse(node1.isScript());
845:       assertFalse(node1.isTry());
846:       assertFalse(node1.hasOneChild());
847:       assertFalse(node1.isFor());
848:       assertFalse(node1.isCast());
849:       assertFalse(node1.isWith());
850:       assertFalse(node1.isCatch());
851:       assertFalse(node1.isInstanceOf());
852:       assertFalse(node1.isRegExp());
853:       assertFalse(node1.isNE());
854:       assertFalse(node1.isIf());
855:       assertFalse(node1.isSetterDef());
856:       assertEquals((-1), node1.getLineno());
857:       assertFalse(node1.isIn());
858:       assertEquals((-1), node1.getCharno());
859:       assertFalse(node1.isInc());
860:       assertFalse(node1.isSwitch());
861:       assertFalse(node1.isCase());
862:       assertFalse(node1.isFalse());
863:       assertFalse(node1.isHook());
864:       assertFalse(node1.isComma());
865:       assertFalse(node1.isGetProp());
866:       assertEquals(49, node1.getType());
867:       assertFalse(node1.isThis());
868:       assertFalse(node1.isObjectLit());
869:       assertFalse(node1.isAnd());
870:       assertFalse(node1.isString());
871:       assertFalse(node1.isGetterDef());
872:       assertFalse(node1.isNot());
873:       assertFalse(node1.isVoid());
874:       assertFalse(node1.isTrue());
875:       assertFalse(node1.isExprResult());
876:       assertFalse(node1.isDefaultCase());
877:       assertFalse(node1.isArrayLit());
878:       assertFalse(node1.isGetElem());
879:       assertFalse(node1.isDec());
880:       assertFalse(node1.hasChildren());
881:       assertEquals(0, node1.getChildCount());
882:       assertFalse(node1.isTypeOf());
883:       assertFalse(node1.isAssign());
884:       assertFalse(node1.isAssignAdd());
885:       assertFalse(node1.isBreak());
886:       assertFalse(node1.isDelProp());
887:       assertFalse(node1.isName());
888:       assertFalse(node1.isEmpty());
889:       assertFalse(node1.isNull());
890:       assertFalse(node1.isOr());
891:       assertNotSame(node_NodeMismatch1, node_NodeMismatch0);
892:       assertFalse(node0.equals((Object)node1));
893:       assertFalse(node1.equals((Object)node0));
894:       assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
895:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
896:       assertEquals(54, Node.SLASH_V);
897:       assertEquals(15, Node.NO_SIDE_EFFECTS);
898:       assertEquals(57, Node.LAST_PROP);
899:       assertEquals(49, Node.DIRECT_EVAL);
900:       assertEquals(1, Node.DECR_FLAG);
901:       assertEquals(57, Node.REFLECTED_OBJECT);
902:       assertEquals(51, Node.STATIC_SOURCE_FILE);
903:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
904:       assertEquals(52, Node.LENGTH);
905:       assertEquals(8, Node.FLAG_NO_THROWS);
906:       assertEquals(50, Node.FREE_CALL);
907:       assertEquals(48, Node.DIRECTIVES);
908:       assertEquals(37, Node.OPT_ARG_NAME);
909:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
910:       assertEquals(56, Node.CHANGE_TIME);
911:       assertEquals(32, Node.INCRDECR_PROP);
912:       assertEquals(12, Node.COLUMN_BITS);
913:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
914:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
915:       assertEquals(4095, Node.COLUMN_MASK);
916:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
917:       assertEquals(53, Node.INPUT_ID);
918:       assertEquals(43, Node.IS_CONSTANT_NAME);
919:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
920:       assertEquals(55, Node.INFERRED_FUNCTION);
921:       assertEquals(29, Node.JSDOC_INFO_PROP);
922:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
923:       assertEquals(36, Node.QUOTED_PROP);
924:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
925:       assertEquals(39, Node.EMPTY_BLOCK);
926:       assertEquals(46, Node.IS_NAMESPACE);
927:       assertEquals(40, Node.ORIGINALNAME_PROP);
928:       assertEquals(47, Node.IS_DISPATCHER);
929:       assertEquals(2, Node.POST_FLAG);
930:       assertEquals(30, Node.VAR_ARGS_NAME);
931:       assertEquals(8, Node.FLAG_NO_THROWS);
932:       assertEquals(50, Node.FREE_CALL);
933:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
934:       assertEquals(57, Node.REFLECTED_OBJECT);
935:       assertEquals(52, Node.LENGTH);
936:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
937:       assertEquals(55, Node.INFERRED_FUNCTION);
938:       assertEquals(39, Node.EMPTY_BLOCK);
939:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
940:       assertEquals(43, Node.IS_CONSTANT_NAME);
941:       assertEquals(15, Node.NO_SIDE_EFFECTS);
942:       assertEquals(57, Node.LAST_PROP);
943:       assertEquals(30, Node.VAR_ARGS_NAME);
944:       assertEquals(54, Node.SLASH_V);
945:       assertEquals(40, Node.ORIGINALNAME_PROP);
946:       assertEquals(56, Node.CHANGE_TIME);
947:       assertEquals(47, Node.IS_DISPATCHER);
948:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
949:       assertEquals(2, Node.POST_FLAG);
950:       assertEquals(46, Node.IS_NAMESPACE);
951:       assertEquals(51, Node.STATIC_SOURCE_FILE);
952:       assertEquals(32, Node.INCRDECR_PROP);
953:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
954:       assertEquals(1, Node.DECR_FLAG);
955:       assertEquals(29, Node.JSDOC_INFO_PROP);
956:       assertEquals(53, Node.INPUT_ID);
957:       assertEquals(36, Node.QUOTED_PROP);
958:       assertEquals(49, Node.DIRECT_EVAL);
959:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
960:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
961:       assertEquals(12, Node.COLUMN_BITS);
962:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
963:       assertEquals(4095, Node.COLUMN_MASK);
964:       assertEquals(48, Node.DIRECTIVES);
965:       assertEquals(37, Node.OPT_ARG_NAME);
966:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
967:       
968:       Node[] nodeArray0 = new Node[1];
969:       nodeArray0[0] = node1;
970:       Node node2 = new Node((-1117), nodeArray0, 42, 10);
971:       assertNotNull(node2);
972:       assertFalse(node2.isName());
973:       assertFalse(node2.isStringKey());
974:       assertFalse(node2.isNull());
975:       assertFalse(node2.isVar());
976:       assertFalse(node2.isBlock());
977:       assertFalse(node2.isSetterDef());
978:       assertFalse(node2.isDo());
979:       assertFalse(node2.isNew());
980:       assertFalse(node2.isAdd());
981:       assertFalse(node2.isContinue());
982:       assertFalse(node2.isAssignAdd());
983:       assertFalse(node2.isLabel());
984:       assertFalse(node2.isParamList());
985:       assertFalse(node2.isFunction());
986:       assertFalse(node2.isLabelName());
987:       assertFalse(node2.isCast());
988:       assertFalse(node2.isArrayLit());
989:       assertFalse(node2.isFor());
990:       assertFalse(node2.isNumber());
991:       assertFalse(node2.isGetterDef());
992:       assertFalse(node2.isTry());
993:       assertFalse(node2.isScript());
994:       assertFalse(node2.isCatch());
995:       assertFalse(node2.hasMoreThanOneChild());
996:       assertFalse(node2.isIn());
997:       assertEquals(1, node2.getChildCount());
998:       assertFalse(node2.isNE());
999:       assertEquals((-1117), node2.getType());
1000:       assertFalse(node2.isThis());
1001:       assertFalse(node2.isIf());
1002:       assertFalse(node2.isRegExp());
1003:       assertTrue(node2.hasChildren());
1004:       assertFalse(node2.isWith());
1005:       assertFalse(node2.isInstanceOf());
1006:       assertFalse(node2.isFalse());
1007:       assertFalse(node2.isThrow());
1008:       assertFalse(node2.isHook());
1009:       assertFalse(node2.isInc());
1010:       assertFalse(node2.isString());
1011:       assertFalse(node2.isCase());
1012:       assertFalse(node2.isGetProp());
1013:       assertFalse(node2.isAnd());
1014:       assertFalse(node2.isObjectLit());
1015:       assertFalse(node2.isNot());
1016:       assertFalse(node2.isSwitch());
1017:       assertFalse(node2.isAssign());
1018:       assertTrue(node2.hasOneChild());
1019:       assertFalse(node2.isTrue());
1020:       assertEquals(42, node2.getLineno());
1021:       assertFalse(node2.isDebugger());
1022:       assertFalse(node2.isDefaultCase());
1023:       assertEquals(172042, node2.getSourcePosition());
1024:       assertFalse(node2.isEmpty());
1025:       assertFalse(node2.isReturn());
1026:       assertFalse(node2.isOr());
1027:       assertFalse(node2.isWhile());
1028:       assertFalse(node2.isComma());
1029:       assertFalse(node2.isDec());
1030:       assertFalse(node2.isDelProp());
1031:       assertFalse(node2.isVoid());
1032:       assertFalse(node2.isTypeOf());
1033:       assertFalse(node2.isBreak());
1034:       assertEquals(10, node2.getCharno());
1035:       assertFalse(node2.isGetElem());
1036:       assertFalse(node2.isCall());
1037:       assertFalse(node2.isExprResult());
1038:       assertEquals(1, nodeArray0.length);
1039:       assertFalse(node2.equals((Object)node0));
1040:       assertFalse(node2.equals((Object)node1));
1041:       assertEquals(8, Node.FLAG_NO_THROWS);
1042:       assertEquals(39, Node.EMPTY_BLOCK);
1043:       assertEquals(55, Node.INFERRED_FUNCTION);
1044:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1045:       assertEquals(4095, Node.COLUMN_MASK);
1046:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1047:       assertEquals(50, Node.FREE_CALL);
1048:       assertEquals(36, Node.QUOTED_PROP);
1049:       assertEquals(48, Node.DIRECTIVES);
1050:       assertEquals(43, Node.IS_CONSTANT_NAME);
1051:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1052:       assertEquals(53, Node.INPUT_ID);
1053:       assertEquals(57, Node.REFLECTED_OBJECT);
1054:       assertEquals(40, Node.ORIGINALNAME_PROP);
1055:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1056:       assertEquals(52, Node.LENGTH);
1057:       assertEquals(29, Node.JSDOC_INFO_PROP);
1058:       assertEquals(30, Node.VAR_ARGS_NAME);
1059:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1060:       assertEquals(47, Node.IS_DISPATCHER);
1061:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1062:       assertEquals(57, Node.LAST_PROP);
1063:       assertEquals(32, Node.INCRDECR_PROP);
1064:       assertEquals(46, Node.IS_NAMESPACE);
1065:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1066:       assertEquals(2, Node.POST_FLAG);
1067:       assertEquals(49, Node.DIRECT_EVAL);
1068:       assertEquals(37, Node.OPT_ARG_NAME);
1069:       assertEquals(54, Node.SLASH_V);
1070:       assertEquals(56, Node.CHANGE_TIME);
1071:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1072:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1073:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1074:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1075:       assertEquals(12, Node.COLUMN_BITS);
1076:       assertEquals(1, Node.DECR_FLAG);
1077:       
1078:       Node.NodeMismatch node_NodeMismatch2 = node1.checkTreeTypeAwareEqualsImpl(node1);
1079:       assertNull(node_NodeMismatch2);
1080:       assertFalse(node1.isAdd());
1081:       assertFalse(node1.isBlock());
1082:       assertFalse(node1.isDo());
1083:       assertFalse(node1.isNew());
1084:       assertFalse(node1.isContinue());
1085:       assertFalse(node1.isCall());
1086:       assertFalse(node1.isVar());
1087:       assertFalse(node1.hasMoreThanOneChild());
1088:       assertFalse(node1.isWhile());
1089:       assertFalse(node1.isReturn());
1090:       assertFalse(node1.isLabel());
1091:       assertTrue(node1.isThrow());
1092:       assertFalse(node1.isParamList());
1093:       assertFalse(node1.isLabelName());
1094:       assertFalse(node1.isStringKey());
1095:       assertFalse(node1.isNumber());
1096:       assertFalse(node1.isDebugger());
1097:       assertEquals((-1), node1.getSourcePosition());
1098:       assertFalse(node1.isFunction());
1099:       assertFalse(node1.isScript());
1100:       assertFalse(node1.isTry());
1101:       assertFalse(node1.hasOneChild());
1102:       assertFalse(node1.isFor());
1103:       assertFalse(node1.isCast());
1104:       assertFalse(node1.isWith());
1105:       assertFalse(node1.isCatch());
1106:       assertFalse(node1.isInstanceOf());
1107:       assertFalse(node1.isRegExp());
1108:       assertFalse(node1.isNE());
1109:       assertFalse(node1.isIf());
1110:       assertFalse(node1.isSetterDef());
1111:       assertEquals((-1), node1.getLineno());
1112:       assertFalse(node1.isIn());
1113:       assertEquals((-1), node1.getCharno());
1114:       assertFalse(node1.isInc());
1115:       assertFalse(node1.isSwitch());
1116:       assertFalse(node1.isCase());
1117:       assertFalse(node1.isFalse());
1118:       assertFalse(node1.isHook());
1119:       assertFalse(node1.isComma());
1120:       assertFalse(node1.isGetProp());
1121:       assertEquals(49, node1.getType());
1122:       assertFalse(node1.isThis());
1123:       assertFalse(node1.isObjectLit());
1124:       assertFalse(node1.isAnd());
1125:       assertFalse(node1.isString());
1126:       assertFalse(node1.isGetterDef());
1127:       assertFalse(node1.isNot());
1128:       assertFalse(node1.isVoid());
1129:       assertFalse(node1.isTrue());
1130:       assertFalse(node1.isExprResult());
1131:       assertFalse(node1.isDefaultCase());
1132:       assertFalse(node1.isArrayLit());
1133:       assertFalse(node1.isGetElem());
1134:       assertFalse(node1.isDec());
1135:       assertFalse(node1.hasChildren());
1136:       assertEquals(0, node1.getChildCount());
1137:       assertFalse(node1.isTypeOf());
1138:       assertFalse(node1.isAssign());
1139:       assertFalse(node1.isAssignAdd());
1140:       assertFalse(node1.isBreak());
1141:       assertFalse(node1.isDelProp());
1142:       assertFalse(node1.isName());
1143:       assertFalse(node1.isEmpty());
1144:       assertFalse(node1.isNull());
1145:       assertFalse(node1.isOr());
1146:       assertFalse(node1.equals((Object)node2));
1147:       assertFalse(node1.equals((Object)node0));
1148:       assertEquals(8, Node.FLAG_NO_THROWS);
1149:       assertEquals(50, Node.FREE_CALL);
1150:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1151:       assertEquals(57, Node.REFLECTED_OBJECT);
1152:       assertEquals(52, Node.LENGTH);
1153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1154:       assertEquals(55, Node.INFERRED_FUNCTION);
1155:       assertEquals(39, Node.EMPTY_BLOCK);
1156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1157:       assertEquals(43, Node.IS_CONSTANT_NAME);
1158:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1159:       assertEquals(57, Node.LAST_PROP);
1160:       assertEquals(30, Node.VAR_ARGS_NAME);
1161:       assertEquals(54, Node.SLASH_V);
1162:       assertEquals(40, Node.ORIGINALNAME_PROP);
1163:       assertEquals(56, Node.CHANGE_TIME);
1164:       assertEquals(47, Node.IS_DISPATCHER);
1165:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1166:       assertEquals(2, Node.POST_FLAG);
1167:       assertEquals(46, Node.IS_NAMESPACE);
1168:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1169:       assertEquals(32, Node.INCRDECR_PROP);
1170:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1171:       assertEquals(1, Node.DECR_FLAG);
1172:       assertEquals(29, Node.JSDOC_INFO_PROP);
1173:       assertEquals(53, Node.INPUT_ID);
1174:       assertEquals(36, Node.QUOTED_PROP);
1175:       assertEquals(49, Node.DIRECT_EVAL);
1176:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1177:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1178:       assertEquals(12, Node.COLUMN_BITS);
1179:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1180:       assertEquals(4095, Node.COLUMN_MASK);
1181:       assertEquals(48, Node.DIRECTIVES);
1182:       assertEquals(37, Node.OPT_ARG_NAME);
1183:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1184:       
1185:       Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
1186:       assertNotNull(node3);
1187:       assertFalse(node1.isAdd());
1188:       assertFalse(node1.isBlock());
1189:       assertFalse(node1.isDo());
1190:       assertFalse(node1.isNew());
1191:       assertFalse(node1.isContinue());
1192:       assertFalse(node1.isCall());
1193:       assertFalse(node1.isVar());
1194:       assertFalse(node1.hasMoreThanOneChild());
1195:       assertFalse(node1.isWhile());
1196:       assertFalse(node1.isReturn());
1197:       assertFalse(node1.isLabel());
1198:       assertTrue(node1.isThrow());
1199:       assertFalse(node1.isParamList());
1200:       assertFalse(node1.isLabelName());
1201:       assertFalse(node1.isStringKey());
1202:       assertFalse(node1.isNumber());
1203:       assertFalse(node1.isDebugger());
1204:       assertFalse(node1.isFunction());
1205:       assertFalse(node1.isScript());
1206:       assertFalse(node1.isTry());
1207:       assertFalse(node1.hasOneChild());
1208:       assertFalse(node1.isFor());
1209:       assertFalse(node1.isCast());
1210:       assertFalse(node1.isWith());
1211:       assertFalse(node1.isCatch());
1212:       assertFalse(node1.isInstanceOf());
1213:       assertFalse(node1.isRegExp());
1214:       assertFalse(node1.isNE());
1215:       assertFalse(node1.isIf());
1216:       assertFalse(node1.isSetterDef());
1217:       assertFalse(node1.isIn());
1218:       assertFalse(node1.isInc());
1219:       assertFalse(node1.isSwitch());
1220:       assertFalse(node1.isCase());
1221:       assertFalse(node1.isFalse());
1222:       assertFalse(node1.isHook());
1223:       assertFalse(node1.isComma());
1224:       assertFalse(node1.isGetProp());
1225:       assertEquals(49, node1.getType());
1226:       assertFalse(node1.isThis());
1227:       assertFalse(node1.isObjectLit());
1228:       assertFalse(node1.isAnd());
1229:       assertFalse(node1.isString());
1230:       assertFalse(node1.isGetterDef());
1231:       assertFalse(node1.isNot());
1232:       assertFalse(node1.isVoid());
1233:       assertFalse(node1.isTrue());
1234:       assertFalse(node1.isExprResult());
1235:       assertFalse(node1.isDefaultCase());
1236:       assertFalse(node1.isArrayLit());
1237:       assertEquals(42, node1.getLineno());
1238:       assertFalse(node1.isGetElem());
1239:       assertEquals(10, node1.getCharno());
1240:       assertFalse(node1.isDec());
1241:       assertFalse(node1.hasChildren());
1242:       assertEquals(0, node1.getChildCount());
1243:       assertFalse(node1.isTypeOf());
1244:       assertFalse(node1.isAssign());
1245:       assertEquals(172042, node1.getSourcePosition());
1246:       assertFalse(node1.isAssignAdd());
1247:       assertFalse(node1.isBreak());
1248:       assertFalse(node1.isDelProp());
1249:       assertFalse(node1.isName());
1250:       assertFalse(node1.isEmpty());
1251:       assertFalse(node1.isNull());
1252:       assertFalse(node1.isOr());
1253:       assertFalse(node2.isName());
1254:       assertFalse(node2.isStringKey());
1255:       assertFalse(node2.isNull());
1256:       assertFalse(node2.isVar());
1257:       assertFalse(node2.isBlock());
1258:       assertFalse(node2.isSetterDef());
1259:       assertFalse(node2.isDo());
1260:       assertFalse(node2.isNew());
1261:       assertFalse(node2.isAdd());
1262:       assertFalse(node2.isContinue());
1263:       assertFalse(node2.isAssignAdd());
1264:       assertFalse(node2.isLabel());
1265:       assertFalse(node2.isParamList());
1266:       assertFalse(node2.isFunction());
1267:       assertFalse(node2.isLabelName());
1268:       assertFalse(node2.isCast());
1269:       assertFalse(node2.isArrayLit());
1270:       assertFalse(node2.isFor());
1271:       assertFalse(node2.isNumber());
1272:       assertFalse(node2.isGetterDef());
1273:       assertFalse(node2.isTry());
1274:       assertFalse(node2.isScript());
1275:       assertFalse(node2.isCatch());
1276:       assertFalse(node2.hasMoreThanOneChild());
1277:       assertFalse(node2.isIn());
1278:       assertEquals(1, node2.getChildCount());
1279:       assertFalse(node2.isNE());
1280:       assertEquals((-1117), node2.getType());
1281:       assertFalse(node2.isThis());
1282:       assertFalse(node2.isIf());
1283:       assertFalse(node2.isRegExp());
1284:       assertTrue(node2.hasChildren());
1285:       assertFalse(node2.isWith());
1286:       assertFalse(node2.isInstanceOf());
1287:       assertFalse(node2.isFalse());
1288:       assertFalse(node2.isThrow());
1289:       assertFalse(node2.isHook());
1290:       assertFalse(node2.isInc());
1291:       assertFalse(node2.isString());
1292:       assertFalse(node2.isCase());
1293:       assertFalse(node2.isGetProp());
1294:       assertFalse(node2.isAnd());
1295:       assertFalse(node2.isObjectLit());
1296:       assertFalse(node2.isNot());
1297:       assertFalse(node2.isSwitch());
1298:       assertFalse(node2.isAssign());
1299:       assertTrue(node2.hasOneChild());
1300:       assertFalse(node2.isTrue());
1301:       assertEquals(42, node2.getLineno());
1302:       assertFalse(node2.isDebugger());
1303:       assertFalse(node2.isDefaultCase());
1304:       assertEquals(172042, node2.getSourcePosition());
1305:       assertFalse(node2.isEmpty());
1306:       assertFalse(node2.isReturn());
1307:       assertFalse(node2.isOr());
1308:       assertFalse(node2.isWhile());
1309:       assertFalse(node2.isComma());
1310:       assertFalse(node2.isDec());
1311:       assertFalse(node2.isDelProp());
1312:       assertFalse(node2.isVoid());
1313:       assertFalse(node2.isTypeOf());
1314:       assertFalse(node2.isBreak());
1315:       assertEquals(10, node2.getCharno());
1316:       assertFalse(node2.isGetElem());
1317:       assertFalse(node2.isCall());
1318:       assertFalse(node2.isExprResult());
1319:       assertFalse(node3.isDo());
1320:       assertFalse(node3.isNew());
1321:       assertFalse(node3.isAdd());
1322:       assertFalse(node3.isContinue());
1323:       assertFalse(node3.isVar());
1324:       assertFalse(node3.hasMoreThanOneChild());
1325:       assertFalse(node3.isLabel());
1326:       assertFalse(node3.isBlock());
1327:       assertFalse(node3.isReturn());
1328:       assertFalse(node3.isAssignAdd());
1329:       assertFalse(node3.isWhile());
1330:       assertTrue(node3.isThrow());
1331:       assertFalse(node3.isNumber());
1332:       assertFalse(node3.isLabelName());
1333:       assertFalse(node3.isCast());
1334:       assertFalse(node3.isParamList());
1335:       assertFalse(node3.isStringKey());
1336:       assertFalse(node3.isDefaultCase());
1337:       assertFalse(node3.isDebugger());
1338:       assertFalse(node3.isVoid());
1339:       assertFalse(node3.isNot());
1340:       assertFalse(node3.isExprResult());
1341:       assertEquals(0, node3.getChildCount());
1342:       assertEquals(42, node3.getLineno());
1343:       assertFalse(node3.isNull());
1344:       assertFalse(node3.isTypeOf());
1345:       assertFalse(node3.isBreak());
1346:       assertFalse(node3.hasChildren());
1347:       assertFalse(node3.isDelProp());
1348:       assertFalse(node3.isComma());
1349:       assertFalse(node3.isDec());
1350:       assertFalse(node3.isAssign());
1351:       assertFalse(node3.isEmpty());
1352:       assertFalse(node3.isGetElem());
1353:       assertEquals(172042, node3.getSourcePosition());
1354:       assertFalse(node3.isCall());
1355:       assertEquals(10, node3.getCharno());
1356:       assertFalse(node3.isOr());
1357:       assertFalse(node3.isName());
1358:       assertFalse(node3.isTrue());
1359:       assertFalse(node3.isSwitch());
1360:       assertFalse(node3.isCase());
1361:       assertFalse(node3.isInc());
1362:       assertFalse(node3.isString());
1363:       assertFalse(node3.isHook());
1364:       assertFalse(node3.isGetterDef());
1365:       assertFalse(node3.isFalse());
1366:       assertFalse(node3.isGetProp());
1367:       assertEquals(49, node3.getType());
1368:       assertFalse(node3.isArrayLit());
1369:       assertFalse(node3.isObjectLit());
1370:       assertFalse(node3.isAnd());
1371:       assertFalse(node3.isRegExp());
1372:       assertFalse(node3.isScript());
1373:       assertFalse(node3.isFunction());
1374:       assertFalse(node3.isWith());
1375:       assertFalse(node3.isCatch());
1376:       assertFalse(node3.hasOneChild());
1377:       assertFalse(node3.isTry());
1378:       assertFalse(node3.isFor());
1379:       assertFalse(node3.isIf());
1380:       assertFalse(node3.isSetterDef());
1381:       assertFalse(node3.isThis());
1382:       assertFalse(node3.isInstanceOf());
1383:       assertFalse(node3.isIn());
1384:       assertFalse(node3.isNE());
1385:       assertSame(node1, node3);
1386:       assertNotSame(node2, node0);
1387:       assertSame(node3, node1);
1388:       assertEquals(1, nodeArray0.length);
1389:       assertFalse(node1.equals((Object)node2));
1390:       assertFalse(node1.equals((Object)node0));
1391:       assertFalse(node2.equals((Object)node0));
1392:       assertFalse(node2.equals((Object)node1));
1393:       assertFalse(node3.equals((Object)node2));
1394:       assertFalse(node3.equals((Object)node0));
1395:       assertEquals(8, Node.FLAG_NO_THROWS);
1396:       assertEquals(50, Node.FREE_CALL);
1397:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1398:       assertEquals(57, Node.REFLECTED_OBJECT);
1399:       assertEquals(52, Node.LENGTH);
1400:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1401:       assertEquals(55, Node.INFERRED_FUNCTION);
1402:       assertEquals(39, Node.EMPTY_BLOCK);
1403:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1404:       assertEquals(43, Node.IS_CONSTANT_NAME);
1405:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1406:       assertEquals(57, Node.LAST_PROP);
1407:       assertEquals(30, Node.VAR_ARGS_NAME);
1408:       assertEquals(54, Node.SLASH_V);
1409:       assertEquals(40, Node.ORIGINALNAME_PROP);
1410:       assertEquals(56, Node.CHANGE_TIME);
1411:       assertEquals(47, Node.IS_DISPATCHER);
1412:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1413:       assertEquals(2, Node.POST_FLAG);
1414:       assertEquals(46, Node.IS_NAMESPACE);
1415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1416:       assertEquals(32, Node.INCRDECR_PROP);
1417:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1418:       assertEquals(1, Node.DECR_FLAG);
1419:       assertEquals(29, Node.JSDOC_INFO_PROP);
1420:       assertEquals(53, Node.INPUT_ID);
1421:       assertEquals(36, Node.QUOTED_PROP);
1422:       assertEquals(49, Node.DIRECT_EVAL);
1423:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1424:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1425:       assertEquals(12, Node.COLUMN_BITS);
1426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1427:       assertEquals(4095, Node.COLUMN_MASK);
1428:       assertEquals(48, Node.DIRECTIVES);
1429:       assertEquals(37, Node.OPT_ARG_NAME);
1430:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1431:       assertEquals(8, Node.FLAG_NO_THROWS);
1432:       assertEquals(39, Node.EMPTY_BLOCK);
1433:       assertEquals(55, Node.INFERRED_FUNCTION);
1434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1435:       assertEquals(4095, Node.COLUMN_MASK);
1436:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1437:       assertEquals(50, Node.FREE_CALL);
1438:       assertEquals(36, Node.QUOTED_PROP);
1439:       assertEquals(48, Node.DIRECTIVES);
1440:       assertEquals(43, Node.IS_CONSTANT_NAME);
1441:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1442:       assertEquals(53, Node.INPUT_ID);
1443:       assertEquals(57, Node.REFLECTED_OBJECT);
1444:       assertEquals(40, Node.ORIGINALNAME_PROP);
1445:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1446:       assertEquals(52, Node.LENGTH);
1447:       assertEquals(29, Node.JSDOC_INFO_PROP);
1448:       assertEquals(30, Node.VAR_ARGS_NAME);
1449:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1450:       assertEquals(47, Node.IS_DISPATCHER);
1451:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1452:       assertEquals(57, Node.LAST_PROP);
1453:       assertEquals(32, Node.INCRDECR_PROP);
1454:       assertEquals(46, Node.IS_NAMESPACE);
1455:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1456:       assertEquals(2, Node.POST_FLAG);
1457:       assertEquals(49, Node.DIRECT_EVAL);
1458:       assertEquals(37, Node.OPT_ARG_NAME);
1459:       assertEquals(54, Node.SLASH_V);
1460:       assertEquals(56, Node.CHANGE_TIME);
1461:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1462:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1463:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1464:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1465:       assertEquals(12, Node.COLUMN_BITS);
1466:       assertEquals(1, Node.DECR_FLAG);
1467:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1468:       assertEquals(50, Node.FREE_CALL);
1469:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1470:       assertEquals(40, Node.ORIGINALNAME_PROP);
1471:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1472:       assertEquals(48, Node.DIRECTIVES);
1473:       assertEquals(54, Node.SLASH_V);
1474:       assertEquals(39, Node.EMPTY_BLOCK);
1475:       assertEquals(57, Node.REFLECTED_OBJECT);
1476:       assertEquals(55, Node.INFERRED_FUNCTION);
1477:       assertEquals(52, Node.LENGTH);
1478:       assertEquals(8, Node.FLAG_NO_THROWS);
1479:       assertEquals(30, Node.VAR_ARGS_NAME);
1480:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1481:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1482:       assertEquals(43, Node.IS_CONSTANT_NAME);
1483:       assertEquals(57, Node.LAST_PROP);
1484:       assertEquals(2, Node.POST_FLAG);
1485:       assertEquals(29, Node.JSDOC_INFO_PROP);
1486:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1487:       assertEquals(47, Node.IS_DISPATCHER);
1488:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1489:       assertEquals(37, Node.OPT_ARG_NAME);
1490:       assertEquals(56, Node.CHANGE_TIME);
1491:       assertEquals(46, Node.IS_NAMESPACE);
1492:       assertEquals(53, Node.INPUT_ID);
1493:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1494:       assertEquals(36, Node.QUOTED_PROP);
1495:       assertEquals(49, Node.DIRECT_EVAL);
1496:       assertEquals(1, Node.DECR_FLAG);
1497:       assertEquals(12, Node.COLUMN_BITS);
1498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1499:       assertEquals(32, Node.INCRDECR_PROP);
1500:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1501:       assertEquals(4095, Node.COLUMN_MASK);
1502:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1503:       
1504:       Node node4 = Node.newString(147, "", 50, 57);
1505:       assertNotNull(node4);
1506:       assertTrue(node4.isGetterDef());
1507:       assertFalse(node4.isLabel());
1508:       assertFalse(node4.isReturn());
1509:       assertFalse(node4.isLabelName());
1510:       assertFalse(node4.isAssignAdd());
1511:       assertFalse(node4.isContinue());
1512:       assertFalse(node4.isCast());
1513:       assertFalse(node4.isGetElem());
1514:       assertFalse(node4.hasChildren());
1515:       assertFalse(node4.isDec());
1516:       assertFalse(node4.isTypeOf());
1517:       assertFalse(node4.isAssign());
1518:       assertFalse(node4.hasMoreThanOneChild());
1519:       assertFalse(node4.isExprResult());
1520:       assertFalse(node4.isNew());
1521:       assertFalse(node4.isAdd());
1522:       assertFalse(node4.isDo());
1523:       assertFalse(node4.isOr());
1524:       assertEquals(147, node4.getType());
1525:       assertFalse(node4.isParamList());
1526:       assertFalse(node4.isThis());
1527:       assertFalse(node4.isCatch());
1528:       assertFalse(node4.isVar());
1529:       assertFalse(node4.isHook());
1530:       assertEquals(0, node4.getChildCount());
1531:       assertFalse(node4.isInstanceOf());
1532:       assertFalse(node4.isRegExp());
1533:       assertFalse(node4.isWith());
1534:       assertFalse(node4.isScript());
1535:       assertFalse(node4.isBlock());
1536:       assertFalse(node4.hasOneChild());
1537:       assertFalse(node4.isTry());
1538:       assertFalse(node4.isSwitch());
1539:       assertFalse(node4.isStringKey());
1540:       assertEquals(57, node4.getCharno());
1541:       assertFalse(node4.isCase());
1542:       assertFalse(node4.isNumber());
1543:       assertFalse(node4.isNE());
1544:       assertFalse(node4.isIf());
1545:       assertFalse(node4.isDelProp());
1546:       assertFalse(node4.isArrayLit());
1547:       assertFalse(node4.isFor());
1548:       assertFalse(node4.isTrue());
1549:       assertFalse(node4.isVoid());
1550:       assertFalse(node4.isInc());
1551:       assertFalse(node4.isDefaultCase());
1552:       assertFalse(node4.isEmpty());
1553:       assertFalse(node4.isIn());
1554:       assertFalse(node4.isComma());
1555:       assertFalse(node4.isNull());
1556:       assertFalse(node4.isGetProp());
1557:       assertEquals(204857, node4.getSourcePosition());
1558:       assertFalse(node4.isSetterDef());
1559:       assertFalse(node4.isBreak());
1560:       assertFalse(node4.isName());
1561:       assertFalse(node4.isCall());
1562:       assertFalse(node4.isThrow());
1563:       assertFalse(node4.isFunction());
1564:       assertFalse(node4.isFalse());
1565:       assertFalse(node4.isDebugger());
1566:       assertEquals(50, node4.getLineno());
1567:       assertFalse(node4.isWhile());
1568:       assertFalse(node4.isObjectLit());
1569:       assertFalse(node4.isAnd());
1570:       assertFalse(node4.isString());
1571:       assertFalse(node4.isNot());
1572:       assertNotSame(node4, node3);
1573:       assertNotSame(node4, node1);
1574:       assertFalse(node4.equals((Object)node3));
1575:       assertFalse(node4.equals((Object)node0));
1576:       assertFalse(node4.equals((Object)node2));
1577:       assertFalse(node4.equals((Object)node1));
1578:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1579:       assertEquals(57, Node.LAST_PROP);
1580:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1581:       assertEquals(54, Node.SLASH_V);
1582:       assertEquals(30, Node.VAR_ARGS_NAME);
1583:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1584:       assertEquals(12, Node.COLUMN_BITS);
1585:       assertEquals(32, Node.INCRDECR_PROP);
1586:       assertEquals(52, Node.LENGTH);
1587:       assertEquals(1, Node.DECR_FLAG);
1588:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1589:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1590:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1591:       assertEquals(29, Node.JSDOC_INFO_PROP);
1592:       assertEquals(56, Node.CHANGE_TIME);
1593:       assertEquals(8, Node.FLAG_NO_THROWS);
1594:       assertEquals(57, Node.REFLECTED_OBJECT);
1595:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1596:       assertEquals(4095, Node.COLUMN_MASK);
1597:       assertEquals(48, Node.DIRECTIVES);
1598:       assertEquals(49, Node.DIRECT_EVAL);
1599:       assertEquals(37, Node.OPT_ARG_NAME);
1600:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1601:       assertEquals(43, Node.IS_CONSTANT_NAME);
1602:       assertEquals(36, Node.QUOTED_PROP);
1603:       assertEquals(55, Node.INFERRED_FUNCTION);
1604:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1605:       assertEquals(53, Node.INPUT_ID);
1606:       assertEquals(39, Node.EMPTY_BLOCK);
1607:       assertEquals(47, Node.IS_DISPATCHER);
1608:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1609:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1610:       assertEquals(2, Node.POST_FLAG);
1611:       assertEquals(50, Node.FREE_CALL);
1612:       assertEquals(46, Node.IS_NAMESPACE);
1613:       assertEquals(40, Node.ORIGINALNAME_PROP);
1614:       
1615:       node3.setSourceFileForTesting("");
1616:       assertFalse(node1.isAdd());
1617:       assertFalse(node1.isBlock());
1618:       assertFalse(node1.isDo());
1619:       assertFalse(node1.isNew());
1620:       assertFalse(node1.isContinue());
1621:       assertFalse(node1.isCall());
1622:       assertFalse(node1.isVar());
1623:       assertFalse(node1.hasMoreThanOneChild());
1624:       assertFalse(node1.isWhile());
1625:       assertFalse(node1.isReturn());
1626:       assertFalse(node1.isLabel());
1627:       assertTrue(node1.isThrow());
1628:       assertFalse(node1.isParamList());
1629:       assertFalse(node1.isLabelName());
1630:       assertFalse(node1.isStringKey());
1631:       assertFalse(node1.isNumber());
1632:       assertFalse(node1.isDebugger());
1633:       assertFalse(node1.isFunction());
1634:       assertFalse(node1.isScript());
1635:       assertFalse(node1.isTry());
1636:       assertFalse(node1.hasOneChild());
1637:       assertFalse(node1.isFor());
1638:       assertFalse(node1.isCast());
1639:       assertFalse(node1.isWith());
1640:       assertFalse(node1.isCatch());
1641:       assertFalse(node1.isInstanceOf());
1642:       assertFalse(node1.isRegExp());
1643:       assertFalse(node1.isNE());
1644:       assertFalse(node1.isIf());
1645:       assertFalse(node1.isSetterDef());
1646:       assertFalse(node1.isIn());
1647:       assertFalse(node1.isInc());
1648:       assertFalse(node1.isSwitch());
1649:       assertFalse(node1.isCase());
1650:       assertFalse(node1.isFalse());
1651:       assertFalse(node1.isHook());
1652:       assertFalse(node1.isComma());
1653:       assertFalse(node1.isGetProp());
1654:       assertEquals(49, node1.getType());
1655:       assertFalse(node1.isThis());
1656:       assertFalse(node1.isObjectLit());
1657:       assertFalse(node1.isAnd());
1658:       assertFalse(node1.isString());
1659:       assertFalse(node1.isGetterDef());
1660:       assertFalse(node1.isNot());
1661:       assertFalse(node1.isVoid());
1662:       assertFalse(node1.isTrue());
1663:       assertFalse(node1.isExprResult());
1664:       assertFalse(node1.isDefaultCase());
1665:       assertFalse(node1.isArrayLit());
1666:       assertEquals(42, node1.getLineno());
1667:       assertFalse(node1.isGetElem());
1668:       assertEquals(10, node1.getCharno());
1669:       assertFalse(node1.isDec());
1670:       assertFalse(node1.hasChildren());
1671:       assertEquals(0, node1.getChildCount());
1672:       assertFalse(node1.isTypeOf());
1673:       assertFalse(node1.isAssign());
1674:       assertEquals(172042, node1.getSourcePosition());
1675:       assertFalse(node1.isAssignAdd());
1676:       assertFalse(node1.isBreak());
1677:       assertFalse(node1.isDelProp());
1678:       assertFalse(node1.isName());
1679:       assertFalse(node1.isEmpty());
1680:       assertFalse(node1.isNull());
1681:       assertFalse(node1.isOr());
1682:       assertFalse(node2.isName());
1683:       assertFalse(node2.isStringKey());
1684:       assertFalse(node2.isNull());
1685:       assertFalse(node2.isVar());
1686:       assertFalse(node2.isBlock());
1687:       assertFalse(node2.isSetterDef());
1688:       assertFalse(node2.isDo());
1689:       assertFalse(node2.isNew());
1690:       assertFalse(node2.isAdd());
1691:       assertFalse(node2.isContinue());
1692:       assertFalse(node2.isAssignAdd());
1693:       assertFalse(node2.isLabel());
1694:       assertFalse(node2.isParamList());
1695:       assertFalse(node2.isFunction());
1696:       assertFalse(node2.isLabelName());
1697:       assertFalse(node2.isCast());
1698:       assertFalse(node2.isArrayLit());
1699:       assertFalse(node2.isFor());
1700:       assertFalse(node2.isNumber());
1701:       assertFalse(node2.isGetterDef());
1702:       assertFalse(node2.isTry());
1703:       assertFalse(node2.isScript());
1704:       assertFalse(node2.isCatch());
1705:       assertFalse(node2.hasMoreThanOneChild());
1706:       assertFalse(node2.isIn());
1707:       assertEquals(1, node2.getChildCount());
1708:       assertFalse(node2.isNE());
1709:       assertEquals((-1117), node2.getType());
1710:       assertFalse(node2.isThis());
1711:       assertFalse(node2.isIf());
1712:       assertFalse(node2.isRegExp());
1713:       assertTrue(node2.hasChildren());
1714:       assertFalse(node2.isWith());
1715:       assertFalse(node2.isInstanceOf());
1716:       assertFalse(node2.isFalse());
1717:       assertFalse(node2.isThrow());
1718:       assertFalse(node2.isHook());
1719:       assertFalse(node2.isInc());
1720:       assertFalse(node2.isString());
1721:       assertFalse(node2.isCase());
1722:       assertFalse(node2.isGetProp());
1723:       assertFalse(node2.isAnd());
1724:       assertFalse(node2.isObjectLit());
1725:       assertFalse(node2.isNot());
1726:       assertFalse(node2.isSwitch());
1727:       assertFalse(node2.isAssign());
1728:       assertTrue(node2.hasOneChild());
1729:       assertFalse(node2.isTrue());
1730:       assertEquals(42, node2.getLineno());
1731:       assertFalse(node2.isDebugger());
1732:       assertFalse(node2.isDefaultCase());
1733:       assertEquals(172042, node2.getSourcePosition());
1734:       assertFalse(node2.isEmpty());
1735:       assertFalse(node2.isReturn());
1736:       assertFalse(node2.isOr());
1737:       assertFalse(node2.isWhile());
1738:       assertFalse(node2.isComma());
1739:       assertFalse(node2.isDec());
1740:       assertFalse(node2.isDelProp());
1741:       assertFalse(node2.isVoid());
1742:       assertFalse(node2.isTypeOf());
1743:       assertFalse(node2.isBreak());
1744:       assertEquals(10, node2.getCharno());
1745:       assertFalse(node2.isGetElem());
1746:       assertFalse(node2.isCall());
1747:       assertFalse(node2.isExprResult());
1748:       assertFalse(node3.isDo());
1749:       assertFalse(node3.isNew());
1750:       assertFalse(node3.isAdd());
1751:       assertFalse(node3.isContinue());
1752:       assertFalse(node3.isVar());
1753:       assertFalse(node3.hasMoreThanOneChild());
1754:       assertFalse(node3.isLabel());
1755:       assertFalse(node3.isBlock());
1756:       assertFalse(node3.isReturn());
1757:       assertFalse(node3.isAssignAdd());
1758:       assertFalse(node3.isWhile());
1759:       assertTrue(node3.isThrow());
1760:       assertFalse(node3.isNumber());
1761:       assertFalse(node3.isLabelName());
1762:       assertFalse(node3.isCast());
1763:       assertFalse(node3.isParamList());
1764:       assertFalse(node3.isStringKey());
1765:       assertFalse(node3.isDefaultCase());
1766:       assertFalse(node3.isDebugger());
1767:       assertFalse(node3.isVoid());
1768:       assertFalse(node3.isNot());
1769:       assertFalse(node3.isExprResult());
1770:       assertEquals(0, node3.getChildCount());
1771:       assertEquals(42, node3.getLineno());
1772:       assertFalse(node3.isNull());
1773:       assertFalse(node3.isTypeOf());
1774:       assertFalse(node3.isBreak());
1775:       assertFalse(node3.hasChildren());
1776:       assertFalse(node3.isDelProp());
1777:       assertFalse(node3.isComma());
1778:       assertFalse(node3.isDec());
1779:       assertFalse(node3.isAssign());
1780:       assertFalse(node3.isEmpty());
1781:       assertFalse(node3.isGetElem());
1782:       assertEquals(172042, node3.getSourcePosition());
1783:       assertFalse(node3.isCall());
1784:       assertEquals(10, node3.getCharno());
1785:       assertFalse(node3.isOr());
1786:       assertFalse(node3.isName());
1787:       assertFalse(node3.isTrue());
1788:       assertFalse(node3.isSwitch());
1789:       assertFalse(node3.isCase());
1790:       assertFalse(node3.isInc());
1791:       assertFalse(node3.isString());
1792:       assertFalse(node3.isHook());
1793:       assertFalse(node3.isGetterDef());
1794:       assertFalse(node3.isFalse());
1795:       assertFalse(node3.isGetProp());
1796:       assertEquals(49, node3.getType());
1797:       assertFalse(node3.isArrayLit());
1798:       assertFalse(node3.isObjectLit());
1799:       assertFalse(node3.isAnd());
1800:       assertFalse(node3.isRegExp());
1801:       assertFalse(node3.isScript());
1802:       assertFalse(node3.isFunction());
1803:       assertFalse(node3.isWith());
1804:       assertFalse(node3.isCatch());
1805:       assertFalse(node3.hasOneChild());
1806:       assertFalse(node3.isTry());
1807:       assertFalse(node3.isFor());
1808:       assertFalse(node3.isIf());
1809:       assertFalse(node3.isSetterDef());
1810:       assertFalse(node3.isThis());
1811:       assertFalse(node3.isInstanceOf());
1812:       assertFalse(node3.isIn());
1813:       assertFalse(node3.isNE());
1814:       assertNotSame(node1, node4);
1815:       assertSame(node1, node3);
1816:       assertNotSame(node2, node0);
1817:       assertNotSame(node3, node4);
1818:       assertSame(node3, node1);
1819:       assertEquals(1, nodeArray0.length);
1820:       assertFalse(node1.equals((Object)node2));
1821:       assertFalse(node1.equals((Object)node4));
1822:       assertFalse(node1.equals((Object)node0));
1823:       assertFalse(node2.equals((Object)node3));
1824:       assertFalse(node2.equals((Object)node0));
1825:       assertFalse(node2.equals((Object)node1));
1826:       assertFalse(node2.equals((Object)node4));
1827:       assertFalse(node3.equals((Object)node4));
1828:       assertFalse(node3.equals((Object)node2));
1829:       assertFalse(node3.equals((Object)node0));
1830:       assertEquals(8, Node.FLAG_NO_THROWS);
1831:       assertEquals(50, Node.FREE_CALL);
1832:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1833:       assertEquals(57, Node.REFLECTED_OBJECT);
1834:       assertEquals(52, Node.LENGTH);
1835:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1836:       assertEquals(55, Node.INFERRED_FUNCTION);
1837:       assertEquals(39, Node.EMPTY_BLOCK);
1838:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1839:       assertEquals(43, Node.IS_CONSTANT_NAME);
1840:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1841:       assertEquals(57, Node.LAST_PROP);
1842:       assertEquals(30, Node.VAR_ARGS_NAME);
1843:       assertEquals(54, Node.SLASH_V);
1844:       assertEquals(40, Node.ORIGINALNAME_PROP);
1845:       assertEquals(56, Node.CHANGE_TIME);
1846:       assertEquals(47, Node.IS_DISPATCHER);
1847:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1848:       assertEquals(2, Node.POST_FLAG);
1849:       assertEquals(46, Node.IS_NAMESPACE);
1850:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1851:       assertEquals(32, Node.INCRDECR_PROP);
1852:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1853:       assertEquals(1, Node.DECR_FLAG);
1854:       assertEquals(29, Node.JSDOC_INFO_PROP);
1855:       assertEquals(53, Node.INPUT_ID);
1856:       assertEquals(36, Node.QUOTED_PROP);
1857:       assertEquals(49, Node.DIRECT_EVAL);
1858:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1859:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1860:       assertEquals(12, Node.COLUMN_BITS);
1861:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1862:       assertEquals(4095, Node.COLUMN_MASK);
1863:       assertEquals(48, Node.DIRECTIVES);
1864:       assertEquals(37, Node.OPT_ARG_NAME);
1865:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1866:       assertEquals(8, Node.FLAG_NO_THROWS);
1867:       assertEquals(39, Node.EMPTY_BLOCK);
1868:       assertEquals(55, Node.INFERRED_FUNCTION);
1869:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1870:       assertEquals(4095, Node.COLUMN_MASK);
1871:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1872:       assertEquals(50, Node.FREE_CALL);
1873:       assertEquals(36, Node.QUOTED_PROP);
1874:       assertEquals(48, Node.DIRECTIVES);
1875:       assertEquals(43, Node.IS_CONSTANT_NAME);
1876:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1877:       assertEquals(53, Node.INPUT_ID);
1878:       assertEquals(57, Node.REFLECTED_OBJECT);
1879:       assertEquals(40, Node.ORIGINALNAME_PROP);
1880:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1881:       assertEquals(52, Node.LENGTH);
1882:       assertEquals(29, Node.JSDOC_INFO_PROP);
1883:       assertEquals(30, Node.VAR_ARGS_NAME);
1884:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1885:       assertEquals(47, Node.IS_DISPATCHER);
1886:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1887:       assertEquals(57, Node.LAST_PROP);
1888:       assertEquals(32, Node.INCRDECR_PROP);
1889:       assertEquals(46, Node.IS_NAMESPACE);
1890:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1891:       assertEquals(2, Node.POST_FLAG);
1892:       assertEquals(49, Node.DIRECT_EVAL);
1893:       assertEquals(37, Node.OPT_ARG_NAME);
1894:       assertEquals(54, Node.SLASH_V);
1895:       assertEquals(56, Node.CHANGE_TIME);
1896:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1897:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1898:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1899:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1900:       assertEquals(12, Node.COLUMN_BITS);
1901:       assertEquals(1, Node.DECR_FLAG);
1902:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1903:       assertEquals(50, Node.FREE_CALL);
1904:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1905:       assertEquals(40, Node.ORIGINALNAME_PROP);
1906:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1907:       assertEquals(48, Node.DIRECTIVES);
1908:       assertEquals(54, Node.SLASH_V);
1909:       assertEquals(39, Node.EMPTY_BLOCK);
1910:       assertEquals(57, Node.REFLECTED_OBJECT);
1911:       assertEquals(55, Node.INFERRED_FUNCTION);
1912:       assertEquals(52, Node.LENGTH);
1913:       assertEquals(8, Node.FLAG_NO_THROWS);
1914:       assertEquals(30, Node.VAR_ARGS_NAME);
1915:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1916:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1917:       assertEquals(43, Node.IS_CONSTANT_NAME);
1918:       assertEquals(57, Node.LAST_PROP);
1919:       assertEquals(2, Node.POST_FLAG);
1920:       assertEquals(29, Node.JSDOC_INFO_PROP);
1921:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1922:       assertEquals(47, Node.IS_DISPATCHER);
1923:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1924:       assertEquals(37, Node.OPT_ARG_NAME);
1925:       assertEquals(56, Node.CHANGE_TIME);
1926:       assertEquals(46, Node.IS_NAMESPACE);
1927:       assertEquals(53, Node.INPUT_ID);
1928:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1929:       assertEquals(36, Node.QUOTED_PROP);
1930:       assertEquals(49, Node.DIRECT_EVAL);
1931:       assertEquals(1, Node.DECR_FLAG);
1932:       assertEquals(12, Node.COLUMN_BITS);
1933:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1934:       assertEquals(32, Node.INCRDECR_PROP);
1935:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1936:       assertEquals(4095, Node.COLUMN_MASK);
1937:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1938:       
1939:       node3.addChildToFront(node4);
1940:       assertFalse(node1.isAdd());
1941:       assertFalse(node1.isBlock());
1942:       assertFalse(node1.isDo());
1943:       assertFalse(node1.isNew());
1944:       assertFalse(node1.isContinue());
1945:       assertFalse(node1.isCall());
1946:       assertFalse(node1.isVar());
1947:       assertFalse(node1.hasMoreThanOneChild());
1948:       assertFalse(node1.isWhile());
1949:       assertFalse(node1.isReturn());
1950:       assertFalse(node1.isLabel());
1951:       assertTrue(node1.isThrow());
1952:       assertFalse(node1.isParamList());
1953:       assertFalse(node1.isLabelName());
1954:       assertFalse(node1.isStringKey());
1955:       assertFalse(node1.isNumber());
1956:       assertFalse(node1.isDebugger());
1957:       assertFalse(node1.isFunction());
1958:       assertFalse(node1.isScript());
1959:       assertFalse(node1.isTry());
1960:       assertFalse(node1.isFor());
1961:       assertFalse(node1.isCast());
1962:       assertFalse(node1.isWith());
1963:       assertFalse(node1.isCatch());
1964:       assertFalse(node1.isInstanceOf());
1965:       assertFalse(node1.isRegExp());
1966:       assertFalse(node1.isNE());
1967:       assertTrue(node1.hasChildren());
1968:       assertFalse(node1.isIf());
1969:       assertFalse(node1.isSetterDef());
1970:       assertFalse(node1.isIn());
1971:       assertFalse(node1.isInc());
1972:       assertFalse(node1.isSwitch());
1973:       assertFalse(node1.isCase());
1974:       assertFalse(node1.isFalse());
1975:       assertFalse(node1.isHook());
1976:       assertFalse(node1.isComma());
1977:       assertEquals(1, node1.getChildCount());
1978:       assertFalse(node1.isGetProp());
1979:       assertEquals(49, node1.getType());
1980:       assertFalse(node1.isThis());
1981:       assertFalse(node1.isObjectLit());
1982:       assertFalse(node1.isAnd());
1983:       assertFalse(node1.isString());
1984:       assertFalse(node1.isGetterDef());
1985:       assertFalse(node1.isNot());
1986:       assertFalse(node1.isVoid());
1987:       assertFalse(node1.isTrue());
1988:       assertFalse(node1.isExprResult());
1989:       assertFalse(node1.isDefaultCase());
1990:       assertFalse(node1.isArrayLit());
1991:       assertEquals(42, node1.getLineno());
1992:       assertFalse(node1.isGetElem());
1993:       assertEquals(10, node1.getCharno());
1994:       assertFalse(node1.isDec());
1995:       assertFalse(node1.isTypeOf());
1996:       assertTrue(node1.hasOneChild());
1997:       assertFalse(node1.isAssign());
1998:       assertEquals(172042, node1.getSourcePosition());
1999:       assertFalse(node1.isAssignAdd());
2000:       assertFalse(node1.isBreak());
2001:       assertFalse(node1.isDelProp());
2002:       assertFalse(node1.isName());
2003:       assertFalse(node1.isEmpty());
2004:       assertFalse(node1.isNull());
2005:       assertFalse(node1.isOr());
2006:       assertFalse(node2.isName());
2007:       assertFalse(node2.isStringKey());
2008:       assertFalse(node2.isNull());
2009:       assertFalse(node2.isVar());
2010:       assertFalse(node2.isBlock());
2011:       assertFalse(node2.isSetterDef());
2012:       assertFalse(node2.isDo());
2013:       assertFalse(node2.isNew());
2014:       assertFalse(node2.isAdd());
2015:       assertFalse(node2.isContinue());
2016:       assertFalse(node2.isAssignAdd());
2017:       assertFalse(node2.isLabel());
2018:       assertFalse(node2.isParamList());
2019:       assertFalse(node2.isFunction());
2020:       assertFalse(node2.isLabelName());
2021:       assertFalse(node2.isCast());
2022:       assertFalse(node2.isArrayLit());
2023:       assertFalse(node2.isFor());
2024:       assertFalse(node2.isNumber());
2025:       assertFalse(node2.isGetterDef());
2026:       assertFalse(node2.isTry());
2027:       assertFalse(node2.isScript());
2028:       assertFalse(node2.isCatch());
2029:       assertFalse(node2.hasMoreThanOneChild());
2030:       assertFalse(node2.isIn());
2031:       assertEquals(1, node2.getChildCount());
2032:       assertFalse(node2.isNE());
2033:       assertEquals((-1117), node2.getType());
2034:       assertFalse(node2.isThis());
2035:       assertFalse(node2.isIf());
2036:       assertFalse(node2.isRegExp());
2037:       assertTrue(node2.hasChildren());
2038:       assertFalse(node2.isWith());
2039:       assertFalse(node2.isInstanceOf());
2040:       assertFalse(node2.isFalse());
2041:       assertFalse(node2.isThrow());
2042:       assertFalse(node2.isHook());
2043:       assertFalse(node2.isInc());
2044:       assertFalse(node2.isString());
2045:       assertFalse(node2.isCase());
2046:       assertFalse(node2.isGetProp());
2047:       assertFalse(node2.isAnd());
2048:       assertFalse(node2.isObjectLit());
2049:       assertFalse(node2.isNot());
2050:       assertFalse(node2.isSwitch());
2051:       assertFalse(node2.isAssign());
2052:       assertTrue(node2.hasOneChild());
2053:       assertFalse(node2.isTrue());
2054:       assertEquals(42, node2.getLineno());
2055:       assertFalse(node2.isDebugger());
2056:       assertFalse(node2.isDefaultCase());
2057:       assertEquals(172042, node2.getSourcePosition());
2058:       assertFalse(node2.isEmpty());
2059:       assertFalse(node2.isReturn());
2060:       assertFalse(node2.isOr());
2061:       assertFalse(node2.isWhile());
2062:       assertFalse(node2.isComma());
2063:       assertFalse(node2.isDec());
2064:       assertFalse(node2.isDelProp());
2065:       assertFalse(node2.isVoid());
2066:       assertFalse(node2.isTypeOf());
2067:       assertFalse(node2.isBreak());
2068:       assertEquals(10, node2.getCharno());
2069:       assertFalse(node2.isGetElem());
2070:       assertFalse(node2.isCall());
2071:       assertFalse(node2.isExprResult());
2072:       assertFalse(node3.isDo());
2073:       assertFalse(node3.isNew());
2074:       assertFalse(node3.isAdd());
2075:       assertFalse(node3.isContinue());
2076:       assertFalse(node3.isVar());
2077:       assertFalse(node3.hasMoreThanOneChild());
2078:       assertFalse(node3.isLabel());
2079:       assertFalse(node3.isBlock());
2080:       assertFalse(node3.isReturn());
2081:       assertFalse(node3.isAssignAdd());
2082:       assertFalse(node3.isWhile());
2083:       assertTrue(node3.isThrow());
2084:       assertFalse(node3.isNumber());
2085:       assertFalse(node3.isLabelName());
2086:       assertFalse(node3.isCast());
2087:       assertFalse(node3.isParamList());
2088:       assertFalse(node3.isStringKey());
2089:       assertFalse(node3.isDefaultCase());
2090:       assertFalse(node3.isDebugger());
2091:       assertFalse(node3.isVoid());
2092:       assertFalse(node3.isNot());
2093:       assertFalse(node3.isExprResult());
2094:       assertTrue(node3.hasOneChild());
2095:       assertEquals(42, node3.getLineno());
2096:       assertFalse(node3.isNull());
2097:       assertFalse(node3.isTypeOf());
2098:       assertFalse(node3.isBreak());
2099:       assertFalse(node3.isDelProp());
2100:       assertFalse(node3.isComma());
2101:       assertFalse(node3.isDec());
2102:       assertFalse(node3.isAssign());
2103:       assertFalse(node3.isEmpty());
2104:       assertFalse(node3.isGetElem());
2105:       assertEquals(172042, node3.getSourcePosition());
2106:       assertFalse(node3.isCall());
2107:       assertEquals(10, node3.getCharno());
2108:       assertFalse(node3.isOr());
2109:       assertFalse(node3.isName());
2110:       assertFalse(node3.isTrue());
2111:       assertFalse(node3.isSwitch());
2112:       assertFalse(node3.isCase());
2113:       assertFalse(node3.isInc());
2114:       assertFalse(node3.isString());
2115:       assertFalse(node3.isHook());
2116:       assertEquals(1, node3.getChildCount());
2117:       assertFalse(node3.isGetterDef());
2118:       assertFalse(node3.isFalse());
2119:       assertFalse(node3.isGetProp());
2120:       assertEquals(49, node3.getType());
2121:       assertFalse(node3.isArrayLit());
2122:       assertFalse(node3.isObjectLit());
2123:       assertFalse(node3.isAnd());
2124:       assertFalse(node3.isRegExp());
2125:       assertFalse(node3.isScript());
2126:       assertFalse(node3.isFunction());
2127:       assertFalse(node3.isWith());
2128:       assertFalse(node3.isCatch());
2129:       assertFalse(node3.isTry());
2130:       assertFalse(node3.isFor());
2131:       assertFalse(node3.isIf());
2132:       assertFalse(node3.isSetterDef());
2133:       assertFalse(node3.isThis());
2134:       assertTrue(node3.hasChildren());
2135:       assertFalse(node3.isInstanceOf());
2136:       assertFalse(node3.isIn());
2137:       assertFalse(node3.isNE());
2138:       assertTrue(node4.isGetterDef());
2139:       assertFalse(node4.isLabel());
2140:       assertFalse(node4.isReturn());
2141:       assertFalse(node4.isLabelName());
2142:       assertFalse(node4.isAssignAdd());
2143:       assertFalse(node4.isContinue());
2144:       assertFalse(node4.isCast());
2145:       assertFalse(node4.isGetElem());
2146:       assertFalse(node4.hasChildren());
2147:       assertFalse(node4.isDec());
2148:       assertFalse(node4.isTypeOf());
2149:       assertFalse(node4.isAssign());
2150:       assertFalse(node4.hasMoreThanOneChild());
2151:       assertFalse(node4.isExprResult());
2152:       assertFalse(node4.isNew());
2153:       assertFalse(node4.isAdd());
2154:       assertFalse(node4.isDo());
2155:       assertFalse(node4.isOr());
2156:       assertEquals(147, node4.getType());
2157:       assertFalse(node4.isParamList());
2158:       assertFalse(node4.isThis());
2159:       assertFalse(node4.isCatch());
2160:       assertFalse(node4.isVar());
2161:       assertFalse(node4.isHook());
2162:       assertEquals(0, node4.getChildCount());
2163:       assertFalse(node4.isInstanceOf());
2164:       assertFalse(node4.isRegExp());
2165:       assertFalse(node4.isWith());
2166:       assertFalse(node4.isScript());
2167:       assertFalse(node4.isBlock());
2168:       assertFalse(node4.hasOneChild());
2169:       assertFalse(node4.isTry());
2170:       assertFalse(node4.isSwitch());
2171:       assertFalse(node4.isStringKey());
2172:       assertEquals(57, node4.getCharno());
2173:       assertFalse(node4.isCase());
2174:       assertFalse(node4.isNumber());
2175:       assertFalse(node4.isNE());
2176:       assertFalse(node4.isIf());
2177:       assertFalse(node4.isDelProp());
2178:       assertFalse(node4.isArrayLit());
2179:       assertFalse(node4.isFor());
2180:       assertFalse(node4.isTrue());
2181:       assertFalse(node4.isVoid());
2182:       assertFalse(node4.isInc());
2183:       assertFalse(node4.isDefaultCase());
2184:       assertFalse(node4.isEmpty());
2185:       assertFalse(node4.isIn());
2186:       assertFalse(node4.isComma());
2187:       assertFalse(node4.isNull());
2188:       assertFalse(node4.isGetProp());
2189:       assertEquals(204857, node4.getSourcePosition());
2190:       assertFalse(node4.isSetterDef());
2191:       assertFalse(node4.isBreak());
2192:       assertFalse(node4.isName());
2193:       assertFalse(node4.isCall());
2194:       assertFalse(node4.isThrow());
2195:       assertFalse(node4.isFunction());
2196:       assertFalse(node4.isFalse());
2197:       assertFalse(node4.isDebugger());
2198:       assertEquals(50, node4.getLineno());
2199:       assertFalse(node4.isWhile());
2200:       assertFalse(node4.isObjectLit());
2201:       assertFalse(node4.isAnd());
2202:       assertFalse(node4.isString());
2203:       assertFalse(node4.isNot());
2204:       assertNotSame(node1, node4);
2205:       assertSame(node1, node3);
2206:       assertNotSame(node2, node0);
2207:       assertNotSame(node3, node4);
2208:       assertSame(node3, node1);
2209:       assertNotSame(node4, node3);
2210:       assertNotSame(node4, node1);
2211:       assertEquals(1, nodeArray0.length);
2212:       assertFalse(node1.equals((Object)node2));
2213:       assertFalse(node1.equals((Object)node4));
2214:       assertFalse(node1.equals((Object)node0));
2215:       assertFalse(node2.equals((Object)node3));
2216:       assertFalse(node2.equals((Object)node0));
2217:       assertFalse(node2.equals((Object)node1));
2218:       assertFalse(node2.equals((Object)node4));
2219:       assertFalse(node3.equals((Object)node4));
2220:       assertFalse(node3.equals((Object)node2));
2221:       assertFalse(node3.equals((Object)node0));
2222:       assertFalse(node4.equals((Object)node3));
2223:       assertFalse(node4.equals((Object)node0));
2224:       assertFalse(node4.equals((Object)node2));
2225:       assertFalse(node4.equals((Object)node1));
2226:       assertEquals(8, Node.FLAG_NO_THROWS);
2227:       assertEquals(50, Node.FREE_CALL);
2228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2229:       assertEquals(57, Node.REFLECTED_OBJECT);
2230:       assertEquals(52, Node.LENGTH);
2231:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2232:       assertEquals(55, Node.INFERRED_FUNCTION);
2233:       assertEquals(39, Node.EMPTY_BLOCK);
2234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2235:       assertEquals(43, Node.IS_CONSTANT_NAME);
2236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2237:       assertEquals(57, Node.LAST_PROP);
2238:       assertEquals(30, Node.VAR_ARGS_NAME);
2239:       assertEquals(54, Node.SLASH_V);
2240:       assertEquals(40, Node.ORIGINALNAME_PROP);
2241:       assertEquals(56, Node.CHANGE_TIME);
2242:       assertEquals(47, Node.IS_DISPATCHER);
2243:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2244:       assertEquals(2, Node.POST_FLAG);
2245:       assertEquals(46, Node.IS_NAMESPACE);
2246:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2247:       assertEquals(32, Node.INCRDECR_PROP);
2248:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2249:       assertEquals(1, Node.DECR_FLAG);
2250:       assertEquals(29, Node.JSDOC_INFO_PROP);
2251:       assertEquals(53, Node.INPUT_ID);
2252:       assertEquals(36, Node.QUOTED_PROP);
2253:       assertEquals(49, Node.DIRECT_EVAL);
2254:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2255:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2256:       assertEquals(12, Node.COLUMN_BITS);
2257:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2258:       assertEquals(4095, Node.COLUMN_MASK);
2259:       assertEquals(48, Node.DIRECTIVES);
2260:       assertEquals(37, Node.OPT_ARG_NAME);
2261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2262:       assertEquals(8, Node.FLAG_NO_THROWS);
2263:       assertEquals(39, Node.EMPTY_BLOCK);
2264:       assertEquals(55, Node.INFERRED_FUNCTION);
2265:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2266:       assertEquals(4095, Node.COLUMN_MASK);
2267:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2268:       assertEquals(50, Node.FREE_CALL);
2269:       assertEquals(36, Node.QUOTED_PROP);
2270:       assertEquals(48, Node.DIRECTIVES);
2271:       assertEquals(43, Node.IS_CONSTANT_NAME);
2272:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2273:       assertEquals(53, Node.INPUT_ID);
2274:       assertEquals(57, Node.REFLECTED_OBJECT);
2275:       assertEquals(40, Node.ORIGINALNAME_PROP);
2276:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2277:       assertEquals(52, Node.LENGTH);
2278:       assertEquals(29, Node.JSDOC_INFO_PROP);
2279:       assertEquals(30, Node.VAR_ARGS_NAME);
2280:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2281:       assertEquals(47, Node.IS_DISPATCHER);
2282:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2283:       assertEquals(57, Node.LAST_PROP);
2284:       assertEquals(32, Node.INCRDECR_PROP);
2285:       assertEquals(46, Node.IS_NAMESPACE);
2286:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2287:       assertEquals(2, Node.POST_FLAG);
2288:       assertEquals(49, Node.DIRECT_EVAL);
2289:       assertEquals(37, Node.OPT_ARG_NAME);
2290:       assertEquals(54, Node.SLASH_V);
2291:       assertEquals(56, Node.CHANGE_TIME);
2292:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2293:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2294:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2295:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2296:       assertEquals(12, Node.COLUMN_BITS);
2297:       assertEquals(1, Node.DECR_FLAG);
2298:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2299:       assertEquals(50, Node.FREE_CALL);
2300:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2301:       assertEquals(40, Node.ORIGINALNAME_PROP);
2302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2303:       assertEquals(48, Node.DIRECTIVES);
2304:       assertEquals(54, Node.SLASH_V);
2305:       assertEquals(39, Node.EMPTY_BLOCK);
2306:       assertEquals(57, Node.REFLECTED_OBJECT);
2307:       assertEquals(55, Node.INFERRED_FUNCTION);
2308:       assertEquals(52, Node.LENGTH);
2309:       assertEquals(8, Node.FLAG_NO_THROWS);
2310:       assertEquals(30, Node.VAR_ARGS_NAME);
2311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2312:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2313:       assertEquals(43, Node.IS_CONSTANT_NAME);
2314:       assertEquals(57, Node.LAST_PROP);
2315:       assertEquals(2, Node.POST_FLAG);
2316:       assertEquals(29, Node.JSDOC_INFO_PROP);
2317:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2318:       assertEquals(47, Node.IS_DISPATCHER);
2319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2320:       assertEquals(37, Node.OPT_ARG_NAME);
2321:       assertEquals(56, Node.CHANGE_TIME);
2322:       assertEquals(46, Node.IS_NAMESPACE);
2323:       assertEquals(53, Node.INPUT_ID);
2324:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2325:       assertEquals(36, Node.QUOTED_PROP);
2326:       assertEquals(49, Node.DIRECT_EVAL);
2327:       assertEquals(1, Node.DECR_FLAG);
2328:       assertEquals(12, Node.COLUMN_BITS);
2329:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2330:       assertEquals(32, Node.INCRDECR_PROP);
2331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2332:       assertEquals(4095, Node.COLUMN_MASK);
2333:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2334:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2335:       assertEquals(57, Node.LAST_PROP);
2336:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2337:       assertEquals(54, Node.SLASH_V);
2338:       assertEquals(30, Node.VAR_ARGS_NAME);
2339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2340:       assertEquals(12, Node.COLUMN_BITS);
2341:       assertEquals(32, Node.INCRDECR_PROP);
2342:       assertEquals(52, Node.LENGTH);
2343:       assertEquals(1, Node.DECR_FLAG);
2344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2345:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2346:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2347:       assertEquals(29, Node.JSDOC_INFO_PROP);
2348:       assertEquals(56, Node.CHANGE_TIME);
2349:       assertEquals(8, Node.FLAG_NO_THROWS);
2350:       assertEquals(57, Node.REFLECTED_OBJECT);
2351:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2352:       assertEquals(4095, Node.COLUMN_MASK);
2353:       assertEquals(48, Node.DIRECTIVES);
2354:       assertEquals(49, Node.DIRECT_EVAL);
2355:       assertEquals(37, Node.OPT_ARG_NAME);
2356:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2357:       assertEquals(43, Node.IS_CONSTANT_NAME);
2358:       assertEquals(36, Node.QUOTED_PROP);
2359:       assertEquals(55, Node.INFERRED_FUNCTION);
2360:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2361:       assertEquals(53, Node.INPUT_ID);
2362:       assertEquals(39, Node.EMPTY_BLOCK);
2363:       assertEquals(47, Node.IS_DISPATCHER);
2364:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2365:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2366:       assertEquals(2, Node.POST_FLAG);
2367:       assertEquals(50, Node.FREE_CALL);
2368:       assertEquals(46, Node.IS_NAMESPACE);
2369:       assertEquals(40, Node.ORIGINALNAME_PROP);
2370:   }
2371: }
RegularFileObject[/tmp/EvoSuite_42_1629223327415/com/google/javascript/rhino/Node_42_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:07 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_42_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_42_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.common.collect.ImmutableList$SerializedForm",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_42_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.javascript.rhino.Token",
268:       "com.google.common.base.Preconditions",
269:       "com.google.javascript.rhino.SimpleErrorReporter",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.JSTypeNative",
301:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
302:       "com.google.javascript.rhino.jstype.JSType$1",
303:       "com.google.javascript.rhino.jstype.JSType",
304:       "com.google.javascript.rhino.jstype.ObjectType",
305:       "com.google.javascript.rhino.jstype.ProxyObjectType",
306:       "com.google.javascript.rhino.jstype.TemplateType",
307:       "com.google.javascript.rhino.jstype.ValueType",
308:       "com.google.javascript.rhino.jstype.BooleanType",
309:       "com.google.javascript.rhino.jstype.NullType",
310:       "com.google.javascript.rhino.jstype.NumberType",
311:       "com.google.javascript.rhino.jstype.StringType",
312:       "com.google.javascript.rhino.jstype.UnknownType",
313:       "com.google.javascript.rhino.jstype.VoidType",
314:       "com.google.javascript.rhino.jstype.AllType",
315:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
316:       "com.google.common.collect.ImmutableMap",
317:       "com.google.common.collect.ImmutableBiMap",
318:       "com.google.common.collect.EmptyImmutableBiMap",
319:       "com.google.javascript.rhino.jstype.PropertyMap$1",
320:       "com.google.javascript.rhino.jstype.PropertyMap",
321:       "com.google.javascript.rhino.jstype.FunctionType",
322:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
346:       "com.google.common.collect.Sets",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.javascript.rhino.JSDocInfo$Visibility",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.common.collect.Platform",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.javascript.rhino.Node$AncestorIterable$1",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.JSTypeExpression",
357:       "com.google.common.collect.ImmutableSet",
358:       "com.google.common.collect.EmptyImmutableSet",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.jstype.TernaryValue",
362:       "com.google.common.collect.Iterables",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.ImmutableList$1"
365:     );
366:   }
367: }

[MASTER] 18:02:08.271 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertNotNull(node0);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(iterable0.contains(node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
assertNotNull(node_AncestorIterable0);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node1 = Node.newString(49, "");
assertNotNull(node1);
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals(49, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.equals((Object)node0));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals(49, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean0 = node0.wasEmptyNode();
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeTypeAwareEqualsImpl(node0);
assertNotNull(node_NodeMismatch1);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals(0, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals(49, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertNotSame(node_NodeMismatch1, node_NodeMismatch0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Node[] nodeArray0 = new Node[1];
nodeArray0[0] = node1;
Node node2 = new Node((-1117), nodeArray0, 42, 10);
assertNotNull(node2);
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertEquals((-1117), node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertTrue(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isTrue());
assertEquals(42, node2.getLineno());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertEquals(172042, node2.getSourcePosition());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertEquals(10, node2.getCharno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertEquals(1, nodeArray0.length);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);

Node.NodeMismatch node_NodeMismatch2 = node1.checkTreeTypeAwareEqualsImpl(node1);
assertNull(node_NodeMismatch2);
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals(49, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
assertNotNull(node3);
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals(49, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertEquals(42, node1.getLineno());
assertFalse(node1.isGetElem());
assertEquals(10, node1.getCharno());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertEquals(172042, node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertEquals((-1117), node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertTrue(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isTrue());
assertEquals(42, node2.getLineno());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertEquals(172042, node2.getSourcePosition());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertEquals(10, node2.getCharno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isVar());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertTrue(node3.isThrow());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isCast());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isNot());
assertFalse(node3.isExprResult());
assertEquals(0, node3.getChildCount());
assertEquals(42, node3.getLineno());
assertFalse(node3.isNull());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertEquals(172042, node3.getSourcePosition());
assertFalse(node3.isCall());
assertEquals(10, node3.getCharno());
assertFalse(node3.isOr());
assertFalse(node3.isName());
assertFalse(node3.isTrue());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isHook());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertEquals(49, node3.getType());
assertFalse(node3.isArrayLit());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isRegExp());
assertFalse(node3.isScript());
assertFalse(node3.isFunction());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertSame(node1, node3);
assertNotSame(node2, node0);
assertSame(node3, node1);
assertEquals(1, nodeArray0.length);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);

Node node4 = Node.newString(147, "", 50, 57);
assertNotNull(node4);
assertTrue(node4.isGetterDef());
assertFalse(node4.isLabel());
assertFalse(node4.isReturn());
assertFalse(node4.isLabelName());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isContinue());
assertFalse(node4.isCast());
assertFalse(node4.isGetElem());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isExprResult());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.isOr());
assertEquals(147, node4.getType());
assertFalse(node4.isParamList());
assertFalse(node4.isThis());
assertFalse(node4.isCatch());
assertFalse(node4.isVar());
assertFalse(node4.isHook());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isRegExp());
assertFalse(node4.isWith());
assertFalse(node4.isScript());
assertFalse(node4.isBlock());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isSwitch());
assertFalse(node4.isStringKey());
assertEquals(57, node4.getCharno());
assertFalse(node4.isCase());
assertFalse(node4.isNumber());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFor());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isInc());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertFalse(node4.isComma());
assertFalse(node4.isNull());
assertFalse(node4.isGetProp());
assertEquals(204857, node4.getSourcePosition());
assertFalse(node4.isSetterDef());
assertFalse(node4.isBreak());
assertFalse(node4.isName());
assertFalse(node4.isCall());
assertFalse(node4.isThrow());
assertFalse(node4.isFunction());
assertFalse(node4.isFalse());
assertFalse(node4.isDebugger());
assertEquals(50, node4.getLineno());
assertFalse(node4.isWhile());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isString());
assertFalse(node4.isNot());
assertNotSame(node4, node3);
assertNotSame(node4, node1);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

node3.setSourceFileForTesting("");
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertEquals(49, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertEquals(42, node1.getLineno());
assertFalse(node1.isGetElem());
assertEquals(10, node1.getCharno());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertEquals(172042, node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertEquals((-1117), node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertTrue(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isTrue());
assertEquals(42, node2.getLineno());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertEquals(172042, node2.getSourcePosition());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertEquals(10, node2.getCharno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isVar());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertTrue(node3.isThrow());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isCast());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isNot());
assertFalse(node3.isExprResult());
assertEquals(0, node3.getChildCount());
assertEquals(42, node3.getLineno());
assertFalse(node3.isNull());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertEquals(172042, node3.getSourcePosition());
assertFalse(node3.isCall());
assertEquals(10, node3.getCharno());
assertFalse(node3.isOr());
assertFalse(node3.isName());
assertFalse(node3.isTrue());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isHook());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertEquals(49, node3.getType());
assertFalse(node3.isArrayLit());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isRegExp());
assertFalse(node3.isScript());
assertFalse(node3.isFunction());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertNotSame(node1, node4);
assertSame(node1, node3);
assertNotSame(node2, node0);
assertNotSame(node3, node4);
assertSame(node3, node1);
assertEquals(1, nodeArray0.length);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);

node3.addChildToFront(node4);
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNumber());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isGetProp());
assertEquals(49, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertEquals(42, node1.getLineno());
assertFalse(node1.isGetElem());
assertEquals(10, node1.getCharno());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertEquals(172042, node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertEquals((-1117), node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertTrue(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isTrue());
assertEquals(42, node2.getLineno());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertEquals(172042, node2.getSourcePosition());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertEquals(10, node2.getCharno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isVar());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertTrue(node3.isThrow());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isCast());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isNot());
assertFalse(node3.isExprResult());
assertTrue(node3.hasOneChild());
assertEquals(42, node3.getLineno());
assertFalse(node3.isNull());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertEquals(172042, node3.getSourcePosition());
assertFalse(node3.isCall());
assertEquals(10, node3.getCharno());
assertFalse(node3.isOr());
assertFalse(node3.isName());
assertFalse(node3.isTrue());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isHook());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertEquals(49, node3.getType());
assertFalse(node3.isArrayLit());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isRegExp());
assertFalse(node3.isScript());
assertFalse(node3.isFunction());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertTrue(node3.hasChildren());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertTrue(node4.isGetterDef());
assertFalse(node4.isLabel());
assertFalse(node4.isReturn());
assertFalse(node4.isLabelName());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isContinue());
assertFalse(node4.isCast());
assertFalse(node4.isGetElem());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isExprResult());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.isOr());
assertEquals(147, node4.getType());
assertFalse(node4.isParamList());
assertFalse(node4.isThis());
assertFalse(node4.isCatch());
assertFalse(node4.isVar());
assertFalse(node4.isHook());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isRegExp());
assertFalse(node4.isWith());
assertFalse(node4.isScript());
assertFalse(node4.isBlock());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isSwitch());
assertFalse(node4.isStringKey());
assertEquals(57, node4.getCharno());
assertFalse(node4.isCase());
assertFalse(node4.isNumber());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFor());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isInc());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertFalse(node4.isComma());
assertFalse(node4.isNull());
assertFalse(node4.isGetProp());
assertEquals(204857, node4.getSourcePosition());
assertFalse(node4.isSetterDef());
assertFalse(node4.isBreak());
assertFalse(node4.isName());
assertFalse(node4.isCall());
assertFalse(node4.isThrow());
assertFalse(node4.isFunction());
assertFalse(node4.isFalse());
assertFalse(node4.isDebugger());
assertEquals(50, node4.getLineno());
assertFalse(node4.isWhile());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isString());
assertFalse(node4.isNot());
assertNotSame(node1, node4);
assertSame(node1, node3);
assertNotSame(node2, node0);
assertNotSame(node3, node4);
assertSame(node3, node1);
assertNotSame(node4, node3);
assertNotSame(node4, node1);
assertEquals(1, nodeArray0.length);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);


[MASTER] 18:02:13.453 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_56_1629223333199/com/google/javascript/rhino/Node_56_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_56_1629223333199/com/google/javascript/rhino/Node_56_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:13.453 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:13.453 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:13.454 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 203
[MASTER] 18:02:13.456 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_56_1629223333199/com/google/javascript/rhino/Node_56_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:13 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.SimpleErrorReporter;
14: import com.google.javascript.rhino.jstype.EnumType;
15: import com.google.javascript.rhino.jstype.JSTypeNative;
16: import com.google.javascript.rhino.jstype.JSTypeRegistry;
17: import com.google.javascript.rhino.jstype.ObjectType;
18: import java.nio.charset.Charset;
19: import java.nio.charset.UnsupportedCharsetException;
20: import java.util.Set;
21: import org.evosuite.runtime.EvoRunner;
22: import org.evosuite.runtime.EvoRunnerParameters;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class Node_56_tmp__ESTest extends Node_56_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       Node node0 = new Node(0);
31:       assertNotNull(node0);
32:       assertFalse(node0.isArrayLit());
33:       assertFalse(node0.isTry());
34:       assertFalse(node0.isTrue());
35:       assertFalse(node0.isFor());
36:       assertFalse(node0.isRegExp());
37:       assertFalse(node0.isIf());
38:       assertFalse(node0.isDelProp());
39:       assertFalse(node0.isFunction());
40:       assertFalse(node0.isVoid());
41:       assertFalse(node0.isCatch());
42:       assertFalse(node0.isParamList());
43:       assertFalse(node0.isDebugger());
44:       assertFalse(node0.isGetterDef());
45:       assertFalse(node0.isCase());
46:       assertFalse(node0.isString());
47:       assertFalse(node0.isName());
48:       assertFalse(node0.isStringKey());
49:       assertEquals((-1), node0.getCharno());
50:       assertFalse(node0.isVar());
51:       assertFalse(node0.isSwitch());
52:       assertFalse(node0.isBreak());
53:       assertFalse(node0.isComma());
54:       assertEquals(0, node0.getType());
55:       assertFalse(node0.isCall());
56:       assertFalse(node0.isOr());
57:       assertEquals(0, node0.getChildCount());
58:       assertFalse(node0.isLabel());
59:       assertFalse(node0.isAssignAdd());
60:       assertFalse(node0.isNull());
61:       assertFalse(node0.isDefaultCase());
62:       assertFalse(node0.isDo());
63:       assertFalse(node0.isNew());
64:       assertFalse(node0.isAdd());
65:       assertFalse(node0.isEmpty());
66:       assertFalse(node0.hasOneChild());
67:       assertFalse(node0.isTypeOf());
68:       assertFalse(node0.hasChildren());
69:       assertFalse(node0.isDec());
70:       assertFalse(node0.isAssign());
71:       assertFalse(node0.isLabelName());
72:       assertFalse(node0.isGetElem());
73:       assertFalse(node0.isWith());
74:       assertFalse(node0.isExprResult());
75:       assertFalse(node0.isCast());
76:       assertFalse(node0.isInstanceOf());
77:       assertFalse(node0.hasMoreThanOneChild());
78:       assertFalse(node0.isObjectLit());
79:       assertFalse(node0.isAnd());
80:       assertFalse(node0.isReturn());
81:       assertFalse(node0.isWhile());
82:       assertFalse(node0.isThis());
83:       assertFalse(node0.isNumber());
84:       assertEquals((-1), node0.getSourcePosition());
85:       assertFalse(node0.isNot());
86:       assertFalse(node0.isGetProp());
87:       assertFalse(node0.isScript());
88:       assertFalse(node0.isHook());
89:       assertFalse(node0.isBlock());
90:       assertFalse(node0.isThrow());
91:       assertFalse(node0.isFalse());
92:       assertFalse(node0.isContinue());
93:       assertFalse(node0.isIn());
94:       assertEquals((-1), node0.getLineno());
95:       assertFalse(node0.isNE());
96:       assertFalse(node0.isInc());
97:       assertFalse(node0.isSetterDef());
98:       assertEquals(37, Node.OPT_ARG_NAME);
99:       assertEquals(46, Node.IS_NAMESPACE);
100:       assertEquals(2, Node.POST_FLAG);
101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
102:       assertEquals(29, Node.JSDOC_INFO_PROP);
103:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
104:       assertEquals(30, Node.VAR_ARGS_NAME);
105:       assertEquals(1, Node.DECR_FLAG);
106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
107:       assertEquals(47, Node.IS_DISPATCHER);
108:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
109:       assertEquals(12, Node.COLUMN_BITS);
110:       assertEquals(32, Node.INCRDECR_PROP);
111:       assertEquals(57, Node.LAST_PROP);
112:       assertEquals(54, Node.SLASH_V);
113:       assertEquals(50, Node.FREE_CALL);
114:       assertEquals(40, Node.ORIGINALNAME_PROP);
115:       assertEquals(43, Node.IS_CONSTANT_NAME);
116:       assertEquals(48, Node.DIRECTIVES);
117:       assertEquals(39, Node.EMPTY_BLOCK);
118:       assertEquals(4095, Node.COLUMN_MASK);
119:       assertEquals(55, Node.INFERRED_FUNCTION);
120:       assertEquals(8, Node.FLAG_NO_THROWS);
121:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
123:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
124:       assertEquals(53, Node.INPUT_ID);
125:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
126:       assertEquals(57, Node.REFLECTED_OBJECT);
127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
128:       assertEquals(36, Node.QUOTED_PROP);
129:       assertEquals(52, Node.LENGTH);
130:       assertEquals(49, Node.DIRECT_EVAL);
131:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
132:       assertEquals(56, Node.CHANGE_TIME);
133:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
134:       
135:       Iterable<Node> iterable0 = node0.children();
136:       assertNotNull(iterable0);
137:       assertFalse(node0.isArrayLit());
138:       assertFalse(node0.isTry());
139:       assertFalse(node0.isTrue());
140:       assertFalse(node0.isFor());
141:       assertFalse(node0.isRegExp());
142:       assertFalse(node0.isIf());
143:       assertFalse(node0.isDelProp());
144:       assertFalse(node0.isFunction());
145:       assertFalse(node0.isVoid());
146:       assertFalse(node0.isCatch());
147:       assertFalse(node0.isParamList());
148:       assertFalse(node0.isDebugger());
149:       assertFalse(node0.isGetterDef());
150:       assertFalse(node0.isCase());
151:       assertFalse(node0.isString());
152:       assertFalse(node0.isName());
153:       assertFalse(node0.isStringKey());
154:       assertEquals((-1), node0.getCharno());
155:       assertFalse(node0.isVar());
156:       assertFalse(node0.isSwitch());
157:       assertFalse(node0.isBreak());
158:       assertFalse(node0.isComma());
159:       assertEquals(0, node0.getType());
160:       assertFalse(node0.isCall());
161:       assertFalse(node0.isOr());
162:       assertEquals(0, node0.getChildCount());
163:       assertFalse(node0.isLabel());
164:       assertFalse(node0.isAssignAdd());
165:       assertFalse(node0.isNull());
166:       assertFalse(node0.isDefaultCase());
167:       assertFalse(node0.isDo());
168:       assertFalse(node0.isNew());
169:       assertFalse(node0.isAdd());
170:       assertFalse(node0.isEmpty());
171:       assertFalse(node0.hasOneChild());
172:       assertFalse(node0.isTypeOf());
173:       assertFalse(node0.hasChildren());
174:       assertFalse(node0.isDec());
175:       assertFalse(node0.isAssign());
176:       assertFalse(node0.isLabelName());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.isWith());
179:       assertFalse(node0.isExprResult());
180:       assertFalse(node0.isCast());
181:       assertFalse(node0.isInstanceOf());
182:       assertFalse(node0.hasMoreThanOneChild());
183:       assertFalse(node0.isObjectLit());
184:       assertFalse(node0.isAnd());
185:       assertFalse(node0.isReturn());
186:       assertFalse(node0.isWhile());
187:       assertFalse(node0.isThis());
188:       assertFalse(node0.isNumber());
189:       assertEquals((-1), node0.getSourcePosition());
190:       assertFalse(node0.isNot());
191:       assertFalse(node0.isGetProp());
192:       assertFalse(node0.isScript());
193:       assertFalse(node0.isHook());
194:       assertFalse(node0.isBlock());
195:       assertFalse(node0.isThrow());
196:       assertFalse(node0.isFalse());
197:       assertFalse(node0.isContinue());
198:       assertFalse(node0.isIn());
199:       assertEquals((-1), node0.getLineno());
200:       assertFalse(node0.isNE());
201:       assertFalse(node0.isInc());
202:       assertFalse(node0.isSetterDef());
203:       assertFalse(iterable0.contains(node0));
204:       assertEquals(37, Node.OPT_ARG_NAME);
205:       assertEquals(46, Node.IS_NAMESPACE);
206:       assertEquals(2, Node.POST_FLAG);
207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
208:       assertEquals(29, Node.JSDOC_INFO_PROP);
209:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
210:       assertEquals(30, Node.VAR_ARGS_NAME);
211:       assertEquals(1, Node.DECR_FLAG);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(47, Node.IS_DISPATCHER);
214:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
215:       assertEquals(12, Node.COLUMN_BITS);
216:       assertEquals(32, Node.INCRDECR_PROP);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(54, Node.SLASH_V);
219:       assertEquals(50, Node.FREE_CALL);
220:       assertEquals(40, Node.ORIGINALNAME_PROP);
221:       assertEquals(43, Node.IS_CONSTANT_NAME);
222:       assertEquals(48, Node.DIRECTIVES);
223:       assertEquals(39, Node.EMPTY_BLOCK);
224:       assertEquals(4095, Node.COLUMN_MASK);
225:       assertEquals(55, Node.INFERRED_FUNCTION);
226:       assertEquals(8, Node.FLAG_NO_THROWS);
227:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
228:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
229:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
230:       assertEquals(53, Node.INPUT_ID);
231:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
232:       assertEquals(57, Node.REFLECTED_OBJECT);
233:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
234:       assertEquals(36, Node.QUOTED_PROP);
235:       assertEquals(52, Node.LENGTH);
236:       assertEquals(49, Node.DIRECT_EVAL);
237:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
238:       assertEquals(56, Node.CHANGE_TIME);
239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
240:       
241:       Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
242:       assertNotNull(node_AncestorIterable0);
243:       assertFalse(node0.isArrayLit());
244:       assertFalse(node0.isTry());
245:       assertFalse(node0.isTrue());
246:       assertFalse(node0.isFor());
247:       assertFalse(node0.isRegExp());
248:       assertFalse(node0.isIf());
249:       assertFalse(node0.isDelProp());
250:       assertFalse(node0.isFunction());
251:       assertFalse(node0.isVoid());
252:       assertFalse(node0.isCatch());
253:       assertFalse(node0.isParamList());
254:       assertFalse(node0.isDebugger());
255:       assertFalse(node0.isGetterDef());
256:       assertFalse(node0.isCase());
257:       assertFalse(node0.isString());
258:       assertFalse(node0.isName());
259:       assertFalse(node0.isStringKey());
260:       assertEquals((-1), node0.getCharno());
261:       assertFalse(node0.isVar());
262:       assertFalse(node0.isSwitch());
263:       assertFalse(node0.isBreak());
264:       assertFalse(node0.isComma());
265:       assertEquals(0, node0.getType());
266:       assertFalse(node0.isCall());
267:       assertFalse(node0.isOr());
268:       assertEquals(0, node0.getChildCount());
269:       assertFalse(node0.isLabel());
270:       assertFalse(node0.isAssignAdd());
271:       assertFalse(node0.isNull());
272:       assertFalse(node0.isDefaultCase());
273:       assertFalse(node0.isDo());
274:       assertFalse(node0.isNew());
275:       assertFalse(node0.isAdd());
276:       assertFalse(node0.isEmpty());
277:       assertFalse(node0.hasOneChild());
278:       assertFalse(node0.isTypeOf());
279:       assertFalse(node0.hasChildren());
280:       assertFalse(node0.isDec());
281:       assertFalse(node0.isAssign());
282:       assertFalse(node0.isLabelName());
283:       assertFalse(node0.isGetElem());
284:       assertFalse(node0.isWith());
285:       assertFalse(node0.isExprResult());
286:       assertFalse(node0.isCast());
287:       assertFalse(node0.isInstanceOf());
288:       assertFalse(node0.hasMoreThanOneChild());
289:       assertFalse(node0.isObjectLit());
290:       assertFalse(node0.isAnd());
291:       assertFalse(node0.isReturn());
292:       assertFalse(node0.isWhile());
293:       assertFalse(node0.isThis());
294:       assertFalse(node0.isNumber());
295:       assertEquals((-1), node0.getSourcePosition());
296:       assertFalse(node0.isNot());
297:       assertFalse(node0.isGetProp());
298:       assertFalse(node0.isScript());
299:       assertFalse(node0.isHook());
300:       assertFalse(node0.isBlock());
301:       assertFalse(node0.isThrow());
302:       assertFalse(node0.isFalse());
303:       assertFalse(node0.isContinue());
304:       assertFalse(node0.isIn());
305:       assertEquals((-1), node0.getLineno());
306:       assertFalse(node0.isNE());
307:       assertFalse(node0.isInc());
308:       assertFalse(node0.isSetterDef());
309:       assertEquals(37, Node.OPT_ARG_NAME);
310:       assertEquals(46, Node.IS_NAMESPACE);
311:       assertEquals(2, Node.POST_FLAG);
312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
313:       assertEquals(29, Node.JSDOC_INFO_PROP);
314:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
315:       assertEquals(30, Node.VAR_ARGS_NAME);
316:       assertEquals(1, Node.DECR_FLAG);
317:       assertEquals(15, Node.NO_SIDE_EFFECTS);
318:       assertEquals(47, Node.IS_DISPATCHER);
319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
320:       assertEquals(12, Node.COLUMN_BITS);
321:       assertEquals(32, Node.INCRDECR_PROP);
322:       assertEquals(57, Node.LAST_PROP);
323:       assertEquals(54, Node.SLASH_V);
324:       assertEquals(50, Node.FREE_CALL);
325:       assertEquals(40, Node.ORIGINALNAME_PROP);
326:       assertEquals(43, Node.IS_CONSTANT_NAME);
327:       assertEquals(48, Node.DIRECTIVES);
328:       assertEquals(39, Node.EMPTY_BLOCK);
329:       assertEquals(4095, Node.COLUMN_MASK);
330:       assertEquals(55, Node.INFERRED_FUNCTION);
331:       assertEquals(8, Node.FLAG_NO_THROWS);
332:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(53, Node.INPUT_ID);
336:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
337:       assertEquals(57, Node.REFLECTED_OBJECT);
338:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
339:       assertEquals(36, Node.QUOTED_PROP);
340:       assertEquals(52, Node.LENGTH);
341:       assertEquals(49, Node.DIRECT_EVAL);
342:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
343:       assertEquals(56, Node.CHANGE_TIME);
344:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
345:       
346:       Node node1 = Node.newString(49, "");
347:       assertNotNull(node1);
348:       assertFalse(node1.hasOneChild());
349:       assertFalse(node1.isGetElem());
350:       assertFalse(node1.isCast());
351:       assertFalse(node1.isExprResult());
352:       assertFalse(node1.isScript());
353:       assertFalse(node1.isNumber());
354:       assertEquals((-1), node1.getSourcePosition());
355:       assertFalse(node1.isNot());
356:       assertFalse(node1.isLabelName());
357:       assertFalse(node1.isAnd());
358:       assertFalse(node1.isInstanceOf());
359:       assertEquals((-1), node1.getLineno());
360:       assertFalse(node1.hasMoreThanOneChild());
361:       assertFalse(node1.isObjectLit());
362:       assertFalse(node1.isGetProp());
363:       assertFalse(node1.isDec());
364:       assertFalse(node1.isWhile());
365:       assertFalse(node1.hasChildren());
366:       assertFalse(node1.isComma());
367:       assertFalse(node1.isAssign());
368:       assertFalse(node1.isWith());
369:       assertFalse(node1.isTypeOf());
370:       assertFalse(node1.isReturn());
371:       assertFalse(node1.isThis());
372:       assertFalse(node1.isBlock());
373:       assertFalse(node1.isNew());
374:       assertFalse(node1.isCall());
375:       assertFalse(node1.isAdd());
376:       assertFalse(node1.isBreak());
377:       assertFalse(node1.isSwitch());
378:       assertFalse(node1.isName());
379:       assertFalse(node1.isStringKey());
380:       assertEquals((-1), node1.getCharno());
381:       assertFalse(node1.isParamList());
382:       assertFalse(node1.isNull());
383:       assertEquals(0, node1.getChildCount());
384:       assertFalse(node1.isOr());
385:       assertFalse(node1.isDefaultCase());
386:       assertTrue(node1.isThrow());
387:       assertFalse(node1.isDo());
388:       assertFalse(node1.isLabel());
389:       assertFalse(node1.isAssignAdd());
390:       assertFalse(node1.isVar());
391:       assertFalse(node1.isArrayLit());
392:       assertFalse(node1.isTry());
393:       assertFalse(node1.isEmpty());
394:       assertFalse(node1.isIf());
395:       assertFalse(node1.isDelProp());
396:       assertFalse(node1.isGetterDef());
397:       assertFalse(node1.isVoid());
398:       assertFalse(node1.isDebugger());
399:       assertFalse(node1.isNE());
400:       assertFalse(node1.isTrue());
401:       assertEquals(49, node1.getType());
402:       assertFalse(node1.isCase());
403:       assertFalse(node1.isCatch());
404:       assertFalse(node1.isRegExp());
405:       assertFalse(node1.isFor());
406:       assertFalse(node1.isHook());
407:       assertFalse(node1.isFalse());
408:       assertFalse(node1.isInc());
409:       assertFalse(node1.isString());
410:       assertFalse(node1.isIn());
411:       assertFalse(node1.isContinue());
412:       assertFalse(node1.isSetterDef());
413:       assertFalse(node1.isFunction());
414:       assertFalse(node1.equals((Object)node0));
415:       assertEquals(37, Node.OPT_ARG_NAME);
416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
417:       assertEquals(56, Node.CHANGE_TIME);
418:       assertEquals(12, Node.COLUMN_BITS);
419:       assertEquals(46, Node.IS_NAMESPACE);
420:       assertEquals(32, Node.INCRDECR_PROP);
421:       assertEquals(30, Node.VAR_ARGS_NAME);
422:       assertEquals(49, Node.DIRECT_EVAL);
423:       assertEquals(47, Node.IS_DISPATCHER);
424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
425:       assertEquals(2, Node.POST_FLAG);
426:       assertEquals(54, Node.SLASH_V);
427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
428:       assertEquals(43, Node.IS_CONSTANT_NAME);
429:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
430:       assertEquals(1, Node.DECR_FLAG);
431:       assertEquals(50, Node.FREE_CALL);
432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
433:       assertEquals(48, Node.DIRECTIVES);
434:       assertEquals(39, Node.EMPTY_BLOCK);
435:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
436:       assertEquals(40, Node.ORIGINALNAME_PROP);
437:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
438:       assertEquals(4095, Node.COLUMN_MASK);
439:       assertEquals(53, Node.INPUT_ID);
440:       assertEquals(57, Node.REFLECTED_OBJECT);
441:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
442:       assertEquals(57, Node.LAST_PROP);
443:       assertEquals(29, Node.JSDOC_INFO_PROP);
444:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
445:       assertEquals(15, Node.NO_SIDE_EFFECTS);
446:       assertEquals(36, Node.QUOTED_PROP);
447:       assertEquals(55, Node.INFERRED_FUNCTION);
448:       assertEquals(8, Node.FLAG_NO_THROWS);
449:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
450:       assertEquals(52, Node.LENGTH);
451:       
452:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
453:       assertNotNull(node_NodeMismatch0);
454:       assertFalse(node0.isArrayLit());
455:       assertFalse(node0.isTry());
456:       assertFalse(node0.isTrue());
457:       assertFalse(node0.isFor());
458:       assertFalse(node0.isRegExp());
459:       assertFalse(node0.isIf());
460:       assertFalse(node0.isDelProp());
461:       assertFalse(node0.isFunction());
462:       assertFalse(node0.isVoid());
463:       assertFalse(node0.isCatch());
464:       assertFalse(node0.isParamList());
465:       assertFalse(node0.isDebugger());
466:       assertFalse(node0.isGetterDef());
467:       assertFalse(node0.isCase());
468:       assertFalse(node0.isString());
469:       assertFalse(node0.isName());
470:       assertFalse(node0.isStringKey());
471:       assertEquals((-1), node0.getCharno());
472:       assertFalse(node0.isVar());
473:       assertFalse(node0.isSwitch());
474:       assertFalse(node0.isBreak());
475:       assertFalse(node0.isComma());
476:       assertEquals(0, node0.getType());
477:       assertFalse(node0.isCall());
478:       assertFalse(node0.isOr());
479:       assertEquals(0, node0.getChildCount());
480:       assertFalse(node0.isLabel());
481:       assertFalse(node0.isAssignAdd());
482:       assertFalse(node0.isNull());
483:       assertFalse(node0.isDefaultCase());
484:       assertFalse(node0.isDo());
485:       assertFalse(node0.isNew());
486:       assertFalse(node0.isAdd());
487:       assertFalse(node0.isEmpty());
488:       assertFalse(node0.hasOneChild());
489:       assertFalse(node0.isTypeOf());
490:       assertFalse(node0.hasChildren());
491:       assertFalse(node0.isDec());
492:       assertFalse(node0.isAssign());
493:       assertFalse(node0.isLabelName());
494:       assertFalse(node0.isGetElem());
495:       assertFalse(node0.isWith());
496:       assertFalse(node0.isExprResult());
497:       assertFalse(node0.isCast());
498:       assertFalse(node0.isInstanceOf());
499:       assertFalse(node0.hasMoreThanOneChild());
500:       assertFalse(node0.isObjectLit());
501:       assertFalse(node0.isAnd());
502:       assertFalse(node0.isReturn());
503:       assertFalse(node0.isWhile());
504:       assertFalse(node0.isThis());
505:       assertFalse(node0.isNumber());
506:       assertEquals((-1), node0.getSourcePosition());
507:       assertFalse(node0.isNot());
508:       assertFalse(node0.isGetProp());
509:       assertFalse(node0.isScript());
510:       assertFalse(node0.isHook());
511:       assertFalse(node0.isBlock());
512:       assertFalse(node0.isThrow());
513:       assertFalse(node0.isFalse());
514:       assertFalse(node0.isContinue());
515:       assertFalse(node0.isIn());
516:       assertEquals((-1), node0.getLineno());
517:       assertFalse(node0.isNE());
518:       assertFalse(node0.isInc());
519:       assertFalse(node0.isSetterDef());
520:       assertFalse(node1.hasOneChild());
521:       assertFalse(node1.isGetElem());
522:       assertFalse(node1.isCast());
523:       assertFalse(node1.isExprResult());
524:       assertFalse(node1.isScript());
525:       assertFalse(node1.isNumber());
526:       assertEquals((-1), node1.getSourcePosition());
527:       assertFalse(node1.isNot());
528:       assertFalse(node1.isLabelName());
529:       assertFalse(node1.isAnd());
530:       assertFalse(node1.isInstanceOf());
531:       assertEquals((-1), node1.getLineno());
532:       assertFalse(node1.hasMoreThanOneChild());
533:       assertFalse(node1.isObjectLit());
534:       assertFalse(node1.isGetProp());
535:       assertFalse(node1.isDec());
536:       assertFalse(node1.isWhile());
537:       assertFalse(node1.hasChildren());
538:       assertFalse(node1.isComma());
539:       assertFalse(node1.isAssign());
540:       assertFalse(node1.isWith());
541:       assertFalse(node1.isTypeOf());
542:       assertFalse(node1.isReturn());
543:       assertFalse(node1.isThis());
544:       assertFalse(node1.isBlock());
545:       assertFalse(node1.isNew());
546:       assertFalse(node1.isCall());
547:       assertFalse(node1.isAdd());
548:       assertFalse(node1.isBreak());
549:       assertFalse(node1.isSwitch());
550:       assertFalse(node1.isName());
551:       assertFalse(node1.isStringKey());
552:       assertEquals((-1), node1.getCharno());
553:       assertFalse(node1.isParamList());
554:       assertFalse(node1.isNull());
555:       assertEquals(0, node1.getChildCount());
556:       assertFalse(node1.isOr());
557:       assertFalse(node1.isDefaultCase());
558:       assertTrue(node1.isThrow());
559:       assertFalse(node1.isDo());
560:       assertFalse(node1.isLabel());
561:       assertFalse(node1.isAssignAdd());
562:       assertFalse(node1.isVar());
563:       assertFalse(node1.isArrayLit());
564:       assertFalse(node1.isTry());
565:       assertFalse(node1.isEmpty());
566:       assertFalse(node1.isIf());
567:       assertFalse(node1.isDelProp());
568:       assertFalse(node1.isGetterDef());
569:       assertFalse(node1.isVoid());
570:       assertFalse(node1.isDebugger());
571:       assertFalse(node1.isNE());
572:       assertFalse(node1.isTrue());
573:       assertEquals(49, node1.getType());
574:       assertFalse(node1.isCase());
575:       assertFalse(node1.isCatch());
576:       assertFalse(node1.isRegExp());
577:       assertFalse(node1.isFor());
578:       assertFalse(node1.isHook());
579:       assertFalse(node1.isFalse());
580:       assertFalse(node1.isInc());
581:       assertFalse(node1.isString());
582:       assertFalse(node1.isIn());
583:       assertFalse(node1.isContinue());
584:       assertFalse(node1.isSetterDef());
585:       assertFalse(node1.isFunction());
586:       assertFalse(node0.equals((Object)node1));
587:       assertFalse(node1.equals((Object)node0));
588:       assertEquals(37, Node.OPT_ARG_NAME);
589:       assertEquals(46, Node.IS_NAMESPACE);
590:       assertEquals(2, Node.POST_FLAG);
591:       assertEquals(51, Node.STATIC_SOURCE_FILE);
592:       assertEquals(29, Node.JSDOC_INFO_PROP);
593:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
594:       assertEquals(30, Node.VAR_ARGS_NAME);
595:       assertEquals(1, Node.DECR_FLAG);
596:       assertEquals(15, Node.NO_SIDE_EFFECTS);
597:       assertEquals(47, Node.IS_DISPATCHER);
598:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
599:       assertEquals(12, Node.COLUMN_BITS);
600:       assertEquals(32, Node.INCRDECR_PROP);
601:       assertEquals(57, Node.LAST_PROP);
602:       assertEquals(54, Node.SLASH_V);
603:       assertEquals(50, Node.FREE_CALL);
604:       assertEquals(40, Node.ORIGINALNAME_PROP);
605:       assertEquals(43, Node.IS_CONSTANT_NAME);
606:       assertEquals(48, Node.DIRECTIVES);
607:       assertEquals(39, Node.EMPTY_BLOCK);
608:       assertEquals(4095, Node.COLUMN_MASK);
609:       assertEquals(55, Node.INFERRED_FUNCTION);
610:       assertEquals(8, Node.FLAG_NO_THROWS);
611:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
612:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
613:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
614:       assertEquals(53, Node.INPUT_ID);
615:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
616:       assertEquals(57, Node.REFLECTED_OBJECT);
617:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
618:       assertEquals(36, Node.QUOTED_PROP);
619:       assertEquals(52, Node.LENGTH);
620:       assertEquals(49, Node.DIRECT_EVAL);
621:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
622:       assertEquals(56, Node.CHANGE_TIME);
623:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
624:       assertEquals(37, Node.OPT_ARG_NAME);
625:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
626:       assertEquals(56, Node.CHANGE_TIME);
627:       assertEquals(12, Node.COLUMN_BITS);
628:       assertEquals(46, Node.IS_NAMESPACE);
629:       assertEquals(32, Node.INCRDECR_PROP);
630:       assertEquals(30, Node.VAR_ARGS_NAME);
631:       assertEquals(49, Node.DIRECT_EVAL);
632:       assertEquals(47, Node.IS_DISPATCHER);
633:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
634:       assertEquals(2, Node.POST_FLAG);
635:       assertEquals(54, Node.SLASH_V);
636:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
637:       assertEquals(43, Node.IS_CONSTANT_NAME);
638:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
639:       assertEquals(1, Node.DECR_FLAG);
640:       assertEquals(50, Node.FREE_CALL);
641:       assertEquals(51, Node.STATIC_SOURCE_FILE);
642:       assertEquals(48, Node.DIRECTIVES);
643:       assertEquals(39, Node.EMPTY_BLOCK);
644:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
645:       assertEquals(40, Node.ORIGINALNAME_PROP);
646:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
647:       assertEquals(4095, Node.COLUMN_MASK);
648:       assertEquals(53, Node.INPUT_ID);
649:       assertEquals(57, Node.REFLECTED_OBJECT);
650:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
651:       assertEquals(57, Node.LAST_PROP);
652:       assertEquals(29, Node.JSDOC_INFO_PROP);
653:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
654:       assertEquals(15, Node.NO_SIDE_EFFECTS);
655:       assertEquals(36, Node.QUOTED_PROP);
656:       assertEquals(55, Node.INFERRED_FUNCTION);
657:       assertEquals(8, Node.FLAG_NO_THROWS);
658:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
659:       assertEquals(52, Node.LENGTH);
660:       
661:       boolean boolean0 = node0.wasEmptyNode();
662:       assertFalse(node0.isArrayLit());
663:       assertFalse(node0.isTry());
664:       assertFalse(node0.isTrue());
665:       assertFalse(node0.isFor());
666:       assertFalse(node0.isRegExp());
667:       assertFalse(node0.isIf());
668:       assertFalse(node0.isDelProp());
669:       assertFalse(node0.isFunction());
670:       assertFalse(node0.isVoid());
671:       assertFalse(node0.isCatch());
672:       assertFalse(node0.isParamList());
673:       assertFalse(node0.isDebugger());
674:       assertFalse(node0.isGetterDef());
675:       assertFalse(node0.isCase());
676:       assertFalse(node0.isString());
677:       assertFalse(node0.isName());
678:       assertFalse(node0.isStringKey());
679:       assertEquals((-1), node0.getCharno());
680:       assertFalse(node0.isVar());
681:       assertFalse(node0.isSwitch());
682:       assertFalse(node0.isBreak());
683:       assertFalse(node0.isComma());
684:       assertEquals(0, node0.getType());
685:       assertFalse(node0.isCall());
686:       assertFalse(node0.isOr());
687:       assertEquals(0, node0.getChildCount());
688:       assertFalse(node0.isLabel());
689:       assertFalse(node0.isAssignAdd());
690:       assertFalse(node0.isNull());
691:       assertFalse(node0.isDefaultCase());
692:       assertFalse(node0.isDo());
693:       assertFalse(node0.isNew());
694:       assertFalse(node0.isAdd());
695:       assertFalse(node0.isEmpty());
696:       assertFalse(node0.hasOneChild());
697:       assertFalse(node0.isTypeOf());
698:       assertFalse(node0.hasChildren());
699:       assertFalse(node0.isDec());
700:       assertFalse(node0.isAssign());
701:       assertFalse(node0.isLabelName());
702:       assertFalse(node0.isGetElem());
703:       assertFalse(node0.isWith());
704:       assertFalse(node0.isExprResult());
705:       assertFalse(node0.isCast());
706:       assertFalse(node0.isInstanceOf());
707:       assertFalse(node0.hasMoreThanOneChild());
708:       assertFalse(node0.isObjectLit());
709:       assertFalse(node0.isAnd());
710:       assertFalse(node0.isReturn());
711:       assertFalse(node0.isWhile());
712:       assertFalse(node0.isThis());
713:       assertFalse(node0.isNumber());
714:       assertEquals((-1), node0.getSourcePosition());
715:       assertFalse(node0.isNot());
716:       assertFalse(node0.isGetProp());
717:       assertFalse(node0.isScript());
718:       assertFalse(node0.isHook());
719:       assertFalse(node0.isBlock());
720:       assertFalse(node0.isThrow());
721:       assertFalse(node0.isFalse());
722:       assertFalse(node0.isContinue());
723:       assertFalse(node0.isIn());
724:       assertEquals((-1), node0.getLineno());
725:       assertFalse(node0.isNE());
726:       assertFalse(node0.isInc());
727:       assertFalse(node0.isSetterDef());
728:       assertFalse(boolean0);
729:       assertFalse(node0.equals((Object)node1));
730:       assertEquals(37, Node.OPT_ARG_NAME);
731:       assertEquals(46, Node.IS_NAMESPACE);
732:       assertEquals(2, Node.POST_FLAG);
733:       assertEquals(51, Node.STATIC_SOURCE_FILE);
734:       assertEquals(29, Node.JSDOC_INFO_PROP);
735:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
736:       assertEquals(30, Node.VAR_ARGS_NAME);
737:       assertEquals(1, Node.DECR_FLAG);
738:       assertEquals(15, Node.NO_SIDE_EFFECTS);
739:       assertEquals(47, Node.IS_DISPATCHER);
740:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
741:       assertEquals(12, Node.COLUMN_BITS);
742:       assertEquals(32, Node.INCRDECR_PROP);
743:       assertEquals(57, Node.LAST_PROP);
744:       assertEquals(54, Node.SLASH_V);
745:       assertEquals(50, Node.FREE_CALL);
746:       assertEquals(40, Node.ORIGINALNAME_PROP);
747:       assertEquals(43, Node.IS_CONSTANT_NAME);
748:       assertEquals(48, Node.DIRECTIVES);
749:       assertEquals(39, Node.EMPTY_BLOCK);
750:       assertEquals(4095, Node.COLUMN_MASK);
751:       assertEquals(55, Node.INFERRED_FUNCTION);
752:       assertEquals(8, Node.FLAG_NO_THROWS);
753:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
754:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
755:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
756:       assertEquals(53, Node.INPUT_ID);
757:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
758:       assertEquals(57, Node.REFLECTED_OBJECT);
759:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
760:       assertEquals(36, Node.QUOTED_PROP);
761:       assertEquals(52, Node.LENGTH);
762:       assertEquals(49, Node.DIRECT_EVAL);
763:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
764:       assertEquals(56, Node.CHANGE_TIME);
765:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
766:       
767:       boolean boolean1 = false;
768:       node0.setIsSyntheticBlock(false);
769:       assertFalse(node0.isArrayLit());
770:       assertFalse(node0.isTry());
771:       assertFalse(node0.isTrue());
772:       assertFalse(node0.isFor());
773:       assertFalse(node0.isRegExp());
774:       assertFalse(node0.isIf());
775:       assertFalse(node0.isDelProp());
776:       assertFalse(node0.isFunction());
777:       assertFalse(node0.isVoid());
778:       assertFalse(node0.isCatch());
779:       assertFalse(node0.isParamList());
780:       assertFalse(node0.isDebugger());
781:       assertFalse(node0.isGetterDef());
782:       assertFalse(node0.isCase());
783:       assertFalse(node0.isString());
784:       assertFalse(node0.isName());
785:       assertFalse(node0.isStringKey());
786:       assertEquals((-1), node0.getCharno());
787:       assertFalse(node0.isVar());
788:       assertFalse(node0.isSwitch());
789:       assertFalse(node0.isBreak());
790:       assertFalse(node0.isComma());
791:       assertEquals(0, node0.getType());
792:       assertFalse(node0.isCall());
793:       assertFalse(node0.isOr());
794:       assertEquals(0, node0.getChildCount());
795:       assertFalse(node0.isLabel());
796:       assertFalse(node0.isAssignAdd());
797:       assertFalse(node0.isNull());
798:       assertFalse(node0.isDefaultCase());
799:       assertFalse(node0.isDo());
800:       assertFalse(node0.isNew());
801:       assertFalse(node0.isAdd());
802:       assertFalse(node0.isEmpty());
803:       assertFalse(node0.hasOneChild());
804:       assertFalse(node0.isTypeOf());
805:       assertFalse(node0.hasChildren());
806:       assertFalse(node0.isDec());
807:       assertFalse(node0.isAssign());
808:       assertFalse(node0.isLabelName());
809:       assertFalse(node0.isGetElem());
810:       assertFalse(node0.isWith());
811:       assertFalse(node0.isExprResult());
812:       assertFalse(node0.isCast());
813:       assertFalse(node0.isInstanceOf());
814:       assertFalse(node0.hasMoreThanOneChild());
815:       assertFalse(node0.isObjectLit());
816:       assertFalse(node0.isAnd());
817:       assertFalse(node0.isReturn());
818:       assertFalse(node0.isWhile());
819:       assertFalse(node0.isThis());
820:       assertFalse(node0.isNumber());
821:       assertEquals((-1), node0.getSourcePosition());
822:       assertFalse(node0.isNot());
823:       assertFalse(node0.isGetProp());
824:       assertFalse(node0.isScript());
825:       assertFalse(node0.isHook());
826:       assertFalse(node0.isBlock());
827:       assertFalse(node0.isThrow());
828:       assertFalse(node0.isFalse());
829:       assertFalse(node0.isContinue());
830:       assertFalse(node0.isIn());
831:       assertEquals((-1), node0.getLineno());
832:       assertFalse(node0.isNE());
833:       assertFalse(node0.isInc());
834:       assertFalse(node0.isSetterDef());
835:       assertFalse(node0.equals((Object)node1));
836:       assertEquals(37, Node.OPT_ARG_NAME);
837:       assertEquals(46, Node.IS_NAMESPACE);
838:       assertEquals(2, Node.POST_FLAG);
839:       assertEquals(51, Node.STATIC_SOURCE_FILE);
840:       assertEquals(29, Node.JSDOC_INFO_PROP);
841:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
842:       assertEquals(30, Node.VAR_ARGS_NAME);
843:       assertEquals(1, Node.DECR_FLAG);
844:       assertEquals(15, Node.NO_SIDE_EFFECTS);
845:       assertEquals(47, Node.IS_DISPATCHER);
846:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
847:       assertEquals(12, Node.COLUMN_BITS);
848:       assertEquals(32, Node.INCRDECR_PROP);
849:       assertEquals(57, Node.LAST_PROP);
850:       assertEquals(54, Node.SLASH_V);
851:       assertEquals(50, Node.FREE_CALL);
852:       assertEquals(40, Node.ORIGINALNAME_PROP);
853:       assertEquals(43, Node.IS_CONSTANT_NAME);
854:       assertEquals(48, Node.DIRECTIVES);
855:       assertEquals(39, Node.EMPTY_BLOCK);
856:       assertEquals(4095, Node.COLUMN_MASK);
857:       assertEquals(55, Node.INFERRED_FUNCTION);
858:       assertEquals(8, Node.FLAG_NO_THROWS);
859:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
860:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
861:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
862:       assertEquals(53, Node.INPUT_ID);
863:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
864:       assertEquals(57, Node.REFLECTED_OBJECT);
865:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
866:       assertEquals(36, Node.QUOTED_PROP);
867:       assertEquals(52, Node.LENGTH);
868:       assertEquals(49, Node.DIRECT_EVAL);
869:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
870:       assertEquals(56, Node.CHANGE_TIME);
871:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
872:       
873:       // Undeclared exception!
874:       try { 
875:         Charset.forName("NEW");
876:         fail("Expecting exception: UnsupportedCharsetException");
877:       
878:       } catch(UnsupportedCharsetException e) {
879:          //
880:          // NEW
881:          //
882:          verifyException("java.nio.charset.Charset", e);
883:       }
884:   }
885: }
RegularFileObject[/tmp/EvoSuite_56_1629223333199/com/google/javascript/rhino/Node_56_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_56_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_56_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.common.collect.ImmutableList$SerializedForm",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_56_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.javascript.rhino.Token",
268:       "com.google.common.base.Preconditions",
269:       "com.google.javascript.rhino.SimpleErrorReporter",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.JSTypeNative",
301:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
302:       "com.google.javascript.rhino.jstype.JSType$1",
303:       "com.google.javascript.rhino.jstype.JSType",
304:       "com.google.javascript.rhino.jstype.ObjectType",
305:       "com.google.javascript.rhino.jstype.ProxyObjectType",
306:       "com.google.javascript.rhino.jstype.TemplateType",
307:       "com.google.javascript.rhino.jstype.ValueType",
308:       "com.google.javascript.rhino.jstype.BooleanType",
309:       "com.google.javascript.rhino.jstype.NullType",
310:       "com.google.javascript.rhino.jstype.NumberType",
311:       "com.google.javascript.rhino.jstype.StringType",
312:       "com.google.javascript.rhino.jstype.UnknownType",
313:       "com.google.javascript.rhino.jstype.VoidType",
314:       "com.google.javascript.rhino.jstype.AllType",
315:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
316:       "com.google.common.collect.ImmutableMap",
317:       "com.google.common.collect.ImmutableBiMap",
318:       "com.google.common.collect.EmptyImmutableBiMap",
319:       "com.google.javascript.rhino.jstype.PropertyMap$1",
320:       "com.google.javascript.rhino.jstype.PropertyMap",
321:       "com.google.javascript.rhino.jstype.FunctionType",
322:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
346:       "com.google.common.collect.Sets",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.javascript.rhino.JSDocInfo$Visibility",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.common.collect.Platform",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.javascript.rhino.Node$AncestorIterable$1",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.javascript.rhino.JSTypeExpression",
357:       "com.google.common.collect.ImmutableSet",
358:       "com.google.common.collect.EmptyImmutableSet",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.jstype.TernaryValue",
362:       "com.google.common.collect.Iterables",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.ImmutableList$1"
365:     );
366:   }
367: }

[MASTER] 18:02:13.475 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertNotNull(node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(0, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(0, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(iterable0.contains(node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
assertNotNull(node_AncestorIterable0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(0, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Node node1 = Node.newString(49, "");
assertNotNull(node1);
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertTrue(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertEquals(49, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(0, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertTrue(node1.isThrow());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertEquals(49, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);

boolean boolean0 = node0.wasEmptyNode();
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(0, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

boolean boolean1 = false;
node0.setIsSyntheticBlock(false);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertEquals(0, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.equals((Object)node1));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Charset.forName("NEW");

[MASTER] 18:02:51.758 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:52.127 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:52.446 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:52.772 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:53.049 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:53.323 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:53.563 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:53.823 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:54.074 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:54.321 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:55.154 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:55.484 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:55.826 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:56.066 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:56.295 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:56.514 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:56.746 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:56.976 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:57.270 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:57.540 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:57.809 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:58.082 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:58.309 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:58.528 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:58.764 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:59.072 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:59.371 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:59.588 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:59.828 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/25
* Done!

* Computation finished
