* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 14715
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3535244394
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:44:58.969 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:45:02.010 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;
[MASTER] 10:45:02.119 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;
[MASTER] 10:45:02.120 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;
[MASTER] 10:45:49.965 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:46:36.332 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:47:24.524 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 10:51:13.178 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:51:13.980 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.UnionType canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 10:51:16.059 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:51:17.648 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.EnumElementType canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 10:51:33.990 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:51:44.993 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:51:45.192 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.EnumElementType canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 10:51:56.270 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:52:12.133 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.jstype.TemplateTypeMapReplacer due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:52:20.631 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.UnionType canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 10:52:47.000 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.util.PriorityQueue due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:53:09.813 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.EnumType canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 10:53:58.925 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.util.ArrayList due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.util.TreeSet due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true: 215
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 381
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 135
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 19403
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 4425
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 135
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 4142
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 2355
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 12
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 1776
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 7670
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 75
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 26
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 804
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 3839
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 26
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 135
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 26
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 6054
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 26
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 36
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 4425
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 932
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 20560
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 26
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 2812
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 5877
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 447
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 884
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 9060
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 111
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 6608
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 2355
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 3866
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 475
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 193
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 970
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 588: 215
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 15699
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 85
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 592: 215
Number of times BBC is called for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 215
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 1577
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 52
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 1169
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 6
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 7315
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 76
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 215
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 659
Number of times BBC is called for com.google.javascript.rhino.Node.mergeLineCharNo(II)I: I15 Branch 141 IFEQ L1197 - false: 103
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 655
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 1513
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 26029
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 339
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 7053
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 16735
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 114
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 487
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 1958
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 545
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 2249
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 1776
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 6608
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 16952
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 32878
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 5980
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 52
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 47671
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 135
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 487
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 569
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 381
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 569
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 487
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 1759
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 569
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 300
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 3990
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 10483
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 3431
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 5045
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 166
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 569
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 24231
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 8
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 8
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 79
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 569
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 79
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 184
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 79
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 66908
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 6716
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 8295
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 2716
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 10
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 2692
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 1390
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 105653
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 7
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 43
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 4
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1845
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 1007
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 1554
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 2134
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 12
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 3088
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 4
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 211
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 569
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 135
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 214
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 1006
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 7149
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 7393
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 105653
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 884
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 18643
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 4425
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 5923
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 569
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1825
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 215
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 1776
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 269
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 75
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 7827
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 76424
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 364
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 475
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 66908
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 11969
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 381
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 3132
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 14032
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 1361
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 381
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 3132
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 2355
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 78
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 569
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 381
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 381
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 569
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 51790
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 569
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 1952
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 79
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 1643
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 12242
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 591
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 43
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 1126
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 17428
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 2812
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 2970
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 89
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 444
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 23528
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 7501
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 67790
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 946
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 79
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 66908
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 297
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 79
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 135
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 76424
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 569
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 105653
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 66908
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 4393
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 779
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 5431
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 3294
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 17976
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 381
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 4393
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 105
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 380
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 884
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 2452
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 884
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 2061
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 884
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1701
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 12
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 1007
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 80
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 1390
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 47671
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 884
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 15655
Number of times BBC is called for com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: Line 1881: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 135
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 381
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 37828
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 6054
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 779
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 7466
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 779
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 253
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 111
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 61
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 7679
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1487
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 1135
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 105
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 196
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 43
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 1777
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 51424
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 50
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 2922
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 174
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 672: 33
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 43
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 1482
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 1776
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 135
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 7593
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 9736
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 2806
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 5842
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 4912
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 7593
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 4912
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 4301
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 105
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 779
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 779
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 400
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 4602
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 536
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 884
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 135
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 340
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 364
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 105
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 1184
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 105
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 160
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 135
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 135
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 9956
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 16876
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 884
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 7651
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 135
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 678
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 2970
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 135
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 1393
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 381
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 6331
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 135
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 833
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 135
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 2061
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 135
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 833
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 68167
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 833
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 1581
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 833
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 8708
Number of times BBC is called for com.google.javascript.rhino.Node.newString(ILjava/lang/String;II)Lcom/google/javascript/rhino/Node;: root-Branch: 135
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 1768
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 545
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 215
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 1814
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 8836
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 90
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 66
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 1776
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 297
Number of times BBC is called for com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 22040
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 3532
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 4313
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 6853
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 381
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 3132
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 297
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 215
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 440
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 606
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1518
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1768
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 66908
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 1007
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 4395
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 1776
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 475
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 31345
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 381
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 26
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 3308
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 381
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 117
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 825
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 4299
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 884
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 1643
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 1643
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 215
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 569
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 12662
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 5327
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 7651
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 91
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 1234
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 3212
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 7769
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 6369
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 13183
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 2014
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 2922
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 569
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 83
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 2574
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 884
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 2187
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 475
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 779
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 553
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 1126
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 779
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 14
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 15980
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 1155
Number of times BBC is called for com.google.javascript.rhino.Node.newString(ILjava/lang/String;II)Lcom/google/javascript/rhino/Node;: Line 522: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 3799
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 4076
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 4313
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 3419
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 2812
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 746
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 381
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 1126
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 601
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: I4 Branch 142 IF_ICMPNE L1209 - false: 22
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 1390
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 1126
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 117
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 1126
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 5425
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 215
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 475
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 1126
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 1814
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 1126
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 1126
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 569
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 135
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 109
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 1390
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 200
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 569
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 13889
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 13889
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false: 33
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 447
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 19448
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 4912
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 1126
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 68167
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 246
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 475
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 3923
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 804
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 1594
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 381
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 381
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 637
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 1791
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 2715
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 215
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 23579
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 135
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 381
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 1135
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1888: 43
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1889: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 77
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 145
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 381
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 6270
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 79
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 189
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 7844
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 27515
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 7324
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 4074
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 475
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 297
Number of times BBC is called for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 215
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 95
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 1121
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 1981
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 1390
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 381
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 606
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - true: 217
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 15796
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 3
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 5432
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 26
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 443
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 3294
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 381
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 4226
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 7593
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 937
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 275
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 12323
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false: 75
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 2138
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 135
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 59297
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 59297
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 2199
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 4154
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 28676
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 779
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 16564
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 135
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 135
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 135
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 2329
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 1007
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 27153
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 1390
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 180
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 884
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 3076
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 207
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 475
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 475
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 2122
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 215
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 3025
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 475
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1446: 43
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 321
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 4
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 1672
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 297
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 4602
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 601
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 622: 75
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 1007
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 4297
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 1007
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 111
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 111
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 111
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 5357
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 111
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 788
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 269
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 111
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 12
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 30
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 59297
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 50
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 6270
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1768
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 59297
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 215
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 59297
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 59297
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 13510
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 721
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 5147
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 59297
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 59297
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 1135
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 5147
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - true: 4
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 5147
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 49336
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 297
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 487
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 487
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 13402
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 13402
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 17651
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 66908
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 5976
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 297
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 627
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 360
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 17306
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 297
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 30863
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 1776
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 1390
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 1007
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 215
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 16480
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 1776
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 1776
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 13781
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 28386
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 25176
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 2978
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 1849
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 884
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 569
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 884
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 4912
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 202
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 1390
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 15403
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 381
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 569
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 1594
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 5675
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 1390
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 1007
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 245
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 2548
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 2660
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 1007
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 481
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 149
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 26
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 19384
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 1776
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 2812
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 3584
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 2355
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 19203
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 297
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 475
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 466: 265
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 833
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 381
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 1007
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 24885
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 43
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 108
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 29219
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 569
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 109
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 467: 265
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 468: 265
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 13781
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 5863
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 606
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 43
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 135
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 728
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 135
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 1816
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 9956
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 43
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 1007
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 395
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 215
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 215
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 17335
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 381
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 1045
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 1474
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 1135
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 3867
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 813
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 105653
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 11093
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 10
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 4425
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 135
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 475
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 1390
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 1513
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 3017
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 12102
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 3617
Number of times BBC is called in total: 5554671
* Search finished after 604s and 732 generations, 319663 statements, best individual has fitness: 2568.0
* Minimizing test suite
[MASTER] 10:56:18.477 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 853
* Number of covered goals: 807
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 714
* Number of covered goals: 642
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 108
* Number of covered goals: 108
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 530
* Number of covered goals: 483
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 4536
* Number of covered goals: 2416
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 606
* Generated 865 tests with total length 13009
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:57:25.557 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6779166666666666% of time used, but only 37/865 tests minimized), falling back to using all assertions
[MASTER] 10:57:45.016 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
[MASTER] 10:57:55.017 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 10 seconds more than allowed.
[MASTER] 10:57:58.524 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_42_1628161078175/com/google/javascript/rhino/Node_42_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_42_1628161078175/com/google/javascript/rhino/Node_42_tmp__ESTest_scaffolding.java]]
[MASTER] 10:57:58.524 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:58.524 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:58.527 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 229
[MASTER] 10:57:58.529 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_42_1628161078175/com/google/javascript/rhino/Node_42_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:57:58 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_42_tmp__ESTest extends Node_42_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(0);
21:       assertNotNull(node0);
22:       assertFalse(node0.isReturn());
23:       assertFalse(node0.isOr());
24:       assertFalse(node0.isAssignAdd());
25:       assertEquals((-1), node0.getLineno());
26:       assertFalse(node0.isLabel());
27:       assertFalse(node0.isDo());
28:       assertEquals((-1), node0.getSourcePosition());
29:       assertFalse(node0.isNumber());
30:       assertFalse(node0.isAdd());
31:       assertFalse(node0.isNew());
32:       assertFalse(node0.isVar());
33:       assertFalse(node0.isStringKey());
34:       assertFalse(node0.isLabelName());
35:       assertFalse(node0.isCast());
36:       assertFalse(node0.isContinue());
37:       assertFalse(node0.isGetProp());
38:       assertEquals(0, node0.getChildCount());
39:       assertFalse(node0.isNull());
40:       assertFalse(node0.isAnd());
41:       assertFalse(node0.isNot());
42:       assertFalse(node0.isObjectLit());
43:       assertEquals(0, node0.getType());
44:       assertFalse(node0.isVoid());
45:       assertFalse(node0.isTrue());
46:       assertFalse(node0.isWhile());
47:       assertFalse(node0.isAssign());
48:       assertFalse(node0.isName());
49:       assertFalse(node0.isDelProp());
50:       assertFalse(node0.isGetElem());
51:       assertFalse(node0.isDec());
52:       assertFalse(node0.hasChildren());
53:       assertFalse(node0.isBreak());
54:       assertFalse(node0.isComma());
55:       assertFalse(node0.isCall());
56:       assertFalse(node0.isExprResult());
57:       assertFalse(node0.isTypeOf());
58:       assertFalse(node0.isNE());
59:       assertFalse(node0.isIf());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isGetterDef());
62:       assertFalse(node0.isCase());
63:       assertFalse(node0.isInc());
64:       assertFalse(node0.isIn());
65:       assertFalse(node0.isString());
66:       assertFalse(node0.isDebugger());
67:       assertFalse(node0.isArrayLit());
68:       assertEquals((-1), node0.getCharno());
69:       assertFalse(node0.isSwitch());
70:       assertFalse(node0.isDefaultCase());
71:       assertFalse(node0.isThrow());
72:       assertFalse(node0.isFunction());
73:       assertFalse(node0.isFalse());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isParamList());
76:       assertFalse(node0.isSetterDef());
77:       assertFalse(node0.isScript());
78:       assertFalse(node0.isBlock());
79:       assertFalse(node0.isTry());
80:       assertFalse(node0.isHook());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.isFor());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isCatch());
86:       assertFalse(node0.isRegExp());
87:       assertFalse(node0.isInstanceOf());
88:       assertEquals(29, Node.JSDOC_INFO_PROP);
89:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
90:       assertEquals(56, Node.CHANGE_TIME);
91:       assertEquals(2, Node.POST_FLAG);
92:       assertEquals(47, Node.IS_DISPATCHER);
93:       assertEquals(32, Node.INCRDECR_PROP);
94:       assertEquals(53, Node.INPUT_ID);
95:       assertEquals(1, Node.DECR_FLAG);
96:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
97:       assertEquals(49, Node.DIRECT_EVAL);
98:       assertEquals(12, Node.COLUMN_BITS);
99:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
100:       assertEquals(36, Node.QUOTED_PROP);
101:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
102:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
103:       assertEquals(4095, Node.COLUMN_MASK);
104:       assertEquals(48, Node.DIRECTIVES);
105:       assertEquals(37, Node.OPT_ARG_NAME);
106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
107:       assertEquals(50, Node.FREE_CALL);
108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(8, Node.FLAG_NO_THROWS);
111:       assertEquals(57, Node.REFLECTED_OBJECT);
112:       assertEquals(52, Node.LENGTH);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(39, Node.EMPTY_BLOCK);
115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
116:       assertEquals(15, Node.NO_SIDE_EFFECTS);
117:       assertEquals(30, Node.VAR_ARGS_NAME);
118:       assertEquals(43, Node.IS_CONSTANT_NAME);
119:       assertEquals(57, Node.LAST_PROP);
120:       assertEquals(54, Node.SLASH_V);
121:       assertEquals(51, Node.STATIC_SOURCE_FILE);
122:       assertEquals(46, Node.IS_NAMESPACE);
123:       assertEquals(40, Node.ORIGINALNAME_PROP);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertNotNull(iterable0);
127:       assertFalse(node0.isReturn());
128:       assertFalse(node0.isOr());
129:       assertFalse(node0.isAssignAdd());
130:       assertEquals((-1), node0.getLineno());
131:       assertFalse(node0.isLabel());
132:       assertFalse(node0.isDo());
133:       assertEquals((-1), node0.getSourcePosition());
134:       assertFalse(node0.isNumber());
135:       assertFalse(node0.isAdd());
136:       assertFalse(node0.isNew());
137:       assertFalse(node0.isVar());
138:       assertFalse(node0.isStringKey());
139:       assertFalse(node0.isLabelName());
140:       assertFalse(node0.isCast());
141:       assertFalse(node0.isContinue());
142:       assertFalse(node0.isGetProp());
143:       assertEquals(0, node0.getChildCount());
144:       assertFalse(node0.isNull());
145:       assertFalse(node0.isAnd());
146:       assertFalse(node0.isNot());
147:       assertFalse(node0.isObjectLit());
148:       assertEquals(0, node0.getType());
149:       assertFalse(node0.isVoid());
150:       assertFalse(node0.isTrue());
151:       assertFalse(node0.isWhile());
152:       assertFalse(node0.isAssign());
153:       assertFalse(node0.isName());
154:       assertFalse(node0.isDelProp());
155:       assertFalse(node0.isGetElem());
156:       assertFalse(node0.isDec());
157:       assertFalse(node0.hasChildren());
158:       assertFalse(node0.isBreak());
159:       assertFalse(node0.isComma());
160:       assertFalse(node0.isCall());
161:       assertFalse(node0.isExprResult());
162:       assertFalse(node0.isTypeOf());
163:       assertFalse(node0.isNE());
164:       assertFalse(node0.isIf());
165:       assertFalse(node0.isEmpty());
166:       assertFalse(node0.isGetterDef());
167:       assertFalse(node0.isCase());
168:       assertFalse(node0.isInc());
169:       assertFalse(node0.isIn());
170:       assertFalse(node0.isString());
171:       assertFalse(node0.isDebugger());
172:       assertFalse(node0.isArrayLit());
173:       assertEquals((-1), node0.getCharno());
174:       assertFalse(node0.isSwitch());
175:       assertFalse(node0.isDefaultCase());
176:       assertFalse(node0.isThrow());
177:       assertFalse(node0.isFunction());
178:       assertFalse(node0.isFalse());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isParamList());
181:       assertFalse(node0.isSetterDef());
182:       assertFalse(node0.isScript());
183:       assertFalse(node0.isBlock());
184:       assertFalse(node0.isTry());
185:       assertFalse(node0.isHook());
186:       assertFalse(node0.hasOneChild());
187:       assertFalse(node0.isWith());
188:       assertFalse(node0.isFor());
189:       assertFalse(node0.hasMoreThanOneChild());
190:       assertFalse(node0.isCatch());
191:       assertFalse(node0.isRegExp());
192:       assertFalse(node0.isInstanceOf());
193:       assertEquals(29, Node.JSDOC_INFO_PROP);
194:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
195:       assertEquals(56, Node.CHANGE_TIME);
196:       assertEquals(2, Node.POST_FLAG);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(32, Node.INCRDECR_PROP);
199:       assertEquals(53, Node.INPUT_ID);
200:       assertEquals(1, Node.DECR_FLAG);
201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
202:       assertEquals(49, Node.DIRECT_EVAL);
203:       assertEquals(12, Node.COLUMN_BITS);
204:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
205:       assertEquals(36, Node.QUOTED_PROP);
206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
208:       assertEquals(4095, Node.COLUMN_MASK);
209:       assertEquals(48, Node.DIRECTIVES);
210:       assertEquals(37, Node.OPT_ARG_NAME);
211:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
212:       assertEquals(50, Node.FREE_CALL);
213:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
215:       assertEquals(8, Node.FLAG_NO_THROWS);
216:       assertEquals(57, Node.REFLECTED_OBJECT);
217:       assertEquals(52, Node.LENGTH);
218:       assertEquals(55, Node.INFERRED_FUNCTION);
219:       assertEquals(39, Node.EMPTY_BLOCK);
220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
221:       assertEquals(15, Node.NO_SIDE_EFFECTS);
222:       assertEquals(30, Node.VAR_ARGS_NAME);
223:       assertEquals(43, Node.IS_CONSTANT_NAME);
224:       assertEquals(57, Node.LAST_PROP);
225:       assertEquals(54, Node.SLASH_V);
226:       assertEquals(51, Node.STATIC_SOURCE_FILE);
227:       assertEquals(46, Node.IS_NAMESPACE);
228:       assertEquals(40, Node.ORIGINALNAME_PROP);
229:       assertFalse(iterable0.contains(node0));
230:       
231:       Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
232:       assertNotNull(node_AncestorIterable0);
233:       assertFalse(node0.isReturn());
234:       assertFalse(node0.isOr());
235:       assertFalse(node0.isAssignAdd());
236:       assertEquals((-1), node0.getLineno());
237:       assertFalse(node0.isLabel());
238:       assertFalse(node0.isDo());
239:       assertEquals((-1), node0.getSourcePosition());
240:       assertFalse(node0.isNumber());
241:       assertFalse(node0.isAdd());
242:       assertFalse(node0.isNew());
243:       assertFalse(node0.isVar());
244:       assertFalse(node0.isStringKey());
245:       assertFalse(node0.isLabelName());
246:       assertFalse(node0.isCast());
247:       assertFalse(node0.isContinue());
248:       assertFalse(node0.isGetProp());
249:       assertEquals(0, node0.getChildCount());
250:       assertFalse(node0.isNull());
251:       assertFalse(node0.isAnd());
252:       assertFalse(node0.isNot());
253:       assertFalse(node0.isObjectLit());
254:       assertEquals(0, node0.getType());
255:       assertFalse(node0.isVoid());
256:       assertFalse(node0.isTrue());
257:       assertFalse(node0.isWhile());
258:       assertFalse(node0.isAssign());
259:       assertFalse(node0.isName());
260:       assertFalse(node0.isDelProp());
261:       assertFalse(node0.isGetElem());
262:       assertFalse(node0.isDec());
263:       assertFalse(node0.hasChildren());
264:       assertFalse(node0.isBreak());
265:       assertFalse(node0.isComma());
266:       assertFalse(node0.isCall());
267:       assertFalse(node0.isExprResult());
268:       assertFalse(node0.isTypeOf());
269:       assertFalse(node0.isNE());
270:       assertFalse(node0.isIf());
271:       assertFalse(node0.isEmpty());
272:       assertFalse(node0.isGetterDef());
273:       assertFalse(node0.isCase());
274:       assertFalse(node0.isInc());
275:       assertFalse(node0.isIn());
276:       assertFalse(node0.isString());
277:       assertFalse(node0.isDebugger());
278:       assertFalse(node0.isArrayLit());
279:       assertEquals((-1), node0.getCharno());
280:       assertFalse(node0.isSwitch());
281:       assertFalse(node0.isDefaultCase());
282:       assertFalse(node0.isThrow());
283:       assertFalse(node0.isFunction());
284:       assertFalse(node0.isFalse());
285:       assertFalse(node0.isThis());
286:       assertFalse(node0.isParamList());
287:       assertFalse(node0.isSetterDef());
288:       assertFalse(node0.isScript());
289:       assertFalse(node0.isBlock());
290:       assertFalse(node0.isTry());
291:       assertFalse(node0.isHook());
292:       assertFalse(node0.hasOneChild());
293:       assertFalse(node0.isWith());
294:       assertFalse(node0.isFor());
295:       assertFalse(node0.hasMoreThanOneChild());
296:       assertFalse(node0.isCatch());
297:       assertFalse(node0.isRegExp());
298:       assertFalse(node0.isInstanceOf());
299:       assertEquals(29, Node.JSDOC_INFO_PROP);
300:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
301:       assertEquals(56, Node.CHANGE_TIME);
302:       assertEquals(2, Node.POST_FLAG);
303:       assertEquals(47, Node.IS_DISPATCHER);
304:       assertEquals(32, Node.INCRDECR_PROP);
305:       assertEquals(53, Node.INPUT_ID);
306:       assertEquals(1, Node.DECR_FLAG);
307:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
308:       assertEquals(49, Node.DIRECT_EVAL);
309:       assertEquals(12, Node.COLUMN_BITS);
310:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
311:       assertEquals(36, Node.QUOTED_PROP);
312:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
313:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
314:       assertEquals(4095, Node.COLUMN_MASK);
315:       assertEquals(48, Node.DIRECTIVES);
316:       assertEquals(37, Node.OPT_ARG_NAME);
317:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
318:       assertEquals(50, Node.FREE_CALL);
319:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
321:       assertEquals(8, Node.FLAG_NO_THROWS);
322:       assertEquals(57, Node.REFLECTED_OBJECT);
323:       assertEquals(52, Node.LENGTH);
324:       assertEquals(55, Node.INFERRED_FUNCTION);
325:       assertEquals(39, Node.EMPTY_BLOCK);
326:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
328:       assertEquals(30, Node.VAR_ARGS_NAME);
329:       assertEquals(43, Node.IS_CONSTANT_NAME);
330:       assertEquals(57, Node.LAST_PROP);
331:       assertEquals(54, Node.SLASH_V);
332:       assertEquals(51, Node.STATIC_SOURCE_FILE);
333:       assertEquals(46, Node.IS_NAMESPACE);
334:       assertEquals(40, Node.ORIGINALNAME_PROP);
335:       
336:       Node node1 = Node.newString(49, "");
337:       assertNotNull(node1);
338:       assertFalse(node1.isInc());
339:       assertEquals((-1), node1.getCharno());
340:       assertFalse(node1.isString());
341:       assertFalse(node1.isSwitch());
342:       assertFalse(node1.isComma());
343:       assertFalse(node1.isThis());
344:       assertEquals(49, node1.getType());
345:       assertFalse(node1.isBreak());
346:       assertFalse(node1.isGetProp());
347:       assertFalse(node1.isGetterDef());
348:       assertFalse(node1.isInstanceOf());
349:       assertFalse(node1.isCase());
350:       assertFalse(node1.isHook());
351:       assertFalse(node1.isFor());
352:       assertFalse(node1.isTry());
353:       assertFalse(node1.isExprResult());
354:       assertFalse(node1.isTrue());
355:       assertFalse(node1.isVoid());
356:       assertFalse(node1.isScript());
357:       assertFalse(node1.isArrayLit());
358:       assertFalse(node1.isGetElem());
359:       assertFalse(node1.isDelProp());
360:       assertFalse(node1.isLabelName());
361:       assertFalse(node1.isNull());
362:       assertFalse(node1.isLabel());
363:       assertFalse(node1.isOr());
364:       assertFalse(node1.isEmpty());
365:       assertEquals(0, node1.getChildCount());
366:       assertTrue(node1.isThrow());
367:       assertFalse(node1.isVar());
368:       assertFalse(node1.isDo());
369:       assertFalse(node1.isDefaultCase());
370:       assertFalse(node1.isAssignAdd());
371:       assertFalse(node1.isAdd());
372:       assertFalse(node1.isBlock());
373:       assertFalse(node1.isNew());
374:       assertFalse(node1.isContinue());
375:       assertFalse(node1.isCall());
376:       assertFalse(node1.isStringKey());
377:       assertEquals((-1), node1.getLineno());
378:       assertFalse(node1.isName());
379:       assertFalse(node1.isParamList());
380:       assertEquals((-1), node1.getSourcePosition());
381:       assertFalse(node1.hasChildren());
382:       assertFalse(node1.isAssign());
383:       assertFalse(node1.isDec());
384:       assertFalse(node1.isNumber());
385:       assertFalse(node1.isTypeOf());
386:       assertFalse(node1.hasMoreThanOneChild());
387:       assertFalse(node1.hasOneChild());
388:       assertFalse(node1.isWhile());
389:       assertFalse(node1.isReturn());
390:       assertFalse(node1.isDebugger());
391:       assertFalse(node1.isFunction());
392:       assertFalse(node1.isNot());
393:       assertFalse(node1.isRegExp());
394:       assertFalse(node1.isWith());
395:       assertFalse(node1.isAnd());
396:       assertFalse(node1.isObjectLit());
397:       assertFalse(node1.isCast());
398:       assertFalse(node1.isCatch());
399:       assertFalse(node1.isIf());
400:       assertFalse(node1.isNE());
401:       assertFalse(node1.isSetterDef());
402:       assertFalse(node1.isFalse());
403:       assertFalse(node1.isIn());
404:       assertEquals(1, Node.DECR_FLAG);
405:       assertEquals(32, Node.INCRDECR_PROP);
406:       assertEquals(49, Node.DIRECT_EVAL);
407:       assertEquals(15, Node.NO_SIDE_EFFECTS);
408:       assertEquals(37, Node.OPT_ARG_NAME);
409:       assertEquals(54, Node.SLASH_V);
410:       assertEquals(52, Node.LENGTH);
411:       assertEquals(46, Node.IS_NAMESPACE);
412:       assertEquals(56, Node.CHANGE_TIME);
413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
414:       assertEquals(57, Node.REFLECTED_OBJECT);
415:       assertEquals(40, Node.ORIGINALNAME_PROP);
416:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
417:       assertEquals(29, Node.JSDOC_INFO_PROP);
418:       assertEquals(53, Node.INPUT_ID);
419:       assertEquals(39, Node.EMPTY_BLOCK);
420:       assertEquals(2, Node.POST_FLAG);
421:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
422:       assertEquals(57, Node.LAST_PROP);
423:       assertEquals(30, Node.VAR_ARGS_NAME);
424:       assertEquals(47, Node.IS_DISPATCHER);
425:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
426:       assertEquals(55, Node.INFERRED_FUNCTION);
427:       assertEquals(4095, Node.COLUMN_MASK);
428:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
429:       assertEquals(48, Node.DIRECTIVES);
430:       assertEquals(43, Node.IS_CONSTANT_NAME);
431:       assertEquals(8, Node.FLAG_NO_THROWS);
432:       assertEquals(36, Node.QUOTED_PROP);
433:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
434:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
435:       assertEquals(50, Node.FREE_CALL);
436:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
437:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
438:       assertEquals(12, Node.COLUMN_BITS);
439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
440:       assertFalse(node1.equals((Object)node0));
441:       
442:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
443:       assertNotNull(node_NodeMismatch0);
444:       assertFalse(node0.isReturn());
445:       assertFalse(node0.isOr());
446:       assertFalse(node0.isAssignAdd());
447:       assertEquals((-1), node0.getLineno());
448:       assertFalse(node0.isLabel());
449:       assertFalse(node0.isDo());
450:       assertEquals((-1), node0.getSourcePosition());
451:       assertFalse(node0.isNumber());
452:       assertFalse(node0.isAdd());
453:       assertFalse(node0.isNew());
454:       assertFalse(node0.isVar());
455:       assertFalse(node0.isStringKey());
456:       assertFalse(node0.isLabelName());
457:       assertFalse(node0.isCast());
458:       assertFalse(node0.isContinue());
459:       assertFalse(node0.isGetProp());
460:       assertEquals(0, node0.getChildCount());
461:       assertFalse(node0.isNull());
462:       assertFalse(node0.isAnd());
463:       assertFalse(node0.isNot());
464:       assertFalse(node0.isObjectLit());
465:       assertEquals(0, node0.getType());
466:       assertFalse(node0.isVoid());
467:       assertFalse(node0.isTrue());
468:       assertFalse(node0.isWhile());
469:       assertFalse(node0.isAssign());
470:       assertFalse(node0.isName());
471:       assertFalse(node0.isDelProp());
472:       assertFalse(node0.isGetElem());
473:       assertFalse(node0.isDec());
474:       assertFalse(node0.hasChildren());
475:       assertFalse(node0.isBreak());
476:       assertFalse(node0.isComma());
477:       assertFalse(node0.isCall());
478:       assertFalse(node0.isExprResult());
479:       assertFalse(node0.isTypeOf());
480:       assertFalse(node0.isNE());
481:       assertFalse(node0.isIf());
482:       assertFalse(node0.isEmpty());
483:       assertFalse(node0.isGetterDef());
484:       assertFalse(node0.isCase());
485:       assertFalse(node0.isInc());
486:       assertFalse(node0.isIn());
487:       assertFalse(node0.isString());
488:       assertFalse(node0.isDebugger());
489:       assertFalse(node0.isArrayLit());
490:       assertEquals((-1), node0.getCharno());
491:       assertFalse(node0.isSwitch());
492:       assertFalse(node0.isDefaultCase());
493:       assertFalse(node0.isThrow());
494:       assertFalse(node0.isFunction());
495:       assertFalse(node0.isFalse());
496:       assertFalse(node0.isThis());
497:       assertFalse(node0.isParamList());
498:       assertFalse(node0.isSetterDef());
499:       assertFalse(node0.isScript());
500:       assertFalse(node0.isBlock());
501:       assertFalse(node0.isTry());
502:       assertFalse(node0.isHook());
503:       assertFalse(node0.hasOneChild());
504:       assertFalse(node0.isWith());
505:       assertFalse(node0.isFor());
506:       assertFalse(node0.hasMoreThanOneChild());
507:       assertFalse(node0.isCatch());
508:       assertFalse(node0.isRegExp());
509:       assertFalse(node0.isInstanceOf());
510:       assertFalse(node1.isInc());
511:       assertEquals((-1), node1.getCharno());
512:       assertFalse(node1.isString());
513:       assertFalse(node1.isSwitch());
514:       assertFalse(node1.isComma());
515:       assertFalse(node1.isThis());
516:       assertEquals(49, node1.getType());
517:       assertFalse(node1.isBreak());
518:       assertFalse(node1.isGetProp());
519:       assertFalse(node1.isGetterDef());
520:       assertFalse(node1.isInstanceOf());
521:       assertFalse(node1.isCase());
522:       assertFalse(node1.isHook());
523:       assertFalse(node1.isFor());
524:       assertFalse(node1.isTry());
525:       assertFalse(node1.isExprResult());
526:       assertFalse(node1.isTrue());
527:       assertFalse(node1.isVoid());
528:       assertFalse(node1.isScript());
529:       assertFalse(node1.isArrayLit());
530:       assertFalse(node1.isGetElem());
531:       assertFalse(node1.isDelProp());
532:       assertFalse(node1.isLabelName());
533:       assertFalse(node1.isNull());
534:       assertFalse(node1.isLabel());
535:       assertFalse(node1.isOr());
536:       assertFalse(node1.isEmpty());
537:       assertEquals(0, node1.getChildCount());
538:       assertTrue(node1.isThrow());
539:       assertFalse(node1.isVar());
540:       assertFalse(node1.isDo());
541:       assertFalse(node1.isDefaultCase());
542:       assertFalse(node1.isAssignAdd());
543:       assertFalse(node1.isAdd());
544:       assertFalse(node1.isBlock());
545:       assertFalse(node1.isNew());
546:       assertFalse(node1.isContinue());
547:       assertFalse(node1.isCall());
548:       assertFalse(node1.isStringKey());
549:       assertEquals((-1), node1.getLineno());
550:       assertFalse(node1.isName());
551:       assertFalse(node1.isParamList());
552:       assertEquals((-1), node1.getSourcePosition());
553:       assertFalse(node1.hasChildren());
554:       assertFalse(node1.isAssign());
555:       assertFalse(node1.isDec());
556:       assertFalse(node1.isNumber());
557:       assertFalse(node1.isTypeOf());
558:       assertFalse(node1.hasMoreThanOneChild());
559:       assertFalse(node1.hasOneChild());
560:       assertFalse(node1.isWhile());
561:       assertFalse(node1.isReturn());
562:       assertFalse(node1.isDebugger());
563:       assertFalse(node1.isFunction());
564:       assertFalse(node1.isNot());
565:       assertFalse(node1.isRegExp());
566:       assertFalse(node1.isWith());
567:       assertFalse(node1.isAnd());
568:       assertFalse(node1.isObjectLit());
569:       assertFalse(node1.isCast());
570:       assertFalse(node1.isCatch());
571:       assertFalse(node1.isIf());
572:       assertFalse(node1.isNE());
573:       assertFalse(node1.isSetterDef());
574:       assertFalse(node1.isFalse());
575:       assertFalse(node1.isIn());
576:       assertEquals(29, Node.JSDOC_INFO_PROP);
577:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
578:       assertEquals(56, Node.CHANGE_TIME);
579:       assertEquals(2, Node.POST_FLAG);
580:       assertEquals(47, Node.IS_DISPATCHER);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(53, Node.INPUT_ID);
583:       assertEquals(1, Node.DECR_FLAG);
584:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
585:       assertEquals(49, Node.DIRECT_EVAL);
586:       assertEquals(12, Node.COLUMN_BITS);
587:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
588:       assertEquals(36, Node.QUOTED_PROP);
589:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
590:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
591:       assertEquals(4095, Node.COLUMN_MASK);
592:       assertEquals(48, Node.DIRECTIVES);
593:       assertEquals(37, Node.OPT_ARG_NAME);
594:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
595:       assertEquals(50, Node.FREE_CALL);
596:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
597:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
598:       assertEquals(8, Node.FLAG_NO_THROWS);
599:       assertEquals(57, Node.REFLECTED_OBJECT);
600:       assertEquals(52, Node.LENGTH);
601:       assertEquals(55, Node.INFERRED_FUNCTION);
602:       assertEquals(39, Node.EMPTY_BLOCK);
603:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
604:       assertEquals(15, Node.NO_SIDE_EFFECTS);
605:       assertEquals(30, Node.VAR_ARGS_NAME);
606:       assertEquals(43, Node.IS_CONSTANT_NAME);
607:       assertEquals(57, Node.LAST_PROP);
608:       assertEquals(54, Node.SLASH_V);
609:       assertEquals(51, Node.STATIC_SOURCE_FILE);
610:       assertEquals(46, Node.IS_NAMESPACE);
611:       assertEquals(40, Node.ORIGINALNAME_PROP);
612:       assertEquals(1, Node.DECR_FLAG);
613:       assertEquals(32, Node.INCRDECR_PROP);
614:       assertEquals(49, Node.DIRECT_EVAL);
615:       assertEquals(15, Node.NO_SIDE_EFFECTS);
616:       assertEquals(37, Node.OPT_ARG_NAME);
617:       assertEquals(54, Node.SLASH_V);
618:       assertEquals(52, Node.LENGTH);
619:       assertEquals(46, Node.IS_NAMESPACE);
620:       assertEquals(56, Node.CHANGE_TIME);
621:       assertEquals(51, Node.STATIC_SOURCE_FILE);
622:       assertEquals(57, Node.REFLECTED_OBJECT);
623:       assertEquals(40, Node.ORIGINALNAME_PROP);
624:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
625:       assertEquals(29, Node.JSDOC_INFO_PROP);
626:       assertEquals(53, Node.INPUT_ID);
627:       assertEquals(39, Node.EMPTY_BLOCK);
628:       assertEquals(2, Node.POST_FLAG);
629:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
630:       assertEquals(57, Node.LAST_PROP);
631:       assertEquals(30, Node.VAR_ARGS_NAME);
632:       assertEquals(47, Node.IS_DISPATCHER);
633:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
634:       assertEquals(55, Node.INFERRED_FUNCTION);
635:       assertEquals(4095, Node.COLUMN_MASK);
636:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
637:       assertEquals(48, Node.DIRECTIVES);
638:       assertEquals(43, Node.IS_CONSTANT_NAME);
639:       assertEquals(8, Node.FLAG_NO_THROWS);
640:       assertEquals(36, Node.QUOTED_PROP);
641:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
642:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
643:       assertEquals(50, Node.FREE_CALL);
644:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
645:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
646:       assertEquals(12, Node.COLUMN_BITS);
647:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
648:       assertFalse(node0.equals((Object)node1));
649:       assertFalse(node1.equals((Object)node0));
650:       
651:       boolean boolean0 = node0.wasEmptyNode();
652:       assertFalse(boolean0);
653:       assertFalse(node0.isReturn());
654:       assertFalse(node0.isOr());
655:       assertFalse(node0.isAssignAdd());
656:       assertEquals((-1), node0.getLineno());
657:       assertFalse(node0.isLabel());
658:       assertFalse(node0.isDo());
659:       assertEquals((-1), node0.getSourcePosition());
660:       assertFalse(node0.isNumber());
661:       assertFalse(node0.isAdd());
662:       assertFalse(node0.isNew());
663:       assertFalse(node0.isVar());
664:       assertFalse(node0.isStringKey());
665:       assertFalse(node0.isLabelName());
666:       assertFalse(node0.isCast());
667:       assertFalse(node0.isContinue());
668:       assertFalse(node0.isGetProp());
669:       assertEquals(0, node0.getChildCount());
670:       assertFalse(node0.isNull());
671:       assertFalse(node0.isAnd());
672:       assertFalse(node0.isNot());
673:       assertFalse(node0.isObjectLit());
674:       assertEquals(0, node0.getType());
675:       assertFalse(node0.isVoid());
676:       assertFalse(node0.isTrue());
677:       assertFalse(node0.isWhile());
678:       assertFalse(node0.isAssign());
679:       assertFalse(node0.isName());
680:       assertFalse(node0.isDelProp());
681:       assertFalse(node0.isGetElem());
682:       assertFalse(node0.isDec());
683:       assertFalse(node0.hasChildren());
684:       assertFalse(node0.isBreak());
685:       assertFalse(node0.isComma());
686:       assertFalse(node0.isCall());
687:       assertFalse(node0.isExprResult());
688:       assertFalse(node0.isTypeOf());
689:       assertFalse(node0.isNE());
690:       assertFalse(node0.isIf());
691:       assertFalse(node0.isEmpty());
692:       assertFalse(node0.isGetterDef());
693:       assertFalse(node0.isCase());
694:       assertFalse(node0.isInc());
695:       assertFalse(node0.isIn());
696:       assertFalse(node0.isString());
697:       assertFalse(node0.isDebugger());
698:       assertFalse(node0.isArrayLit());
699:       assertEquals((-1), node0.getCharno());
700:       assertFalse(node0.isSwitch());
701:       assertFalse(node0.isDefaultCase());
702:       assertFalse(node0.isThrow());
703:       assertFalse(node0.isFunction());
704:       assertFalse(node0.isFalse());
705:       assertFalse(node0.isThis());
706:       assertFalse(node0.isParamList());
707:       assertFalse(node0.isSetterDef());
708:       assertFalse(node0.isScript());
709:       assertFalse(node0.isBlock());
710:       assertFalse(node0.isTry());
711:       assertFalse(node0.isHook());
712:       assertFalse(node0.hasOneChild());
713:       assertFalse(node0.isWith());
714:       assertFalse(node0.isFor());
715:       assertFalse(node0.hasMoreThanOneChild());
716:       assertFalse(node0.isCatch());
717:       assertFalse(node0.isRegExp());
718:       assertFalse(node0.isInstanceOf());
719:       assertEquals(29, Node.JSDOC_INFO_PROP);
720:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
721:       assertEquals(56, Node.CHANGE_TIME);
722:       assertEquals(2, Node.POST_FLAG);
723:       assertEquals(47, Node.IS_DISPATCHER);
724:       assertEquals(32, Node.INCRDECR_PROP);
725:       assertEquals(53, Node.INPUT_ID);
726:       assertEquals(1, Node.DECR_FLAG);
727:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
728:       assertEquals(49, Node.DIRECT_EVAL);
729:       assertEquals(12, Node.COLUMN_BITS);
730:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
731:       assertEquals(36, Node.QUOTED_PROP);
732:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
733:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
734:       assertEquals(4095, Node.COLUMN_MASK);
735:       assertEquals(48, Node.DIRECTIVES);
736:       assertEquals(37, Node.OPT_ARG_NAME);
737:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
738:       assertEquals(50, Node.FREE_CALL);
739:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
740:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
741:       assertEquals(8, Node.FLAG_NO_THROWS);
742:       assertEquals(57, Node.REFLECTED_OBJECT);
743:       assertEquals(52, Node.LENGTH);
744:       assertEquals(55, Node.INFERRED_FUNCTION);
745:       assertEquals(39, Node.EMPTY_BLOCK);
746:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
747:       assertEquals(15, Node.NO_SIDE_EFFECTS);
748:       assertEquals(30, Node.VAR_ARGS_NAME);
749:       assertEquals(43, Node.IS_CONSTANT_NAME);
750:       assertEquals(57, Node.LAST_PROP);
751:       assertEquals(54, Node.SLASH_V);
752:       assertEquals(51, Node.STATIC_SOURCE_FILE);
753:       assertEquals(46, Node.IS_NAMESPACE);
754:       assertEquals(40, Node.ORIGINALNAME_PROP);
755:       assertFalse(node0.equals((Object)node1));
756:       
757:       Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeTypeAwareEqualsImpl(node0);
758:       assertNotSame(node_NodeMismatch1, node_NodeMismatch0);
759:       assertNotNull(node_NodeMismatch1);
760:       assertFalse(node0.isReturn());
761:       assertFalse(node0.isOr());
762:       assertFalse(node0.isAssignAdd());
763:       assertEquals((-1), node0.getLineno());
764:       assertFalse(node0.isLabel());
765:       assertFalse(node0.isDo());
766:       assertEquals((-1), node0.getSourcePosition());
767:       assertFalse(node0.isNumber());
768:       assertFalse(node0.isAdd());
769:       assertFalse(node0.isNew());
770:       assertFalse(node0.isVar());
771:       assertFalse(node0.isStringKey());
772:       assertFalse(node0.isLabelName());
773:       assertFalse(node0.isCast());
774:       assertFalse(node0.isContinue());
775:       assertFalse(node0.isGetProp());
776:       assertEquals(0, node0.getChildCount());
777:       assertFalse(node0.isNull());
778:       assertFalse(node0.isAnd());
779:       assertFalse(node0.isNot());
780:       assertFalse(node0.isObjectLit());
781:       assertEquals(0, node0.getType());
782:       assertFalse(node0.isVoid());
783:       assertFalse(node0.isTrue());
784:       assertFalse(node0.isWhile());
785:       assertFalse(node0.isAssign());
786:       assertFalse(node0.isName());
787:       assertFalse(node0.isDelProp());
788:       assertFalse(node0.isGetElem());
789:       assertFalse(node0.isDec());
790:       assertFalse(node0.hasChildren());
791:       assertFalse(node0.isBreak());
792:       assertFalse(node0.isComma());
793:       assertFalse(node0.isCall());
794:       assertFalse(node0.isExprResult());
795:       assertFalse(node0.isTypeOf());
796:       assertFalse(node0.isNE());
797:       assertFalse(node0.isIf());
798:       assertFalse(node0.isEmpty());
799:       assertFalse(node0.isGetterDef());
800:       assertFalse(node0.isCase());
801:       assertFalse(node0.isInc());
802:       assertFalse(node0.isIn());
803:       assertFalse(node0.isString());
804:       assertFalse(node0.isDebugger());
805:       assertFalse(node0.isArrayLit());
806:       assertEquals((-1), node0.getCharno());
807:       assertFalse(node0.isSwitch());
808:       assertFalse(node0.isDefaultCase());
809:       assertFalse(node0.isThrow());
810:       assertFalse(node0.isFunction());
811:       assertFalse(node0.isFalse());
812:       assertFalse(node0.isThis());
813:       assertFalse(node0.isParamList());
814:       assertFalse(node0.isSetterDef());
815:       assertFalse(node0.isScript());
816:       assertFalse(node0.isBlock());
817:       assertFalse(node0.isTry());
818:       assertFalse(node0.isHook());
819:       assertFalse(node0.hasOneChild());
820:       assertFalse(node0.isWith());
821:       assertFalse(node0.isFor());
822:       assertFalse(node0.hasMoreThanOneChild());
823:       assertFalse(node0.isCatch());
824:       assertFalse(node0.isRegExp());
825:       assertFalse(node0.isInstanceOf());
826:       assertFalse(node1.isInc());
827:       assertEquals((-1), node1.getCharno());
828:       assertFalse(node1.isString());
829:       assertFalse(node1.isSwitch());
830:       assertFalse(node1.isComma());
831:       assertFalse(node1.isThis());
832:       assertEquals(49, node1.getType());
833:       assertFalse(node1.isBreak());
834:       assertFalse(node1.isGetProp());
835:       assertFalse(node1.isGetterDef());
836:       assertFalse(node1.isInstanceOf());
837:       assertFalse(node1.isCase());
838:       assertFalse(node1.isHook());
839:       assertFalse(node1.isFor());
840:       assertFalse(node1.isTry());
841:       assertFalse(node1.isExprResult());
842:       assertFalse(node1.isTrue());
843:       assertFalse(node1.isVoid());
844:       assertFalse(node1.isScript());
845:       assertFalse(node1.isArrayLit());
846:       assertFalse(node1.isGetElem());
847:       assertFalse(node1.isDelProp());
848:       assertFalse(node1.isLabelName());
849:       assertFalse(node1.isNull());
850:       assertFalse(node1.isLabel());
851:       assertFalse(node1.isOr());
852:       assertFalse(node1.isEmpty());
853:       assertEquals(0, node1.getChildCount());
854:       assertTrue(node1.isThrow());
855:       assertFalse(node1.isVar());
856:       assertFalse(node1.isDo());
857:       assertFalse(node1.isDefaultCase());
858:       assertFalse(node1.isAssignAdd());
859:       assertFalse(node1.isAdd());
860:       assertFalse(node1.isBlock());
861:       assertFalse(node1.isNew());
862:       assertFalse(node1.isContinue());
863:       assertFalse(node1.isCall());
864:       assertFalse(node1.isStringKey());
865:       assertEquals((-1), node1.getLineno());
866:       assertFalse(node1.isName());
867:       assertFalse(node1.isParamList());
868:       assertEquals((-1), node1.getSourcePosition());
869:       assertFalse(node1.hasChildren());
870:       assertFalse(node1.isAssign());
871:       assertFalse(node1.isDec());
872:       assertFalse(node1.isNumber());
873:       assertFalse(node1.isTypeOf());
874:       assertFalse(node1.hasMoreThanOneChild());
875:       assertFalse(node1.hasOneChild());
876:       assertFalse(node1.isWhile());
877:       assertFalse(node1.isReturn());
878:       assertFalse(node1.isDebugger());
879:       assertFalse(node1.isFunction());
880:       assertFalse(node1.isNot());
881:       assertFalse(node1.isRegExp());
882:       assertFalse(node1.isWith());
883:       assertFalse(node1.isAnd());
884:       assertFalse(node1.isObjectLit());
885:       assertFalse(node1.isCast());
886:       assertFalse(node1.isCatch());
887:       assertFalse(node1.isIf());
888:       assertFalse(node1.isNE());
889:       assertFalse(node1.isSetterDef());
890:       assertFalse(node1.isFalse());
891:       assertFalse(node1.isIn());
892:       assertEquals(29, Node.JSDOC_INFO_PROP);
893:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
894:       assertEquals(56, Node.CHANGE_TIME);
895:       assertEquals(2, Node.POST_FLAG);
896:       assertEquals(47, Node.IS_DISPATCHER);
897:       assertEquals(32, Node.INCRDECR_PROP);
898:       assertEquals(53, Node.INPUT_ID);
899:       assertEquals(1, Node.DECR_FLAG);
900:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
901:       assertEquals(49, Node.DIRECT_EVAL);
902:       assertEquals(12, Node.COLUMN_BITS);
903:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
904:       assertEquals(36, Node.QUOTED_PROP);
905:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
906:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
907:       assertEquals(4095, Node.COLUMN_MASK);
908:       assertEquals(48, Node.DIRECTIVES);
909:       assertEquals(37, Node.OPT_ARG_NAME);
910:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
911:       assertEquals(50, Node.FREE_CALL);
912:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
913:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
914:       assertEquals(8, Node.FLAG_NO_THROWS);
915:       assertEquals(57, Node.REFLECTED_OBJECT);
916:       assertEquals(52, Node.LENGTH);
917:       assertEquals(55, Node.INFERRED_FUNCTION);
918:       assertEquals(39, Node.EMPTY_BLOCK);
919:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
920:       assertEquals(15, Node.NO_SIDE_EFFECTS);
921:       assertEquals(30, Node.VAR_ARGS_NAME);
922:       assertEquals(43, Node.IS_CONSTANT_NAME);
923:       assertEquals(57, Node.LAST_PROP);
924:       assertEquals(54, Node.SLASH_V);
925:       assertEquals(51, Node.STATIC_SOURCE_FILE);
926:       assertEquals(46, Node.IS_NAMESPACE);
927:       assertEquals(40, Node.ORIGINALNAME_PROP);
928:       assertEquals(1, Node.DECR_FLAG);
929:       assertEquals(32, Node.INCRDECR_PROP);
930:       assertEquals(49, Node.DIRECT_EVAL);
931:       assertEquals(15, Node.NO_SIDE_EFFECTS);
932:       assertEquals(37, Node.OPT_ARG_NAME);
933:       assertEquals(54, Node.SLASH_V);
934:       assertEquals(52, Node.LENGTH);
935:       assertEquals(46, Node.IS_NAMESPACE);
936:       assertEquals(56, Node.CHANGE_TIME);
937:       assertEquals(51, Node.STATIC_SOURCE_FILE);
938:       assertEquals(57, Node.REFLECTED_OBJECT);
939:       assertEquals(40, Node.ORIGINALNAME_PROP);
940:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
941:       assertEquals(29, Node.JSDOC_INFO_PROP);
942:       assertEquals(53, Node.INPUT_ID);
943:       assertEquals(39, Node.EMPTY_BLOCK);
944:       assertEquals(2, Node.POST_FLAG);
945:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
946:       assertEquals(57, Node.LAST_PROP);
947:       assertEquals(30, Node.VAR_ARGS_NAME);
948:       assertEquals(47, Node.IS_DISPATCHER);
949:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
950:       assertEquals(55, Node.INFERRED_FUNCTION);
951:       assertEquals(4095, Node.COLUMN_MASK);
952:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
953:       assertEquals(48, Node.DIRECTIVES);
954:       assertEquals(43, Node.IS_CONSTANT_NAME);
955:       assertEquals(8, Node.FLAG_NO_THROWS);
956:       assertEquals(36, Node.QUOTED_PROP);
957:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
958:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
959:       assertEquals(50, Node.FREE_CALL);
960:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
961:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
962:       assertEquals(12, Node.COLUMN_BITS);
963:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
964:       assertFalse(node0.equals((Object)node1));
965:       assertFalse(node1.equals((Object)node0));
966:       assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));
967:       
968:       Node[] nodeArray0 = new Node[1];
969:       nodeArray0[0] = node1;
970:       Node node2 = new Node((-1117), nodeArray0, 42, 10);
971:       assertNotNull(node2);
972:       assertEquals(1, nodeArray0.length);
973:       assertFalse(node2.isScript());
974:       assertFalse(node2.isCast());
975:       assertFalse(node2.isExprResult());
976:       assertFalse(node2.isGetElem());
977:       assertFalse(node2.isAssign());
978:       assertFalse(node2.isWith());
979:       assertFalse(node2.isTypeOf());
980:       assertFalse(node2.isDec());
981:       assertEquals(172042, node2.getSourcePosition());
982:       assertFalse(node2.isOr());
983:       assertFalse(node2.isAssignAdd());
984:       assertFalse(node2.isInstanceOf());
985:       assertFalse(node2.isBreak());
986:       assertFalse(node2.isAdd());
987:       assertFalse(node2.isBlock());
988:       assertFalse(node2.isNew());
989:       assertEquals((-1117), node2.getType());
990:       assertFalse(node2.isSwitch());
991:       assertFalse(node2.isCase());
992:       assertFalse(node2.isDo());
993:       assertFalse(node2.hasMoreThanOneChild());
994:       assertFalse(node2.isHook());
995:       assertFalse(node2.isVar());
996:       assertFalse(node2.isThis());
997:       assertEquals(1, node2.getChildCount());
998:       assertFalse(node2.isLabel());
999:       assertFalse(node2.isParamList());
1000:       assertFalse(node2.isStringKey());
1001:       assertFalse(node2.isLabelName());
1002:       assertFalse(node2.isNumber());
1003:       assertFalse(node2.isGetterDef());
1004:       assertFalse(node2.isVoid());
1005:       assertFalse(node2.isTry());
1006:       assertFalse(node2.isFunction());
1007:       assertFalse(node2.isArrayLit());
1008:       assertEquals(42, node2.getLineno());
1009:       assertFalse(node2.isFor());
1010:       assertFalse(node2.isDefaultCase());
1011:       assertFalse(node2.isRegExp());
1012:       assertTrue(node2.hasOneChild());
1013:       assertTrue(node2.hasChildren());
1014:       assertFalse(node2.isIn());
1015:       assertEquals(10, node2.getCharno());
1016:       assertFalse(node2.isCatch());
1017:       assertFalse(node2.isSetterDef());
1018:       assertFalse(node2.isName());
1019:       assertFalse(node2.isEmpty());
1020:       assertFalse(node2.isDelProp());
1021:       assertFalse(node2.isIf());
1022:       assertFalse(node2.isNull());
1023:       assertFalse(node2.isNE());
1024:       assertFalse(node2.isTrue());
1025:       assertFalse(node2.isCall());
1026:       assertFalse(node2.isInc());
1027:       assertFalse(node2.isFalse());
1028:       assertFalse(node2.isThrow());
1029:       assertFalse(node2.isWhile());
1030:       assertFalse(node2.isContinue());
1031:       assertFalse(node2.isReturn());
1032:       assertFalse(node2.isComma());
1033:       assertFalse(node2.isGetProp());
1034:       assertFalse(node2.isNot());
1035:       assertFalse(node2.isAnd());
1036:       assertFalse(node2.isObjectLit());
1037:       assertFalse(node2.isString());
1038:       assertFalse(node2.isDebugger());
1039:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1040:       assertEquals(43, Node.IS_CONSTANT_NAME);
1041:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1042:       assertEquals(48, Node.DIRECTIVES);
1043:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1044:       assertEquals(4095, Node.COLUMN_MASK);
1045:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1046:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1047:       assertEquals(50, Node.FREE_CALL);
1048:       assertEquals(40, Node.ORIGINALNAME_PROP);
1049:       assertEquals(54, Node.SLASH_V);
1050:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1051:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1052:       assertEquals(30, Node.VAR_ARGS_NAME);
1053:       assertEquals(49, Node.DIRECT_EVAL);
1054:       assertEquals(1, Node.DECR_FLAG);
1055:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1056:       assertEquals(12, Node.COLUMN_BITS);
1057:       assertEquals(46, Node.IS_NAMESPACE);
1058:       assertEquals(32, Node.INCRDECR_PROP);
1059:       assertEquals(57, Node.LAST_PROP);
1060:       assertEquals(37, Node.OPT_ARG_NAME);
1061:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1062:       assertEquals(2, Node.POST_FLAG);
1063:       assertEquals(29, Node.JSDOC_INFO_PROP);
1064:       assertEquals(47, Node.IS_DISPATCHER);
1065:       assertEquals(56, Node.CHANGE_TIME);
1066:       assertEquals(57, Node.REFLECTED_OBJECT);
1067:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1068:       assertEquals(53, Node.INPUT_ID);
1069:       assertEquals(39, Node.EMPTY_BLOCK);
1070:       assertEquals(36, Node.QUOTED_PROP);
1071:       assertEquals(55, Node.INFERRED_FUNCTION);
1072:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1073:       assertEquals(52, Node.LENGTH);
1074:       assertEquals(8, Node.FLAG_NO_THROWS);
1075:       assertFalse(node2.equals((Object)node0));
1076:       assertFalse(node2.equals((Object)node1));
1077:       
1078:       Node.NodeMismatch node_NodeMismatch2 = node1.checkTreeTypeAwareEqualsImpl(node1);
1079:       assertNull(node_NodeMismatch2);
1080:       assertFalse(node1.isInc());
1081:       assertEquals((-1), node1.getCharno());
1082:       assertFalse(node1.isString());
1083:       assertFalse(node1.isSwitch());
1084:       assertFalse(node1.isComma());
1085:       assertFalse(node1.isThis());
1086:       assertEquals(49, node1.getType());
1087:       assertFalse(node1.isBreak());
1088:       assertFalse(node1.isGetProp());
1089:       assertFalse(node1.isGetterDef());
1090:       assertFalse(node1.isInstanceOf());
1091:       assertFalse(node1.isCase());
1092:       assertFalse(node1.isHook());
1093:       assertFalse(node1.isFor());
1094:       assertFalse(node1.isTry());
1095:       assertFalse(node1.isExprResult());
1096:       assertFalse(node1.isTrue());
1097:       assertFalse(node1.isVoid());
1098:       assertFalse(node1.isScript());
1099:       assertFalse(node1.isArrayLit());
1100:       assertFalse(node1.isGetElem());
1101:       assertFalse(node1.isDelProp());
1102:       assertFalse(node1.isLabelName());
1103:       assertFalse(node1.isNull());
1104:       assertFalse(node1.isLabel());
1105:       assertFalse(node1.isOr());
1106:       assertFalse(node1.isEmpty());
1107:       assertEquals(0, node1.getChildCount());
1108:       assertTrue(node1.isThrow());
1109:       assertFalse(node1.isVar());
1110:       assertFalse(node1.isDo());
1111:       assertFalse(node1.isDefaultCase());
1112:       assertFalse(node1.isAssignAdd());
1113:       assertFalse(node1.isAdd());
1114:       assertFalse(node1.isBlock());
1115:       assertFalse(node1.isNew());
1116:       assertFalse(node1.isContinue());
1117:       assertFalse(node1.isCall());
1118:       assertFalse(node1.isStringKey());
1119:       assertEquals((-1), node1.getLineno());
1120:       assertFalse(node1.isName());
1121:       assertFalse(node1.isParamList());
1122:       assertEquals((-1), node1.getSourcePosition());
1123:       assertFalse(node1.hasChildren());
1124:       assertFalse(node1.isAssign());
1125:       assertFalse(node1.isDec());
1126:       assertFalse(node1.isNumber());
1127:       assertFalse(node1.isTypeOf());
1128:       assertFalse(node1.hasMoreThanOneChild());
1129:       assertFalse(node1.hasOneChild());
1130:       assertFalse(node1.isWhile());
1131:       assertFalse(node1.isReturn());
1132:       assertFalse(node1.isDebugger());
1133:       assertFalse(node1.isFunction());
1134:       assertFalse(node1.isNot());
1135:       assertFalse(node1.isRegExp());
1136:       assertFalse(node1.isWith());
1137:       assertFalse(node1.isAnd());
1138:       assertFalse(node1.isObjectLit());
1139:       assertFalse(node1.isCast());
1140:       assertFalse(node1.isCatch());
1141:       assertFalse(node1.isIf());
1142:       assertFalse(node1.isNE());
1143:       assertFalse(node1.isSetterDef());
1144:       assertFalse(node1.isFalse());
1145:       assertFalse(node1.isIn());
1146:       assertEquals(1, Node.DECR_FLAG);
1147:       assertEquals(32, Node.INCRDECR_PROP);
1148:       assertEquals(49, Node.DIRECT_EVAL);
1149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1150:       assertEquals(37, Node.OPT_ARG_NAME);
1151:       assertEquals(54, Node.SLASH_V);
1152:       assertEquals(52, Node.LENGTH);
1153:       assertEquals(46, Node.IS_NAMESPACE);
1154:       assertEquals(56, Node.CHANGE_TIME);
1155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1156:       assertEquals(57, Node.REFLECTED_OBJECT);
1157:       assertEquals(40, Node.ORIGINALNAME_PROP);
1158:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1159:       assertEquals(29, Node.JSDOC_INFO_PROP);
1160:       assertEquals(53, Node.INPUT_ID);
1161:       assertEquals(39, Node.EMPTY_BLOCK);
1162:       assertEquals(2, Node.POST_FLAG);
1163:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1164:       assertEquals(57, Node.LAST_PROP);
1165:       assertEquals(30, Node.VAR_ARGS_NAME);
1166:       assertEquals(47, Node.IS_DISPATCHER);
1167:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1168:       assertEquals(55, Node.INFERRED_FUNCTION);
1169:       assertEquals(4095, Node.COLUMN_MASK);
1170:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1171:       assertEquals(48, Node.DIRECTIVES);
1172:       assertEquals(43, Node.IS_CONSTANT_NAME);
1173:       assertEquals(8, Node.FLAG_NO_THROWS);
1174:       assertEquals(36, Node.QUOTED_PROP);
1175:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1176:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1177:       assertEquals(50, Node.FREE_CALL);
1178:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1179:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1180:       assertEquals(12, Node.COLUMN_BITS);
1181:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1182:       assertFalse(node1.equals((Object)node0));
1183:       assertFalse(node1.equals((Object)node2));
1184:       
1185:       Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
1186:       assertSame(node1, node3);
1187:       assertNotSame(node2, node0);
1188:       assertSame(node3, node1);
1189:       assertNotNull(node3);
1190:       assertEquals(1, nodeArray0.length);
1191:       assertFalse(node1.isInc());
1192:       assertFalse(node1.isString());
1193:       assertFalse(node1.isSwitch());
1194:       assertFalse(node1.isComma());
1195:       assertFalse(node1.isThis());
1196:       assertEquals(49, node1.getType());
1197:       assertFalse(node1.isBreak());
1198:       assertFalse(node1.isGetProp());
1199:       assertFalse(node1.isGetterDef());
1200:       assertFalse(node1.isInstanceOf());
1201:       assertEquals(42, node1.getLineno());
1202:       assertFalse(node1.isCase());
1203:       assertFalse(node1.isHook());
1204:       assertFalse(node1.isFor());
1205:       assertFalse(node1.isTry());
1206:       assertFalse(node1.isExprResult());
1207:       assertFalse(node1.isTrue());
1208:       assertFalse(node1.isVoid());
1209:       assertFalse(node1.isScript());
1210:       assertFalse(node1.isArrayLit());
1211:       assertFalse(node1.isGetElem());
1212:       assertFalse(node1.isDelProp());
1213:       assertFalse(node1.isLabelName());
1214:       assertFalse(node1.isNull());
1215:       assertEquals(172042, node1.getSourcePosition());
1216:       assertFalse(node1.isLabel());
1217:       assertFalse(node1.isOr());
1218:       assertFalse(node1.isEmpty());
1219:       assertEquals(0, node1.getChildCount());
1220:       assertTrue(node1.isThrow());
1221:       assertFalse(node1.isVar());
1222:       assertFalse(node1.isDo());
1223:       assertFalse(node1.isDefaultCase());
1224:       assertFalse(node1.isAssignAdd());
1225:       assertFalse(node1.isAdd());
1226:       assertFalse(node1.isBlock());
1227:       assertFalse(node1.isNew());
1228:       assertFalse(node1.isContinue());
1229:       assertFalse(node1.isCall());
1230:       assertFalse(node1.isStringKey());
1231:       assertFalse(node1.isName());
1232:       assertFalse(node1.isParamList());
1233:       assertFalse(node1.hasChildren());
1234:       assertFalse(node1.isAssign());
1235:       assertFalse(node1.isDec());
1236:       assertFalse(node1.isNumber());
1237:       assertEquals(10, node1.getCharno());
1238:       assertFalse(node1.isTypeOf());
1239:       assertFalse(node1.hasMoreThanOneChild());
1240:       assertFalse(node1.hasOneChild());
1241:       assertFalse(node1.isWhile());
1242:       assertFalse(node1.isReturn());
1243:       assertFalse(node1.isDebugger());
1244:       assertFalse(node1.isFunction());
1245:       assertFalse(node1.isNot());
1246:       assertFalse(node1.isRegExp());
1247:       assertFalse(node1.isWith());
1248:       assertFalse(node1.isAnd());
1249:       assertFalse(node1.isObjectLit());
1250:       assertFalse(node1.isCast());
1251:       assertFalse(node1.isCatch());
1252:       assertFalse(node1.isIf());
1253:       assertFalse(node1.isNE());
1254:       assertFalse(node1.isSetterDef());
1255:       assertFalse(node1.isFalse());
1256:       assertFalse(node1.isIn());
1257:       assertFalse(node2.isScript());
1258:       assertFalse(node2.isCast());
1259:       assertFalse(node2.isExprResult());
1260:       assertFalse(node2.isGetElem());
1261:       assertFalse(node2.isAssign());
1262:       assertFalse(node2.isWith());
1263:       assertFalse(node2.isTypeOf());
1264:       assertFalse(node2.isDec());
1265:       assertEquals(172042, node2.getSourcePosition());
1266:       assertFalse(node2.isOr());
1267:       assertFalse(node2.isAssignAdd());
1268:       assertFalse(node2.isInstanceOf());
1269:       assertFalse(node2.isBreak());
1270:       assertFalse(node2.isAdd());
1271:       assertFalse(node2.isBlock());
1272:       assertFalse(node2.isNew());
1273:       assertEquals((-1117), node2.getType());
1274:       assertFalse(node2.isSwitch());
1275:       assertFalse(node2.isCase());
1276:       assertFalse(node2.isDo());
1277:       assertFalse(node2.hasMoreThanOneChild());
1278:       assertFalse(node2.isHook());
1279:       assertFalse(node2.isVar());
1280:       assertFalse(node2.isThis());
1281:       assertEquals(1, node2.getChildCount());
1282:       assertFalse(node2.isLabel());
1283:       assertFalse(node2.isParamList());
1284:       assertFalse(node2.isStringKey());
1285:       assertFalse(node2.isLabelName());
1286:       assertFalse(node2.isNumber());
1287:       assertFalse(node2.isGetterDef());
1288:       assertFalse(node2.isVoid());
1289:       assertFalse(node2.isTry());
1290:       assertFalse(node2.isFunction());
1291:       assertFalse(node2.isArrayLit());
1292:       assertEquals(42, node2.getLineno());
1293:       assertFalse(node2.isFor());
1294:       assertFalse(node2.isDefaultCase());
1295:       assertFalse(node2.isRegExp());
1296:       assertTrue(node2.hasOneChild());
1297:       assertTrue(node2.hasChildren());
1298:       assertFalse(node2.isIn());
1299:       assertEquals(10, node2.getCharno());
1300:       assertFalse(node2.isCatch());
1301:       assertFalse(node2.isSetterDef());
1302:       assertFalse(node2.isName());
1303:       assertFalse(node2.isEmpty());
1304:       assertFalse(node2.isDelProp());
1305:       assertFalse(node2.isIf());
1306:       assertFalse(node2.isNull());
1307:       assertFalse(node2.isNE());
1308:       assertFalse(node2.isTrue());
1309:       assertFalse(node2.isCall());
1310:       assertFalse(node2.isInc());
1311:       assertFalse(node2.isFalse());
1312:       assertFalse(node2.isThrow());
1313:       assertFalse(node2.isWhile());
1314:       assertFalse(node2.isContinue());
1315:       assertFalse(node2.isReturn());
1316:       assertFalse(node2.isComma());
1317:       assertFalse(node2.isGetProp());
1318:       assertFalse(node2.isNot());
1319:       assertFalse(node2.isAnd());
1320:       assertFalse(node2.isObjectLit());
1321:       assertFalse(node2.isString());
1322:       assertFalse(node2.isDebugger());
1323:       assertFalse(node3.isVar());
1324:       assertFalse(node3.isCall());
1325:       assertFalse(node3.isBlock());
1326:       assertFalse(node3.isNew());
1327:       assertFalse(node3.isStringKey());
1328:       assertFalse(node3.isName());
1329:       assertFalse(node3.isNull());
1330:       assertFalse(node3.isSetterDef());
1331:       assertFalse(node3.isAdd());
1332:       assertEquals(0, node3.getChildCount());
1333:       assertFalse(node3.isLabel());
1334:       assertFalse(node3.isDo());
1335:       assertFalse(node3.isParamList());
1336:       assertFalse(node3.isDefaultCase());
1337:       assertFalse(node3.isAssignAdd());
1338:       assertFalse(node3.isFunction());
1339:       assertFalse(node3.isContinue());
1340:       assertTrue(node3.isThrow());
1341:       assertFalse(node3.hasOneChild());
1342:       assertFalse(node3.isArrayLit());
1343:       assertFalse(node3.isLabelName());
1344:       assertFalse(node3.isTry());
1345:       assertFalse(node3.isFor());
1346:       assertFalse(node3.isIf());
1347:       assertFalse(node3.isNumber());
1348:       assertFalse(node3.isGetterDef());
1349:       assertFalse(node3.isScript());
1350:       assertFalse(node3.isNE());
1351:       assertFalse(node3.isIn());
1352:       assertFalse(node3.isInstanceOf());
1353:       assertFalse(node3.isCase());
1354:       assertFalse(node3.isRegExp());
1355:       assertFalse(node3.isThis());
1356:       assertFalse(node3.hasMoreThanOneChild());
1357:       assertFalse(node3.isWith());
1358:       assertFalse(node3.isCatch());
1359:       assertFalse(node3.isHook());
1360:       assertFalse(node3.isSwitch());
1361:       assertFalse(node3.isInc());
1362:       assertFalse(node3.isGetProp());
1363:       assertFalse(node3.isString());
1364:       assertFalse(node3.isAnd());
1365:       assertFalse(node3.isFalse());
1366:       assertFalse(node3.isCast());
1367:       assertFalse(node3.isVoid());
1368:       assertEquals(42, node3.getLineno());
1369:       assertFalse(node3.isTrue());
1370:       assertFalse(node3.isDebugger());
1371:       assertEquals(172042, node3.getSourcePosition());
1372:       assertFalse(node3.isOr());
1373:       assertFalse(node3.isEmpty());
1374:       assertFalse(node3.isNot());
1375:       assertFalse(node3.isObjectLit());
1376:       assertEquals(49, node3.getType());
1377:       assertEquals(10, node3.getCharno());
1378:       assertFalse(node3.isReturn());
1379:       assertFalse(node3.isWhile());
1380:       assertFalse(node3.isTypeOf());
1381:       assertFalse(node3.isDec());
1382:       assertFalse(node3.isDelProp());
1383:       assertFalse(node3.isExprResult());
1384:       assertFalse(node3.isComma());
1385:       assertFalse(node3.hasChildren());
1386:       assertFalse(node3.isBreak());
1387:       assertFalse(node3.isGetElem());
1388:       assertFalse(node3.isAssign());
1389:       assertEquals(1, Node.DECR_FLAG);
1390:       assertEquals(32, Node.INCRDECR_PROP);
1391:       assertEquals(49, Node.DIRECT_EVAL);
1392:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1393:       assertEquals(37, Node.OPT_ARG_NAME);
1394:       assertEquals(54, Node.SLASH_V);
1395:       assertEquals(52, Node.LENGTH);
1396:       assertEquals(46, Node.IS_NAMESPACE);
1397:       assertEquals(56, Node.CHANGE_TIME);
1398:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1399:       assertEquals(57, Node.REFLECTED_OBJECT);
1400:       assertEquals(40, Node.ORIGINALNAME_PROP);
1401:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1402:       assertEquals(29, Node.JSDOC_INFO_PROP);
1403:       assertEquals(53, Node.INPUT_ID);
1404:       assertEquals(39, Node.EMPTY_BLOCK);
1405:       assertEquals(2, Node.POST_FLAG);
1406:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1407:       assertEquals(57, Node.LAST_PROP);
1408:       assertEquals(30, Node.VAR_ARGS_NAME);
1409:       assertEquals(47, Node.IS_DISPATCHER);
1410:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1411:       assertEquals(55, Node.INFERRED_FUNCTION);
1412:       assertEquals(4095, Node.COLUMN_MASK);
1413:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1414:       assertEquals(48, Node.DIRECTIVES);
1415:       assertEquals(43, Node.IS_CONSTANT_NAME);
1416:       assertEquals(8, Node.FLAG_NO_THROWS);
1417:       assertEquals(36, Node.QUOTED_PROP);
1418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1419:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1420:       assertEquals(50, Node.FREE_CALL);
1421:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1422:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1423:       assertEquals(12, Node.COLUMN_BITS);
1424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1425:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1426:       assertEquals(43, Node.IS_CONSTANT_NAME);
1427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1428:       assertEquals(48, Node.DIRECTIVES);
1429:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1430:       assertEquals(4095, Node.COLUMN_MASK);
1431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1432:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1433:       assertEquals(50, Node.FREE_CALL);
1434:       assertEquals(40, Node.ORIGINALNAME_PROP);
1435:       assertEquals(54, Node.SLASH_V);
1436:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1437:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1438:       assertEquals(30, Node.VAR_ARGS_NAME);
1439:       assertEquals(49, Node.DIRECT_EVAL);
1440:       assertEquals(1, Node.DECR_FLAG);
1441:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1442:       assertEquals(12, Node.COLUMN_BITS);
1443:       assertEquals(46, Node.IS_NAMESPACE);
1444:       assertEquals(32, Node.INCRDECR_PROP);
1445:       assertEquals(57, Node.LAST_PROP);
1446:       assertEquals(37, Node.OPT_ARG_NAME);
1447:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1448:       assertEquals(2, Node.POST_FLAG);
1449:       assertEquals(29, Node.JSDOC_INFO_PROP);
1450:       assertEquals(47, Node.IS_DISPATCHER);
1451:       assertEquals(56, Node.CHANGE_TIME);
1452:       assertEquals(57, Node.REFLECTED_OBJECT);
1453:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1454:       assertEquals(53, Node.INPUT_ID);
1455:       assertEquals(39, Node.EMPTY_BLOCK);
1456:       assertEquals(36, Node.QUOTED_PROP);
1457:       assertEquals(55, Node.INFERRED_FUNCTION);
1458:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1459:       assertEquals(52, Node.LENGTH);
1460:       assertEquals(8, Node.FLAG_NO_THROWS);
1461:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1462:       assertEquals(57, Node.LAST_PROP);
1463:       assertEquals(30, Node.VAR_ARGS_NAME);
1464:       assertEquals(54, Node.SLASH_V);
1465:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1466:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1467:       assertEquals(12, Node.COLUMN_BITS);
1468:       assertEquals(32, Node.INCRDECR_PROP);
1469:       assertEquals(52, Node.LENGTH);
1470:       assertEquals(1, Node.DECR_FLAG);
1471:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1472:       assertEquals(56, Node.CHANGE_TIME);
1473:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1474:       assertEquals(8, Node.FLAG_NO_THROWS);
1475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1476:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1477:       assertEquals(57, Node.REFLECTED_OBJECT);
1478:       assertEquals(4095, Node.COLUMN_MASK);
1479:       assertEquals(48, Node.DIRECTIVES);
1480:       assertEquals(49, Node.DIRECT_EVAL);
1481:       assertEquals(37, Node.OPT_ARG_NAME);
1482:       assertEquals(43, Node.IS_CONSTANT_NAME);
1483:       assertEquals(36, Node.QUOTED_PROP);
1484:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1485:       assertEquals(55, Node.INFERRED_FUNCTION);
1486:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1487:       assertEquals(53, Node.INPUT_ID);
1488:       assertEquals(29, Node.JSDOC_INFO_PROP);
1489:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1490:       assertEquals(39, Node.EMPTY_BLOCK);
1491:       assertEquals(2, Node.POST_FLAG);
1492:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1493:       assertEquals(50, Node.FREE_CALL);
1494:       assertEquals(47, Node.IS_DISPATCHER);
1495:       assertEquals(46, Node.IS_NAMESPACE);
1496:       assertEquals(40, Node.ORIGINALNAME_PROP);
1497:       assertFalse(node1.equals((Object)node0));
1498:       assertFalse(node1.equals((Object)node2));
1499:       assertFalse(node2.equals((Object)node0));
1500:       assertFalse(node2.equals((Object)node1));
1501:       assertFalse(node3.equals((Object)node2));
1502:       assertFalse(node3.equals((Object)node0));
1503:       
1504:       Node node4 = Node.newString(147, "", 50, 57);
1505:       assertNotSame(node4, node3);
1506:       assertNotSame(node4, node1);
1507:       assertNotNull(node4);
1508:       assertFalse(node4.isDebugger());
1509:       assertFalse(node4.isTrue());
1510:       assertFalse(node4.isFunction());
1511:       assertFalse(node4.isVoid());
1512:       assertEquals(50, node4.getLineno());
1513:       assertFalse(node4.isRegExp());
1514:       assertFalse(node4.isFor());
1515:       assertFalse(node4.isTry());
1516:       assertFalse(node4.isDefaultCase());
1517:       assertFalse(node4.isNE());
1518:       assertFalse(node4.isNull());
1519:       assertEquals(204857, node4.getSourcePosition());
1520:       assertFalse(node4.isSetterDef());
1521:       assertFalse(node4.isEmpty());
1522:       assertFalse(node4.isIn());
1523:       assertEquals(147, node4.getType());
1524:       assertFalse(node4.isCall());
1525:       assertFalse(node4.isCatch());
1526:       assertFalse(node4.isDelProp());
1527:       assertFalse(node4.isName());
1528:       assertFalse(node4.isIf());
1529:       assertFalse(node4.isAdd());
1530:       assertFalse(node4.isBlock());
1531:       assertFalse(node4.isNew());
1532:       assertFalse(node4.isVar());
1533:       assertEquals(57, node4.getCharno());
1534:       assertFalse(node4.isCase());
1535:       assertFalse(node4.isHook());
1536:       assertFalse(node4.isDo());
1537:       assertFalse(node4.isAssignAdd());
1538:       assertFalse(node4.isParamList());
1539:       assertFalse(node4.isLabel());
1540:       assertEquals(0, node4.getChildCount());
1541:       assertFalse(node4.isNumber());
1542:       assertFalse(node4.isStringKey());
1543:       assertFalse(node4.isArrayLit());
1544:       assertFalse(node4.isLabelName());
1545:       assertFalse(node4.isSwitch());
1546:       assertFalse(node4.isExprResult());
1547:       assertFalse(node4.isScript());
1548:       assertFalse(node4.isNot());
1549:       assertFalse(node4.isWith());
1550:       assertFalse(node4.hasOneChild());
1551:       assertFalse(node4.isThis());
1552:       assertFalse(node4.isComma());
1553:       assertFalse(node4.hasChildren());
1554:       assertFalse(node4.isBreak());
1555:       assertFalse(node4.isAssign());
1556:       assertFalse(node4.isDec());
1557:       assertFalse(node4.isOr());
1558:       assertFalse(node4.isInstanceOf());
1559:       assertFalse(node4.isTypeOf());
1560:       assertFalse(node4.hasMoreThanOneChild());
1561:       assertFalse(node4.isGetElem());
1562:       assertFalse(node4.isInc());
1563:       assertFalse(node4.isString());
1564:       assertFalse(node4.isThrow());
1565:       assertFalse(node4.isWhile());
1566:       assertFalse(node4.isReturn());
1567:       assertTrue(node4.isGetterDef());
1568:       assertFalse(node4.isGetProp());
1569:       assertFalse(node4.isFalse());
1570:       assertFalse(node4.isContinue());
1571:       assertFalse(node4.isAnd());
1572:       assertFalse(node4.isObjectLit());
1573:       assertFalse(node4.isCast());
1574:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1575:       assertEquals(55, Node.INFERRED_FUNCTION);
1576:       assertEquals(4095, Node.COLUMN_MASK);
1577:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1578:       assertEquals(40, Node.ORIGINALNAME_PROP);
1579:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1580:       assertEquals(50, Node.FREE_CALL);
1581:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1582:       assertEquals(54, Node.SLASH_V);
1583:       assertEquals(43, Node.IS_CONSTANT_NAME);
1584:       assertEquals(46, Node.IS_NAMESPACE);
1585:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1586:       assertEquals(1, Node.DECR_FLAG);
1587:       assertEquals(49, Node.DIRECT_EVAL);
1588:       assertEquals(32, Node.INCRDECR_PROP);
1589:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1590:       assertEquals(2, Node.POST_FLAG);
1591:       assertEquals(57, Node.LAST_PROP);
1592:       assertEquals(30, Node.VAR_ARGS_NAME);
1593:       assertEquals(12, Node.COLUMN_BITS);
1594:       assertEquals(47, Node.IS_DISPATCHER);
1595:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1596:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1597:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1598:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1599:       assertEquals(29, Node.JSDOC_INFO_PROP);
1600:       assertEquals(53, Node.INPUT_ID);
1601:       assertEquals(39, Node.EMPTY_BLOCK);
1602:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1603:       assertEquals(37, Node.OPT_ARG_NAME);
1604:       assertEquals(48, Node.DIRECTIVES);
1605:       assertEquals(52, Node.LENGTH);
1606:       assertEquals(8, Node.FLAG_NO_THROWS);
1607:       assertEquals(56, Node.CHANGE_TIME);
1608:       assertEquals(36, Node.QUOTED_PROP);
1609:       assertEquals(57, Node.REFLECTED_OBJECT);
1610:       assertFalse(node4.equals((Object)node0));
1611:       assertFalse(node4.equals((Object)node3));
1612:       assertFalse(node4.equals((Object)node2));
1613:       assertFalse(node4.equals((Object)node1));
1614:       
1615:       node3.setSourceFileForTesting("");
1616:       assertSame(node1, node3);
1617:       assertNotSame(node1, node4);
1618:       assertNotSame(node2, node0);
1619:       assertNotSame(node3, node4);
1620:       assertSame(node3, node1);
1621:       assertEquals(1, nodeArray0.length);
1622:       assertFalse(node1.isInc());
1623:       assertFalse(node1.isString());
1624:       assertFalse(node1.isSwitch());
1625:       assertFalse(node1.isComma());
1626:       assertFalse(node1.isThis());
1627:       assertEquals(49, node1.getType());
1628:       assertFalse(node1.isBreak());
1629:       assertFalse(node1.isGetProp());
1630:       assertFalse(node1.isGetterDef());
1631:       assertFalse(node1.isInstanceOf());
1632:       assertEquals(42, node1.getLineno());
1633:       assertFalse(node1.isCase());
1634:       assertFalse(node1.isHook());
1635:       assertFalse(node1.isFor());
1636:       assertFalse(node1.isTry());
1637:       assertFalse(node1.isExprResult());
1638:       assertFalse(node1.isTrue());
1639:       assertFalse(node1.isVoid());
1640:       assertFalse(node1.isScript());
1641:       assertFalse(node1.isArrayLit());
1642:       assertFalse(node1.isGetElem());
1643:       assertFalse(node1.isDelProp());
1644:       assertFalse(node1.isLabelName());
1645:       assertFalse(node1.isNull());
1646:       assertEquals(172042, node1.getSourcePosition());
1647:       assertFalse(node1.isLabel());
1648:       assertFalse(node1.isOr());
1649:       assertFalse(node1.isEmpty());
1650:       assertEquals(0, node1.getChildCount());
1651:       assertTrue(node1.isThrow());
1652:       assertFalse(node1.isVar());
1653:       assertFalse(node1.isDo());
1654:       assertFalse(node1.isDefaultCase());
1655:       assertFalse(node1.isAssignAdd());
1656:       assertFalse(node1.isAdd());
1657:       assertFalse(node1.isBlock());
1658:       assertFalse(node1.isNew());
1659:       assertFalse(node1.isContinue());
1660:       assertFalse(node1.isCall());
1661:       assertFalse(node1.isStringKey());
1662:       assertFalse(node1.isName());
1663:       assertFalse(node1.isParamList());
1664:       assertFalse(node1.hasChildren());
1665:       assertFalse(node1.isAssign());
1666:       assertFalse(node1.isDec());
1667:       assertFalse(node1.isNumber());
1668:       assertEquals(10, node1.getCharno());
1669:       assertFalse(node1.isTypeOf());
1670:       assertFalse(node1.hasMoreThanOneChild());
1671:       assertFalse(node1.hasOneChild());
1672:       assertFalse(node1.isWhile());
1673:       assertFalse(node1.isReturn());
1674:       assertFalse(node1.isDebugger());
1675:       assertFalse(node1.isFunction());
1676:       assertFalse(node1.isNot());
1677:       assertFalse(node1.isRegExp());
1678:       assertFalse(node1.isWith());
1679:       assertFalse(node1.isAnd());
1680:       assertFalse(node1.isObjectLit());
1681:       assertFalse(node1.isCast());
1682:       assertFalse(node1.isCatch());
1683:       assertFalse(node1.isIf());
1684:       assertFalse(node1.isNE());
1685:       assertFalse(node1.isSetterDef());
1686:       assertFalse(node1.isFalse());
1687:       assertFalse(node1.isIn());
1688:       assertFalse(node2.isScript());
1689:       assertFalse(node2.isCast());
1690:       assertFalse(node2.isExprResult());
1691:       assertFalse(node2.isGetElem());
1692:       assertFalse(node2.isAssign());
1693:       assertFalse(node2.isWith());
1694:       assertFalse(node2.isTypeOf());
1695:       assertFalse(node2.isDec());
1696:       assertEquals(172042, node2.getSourcePosition());
1697:       assertFalse(node2.isOr());
1698:       assertFalse(node2.isAssignAdd());
1699:       assertFalse(node2.isInstanceOf());
1700:       assertFalse(node2.isBreak());
1701:       assertFalse(node2.isAdd());
1702:       assertFalse(node2.isBlock());
1703:       assertFalse(node2.isNew());
1704:       assertEquals((-1117), node2.getType());
1705:       assertFalse(node2.isSwitch());
1706:       assertFalse(node2.isCase());
1707:       assertFalse(node2.isDo());
1708:       assertFalse(node2.hasMoreThanOneChild());
1709:       assertFalse(node2.isHook());
1710:       assertFalse(node2.isVar());
1711:       assertFalse(node2.isThis());
1712:       assertEquals(1, node2.getChildCount());
1713:       assertFalse(node2.isLabel());
1714:       assertFalse(node2.isParamList());
1715:       assertFalse(node2.isStringKey());
1716:       assertFalse(node2.isLabelName());
1717:       assertFalse(node2.isNumber());
1718:       assertFalse(node2.isGetterDef());
1719:       assertFalse(node2.isVoid());
1720:       assertFalse(node2.isTry());
1721:       assertFalse(node2.isFunction());
1722:       assertFalse(node2.isArrayLit());
1723:       assertEquals(42, node2.getLineno());
1724:       assertFalse(node2.isFor());
1725:       assertFalse(node2.isDefaultCase());
1726:       assertFalse(node2.isRegExp());
1727:       assertTrue(node2.hasOneChild());
1728:       assertTrue(node2.hasChildren());
1729:       assertFalse(node2.isIn());
1730:       assertEquals(10, node2.getCharno());
1731:       assertFalse(node2.isCatch());
1732:       assertFalse(node2.isSetterDef());
1733:       assertFalse(node2.isName());
1734:       assertFalse(node2.isEmpty());
1735:       assertFalse(node2.isDelProp());
1736:       assertFalse(node2.isIf());
1737:       assertFalse(node2.isNull());
1738:       assertFalse(node2.isNE());
1739:       assertFalse(node2.isTrue());
1740:       assertFalse(node2.isCall());
1741:       assertFalse(node2.isInc());
1742:       assertFalse(node2.isFalse());
1743:       assertFalse(node2.isThrow());
1744:       assertFalse(node2.isWhile());
1745:       assertFalse(node2.isContinue());
1746:       assertFalse(node2.isReturn());
1747:       assertFalse(node2.isComma());
1748:       assertFalse(node2.isGetProp());
1749:       assertFalse(node2.isNot());
1750:       assertFalse(node2.isAnd());
1751:       assertFalse(node2.isObjectLit());
1752:       assertFalse(node2.isString());
1753:       assertFalse(node2.isDebugger());
1754:       assertFalse(node3.isVar());
1755:       assertFalse(node3.isCall());
1756:       assertFalse(node3.isBlock());
1757:       assertFalse(node3.isNew());
1758:       assertFalse(node3.isStringKey());
1759:       assertFalse(node3.isName());
1760:       assertFalse(node3.isNull());
1761:       assertFalse(node3.isSetterDef());
1762:       assertFalse(node3.isAdd());
1763:       assertEquals(0, node3.getChildCount());
1764:       assertFalse(node3.isLabel());
1765:       assertFalse(node3.isDo());
1766:       assertFalse(node3.isParamList());
1767:       assertFalse(node3.isDefaultCase());
1768:       assertFalse(node3.isAssignAdd());
1769:       assertFalse(node3.isFunction());
1770:       assertFalse(node3.isContinue());
1771:       assertTrue(node3.isThrow());
1772:       assertFalse(node3.hasOneChild());
1773:       assertFalse(node3.isArrayLit());
1774:       assertFalse(node3.isLabelName());
1775:       assertFalse(node3.isTry());
1776:       assertFalse(node3.isFor());
1777:       assertFalse(node3.isIf());
1778:       assertFalse(node3.isNumber());
1779:       assertFalse(node3.isGetterDef());
1780:       assertFalse(node3.isScript());
1781:       assertFalse(node3.isNE());
1782:       assertFalse(node3.isIn());
1783:       assertFalse(node3.isInstanceOf());
1784:       assertFalse(node3.isCase());
1785:       assertFalse(node3.isRegExp());
1786:       assertFalse(node3.isThis());
1787:       assertFalse(node3.hasMoreThanOneChild());
1788:       assertFalse(node3.isWith());
1789:       assertFalse(node3.isCatch());
1790:       assertFalse(node3.isHook());
1791:       assertFalse(node3.isSwitch());
1792:       assertFalse(node3.isInc());
1793:       assertFalse(node3.isGetProp());
1794:       assertFalse(node3.isString());
1795:       assertFalse(node3.isAnd());
1796:       assertFalse(node3.isFalse());
1797:       assertFalse(node3.isCast());
1798:       assertFalse(node3.isVoid());
1799:       assertEquals(42, node3.getLineno());
1800:       assertFalse(node3.isTrue());
1801:       assertFalse(node3.isDebugger());
1802:       assertEquals(172042, node3.getSourcePosition());
1803:       assertFalse(node3.isOr());
1804:       assertFalse(node3.isEmpty());
1805:       assertFalse(node3.isNot());
1806:       assertFalse(node3.isObjectLit());
1807:       assertEquals(49, node3.getType());
1808:       assertEquals(10, node3.getCharno());
1809:       assertFalse(node3.isReturn());
1810:       assertFalse(node3.isWhile());
1811:       assertFalse(node3.isTypeOf());
1812:       assertFalse(node3.isDec());
1813:       assertFalse(node3.isDelProp());
1814:       assertFalse(node3.isExprResult());
1815:       assertFalse(node3.isComma());
1816:       assertFalse(node3.hasChildren());
1817:       assertFalse(node3.isBreak());
1818:       assertFalse(node3.isGetElem());
1819:       assertFalse(node3.isAssign());
1820:       assertEquals(1, Node.DECR_FLAG);
1821:       assertEquals(32, Node.INCRDECR_PROP);
1822:       assertEquals(49, Node.DIRECT_EVAL);
1823:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1824:       assertEquals(37, Node.OPT_ARG_NAME);
1825:       assertEquals(54, Node.SLASH_V);
1826:       assertEquals(52, Node.LENGTH);
1827:       assertEquals(46, Node.IS_NAMESPACE);
1828:       assertEquals(56, Node.CHANGE_TIME);
1829:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1830:       assertEquals(57, Node.REFLECTED_OBJECT);
1831:       assertEquals(40, Node.ORIGINALNAME_PROP);
1832:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1833:       assertEquals(29, Node.JSDOC_INFO_PROP);
1834:       assertEquals(53, Node.INPUT_ID);
1835:       assertEquals(39, Node.EMPTY_BLOCK);
1836:       assertEquals(2, Node.POST_FLAG);
1837:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1838:       assertEquals(57, Node.LAST_PROP);
1839:       assertEquals(30, Node.VAR_ARGS_NAME);
1840:       assertEquals(47, Node.IS_DISPATCHER);
1841:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1842:       assertEquals(55, Node.INFERRED_FUNCTION);
1843:       assertEquals(4095, Node.COLUMN_MASK);
1844:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1845:       assertEquals(48, Node.DIRECTIVES);
1846:       assertEquals(43, Node.IS_CONSTANT_NAME);
1847:       assertEquals(8, Node.FLAG_NO_THROWS);
1848:       assertEquals(36, Node.QUOTED_PROP);
1849:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1850:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1851:       assertEquals(50, Node.FREE_CALL);
1852:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1853:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1854:       assertEquals(12, Node.COLUMN_BITS);
1855:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1856:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1857:       assertEquals(43, Node.IS_CONSTANT_NAME);
1858:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1859:       assertEquals(48, Node.DIRECTIVES);
1860:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1861:       assertEquals(4095, Node.COLUMN_MASK);
1862:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1863:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1864:       assertEquals(50, Node.FREE_CALL);
1865:       assertEquals(40, Node.ORIGINALNAME_PROP);
1866:       assertEquals(54, Node.SLASH_V);
1867:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1868:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1869:       assertEquals(30, Node.VAR_ARGS_NAME);
1870:       assertEquals(49, Node.DIRECT_EVAL);
1871:       assertEquals(1, Node.DECR_FLAG);
1872:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1873:       assertEquals(12, Node.COLUMN_BITS);
1874:       assertEquals(46, Node.IS_NAMESPACE);
1875:       assertEquals(32, Node.INCRDECR_PROP);
1876:       assertEquals(57, Node.LAST_PROP);
1877:       assertEquals(37, Node.OPT_ARG_NAME);
1878:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1879:       assertEquals(2, Node.POST_FLAG);
1880:       assertEquals(29, Node.JSDOC_INFO_PROP);
1881:       assertEquals(47, Node.IS_DISPATCHER);
1882:       assertEquals(56, Node.CHANGE_TIME);
1883:       assertEquals(57, Node.REFLECTED_OBJECT);
1884:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1885:       assertEquals(53, Node.INPUT_ID);
1886:       assertEquals(39, Node.EMPTY_BLOCK);
1887:       assertEquals(36, Node.QUOTED_PROP);
1888:       assertEquals(55, Node.INFERRED_FUNCTION);
1889:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1890:       assertEquals(52, Node.LENGTH);
1891:       assertEquals(8, Node.FLAG_NO_THROWS);
1892:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1893:       assertEquals(57, Node.LAST_PROP);
1894:       assertEquals(30, Node.VAR_ARGS_NAME);
1895:       assertEquals(54, Node.SLASH_V);
1896:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1897:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1898:       assertEquals(12, Node.COLUMN_BITS);
1899:       assertEquals(32, Node.INCRDECR_PROP);
1900:       assertEquals(52, Node.LENGTH);
1901:       assertEquals(1, Node.DECR_FLAG);
1902:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1903:       assertEquals(56, Node.CHANGE_TIME);
1904:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1905:       assertEquals(8, Node.FLAG_NO_THROWS);
1906:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1907:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1908:       assertEquals(57, Node.REFLECTED_OBJECT);
1909:       assertEquals(4095, Node.COLUMN_MASK);
1910:       assertEquals(48, Node.DIRECTIVES);
1911:       assertEquals(49, Node.DIRECT_EVAL);
1912:       assertEquals(37, Node.OPT_ARG_NAME);
1913:       assertEquals(43, Node.IS_CONSTANT_NAME);
1914:       assertEquals(36, Node.QUOTED_PROP);
1915:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1916:       assertEquals(55, Node.INFERRED_FUNCTION);
1917:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1918:       assertEquals(53, Node.INPUT_ID);
1919:       assertEquals(29, Node.JSDOC_INFO_PROP);
1920:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1921:       assertEquals(39, Node.EMPTY_BLOCK);
1922:       assertEquals(2, Node.POST_FLAG);
1923:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1924:       assertEquals(50, Node.FREE_CALL);
1925:       assertEquals(47, Node.IS_DISPATCHER);
1926:       assertEquals(46, Node.IS_NAMESPACE);
1927:       assertEquals(40, Node.ORIGINALNAME_PROP);
1928:       assertFalse(node1.equals((Object)node0));
1929:       assertFalse(node1.equals((Object)node4));
1930:       assertFalse(node1.equals((Object)node2));
1931:       assertFalse(node2.equals((Object)node4));
1932:       assertFalse(node2.equals((Object)node0));
1933:       assertFalse(node2.equals((Object)node1));
1934:       assertFalse(node2.equals((Object)node3));
1935:       assertFalse(node3.equals((Object)node2));
1936:       assertFalse(node3.equals((Object)node4));
1937:       assertFalse(node3.equals((Object)node0));
1938:       
1939:       node3.addChildToFront(node4);
1940:       assertSame(node1, node3);
1941:       assertNotSame(node1, node4);
1942:       assertNotSame(node2, node0);
1943:       assertNotSame(node3, node4);
1944:       assertSame(node3, node1);
1945:       assertNotSame(node4, node3);
1946:       assertNotSame(node4, node1);
1947:       assertEquals(1, nodeArray0.length);
1948:       assertFalse(node1.isInc());
1949:       assertFalse(node1.isString());
1950:       assertFalse(node1.isSwitch());
1951:       assertFalse(node1.isComma());
1952:       assertFalse(node1.isThis());
1953:       assertEquals(49, node1.getType());
1954:       assertFalse(node1.isBreak());
1955:       assertFalse(node1.isGetProp());
1956:       assertFalse(node1.isGetterDef());
1957:       assertEquals(1, node1.getChildCount());
1958:       assertTrue(node1.hasChildren());
1959:       assertFalse(node1.isInstanceOf());
1960:       assertEquals(42, node1.getLineno());
1961:       assertFalse(node1.isCase());
1962:       assertFalse(node1.isHook());
1963:       assertFalse(node1.isFor());
1964:       assertTrue(node1.hasOneChild());
1965:       assertFalse(node1.isTry());
1966:       assertFalse(node1.isExprResult());
1967:       assertFalse(node1.isTrue());
1968:       assertFalse(node1.isVoid());
1969:       assertFalse(node1.isScript());
1970:       assertFalse(node1.isArrayLit());
1971:       assertFalse(node1.isGetElem());
1972:       assertFalse(node1.isDelProp());
1973:       assertFalse(node1.isLabelName());
1974:       assertFalse(node1.isNull());
1975:       assertEquals(172042, node1.getSourcePosition());
1976:       assertFalse(node1.isLabel());
1977:       assertFalse(node1.isOr());
1978:       assertFalse(node1.isEmpty());
1979:       assertTrue(node1.isThrow());
1980:       assertFalse(node1.isVar());
1981:       assertFalse(node1.isDo());
1982:       assertFalse(node1.isDefaultCase());
1983:       assertFalse(node1.isAssignAdd());
1984:       assertFalse(node1.isAdd());
1985:       assertFalse(node1.isBlock());
1986:       assertFalse(node1.isNew());
1987:       assertFalse(node1.isContinue());
1988:       assertFalse(node1.isCall());
1989:       assertFalse(node1.isStringKey());
1990:       assertFalse(node1.isName());
1991:       assertFalse(node1.isParamList());
1992:       assertFalse(node1.isAssign());
1993:       assertFalse(node1.isDec());
1994:       assertFalse(node1.isNumber());
1995:       assertEquals(10, node1.getCharno());
1996:       assertFalse(node1.isTypeOf());
1997:       assertFalse(node1.hasMoreThanOneChild());
1998:       assertFalse(node1.isWhile());
1999:       assertFalse(node1.isReturn());
2000:       assertFalse(node1.isDebugger());
2001:       assertFalse(node1.isFunction());
2002:       assertFalse(node1.isNot());
2003:       assertFalse(node1.isRegExp());
2004:       assertFalse(node1.isWith());
2005:       assertFalse(node1.isAnd());
2006:       assertFalse(node1.isObjectLit());
2007:       assertFalse(node1.isCast());
2008:       assertFalse(node1.isCatch());
2009:       assertFalse(node1.isIf());
2010:       assertFalse(node1.isNE());
2011:       assertFalse(node1.isSetterDef());
2012:       assertFalse(node1.isFalse());
2013:       assertFalse(node1.isIn());
2014:       assertFalse(node2.isScript());
2015:       assertFalse(node2.isCast());
2016:       assertFalse(node2.isExprResult());
2017:       assertFalse(node2.isGetElem());
2018:       assertFalse(node2.isAssign());
2019:       assertFalse(node2.isWith());
2020:       assertFalse(node2.isTypeOf());
2021:       assertFalse(node2.isDec());
2022:       assertEquals(172042, node2.getSourcePosition());
2023:       assertFalse(node2.isOr());
2024:       assertFalse(node2.isAssignAdd());
2025:       assertFalse(node2.isInstanceOf());
2026:       assertFalse(node2.isBreak());
2027:       assertFalse(node2.isAdd());
2028:       assertFalse(node2.isBlock());
2029:       assertFalse(node2.isNew());
2030:       assertEquals((-1117), node2.getType());
2031:       assertFalse(node2.isSwitch());
2032:       assertFalse(node2.isCase());
2033:       assertFalse(node2.isDo());
2034:       assertFalse(node2.hasMoreThanOneChild());
2035:       assertFalse(node2.isHook());
2036:       assertFalse(node2.isVar());
2037:       assertFalse(node2.isThis());
2038:       assertEquals(1, node2.getChildCount());
2039:       assertFalse(node2.isLabel());
2040:       assertFalse(node2.isParamList());
2041:       assertFalse(node2.isStringKey());
2042:       assertFalse(node2.isLabelName());
2043:       assertFalse(node2.isNumber());
2044:       assertFalse(node2.isGetterDef());
2045:       assertFalse(node2.isVoid());
2046:       assertFalse(node2.isTry());
2047:       assertFalse(node2.isFunction());
2048:       assertFalse(node2.isArrayLit());
2049:       assertEquals(42, node2.getLineno());
2050:       assertFalse(node2.isFor());
2051:       assertFalse(node2.isDefaultCase());
2052:       assertFalse(node2.isRegExp());
2053:       assertTrue(node2.hasOneChild());
2054:       assertTrue(node2.hasChildren());
2055:       assertFalse(node2.isIn());
2056:       assertEquals(10, node2.getCharno());
2057:       assertFalse(node2.isCatch());
2058:       assertFalse(node2.isSetterDef());
2059:       assertFalse(node2.isName());
2060:       assertFalse(node2.isEmpty());
2061:       assertFalse(node2.isDelProp());
2062:       assertFalse(node2.isIf());
2063:       assertFalse(node2.isNull());
2064:       assertFalse(node2.isNE());
2065:       assertFalse(node2.isTrue());
2066:       assertFalse(node2.isCall());
2067:       assertFalse(node2.isInc());
2068:       assertFalse(node2.isFalse());
2069:       assertFalse(node2.isThrow());
2070:       assertFalse(node2.isWhile());
2071:       assertFalse(node2.isContinue());
2072:       assertFalse(node2.isReturn());
2073:       assertFalse(node2.isComma());
2074:       assertFalse(node2.isGetProp());
2075:       assertFalse(node2.isNot());
2076:       assertFalse(node2.isAnd());
2077:       assertFalse(node2.isObjectLit());
2078:       assertFalse(node2.isString());
2079:       assertFalse(node2.isDebugger());
2080:       assertFalse(node3.isVar());
2081:       assertFalse(node3.isCall());
2082:       assertFalse(node3.isBlock());
2083:       assertFalse(node3.isNew());
2084:       assertFalse(node3.isStringKey());
2085:       assertFalse(node3.isName());
2086:       assertFalse(node3.isNull());
2087:       assertFalse(node3.isSetterDef());
2088:       assertFalse(node3.isAdd());
2089:       assertFalse(node3.isLabel());
2090:       assertFalse(node3.isDo());
2091:       assertFalse(node3.isParamList());
2092:       assertFalse(node3.isDefaultCase());
2093:       assertFalse(node3.isAssignAdd());
2094:       assertFalse(node3.isFunction());
2095:       assertFalse(node3.isContinue());
2096:       assertTrue(node3.isThrow());
2097:       assertFalse(node3.isArrayLit());
2098:       assertFalse(node3.isLabelName());
2099:       assertFalse(node3.isTry());
2100:       assertFalse(node3.isFor());
2101:       assertFalse(node3.isIf());
2102:       assertFalse(node3.isNumber());
2103:       assertFalse(node3.isGetterDef());
2104:       assertFalse(node3.isScript());
2105:       assertFalse(node3.isNE());
2106:       assertFalse(node3.isIn());
2107:       assertFalse(node3.isInstanceOf());
2108:       assertEquals(1, node3.getChildCount());
2109:       assertFalse(node3.isCase());
2110:       assertFalse(node3.isRegExp());
2111:       assertFalse(node3.isThis());
2112:       assertTrue(node3.hasChildren());
2113:       assertFalse(node3.hasMoreThanOneChild());
2114:       assertFalse(node3.isWith());
2115:       assertFalse(node3.isCatch());
2116:       assertFalse(node3.isHook());
2117:       assertFalse(node3.isSwitch());
2118:       assertFalse(node3.isInc());
2119:       assertFalse(node3.isGetProp());
2120:       assertFalse(node3.isString());
2121:       assertFalse(node3.isAnd());
2122:       assertFalse(node3.isFalse());
2123:       assertFalse(node3.isCast());
2124:       assertFalse(node3.isVoid());
2125:       assertEquals(42, node3.getLineno());
2126:       assertFalse(node3.isTrue());
2127:       assertFalse(node3.isDebugger());
2128:       assertEquals(172042, node3.getSourcePosition());
2129:       assertFalse(node3.isOr());
2130:       assertFalse(node3.isEmpty());
2131:       assertFalse(node3.isNot());
2132:       assertFalse(node3.isObjectLit());
2133:       assertEquals(49, node3.getType());
2134:       assertEquals(10, node3.getCharno());
2135:       assertFalse(node3.isReturn());
2136:       assertFalse(node3.isWhile());
2137:       assertFalse(node3.isTypeOf());
2138:       assertFalse(node3.isDec());
2139:       assertFalse(node3.isDelProp());
2140:       assertFalse(node3.isExprResult());
2141:       assertFalse(node3.isComma());
2142:       assertTrue(node3.hasOneChild());
2143:       assertFalse(node3.isBreak());
2144:       assertFalse(node3.isGetElem());
2145:       assertFalse(node3.isAssign());
2146:       assertFalse(node4.isDebugger());
2147:       assertFalse(node4.isTrue());
2148:       assertFalse(node4.isFunction());
2149:       assertFalse(node4.isVoid());
2150:       assertEquals(50, node4.getLineno());
2151:       assertFalse(node4.isRegExp());
2152:       assertFalse(node4.isFor());
2153:       assertFalse(node4.isTry());
2154:       assertFalse(node4.isDefaultCase());
2155:       assertFalse(node4.isNE());
2156:       assertFalse(node4.isNull());
2157:       assertEquals(204857, node4.getSourcePosition());
2158:       assertFalse(node4.isSetterDef());
2159:       assertFalse(node4.isEmpty());
2160:       assertFalse(node4.isIn());
2161:       assertEquals(147, node4.getType());
2162:       assertFalse(node4.isCall());
2163:       assertFalse(node4.isCatch());
2164:       assertFalse(node4.isDelProp());
2165:       assertFalse(node4.isName());
2166:       assertFalse(node4.isIf());
2167:       assertFalse(node4.isAdd());
2168:       assertFalse(node4.isBlock());
2169:       assertFalse(node4.isNew());
2170:       assertFalse(node4.isVar());
2171:       assertEquals(57, node4.getCharno());
2172:       assertFalse(node4.isCase());
2173:       assertFalse(node4.isHook());
2174:       assertFalse(node4.isDo());
2175:       assertFalse(node4.isAssignAdd());
2176:       assertFalse(node4.isParamList());
2177:       assertFalse(node4.isLabel());
2178:       assertEquals(0, node4.getChildCount());
2179:       assertFalse(node4.isNumber());
2180:       assertFalse(node4.isStringKey());
2181:       assertFalse(node4.isArrayLit());
2182:       assertFalse(node4.isLabelName());
2183:       assertFalse(node4.isSwitch());
2184:       assertFalse(node4.isExprResult());
2185:       assertFalse(node4.isScript());
2186:       assertFalse(node4.isNot());
2187:       assertFalse(node4.isWith());
2188:       assertFalse(node4.hasOneChild());
2189:       assertFalse(node4.isThis());
2190:       assertFalse(node4.isComma());
2191:       assertFalse(node4.hasChildren());
2192:       assertFalse(node4.isBreak());
2193:       assertFalse(node4.isAssign());
2194:       assertFalse(node4.isDec());
2195:       assertFalse(node4.isOr());
2196:       assertFalse(node4.isInstanceOf());
2197:       assertFalse(node4.isTypeOf());
2198:       assertFalse(node4.hasMoreThanOneChild());
2199:       assertFalse(node4.isGetElem());
2200:       assertFalse(node4.isInc());
2201:       assertFalse(node4.isString());
2202:       assertFalse(node4.isThrow());
2203:       assertFalse(node4.isWhile());
2204:       assertFalse(node4.isReturn());
2205:       assertTrue(node4.isGetterDef());
2206:       assertFalse(node4.isGetProp());
2207:       assertFalse(node4.isFalse());
2208:       assertFalse(node4.isContinue());
2209:       assertFalse(node4.isAnd());
2210:       assertFalse(node4.isObjectLit());
2211:       assertFalse(node4.isCast());
2212:       assertEquals(1, Node.DECR_FLAG);
2213:       assertEquals(32, Node.INCRDECR_PROP);
2214:       assertEquals(49, Node.DIRECT_EVAL);
2215:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2216:       assertEquals(37, Node.OPT_ARG_NAME);
2217:       assertEquals(54, Node.SLASH_V);
2218:       assertEquals(52, Node.LENGTH);
2219:       assertEquals(46, Node.IS_NAMESPACE);
2220:       assertEquals(56, Node.CHANGE_TIME);
2221:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2222:       assertEquals(57, Node.REFLECTED_OBJECT);
2223:       assertEquals(40, Node.ORIGINALNAME_PROP);
2224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2225:       assertEquals(29, Node.JSDOC_INFO_PROP);
2226:       assertEquals(53, Node.INPUT_ID);
2227:       assertEquals(39, Node.EMPTY_BLOCK);
2228:       assertEquals(2, Node.POST_FLAG);
2229:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2230:       assertEquals(57, Node.LAST_PROP);
2231:       assertEquals(30, Node.VAR_ARGS_NAME);
2232:       assertEquals(47, Node.IS_DISPATCHER);
2233:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2234:       assertEquals(55, Node.INFERRED_FUNCTION);
2235:       assertEquals(4095, Node.COLUMN_MASK);
2236:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2237:       assertEquals(48, Node.DIRECTIVES);
2238:       assertEquals(43, Node.IS_CONSTANT_NAME);
2239:       assertEquals(8, Node.FLAG_NO_THROWS);
2240:       assertEquals(36, Node.QUOTED_PROP);
2241:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2242:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2243:       assertEquals(50, Node.FREE_CALL);
2244:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2245:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2246:       assertEquals(12, Node.COLUMN_BITS);
2247:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2248:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2249:       assertEquals(43, Node.IS_CONSTANT_NAME);
2250:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2251:       assertEquals(48, Node.DIRECTIVES);
2252:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2253:       assertEquals(4095, Node.COLUMN_MASK);
2254:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2255:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2256:       assertEquals(50, Node.FREE_CALL);
2257:       assertEquals(40, Node.ORIGINALNAME_PROP);
2258:       assertEquals(54, Node.SLASH_V);
2259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2260:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2261:       assertEquals(30, Node.VAR_ARGS_NAME);
2262:       assertEquals(49, Node.DIRECT_EVAL);
2263:       assertEquals(1, Node.DECR_FLAG);
2264:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2265:       assertEquals(12, Node.COLUMN_BITS);
2266:       assertEquals(46, Node.IS_NAMESPACE);
2267:       assertEquals(32, Node.INCRDECR_PROP);
2268:       assertEquals(57, Node.LAST_PROP);
2269:       assertEquals(37, Node.OPT_ARG_NAME);
2270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2271:       assertEquals(2, Node.POST_FLAG);
2272:       assertEquals(29, Node.JSDOC_INFO_PROP);
2273:       assertEquals(47, Node.IS_DISPATCHER);
2274:       assertEquals(56, Node.CHANGE_TIME);
2275:       assertEquals(57, Node.REFLECTED_OBJECT);
2276:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2277:       assertEquals(53, Node.INPUT_ID);
2278:       assertEquals(39, Node.EMPTY_BLOCK);
2279:       assertEquals(36, Node.QUOTED_PROP);
2280:       assertEquals(55, Node.INFERRED_FUNCTION);
2281:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2282:       assertEquals(52, Node.LENGTH);
2283:       assertEquals(8, Node.FLAG_NO_THROWS);
2284:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2285:       assertEquals(57, Node.LAST_PROP);
2286:       assertEquals(30, Node.VAR_ARGS_NAME);
2287:       assertEquals(54, Node.SLASH_V);
2288:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2289:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2290:       assertEquals(12, Node.COLUMN_BITS);
2291:       assertEquals(32, Node.INCRDECR_PROP);
2292:       assertEquals(52, Node.LENGTH);
2293:       assertEquals(1, Node.DECR_FLAG);
2294:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2295:       assertEquals(56, Node.CHANGE_TIME);
2296:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2297:       assertEquals(8, Node.FLAG_NO_THROWS);
2298:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2299:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2300:       assertEquals(57, Node.REFLECTED_OBJECT);
2301:       assertEquals(4095, Node.COLUMN_MASK);
2302:       assertEquals(48, Node.DIRECTIVES);
2303:       assertEquals(49, Node.DIRECT_EVAL);
2304:       assertEquals(37, Node.OPT_ARG_NAME);
2305:       assertEquals(43, Node.IS_CONSTANT_NAME);
2306:       assertEquals(36, Node.QUOTED_PROP);
2307:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2308:       assertEquals(55, Node.INFERRED_FUNCTION);
2309:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2310:       assertEquals(53, Node.INPUT_ID);
2311:       assertEquals(29, Node.JSDOC_INFO_PROP);
2312:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2313:       assertEquals(39, Node.EMPTY_BLOCK);
2314:       assertEquals(2, Node.POST_FLAG);
2315:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2316:       assertEquals(50, Node.FREE_CALL);
2317:       assertEquals(47, Node.IS_DISPATCHER);
2318:       assertEquals(46, Node.IS_NAMESPACE);
2319:       assertEquals(40, Node.ORIGINALNAME_PROP);
2320:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2321:       assertEquals(55, Node.INFERRED_FUNCTION);
2322:       assertEquals(4095, Node.COLUMN_MASK);
2323:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2324:       assertEquals(40, Node.ORIGINALNAME_PROP);
2325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2326:       assertEquals(50, Node.FREE_CALL);
2327:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2328:       assertEquals(54, Node.SLASH_V);
2329:       assertEquals(43, Node.IS_CONSTANT_NAME);
2330:       assertEquals(46, Node.IS_NAMESPACE);
2331:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2332:       assertEquals(1, Node.DECR_FLAG);
2333:       assertEquals(49, Node.DIRECT_EVAL);
2334:       assertEquals(32, Node.INCRDECR_PROP);
2335:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2336:       assertEquals(2, Node.POST_FLAG);
2337:       assertEquals(57, Node.LAST_PROP);
2338:       assertEquals(30, Node.VAR_ARGS_NAME);
2339:       assertEquals(12, Node.COLUMN_BITS);
2340:       assertEquals(47, Node.IS_DISPATCHER);
2341:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2342:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2343:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2344:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2345:       assertEquals(29, Node.JSDOC_INFO_PROP);
2346:       assertEquals(53, Node.INPUT_ID);
2347:       assertEquals(39, Node.EMPTY_BLOCK);
2348:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2349:       assertEquals(37, Node.OPT_ARG_NAME);
2350:       assertEquals(48, Node.DIRECTIVES);
2351:       assertEquals(52, Node.LENGTH);
2352:       assertEquals(8, Node.FLAG_NO_THROWS);
2353:       assertEquals(56, Node.CHANGE_TIME);
2354:       assertEquals(36, Node.QUOTED_PROP);
2355:       assertEquals(57, Node.REFLECTED_OBJECT);
2356:       assertFalse(node1.equals((Object)node0));
2357:       assertFalse(node1.equals((Object)node4));
2358:       assertFalse(node1.equals((Object)node2));
2359:       assertFalse(node2.equals((Object)node4));
2360:       assertFalse(node2.equals((Object)node0));
2361:       assertFalse(node2.equals((Object)node1));
2362:       assertFalse(node2.equals((Object)node3));
2363:       assertFalse(node3.equals((Object)node2));
2364:       assertFalse(node3.equals((Object)node4));
2365:       assertFalse(node3.equals((Object)node0));
2366:       assertFalse(node4.equals((Object)node0));
2367:       assertFalse(node4.equals((Object)node3));
2368:       assertFalse(node4.equals((Object)node2));
2369:       assertFalse(node4.equals((Object)node1));
2370:   }
2371: }
RegularFileObject[/tmp/EvoSuite_42_1628161078175/com/google/javascript/rhino/Node_42_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:57:58 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_42_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_42_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.common.collect.ImmutableList$SerializedForm",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.base.Joiner$MapJoiner",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_42_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.javascript.rhino.Token",
268:       "com.google.common.base.Preconditions",
269:       "com.google.javascript.rhino.SimpleErrorReporter",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.JSTypeNative",
301:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
302:       "com.google.javascript.rhino.jstype.JSType$1",
303:       "com.google.javascript.rhino.jstype.JSType",
304:       "com.google.javascript.rhino.jstype.ObjectType",
305:       "com.google.javascript.rhino.jstype.ProxyObjectType",
306:       "com.google.javascript.rhino.jstype.TemplateType",
307:       "com.google.javascript.rhino.jstype.ValueType",
308:       "com.google.javascript.rhino.jstype.BooleanType",
309:       "com.google.javascript.rhino.jstype.NullType",
310:       "com.google.javascript.rhino.jstype.NumberType",
311:       "com.google.javascript.rhino.jstype.StringType",
312:       "com.google.javascript.rhino.jstype.UnknownType",
313:       "com.google.javascript.rhino.jstype.VoidType",
314:       "com.google.javascript.rhino.jstype.AllType",
315:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
316:       "com.google.common.collect.ImmutableMap",
317:       "com.google.common.collect.ImmutableBiMap",
318:       "com.google.common.collect.EmptyImmutableBiMap",
319:       "com.google.javascript.rhino.jstype.PropertyMap$1",
320:       "com.google.javascript.rhino.jstype.PropertyMap",
321:       "com.google.javascript.rhino.jstype.FunctionType",
322:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
346:       "com.google.common.collect.Sets",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.javascript.rhino.JSDocInfo$Visibility",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.common.collect.Platform",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.javascript.rhino.Node$AncestorIterable$1",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.common.collect.Iterables",
357:       "com.google.common.collect.ImmutableSet",
358:       "com.google.common.collect.EmptyImmutableSet",
359:       "com.google.common.collect.AbstractMultimap$Values",
360:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
361:       "com.google.common.collect.AbstractMapBasedMultimap$1",
362:       "com.google.common.collect.Multimaps$Entries",
363:       "com.google.common.collect.AbstractMultimap$Entries",
364:       "com.google.common.collect.AbstractMapBasedMultimap$2",
365:       "com.google.javascript.rhino.JSTypeExpression",
366:       "com.google.common.collect.ImmutableList$1",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.common.collect.Sets$ImprovedAbstractSet",
372:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
373:       "com.google.common.collect.Hashing",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
375:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
376:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
377:     );
378:   }
379: }

[MASTER] 10:57:58.700 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertNotNull(node0);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(iterable0.contains(node0));

Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
assertNotNull(node_AncestorIterable0);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node1 = Node.newString(49, "");
assertNotNull(node1);
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(49, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertEquals(0, node1.getChildCount());
assertTrue(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(49, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertEquals(0, node1.getChildCount());
assertTrue(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

boolean boolean0 = node0.wasEmptyNode();
assertFalse(boolean0);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));

Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeTypeAwareEqualsImpl(node0);
assertNotSame(node_NodeMismatch1, node_NodeMismatch0);
assertNotNull(node_NodeMismatch1);
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(49, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertEquals(0, node1.getChildCount());
assertTrue(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node_NodeMismatch1.equals((Object)node_NodeMismatch0));

Node[] nodeArray0 = new Node[1];
nodeArray0[0] = node1;
Node node2 = new Node((-1117), nodeArray0, 42, 10);
assertNotNull(node2);
assertEquals(1, nodeArray0.length);
assertFalse(node2.isScript());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertEquals(172042, node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertEquals((-1117), node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertFalse(node2.isThis());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertEquals(42, node2.getLineno());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertTrue(node2.hasOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertEquals(10, node2.getCharno());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isCall());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node.NodeMismatch node_NodeMismatch2 = node1.checkTreeTypeAwareEqualsImpl(node1);
assertNull(node_NodeMismatch2);
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(49, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertEquals(0, node1.getChildCount());
assertTrue(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
assertSame(node1, node3);
assertNotSame(node2, node0);
assertSame(node3, node1);
assertNotNull(node3);
assertEquals(1, nodeArray0.length);
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(49, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInstanceOf());
assertEquals(42, node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isNull());
assertEquals(172042, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertEquals(0, node1.getChildCount());
assertTrue(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertEquals(10, node1.getCharno());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node2.isScript());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertEquals(172042, node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertEquals((-1117), node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertFalse(node2.isThis());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertEquals(42, node2.getLineno());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertTrue(node2.hasOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertEquals(10, node2.getCharno());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isCall());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node3.isVar());
assertFalse(node3.isCall());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isAdd());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isParamList());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertTrue(node3.isThrow());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertFalse(node3.isString());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isVoid());
assertEquals(42, node3.getLineno());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertEquals(172042, node3.getSourcePosition());
assertFalse(node3.isOr());
assertFalse(node3.isEmpty());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertEquals(49, node3.getType());
assertEquals(10, node3.getCharno());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isDelProp());
assertFalse(node3.isExprResult());
assertFalse(node3.isComma());
assertFalse(node3.hasChildren());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));

Node node4 = Node.newString(147, "", 50, 57);
assertNotSame(node4, node3);
assertNotSame(node4, node1);
assertNotNull(node4);
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertFalse(node4.isFunction());
assertFalse(node4.isVoid());
assertEquals(50, node4.getLineno());
assertFalse(node4.isRegExp());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isNE());
assertFalse(node4.isNull());
assertEquals(204857, node4.getSourcePosition());
assertFalse(node4.isSetterDef());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertEquals(147, node4.getType());
assertFalse(node4.isCall());
assertFalse(node4.isCatch());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isIf());
assertFalse(node4.isAdd());
assertFalse(node4.isBlock());
assertFalse(node4.isNew());
assertFalse(node4.isVar());
assertEquals(57, node4.getCharno());
assertFalse(node4.isCase());
assertFalse(node4.isHook());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isParamList());
assertFalse(node4.isLabel());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isNumber());
assertFalse(node4.isStringKey());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isSwitch());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isNot());
assertFalse(node4.isWith());
assertFalse(node4.hasOneChild());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.hasChildren());
assertFalse(node4.isBreak());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isOr());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isTypeOf());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isGetElem());
assertFalse(node4.isInc());
assertFalse(node4.isString());
assertFalse(node4.isThrow());
assertFalse(node4.isWhile());
assertFalse(node4.isReturn());
assertTrue(node4.isGetterDef());
assertFalse(node4.isGetProp());
assertFalse(node4.isFalse());
assertFalse(node4.isContinue());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isCast());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));

node3.setSourceFileForTesting("");
assertSame(node1, node3);
assertNotSame(node1, node4);
assertNotSame(node2, node0);
assertNotSame(node3, node4);
assertSame(node3, node1);
assertEquals(1, nodeArray0.length);
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(49, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInstanceOf());
assertEquals(42, node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isNull());
assertEquals(172042, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertEquals(0, node1.getChildCount());
assertTrue(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertEquals(10, node1.getCharno());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node2.isScript());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertEquals(172042, node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertEquals((-1117), node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertFalse(node2.isThis());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertEquals(42, node2.getLineno());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertTrue(node2.hasOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertEquals(10, node2.getCharno());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isCall());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node3.isVar());
assertFalse(node3.isCall());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isAdd());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isParamList());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertTrue(node3.isThrow());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertFalse(node3.isString());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isVoid());
assertEquals(42, node3.getLineno());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertEquals(172042, node3.getSourcePosition());
assertFalse(node3.isOr());
assertFalse(node3.isEmpty());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertEquals(49, node3.getType());
assertEquals(10, node3.getCharno());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isDelProp());
assertFalse(node3.isExprResult());
assertFalse(node3.isComma());
assertFalse(node3.hasChildren());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));

node3.addChildToFront(node4);
assertSame(node1, node3);
assertNotSame(node1, node4);
assertNotSame(node2, node0);
assertNotSame(node3, node4);
assertSame(node3, node1);
assertNotSame(node4, node3);
assertNotSame(node4, node1);
assertEquals(1, nodeArray0.length);
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(49, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertEquals(42, node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isNull());
assertEquals(172042, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertTrue(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertEquals(10, node1.getCharno());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node2.isScript());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertEquals(172042, node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertEquals((-1117), node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertFalse(node2.isThis());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertEquals(42, node2.getLineno());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isRegExp());
assertTrue(node2.hasOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertEquals(10, node2.getCharno());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isCall());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node3.isVar());
assertFalse(node3.isCall());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isDo());
assertFalse(node3.isParamList());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertTrue(node3.isThrow());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isThis());
assertTrue(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertFalse(node3.isString());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isVoid());
assertEquals(42, node3.getLineno());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertEquals(172042, node3.getSourcePosition());
assertFalse(node3.isOr());
assertFalse(node3.isEmpty());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertEquals(49, node3.getType());
assertEquals(10, node3.getCharno());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isDelProp());
assertFalse(node3.isExprResult());
assertFalse(node3.isComma());
assertTrue(node3.hasOneChild());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertFalse(node4.isFunction());
assertFalse(node4.isVoid());
assertEquals(50, node4.getLineno());
assertFalse(node4.isRegExp());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isNE());
assertFalse(node4.isNull());
assertEquals(204857, node4.getSourcePosition());
assertFalse(node4.isSetterDef());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertEquals(147, node4.getType());
assertFalse(node4.isCall());
assertFalse(node4.isCatch());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isIf());
assertFalse(node4.isAdd());
assertFalse(node4.isBlock());
assertFalse(node4.isNew());
assertFalse(node4.isVar());
assertEquals(57, node4.getCharno());
assertFalse(node4.isCase());
assertFalse(node4.isHook());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isParamList());
assertFalse(node4.isLabel());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isNumber());
assertFalse(node4.isStringKey());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isSwitch());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isNot());
assertFalse(node4.isWith());
assertFalse(node4.hasOneChild());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.hasChildren());
assertFalse(node4.isBreak());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isOr());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isTypeOf());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isGetElem());
assertFalse(node4.isInc());
assertFalse(node4.isString());
assertFalse(node4.isThrow());
assertFalse(node4.isWhile());
assertFalse(node4.isReturn());
assertTrue(node4.isGetterDef());
assertFalse(node4.isGetProp());
assertFalse(node4.isFalse());
assertFalse(node4.isContinue());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isCast());
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));


[MASTER] 10:58:02.385 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_56_1628161082323/com/google/javascript/rhino/Node_56_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_56_1628161082323/com/google/javascript/rhino/Node_56_tmp__ESTest_scaffolding.java]]
[MASTER] 10:58:02.385 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:02.385 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:02.385 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 239
[MASTER] 10:58:02.386 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_56_1628161082323/com/google/javascript/rhino/Node_56_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:58:02 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.SimpleErrorReporter;
14: import com.google.javascript.rhino.jstype.EnumType;
15: import com.google.javascript.rhino.jstype.JSTypeNative;
16: import com.google.javascript.rhino.jstype.JSTypeRegistry;
17: import com.google.javascript.rhino.jstype.ObjectType;
18: import java.nio.charset.Charset;
19: import java.nio.charset.UnsupportedCharsetException;
20: import java.util.Set;
21: import org.evosuite.runtime.EvoRunner;
22: import org.evosuite.runtime.EvoRunnerParameters;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class Node_56_tmp__ESTest extends Node_56_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       Node node0 = new Node(0);
31:       assertNotNull(node0);
32:       assertFalse(node0.hasMoreThanOneChild());
33:       assertEquals((-1), node0.getLineno());
34:       assertFalse(node0.isDo());
35:       assertFalse(node0.isLabel());
36:       assertFalse(node0.isAssignAdd());
37:       assertFalse(node0.isReturn());
38:       assertFalse(node0.isWhile());
39:       assertFalse(node0.isTypeOf());
40:       assertFalse(node0.hasChildren());
41:       assertFalse(node0.isDec());
42:       assertFalse(node0.isAssign());
43:       assertFalse(node0.isGetElem());
44:       assertFalse(node0.isContinue());
45:       assertFalse(node0.isCast());
46:       assertFalse(node0.hasOneChild());
47:       assertFalse(node0.isLabelName());
48:       assertFalse(node0.isBlock());
49:       assertFalse(node0.isStringKey());
50:       assertFalse(node0.isScript());
51:       assertFalse(node0.isNumber());
52:       assertEquals((-1), node0.getSourcePosition());
53:       assertFalse(node0.isNot());
54:       assertEquals(0, node0.getChildCount());
55:       assertFalse(node0.isDefaultCase());
56:       assertFalse(node0.isParamList());
57:       assertFalse(node0.isExprResult());
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isBreak());
60:       assertFalse(node0.isComma());
61:       assertFalse(node0.isVar());
62:       assertFalse(node0.isCall());
63:       assertFalse(node0.isName());
64:       assertFalse(node0.isNull());
65:       assertFalse(node0.isTrue());
66:       assertFalse(node0.isNew());
67:       assertFalse(node0.isAdd());
68:       assertFalse(node0.isOr());
69:       assertFalse(node0.isEmpty());
70:       assertFalse(node0.isCase());
71:       assertFalse(node0.isSwitch());
72:       assertFalse(node0.isDelProp());
73:       assertEquals(0, node0.getType());
74:       assertFalse(node0.isHook());
75:       assertFalse(node0.isArrayLit());
76:       assertFalse(node0.isTry());
77:       assertFalse(node0.isFor());
78:       assertFalse(node0.isDebugger());
79:       assertEquals((-1), node0.getCharno());
80:       assertFalse(node0.isGetProp());
81:       assertFalse(node0.isGetterDef());
82:       assertFalse(node0.isString());
83:       assertFalse(node0.isObjectLit());
84:       assertFalse(node0.isAnd());
85:       assertFalse(node0.isThis());
86:       assertFalse(node0.isFunction());
87:       assertFalse(node0.isRegExp());
88:       assertFalse(node0.isWith());
89:       assertFalse(node0.isFalse());
90:       assertFalse(node0.isCatch());
91:       assertFalse(node0.isInstanceOf());
92:       assertFalse(node0.isThrow());
93:       assertFalse(node0.isIf());
94:       assertFalse(node0.isNE());
95:       assertFalse(node0.isInc());
96:       assertFalse(node0.isSetterDef());
97:       assertFalse(node0.isIn());
98:       assertEquals(2, Node.POST_FLAG);
99:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
100:       assertEquals(56, Node.CHANGE_TIME);
101:       assertEquals(47, Node.IS_DISPATCHER);
102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
103:       assertEquals(46, Node.IS_NAMESPACE);
104:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
105:       assertEquals(49, Node.DIRECT_EVAL);
106:       assertEquals(37, Node.OPT_ARG_NAME);
107:       assertEquals(57, Node.LAST_PROP);
108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
109:       assertEquals(30, Node.VAR_ARGS_NAME);
110:       assertEquals(52, Node.LENGTH);
111:       assertEquals(36, Node.QUOTED_PROP);
112:       assertEquals(55, Node.INFERRED_FUNCTION);
113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
114:       assertEquals(29, Node.JSDOC_INFO_PROP);
115:       assertEquals(53, Node.INPUT_ID);
116:       assertEquals(15, Node.NO_SIDE_EFFECTS);
117:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(39, Node.EMPTY_BLOCK);
120:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
121:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
122:       assertEquals(50, Node.FREE_CALL);
123:       assertEquals(4095, Node.COLUMN_MASK);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       assertEquals(57, Node.REFLECTED_OBJECT);
126:       assertEquals(48, Node.DIRECTIVES);
127:       assertEquals(54, Node.SLASH_V);
128:       assertEquals(43, Node.IS_CONSTANT_NAME);
129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
130:       assertEquals(12, Node.COLUMN_BITS);
131:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
132:       assertEquals(32, Node.INCRDECR_PROP);
133:       assertEquals(1, Node.DECR_FLAG);
134:       
135:       Iterable<Node> iterable0 = node0.children();
136:       assertNotNull(iterable0);
137:       assertFalse(node0.hasMoreThanOneChild());
138:       assertEquals((-1), node0.getLineno());
139:       assertFalse(node0.isDo());
140:       assertFalse(node0.isLabel());
141:       assertFalse(node0.isAssignAdd());
142:       assertFalse(node0.isReturn());
143:       assertFalse(node0.isWhile());
144:       assertFalse(node0.isTypeOf());
145:       assertFalse(node0.hasChildren());
146:       assertFalse(node0.isDec());
147:       assertFalse(node0.isAssign());
148:       assertFalse(node0.isGetElem());
149:       assertFalse(node0.isContinue());
150:       assertFalse(node0.isCast());
151:       assertFalse(node0.hasOneChild());
152:       assertFalse(node0.isLabelName());
153:       assertFalse(node0.isBlock());
154:       assertFalse(node0.isStringKey());
155:       assertFalse(node0.isScript());
156:       assertFalse(node0.isNumber());
157:       assertEquals((-1), node0.getSourcePosition());
158:       assertFalse(node0.isNot());
159:       assertEquals(0, node0.getChildCount());
160:       assertFalse(node0.isDefaultCase());
161:       assertFalse(node0.isParamList());
162:       assertFalse(node0.isExprResult());
163:       assertFalse(node0.isVoid());
164:       assertFalse(node0.isBreak());
165:       assertFalse(node0.isComma());
166:       assertFalse(node0.isVar());
167:       assertFalse(node0.isCall());
168:       assertFalse(node0.isName());
169:       assertFalse(node0.isNull());
170:       assertFalse(node0.isTrue());
171:       assertFalse(node0.isNew());
172:       assertFalse(node0.isAdd());
173:       assertFalse(node0.isOr());
174:       assertFalse(node0.isEmpty());
175:       assertFalse(node0.isCase());
176:       assertFalse(node0.isSwitch());
177:       assertFalse(node0.isDelProp());
178:       assertEquals(0, node0.getType());
179:       assertFalse(node0.isHook());
180:       assertFalse(node0.isArrayLit());
181:       assertFalse(node0.isTry());
182:       assertFalse(node0.isFor());
183:       assertFalse(node0.isDebugger());
184:       assertEquals((-1), node0.getCharno());
185:       assertFalse(node0.isGetProp());
186:       assertFalse(node0.isGetterDef());
187:       assertFalse(node0.isString());
188:       assertFalse(node0.isObjectLit());
189:       assertFalse(node0.isAnd());
190:       assertFalse(node0.isThis());
191:       assertFalse(node0.isFunction());
192:       assertFalse(node0.isRegExp());
193:       assertFalse(node0.isWith());
194:       assertFalse(node0.isFalse());
195:       assertFalse(node0.isCatch());
196:       assertFalse(node0.isInstanceOf());
197:       assertFalse(node0.isThrow());
198:       assertFalse(node0.isIf());
199:       assertFalse(node0.isNE());
200:       assertFalse(node0.isInc());
201:       assertFalse(node0.isSetterDef());
202:       assertFalse(node0.isIn());
203:       assertEquals(2, Node.POST_FLAG);
204:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
205:       assertEquals(56, Node.CHANGE_TIME);
206:       assertEquals(47, Node.IS_DISPATCHER);
207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
208:       assertEquals(46, Node.IS_NAMESPACE);
209:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
210:       assertEquals(49, Node.DIRECT_EVAL);
211:       assertEquals(37, Node.OPT_ARG_NAME);
212:       assertEquals(57, Node.LAST_PROP);
213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
214:       assertEquals(30, Node.VAR_ARGS_NAME);
215:       assertEquals(52, Node.LENGTH);
216:       assertEquals(36, Node.QUOTED_PROP);
217:       assertEquals(55, Node.INFERRED_FUNCTION);
218:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
219:       assertEquals(29, Node.JSDOC_INFO_PROP);
220:       assertEquals(53, Node.INPUT_ID);
221:       assertEquals(15, Node.NO_SIDE_EFFECTS);
222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
223:       assertEquals(8, Node.FLAG_NO_THROWS);
224:       assertEquals(39, Node.EMPTY_BLOCK);
225:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
226:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
227:       assertEquals(50, Node.FREE_CALL);
228:       assertEquals(4095, Node.COLUMN_MASK);
229:       assertEquals(40, Node.ORIGINALNAME_PROP);
230:       assertEquals(57, Node.REFLECTED_OBJECT);
231:       assertEquals(48, Node.DIRECTIVES);
232:       assertEquals(54, Node.SLASH_V);
233:       assertEquals(43, Node.IS_CONSTANT_NAME);
234:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
235:       assertEquals(12, Node.COLUMN_BITS);
236:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
237:       assertEquals(32, Node.INCRDECR_PROP);
238:       assertEquals(1, Node.DECR_FLAG);
239:       assertFalse(iterable0.contains(node0));
240:       
241:       Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
242:       assertNotNull(node_AncestorIterable0);
243:       assertFalse(node0.hasMoreThanOneChild());
244:       assertEquals((-1), node0.getLineno());
245:       assertFalse(node0.isDo());
246:       assertFalse(node0.isLabel());
247:       assertFalse(node0.isAssignAdd());
248:       assertFalse(node0.isReturn());
249:       assertFalse(node0.isWhile());
250:       assertFalse(node0.isTypeOf());
251:       assertFalse(node0.hasChildren());
252:       assertFalse(node0.isDec());
253:       assertFalse(node0.isAssign());
254:       assertFalse(node0.isGetElem());
255:       assertFalse(node0.isContinue());
256:       assertFalse(node0.isCast());
257:       assertFalse(node0.hasOneChild());
258:       assertFalse(node0.isLabelName());
259:       assertFalse(node0.isBlock());
260:       assertFalse(node0.isStringKey());
261:       assertFalse(node0.isScript());
262:       assertFalse(node0.isNumber());
263:       assertEquals((-1), node0.getSourcePosition());
264:       assertFalse(node0.isNot());
265:       assertEquals(0, node0.getChildCount());
266:       assertFalse(node0.isDefaultCase());
267:       assertFalse(node0.isParamList());
268:       assertFalse(node0.isExprResult());
269:       assertFalse(node0.isVoid());
270:       assertFalse(node0.isBreak());
271:       assertFalse(node0.isComma());
272:       assertFalse(node0.isVar());
273:       assertFalse(node0.isCall());
274:       assertFalse(node0.isName());
275:       assertFalse(node0.isNull());
276:       assertFalse(node0.isTrue());
277:       assertFalse(node0.isNew());
278:       assertFalse(node0.isAdd());
279:       assertFalse(node0.isOr());
280:       assertFalse(node0.isEmpty());
281:       assertFalse(node0.isCase());
282:       assertFalse(node0.isSwitch());
283:       assertFalse(node0.isDelProp());
284:       assertEquals(0, node0.getType());
285:       assertFalse(node0.isHook());
286:       assertFalse(node0.isArrayLit());
287:       assertFalse(node0.isTry());
288:       assertFalse(node0.isFor());
289:       assertFalse(node0.isDebugger());
290:       assertEquals((-1), node0.getCharno());
291:       assertFalse(node0.isGetProp());
292:       assertFalse(node0.isGetterDef());
293:       assertFalse(node0.isString());
294:       assertFalse(node0.isObjectLit());
295:       assertFalse(node0.isAnd());
296:       assertFalse(node0.isThis());
297:       assertFalse(node0.isFunction());
298:       assertFalse(node0.isRegExp());
299:       assertFalse(node0.isWith());
300:       assertFalse(node0.isFalse());
301:       assertFalse(node0.isCatch());
302:       assertFalse(node0.isInstanceOf());
303:       assertFalse(node0.isThrow());
304:       assertFalse(node0.isIf());
305:       assertFalse(node0.isNE());
306:       assertFalse(node0.isInc());
307:       assertFalse(node0.isSetterDef());
308:       assertFalse(node0.isIn());
309:       assertEquals(2, Node.POST_FLAG);
310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
311:       assertEquals(56, Node.CHANGE_TIME);
312:       assertEquals(47, Node.IS_DISPATCHER);
313:       assertEquals(51, Node.STATIC_SOURCE_FILE);
314:       assertEquals(46, Node.IS_NAMESPACE);
315:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
316:       assertEquals(49, Node.DIRECT_EVAL);
317:       assertEquals(37, Node.OPT_ARG_NAME);
318:       assertEquals(57, Node.LAST_PROP);
319:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
320:       assertEquals(30, Node.VAR_ARGS_NAME);
321:       assertEquals(52, Node.LENGTH);
322:       assertEquals(36, Node.QUOTED_PROP);
323:       assertEquals(55, Node.INFERRED_FUNCTION);
324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
325:       assertEquals(29, Node.JSDOC_INFO_PROP);
326:       assertEquals(53, Node.INPUT_ID);
327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
328:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
332:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
333:       assertEquals(50, Node.FREE_CALL);
334:       assertEquals(4095, Node.COLUMN_MASK);
335:       assertEquals(40, Node.ORIGINALNAME_PROP);
336:       assertEquals(57, Node.REFLECTED_OBJECT);
337:       assertEquals(48, Node.DIRECTIVES);
338:       assertEquals(54, Node.SLASH_V);
339:       assertEquals(43, Node.IS_CONSTANT_NAME);
340:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
341:       assertEquals(12, Node.COLUMN_BITS);
342:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
343:       assertEquals(32, Node.INCRDECR_PROP);
344:       assertEquals(1, Node.DECR_FLAG);
345:       
346:       Node node1 = Node.newString(49, "");
347:       assertNotNull(node1);
348:       assertFalse(node1.isDelProp());
349:       assertFalse(node1.isGetterDef());
350:       assertFalse(node1.isIf());
351:       assertEquals(49, node1.getType());
352:       assertFalse(node1.isArrayLit());
353:       assertFalse(node1.isEmpty());
354:       assertFalse(node1.isTry());
355:       assertFalse(node1.isFor());
356:       assertFalse(node1.isDefaultCase());
357:       assertFalse(node1.isRegExp());
358:       assertFalse(node1.isVoid());
359:       assertFalse(node1.isCatch());
360:       assertFalse(node1.isInc());
361:       assertFalse(node1.isIn());
362:       assertFalse(node1.isNE());
363:       assertFalse(node1.isNull());
364:       assertFalse(node1.isTrue());
365:       assertTrue(node1.isThrow());
366:       assertEquals(0, node1.getChildCount());
367:       assertFalse(node1.isInstanceOf());
368:       assertFalse(node1.isVar());
369:       assertFalse(node1.isBlock());
370:       assertFalse(node1.isHook());
371:       assertFalse(node1.isThis());
372:       assertFalse(node1.isSwitch());
373:       assertFalse(node1.isCase());
374:       assertFalse(node1.isScript());
375:       assertEquals((-1), node1.getCharno());
376:       assertFalse(node1.isParamList());
377:       assertFalse(node1.isStringKey());
378:       assertFalse(node1.hasChildren());
379:       assertFalse(node1.isDec());
380:       assertEquals((-1), node1.getSourcePosition());
381:       assertFalse(node1.isLabelName());
382:       assertFalse(node1.isAssign());
383:       assertFalse(node1.isNumber());
384:       assertFalse(node1.isTypeOf());
385:       assertFalse(node1.isCast());
386:       assertFalse(node1.isGetElem());
387:       assertFalse(node1.hasOneChild());
388:       assertFalse(node1.hasMoreThanOneChild());
389:       assertFalse(node1.isAssignAdd());
390:       assertFalse(node1.isLabel());
391:       assertFalse(node1.isReturn());
392:       assertFalse(node1.isDo());
393:       assertFalse(node1.isWith());
394:       assertFalse(node1.isNew());
395:       assertFalse(node1.isAdd());
396:       assertFalse(node1.isExprResult());
397:       assertEquals((-1), node1.getLineno());
398:       assertFalse(node1.isOr());
399:       assertFalse(node1.isBreak());
400:       assertFalse(node1.isName());
401:       assertFalse(node1.isFalse());
402:       assertFalse(node1.isGetProp());
403:       assertFalse(node1.isCall());
404:       assertFalse(node1.isSetterDef());
405:       assertFalse(node1.isComma());
406:       assertFalse(node1.isWhile());
407:       assertFalse(node1.isString());
408:       assertFalse(node1.isNot());
409:       assertFalse(node1.isFunction());
410:       assertFalse(node1.isContinue());
411:       assertFalse(node1.isObjectLit());
412:       assertFalse(node1.isDebugger());
413:       assertFalse(node1.isAnd());
414:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
415:       assertEquals(53, Node.INPUT_ID);
416:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
417:       assertEquals(47, Node.IS_DISPATCHER);
418:       assertEquals(2, Node.POST_FLAG);
419:       assertEquals(4095, Node.COLUMN_MASK);
420:       assertEquals(46, Node.IS_NAMESPACE);
421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
422:       assertEquals(12, Node.COLUMN_BITS);
423:       assertEquals(1, Node.DECR_FLAG);
424:       assertEquals(32, Node.INCRDECR_PROP);
425:       assertEquals(43, Node.IS_CONSTANT_NAME);
426:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
427:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
428:       assertEquals(50, Node.FREE_CALL);
429:       assertEquals(40, Node.ORIGINALNAME_PROP);
430:       assertEquals(57, Node.REFLECTED_OBJECT);
431:       assertEquals(54, Node.SLASH_V);
432:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
433:       assertEquals(57, Node.LAST_PROP);
434:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
435:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
436:       assertEquals(30, Node.VAR_ARGS_NAME);
437:       assertEquals(55, Node.INFERRED_FUNCTION);
438:       assertEquals(48, Node.DIRECTIVES);
439:       assertEquals(37, Node.OPT_ARG_NAME);
440:       assertEquals(49, Node.DIRECT_EVAL);
441:       assertEquals(15, Node.NO_SIDE_EFFECTS);
442:       assertEquals(56, Node.CHANGE_TIME);
443:       assertEquals(36, Node.QUOTED_PROP);
444:       assertEquals(29, Node.JSDOC_INFO_PROP);
445:       assertEquals(39, Node.EMPTY_BLOCK);
446:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
447:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
448:       assertEquals(52, Node.LENGTH);
449:       assertEquals(8, Node.FLAG_NO_THROWS);
450:       assertFalse(node1.equals((Object)node0));
451:       
452:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
453:       assertNotNull(node_NodeMismatch0);
454:       assertFalse(node0.hasMoreThanOneChild());
455:       assertEquals((-1), node0.getLineno());
456:       assertFalse(node0.isDo());
457:       assertFalse(node0.isLabel());
458:       assertFalse(node0.isAssignAdd());
459:       assertFalse(node0.isReturn());
460:       assertFalse(node0.isWhile());
461:       assertFalse(node0.isTypeOf());
462:       assertFalse(node0.hasChildren());
463:       assertFalse(node0.isDec());
464:       assertFalse(node0.isAssign());
465:       assertFalse(node0.isGetElem());
466:       assertFalse(node0.isContinue());
467:       assertFalse(node0.isCast());
468:       assertFalse(node0.hasOneChild());
469:       assertFalse(node0.isLabelName());
470:       assertFalse(node0.isBlock());
471:       assertFalse(node0.isStringKey());
472:       assertFalse(node0.isScript());
473:       assertFalse(node0.isNumber());
474:       assertEquals((-1), node0.getSourcePosition());
475:       assertFalse(node0.isNot());
476:       assertEquals(0, node0.getChildCount());
477:       assertFalse(node0.isDefaultCase());
478:       assertFalse(node0.isParamList());
479:       assertFalse(node0.isExprResult());
480:       assertFalse(node0.isVoid());
481:       assertFalse(node0.isBreak());
482:       assertFalse(node0.isComma());
483:       assertFalse(node0.isVar());
484:       assertFalse(node0.isCall());
485:       assertFalse(node0.isName());
486:       assertFalse(node0.isNull());
487:       assertFalse(node0.isTrue());
488:       assertFalse(node0.isNew());
489:       assertFalse(node0.isAdd());
490:       assertFalse(node0.isOr());
491:       assertFalse(node0.isEmpty());
492:       assertFalse(node0.isCase());
493:       assertFalse(node0.isSwitch());
494:       assertFalse(node0.isDelProp());
495:       assertEquals(0, node0.getType());
496:       assertFalse(node0.isHook());
497:       assertFalse(node0.isArrayLit());
498:       assertFalse(node0.isTry());
499:       assertFalse(node0.isFor());
500:       assertFalse(node0.isDebugger());
501:       assertEquals((-1), node0.getCharno());
502:       assertFalse(node0.isGetProp());
503:       assertFalse(node0.isGetterDef());
504:       assertFalse(node0.isString());
505:       assertFalse(node0.isObjectLit());
506:       assertFalse(node0.isAnd());
507:       assertFalse(node0.isThis());
508:       assertFalse(node0.isFunction());
509:       assertFalse(node0.isRegExp());
510:       assertFalse(node0.isWith());
511:       assertFalse(node0.isFalse());
512:       assertFalse(node0.isCatch());
513:       assertFalse(node0.isInstanceOf());
514:       assertFalse(node0.isThrow());
515:       assertFalse(node0.isIf());
516:       assertFalse(node0.isNE());
517:       assertFalse(node0.isInc());
518:       assertFalse(node0.isSetterDef());
519:       assertFalse(node0.isIn());
520:       assertFalse(node1.isDelProp());
521:       assertFalse(node1.isGetterDef());
522:       assertFalse(node1.isIf());
523:       assertEquals(49, node1.getType());
524:       assertFalse(node1.isArrayLit());
525:       assertFalse(node1.isEmpty());
526:       assertFalse(node1.isTry());
527:       assertFalse(node1.isFor());
528:       assertFalse(node1.isDefaultCase());
529:       assertFalse(node1.isRegExp());
530:       assertFalse(node1.isVoid());
531:       assertFalse(node1.isCatch());
532:       assertFalse(node1.isInc());
533:       assertFalse(node1.isIn());
534:       assertFalse(node1.isNE());
535:       assertFalse(node1.isNull());
536:       assertFalse(node1.isTrue());
537:       assertTrue(node1.isThrow());
538:       assertEquals(0, node1.getChildCount());
539:       assertFalse(node1.isInstanceOf());
540:       assertFalse(node1.isVar());
541:       assertFalse(node1.isBlock());
542:       assertFalse(node1.isHook());
543:       assertFalse(node1.isThis());
544:       assertFalse(node1.isSwitch());
545:       assertFalse(node1.isCase());
546:       assertFalse(node1.isScript());
547:       assertEquals((-1), node1.getCharno());
548:       assertFalse(node1.isParamList());
549:       assertFalse(node1.isStringKey());
550:       assertFalse(node1.hasChildren());
551:       assertFalse(node1.isDec());
552:       assertEquals((-1), node1.getSourcePosition());
553:       assertFalse(node1.isLabelName());
554:       assertFalse(node1.isAssign());
555:       assertFalse(node1.isNumber());
556:       assertFalse(node1.isTypeOf());
557:       assertFalse(node1.isCast());
558:       assertFalse(node1.isGetElem());
559:       assertFalse(node1.hasOneChild());
560:       assertFalse(node1.hasMoreThanOneChild());
561:       assertFalse(node1.isAssignAdd());
562:       assertFalse(node1.isLabel());
563:       assertFalse(node1.isReturn());
564:       assertFalse(node1.isDo());
565:       assertFalse(node1.isWith());
566:       assertFalse(node1.isNew());
567:       assertFalse(node1.isAdd());
568:       assertFalse(node1.isExprResult());
569:       assertEquals((-1), node1.getLineno());
570:       assertFalse(node1.isOr());
571:       assertFalse(node1.isBreak());
572:       assertFalse(node1.isName());
573:       assertFalse(node1.isFalse());
574:       assertFalse(node1.isGetProp());
575:       assertFalse(node1.isCall());
576:       assertFalse(node1.isSetterDef());
577:       assertFalse(node1.isComma());
578:       assertFalse(node1.isWhile());
579:       assertFalse(node1.isString());
580:       assertFalse(node1.isNot());
581:       assertFalse(node1.isFunction());
582:       assertFalse(node1.isContinue());
583:       assertFalse(node1.isObjectLit());
584:       assertFalse(node1.isDebugger());
585:       assertFalse(node1.isAnd());
586:       assertEquals(2, Node.POST_FLAG);
587:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
588:       assertEquals(56, Node.CHANGE_TIME);
589:       assertEquals(47, Node.IS_DISPATCHER);
590:       assertEquals(51, Node.STATIC_SOURCE_FILE);
591:       assertEquals(46, Node.IS_NAMESPACE);
592:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
593:       assertEquals(49, Node.DIRECT_EVAL);
594:       assertEquals(37, Node.OPT_ARG_NAME);
595:       assertEquals(57, Node.LAST_PROP);
596:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
597:       assertEquals(30, Node.VAR_ARGS_NAME);
598:       assertEquals(52, Node.LENGTH);
599:       assertEquals(36, Node.QUOTED_PROP);
600:       assertEquals(55, Node.INFERRED_FUNCTION);
601:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
602:       assertEquals(29, Node.JSDOC_INFO_PROP);
603:       assertEquals(53, Node.INPUT_ID);
604:       assertEquals(15, Node.NO_SIDE_EFFECTS);
605:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
606:       assertEquals(8, Node.FLAG_NO_THROWS);
607:       assertEquals(39, Node.EMPTY_BLOCK);
608:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
609:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
610:       assertEquals(50, Node.FREE_CALL);
611:       assertEquals(4095, Node.COLUMN_MASK);
612:       assertEquals(40, Node.ORIGINALNAME_PROP);
613:       assertEquals(57, Node.REFLECTED_OBJECT);
614:       assertEquals(48, Node.DIRECTIVES);
615:       assertEquals(54, Node.SLASH_V);
616:       assertEquals(43, Node.IS_CONSTANT_NAME);
617:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
618:       assertEquals(12, Node.COLUMN_BITS);
619:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
620:       assertEquals(32, Node.INCRDECR_PROP);
621:       assertEquals(1, Node.DECR_FLAG);
622:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
623:       assertEquals(53, Node.INPUT_ID);
624:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
625:       assertEquals(47, Node.IS_DISPATCHER);
626:       assertEquals(2, Node.POST_FLAG);
627:       assertEquals(4095, Node.COLUMN_MASK);
628:       assertEquals(46, Node.IS_NAMESPACE);
629:       assertEquals(51, Node.STATIC_SOURCE_FILE);
630:       assertEquals(12, Node.COLUMN_BITS);
631:       assertEquals(1, Node.DECR_FLAG);
632:       assertEquals(32, Node.INCRDECR_PROP);
633:       assertEquals(43, Node.IS_CONSTANT_NAME);
634:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
635:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
636:       assertEquals(50, Node.FREE_CALL);
637:       assertEquals(40, Node.ORIGINALNAME_PROP);
638:       assertEquals(57, Node.REFLECTED_OBJECT);
639:       assertEquals(54, Node.SLASH_V);
640:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
641:       assertEquals(57, Node.LAST_PROP);
642:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
643:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
644:       assertEquals(30, Node.VAR_ARGS_NAME);
645:       assertEquals(55, Node.INFERRED_FUNCTION);
646:       assertEquals(48, Node.DIRECTIVES);
647:       assertEquals(37, Node.OPT_ARG_NAME);
648:       assertEquals(49, Node.DIRECT_EVAL);
649:       assertEquals(15, Node.NO_SIDE_EFFECTS);
650:       assertEquals(56, Node.CHANGE_TIME);
651:       assertEquals(36, Node.QUOTED_PROP);
652:       assertEquals(29, Node.JSDOC_INFO_PROP);
653:       assertEquals(39, Node.EMPTY_BLOCK);
654:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
655:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
656:       assertEquals(52, Node.LENGTH);
657:       assertEquals(8, Node.FLAG_NO_THROWS);
658:       assertFalse(node0.equals((Object)node1));
659:       assertFalse(node1.equals((Object)node0));
660:       
661:       boolean boolean0 = node0.wasEmptyNode();
662:       assertFalse(boolean0);
663:       assertFalse(node0.hasMoreThanOneChild());
664:       assertEquals((-1), node0.getLineno());
665:       assertFalse(node0.isDo());
666:       assertFalse(node0.isLabel());
667:       assertFalse(node0.isAssignAdd());
668:       assertFalse(node0.isReturn());
669:       assertFalse(node0.isWhile());
670:       assertFalse(node0.isTypeOf());
671:       assertFalse(node0.hasChildren());
672:       assertFalse(node0.isDec());
673:       assertFalse(node0.isAssign());
674:       assertFalse(node0.isGetElem());
675:       assertFalse(node0.isContinue());
676:       assertFalse(node0.isCast());
677:       assertFalse(node0.hasOneChild());
678:       assertFalse(node0.isLabelName());
679:       assertFalse(node0.isBlock());
680:       assertFalse(node0.isStringKey());
681:       assertFalse(node0.isScript());
682:       assertFalse(node0.isNumber());
683:       assertEquals((-1), node0.getSourcePosition());
684:       assertFalse(node0.isNot());
685:       assertEquals(0, node0.getChildCount());
686:       assertFalse(node0.isDefaultCase());
687:       assertFalse(node0.isParamList());
688:       assertFalse(node0.isExprResult());
689:       assertFalse(node0.isVoid());
690:       assertFalse(node0.isBreak());
691:       assertFalse(node0.isComma());
692:       assertFalse(node0.isVar());
693:       assertFalse(node0.isCall());
694:       assertFalse(node0.isName());
695:       assertFalse(node0.isNull());
696:       assertFalse(node0.isTrue());
697:       assertFalse(node0.isNew());
698:       assertFalse(node0.isAdd());
699:       assertFalse(node0.isOr());
700:       assertFalse(node0.isEmpty());
701:       assertFalse(node0.isCase());
702:       assertFalse(node0.isSwitch());
703:       assertFalse(node0.isDelProp());
704:       assertEquals(0, node0.getType());
705:       assertFalse(node0.isHook());
706:       assertFalse(node0.isArrayLit());
707:       assertFalse(node0.isTry());
708:       assertFalse(node0.isFor());
709:       assertFalse(node0.isDebugger());
710:       assertEquals((-1), node0.getCharno());
711:       assertFalse(node0.isGetProp());
712:       assertFalse(node0.isGetterDef());
713:       assertFalse(node0.isString());
714:       assertFalse(node0.isObjectLit());
715:       assertFalse(node0.isAnd());
716:       assertFalse(node0.isThis());
717:       assertFalse(node0.isFunction());
718:       assertFalse(node0.isRegExp());
719:       assertFalse(node0.isWith());
720:       assertFalse(node0.isFalse());
721:       assertFalse(node0.isCatch());
722:       assertFalse(node0.isInstanceOf());
723:       assertFalse(node0.isThrow());
724:       assertFalse(node0.isIf());
725:       assertFalse(node0.isNE());
726:       assertFalse(node0.isInc());
727:       assertFalse(node0.isSetterDef());
728:       assertFalse(node0.isIn());
729:       assertEquals(2, Node.POST_FLAG);
730:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
731:       assertEquals(56, Node.CHANGE_TIME);
732:       assertEquals(47, Node.IS_DISPATCHER);
733:       assertEquals(51, Node.STATIC_SOURCE_FILE);
734:       assertEquals(46, Node.IS_NAMESPACE);
735:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
736:       assertEquals(49, Node.DIRECT_EVAL);
737:       assertEquals(37, Node.OPT_ARG_NAME);
738:       assertEquals(57, Node.LAST_PROP);
739:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
740:       assertEquals(30, Node.VAR_ARGS_NAME);
741:       assertEquals(52, Node.LENGTH);
742:       assertEquals(36, Node.QUOTED_PROP);
743:       assertEquals(55, Node.INFERRED_FUNCTION);
744:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
745:       assertEquals(29, Node.JSDOC_INFO_PROP);
746:       assertEquals(53, Node.INPUT_ID);
747:       assertEquals(15, Node.NO_SIDE_EFFECTS);
748:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
749:       assertEquals(8, Node.FLAG_NO_THROWS);
750:       assertEquals(39, Node.EMPTY_BLOCK);
751:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
752:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
753:       assertEquals(50, Node.FREE_CALL);
754:       assertEquals(4095, Node.COLUMN_MASK);
755:       assertEquals(40, Node.ORIGINALNAME_PROP);
756:       assertEquals(57, Node.REFLECTED_OBJECT);
757:       assertEquals(48, Node.DIRECTIVES);
758:       assertEquals(54, Node.SLASH_V);
759:       assertEquals(43, Node.IS_CONSTANT_NAME);
760:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
761:       assertEquals(12, Node.COLUMN_BITS);
762:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
763:       assertEquals(32, Node.INCRDECR_PROP);
764:       assertEquals(1, Node.DECR_FLAG);
765:       assertFalse(node0.equals((Object)node1));
766:       
767:       boolean boolean1 = false;
768:       node0.setIsSyntheticBlock(false);
769:       assertFalse(node0.hasMoreThanOneChild());
770:       assertEquals((-1), node0.getLineno());
771:       assertFalse(node0.isDo());
772:       assertFalse(node0.isLabel());
773:       assertFalse(node0.isAssignAdd());
774:       assertFalse(node0.isReturn());
775:       assertFalse(node0.isWhile());
776:       assertFalse(node0.isTypeOf());
777:       assertFalse(node0.hasChildren());
778:       assertFalse(node0.isDec());
779:       assertFalse(node0.isAssign());
780:       assertFalse(node0.isGetElem());
781:       assertFalse(node0.isContinue());
782:       assertFalse(node0.isCast());
783:       assertFalse(node0.hasOneChild());
784:       assertFalse(node0.isLabelName());
785:       assertFalse(node0.isBlock());
786:       assertFalse(node0.isStringKey());
787:       assertFalse(node0.isScript());
788:       assertFalse(node0.isNumber());
789:       assertEquals((-1), node0.getSourcePosition());
790:       assertFalse(node0.isNot());
791:       assertEquals(0, node0.getChildCount());
792:       assertFalse(node0.isDefaultCase());
793:       assertFalse(node0.isParamList());
794:       assertFalse(node0.isExprResult());
795:       assertFalse(node0.isVoid());
796:       assertFalse(node0.isBreak());
797:       assertFalse(node0.isComma());
798:       assertFalse(node0.isVar());
799:       assertFalse(node0.isCall());
800:       assertFalse(node0.isName());
801:       assertFalse(node0.isNull());
802:       assertFalse(node0.isTrue());
803:       assertFalse(node0.isNew());
804:       assertFalse(node0.isAdd());
805:       assertFalse(node0.isOr());
806:       assertFalse(node0.isEmpty());
807:       assertFalse(node0.isCase());
808:       assertFalse(node0.isSwitch());
809:       assertFalse(node0.isDelProp());
810:       assertEquals(0, node0.getType());
811:       assertFalse(node0.isHook());
812:       assertFalse(node0.isArrayLit());
813:       assertFalse(node0.isTry());
814:       assertFalse(node0.isFor());
815:       assertFalse(node0.isDebugger());
816:       assertEquals((-1), node0.getCharno());
817:       assertFalse(node0.isGetProp());
818:       assertFalse(node0.isGetterDef());
819:       assertFalse(node0.isString());
820:       assertFalse(node0.isObjectLit());
821:       assertFalse(node0.isAnd());
822:       assertFalse(node0.isThis());
823:       assertFalse(node0.isFunction());
824:       assertFalse(node0.isRegExp());
825:       assertFalse(node0.isWith());
826:       assertFalse(node0.isFalse());
827:       assertFalse(node0.isCatch());
828:       assertFalse(node0.isInstanceOf());
829:       assertFalse(node0.isThrow());
830:       assertFalse(node0.isIf());
831:       assertFalse(node0.isNE());
832:       assertFalse(node0.isInc());
833:       assertFalse(node0.isSetterDef());
834:       assertFalse(node0.isIn());
835:       assertEquals(2, Node.POST_FLAG);
836:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
837:       assertEquals(56, Node.CHANGE_TIME);
838:       assertEquals(47, Node.IS_DISPATCHER);
839:       assertEquals(51, Node.STATIC_SOURCE_FILE);
840:       assertEquals(46, Node.IS_NAMESPACE);
841:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
842:       assertEquals(49, Node.DIRECT_EVAL);
843:       assertEquals(37, Node.OPT_ARG_NAME);
844:       assertEquals(57, Node.LAST_PROP);
845:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
846:       assertEquals(30, Node.VAR_ARGS_NAME);
847:       assertEquals(52, Node.LENGTH);
848:       assertEquals(36, Node.QUOTED_PROP);
849:       assertEquals(55, Node.INFERRED_FUNCTION);
850:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
851:       assertEquals(29, Node.JSDOC_INFO_PROP);
852:       assertEquals(53, Node.INPUT_ID);
853:       assertEquals(15, Node.NO_SIDE_EFFECTS);
854:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
855:       assertEquals(8, Node.FLAG_NO_THROWS);
856:       assertEquals(39, Node.EMPTY_BLOCK);
857:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
858:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
859:       assertEquals(50, Node.FREE_CALL);
860:       assertEquals(4095, Node.COLUMN_MASK);
861:       assertEquals(40, Node.ORIGINALNAME_PROP);
862:       assertEquals(57, Node.REFLECTED_OBJECT);
863:       assertEquals(48, Node.DIRECTIVES);
864:       assertEquals(54, Node.SLASH_V);
865:       assertEquals(43, Node.IS_CONSTANT_NAME);
866:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
867:       assertEquals(12, Node.COLUMN_BITS);
868:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
869:       assertEquals(32, Node.INCRDECR_PROP);
870:       assertEquals(1, Node.DECR_FLAG);
871:       assertFalse(node0.equals((Object)node1));
872:       
873:       // Undeclared exception!
874:       try { 
875:         Charset.forName("NEW");
876:         fail("Expecting exception: UnsupportedCharsetException");
877:       
878:       } catch(UnsupportedCharsetException e) {
879:          //
880:          // NEW
881:          //
882:          verifyException("java.nio.charset.Charset", e);
883:       }
884:   }
885: }
RegularFileObject[/tmp/EvoSuite_56_1628161082323/com/google/javascript/rhino/Node_56_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:58:02 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_56_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_56_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.javascript.rhino.Node$AncestorIterable$1",
115:       "com.google.common.collect.Iterators$12",
116:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
117:       "com.google.common.collect.Iterators$11",
118:       "com.google.javascript.rhino.jstype.JSType$1",
119:       "com.google.common.collect.EmptyImmutableBiMap",
120:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
121:       "com.google.common.base.Predicate",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.common.collect.ImmutableList$SerializedForm",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.base.Joiner$MapJoiner",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.javascript.rhino.JSDocInfo$1",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
232:       "com.google.common.collect.ImmutableList",
233:       "com.google.common.collect.SingletonImmutableBiMap",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
235:       "com.google.javascript.rhino.jstype.StringType",
236:       "com.google.javascript.rhino.Node$AbstractPropListItem",
237:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
238:       "com.google.javascript.rhino.jstype.TemplatizedType",
239:       "com.google.javascript.rhino.jstype.Visitor",
240:       "com.google.javascript.rhino.jstype.NoResolvedType",
241:       "com.google.javascript.rhino.jstype.JSTypeNative",
242:       "com.google.javascript.rhino.jstype.AllType",
243:       "com.google.common.collect.Maps",
244:       "com.google.common.collect.SetMultimap",
245:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
246:       "com.google.common.collect.Maps$EntryTransformer",
247:       "com.google.javascript.rhino.JSTypeExpression",
248:       "com.google.common.collect.Iterators$MergingIterator"
249:     );
250:   } 
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_56_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.javascript.rhino.Token",
268:       "com.google.common.base.Preconditions",
269:       "com.google.javascript.rhino.SimpleErrorReporter",
270:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
271:       "com.google.common.base.Joiner",
272:       "com.google.common.base.Joiner$1",
273:       "com.google.common.collect.Collections2",
274:       "com.google.common.base.Joiner$MapJoiner",
275:       "com.google.common.collect.Maps",
276:       "com.google.common.collect.AbstractMultimap",
277:       "com.google.common.collect.AbstractMapBasedMultimap",
278:       "com.google.common.collect.AbstractSetMultimap",
279:       "com.google.common.collect.LinkedHashMultimap",
280:       "com.google.common.collect.AbstractMapEntry",
281:       "com.google.common.collect.ImmutableEntry",
282:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
283:       "com.google.common.collect.AbstractListMultimap",
284:       "com.google.common.collect.ArrayListMultimap",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
286:       "com.google.common.collect.ImmutableCollection",
287:       "com.google.common.collect.RegularImmutableList",
288:       "com.google.common.collect.ObjectArrays",
289:       "com.google.common.collect.ImmutableList",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
292:       "com.google.common.collect.ImmutableCollection$Builder",
293:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
294:       "com.google.common.collect.ImmutableList$Builder",
295:       "com.google.common.collect.UnmodifiableIterator",
296:       "com.google.common.collect.UnmodifiableListIterator",
297:       "com.google.common.collect.Iterators$1",
298:       "com.google.common.collect.Iterators$2",
299:       "com.google.common.collect.Iterators",
300:       "com.google.javascript.rhino.jstype.JSTypeNative",
301:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
302:       "com.google.javascript.rhino.jstype.JSType$1",
303:       "com.google.javascript.rhino.jstype.JSType",
304:       "com.google.javascript.rhino.jstype.ObjectType",
305:       "com.google.javascript.rhino.jstype.ProxyObjectType",
306:       "com.google.javascript.rhino.jstype.TemplateType",
307:       "com.google.javascript.rhino.jstype.ValueType",
308:       "com.google.javascript.rhino.jstype.BooleanType",
309:       "com.google.javascript.rhino.jstype.NullType",
310:       "com.google.javascript.rhino.jstype.NumberType",
311:       "com.google.javascript.rhino.jstype.StringType",
312:       "com.google.javascript.rhino.jstype.UnknownType",
313:       "com.google.javascript.rhino.jstype.VoidType",
314:       "com.google.javascript.rhino.jstype.AllType",
315:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
316:       "com.google.common.collect.ImmutableMap",
317:       "com.google.common.collect.ImmutableBiMap",
318:       "com.google.common.collect.EmptyImmutableBiMap",
319:       "com.google.javascript.rhino.jstype.PropertyMap$1",
320:       "com.google.javascript.rhino.jstype.PropertyMap",
321:       "com.google.javascript.rhino.jstype.FunctionType",
322:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
323:       "com.google.javascript.rhino.jstype.ArrowType",
324:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
325:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
326:       "com.google.javascript.rhino.jstype.InstanceObjectType",
327:       "com.google.javascript.rhino.jstype.Property",
328:       "com.google.common.collect.Lists",
329:       "com.google.javascript.rhino.jstype.NoObjectType",
330:       "com.google.javascript.rhino.jstype.NoType",
331:       "com.google.javascript.rhino.jstype.NoResolvedType",
332:       "com.google.common.collect.SingletonImmutableList",
333:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
334:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
335:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
336:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
337:       "com.google.javascript.rhino.jstype.UnionType",
338:       "com.google.javascript.rhino.jstype.FunctionBuilder",
339:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.common.base.Objects",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
346:       "com.google.common.collect.Sets",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.javascript.rhino.JSDocInfo$Visibility",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.common.collect.Platform",
353:       "com.google.javascript.rhino.jstype.NamedType",
354:       "com.google.javascript.rhino.Node$AncestorIterable$1",
355:       "com.google.javascript.rhino.InputId",
356:       "com.google.common.collect.Iterables",
357:       "com.google.common.collect.ImmutableSet",
358:       "com.google.common.collect.EmptyImmutableSet",
359:       "com.google.common.collect.AbstractMultimap$Values",
360:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
361:       "com.google.common.collect.AbstractMapBasedMultimap$1",
362:       "com.google.common.collect.Multimaps$Entries",
363:       "com.google.common.collect.AbstractMultimap$Entries",
364:       "com.google.common.collect.AbstractMapBasedMultimap$2",
365:       "com.google.javascript.rhino.JSTypeExpression",
366:       "com.google.common.collect.ImmutableList$1",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterators$12",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.jstype.JSType$2",
371:       "com.google.common.collect.Sets$ImprovedAbstractSet",
372:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
373:       "com.google.common.collect.Hashing",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
375:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
376:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
377:     );
378:   }
379: }

[MASTER] 10:58:02.401 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertNotNull(node0);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(iterable0.contains(node0));

Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
assertNotNull(node_AncestorIterable0);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

Node node1 = Node.newString(49, "");
assertNotNull(node1);
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertEquals(49, node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertTrue(node1.isThrow());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node1.equals((Object)node0));

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertEquals(49, node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertTrue(node1.isThrow());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isWith());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

boolean boolean0 = node0.wasEmptyNode();
assertFalse(boolean0);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.equals((Object)node1));

boolean boolean1 = false;
node0.setIsSyntheticBlock(false);
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.equals((Object)node1));

Charset.forName("NEW");

[MASTER] 10:58:46.513 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:46.836 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:47.106 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:47.349 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:47.579 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:47.795 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:48.087 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:48.332 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:48.541 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:48.787 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:49.014 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:49.204 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:49.425 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:49.662 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:49.913 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:50.129 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:50.330 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:50.534 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:50.854 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:58:52.138 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/25
* Done!

* Computation finished
