* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 15976
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 801119781
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 09:45:29.833 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 09:46:03.252 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 501
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 3502
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 3502
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 20865
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 3502
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 1508
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 3502
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 3502
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 807
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 4328
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 400
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 609
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 1124
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 4472
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 675
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 351
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 212
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 8372
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 212
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 3502
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 212
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 3502
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 2290
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 212
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 3343
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 299
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 1122
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 22745
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 212
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 212
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 2465
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 899
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 12246
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 400
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 4667
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 835
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 120
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 180
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 104
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 1042
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 299
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 208
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 19146
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 82
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 3474
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 3333
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 86
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 537
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 11456
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 835
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 4494
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 3501
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 2231
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1339
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 400
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 37772
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 321
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 920
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 18223
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 4664
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 501
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 799
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 344
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 4767
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 212
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 212
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 12387
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 12186
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 5577
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 1508
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 44
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 10527
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 857
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 4664
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 721
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 4664
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 5244
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 545
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 120
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 1100
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 120
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 299
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 861
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 7898
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - true: 30
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 29307
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 44
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 3036
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 399
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 721
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 399
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 14566
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 299
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 84
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 84
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 84
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 2315
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 10424
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 721
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 2383
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 13668
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 2315
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 5885
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 12375
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 28887
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 39
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 12324
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 501
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 102859
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 246
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 4059
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 4340
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 601
Number of times BBC is called for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 4328
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 16
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 3280
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 35256
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 299
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 2465
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 41
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 44
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 807
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 8584
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 40784
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 102859
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 1831
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 529
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 299
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>()V: Line 2052: 120
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 2433
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 3322
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 120
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>()V: Line 2053: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 91
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 4148
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 1085
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 4585
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 15
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 351
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 7955
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 1054
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 180
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 27217
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 721
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 2403
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 14157
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 1751
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 120
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 299
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 156
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 8784
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 1961
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 120
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 1377
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 120
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 3322
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 120
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 58094
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 2296
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 5635
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 120
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 2383
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 2626
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 16124
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 120
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 951
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 10738
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 2964
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 835
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 1642
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 5320
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 3052
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 7081
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 2315
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 2315
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 2382
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 299
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 958
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 1508
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 102859
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 528
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 22789
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 4402
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 26359
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 1085
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 1085
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 1807
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 528
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 3258
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 8725
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 835
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 4876
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setReturnsTainted()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 299
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 1124
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 212
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 180
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 4951
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 10527
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 159
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 120
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 19117
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 1654
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 31127
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 5830
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 13698
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 3089
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 400
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 893
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 1654
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 4585
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 299
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 120
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 147
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 5312
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 721
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 899
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 1838
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 2471
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 669: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 120
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 172
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 538
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 212
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 269
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 94
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 501
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 7257
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 9402
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 8547
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 33314
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 7257
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 3507
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 2964
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 120
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 441
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 5682
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 1122
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 721
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 1654
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 163
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 1054
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 120
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 537
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 127
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 316
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 1807
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 1807
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 16312
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 8406
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 1807
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 212
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 2471
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 835
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 1807
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 5874
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 5934
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 1807
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 1529
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 1807
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 1807
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 835
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 1807
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 1529
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 1529
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 20516
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 1529
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 8030
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 3869
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 269
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 2465
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 6046
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 7241
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 249
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 2
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 10292
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 10613
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 3090
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 6068
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 212
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 721
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 2211
Number of times BBC is called for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: Line 546: 120
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 522
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 2702
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 520
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 958
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 913
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 1365
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 1085
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 6670
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 30653
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 2788
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 2126
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 18046
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 5278
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 433
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 507
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 1223
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 2626
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 609
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 2626
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 3322
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 609
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 26218
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 816
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 1807
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 4247
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 4
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 2507
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 18086
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 299
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 28772
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 12200
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 886
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 721
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 79
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 299
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 335
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 22581
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 721
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 721
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 1712
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 7741
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 19335
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true: 104
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 169
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 4667
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 3974
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setReturnsTainted()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2111: 299
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 4667
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 334
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 2465
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 20403
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setReturnsTainted()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2112: 299
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 10385
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 951
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: I4 Branch 142 IF_ICMPNE L1209 - true: 2
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 501
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 951
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false: 104
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 951
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 2594
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 2343
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 951
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 34162
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 951
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 951
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 299
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 433
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 171
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 4951
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 958
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 12701
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 12701
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false: 4
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 23269
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - false: 28
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 911
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 230
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 214
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 299
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 675
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 299
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 804
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 8784
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 5214
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 2788
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 2293
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 3386
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 38502
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 212
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 212
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 609
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 299
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 1502
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 3853
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 501
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 1085
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 721
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 7575
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 870
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 14683
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 252
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 1711
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 2211
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 20813
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 2211
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 835
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 299
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 1727
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 501
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 3502
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 522
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 388
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 19259
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 478
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 12120
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 212
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 9067
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 4402
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 501
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 138
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2794
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 7257
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 1141
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 25312
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 931
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 1654
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 44516
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 44516
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 3802
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 4667
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 29737
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 2964
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 18139
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 3386
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 21436
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 27379
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 501
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 1223
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 721
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1459: 30
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 4214
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 601
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 49
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 44
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 3702
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 2822
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 2280
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 1744
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 5682
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 2898
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 1365
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 4494
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 1365
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 7108
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 3640
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 4494
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 1714
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 60
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 44516
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 3853
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 3101
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 44516
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 2465
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 44516
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 44516
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 11845
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>()V: root-Branch: 120
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 30064
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 44516
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 6670
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 44516
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 721
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 30064
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 30064
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 22466
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 3502
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 835
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 4664
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 697
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 4664
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 12736
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 12736
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 20650
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 20749
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 501
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 120
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 86
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 478
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 1722
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 3219
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 501
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 37433
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 609
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 1223
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 835
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 13442
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 120
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 9608
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: Line 889: 120
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 15131
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 34152
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 2465
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 3353
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 399
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 1509
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 299
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 5662
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 299
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 501
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 16837
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 501
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 400
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 2296
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 721
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 6025
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 721
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 835
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 1506
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 246
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 3067
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 1141
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 212
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 17813
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 609
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - true: 28
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 2964
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 4423
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 299
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 29191
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 466: 43
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 27379
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 1529
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 299
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 958
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 27858
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 27379
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 33661
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 721
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 3322
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 4453
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 467: 43
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 468: 43
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 9608
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 5708
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 2340
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 1807
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 1807
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 2280
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 4214
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 34335
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 16312
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 4214
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 1365
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 2288
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 1085
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 1085
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 1961
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 1666
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 299
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 3619
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 3486
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 2127
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 609
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 34335
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 51
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 1518
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 102859
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 4
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 12712
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - false: 2
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 167
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 721
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 299
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 1365
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 1365
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 1085
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 1223
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 400
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 1406
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 2429
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 2225
Number of times BBC is called in total: 6459383
* Search finished after 604s and 626 generations, 270167 statements, best individual has fitness: 2756.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 09:56:52.288 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 92%
* Total number of goals: 853
* Number of covered goals: 789
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 617
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 104
* Number of covered goals: 104
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 530
* Number of covered goals: 462
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 4536
* Number of covered goals: 2320
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 578
* Generated 875 tests with total length 10933
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 09:57:59.809 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6760833333333334% of time used, but only 52/875 tests minimized), falling back to using all assertions
[MASTER] 09:58:19.291 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 09:58:29.530 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 10 seconds more than allowed.
[MASTER] 09:58:34.149 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_66_1628157513709/com/google/javascript/rhino/Node_66_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_66_1628157513709/com/google/javascript/rhino/Node_66_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:34.149 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:34.149 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:34.153 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 163
[MASTER] 09:58:34.155 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_66_1628157513709/com/google/javascript/rhino/Node_66_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:33 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_66_tmp__ESTest extends Node_66_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(1.0);
23:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
24:       assertEquals(39, Node.EMPTY_BLOCK);
25:       assertEquals(48, Node.DIRECTIVES);
26:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
27:       assertEquals(57, Node.REFLECTED_OBJECT);
28:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
29:       assertEquals(55, Node.INFERRED_FUNCTION);
30:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
31:       assertEquals(50, Node.FREE_CALL);
32:       assertEquals(52, Node.LENGTH);
33:       assertEquals(8, Node.FLAG_NO_THROWS);
34:       assertEquals(36, Node.QUOTED_PROP);
35:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
36:       assertEquals(1, Node.DECR_FLAG);
37:       assertEquals(49, Node.DIRECT_EVAL);
38:       assertEquals(12, Node.COLUMN_BITS);
39:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
40:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
41:       assertEquals(4095, Node.COLUMN_MASK);
42:       assertEquals(56, Node.CHANGE_TIME);
43:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
44:       assertEquals(29, Node.JSDOC_INFO_PROP);
45:       assertEquals(47, Node.IS_DISPATCHER);
46:       assertEquals(37, Node.OPT_ARG_NAME);
47:       assertEquals(32, Node.INCRDECR_PROP);
48:       assertEquals(46, Node.IS_NAMESPACE);
49:       assertEquals(51, Node.STATIC_SOURCE_FILE);
50:       assertEquals(53, Node.INPUT_ID);
51:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
52:       assertEquals(57, Node.LAST_PROP);
53:       assertEquals(43, Node.IS_CONSTANT_NAME);
54:       assertEquals(30, Node.VAR_ARGS_NAME);
55:       assertEquals(15, Node.NO_SIDE_EFFECTS);
56:       assertEquals(54, Node.SLASH_V);
57:       assertEquals(40, Node.ORIGINALNAME_PROP);
58:       assertEquals(2, Node.POST_FLAG);
59:       assertEquals((-1), node0.getSourcePosition());
60:       assertFalse(node0.isTypeOf());
61:       assertFalse(node0.hasChildren());
62:       assertFalse(node0.isGetElem());
63:       assertFalse(node0.isAssignAdd());
64:       assertEquals((-1), node0.getLineno());
65:       assertFalse(node0.isLabelName());
66:       assertFalse(node0.isOr());
67:       assertFalse(node0.isScript());
68:       assertFalse(node0.isExprResult());
69:       assertFalse(node0.isWhile());
70:       assertFalse(node0.hasOneChild());
71:       assertFalse(node0.hasMoreThanOneChild());
72:       assertFalse(node0.isReturn());
73:       assertFalse(node0.isCall());
74:       assertFalse(node0.isInstanceOf());
75:       assertFalse(node0.isBlock());
76:       assertFalse(node0.isWith());
77:       assertEquals(39, node0.getType());
78:       assertFalse(node0.isComma());
79:       assertFalse(node0.isAssign());
80:       assertFalse(node0.isDec());
81:       assertFalse(node0.isNull());
82:       assertFalse(node0.isBreak());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isParamList());
85:       assertFalse(node0.isName());
86:       assertFalse(node0.isStringKey());
87:       assertEquals((-1), node0.getCharno());
88:       assertFalse(node0.isDefaultCase());
89:       assertFalse(node0.isSwitch());
90:       assertFalse(node0.isAdd());
91:       assertFalse(node0.isNew());
92:       assertFalse(node0.isDo());
93:       assertFalse(node0.isArrayLit());
94:       assertFalse(node0.isVar());
95:       assertFalse(node0.isLabel());
96:       assertEquals(0, node0.getChildCount());
97:       assertFalse(node0.isIf());
98:       assertFalse(node0.isNE());
99:       assertFalse(node0.isEmpty());
100:       assertFalse(node0.isDelProp());
101:       assertTrue(node0.isNumber());
102:       assertFalse(node0.isIn());
103:       assertFalse(node0.isDebugger());
104:       assertFalse(node0.isGetterDef());
105:       assertFalse(node0.isRegExp());
106:       assertFalse(node0.isString());
107:       assertFalse(node0.isTrue());
108:       assertFalse(node0.isCase());
109:       assertFalse(node0.isTry());
110:       assertFalse(node0.isVoid());
111:       assertFalse(node0.isHook());
112:       assertFalse(node0.isCatch());
113:       assertFalse(node0.isFor());
114:       assertFalse(node0.isSetterDef());
115:       assertFalse(node0.isGetProp());
116:       assertFalse(node0.isAnd());
117:       assertFalse(node0.isObjectLit());
118:       assertFalse(node0.isNot());
119:       assertFalse(node0.isInc());
120:       assertFalse(node0.isContinue());
121:       assertFalse(node0.isCast());
122:       assertFalse(node0.isThrow());
123:       assertFalse(node0.isFalse());
124:       assertFalse(node0.isFunction());
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
128:       assertEquals(39, Node.EMPTY_BLOCK);
129:       assertEquals(48, Node.DIRECTIVES);
130:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
131:       assertEquals(57, Node.REFLECTED_OBJECT);
132:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
133:       assertEquals(55, Node.INFERRED_FUNCTION);
134:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
135:       assertEquals(50, Node.FREE_CALL);
136:       assertEquals(52, Node.LENGTH);
137:       assertEquals(8, Node.FLAG_NO_THROWS);
138:       assertEquals(36, Node.QUOTED_PROP);
139:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
140:       assertEquals(1, Node.DECR_FLAG);
141:       assertEquals(49, Node.DIRECT_EVAL);
142:       assertEquals(12, Node.COLUMN_BITS);
143:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
144:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
145:       assertEquals(4095, Node.COLUMN_MASK);
146:       assertEquals(56, Node.CHANGE_TIME);
147:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
148:       assertEquals(29, Node.JSDOC_INFO_PROP);
149:       assertEquals(47, Node.IS_DISPATCHER);
150:       assertEquals(37, Node.OPT_ARG_NAME);
151:       assertEquals(32, Node.INCRDECR_PROP);
152:       assertEquals(46, Node.IS_NAMESPACE);
153:       assertEquals(51, Node.STATIC_SOURCE_FILE);
154:       assertEquals(53, Node.INPUT_ID);
155:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
156:       assertEquals(57, Node.LAST_PROP);
157:       assertEquals(43, Node.IS_CONSTANT_NAME);
158:       assertEquals(30, Node.VAR_ARGS_NAME);
159:       assertEquals(15, Node.NO_SIDE_EFFECTS);
160:       assertEquals(54, Node.SLASH_V);
161:       assertEquals(40, Node.ORIGINALNAME_PROP);
162:       assertEquals(2, Node.POST_FLAG);
163:       assertFalse(iterable0.contains(node0));
164:       assertEquals((-1), node0.getSourcePosition());
165:       assertFalse(node0.isTypeOf());
166:       assertFalse(node0.hasChildren());
167:       assertFalse(node0.isGetElem());
168:       assertFalse(node0.isAssignAdd());
169:       assertEquals((-1), node0.getLineno());
170:       assertFalse(node0.isLabelName());
171:       assertFalse(node0.isOr());
172:       assertFalse(node0.isScript());
173:       assertFalse(node0.isExprResult());
174:       assertFalse(node0.isWhile());
175:       assertFalse(node0.hasOneChild());
176:       assertFalse(node0.hasMoreThanOneChild());
177:       assertFalse(node0.isReturn());
178:       assertFalse(node0.isCall());
179:       assertFalse(node0.isInstanceOf());
180:       assertFalse(node0.isBlock());
181:       assertFalse(node0.isWith());
182:       assertEquals(39, node0.getType());
183:       assertFalse(node0.isComma());
184:       assertFalse(node0.isAssign());
185:       assertFalse(node0.isDec());
186:       assertFalse(node0.isNull());
187:       assertFalse(node0.isBreak());
188:       assertFalse(node0.isThis());
189:       assertFalse(node0.isParamList());
190:       assertFalse(node0.isName());
191:       assertFalse(node0.isStringKey());
192:       assertEquals((-1), node0.getCharno());
193:       assertFalse(node0.isDefaultCase());
194:       assertFalse(node0.isSwitch());
195:       assertFalse(node0.isAdd());
196:       assertFalse(node0.isNew());
197:       assertFalse(node0.isDo());
198:       assertFalse(node0.isArrayLit());
199:       assertFalse(node0.isVar());
200:       assertFalse(node0.isLabel());
201:       assertEquals(0, node0.getChildCount());
202:       assertFalse(node0.isIf());
203:       assertFalse(node0.isNE());
204:       assertFalse(node0.isEmpty());
205:       assertFalse(node0.isDelProp());
206:       assertTrue(node0.isNumber());
207:       assertFalse(node0.isIn());
208:       assertFalse(node0.isDebugger());
209:       assertFalse(node0.isGetterDef());
210:       assertFalse(node0.isRegExp());
211:       assertFalse(node0.isString());
212:       assertFalse(node0.isTrue());
213:       assertFalse(node0.isCase());
214:       assertFalse(node0.isTry());
215:       assertFalse(node0.isVoid());
216:       assertFalse(node0.isHook());
217:       assertFalse(node0.isCatch());
218:       assertFalse(node0.isFor());
219:       assertFalse(node0.isSetterDef());
220:       assertFalse(node0.isGetProp());
221:       assertFalse(node0.isAnd());
222:       assertFalse(node0.isObjectLit());
223:       assertFalse(node0.isNot());
224:       assertFalse(node0.isInc());
225:       assertFalse(node0.isContinue());
226:       assertFalse(node0.isCast());
227:       assertFalse(node0.isThrow());
228:       assertFalse(node0.isFalse());
229:       assertFalse(node0.isFunction());
230:       
231:       node0.isTry();
232:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
233:       assertEquals(39, Node.EMPTY_BLOCK);
234:       assertEquals(48, Node.DIRECTIVES);
235:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
236:       assertEquals(57, Node.REFLECTED_OBJECT);
237:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
238:       assertEquals(55, Node.INFERRED_FUNCTION);
239:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
240:       assertEquals(50, Node.FREE_CALL);
241:       assertEquals(52, Node.LENGTH);
242:       assertEquals(8, Node.FLAG_NO_THROWS);
243:       assertEquals(36, Node.QUOTED_PROP);
244:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
245:       assertEquals(1, Node.DECR_FLAG);
246:       assertEquals(49, Node.DIRECT_EVAL);
247:       assertEquals(12, Node.COLUMN_BITS);
248:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
249:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
250:       assertEquals(4095, Node.COLUMN_MASK);
251:       assertEquals(56, Node.CHANGE_TIME);
252:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
253:       assertEquals(29, Node.JSDOC_INFO_PROP);
254:       assertEquals(47, Node.IS_DISPATCHER);
255:       assertEquals(37, Node.OPT_ARG_NAME);
256:       assertEquals(32, Node.INCRDECR_PROP);
257:       assertEquals(46, Node.IS_NAMESPACE);
258:       assertEquals(51, Node.STATIC_SOURCE_FILE);
259:       assertEquals(53, Node.INPUT_ID);
260:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
261:       assertEquals(57, Node.LAST_PROP);
262:       assertEquals(43, Node.IS_CONSTANT_NAME);
263:       assertEquals(30, Node.VAR_ARGS_NAME);
264:       assertEquals(15, Node.NO_SIDE_EFFECTS);
265:       assertEquals(54, Node.SLASH_V);
266:       assertEquals(40, Node.ORIGINALNAME_PROP);
267:       assertEquals(2, Node.POST_FLAG);
268:       assertEquals((-1), node0.getSourcePosition());
269:       assertFalse(node0.isTypeOf());
270:       assertFalse(node0.hasChildren());
271:       assertFalse(node0.isGetElem());
272:       assertFalse(node0.isAssignAdd());
273:       assertEquals((-1), node0.getLineno());
274:       assertFalse(node0.isLabelName());
275:       assertFalse(node0.isOr());
276:       assertFalse(node0.isScript());
277:       assertFalse(node0.isExprResult());
278:       assertFalse(node0.isWhile());
279:       assertFalse(node0.hasOneChild());
280:       assertFalse(node0.hasMoreThanOneChild());
281:       assertFalse(node0.isReturn());
282:       assertFalse(node0.isCall());
283:       assertFalse(node0.isInstanceOf());
284:       assertFalse(node0.isBlock());
285:       assertFalse(node0.isWith());
286:       assertEquals(39, node0.getType());
287:       assertFalse(node0.isComma());
288:       assertFalse(node0.isAssign());
289:       assertFalse(node0.isDec());
290:       assertFalse(node0.isNull());
291:       assertFalse(node0.isBreak());
292:       assertFalse(node0.isThis());
293:       assertFalse(node0.isParamList());
294:       assertFalse(node0.isName());
295:       assertFalse(node0.isStringKey());
296:       assertEquals((-1), node0.getCharno());
297:       assertFalse(node0.isDefaultCase());
298:       assertFalse(node0.isSwitch());
299:       assertFalse(node0.isAdd());
300:       assertFalse(node0.isNew());
301:       assertFalse(node0.isDo());
302:       assertFalse(node0.isArrayLit());
303:       assertFalse(node0.isVar());
304:       assertFalse(node0.isLabel());
305:       assertEquals(0, node0.getChildCount());
306:       assertFalse(node0.isIf());
307:       assertFalse(node0.isNE());
308:       assertFalse(node0.isEmpty());
309:       assertFalse(node0.isDelProp());
310:       assertTrue(node0.isNumber());
311:       assertFalse(node0.isIn());
312:       assertFalse(node0.isDebugger());
313:       assertFalse(node0.isGetterDef());
314:       assertFalse(node0.isRegExp());
315:       assertFalse(node0.isString());
316:       assertFalse(node0.isTrue());
317:       assertFalse(node0.isCase());
318:       assertFalse(node0.isTry());
319:       assertFalse(node0.isVoid());
320:       assertFalse(node0.isHook());
321:       assertFalse(node0.isCatch());
322:       assertFalse(node0.isFor());
323:       assertFalse(node0.isSetterDef());
324:       assertFalse(node0.isGetProp());
325:       assertFalse(node0.isAnd());
326:       assertFalse(node0.isObjectLit());
327:       assertFalse(node0.isNot());
328:       assertFalse(node0.isInc());
329:       assertFalse(node0.isContinue());
330:       assertFalse(node0.isCast());
331:       assertFalse(node0.isThrow());
332:       assertFalse(node0.isFalse());
333:       assertFalse(node0.isFunction());
334:       
335:       Node node1 = new Node(15, 0, 48);
336:       assertEquals(51, Node.STATIC_SOURCE_FILE);
337:       assertEquals(12, Node.COLUMN_BITS);
338:       assertEquals(32, Node.INCRDECR_PROP);
339:       assertEquals(46, Node.IS_NAMESPACE);
340:       assertEquals(30, Node.VAR_ARGS_NAME);
341:       assertEquals(15, Node.NO_SIDE_EFFECTS);
342:       assertEquals(57, Node.LAST_PROP);
343:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
344:       assertEquals(1, Node.DECR_FLAG);
345:       assertEquals(29, Node.JSDOC_INFO_PROP);
346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
347:       assertEquals(57, Node.REFLECTED_OBJECT);
348:       assertEquals(52, Node.LENGTH);
349:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
350:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
351:       assertEquals(56, Node.CHANGE_TIME);
352:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
353:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
354:       assertEquals(48, Node.DIRECTIVES);
355:       assertEquals(49, Node.DIRECT_EVAL);
356:       assertEquals(37, Node.OPT_ARG_NAME);
357:       assertEquals(55, Node.INFERRED_FUNCTION);
358:       assertEquals(4095, Node.COLUMN_MASK);
359:       assertEquals(36, Node.QUOTED_PROP);
360:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
361:       assertEquals(8, Node.FLAG_NO_THROWS);
362:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
363:       assertEquals(53, Node.INPUT_ID);
364:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
365:       assertEquals(39, Node.EMPTY_BLOCK);
366:       assertEquals(50, Node.FREE_CALL);
367:       assertEquals(54, Node.SLASH_V);
368:       assertEquals(47, Node.IS_DISPATCHER);
369:       assertEquals(43, Node.IS_CONSTANT_NAME);
370:       assertEquals(2, Node.POST_FLAG);
371:       assertEquals(40, Node.ORIGINALNAME_PROP);
372:       assertFalse(node1.isCatch());
373:       assertEquals(0, node1.getChildCount());
374:       assertFalse(node1.isSetterDef());
375:       assertFalse(node1.isDebugger());
376:       assertFalse(node1.isDefaultCase());
377:       assertFalse(node1.isTry());
378:       assertEquals(15, node1.getType());
379:       assertFalse(node1.isName());
380:       assertFalse(node1.isNull());
381:       assertFalse(node1.isTrue());
382:       assertFalse(node1.isBlock());
383:       assertFalse(node1.isFor());
384:       assertFalse(node1.isNE());
385:       assertFalse(node1.isIf());
386:       assertFalse(node1.isVoid());
387:       assertFalse(node1.isRegExp());
388:       assertFalse(node1.isDelProp());
389:       assertFalse(node1.isCall());
390:       assertFalse(node1.isContinue());
391:       assertFalse(node1.isIn());
392:       assertFalse(node1.isReturn());
393:       assertFalse(node1.isWhile());
394:       assertFalse(node1.isString());
395:       assertFalse(node1.isInc());
396:       assertFalse(node1.isCast());
397:       assertFalse(node1.isFalse());
398:       assertFalse(node1.isThrow());
399:       assertFalse(node1.isFunction());
400:       assertEquals(0, node1.getLineno());
401:       assertFalse(node1.isAnd());
402:       assertFalse(node1.isObjectLit());
403:       assertFalse(node1.isNot());
404:       assertEquals(48, node1.getSourcePosition());
405:       assertFalse(node1.isGetProp());
406:       assertFalse(node1.isScript());
407:       assertFalse(node1.hasOneChild());
408:       assertFalse(node1.isAssign());
409:       assertFalse(node1.hasChildren());
410:       assertFalse(node1.isHook());
411:       assertFalse(node1.isComma());
412:       assertFalse(node1.isThis());
413:       assertFalse(node1.isDec());
414:       assertFalse(node1.isTypeOf());
415:       assertFalse(node1.isWith());
416:       assertFalse(node1.isInstanceOf());
417:       assertFalse(node1.isBreak());
418:       assertFalse(node1.isGetElem());
419:       assertFalse(node1.isExprResult());
420:       assertFalse(node1.hasMoreThanOneChild());
421:       assertFalse(node1.isOr());
422:       assertFalse(node1.isAssignAdd());
423:       assertFalse(node1.isLabel());
424:       assertFalse(node1.isNumber());
425:       assertFalse(node1.isGetterDef());
426:       assertFalse(node1.isDo());
427:       assertFalse(node1.isCase());
428:       assertFalse(node1.isNew());
429:       assertFalse(node1.isEmpty());
430:       assertFalse(node1.isAdd());
431:       assertFalse(node1.isArrayLit());
432:       assertFalse(node1.isStringKey());
433:       assertFalse(node1.isVar());
434:       assertEquals(48, node1.getCharno());
435:       assertFalse(node1.isSwitch());
436:       assertFalse(node1.isParamList());
437:       assertFalse(node1.isLabelName());
438:       
439:       Node node2 = node0.clonePropsFrom(node1);
440:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
441:       assertEquals(39, Node.EMPTY_BLOCK);
442:       assertEquals(48, Node.DIRECTIVES);
443:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
444:       assertEquals(57, Node.REFLECTED_OBJECT);
445:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
446:       assertEquals(55, Node.INFERRED_FUNCTION);
447:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
448:       assertEquals(50, Node.FREE_CALL);
449:       assertEquals(52, Node.LENGTH);
450:       assertEquals(8, Node.FLAG_NO_THROWS);
451:       assertEquals(36, Node.QUOTED_PROP);
452:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
453:       assertEquals(1, Node.DECR_FLAG);
454:       assertEquals(49, Node.DIRECT_EVAL);
455:       assertEquals(12, Node.COLUMN_BITS);
456:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
457:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
458:       assertEquals(4095, Node.COLUMN_MASK);
459:       assertEquals(56, Node.CHANGE_TIME);
460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
461:       assertEquals(29, Node.JSDOC_INFO_PROP);
462:       assertEquals(47, Node.IS_DISPATCHER);
463:       assertEquals(37, Node.OPT_ARG_NAME);
464:       assertEquals(32, Node.INCRDECR_PROP);
465:       assertEquals(46, Node.IS_NAMESPACE);
466:       assertEquals(51, Node.STATIC_SOURCE_FILE);
467:       assertEquals(53, Node.INPUT_ID);
468:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
469:       assertEquals(57, Node.LAST_PROP);
470:       assertEquals(43, Node.IS_CONSTANT_NAME);
471:       assertEquals(30, Node.VAR_ARGS_NAME);
472:       assertEquals(15, Node.NO_SIDE_EFFECTS);
473:       assertEquals(54, Node.SLASH_V);
474:       assertEquals(40, Node.ORIGINALNAME_PROP);
475:       assertEquals(2, Node.POST_FLAG);
476:       assertEquals(51, Node.STATIC_SOURCE_FILE);
477:       assertEquals(12, Node.COLUMN_BITS);
478:       assertEquals(32, Node.INCRDECR_PROP);
479:       assertEquals(46, Node.IS_NAMESPACE);
480:       assertEquals(30, Node.VAR_ARGS_NAME);
481:       assertEquals(15, Node.NO_SIDE_EFFECTS);
482:       assertEquals(57, Node.LAST_PROP);
483:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
484:       assertEquals(1, Node.DECR_FLAG);
485:       assertEquals(29, Node.JSDOC_INFO_PROP);
486:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
487:       assertEquals(57, Node.REFLECTED_OBJECT);
488:       assertEquals(52, Node.LENGTH);
489:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
490:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
491:       assertEquals(56, Node.CHANGE_TIME);
492:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
493:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
494:       assertEquals(48, Node.DIRECTIVES);
495:       assertEquals(49, Node.DIRECT_EVAL);
496:       assertEquals(37, Node.OPT_ARG_NAME);
497:       assertEquals(55, Node.INFERRED_FUNCTION);
498:       assertEquals(4095, Node.COLUMN_MASK);
499:       assertEquals(36, Node.QUOTED_PROP);
500:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
501:       assertEquals(8, Node.FLAG_NO_THROWS);
502:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
503:       assertEquals(53, Node.INPUT_ID);
504:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
505:       assertEquals(39, Node.EMPTY_BLOCK);
506:       assertEquals(50, Node.FREE_CALL);
507:       assertEquals(54, Node.SLASH_V);
508:       assertEquals(47, Node.IS_DISPATCHER);
509:       assertEquals(43, Node.IS_CONSTANT_NAME);
510:       assertEquals(2, Node.POST_FLAG);
511:       assertEquals(40, Node.ORIGINALNAME_PROP);
512:       assertEquals(29, Node.JSDOC_INFO_PROP);
513:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
514:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
515:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
516:       assertEquals(37, Node.OPT_ARG_NAME);
517:       assertEquals(32, Node.INCRDECR_PROP);
518:       assertEquals(12, Node.COLUMN_BITS);
519:       assertEquals(2, Node.POST_FLAG);
520:       assertEquals(47, Node.IS_DISPATCHER);
521:       assertEquals(30, Node.VAR_ARGS_NAME);
522:       assertEquals(1, Node.DECR_FLAG);
523:       assertEquals(43, Node.IS_CONSTANT_NAME);
524:       assertEquals(51, Node.STATIC_SOURCE_FILE);
525:       assertEquals(46, Node.IS_NAMESPACE);
526:       assertEquals(54, Node.SLASH_V);
527:       assertEquals(50, Node.FREE_CALL);
528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
529:       assertEquals(40, Node.ORIGINALNAME_PROP);
530:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
531:       assertEquals(39, Node.EMPTY_BLOCK);
532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
534:       assertEquals(49, Node.DIRECT_EVAL);
535:       assertEquals(57, Node.LAST_PROP);
536:       assertEquals(4095, Node.COLUMN_MASK);
537:       assertEquals(55, Node.INFERRED_FUNCTION);
538:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
539:       assertEquals(15, Node.NO_SIDE_EFFECTS);
540:       assertEquals(53, Node.INPUT_ID);
541:       assertEquals(48, Node.DIRECTIVES);
542:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
543:       assertEquals(52, Node.LENGTH);
544:       assertEquals(8, Node.FLAG_NO_THROWS);
545:       assertEquals(36, Node.QUOTED_PROP);
546:       assertEquals(56, Node.CHANGE_TIME);
547:       assertEquals(57, Node.REFLECTED_OBJECT);
548:       assertEquals((-1), node0.getSourcePosition());
549:       assertFalse(node0.isTypeOf());
550:       assertFalse(node0.hasChildren());
551:       assertFalse(node0.isGetElem());
552:       assertFalse(node0.isAssignAdd());
553:       assertEquals((-1), node0.getLineno());
554:       assertFalse(node0.isLabelName());
555:       assertFalse(node0.isOr());
556:       assertFalse(node0.isScript());
557:       assertFalse(node0.isExprResult());
558:       assertFalse(node0.isWhile());
559:       assertFalse(node0.hasOneChild());
560:       assertFalse(node0.hasMoreThanOneChild());
561:       assertFalse(node0.isReturn());
562:       assertFalse(node0.isCall());
563:       assertFalse(node0.isInstanceOf());
564:       assertFalse(node0.isBlock());
565:       assertFalse(node0.isWith());
566:       assertEquals(39, node0.getType());
567:       assertFalse(node0.isComma());
568:       assertFalse(node0.isAssign());
569:       assertFalse(node0.isDec());
570:       assertFalse(node0.isNull());
571:       assertFalse(node0.isBreak());
572:       assertFalse(node0.isThis());
573:       assertFalse(node0.isParamList());
574:       assertFalse(node0.isName());
575:       assertFalse(node0.isStringKey());
576:       assertEquals((-1), node0.getCharno());
577:       assertFalse(node0.isDefaultCase());
578:       assertFalse(node0.isSwitch());
579:       assertFalse(node0.isAdd());
580:       assertFalse(node0.isNew());
581:       assertFalse(node0.isDo());
582:       assertFalse(node0.isArrayLit());
583:       assertFalse(node0.isVar());
584:       assertFalse(node0.isLabel());
585:       assertEquals(0, node0.getChildCount());
586:       assertFalse(node0.isIf());
587:       assertFalse(node0.isNE());
588:       assertFalse(node0.isEmpty());
589:       assertFalse(node0.isDelProp());
590:       assertTrue(node0.isNumber());
591:       assertFalse(node0.isIn());
592:       assertFalse(node0.isDebugger());
593:       assertFalse(node0.isGetterDef());
594:       assertFalse(node0.isRegExp());
595:       assertFalse(node0.isString());
596:       assertFalse(node0.isTrue());
597:       assertFalse(node0.isCase());
598:       assertFalse(node0.isTry());
599:       assertFalse(node0.isVoid());
600:       assertFalse(node0.isHook());
601:       assertFalse(node0.isCatch());
602:       assertFalse(node0.isFor());
603:       assertFalse(node0.isSetterDef());
604:       assertFalse(node0.isGetProp());
605:       assertFalse(node0.isAnd());
606:       assertFalse(node0.isObjectLit());
607:       assertFalse(node0.isNot());
608:       assertFalse(node0.isInc());
609:       assertFalse(node0.isContinue());
610:       assertFalse(node0.isCast());
611:       assertFalse(node0.isThrow());
612:       assertFalse(node0.isFalse());
613:       assertFalse(node0.isFunction());
614:       assertFalse(node1.isCatch());
615:       assertEquals(0, node1.getChildCount());
616:       assertFalse(node1.isSetterDef());
617:       assertFalse(node1.isDebugger());
618:       assertFalse(node1.isDefaultCase());
619:       assertFalse(node1.isTry());
620:       assertEquals(15, node1.getType());
621:       assertFalse(node1.isName());
622:       assertFalse(node1.isNull());
623:       assertFalse(node1.isTrue());
624:       assertFalse(node1.isBlock());
625:       assertFalse(node1.isFor());
626:       assertFalse(node1.isNE());
627:       assertFalse(node1.isIf());
628:       assertFalse(node1.isVoid());
629:       assertFalse(node1.isRegExp());
630:       assertFalse(node1.isDelProp());
631:       assertFalse(node1.isCall());
632:       assertFalse(node1.isContinue());
633:       assertFalse(node1.isIn());
634:       assertFalse(node1.isReturn());
635:       assertFalse(node1.isWhile());
636:       assertFalse(node1.isString());
637:       assertFalse(node1.isInc());
638:       assertFalse(node1.isCast());
639:       assertFalse(node1.isFalse());
640:       assertFalse(node1.isThrow());
641:       assertFalse(node1.isFunction());
642:       assertEquals(0, node1.getLineno());
643:       assertFalse(node1.isAnd());
644:       assertFalse(node1.isObjectLit());
645:       assertFalse(node1.isNot());
646:       assertEquals(48, node1.getSourcePosition());
647:       assertFalse(node1.isGetProp());
648:       assertFalse(node1.isScript());
649:       assertFalse(node1.hasOneChild());
650:       assertFalse(node1.isAssign());
651:       assertFalse(node1.hasChildren());
652:       assertFalse(node1.isHook());
653:       assertFalse(node1.isComma());
654:       assertFalse(node1.isThis());
655:       assertFalse(node1.isDec());
656:       assertFalse(node1.isTypeOf());
657:       assertFalse(node1.isWith());
658:       assertFalse(node1.isInstanceOf());
659:       assertFalse(node1.isBreak());
660:       assertFalse(node1.isGetElem());
661:       assertFalse(node1.isExprResult());
662:       assertFalse(node1.hasMoreThanOneChild());
663:       assertFalse(node1.isOr());
664:       assertFalse(node1.isAssignAdd());
665:       assertFalse(node1.isLabel());
666:       assertFalse(node1.isNumber());
667:       assertFalse(node1.isGetterDef());
668:       assertFalse(node1.isDo());
669:       assertFalse(node1.isCase());
670:       assertFalse(node1.isNew());
671:       assertFalse(node1.isEmpty());
672:       assertFalse(node1.isAdd());
673:       assertFalse(node1.isArrayLit());
674:       assertFalse(node1.isStringKey());
675:       assertFalse(node1.isVar());
676:       assertEquals(48, node1.getCharno());
677:       assertFalse(node1.isSwitch());
678:       assertFalse(node1.isParamList());
679:       assertFalse(node1.isLabelName());
680:       assertFalse(node2.isBreak());
681:       assertFalse(node2.isFalse());
682:       assertFalse(node2.isGetProp());
683:       assertFalse(node2.isComma());
684:       assertFalse(node2.isThis());
685:       assertFalse(node2.isHook());
686:       assertFalse(node2.isThrow());
687:       assertFalse(node2.isString());
688:       assertFalse(node2.isCase());
689:       assertFalse(node2.isNot());
690:       assertFalse(node2.isObjectLit());
691:       assertFalse(node2.isScript());
692:       assertFalse(node2.isAnd());
693:       assertEquals((-1), node2.getCharno());
694:       assertFalse(node2.isSwitch());
695:       assertFalse(node2.hasChildren());
696:       assertEquals((-1), node2.getSourcePosition());
697:       assertFalse(node2.isDec());
698:       assertFalse(node2.isTypeOf());
699:       assertFalse(node2.isAssign());
700:       assertFalse(node2.isDelProp());
701:       assertFalse(node2.isLabelName());
702:       assertFalse(node2.isGetElem());
703:       assertFalse(node2.isEmpty());
704:       assertFalse(node2.isReturn());
705:       assertTrue(node2.isNumber());
706:       assertFalse(node2.isLabel());
707:       assertFalse(node2.isAssignAdd());
708:       assertFalse(node2.isDefaultCase());
709:       assertFalse(node2.isDo());
710:       assertFalse(node2.isExprResult());
711:       assertFalse(node2.isAdd());
712:       assertFalse(node2.isOr());
713:       assertFalse(node2.isVoid());
714:       assertFalse(node2.isTrue());
715:       assertFalse(node2.isNull());
716:       assertFalse(node2.isName());
717:       assertFalse(node2.isCall());
718:       assertFalse(node2.isSetterDef());
719:       assertFalse(node2.isNew());
720:       assertEquals(0, node2.getChildCount());
721:       assertFalse(node2.isBlock());
722:       assertFalse(node2.isVar());
723:       assertFalse(node2.isWhile());
724:       assertFalse(node2.isFunction());
725:       assertFalse(node2.isContinue());
726:       assertFalse(node2.isArrayLit());
727:       assertFalse(node2.isParamList());
728:       assertFalse(node2.isDebugger());
729:       assertFalse(node2.isStringKey());
730:       assertFalse(node2.isIf());
731:       assertFalse(node2.isGetterDef());
732:       assertFalse(node2.isCast());
733:       assertFalse(node2.hasOneChild());
734:       assertFalse(node2.isTry());
735:       assertFalse(node2.isFor());
736:       assertFalse(node2.isWith());
737:       assertEquals(39, node2.getType());
738:       assertFalse(node2.isRegExp());
739:       assertFalse(node2.isInc());
740:       assertFalse(node2.hasMoreThanOneChild());
741:       assertFalse(node2.isInstanceOf());
742:       assertFalse(node2.isCatch());
743:       assertEquals((-1), node2.getLineno());
744:       assertFalse(node2.isIn());
745:       assertFalse(node2.isNE());
746:       
747:       FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
748:       node1.isLocalResultCall();
749:       assertEquals(51, Node.STATIC_SOURCE_FILE);
750:       assertEquals(12, Node.COLUMN_BITS);
751:       assertEquals(32, Node.INCRDECR_PROP);
752:       assertEquals(46, Node.IS_NAMESPACE);
753:       assertEquals(30, Node.VAR_ARGS_NAME);
754:       assertEquals(15, Node.NO_SIDE_EFFECTS);
755:       assertEquals(57, Node.LAST_PROP);
756:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
757:       assertEquals(1, Node.DECR_FLAG);
758:       assertEquals(29, Node.JSDOC_INFO_PROP);
759:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
760:       assertEquals(57, Node.REFLECTED_OBJECT);
761:       assertEquals(52, Node.LENGTH);
762:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
763:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
764:       assertEquals(56, Node.CHANGE_TIME);
765:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
766:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
767:       assertEquals(48, Node.DIRECTIVES);
768:       assertEquals(49, Node.DIRECT_EVAL);
769:       assertEquals(37, Node.OPT_ARG_NAME);
770:       assertEquals(55, Node.INFERRED_FUNCTION);
771:       assertEquals(4095, Node.COLUMN_MASK);
772:       assertEquals(36, Node.QUOTED_PROP);
773:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
774:       assertEquals(8, Node.FLAG_NO_THROWS);
775:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
776:       assertEquals(53, Node.INPUT_ID);
777:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
778:       assertEquals(39, Node.EMPTY_BLOCK);
779:       assertEquals(50, Node.FREE_CALL);
780:       assertEquals(54, Node.SLASH_V);
781:       assertEquals(47, Node.IS_DISPATCHER);
782:       assertEquals(43, Node.IS_CONSTANT_NAME);
783:       assertEquals(2, Node.POST_FLAG);
784:       assertEquals(40, Node.ORIGINALNAME_PROP);
785:       assertFalse(node1.isCatch());
786:       assertEquals(0, node1.getChildCount());
787:       assertFalse(node1.isSetterDef());
788:       assertFalse(node1.isDebugger());
789:       assertFalse(node1.isDefaultCase());
790:       assertFalse(node1.isTry());
791:       assertEquals(15, node1.getType());
792:       assertFalse(node1.isName());
793:       assertFalse(node1.isNull());
794:       assertFalse(node1.isTrue());
795:       assertFalse(node1.isBlock());
796:       assertFalse(node1.isFor());
797:       assertFalse(node1.isNE());
798:       assertFalse(node1.isIf());
799:       assertFalse(node1.isVoid());
800:       assertFalse(node1.isRegExp());
801:       assertFalse(node1.isDelProp());
802:       assertFalse(node1.isCall());
803:       assertFalse(node1.isContinue());
804:       assertFalse(node1.isIn());
805:       assertFalse(node1.isReturn());
806:       assertFalse(node1.isWhile());
807:       assertFalse(node1.isString());
808:       assertFalse(node1.isInc());
809:       assertFalse(node1.isCast());
810:       assertFalse(node1.isFalse());
811:       assertFalse(node1.isThrow());
812:       assertFalse(node1.isFunction());
813:       assertEquals(0, node1.getLineno());
814:       assertFalse(node1.isAnd());
815:       assertFalse(node1.isObjectLit());
816:       assertFalse(node1.isNot());
817:       assertEquals(48, node1.getSourcePosition());
818:       assertFalse(node1.isGetProp());
819:       assertFalse(node1.isScript());
820:       assertFalse(node1.hasOneChild());
821:       assertFalse(node1.isAssign());
822:       assertFalse(node1.hasChildren());
823:       assertFalse(node1.isHook());
824:       assertFalse(node1.isComma());
825:       assertFalse(node1.isThis());
826:       assertFalse(node1.isDec());
827:       assertFalse(node1.isTypeOf());
828:       assertFalse(node1.isWith());
829:       assertFalse(node1.isInstanceOf());
830:       assertFalse(node1.isBreak());
831:       assertFalse(node1.isGetElem());
832:       assertFalse(node1.isExprResult());
833:       assertFalse(node1.hasMoreThanOneChild());
834:       assertFalse(node1.isOr());
835:       assertFalse(node1.isAssignAdd());
836:       assertFalse(node1.isLabel());
837:       assertFalse(node1.isNumber());
838:       assertFalse(node1.isGetterDef());
839:       assertFalse(node1.isDo());
840:       assertFalse(node1.isCase());
841:       assertFalse(node1.isNew());
842:       assertFalse(node1.isEmpty());
843:       assertFalse(node1.isAdd());
844:       assertFalse(node1.isArrayLit());
845:       assertFalse(node1.isStringKey());
846:       assertFalse(node1.isVar());
847:       assertEquals(48, node1.getCharno());
848:       assertFalse(node1.isSwitch());
849:       assertFalse(node1.isParamList());
850:       assertFalse(node1.isLabelName());
851:       
852:       node0.isFromExterns();
853:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
854:       assertEquals(39, Node.EMPTY_BLOCK);
855:       assertEquals(48, Node.DIRECTIVES);
856:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
857:       assertEquals(57, Node.REFLECTED_OBJECT);
858:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
859:       assertEquals(55, Node.INFERRED_FUNCTION);
860:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
861:       assertEquals(50, Node.FREE_CALL);
862:       assertEquals(52, Node.LENGTH);
863:       assertEquals(8, Node.FLAG_NO_THROWS);
864:       assertEquals(36, Node.QUOTED_PROP);
865:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
866:       assertEquals(1, Node.DECR_FLAG);
867:       assertEquals(49, Node.DIRECT_EVAL);
868:       assertEquals(12, Node.COLUMN_BITS);
869:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
870:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
871:       assertEquals(4095, Node.COLUMN_MASK);
872:       assertEquals(56, Node.CHANGE_TIME);
873:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
874:       assertEquals(29, Node.JSDOC_INFO_PROP);
875:       assertEquals(47, Node.IS_DISPATCHER);
876:       assertEquals(37, Node.OPT_ARG_NAME);
877:       assertEquals(32, Node.INCRDECR_PROP);
878:       assertEquals(46, Node.IS_NAMESPACE);
879:       assertEquals(51, Node.STATIC_SOURCE_FILE);
880:       assertEquals(53, Node.INPUT_ID);
881:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
882:       assertEquals(57, Node.LAST_PROP);
883:       assertEquals(43, Node.IS_CONSTANT_NAME);
884:       assertEquals(30, Node.VAR_ARGS_NAME);
885:       assertEquals(15, Node.NO_SIDE_EFFECTS);
886:       assertEquals(54, Node.SLASH_V);
887:       assertEquals(40, Node.ORIGINALNAME_PROP);
888:       assertEquals(2, Node.POST_FLAG);
889:       assertEquals((-1), node0.getSourcePosition());
890:       assertFalse(node0.isTypeOf());
891:       assertFalse(node0.hasChildren());
892:       assertFalse(node0.isGetElem());
893:       assertFalse(node0.isAssignAdd());
894:       assertEquals((-1), node0.getLineno());
895:       assertFalse(node0.isLabelName());
896:       assertFalse(node0.isOr());
897:       assertFalse(node0.isScript());
898:       assertFalse(node0.isExprResult());
899:       assertFalse(node0.isWhile());
900:       assertFalse(node0.hasOneChild());
901:       assertFalse(node0.hasMoreThanOneChild());
902:       assertFalse(node0.isReturn());
903:       assertFalse(node0.isCall());
904:       assertFalse(node0.isInstanceOf());
905:       assertFalse(node0.isBlock());
906:       assertFalse(node0.isWith());
907:       assertEquals(39, node0.getType());
908:       assertFalse(node0.isComma());
909:       assertFalse(node0.isAssign());
910:       assertFalse(node0.isDec());
911:       assertFalse(node0.isNull());
912:       assertFalse(node0.isBreak());
913:       assertFalse(node0.isThis());
914:       assertFalse(node0.isParamList());
915:       assertFalse(node0.isName());
916:       assertFalse(node0.isStringKey());
917:       assertEquals((-1), node0.getCharno());
918:       assertFalse(node0.isDefaultCase());
919:       assertFalse(node0.isSwitch());
920:       assertFalse(node0.isAdd());
921:       assertFalse(node0.isNew());
922:       assertFalse(node0.isDo());
923:       assertFalse(node0.isArrayLit());
924:       assertFalse(node0.isVar());
925:       assertFalse(node0.isLabel());
926:       assertEquals(0, node0.getChildCount());
927:       assertFalse(node0.isIf());
928:       assertFalse(node0.isNE());
929:       assertFalse(node0.isEmpty());
930:       assertFalse(node0.isDelProp());
931:       assertTrue(node0.isNumber());
932:       assertFalse(node0.isIn());
933:       assertFalse(node0.isDebugger());
934:       assertFalse(node0.isGetterDef());
935:       assertFalse(node0.isRegExp());
936:       assertFalse(node0.isString());
937:       assertFalse(node0.isTrue());
938:       assertFalse(node0.isCase());
939:       assertFalse(node0.isTry());
940:       assertFalse(node0.isVoid());
941:       assertFalse(node0.isHook());
942:       assertFalse(node0.isCatch());
943:       assertFalse(node0.isFor());
944:       assertFalse(node0.isSetterDef());
945:       assertFalse(node0.isGetProp());
946:       assertFalse(node0.isAnd());
947:       assertFalse(node0.isObjectLit());
948:       assertFalse(node0.isNot());
949:       assertFalse(node0.isInc());
950:       assertFalse(node0.isContinue());
951:       assertFalse(node0.isCast());
952:       assertFalse(node0.isThrow());
953:       assertFalse(node0.isFalse());
954:       assertFalse(node0.isFunction());
955:       
956:       node0.isBreak();
957:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
958:       assertEquals(39, Node.EMPTY_BLOCK);
959:       assertEquals(48, Node.DIRECTIVES);
960:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
961:       assertEquals(57, Node.REFLECTED_OBJECT);
962:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
963:       assertEquals(55, Node.INFERRED_FUNCTION);
964:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
965:       assertEquals(50, Node.FREE_CALL);
966:       assertEquals(52, Node.LENGTH);
967:       assertEquals(8, Node.FLAG_NO_THROWS);
968:       assertEquals(36, Node.QUOTED_PROP);
969:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
970:       assertEquals(1, Node.DECR_FLAG);
971:       assertEquals(49, Node.DIRECT_EVAL);
972:       assertEquals(12, Node.COLUMN_BITS);
973:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
974:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
975:       assertEquals(4095, Node.COLUMN_MASK);
976:       assertEquals(56, Node.CHANGE_TIME);
977:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
978:       assertEquals(29, Node.JSDOC_INFO_PROP);
979:       assertEquals(47, Node.IS_DISPATCHER);
980:       assertEquals(37, Node.OPT_ARG_NAME);
981:       assertEquals(32, Node.INCRDECR_PROP);
982:       assertEquals(46, Node.IS_NAMESPACE);
983:       assertEquals(51, Node.STATIC_SOURCE_FILE);
984:       assertEquals(53, Node.INPUT_ID);
985:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
986:       assertEquals(57, Node.LAST_PROP);
987:       assertEquals(43, Node.IS_CONSTANT_NAME);
988:       assertEquals(30, Node.VAR_ARGS_NAME);
989:       assertEquals(15, Node.NO_SIDE_EFFECTS);
990:       assertEquals(54, Node.SLASH_V);
991:       assertEquals(40, Node.ORIGINALNAME_PROP);
992:       assertEquals(2, Node.POST_FLAG);
993:       assertEquals((-1), node0.getSourcePosition());
994:       assertFalse(node0.isTypeOf());
995:       assertFalse(node0.hasChildren());
996:       assertFalse(node0.isGetElem());
997:       assertFalse(node0.isAssignAdd());
998:       assertEquals((-1), node0.getLineno());
999:       assertFalse(node0.isLabelName());
1000:       assertFalse(node0.isOr());
1001:       assertFalse(node0.isScript());
1002:       assertFalse(node0.isExprResult());
1003:       assertFalse(node0.isWhile());
1004:       assertFalse(node0.hasOneChild());
1005:       assertFalse(node0.hasMoreThanOneChild());
1006:       assertFalse(node0.isReturn());
1007:       assertFalse(node0.isCall());
1008:       assertFalse(node0.isInstanceOf());
1009:       assertFalse(node0.isBlock());
1010:       assertFalse(node0.isWith());
1011:       assertEquals(39, node0.getType());
1012:       assertFalse(node0.isComma());
1013:       assertFalse(node0.isAssign());
1014:       assertFalse(node0.isDec());
1015:       assertFalse(node0.isNull());
1016:       assertFalse(node0.isBreak());
1017:       assertFalse(node0.isThis());
1018:       assertFalse(node0.isParamList());
1019:       assertFalse(node0.isName());
1020:       assertFalse(node0.isStringKey());
1021:       assertEquals((-1), node0.getCharno());
1022:       assertFalse(node0.isDefaultCase());
1023:       assertFalse(node0.isSwitch());
1024:       assertFalse(node0.isAdd());
1025:       assertFalse(node0.isNew());
1026:       assertFalse(node0.isDo());
1027:       assertFalse(node0.isArrayLit());
1028:       assertFalse(node0.isVar());
1029:       assertFalse(node0.isLabel());
1030:       assertEquals(0, node0.getChildCount());
1031:       assertFalse(node0.isIf());
1032:       assertFalse(node0.isNE());
1033:       assertFalse(node0.isEmpty());
1034:       assertFalse(node0.isDelProp());
1035:       assertTrue(node0.isNumber());
1036:       assertFalse(node0.isIn());
1037:       assertFalse(node0.isDebugger());
1038:       assertFalse(node0.isGetterDef());
1039:       assertFalse(node0.isRegExp());
1040:       assertFalse(node0.isString());
1041:       assertFalse(node0.isTrue());
1042:       assertFalse(node0.isCase());
1043:       assertFalse(node0.isTry());
1044:       assertFalse(node0.isVoid());
1045:       assertFalse(node0.isHook());
1046:       assertFalse(node0.isCatch());
1047:       assertFalse(node0.isFor());
1048:       assertFalse(node0.isSetterDef());
1049:       assertFalse(node0.isGetProp());
1050:       assertFalse(node0.isAnd());
1051:       assertFalse(node0.isObjectLit());
1052:       assertFalse(node0.isNot());
1053:       assertFalse(node0.isInc());
1054:       assertFalse(node0.isContinue());
1055:       assertFalse(node0.isCast());
1056:       assertFalse(node0.isThrow());
1057:       assertFalse(node0.isFalse());
1058:       assertFalse(node0.isFunction());
1059:       
1060:       node0.isCatch();
1061:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1062:       assertEquals(39, Node.EMPTY_BLOCK);
1063:       assertEquals(48, Node.DIRECTIVES);
1064:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1065:       assertEquals(57, Node.REFLECTED_OBJECT);
1066:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1067:       assertEquals(55, Node.INFERRED_FUNCTION);
1068:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1069:       assertEquals(50, Node.FREE_CALL);
1070:       assertEquals(52, Node.LENGTH);
1071:       assertEquals(8, Node.FLAG_NO_THROWS);
1072:       assertEquals(36, Node.QUOTED_PROP);
1073:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1074:       assertEquals(1, Node.DECR_FLAG);
1075:       assertEquals(49, Node.DIRECT_EVAL);
1076:       assertEquals(12, Node.COLUMN_BITS);
1077:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1078:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1079:       assertEquals(4095, Node.COLUMN_MASK);
1080:       assertEquals(56, Node.CHANGE_TIME);
1081:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1082:       assertEquals(29, Node.JSDOC_INFO_PROP);
1083:       assertEquals(47, Node.IS_DISPATCHER);
1084:       assertEquals(37, Node.OPT_ARG_NAME);
1085:       assertEquals(32, Node.INCRDECR_PROP);
1086:       assertEquals(46, Node.IS_NAMESPACE);
1087:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1088:       assertEquals(53, Node.INPUT_ID);
1089:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1090:       assertEquals(57, Node.LAST_PROP);
1091:       assertEquals(43, Node.IS_CONSTANT_NAME);
1092:       assertEquals(30, Node.VAR_ARGS_NAME);
1093:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1094:       assertEquals(54, Node.SLASH_V);
1095:       assertEquals(40, Node.ORIGINALNAME_PROP);
1096:       assertEquals(2, Node.POST_FLAG);
1097:       assertEquals((-1), node0.getSourcePosition());
1098:       assertFalse(node0.isTypeOf());
1099:       assertFalse(node0.hasChildren());
1100:       assertFalse(node0.isGetElem());
1101:       assertFalse(node0.isAssignAdd());
1102:       assertEquals((-1), node0.getLineno());
1103:       assertFalse(node0.isLabelName());
1104:       assertFalse(node0.isOr());
1105:       assertFalse(node0.isScript());
1106:       assertFalse(node0.isExprResult());
1107:       assertFalse(node0.isWhile());
1108:       assertFalse(node0.hasOneChild());
1109:       assertFalse(node0.hasMoreThanOneChild());
1110:       assertFalse(node0.isReturn());
1111:       assertFalse(node0.isCall());
1112:       assertFalse(node0.isInstanceOf());
1113:       assertFalse(node0.isBlock());
1114:       assertFalse(node0.isWith());
1115:       assertEquals(39, node0.getType());
1116:       assertFalse(node0.isComma());
1117:       assertFalse(node0.isAssign());
1118:       assertFalse(node0.isDec());
1119:       assertFalse(node0.isNull());
1120:       assertFalse(node0.isBreak());
1121:       assertFalse(node0.isThis());
1122:       assertFalse(node0.isParamList());
1123:       assertFalse(node0.isName());
1124:       assertFalse(node0.isStringKey());
1125:       assertEquals((-1), node0.getCharno());
1126:       assertFalse(node0.isDefaultCase());
1127:       assertFalse(node0.isSwitch());
1128:       assertFalse(node0.isAdd());
1129:       assertFalse(node0.isNew());
1130:       assertFalse(node0.isDo());
1131:       assertFalse(node0.isArrayLit());
1132:       assertFalse(node0.isVar());
1133:       assertFalse(node0.isLabel());
1134:       assertEquals(0, node0.getChildCount());
1135:       assertFalse(node0.isIf());
1136:       assertFalse(node0.isNE());
1137:       assertFalse(node0.isEmpty());
1138:       assertFalse(node0.isDelProp());
1139:       assertTrue(node0.isNumber());
1140:       assertFalse(node0.isIn());
1141:       assertFalse(node0.isDebugger());
1142:       assertFalse(node0.isGetterDef());
1143:       assertFalse(node0.isRegExp());
1144:       assertFalse(node0.isString());
1145:       assertFalse(node0.isTrue());
1146:       assertFalse(node0.isCase());
1147:       assertFalse(node0.isTry());
1148:       assertFalse(node0.isVoid());
1149:       assertFalse(node0.isHook());
1150:       assertFalse(node0.isCatch());
1151:       assertFalse(node0.isFor());
1152:       assertFalse(node0.isSetterDef());
1153:       assertFalse(node0.isGetProp());
1154:       assertFalse(node0.isAnd());
1155:       assertFalse(node0.isObjectLit());
1156:       assertFalse(node0.isNot());
1157:       assertFalse(node0.isInc());
1158:       assertFalse(node0.isContinue());
1159:       assertFalse(node0.isCast());
1160:       assertFalse(node0.isThrow());
1161:       assertFalse(node0.isFalse());
1162:       assertFalse(node0.isFunction());
1163:       
1164:       node1.mayMutateGlobalStateOrThrow();
1165:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1166:       assertEquals(12, Node.COLUMN_BITS);
1167:       assertEquals(32, Node.INCRDECR_PROP);
1168:       assertEquals(46, Node.IS_NAMESPACE);
1169:       assertEquals(30, Node.VAR_ARGS_NAME);
1170:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1171:       assertEquals(57, Node.LAST_PROP);
1172:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1173:       assertEquals(1, Node.DECR_FLAG);
1174:       assertEquals(29, Node.JSDOC_INFO_PROP);
1175:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1176:       assertEquals(57, Node.REFLECTED_OBJECT);
1177:       assertEquals(52, Node.LENGTH);
1178:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1179:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1180:       assertEquals(56, Node.CHANGE_TIME);
1181:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1182:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1183:       assertEquals(48, Node.DIRECTIVES);
1184:       assertEquals(49, Node.DIRECT_EVAL);
1185:       assertEquals(37, Node.OPT_ARG_NAME);
1186:       assertEquals(55, Node.INFERRED_FUNCTION);
1187:       assertEquals(4095, Node.COLUMN_MASK);
1188:       assertEquals(36, Node.QUOTED_PROP);
1189:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1190:       assertEquals(8, Node.FLAG_NO_THROWS);
1191:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1192:       assertEquals(53, Node.INPUT_ID);
1193:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1194:       assertEquals(39, Node.EMPTY_BLOCK);
1195:       assertEquals(50, Node.FREE_CALL);
1196:       assertEquals(54, Node.SLASH_V);
1197:       assertEquals(47, Node.IS_DISPATCHER);
1198:       assertEquals(43, Node.IS_CONSTANT_NAME);
1199:       assertEquals(2, Node.POST_FLAG);
1200:       assertEquals(40, Node.ORIGINALNAME_PROP);
1201:       assertFalse(node1.isCatch());
1202:       assertEquals(0, node1.getChildCount());
1203:       assertFalse(node1.isSetterDef());
1204:       assertFalse(node1.isDebugger());
1205:       assertFalse(node1.isDefaultCase());
1206:       assertFalse(node1.isTry());
1207:       assertEquals(15, node1.getType());
1208:       assertFalse(node1.isName());
1209:       assertFalse(node1.isNull());
1210:       assertFalse(node1.isTrue());
1211:       assertFalse(node1.isBlock());
1212:       assertFalse(node1.isFor());
1213:       assertFalse(node1.isNE());
1214:       assertFalse(node1.isIf());
1215:       assertFalse(node1.isVoid());
1216:       assertFalse(node1.isRegExp());
1217:       assertFalse(node1.isDelProp());
1218:       assertFalse(node1.isCall());
1219:       assertFalse(node1.isContinue());
1220:       assertFalse(node1.isIn());
1221:       assertFalse(node1.isReturn());
1222:       assertFalse(node1.isWhile());
1223:       assertFalse(node1.isString());
1224:       assertFalse(node1.isInc());
1225:       assertFalse(node1.isCast());
1226:       assertFalse(node1.isFalse());
1227:       assertFalse(node1.isThrow());
1228:       assertFalse(node1.isFunction());
1229:       assertEquals(0, node1.getLineno());
1230:       assertFalse(node1.isAnd());
1231:       assertFalse(node1.isObjectLit());
1232:       assertFalse(node1.isNot());
1233:       assertEquals(48, node1.getSourcePosition());
1234:       assertFalse(node1.isGetProp());
1235:       assertFalse(node1.isScript());
1236:       assertFalse(node1.hasOneChild());
1237:       assertFalse(node1.isAssign());
1238:       assertFalse(node1.hasChildren());
1239:       assertFalse(node1.isHook());
1240:       assertFalse(node1.isComma());
1241:       assertFalse(node1.isThis());
1242:       assertFalse(node1.isDec());
1243:       assertFalse(node1.isTypeOf());
1244:       assertFalse(node1.isWith());
1245:       assertFalse(node1.isInstanceOf());
1246:       assertFalse(node1.isBreak());
1247:       assertFalse(node1.isGetElem());
1248:       assertFalse(node1.isExprResult());
1249:       assertFalse(node1.hasMoreThanOneChild());
1250:       assertFalse(node1.isOr());
1251:       assertFalse(node1.isAssignAdd());
1252:       assertFalse(node1.isLabel());
1253:       assertFalse(node1.isNumber());
1254:       assertFalse(node1.isGetterDef());
1255:       assertFalse(node1.isDo());
1256:       assertFalse(node1.isCase());
1257:       assertFalse(node1.isNew());
1258:       assertFalse(node1.isEmpty());
1259:       assertFalse(node1.isAdd());
1260:       assertFalse(node1.isArrayLit());
1261:       assertFalse(node1.isStringKey());
1262:       assertFalse(node1.isVar());
1263:       assertEquals(48, node1.getCharno());
1264:       assertFalse(node1.isSwitch());
1265:       assertFalse(node1.isParamList());
1266:       assertFalse(node1.isLabelName());
1267:       
1268:       Node node3 = Node.newString(1, "direct_eval");
1269:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1270:       assertEquals(57, Node.LAST_PROP);
1271:       assertEquals(30, Node.VAR_ARGS_NAME);
1272:       assertEquals(49, Node.DIRECT_EVAL);
1273:       assertEquals(1, Node.DECR_FLAG);
1274:       assertEquals(32, Node.INCRDECR_PROP);
1275:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1276:       assertEquals(12, Node.COLUMN_BITS);
1277:       assertEquals(47, Node.IS_DISPATCHER);
1278:       assertEquals(2, Node.POST_FLAG);
1279:       assertEquals(50, Node.FREE_CALL);
1280:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1281:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1282:       assertEquals(40, Node.ORIGINALNAME_PROP);
1283:       assertEquals(46, Node.IS_NAMESPACE);
1284:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1285:       assertEquals(54, Node.SLASH_V);
1286:       assertEquals(43, Node.IS_CONSTANT_NAME);
1287:       assertEquals(36, Node.QUOTED_PROP);
1288:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1289:       assertEquals(55, Node.INFERRED_FUNCTION);
1290:       assertEquals(53, Node.INPUT_ID);
1291:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1292:       assertEquals(4095, Node.COLUMN_MASK);
1293:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1294:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1295:       assertEquals(56, Node.CHANGE_TIME);
1296:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1297:       assertEquals(8, Node.FLAG_NO_THROWS);
1298:       assertEquals(48, Node.DIRECTIVES);
1299:       assertEquals(37, Node.OPT_ARG_NAME);
1300:       assertEquals(29, Node.JSDOC_INFO_PROP);
1301:       assertEquals(39, Node.EMPTY_BLOCK);
1302:       assertEquals(52, Node.LENGTH);
1303:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1304:       assertEquals(57, Node.REFLECTED_OBJECT);
1305:       assertFalse(node3.isRegExp());
1306:       assertFalse(node3.isDefaultCase());
1307:       assertFalse(node3.isFunction());
1308:       assertFalse(node3.isDebugger());
1309:       assertFalse(node3.isVoid());
1310:       assertFalse(node3.isCatch());
1311:       assertEquals(0, node3.getChildCount());
1312:       assertFalse(node3.isTry());
1313:       assertFalse(node3.isFor());
1314:       assertFalse(node3.isGetterDef());
1315:       assertFalse(node3.isArrayLit());
1316:       assertFalse(node3.isStringKey());
1317:       assertFalse(node3.isParamList());
1318:       assertFalse(node3.isSwitch());
1319:       assertFalse(node3.isNew());
1320:       assertFalse(node3.isAdd());
1321:       assertFalse(node3.isString());
1322:       assertFalse(node3.isVar());
1323:       assertFalse(node3.isDo());
1324:       assertFalse(node3.isLabel());
1325:       assertFalse(node3.isAssignAdd());
1326:       assertFalse(node3.isReturn());
1327:       assertFalse(node3.isWhile());
1328:       assertFalse(node3.isTypeOf());
1329:       assertFalse(node3.isNull());
1330:       assertFalse(node3.isBreak());
1331:       assertFalse(node3.hasChildren());
1332:       assertFalse(node3.isDelProp());
1333:       assertFalse(node3.isComma());
1334:       assertFalse(node3.isDec());
1335:       assertFalse(node3.isAssign());
1336:       assertFalse(node3.isOr());
1337:       assertFalse(node3.isEmpty());
1338:       assertFalse(node3.isGetElem());
1339:       assertFalse(node3.isCall());
1340:       assertFalse(node3.isName());
1341:       assertFalse(node3.isTrue());
1342:       assertFalse(node3.isScript());
1343:       assertFalse(node3.isNot());
1344:       assertFalse(node3.isWith());
1345:       assertFalse(node3.isExprResult());
1346:       assertEquals(1, node3.getType());
1347:       assertFalse(node3.hasOneChild());
1348:       assertFalse(node3.isNumber());
1349:       assertEquals((-1), node3.getSourcePosition());
1350:       assertFalse(node3.isFalse());
1351:       assertFalse(node3.isGetProp());
1352:       assertFalse(node3.isCast());
1353:       assertFalse(node3.isObjectLit());
1354:       assertFalse(node3.isLabelName());
1355:       assertFalse(node3.isAnd());
1356:       assertFalse(node3.isInc());
1357:       assertEquals((-1), node3.getCharno());
1358:       assertFalse(node3.isCase());
1359:       assertFalse(node3.isContinue());
1360:       assertFalse(node3.isHook());
1361:       assertFalse(node3.hasMoreThanOneChild());
1362:       assertFalse(node3.isBlock());
1363:       assertFalse(node3.isThrow());
1364:       assertFalse(node3.isNE());
1365:       assertFalse(node3.isThis());
1366:       assertFalse(node3.isSetterDef());
1367:       assertFalse(node3.isIn());
1368:       assertFalse(node3.isInstanceOf());
1369:       assertEquals((-1), node3.getLineno());
1370:       assertFalse(node3.isIf());
1371:       
1372:       node3.getSourceOffset();
1373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1374:       assertEquals(57, Node.LAST_PROP);
1375:       assertEquals(30, Node.VAR_ARGS_NAME);
1376:       assertEquals(49, Node.DIRECT_EVAL);
1377:       assertEquals(1, Node.DECR_FLAG);
1378:       assertEquals(32, Node.INCRDECR_PROP);
1379:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1380:       assertEquals(12, Node.COLUMN_BITS);
1381:       assertEquals(47, Node.IS_DISPATCHER);
1382:       assertEquals(2, Node.POST_FLAG);
1383:       assertEquals(50, Node.FREE_CALL);
1384:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1385:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1386:       assertEquals(40, Node.ORIGINALNAME_PROP);
1387:       assertEquals(46, Node.IS_NAMESPACE);
1388:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1389:       assertEquals(54, Node.SLASH_V);
1390:       assertEquals(43, Node.IS_CONSTANT_NAME);
1391:       assertEquals(36, Node.QUOTED_PROP);
1392:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1393:       assertEquals(55, Node.INFERRED_FUNCTION);
1394:       assertEquals(53, Node.INPUT_ID);
1395:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1396:       assertEquals(4095, Node.COLUMN_MASK);
1397:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1398:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1399:       assertEquals(56, Node.CHANGE_TIME);
1400:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1401:       assertEquals(8, Node.FLAG_NO_THROWS);
1402:       assertEquals(48, Node.DIRECTIVES);
1403:       assertEquals(37, Node.OPT_ARG_NAME);
1404:       assertEquals(29, Node.JSDOC_INFO_PROP);
1405:       assertEquals(39, Node.EMPTY_BLOCK);
1406:       assertEquals(52, Node.LENGTH);
1407:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1408:       assertEquals(57, Node.REFLECTED_OBJECT);
1409:       assertFalse(node3.isRegExp());
1410:       assertFalse(node3.isDefaultCase());
1411:       assertFalse(node3.isFunction());
1412:       assertFalse(node3.isDebugger());
1413:       assertFalse(node3.isVoid());
1414:       assertFalse(node3.isCatch());
1415:       assertEquals(0, node3.getChildCount());
1416:       assertFalse(node3.isTry());
1417:       assertFalse(node3.isFor());
1418:       assertFalse(node3.isGetterDef());
1419:       assertFalse(node3.isArrayLit());
1420:       assertFalse(node3.isStringKey());
1421:       assertFalse(node3.isParamList());
1422:       assertFalse(node3.isSwitch());
1423:       assertFalse(node3.isNew());
1424:       assertFalse(node3.isAdd());
1425:       assertFalse(node3.isString());
1426:       assertFalse(node3.isVar());
1427:       assertFalse(node3.isDo());
1428:       assertFalse(node3.isLabel());
1429:       assertFalse(node3.isAssignAdd());
1430:       assertFalse(node3.isReturn());
1431:       assertFalse(node3.isWhile());
1432:       assertFalse(node3.isTypeOf());
1433:       assertFalse(node3.isNull());
1434:       assertFalse(node3.isBreak());
1435:       assertFalse(node3.hasChildren());
1436:       assertFalse(node3.isDelProp());
1437:       assertFalse(node3.isComma());
1438:       assertFalse(node3.isDec());
1439:       assertFalse(node3.isAssign());
1440:       assertFalse(node3.isOr());
1441:       assertFalse(node3.isEmpty());
1442:       assertFalse(node3.isGetElem());
1443:       assertFalse(node3.isCall());
1444:       assertFalse(node3.isName());
1445:       assertFalse(node3.isTrue());
1446:       assertFalse(node3.isScript());
1447:       assertFalse(node3.isNot());
1448:       assertFalse(node3.isWith());
1449:       assertFalse(node3.isExprResult());
1450:       assertEquals(1, node3.getType());
1451:       assertFalse(node3.hasOneChild());
1452:       assertFalse(node3.isNumber());
1453:       assertEquals((-1), node3.getSourcePosition());
1454:       assertFalse(node3.isFalse());
1455:       assertFalse(node3.isGetProp());
1456:       assertFalse(node3.isCast());
1457:       assertFalse(node3.isObjectLit());
1458:       assertFalse(node3.isLabelName());
1459:       assertFalse(node3.isAnd());
1460:       assertFalse(node3.isInc());
1461:       assertEquals((-1), node3.getCharno());
1462:       assertFalse(node3.isCase());
1463:       assertFalse(node3.isContinue());
1464:       assertFalse(node3.isHook());
1465:       assertFalse(node3.hasMoreThanOneChild());
1466:       assertFalse(node3.isBlock());
1467:       assertFalse(node3.isThrow());
1468:       assertFalse(node3.isNE());
1469:       assertFalse(node3.isThis());
1470:       assertFalse(node3.isSetterDef());
1471:       assertFalse(node3.isIn());
1472:       assertFalse(node3.isInstanceOf());
1473:       assertEquals((-1), node3.getLineno());
1474:       assertFalse(node3.isIf());
1475:       
1476:       Node node4 = new Node(54, node1, node1, node2);
1477:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1478:       assertEquals(39, Node.EMPTY_BLOCK);
1479:       assertEquals(48, Node.DIRECTIVES);
1480:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1481:       assertEquals(57, Node.REFLECTED_OBJECT);
1482:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1483:       assertEquals(55, Node.INFERRED_FUNCTION);
1484:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1485:       assertEquals(50, Node.FREE_CALL);
1486:       assertEquals(52, Node.LENGTH);
1487:       assertEquals(8, Node.FLAG_NO_THROWS);
1488:       assertEquals(36, Node.QUOTED_PROP);
1489:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1490:       assertEquals(1, Node.DECR_FLAG);
1491:       assertEquals(49, Node.DIRECT_EVAL);
1492:       assertEquals(12, Node.COLUMN_BITS);
1493:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1494:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1495:       assertEquals(4095, Node.COLUMN_MASK);
1496:       assertEquals(56, Node.CHANGE_TIME);
1497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1498:       assertEquals(29, Node.JSDOC_INFO_PROP);
1499:       assertEquals(47, Node.IS_DISPATCHER);
1500:       assertEquals(37, Node.OPT_ARG_NAME);
1501:       assertEquals(32, Node.INCRDECR_PROP);
1502:       assertEquals(46, Node.IS_NAMESPACE);
1503:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1504:       assertEquals(53, Node.INPUT_ID);
1505:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1506:       assertEquals(57, Node.LAST_PROP);
1507:       assertEquals(43, Node.IS_CONSTANT_NAME);
1508:       assertEquals(30, Node.VAR_ARGS_NAME);
1509:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1510:       assertEquals(54, Node.SLASH_V);
1511:       assertEquals(40, Node.ORIGINALNAME_PROP);
1512:       assertEquals(2, Node.POST_FLAG);
1513:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1514:       assertEquals(12, Node.COLUMN_BITS);
1515:       assertEquals(32, Node.INCRDECR_PROP);
1516:       assertEquals(46, Node.IS_NAMESPACE);
1517:       assertEquals(30, Node.VAR_ARGS_NAME);
1518:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1519:       assertEquals(57, Node.LAST_PROP);
1520:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1521:       assertEquals(1, Node.DECR_FLAG);
1522:       assertEquals(29, Node.JSDOC_INFO_PROP);
1523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1524:       assertEquals(57, Node.REFLECTED_OBJECT);
1525:       assertEquals(52, Node.LENGTH);
1526:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1527:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1528:       assertEquals(56, Node.CHANGE_TIME);
1529:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1530:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1531:       assertEquals(48, Node.DIRECTIVES);
1532:       assertEquals(49, Node.DIRECT_EVAL);
1533:       assertEquals(37, Node.OPT_ARG_NAME);
1534:       assertEquals(55, Node.INFERRED_FUNCTION);
1535:       assertEquals(4095, Node.COLUMN_MASK);
1536:       assertEquals(36, Node.QUOTED_PROP);
1537:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1538:       assertEquals(8, Node.FLAG_NO_THROWS);
1539:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1540:       assertEquals(53, Node.INPUT_ID);
1541:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1542:       assertEquals(39, Node.EMPTY_BLOCK);
1543:       assertEquals(50, Node.FREE_CALL);
1544:       assertEquals(54, Node.SLASH_V);
1545:       assertEquals(47, Node.IS_DISPATCHER);
1546:       assertEquals(43, Node.IS_CONSTANT_NAME);
1547:       assertEquals(2, Node.POST_FLAG);
1548:       assertEquals(40, Node.ORIGINALNAME_PROP);
1549:       assertEquals(29, Node.JSDOC_INFO_PROP);
1550:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1551:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1552:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1553:       assertEquals(37, Node.OPT_ARG_NAME);
1554:       assertEquals(32, Node.INCRDECR_PROP);
1555:       assertEquals(12, Node.COLUMN_BITS);
1556:       assertEquals(2, Node.POST_FLAG);
1557:       assertEquals(47, Node.IS_DISPATCHER);
1558:       assertEquals(30, Node.VAR_ARGS_NAME);
1559:       assertEquals(1, Node.DECR_FLAG);
1560:       assertEquals(43, Node.IS_CONSTANT_NAME);
1561:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1562:       assertEquals(46, Node.IS_NAMESPACE);
1563:       assertEquals(54, Node.SLASH_V);
1564:       assertEquals(50, Node.FREE_CALL);
1565:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1566:       assertEquals(40, Node.ORIGINALNAME_PROP);
1567:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1568:       assertEquals(39, Node.EMPTY_BLOCK);
1569:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1570:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1571:       assertEquals(49, Node.DIRECT_EVAL);
1572:       assertEquals(57, Node.LAST_PROP);
1573:       assertEquals(4095, Node.COLUMN_MASK);
1574:       assertEquals(55, Node.INFERRED_FUNCTION);
1575:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1576:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1577:       assertEquals(53, Node.INPUT_ID);
1578:       assertEquals(48, Node.DIRECTIVES);
1579:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1580:       assertEquals(52, Node.LENGTH);
1581:       assertEquals(8, Node.FLAG_NO_THROWS);
1582:       assertEquals(36, Node.QUOTED_PROP);
1583:       assertEquals(56, Node.CHANGE_TIME);
1584:       assertEquals(57, Node.REFLECTED_OBJECT);
1585:       assertEquals(40, Node.ORIGINALNAME_PROP);
1586:       assertEquals(57, Node.REFLECTED_OBJECT);
1587:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1588:       assertEquals(52, Node.LENGTH);
1589:       assertEquals(50, Node.FREE_CALL);
1590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1591:       assertEquals(8, Node.FLAG_NO_THROWS);
1592:       assertEquals(48, Node.DIRECTIVES);
1593:       assertEquals(49, Node.DIRECT_EVAL);
1594:       assertEquals(54, Node.SLASH_V);
1595:       assertEquals(12, Node.COLUMN_BITS);
1596:       assertEquals(1, Node.DECR_FLAG);
1597:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1598:       assertEquals(4095, Node.COLUMN_MASK);
1599:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1600:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1601:       assertEquals(32, Node.INCRDECR_PROP);
1602:       assertEquals(29, Node.JSDOC_INFO_PROP);
1603:       assertEquals(53, Node.INPUT_ID);
1604:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1605:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1606:       assertEquals(37, Node.OPT_ARG_NAME);
1607:       assertEquals(36, Node.QUOTED_PROP);
1608:       assertEquals(46, Node.IS_NAMESPACE);
1609:       assertEquals(56, Node.CHANGE_TIME);
1610:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1611:       assertEquals(43, Node.IS_CONSTANT_NAME);
1612:       assertEquals(55, Node.INFERRED_FUNCTION);
1613:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1614:       assertEquals(30, Node.VAR_ARGS_NAME);
1615:       assertEquals(2, Node.POST_FLAG);
1616:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1617:       assertEquals(39, Node.EMPTY_BLOCK);
1618:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1619:       assertEquals(47, Node.IS_DISPATCHER);
1620:       assertEquals(57, Node.LAST_PROP);
1621:       assertEquals((-1), node0.getSourcePosition());
1622:       assertFalse(node0.isTypeOf());
1623:       assertFalse(node0.hasChildren());
1624:       assertFalse(node0.isGetElem());
1625:       assertFalse(node0.isAssignAdd());
1626:       assertEquals((-1), node0.getLineno());
1627:       assertFalse(node0.isLabelName());
1628:       assertFalse(node0.isOr());
1629:       assertFalse(node0.isScript());
1630:       assertFalse(node0.isExprResult());
1631:       assertFalse(node0.isWhile());
1632:       assertFalse(node0.hasOneChild());
1633:       assertFalse(node0.hasMoreThanOneChild());
1634:       assertFalse(node0.isReturn());
1635:       assertFalse(node0.isCall());
1636:       assertFalse(node0.isInstanceOf());
1637:       assertFalse(node0.isBlock());
1638:       assertFalse(node0.isWith());
1639:       assertEquals(39, node0.getType());
1640:       assertFalse(node0.isComma());
1641:       assertFalse(node0.isAssign());
1642:       assertFalse(node0.isDec());
1643:       assertFalse(node0.isNull());
1644:       assertFalse(node0.isBreak());
1645:       assertFalse(node0.isThis());
1646:       assertFalse(node0.isParamList());
1647:       assertFalse(node0.isName());
1648:       assertFalse(node0.isStringKey());
1649:       assertEquals((-1), node0.getCharno());
1650:       assertFalse(node0.isDefaultCase());
1651:       assertFalse(node0.isSwitch());
1652:       assertFalse(node0.isAdd());
1653:       assertFalse(node0.isNew());
1654:       assertFalse(node0.isDo());
1655:       assertFalse(node0.isArrayLit());
1656:       assertFalse(node0.isVar());
1657:       assertFalse(node0.isLabel());
1658:       assertEquals(0, node0.getChildCount());
1659:       assertFalse(node0.isIf());
1660:       assertFalse(node0.isNE());
1661:       assertFalse(node0.isEmpty());
1662:       assertFalse(node0.isDelProp());
1663:       assertTrue(node0.isNumber());
1664:       assertFalse(node0.isIn());
1665:       assertFalse(node0.isDebugger());
1666:       assertFalse(node0.isGetterDef());
1667:       assertFalse(node0.isRegExp());
1668:       assertFalse(node0.isString());
1669:       assertFalse(node0.isTrue());
1670:       assertFalse(node0.isCase());
1671:       assertFalse(node0.isTry());
1672:       assertFalse(node0.isVoid());
1673:       assertFalse(node0.isHook());
1674:       assertFalse(node0.isCatch());
1675:       assertFalse(node0.isFor());
1676:       assertFalse(node0.isSetterDef());
1677:       assertFalse(node0.isGetProp());
1678:       assertFalse(node0.isAnd());
1679:       assertFalse(node0.isObjectLit());
1680:       assertFalse(node0.isNot());
1681:       assertFalse(node0.isInc());
1682:       assertFalse(node0.isContinue());
1683:       assertFalse(node0.isCast());
1684:       assertFalse(node0.isThrow());
1685:       assertFalse(node0.isFalse());
1686:       assertFalse(node0.isFunction());
1687:       assertFalse(node1.isCatch());
1688:       assertEquals(0, node1.getChildCount());
1689:       assertFalse(node1.isSetterDef());
1690:       assertFalse(node1.isDebugger());
1691:       assertFalse(node1.isDefaultCase());
1692:       assertFalse(node1.isTry());
1693:       assertEquals(15, node1.getType());
1694:       assertFalse(node1.isName());
1695:       assertFalse(node1.isNull());
1696:       assertFalse(node1.isTrue());
1697:       assertFalse(node1.isBlock());
1698:       assertFalse(node1.isFor());
1699:       assertFalse(node1.isNE());
1700:       assertFalse(node1.isIf());
1701:       assertFalse(node1.isVoid());
1702:       assertFalse(node1.isRegExp());
1703:       assertFalse(node1.isDelProp());
1704:       assertFalse(node1.isCall());
1705:       assertFalse(node1.isContinue());
1706:       assertFalse(node1.isIn());
1707:       assertFalse(node1.isReturn());
1708:       assertFalse(node1.isWhile());
1709:       assertFalse(node1.isString());
1710:       assertFalse(node1.isInc());
1711:       assertFalse(node1.isCast());
1712:       assertFalse(node1.isFalse());
1713:       assertFalse(node1.isThrow());
1714:       assertFalse(node1.isFunction());
1715:       assertEquals(0, node1.getLineno());
1716:       assertFalse(node1.isAnd());
1717:       assertFalse(node1.isObjectLit());
1718:       assertFalse(node1.isNot());
1719:       assertEquals(48, node1.getSourcePosition());
1720:       assertFalse(node1.isGetProp());
1721:       assertFalse(node1.isScript());
1722:       assertFalse(node1.hasOneChild());
1723:       assertFalse(node1.isAssign());
1724:       assertFalse(node1.hasChildren());
1725:       assertFalse(node1.isHook());
1726:       assertFalse(node1.isComma());
1727:       assertFalse(node1.isThis());
1728:       assertFalse(node1.isDec());
1729:       assertFalse(node1.isTypeOf());
1730:       assertFalse(node1.isWith());
1731:       assertFalse(node1.isInstanceOf());
1732:       assertFalse(node1.isBreak());
1733:       assertFalse(node1.isGetElem());
1734:       assertFalse(node1.isExprResult());
1735:       assertFalse(node1.hasMoreThanOneChild());
1736:       assertFalse(node1.isOr());
1737:       assertFalse(node1.isAssignAdd());
1738:       assertFalse(node1.isLabel());
1739:       assertFalse(node1.isNumber());
1740:       assertFalse(node1.isGetterDef());
1741:       assertFalse(node1.isDo());
1742:       assertFalse(node1.isCase());
1743:       assertFalse(node1.isNew());
1744:       assertFalse(node1.isEmpty());
1745:       assertFalse(node1.isAdd());
1746:       assertFalse(node1.isArrayLit());
1747:       assertFalse(node1.isStringKey());
1748:       assertFalse(node1.isVar());
1749:       assertEquals(48, node1.getCharno());
1750:       assertFalse(node1.isSwitch());
1751:       assertFalse(node1.isParamList());
1752:       assertFalse(node1.isLabelName());
1753:       assertFalse(node2.isBreak());
1754:       assertFalse(node2.isFalse());
1755:       assertFalse(node2.isGetProp());
1756:       assertFalse(node2.isComma());
1757:       assertFalse(node2.isThis());
1758:       assertFalse(node2.isHook());
1759:       assertFalse(node2.isThrow());
1760:       assertFalse(node2.isString());
1761:       assertFalse(node2.isCase());
1762:       assertFalse(node2.isNot());
1763:       assertFalse(node2.isObjectLit());
1764:       assertFalse(node2.isScript());
1765:       assertFalse(node2.isAnd());
1766:       assertEquals((-1), node2.getCharno());
1767:       assertFalse(node2.isSwitch());
1768:       assertFalse(node2.hasChildren());
1769:       assertEquals((-1), node2.getSourcePosition());
1770:       assertFalse(node2.isDec());
1771:       assertFalse(node2.isTypeOf());
1772:       assertFalse(node2.isAssign());
1773:       assertFalse(node2.isDelProp());
1774:       assertFalse(node2.isLabelName());
1775:       assertFalse(node2.isGetElem());
1776:       assertFalse(node2.isEmpty());
1777:       assertFalse(node2.isReturn());
1778:       assertTrue(node2.isNumber());
1779:       assertFalse(node2.isLabel());
1780:       assertFalse(node2.isAssignAdd());
1781:       assertFalse(node2.isDefaultCase());
1782:       assertFalse(node2.isDo());
1783:       assertFalse(node2.isExprResult());
1784:       assertFalse(node2.isAdd());
1785:       assertFalse(node2.isOr());
1786:       assertFalse(node2.isVoid());
1787:       assertFalse(node2.isTrue());
1788:       assertFalse(node2.isNull());
1789:       assertFalse(node2.isName());
1790:       assertFalse(node2.isCall());
1791:       assertFalse(node2.isSetterDef());
1792:       assertFalse(node2.isNew());
1793:       assertEquals(0, node2.getChildCount());
1794:       assertFalse(node2.isBlock());
1795:       assertFalse(node2.isVar());
1796:       assertFalse(node2.isWhile());
1797:       assertFalse(node2.isFunction());
1798:       assertFalse(node2.isContinue());
1799:       assertFalse(node2.isArrayLit());
1800:       assertFalse(node2.isParamList());
1801:       assertFalse(node2.isDebugger());
1802:       assertFalse(node2.isStringKey());
1803:       assertFalse(node2.isIf());
1804:       assertFalse(node2.isGetterDef());
1805:       assertFalse(node2.isCast());
1806:       assertFalse(node2.hasOneChild());
1807:       assertFalse(node2.isTry());
1808:       assertFalse(node2.isFor());
1809:       assertFalse(node2.isWith());
1810:       assertEquals(39, node2.getType());
1811:       assertFalse(node2.isRegExp());
1812:       assertFalse(node2.isInc());
1813:       assertFalse(node2.hasMoreThanOneChild());
1814:       assertFalse(node2.isInstanceOf());
1815:       assertFalse(node2.isCatch());
1816:       assertEquals((-1), node2.getLineno());
1817:       assertFalse(node2.isIn());
1818:       assertFalse(node2.isNE());
1819:       assertFalse(node4.isCast());
1820:       assertFalse(node4.isGetElem());
1821:       assertEquals((-1), node4.getSourcePosition());
1822:       assertFalse(node4.isDec());
1823:       assertFalse(node4.isAssign());
1824:       assertFalse(node4.isTypeOf());
1825:       assertFalse(node4.isNumber());
1826:       assertFalse(node4.isExprResult());
1827:       assertEquals((-1), node4.getLineno());
1828:       assertFalse(node4.isLabelName());
1829:       assertFalse(node4.isAnd());
1830:       assertFalse(node4.isObjectLit());
1831:       assertFalse(node4.isInstanceOf());
1832:       assertFalse(node4.isNot());
1833:       assertFalse(node4.isWith());
1834:       assertFalse(node4.isGetProp());
1835:       assertFalse(node4.isComma());
1836:       assertFalse(node4.isScript());
1837:       assertFalse(node4.isThis());
1838:       assertFalse(node4.isReturn());
1839:       assertFalse(node4.isBlock());
1840:       assertFalse(node4.isWhile());
1841:       assertFalse(node4.hasOneChild());
1842:       assertFalse(node4.isStringKey());
1843:       assertFalse(node4.isVar());
1844:       assertFalse(node4.isCall());
1845:       assertEquals(54, node4.getType());
1846:       assertEquals((-1), node4.getCharno());
1847:       assertFalse(node4.isParamList());
1848:       assertFalse(node4.isNull());
1849:       assertFalse(node4.isBreak());
1850:       assertTrue(node4.hasMoreThanOneChild());
1851:       assertFalse(node4.isSwitch());
1852:       assertFalse(node4.isName());
1853:       assertFalse(node4.isOr());
1854:       assertFalse(node4.isNew());
1855:       assertFalse(node4.isAdd());
1856:       assertFalse(node4.isLabel());
1857:       assertFalse(node4.isDefaultCase());
1858:       assertFalse(node4.isDo());
1859:       assertFalse(node4.isAssignAdd());
1860:       assertFalse(node4.isEmpty());
1861:       assertFalse(node4.isFor());
1862:       assertFalse(node4.isArrayLit());
1863:       assertFalse(node4.isGetterDef());
1864:       assertFalse(node4.isDebugger());
1865:       assertFalse(node4.isVoid());
1866:       assertTrue(node4.hasChildren());
1867:       assertFalse(node4.isNE());
1868:       assertFalse(node4.isTrue());
1869:       assertFalse(node4.isIf());
1870:       assertFalse(node4.isDelProp());
1871:       assertFalse(node4.isCatch());
1872:       assertFalse(node4.isCase());
1873:       assertFalse(node4.isString());
1874:       assertFalse(node4.isRegExp());
1875:       assertFalse(node4.isTry());
1876:       assertFalse(node4.isThrow());
1877:       assertFalse(node4.isHook());
1878:       assertFalse(node4.isFalse());
1879:       assertFalse(node4.isContinue());
1880:       assertFalse(node4.isIn());
1881:       assertFalse(node4.isFunction());
1882:       assertEquals(2, node4.getChildCount());
1883:       assertFalse(node4.isInc());
1884:       assertFalse(node4.isSetterDef());
1885:       
1886:       node2.addSuppression("nw8Nfx#ox^: ih~CQ");
1887:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1888:       assertEquals(39, Node.EMPTY_BLOCK);
1889:       assertEquals(48, Node.DIRECTIVES);
1890:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1891:       assertEquals(57, Node.REFLECTED_OBJECT);
1892:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1893:       assertEquals(55, Node.INFERRED_FUNCTION);
1894:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1895:       assertEquals(50, Node.FREE_CALL);
1896:       assertEquals(52, Node.LENGTH);
1897:       assertEquals(8, Node.FLAG_NO_THROWS);
1898:       assertEquals(36, Node.QUOTED_PROP);
1899:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1900:       assertEquals(1, Node.DECR_FLAG);
1901:       assertEquals(49, Node.DIRECT_EVAL);
1902:       assertEquals(12, Node.COLUMN_BITS);
1903:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1904:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1905:       assertEquals(4095, Node.COLUMN_MASK);
1906:       assertEquals(56, Node.CHANGE_TIME);
1907:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1908:       assertEquals(29, Node.JSDOC_INFO_PROP);
1909:       assertEquals(47, Node.IS_DISPATCHER);
1910:       assertEquals(37, Node.OPT_ARG_NAME);
1911:       assertEquals(32, Node.INCRDECR_PROP);
1912:       assertEquals(46, Node.IS_NAMESPACE);
1913:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1914:       assertEquals(53, Node.INPUT_ID);
1915:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1916:       assertEquals(57, Node.LAST_PROP);
1917:       assertEquals(43, Node.IS_CONSTANT_NAME);
1918:       assertEquals(30, Node.VAR_ARGS_NAME);
1919:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1920:       assertEquals(54, Node.SLASH_V);
1921:       assertEquals(40, Node.ORIGINALNAME_PROP);
1922:       assertEquals(2, Node.POST_FLAG);
1923:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1924:       assertEquals(12, Node.COLUMN_BITS);
1925:       assertEquals(32, Node.INCRDECR_PROP);
1926:       assertEquals(46, Node.IS_NAMESPACE);
1927:       assertEquals(30, Node.VAR_ARGS_NAME);
1928:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1929:       assertEquals(57, Node.LAST_PROP);
1930:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1931:       assertEquals(1, Node.DECR_FLAG);
1932:       assertEquals(29, Node.JSDOC_INFO_PROP);
1933:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1934:       assertEquals(57, Node.REFLECTED_OBJECT);
1935:       assertEquals(52, Node.LENGTH);
1936:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1937:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1938:       assertEquals(56, Node.CHANGE_TIME);
1939:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1940:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1941:       assertEquals(48, Node.DIRECTIVES);
1942:       assertEquals(49, Node.DIRECT_EVAL);
1943:       assertEquals(37, Node.OPT_ARG_NAME);
1944:       assertEquals(55, Node.INFERRED_FUNCTION);
1945:       assertEquals(4095, Node.COLUMN_MASK);
1946:       assertEquals(36, Node.QUOTED_PROP);
1947:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1948:       assertEquals(8, Node.FLAG_NO_THROWS);
1949:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1950:       assertEquals(53, Node.INPUT_ID);
1951:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1952:       assertEquals(39, Node.EMPTY_BLOCK);
1953:       assertEquals(50, Node.FREE_CALL);
1954:       assertEquals(54, Node.SLASH_V);
1955:       assertEquals(47, Node.IS_DISPATCHER);
1956:       assertEquals(43, Node.IS_CONSTANT_NAME);
1957:       assertEquals(2, Node.POST_FLAG);
1958:       assertEquals(40, Node.ORIGINALNAME_PROP);
1959:       assertEquals(29, Node.JSDOC_INFO_PROP);
1960:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1961:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1962:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1963:       assertEquals(37, Node.OPT_ARG_NAME);
1964:       assertEquals(32, Node.INCRDECR_PROP);
1965:       assertEquals(12, Node.COLUMN_BITS);
1966:       assertEquals(2, Node.POST_FLAG);
1967:       assertEquals(47, Node.IS_DISPATCHER);
1968:       assertEquals(30, Node.VAR_ARGS_NAME);
1969:       assertEquals(1, Node.DECR_FLAG);
1970:       assertEquals(43, Node.IS_CONSTANT_NAME);
1971:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1972:       assertEquals(46, Node.IS_NAMESPACE);
1973:       assertEquals(54, Node.SLASH_V);
1974:       assertEquals(50, Node.FREE_CALL);
1975:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1976:       assertEquals(40, Node.ORIGINALNAME_PROP);
1977:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1978:       assertEquals(39, Node.EMPTY_BLOCK);
1979:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1980:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1981:       assertEquals(49, Node.DIRECT_EVAL);
1982:       assertEquals(57, Node.LAST_PROP);
1983:       assertEquals(4095, Node.COLUMN_MASK);
1984:       assertEquals(55, Node.INFERRED_FUNCTION);
1985:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1986:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1987:       assertEquals(53, Node.INPUT_ID);
1988:       assertEquals(48, Node.DIRECTIVES);
1989:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1990:       assertEquals(52, Node.LENGTH);
1991:       assertEquals(8, Node.FLAG_NO_THROWS);
1992:       assertEquals(36, Node.QUOTED_PROP);
1993:       assertEquals(56, Node.CHANGE_TIME);
1994:       assertEquals(57, Node.REFLECTED_OBJECT);
1995:       assertEquals((-1), node0.getSourcePosition());
1996:       assertFalse(node0.isTypeOf());
1997:       assertFalse(node0.hasChildren());
1998:       assertFalse(node0.isGetElem());
1999:       assertFalse(node0.isAssignAdd());
2000:       assertEquals((-1), node0.getLineno());
2001:       assertFalse(node0.isLabelName());
2002:       assertFalse(node0.isOr());
2003:       assertFalse(node0.isScript());
2004:       assertFalse(node0.isExprResult());
2005:       assertFalse(node0.isWhile());
2006:       assertFalse(node0.hasOneChild());
2007:       assertFalse(node0.hasMoreThanOneChild());
2008:       assertFalse(node0.isReturn());
2009:       assertFalse(node0.isCall());
2010:       assertFalse(node0.isInstanceOf());
2011:       assertFalse(node0.isBlock());
2012:       assertFalse(node0.isWith());
2013:       assertEquals(39, node0.getType());
2014:       assertFalse(node0.isComma());
2015:       assertFalse(node0.isAssign());
2016:       assertFalse(node0.isDec());
2017:       assertFalse(node0.isNull());
2018:       assertFalse(node0.isBreak());
2019:       assertFalse(node0.isThis());
2020:       assertFalse(node0.isParamList());
2021:       assertFalse(node0.isName());
2022:       assertFalse(node0.isStringKey());
2023:       assertEquals((-1), node0.getCharno());
2024:       assertFalse(node0.isDefaultCase());
2025:       assertFalse(node0.isSwitch());
2026:       assertFalse(node0.isAdd());
2027:       assertFalse(node0.isNew());
2028:       assertFalse(node0.isDo());
2029:       assertFalse(node0.isArrayLit());
2030:       assertFalse(node0.isVar());
2031:       assertFalse(node0.isLabel());
2032:       assertEquals(0, node0.getChildCount());
2033:       assertFalse(node0.isIf());
2034:       assertFalse(node0.isNE());
2035:       assertFalse(node0.isEmpty());
2036:       assertFalse(node0.isDelProp());
2037:       assertTrue(node0.isNumber());
2038:       assertFalse(node0.isIn());
2039:       assertFalse(node0.isDebugger());
2040:       assertFalse(node0.isGetterDef());
2041:       assertFalse(node0.isRegExp());
2042:       assertFalse(node0.isString());
2043:       assertFalse(node0.isTrue());
2044:       assertFalse(node0.isCase());
2045:       assertFalse(node0.isTry());
2046:       assertFalse(node0.isVoid());
2047:       assertFalse(node0.isHook());
2048:       assertFalse(node0.isCatch());
2049:       assertFalse(node0.isFor());
2050:       assertFalse(node0.isSetterDef());
2051:       assertFalse(node0.isGetProp());
2052:       assertFalse(node0.isAnd());
2053:       assertFalse(node0.isObjectLit());
2054:       assertFalse(node0.isNot());
2055:       assertFalse(node0.isInc());
2056:       assertFalse(node0.isContinue());
2057:       assertFalse(node0.isCast());
2058:       assertFalse(node0.isThrow());
2059:       assertFalse(node0.isFalse());
2060:       assertFalse(node0.isFunction());
2061:       assertFalse(node1.isCatch());
2062:       assertEquals(0, node1.getChildCount());
2063:       assertFalse(node1.isSetterDef());
2064:       assertFalse(node1.isDebugger());
2065:       assertFalse(node1.isDefaultCase());
2066:       assertFalse(node1.isTry());
2067:       assertEquals(15, node1.getType());
2068:       assertFalse(node1.isName());
2069:       assertFalse(node1.isNull());
2070:       assertFalse(node1.isTrue());
2071:       assertFalse(node1.isBlock());
2072:       assertFalse(node1.isFor());
2073:       assertFalse(node1.isNE());
2074:       assertFalse(node1.isIf());
2075:       assertFalse(node1.isVoid());
2076:       assertFalse(node1.isRegExp());
2077:       assertFalse(node1.isDelProp());
2078:       assertFalse(node1.isCall());
2079:       assertFalse(node1.isContinue());
2080:       assertFalse(node1.isIn());
2081:       assertFalse(node1.isReturn());
2082:       assertFalse(node1.isWhile());
2083:       assertFalse(node1.isString());
2084:       assertFalse(node1.isInc());
2085:       assertFalse(node1.isCast());
2086:       assertFalse(node1.isFalse());
2087:       assertFalse(node1.isThrow());
2088:       assertFalse(node1.isFunction());
2089:       assertEquals(0, node1.getLineno());
2090:       assertFalse(node1.isAnd());
2091:       assertFalse(node1.isObjectLit());
2092:       assertFalse(node1.isNot());
2093:       assertEquals(48, node1.getSourcePosition());
2094:       assertFalse(node1.isGetProp());
2095:       assertFalse(node1.isScript());
2096:       assertFalse(node1.hasOneChild());
2097:       assertFalse(node1.isAssign());
2098:       assertFalse(node1.hasChildren());
2099:       assertFalse(node1.isHook());
2100:       assertFalse(node1.isComma());
2101:       assertFalse(node1.isThis());
2102:       assertFalse(node1.isDec());
2103:       assertFalse(node1.isTypeOf());
2104:       assertFalse(node1.isWith());
2105:       assertFalse(node1.isInstanceOf());
2106:       assertFalse(node1.isBreak());
2107:       assertFalse(node1.isGetElem());
2108:       assertFalse(node1.isExprResult());
2109:       assertFalse(node1.hasMoreThanOneChild());
2110:       assertFalse(node1.isOr());
2111:       assertFalse(node1.isAssignAdd());
2112:       assertFalse(node1.isLabel());
2113:       assertFalse(node1.isNumber());
2114:       assertFalse(node1.isGetterDef());
2115:       assertFalse(node1.isDo());
2116:       assertFalse(node1.isCase());
2117:       assertFalse(node1.isNew());
2118:       assertFalse(node1.isEmpty());
2119:       assertFalse(node1.isAdd());
2120:       assertFalse(node1.isArrayLit());
2121:       assertFalse(node1.isStringKey());
2122:       assertFalse(node1.isVar());
2123:       assertEquals(48, node1.getCharno());
2124:       assertFalse(node1.isSwitch());
2125:       assertFalse(node1.isParamList());
2126:       assertFalse(node1.isLabelName());
2127:       assertFalse(node2.isBreak());
2128:       assertFalse(node2.isFalse());
2129:       assertFalse(node2.isGetProp());
2130:       assertFalse(node2.isComma());
2131:       assertFalse(node2.isThis());
2132:       assertFalse(node2.isHook());
2133:       assertFalse(node2.isThrow());
2134:       assertFalse(node2.isString());
2135:       assertFalse(node2.isCase());
2136:       assertFalse(node2.isNot());
2137:       assertFalse(node2.isObjectLit());
2138:       assertFalse(node2.isScript());
2139:       assertFalse(node2.isAnd());
2140:       assertEquals((-1), node2.getCharno());
2141:       assertFalse(node2.isSwitch());
2142:       assertFalse(node2.hasChildren());
2143:       assertEquals((-1), node2.getSourcePosition());
2144:       assertFalse(node2.isDec());
2145:       assertFalse(node2.isTypeOf());
2146:       assertFalse(node2.isAssign());
2147:       assertFalse(node2.isDelProp());
2148:       assertFalse(node2.isLabelName());
2149:       assertFalse(node2.isGetElem());
2150:       assertFalse(node2.isEmpty());
2151:       assertFalse(node2.isReturn());
2152:       assertTrue(node2.isNumber());
2153:       assertFalse(node2.isLabel());
2154:       assertFalse(node2.isAssignAdd());
2155:       assertFalse(node2.isDefaultCase());
2156:       assertFalse(node2.isDo());
2157:       assertFalse(node2.isExprResult());
2158:       assertFalse(node2.isAdd());
2159:       assertFalse(node2.isOr());
2160:       assertFalse(node2.isVoid());
2161:       assertFalse(node2.isTrue());
2162:       assertFalse(node2.isNull());
2163:       assertFalse(node2.isName());
2164:       assertFalse(node2.isCall());
2165:       assertFalse(node2.isSetterDef());
2166:       assertFalse(node2.isNew());
2167:       assertEquals(0, node2.getChildCount());
2168:       assertFalse(node2.isBlock());
2169:       assertFalse(node2.isVar());
2170:       assertFalse(node2.isWhile());
2171:       assertFalse(node2.isFunction());
2172:       assertFalse(node2.isContinue());
2173:       assertFalse(node2.isArrayLit());
2174:       assertFalse(node2.isParamList());
2175:       assertFalse(node2.isDebugger());
2176:       assertFalse(node2.isStringKey());
2177:       assertFalse(node2.isIf());
2178:       assertFalse(node2.isGetterDef());
2179:       assertFalse(node2.isCast());
2180:       assertFalse(node2.hasOneChild());
2181:       assertFalse(node2.isTry());
2182:       assertFalse(node2.isFor());
2183:       assertFalse(node2.isWith());
2184:       assertEquals(39, node2.getType());
2185:       assertFalse(node2.isRegExp());
2186:       assertFalse(node2.isInc());
2187:       assertFalse(node2.hasMoreThanOneChild());
2188:       assertFalse(node2.isInstanceOf());
2189:       assertFalse(node2.isCatch());
2190:       assertEquals((-1), node2.getLineno());
2191:       assertFalse(node2.isIn());
2192:       assertFalse(node2.isNE());
2193:       
2194:       node0.getAncestors();
2195:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2196:       assertEquals(39, Node.EMPTY_BLOCK);
2197:       assertEquals(48, Node.DIRECTIVES);
2198:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2199:       assertEquals(57, Node.REFLECTED_OBJECT);
2200:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2201:       assertEquals(55, Node.INFERRED_FUNCTION);
2202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2203:       assertEquals(50, Node.FREE_CALL);
2204:       assertEquals(52, Node.LENGTH);
2205:       assertEquals(8, Node.FLAG_NO_THROWS);
2206:       assertEquals(36, Node.QUOTED_PROP);
2207:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2208:       assertEquals(1, Node.DECR_FLAG);
2209:       assertEquals(49, Node.DIRECT_EVAL);
2210:       assertEquals(12, Node.COLUMN_BITS);
2211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2213:       assertEquals(4095, Node.COLUMN_MASK);
2214:       assertEquals(56, Node.CHANGE_TIME);
2215:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2216:       assertEquals(29, Node.JSDOC_INFO_PROP);
2217:       assertEquals(47, Node.IS_DISPATCHER);
2218:       assertEquals(37, Node.OPT_ARG_NAME);
2219:       assertEquals(32, Node.INCRDECR_PROP);
2220:       assertEquals(46, Node.IS_NAMESPACE);
2221:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2222:       assertEquals(53, Node.INPUT_ID);
2223:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2224:       assertEquals(57, Node.LAST_PROP);
2225:       assertEquals(43, Node.IS_CONSTANT_NAME);
2226:       assertEquals(30, Node.VAR_ARGS_NAME);
2227:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2228:       assertEquals(54, Node.SLASH_V);
2229:       assertEquals(40, Node.ORIGINALNAME_PROP);
2230:       assertEquals(2, Node.POST_FLAG);
2231:       assertEquals((-1), node0.getSourcePosition());
2232:       assertFalse(node0.isTypeOf());
2233:       assertFalse(node0.hasChildren());
2234:       assertFalse(node0.isGetElem());
2235:       assertFalse(node0.isAssignAdd());
2236:       assertEquals((-1), node0.getLineno());
2237:       assertFalse(node0.isLabelName());
2238:       assertFalse(node0.isOr());
2239:       assertFalse(node0.isScript());
2240:       assertFalse(node0.isExprResult());
2241:       assertFalse(node0.isWhile());
2242:       assertFalse(node0.hasOneChild());
2243:       assertFalse(node0.hasMoreThanOneChild());
2244:       assertFalse(node0.isReturn());
2245:       assertFalse(node0.isCall());
2246:       assertFalse(node0.isInstanceOf());
2247:       assertFalse(node0.isBlock());
2248:       assertFalse(node0.isWith());
2249:       assertEquals(39, node0.getType());
2250:       assertFalse(node0.isComma());
2251:       assertFalse(node0.isAssign());
2252:       assertFalse(node0.isDec());
2253:       assertFalse(node0.isNull());
2254:       assertFalse(node0.isBreak());
2255:       assertFalse(node0.isThis());
2256:       assertFalse(node0.isParamList());
2257:       assertFalse(node0.isName());
2258:       assertFalse(node0.isStringKey());
2259:       assertEquals((-1), node0.getCharno());
2260:       assertFalse(node0.isDefaultCase());
2261:       assertFalse(node0.isSwitch());
2262:       assertFalse(node0.isAdd());
2263:       assertFalse(node0.isNew());
2264:       assertFalse(node0.isDo());
2265:       assertFalse(node0.isArrayLit());
2266:       assertFalse(node0.isVar());
2267:       assertFalse(node0.isLabel());
2268:       assertEquals(0, node0.getChildCount());
2269:       assertFalse(node0.isIf());
2270:       assertFalse(node0.isNE());
2271:       assertFalse(node0.isEmpty());
2272:       assertFalse(node0.isDelProp());
2273:       assertTrue(node0.isNumber());
2274:       assertFalse(node0.isIn());
2275:       assertFalse(node0.isDebugger());
2276:       assertFalse(node0.isGetterDef());
2277:       assertFalse(node0.isRegExp());
2278:       assertFalse(node0.isString());
2279:       assertFalse(node0.isTrue());
2280:       assertFalse(node0.isCase());
2281:       assertFalse(node0.isTry());
2282:       assertFalse(node0.isVoid());
2283:       assertFalse(node0.isHook());
2284:       assertFalse(node0.isCatch());
2285:       assertFalse(node0.isFor());
2286:       assertFalse(node0.isSetterDef());
2287:       assertFalse(node0.isGetProp());
2288:       assertFalse(node0.isAnd());
2289:       assertFalse(node0.isObjectLit());
2290:       assertFalse(node0.isNot());
2291:       assertFalse(node0.isInc());
2292:       assertFalse(node0.isContinue());
2293:       assertFalse(node0.isCast());
2294:       assertFalse(node0.isThrow());
2295:       assertFalse(node0.isFalse());
2296:       assertFalse(node0.isFunction());
2297:       
2298:       node2.getCharno();
2299:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2300:       assertEquals(39, Node.EMPTY_BLOCK);
2301:       assertEquals(48, Node.DIRECTIVES);
2302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2303:       assertEquals(57, Node.REFLECTED_OBJECT);
2304:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2305:       assertEquals(55, Node.INFERRED_FUNCTION);
2306:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2307:       assertEquals(50, Node.FREE_CALL);
2308:       assertEquals(52, Node.LENGTH);
2309:       assertEquals(8, Node.FLAG_NO_THROWS);
2310:       assertEquals(36, Node.QUOTED_PROP);
2311:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2312:       assertEquals(1, Node.DECR_FLAG);
2313:       assertEquals(49, Node.DIRECT_EVAL);
2314:       assertEquals(12, Node.COLUMN_BITS);
2315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2316:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2317:       assertEquals(4095, Node.COLUMN_MASK);
2318:       assertEquals(56, Node.CHANGE_TIME);
2319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2320:       assertEquals(29, Node.JSDOC_INFO_PROP);
2321:       assertEquals(47, Node.IS_DISPATCHER);
2322:       assertEquals(37, Node.OPT_ARG_NAME);
2323:       assertEquals(32, Node.INCRDECR_PROP);
2324:       assertEquals(46, Node.IS_NAMESPACE);
2325:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2326:       assertEquals(53, Node.INPUT_ID);
2327:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2328:       assertEquals(57, Node.LAST_PROP);
2329:       assertEquals(43, Node.IS_CONSTANT_NAME);
2330:       assertEquals(30, Node.VAR_ARGS_NAME);
2331:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2332:       assertEquals(54, Node.SLASH_V);
2333:       assertEquals(40, Node.ORIGINALNAME_PROP);
2334:       assertEquals(2, Node.POST_FLAG);
2335:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2336:       assertEquals(12, Node.COLUMN_BITS);
2337:       assertEquals(32, Node.INCRDECR_PROP);
2338:       assertEquals(46, Node.IS_NAMESPACE);
2339:       assertEquals(30, Node.VAR_ARGS_NAME);
2340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2341:       assertEquals(57, Node.LAST_PROP);
2342:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2343:       assertEquals(1, Node.DECR_FLAG);
2344:       assertEquals(29, Node.JSDOC_INFO_PROP);
2345:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2346:       assertEquals(57, Node.REFLECTED_OBJECT);
2347:       assertEquals(52, Node.LENGTH);
2348:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2349:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2350:       assertEquals(56, Node.CHANGE_TIME);
2351:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2352:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2353:       assertEquals(48, Node.DIRECTIVES);
2354:       assertEquals(49, Node.DIRECT_EVAL);
2355:       assertEquals(37, Node.OPT_ARG_NAME);
2356:       assertEquals(55, Node.INFERRED_FUNCTION);
2357:       assertEquals(4095, Node.COLUMN_MASK);
2358:       assertEquals(36, Node.QUOTED_PROP);
2359:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2360:       assertEquals(8, Node.FLAG_NO_THROWS);
2361:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2362:       assertEquals(53, Node.INPUT_ID);
2363:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2364:       assertEquals(39, Node.EMPTY_BLOCK);
2365:       assertEquals(50, Node.FREE_CALL);
2366:       assertEquals(54, Node.SLASH_V);
2367:       assertEquals(47, Node.IS_DISPATCHER);
2368:       assertEquals(43, Node.IS_CONSTANT_NAME);
2369:       assertEquals(2, Node.POST_FLAG);
2370:       assertEquals(40, Node.ORIGINALNAME_PROP);
2371:       assertEquals(29, Node.JSDOC_INFO_PROP);
2372:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2373:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2374:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2375:       assertEquals(37, Node.OPT_ARG_NAME);
2376:       assertEquals(32, Node.INCRDECR_PROP);
2377:       assertEquals(12, Node.COLUMN_BITS);
2378:       assertEquals(2, Node.POST_FLAG);
2379:       assertEquals(47, Node.IS_DISPATCHER);
2380:       assertEquals(30, Node.VAR_ARGS_NAME);
2381:       assertEquals(1, Node.DECR_FLAG);
2382:       assertEquals(43, Node.IS_CONSTANT_NAME);
2383:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2384:       assertEquals(46, Node.IS_NAMESPACE);
2385:       assertEquals(54, Node.SLASH_V);
2386:       assertEquals(50, Node.FREE_CALL);
2387:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2388:       assertEquals(40, Node.ORIGINALNAME_PROP);
2389:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2390:       assertEquals(39, Node.EMPTY_BLOCK);
2391:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2392:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2393:       assertEquals(49, Node.DIRECT_EVAL);
2394:       assertEquals(57, Node.LAST_PROP);
2395:       assertEquals(4095, Node.COLUMN_MASK);
2396:       assertEquals(55, Node.INFERRED_FUNCTION);
2397:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2398:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2399:       assertEquals(53, Node.INPUT_ID);
2400:       assertEquals(48, Node.DIRECTIVES);
2401:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2402:       assertEquals(52, Node.LENGTH);
2403:       assertEquals(8, Node.FLAG_NO_THROWS);
2404:       assertEquals(36, Node.QUOTED_PROP);
2405:       assertEquals(56, Node.CHANGE_TIME);
2406:       assertEquals(57, Node.REFLECTED_OBJECT);
2407:       assertEquals((-1), node0.getSourcePosition());
2408:       assertFalse(node0.isTypeOf());
2409:       assertFalse(node0.hasChildren());
2410:       assertFalse(node0.isGetElem());
2411:       assertFalse(node0.isAssignAdd());
2412:       assertEquals((-1), node0.getLineno());
2413:       assertFalse(node0.isLabelName());
2414:       assertFalse(node0.isOr());
2415:       assertFalse(node0.isScript());
2416:       assertFalse(node0.isExprResult());
2417:       assertFalse(node0.isWhile());
2418:       assertFalse(node0.hasOneChild());
2419:       assertFalse(node0.hasMoreThanOneChild());
2420:       assertFalse(node0.isReturn());
2421:       assertFalse(node0.isCall());
2422:       assertFalse(node0.isInstanceOf());
2423:       assertFalse(node0.isBlock());
2424:       assertFalse(node0.isWith());
2425:       assertEquals(39, node0.getType());
2426:       assertFalse(node0.isComma());
2427:       assertFalse(node0.isAssign());
2428:       assertFalse(node0.isDec());
2429:       assertFalse(node0.isNull());
2430:       assertFalse(node0.isBreak());
2431:       assertFalse(node0.isThis());
2432:       assertFalse(node0.isParamList());
2433:       assertFalse(node0.isName());
2434:       assertFalse(node0.isStringKey());
2435:       assertEquals((-1), node0.getCharno());
2436:       assertFalse(node0.isDefaultCase());
2437:       assertFalse(node0.isSwitch());
2438:       assertFalse(node0.isAdd());
2439:       assertFalse(node0.isNew());
2440:       assertFalse(node0.isDo());
2441:       assertFalse(node0.isArrayLit());
2442:       assertFalse(node0.isVar());
2443:       assertFalse(node0.isLabel());
2444:       assertEquals(0, node0.getChildCount());
2445:       assertFalse(node0.isIf());
2446:       assertFalse(node0.isNE());
2447:       assertFalse(node0.isEmpty());
2448:       assertFalse(node0.isDelProp());
2449:       assertTrue(node0.isNumber());
2450:       assertFalse(node0.isIn());
2451:       assertFalse(node0.isDebugger());
2452:       assertFalse(node0.isGetterDef());
2453:       assertFalse(node0.isRegExp());
2454:       assertFalse(node0.isString());
2455:       assertFalse(node0.isTrue());
2456:       assertFalse(node0.isCase());
2457:       assertFalse(node0.isTry());
2458:       assertFalse(node0.isVoid());
2459:       assertFalse(node0.isHook());
2460:       assertFalse(node0.isCatch());
2461:       assertFalse(node0.isFor());
2462:       assertFalse(node0.isSetterDef());
2463:       assertFalse(node0.isGetProp());
2464:       assertFalse(node0.isAnd());
2465:       assertFalse(node0.isObjectLit());
2466:       assertFalse(node0.isNot());
2467:       assertFalse(node0.isInc());
2468:       assertFalse(node0.isContinue());
2469:       assertFalse(node0.isCast());
2470:       assertFalse(node0.isThrow());
2471:       assertFalse(node0.isFalse());
2472:       assertFalse(node0.isFunction());
2473:       assertFalse(node1.isCatch());
2474:       assertEquals(0, node1.getChildCount());
2475:       assertFalse(node1.isSetterDef());
2476:       assertFalse(node1.isDebugger());
2477:       assertFalse(node1.isDefaultCase());
2478:       assertFalse(node1.isTry());
2479:       assertEquals(15, node1.getType());
2480:       assertFalse(node1.isName());
2481:       assertFalse(node1.isNull());
2482:       assertFalse(node1.isTrue());
2483:       assertFalse(node1.isBlock());
2484:       assertFalse(node1.isFor());
2485:       assertFalse(node1.isNE());
2486:       assertFalse(node1.isIf());
2487:       assertFalse(node1.isVoid());
2488:       assertFalse(node1.isRegExp());
2489:       assertFalse(node1.isDelProp());
2490:       assertFalse(node1.isCall());
2491:       assertFalse(node1.isContinue());
2492:       assertFalse(node1.isIn());
2493:       assertFalse(node1.isReturn());
2494:       assertFalse(node1.isWhile());
2495:       assertFalse(node1.isString());
2496:       assertFalse(node1.isInc());
2497:       assertFalse(node1.isCast());
2498:       assertFalse(node1.isFalse());
2499:       assertFalse(node1.isThrow());
2500:       assertFalse(node1.isFunction());
2501:       assertEquals(0, node1.getLineno());
2502:       assertFalse(node1.isAnd());
2503:       assertFalse(node1.isObjectLit());
2504:       assertFalse(node1.isNot());
2505:       assertEquals(48, node1.getSourcePosition());
2506:       assertFalse(node1.isGetProp());
2507:       assertFalse(node1.isScript());
2508:       assertFalse(node1.hasOneChild());
2509:       assertFalse(node1.isAssign());
2510:       assertFalse(node1.hasChildren());
2511:       assertFalse(node1.isHook());
2512:       assertFalse(node1.isComma());
2513:       assertFalse(node1.isThis());
2514:       assertFalse(node1.isDec());
2515:       assertFalse(node1.isTypeOf());
2516:       assertFalse(node1.isWith());
2517:       assertFalse(node1.isInstanceOf());
2518:       assertFalse(node1.isBreak());
2519:       assertFalse(node1.isGetElem());
2520:       assertFalse(node1.isExprResult());
2521:       assertFalse(node1.hasMoreThanOneChild());
2522:       assertFalse(node1.isOr());
2523:       assertFalse(node1.isAssignAdd());
2524:       assertFalse(node1.isLabel());
2525:       assertFalse(node1.isNumber());
2526:       assertFalse(node1.isGetterDef());
2527:       assertFalse(node1.isDo());
2528:       assertFalse(node1.isCase());
2529:       assertFalse(node1.isNew());
2530:       assertFalse(node1.isEmpty());
2531:       assertFalse(node1.isAdd());
2532:       assertFalse(node1.isArrayLit());
2533:       assertFalse(node1.isStringKey());
2534:       assertFalse(node1.isVar());
2535:       assertEquals(48, node1.getCharno());
2536:       assertFalse(node1.isSwitch());
2537:   }
2538: }
RegularFileObject[/tmp/EvoSuite_66_1628157513709/com/google/javascript/rhino/Node_66_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:34 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_66_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_66_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_66_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:34.350 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());

Iterable<Node> iterable0 = node0.children();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(iterable0.contains(node0));
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());

node0.isTry();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());

Node node1 = new Node(15, 0, 48);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(48, node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());

Node node2 = node0.clonePropsFrom(node1);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(48, node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertTrue(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isStringKey());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertEquals(39, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isNE());

FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
node1.isLocalResultCall();
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(48, node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());

node0.isFromExterns();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());

node0.isBreak();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());

node0.isCatch();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());

node1.mayMutateGlobalStateOrThrow();
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(48, node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());

Node node3 = Node.newString(1, "direct_eval");
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node3.isRegExp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isString());
assertFalse(node3.isVar());
assertFalse(node3.isDo());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isOr());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isTrue());
assertFalse(node3.isScript());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isExprResult());
assertEquals(1, node3.getType());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertFalse(node3.isCast());
assertFalse(node3.isObjectLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isAnd());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isCase());
assertFalse(node3.isContinue());
assertFalse(node3.isHook());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isThrow());
assertFalse(node3.isNE());
assertFalse(node3.isThis());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());

node3.getSourceOffset();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node3.isRegExp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isString());
assertFalse(node3.isVar());
assertFalse(node3.isDo());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isOr());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isTrue());
assertFalse(node3.isScript());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isExprResult());
assertEquals(1, node3.getType());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertFalse(node3.isCast());
assertFalse(node3.isObjectLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isAnd());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isCase());
assertFalse(node3.isContinue());
assertFalse(node3.isHook());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isThrow());
assertFalse(node3.isNE());
assertFalse(node3.isThis());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());

Node node4 = new Node(54, node1, node1, node2);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(48, node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertTrue(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isStringKey());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertEquals(39, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node4.isCast());
assertFalse(node4.isGetElem());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isNumber());
assertFalse(node4.isExprResult());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isLabelName());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isNot());
assertFalse(node4.isWith());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isScript());
assertFalse(node4.isThis());
assertFalse(node4.isReturn());
assertFalse(node4.isBlock());
assertFalse(node4.isWhile());
assertFalse(node4.hasOneChild());
assertFalse(node4.isStringKey());
assertFalse(node4.isVar());
assertFalse(node4.isCall());
assertEquals(54, node4.getType());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isParamList());
assertFalse(node4.isNull());
assertFalse(node4.isBreak());
assertTrue(node4.hasMoreThanOneChild());
assertFalse(node4.isSwitch());
assertFalse(node4.isName());
assertFalse(node4.isOr());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isEmpty());
assertFalse(node4.isFor());
assertFalse(node4.isArrayLit());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDebugger());
assertFalse(node4.isVoid());
assertTrue(node4.hasChildren());
assertFalse(node4.isNE());
assertFalse(node4.isTrue());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isCatch());
assertFalse(node4.isCase());
assertFalse(node4.isString());
assertFalse(node4.isRegExp());
assertFalse(node4.isTry());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isContinue());
assertFalse(node4.isIn());
assertFalse(node4.isFunction());
assertEquals(2, node4.getChildCount());
assertFalse(node4.isInc());
assertFalse(node4.isSetterDef());

node2.addSuppression("nw8Nfx#ox^: ih~CQ");
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(48, node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertTrue(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isStringKey());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertEquals(39, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isNE());

node0.getAncestors();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());

node2.getCharno();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isString());
assertFalse(node0.isTrue());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertEquals(48, node1.getCharno());
assertFalse(node1.isSwitch());


[MASTER] 09:58:34.700 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_69_1628157514591/com/google/javascript/rhino/Node_69_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_69_1628157514591/com/google/javascript/rhino/Node_69_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:34.700 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:34.700 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:34.700 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 162
[MASTER] 09:58:34.702 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_69_1628157514591/com/google/javascript/rhino/Node_69_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:34 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_69_tmp__ESTest extends Node_69_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((-7.415161004860078));
21:       assertEquals(48, Node.DIRECTIVES);
22:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
23:       assertEquals(8, Node.FLAG_NO_THROWS);
24:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
25:       assertEquals(39, Node.EMPTY_BLOCK);
26:       assertEquals(40, Node.ORIGINALNAME_PROP);
27:       assertEquals(4095, Node.COLUMN_MASK);
28:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
29:       assertEquals(54, Node.SLASH_V);
30:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
31:       assertEquals(50, Node.FREE_CALL);
32:       assertEquals(46, Node.IS_NAMESPACE);
33:       assertEquals(43, Node.IS_CONSTANT_NAME);
34:       assertEquals(51, Node.STATIC_SOURCE_FILE);
35:       assertEquals(37, Node.OPT_ARG_NAME);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(32, Node.INCRDECR_PROP);
38:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
39:       assertEquals(29, Node.JSDOC_INFO_PROP);
40:       assertEquals(1, Node.DECR_FLAG);
41:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
42:       assertEquals(30, Node.VAR_ARGS_NAME);
43:       assertEquals(12, Node.COLUMN_BITS);
44:       assertEquals(47, Node.IS_DISPATCHER);
45:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
46:       assertEquals(52, Node.LENGTH);
47:       assertEquals(57, Node.LAST_PROP);
48:       assertEquals(53, Node.INPUT_ID);
49:       assertEquals(15, Node.NO_SIDE_EFFECTS);
50:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
51:       assertEquals(55, Node.INFERRED_FUNCTION);
52:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
53:       assertEquals(49, Node.DIRECT_EVAL);
54:       assertEquals(56, Node.CHANGE_TIME);
55:       assertEquals(36, Node.QUOTED_PROP);
56:       assertEquals(57, Node.REFLECTED_OBJECT);
57:       assertTrue(node0.isNumber());
58:       assertFalse(node0.isIn());
59:       assertFalse(node0.isEmpty());
60:       assertFalse(node0.isCase());
61:       assertFalse(node0.isFor());
62:       assertEquals((-1), node0.getCharno());
63:       assertFalse(node0.isDebugger());
64:       assertFalse(node0.isFunction());
65:       assertFalse(node0.isTry());
66:       assertFalse(node0.isArrayLit());
67:       assertFalse(node0.isString());
68:       assertFalse(node0.isGetterDef());
69:       assertFalse(node0.isSwitch());
70:       assertFalse(node0.isGetProp());
71:       assertFalse(node0.isComma());
72:       assertEquals(0, node0.getChildCount());
73:       assertFalse(node0.isBreak());
74:       assertFalse(node0.isDefaultCase());
75:       assertFalse(node0.isVar());
76:       assertFalse(node0.isAdd());
77:       assertFalse(node0.isNew());
78:       assertFalse(node0.isVoid());
79:       assertFalse(node0.isExprResult());
80:       assertFalse(node0.isCall());
81:       assertFalse(node0.isGetElem());
82:       assertFalse(node0.isName());
83:       assertFalse(node0.isDelProp());
84:       assertFalse(node0.isNull());
85:       assertFalse(node0.isTrue());
86:       assertFalse(node0.isLabel());
87:       assertFalse(node0.isAssignAdd());
88:       assertEquals((-1), node0.getLineno());
89:       assertFalse(node0.isOr());
90:       assertFalse(node0.isTypeOf());
91:       assertFalse(node0.hasMoreThanOneChild());
92:       assertFalse(node0.isContinue());
93:       assertEquals(39, node0.getType());
94:       assertFalse(node0.isAssign());
95:       assertFalse(node0.isDec());
96:       assertFalse(node0.isDo());
97:       assertFalse(node0.hasChildren());
98:       assertFalse(node0.isWhile());
99:       assertFalse(node0.isReturn());
100:       assertFalse(node0.hasOneChild());
101:       assertFalse(node0.isScript());
102:       assertFalse(node0.isCast());
103:       assertFalse(node0.isStringKey());
104:       assertFalse(node0.isObjectLit());
105:       assertFalse(node0.isNot());
106:       assertFalse(node0.isLabelName());
107:       assertEquals((-1), node0.getSourcePosition());
108:       assertFalse(node0.isAnd());
109:       assertFalse(node0.isParamList());
110:       assertFalse(node0.isInstanceOf());
111:       assertFalse(node0.isSetterDef());
112:       assertFalse(node0.isCatch());
113:       assertFalse(node0.isFalse());
114:       assertFalse(node0.isWith());
115:       assertFalse(node0.isHook());
116:       assertFalse(node0.isThis());
117:       assertFalse(node0.isThrow());
118:       assertFalse(node0.isBlock());
119:       assertFalse(node0.isRegExp());
120:       assertFalse(node0.isInc());
121:       assertFalse(node0.isIf());
122:       assertFalse(node0.isNE());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(48, Node.DIRECTIVES);
127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
128:       assertEquals(8, Node.FLAG_NO_THROWS);
129:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
130:       assertEquals(39, Node.EMPTY_BLOCK);
131:       assertEquals(40, Node.ORIGINALNAME_PROP);
132:       assertEquals(4095, Node.COLUMN_MASK);
133:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
134:       assertEquals(54, Node.SLASH_V);
135:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
136:       assertEquals(50, Node.FREE_CALL);
137:       assertEquals(46, Node.IS_NAMESPACE);
138:       assertEquals(43, Node.IS_CONSTANT_NAME);
139:       assertEquals(51, Node.STATIC_SOURCE_FILE);
140:       assertEquals(37, Node.OPT_ARG_NAME);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(32, Node.INCRDECR_PROP);
143:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(1, Node.DECR_FLAG);
146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
147:       assertEquals(30, Node.VAR_ARGS_NAME);
148:       assertEquals(12, Node.COLUMN_BITS);
149:       assertEquals(47, Node.IS_DISPATCHER);
150:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
151:       assertEquals(52, Node.LENGTH);
152:       assertEquals(57, Node.LAST_PROP);
153:       assertEquals(53, Node.INPUT_ID);
154:       assertEquals(15, Node.NO_SIDE_EFFECTS);
155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
156:       assertEquals(55, Node.INFERRED_FUNCTION);
157:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
158:       assertEquals(49, Node.DIRECT_EVAL);
159:       assertEquals(56, Node.CHANGE_TIME);
160:       assertEquals(36, Node.QUOTED_PROP);
161:       assertEquals(57, Node.REFLECTED_OBJECT);
162:       assertFalse(iterable0.contains(node0));
163:       assertTrue(node0.isNumber());
164:       assertFalse(node0.isIn());
165:       assertFalse(node0.isEmpty());
166:       assertFalse(node0.isCase());
167:       assertFalse(node0.isFor());
168:       assertEquals((-1), node0.getCharno());
169:       assertFalse(node0.isDebugger());
170:       assertFalse(node0.isFunction());
171:       assertFalse(node0.isTry());
172:       assertFalse(node0.isArrayLit());
173:       assertFalse(node0.isString());
174:       assertFalse(node0.isGetterDef());
175:       assertFalse(node0.isSwitch());
176:       assertFalse(node0.isGetProp());
177:       assertFalse(node0.isComma());
178:       assertEquals(0, node0.getChildCount());
179:       assertFalse(node0.isBreak());
180:       assertFalse(node0.isDefaultCase());
181:       assertFalse(node0.isVar());
182:       assertFalse(node0.isAdd());
183:       assertFalse(node0.isNew());
184:       assertFalse(node0.isVoid());
185:       assertFalse(node0.isExprResult());
186:       assertFalse(node0.isCall());
187:       assertFalse(node0.isGetElem());
188:       assertFalse(node0.isName());
189:       assertFalse(node0.isDelProp());
190:       assertFalse(node0.isNull());
191:       assertFalse(node0.isTrue());
192:       assertFalse(node0.isLabel());
193:       assertFalse(node0.isAssignAdd());
194:       assertEquals((-1), node0.getLineno());
195:       assertFalse(node0.isOr());
196:       assertFalse(node0.isTypeOf());
197:       assertFalse(node0.hasMoreThanOneChild());
198:       assertFalse(node0.isContinue());
199:       assertEquals(39, node0.getType());
200:       assertFalse(node0.isAssign());
201:       assertFalse(node0.isDec());
202:       assertFalse(node0.isDo());
203:       assertFalse(node0.hasChildren());
204:       assertFalse(node0.isWhile());
205:       assertFalse(node0.isReturn());
206:       assertFalse(node0.hasOneChild());
207:       assertFalse(node0.isScript());
208:       assertFalse(node0.isCast());
209:       assertFalse(node0.isStringKey());
210:       assertFalse(node0.isObjectLit());
211:       assertFalse(node0.isNot());
212:       assertFalse(node0.isLabelName());
213:       assertEquals((-1), node0.getSourcePosition());
214:       assertFalse(node0.isAnd());
215:       assertFalse(node0.isParamList());
216:       assertFalse(node0.isInstanceOf());
217:       assertFalse(node0.isSetterDef());
218:       assertFalse(node0.isCatch());
219:       assertFalse(node0.isFalse());
220:       assertFalse(node0.isWith());
221:       assertFalse(node0.isHook());
222:       assertFalse(node0.isThis());
223:       assertFalse(node0.isThrow());
224:       assertFalse(node0.isBlock());
225:       assertFalse(node0.isRegExp());
226:       assertFalse(node0.isInc());
227:       assertFalse(node0.isIf());
228:       assertFalse(node0.isNE());
229:       assertNotNull(iterable0);
230:       
231:       boolean boolean0 = node0.isDec();
232:       assertEquals(48, Node.DIRECTIVES);
233:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
234:       assertEquals(8, Node.FLAG_NO_THROWS);
235:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
236:       assertEquals(39, Node.EMPTY_BLOCK);
237:       assertEquals(40, Node.ORIGINALNAME_PROP);
238:       assertEquals(4095, Node.COLUMN_MASK);
239:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
240:       assertEquals(54, Node.SLASH_V);
241:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
242:       assertEquals(50, Node.FREE_CALL);
243:       assertEquals(46, Node.IS_NAMESPACE);
244:       assertEquals(43, Node.IS_CONSTANT_NAME);
245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
246:       assertEquals(37, Node.OPT_ARG_NAME);
247:       assertEquals(2, Node.POST_FLAG);
248:       assertEquals(32, Node.INCRDECR_PROP);
249:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
250:       assertEquals(29, Node.JSDOC_INFO_PROP);
251:       assertEquals(1, Node.DECR_FLAG);
252:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
253:       assertEquals(30, Node.VAR_ARGS_NAME);
254:       assertEquals(12, Node.COLUMN_BITS);
255:       assertEquals(47, Node.IS_DISPATCHER);
256:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
257:       assertEquals(52, Node.LENGTH);
258:       assertEquals(57, Node.LAST_PROP);
259:       assertEquals(53, Node.INPUT_ID);
260:       assertEquals(15, Node.NO_SIDE_EFFECTS);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(55, Node.INFERRED_FUNCTION);
263:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
264:       assertEquals(49, Node.DIRECT_EVAL);
265:       assertEquals(56, Node.CHANGE_TIME);
266:       assertEquals(36, Node.QUOTED_PROP);
267:       assertEquals(57, Node.REFLECTED_OBJECT);
268:       assertTrue(node0.isNumber());
269:       assertFalse(node0.isIn());
270:       assertFalse(node0.isEmpty());
271:       assertFalse(node0.isCase());
272:       assertFalse(node0.isFor());
273:       assertEquals((-1), node0.getCharno());
274:       assertFalse(node0.isDebugger());
275:       assertFalse(node0.isFunction());
276:       assertFalse(node0.isTry());
277:       assertFalse(node0.isArrayLit());
278:       assertFalse(node0.isString());
279:       assertFalse(node0.isGetterDef());
280:       assertFalse(node0.isSwitch());
281:       assertFalse(node0.isGetProp());
282:       assertFalse(node0.isComma());
283:       assertEquals(0, node0.getChildCount());
284:       assertFalse(node0.isBreak());
285:       assertFalse(node0.isDefaultCase());
286:       assertFalse(node0.isVar());
287:       assertFalse(node0.isAdd());
288:       assertFalse(node0.isNew());
289:       assertFalse(node0.isVoid());
290:       assertFalse(node0.isExprResult());
291:       assertFalse(node0.isCall());
292:       assertFalse(node0.isGetElem());
293:       assertFalse(node0.isName());
294:       assertFalse(node0.isDelProp());
295:       assertFalse(node0.isNull());
296:       assertFalse(node0.isTrue());
297:       assertFalse(node0.isLabel());
298:       assertFalse(node0.isAssignAdd());
299:       assertEquals((-1), node0.getLineno());
300:       assertFalse(node0.isOr());
301:       assertFalse(node0.isTypeOf());
302:       assertFalse(node0.hasMoreThanOneChild());
303:       assertFalse(node0.isContinue());
304:       assertEquals(39, node0.getType());
305:       assertFalse(node0.isAssign());
306:       assertFalse(node0.isDec());
307:       assertFalse(node0.isDo());
308:       assertFalse(node0.hasChildren());
309:       assertFalse(node0.isWhile());
310:       assertFalse(node0.isReturn());
311:       assertFalse(node0.hasOneChild());
312:       assertFalse(node0.isScript());
313:       assertFalse(node0.isCast());
314:       assertFalse(node0.isStringKey());
315:       assertFalse(node0.isObjectLit());
316:       assertFalse(node0.isNot());
317:       assertFalse(node0.isLabelName());
318:       assertEquals((-1), node0.getSourcePosition());
319:       assertFalse(node0.isAnd());
320:       assertFalse(node0.isParamList());
321:       assertFalse(node0.isInstanceOf());
322:       assertFalse(node0.isSetterDef());
323:       assertFalse(node0.isCatch());
324:       assertFalse(node0.isFalse());
325:       assertFalse(node0.isWith());
326:       assertFalse(node0.isHook());
327:       assertFalse(node0.isThis());
328:       assertFalse(node0.isThrow());
329:       assertFalse(node0.isBlock());
330:       assertFalse(node0.isRegExp());
331:       assertFalse(node0.isInc());
332:       assertFalse(node0.isIf());
333:       assertFalse(node0.isNE());
334:       assertFalse(boolean0);
335:       
336:       Node node1 = new Node(15, (-4), 48);
337:       assertEquals(32, Node.INCRDECR_PROP);
338:       assertEquals(46, Node.IS_NAMESPACE);
339:       assertEquals(1, Node.DECR_FLAG);
340:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
341:       assertEquals(37, Node.OPT_ARG_NAME);
342:       assertEquals(30, Node.VAR_ARGS_NAME);
343:       assertEquals(57, Node.LAST_PROP);
344:       assertEquals(2, Node.POST_FLAG);
345:       assertEquals(12, Node.COLUMN_BITS);
346:       assertEquals(47, Node.IS_DISPATCHER);
347:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
348:       assertEquals(40, Node.ORIGINALNAME_PROP);
349:       assertEquals(50, Node.FREE_CALL);
350:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
351:       assertEquals(43, Node.IS_CONSTANT_NAME);
352:       assertEquals(54, Node.SLASH_V);
353:       assertEquals(51, Node.STATIC_SOURCE_FILE);
354:       assertEquals(4095, Node.COLUMN_MASK);
355:       assertEquals(55, Node.INFERRED_FUNCTION);
356:       assertEquals(39, Node.EMPTY_BLOCK);
357:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
358:       assertEquals(48, Node.DIRECTIVES);
359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
360:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
361:       assertEquals(52, Node.LENGTH);
362:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
363:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
364:       assertEquals(15, Node.NO_SIDE_EFFECTS);
365:       assertEquals(53, Node.INPUT_ID);
366:       assertEquals(29, Node.JSDOC_INFO_PROP);
367:       assertEquals(49, Node.DIRECT_EVAL);
368:       assertEquals(56, Node.CHANGE_TIME);
369:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
370:       assertEquals(8, Node.FLAG_NO_THROWS);
371:       assertEquals(36, Node.QUOTED_PROP);
372:       assertEquals(57, Node.REFLECTED_OBJECT);
373:       assertEquals(0, node1.getChildCount());
374:       assertFalse(node1.isCatch());
375:       assertFalse(node1.isSetterDef());
376:       assertEquals(15, node1.getType());
377:       assertFalse(node1.isDefaultCase());
378:       assertFalse(node1.isFunction());
379:       assertFalse(node1.isRegExp());
380:       assertFalse(node1.isVar());
381:       assertFalse(node1.isArrayLit());
382:       assertFalse(node1.isTry());
383:       assertFalse(node1.isGetterDef());
384:       assertFalse(node1.isStringKey());
385:       assertFalse(node1.isDebugger());
386:       assertFalse(node1.isParamList());
387:       assertFalse(node1.isOr());
388:       assertFalse(node1.isAssignAdd());
389:       assertFalse(node1.isDec());
390:       assertFalse(node1.hasChildren());
391:       assertFalse(node1.isWhile());
392:       assertFalse(node1.isAssign());
393:       assertFalse(node1.isDo());
394:       assertFalse(node1.isTypeOf());
395:       assertFalse(node1.isLabel());
396:       assertFalse(node1.isReturn());
397:       assertFalse(node1.isVoid());
398:       assertFalse(node1.isNew());
399:       assertFalse(node1.isEmpty());
400:       assertFalse(node1.isExprResult());
401:       assertFalse(node1.isGetElem());
402:       assertFalse(node1.isCall());
403:       assertFalse(node1.isAdd());
404:       assertFalse(node1.isBreak());
405:       assertFalse(node1.isName());
406:       assertFalse(node1.isDelProp());
407:       assertFalse(node1.isNull());
408:       assertFalse(node1.isTrue());
409:       assertFalse(node1.isInstanceOf());
410:       assertFalse(node1.isObjectLit());
411:       assertFalse(node1.isGetProp());
412:       assertFalse(node1.isWith());
413:       assertFalse(node1.isComma());
414:       assertFalse(node1.isThrow());
415:       assertFalse(node1.isThis());
416:       assertFalse(node1.hasOneChild());
417:       assertFalse(node1.isFalse());
418:       assertFalse(node1.isCast());
419:       assertFalse(node1.isScript());
420:       assertFalse(node1.isNumber());
421:       assertEquals((-1), node1.getSourcePosition());
422:       assertFalse(node1.isString());
423:       assertFalse(node1.isNot());
424:       assertFalse(node1.isSwitch());
425:       assertFalse(node1.isLabelName());
426:       assertFalse(node1.isAnd());
427:       assertEquals((-1), node1.getCharno());
428:       assertFalse(node1.isIn());
429:       assertEquals((-1), node1.getLineno());
430:       assertFalse(node1.hasMoreThanOneChild());
431:       assertFalse(node1.isContinue());
432:       assertFalse(node1.isCase());
433:       assertFalse(node1.isBlock());
434:       assertFalse(node1.isFor());
435:       assertFalse(node1.isHook());
436:       assertFalse(node1.isInc());
437:       assertFalse(node1.isIf());
438:       assertFalse(node1.isNE());
439:       assertNotNull(node1);
440:       assertFalse(node1.equals((Object)node0));
441:       
442:       Node node2 = node0.clonePropsFrom(node1);
443:       assertEquals(48, Node.DIRECTIVES);
444:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
445:       assertEquals(8, Node.FLAG_NO_THROWS);
446:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
447:       assertEquals(39, Node.EMPTY_BLOCK);
448:       assertEquals(40, Node.ORIGINALNAME_PROP);
449:       assertEquals(4095, Node.COLUMN_MASK);
450:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
451:       assertEquals(54, Node.SLASH_V);
452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
453:       assertEquals(50, Node.FREE_CALL);
454:       assertEquals(46, Node.IS_NAMESPACE);
455:       assertEquals(43, Node.IS_CONSTANT_NAME);
456:       assertEquals(51, Node.STATIC_SOURCE_FILE);
457:       assertEquals(37, Node.OPT_ARG_NAME);
458:       assertEquals(2, Node.POST_FLAG);
459:       assertEquals(32, Node.INCRDECR_PROP);
460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
461:       assertEquals(29, Node.JSDOC_INFO_PROP);
462:       assertEquals(1, Node.DECR_FLAG);
463:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
464:       assertEquals(30, Node.VAR_ARGS_NAME);
465:       assertEquals(12, Node.COLUMN_BITS);
466:       assertEquals(47, Node.IS_DISPATCHER);
467:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
468:       assertEquals(52, Node.LENGTH);
469:       assertEquals(57, Node.LAST_PROP);
470:       assertEquals(53, Node.INPUT_ID);
471:       assertEquals(15, Node.NO_SIDE_EFFECTS);
472:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
473:       assertEquals(55, Node.INFERRED_FUNCTION);
474:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
475:       assertEquals(49, Node.DIRECT_EVAL);
476:       assertEquals(56, Node.CHANGE_TIME);
477:       assertEquals(36, Node.QUOTED_PROP);
478:       assertEquals(57, Node.REFLECTED_OBJECT);
479:       assertEquals(32, Node.INCRDECR_PROP);
480:       assertEquals(46, Node.IS_NAMESPACE);
481:       assertEquals(1, Node.DECR_FLAG);
482:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
483:       assertEquals(37, Node.OPT_ARG_NAME);
484:       assertEquals(30, Node.VAR_ARGS_NAME);
485:       assertEquals(57, Node.LAST_PROP);
486:       assertEquals(2, Node.POST_FLAG);
487:       assertEquals(12, Node.COLUMN_BITS);
488:       assertEquals(47, Node.IS_DISPATCHER);
489:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
490:       assertEquals(40, Node.ORIGINALNAME_PROP);
491:       assertEquals(50, Node.FREE_CALL);
492:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
493:       assertEquals(43, Node.IS_CONSTANT_NAME);
494:       assertEquals(54, Node.SLASH_V);
495:       assertEquals(51, Node.STATIC_SOURCE_FILE);
496:       assertEquals(4095, Node.COLUMN_MASK);
497:       assertEquals(55, Node.INFERRED_FUNCTION);
498:       assertEquals(39, Node.EMPTY_BLOCK);
499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
500:       assertEquals(48, Node.DIRECTIVES);
501:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
502:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
503:       assertEquals(52, Node.LENGTH);
504:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
505:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
506:       assertEquals(15, Node.NO_SIDE_EFFECTS);
507:       assertEquals(53, Node.INPUT_ID);
508:       assertEquals(29, Node.JSDOC_INFO_PROP);
509:       assertEquals(49, Node.DIRECT_EVAL);
510:       assertEquals(56, Node.CHANGE_TIME);
511:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
512:       assertEquals(8, Node.FLAG_NO_THROWS);
513:       assertEquals(36, Node.QUOTED_PROP);
514:       assertEquals(57, Node.REFLECTED_OBJECT);
515:       assertEquals(53, Node.INPUT_ID);
516:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
517:       assertEquals(43, Node.IS_CONSTANT_NAME);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
520:       assertEquals(47, Node.IS_DISPATCHER);
521:       assertEquals(2, Node.POST_FLAG);
522:       assertEquals(32, Node.INCRDECR_PROP);
523:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
524:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
525:       assertEquals(46, Node.IS_NAMESPACE);
526:       assertEquals(50, Node.FREE_CALL);
527:       assertEquals(51, Node.STATIC_SOURCE_FILE);
528:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
529:       assertEquals(54, Node.SLASH_V);
530:       assertEquals(52, Node.LENGTH);
531:       assertEquals(15, Node.NO_SIDE_EFFECTS);
532:       assertEquals(57, Node.LAST_PROP);
533:       assertEquals(49, Node.DIRECT_EVAL);
534:       assertEquals(1, Node.DECR_FLAG);
535:       assertEquals(40, Node.ORIGINALNAME_PROP);
536:       assertEquals(12, Node.COLUMN_BITS);
537:       assertEquals(30, Node.VAR_ARGS_NAME);
538:       assertEquals(48, Node.DIRECTIVES);
539:       assertEquals(8, Node.FLAG_NO_THROWS);
540:       assertEquals(39, Node.EMPTY_BLOCK);
541:       assertEquals(56, Node.CHANGE_TIME);
542:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
543:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
544:       assertEquals(37, Node.OPT_ARG_NAME);
545:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
546:       assertEquals(55, Node.INFERRED_FUNCTION);
547:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
548:       assertEquals(29, Node.JSDOC_INFO_PROP);
549:       assertEquals(57, Node.REFLECTED_OBJECT);
550:       assertEquals(36, Node.QUOTED_PROP);
551:       assertTrue(node0.isNumber());
552:       assertFalse(node0.isIn());
553:       assertFalse(node0.isEmpty());
554:       assertFalse(node0.isCase());
555:       assertFalse(node0.isFor());
556:       assertEquals((-1), node0.getCharno());
557:       assertFalse(node0.isDebugger());
558:       assertFalse(node0.isFunction());
559:       assertFalse(node0.isTry());
560:       assertFalse(node0.isArrayLit());
561:       assertFalse(node0.isString());
562:       assertFalse(node0.isGetterDef());
563:       assertFalse(node0.isSwitch());
564:       assertFalse(node0.isGetProp());
565:       assertFalse(node0.isComma());
566:       assertEquals(0, node0.getChildCount());
567:       assertFalse(node0.isBreak());
568:       assertFalse(node0.isDefaultCase());
569:       assertFalse(node0.isVar());
570:       assertFalse(node0.isAdd());
571:       assertFalse(node0.isNew());
572:       assertFalse(node0.isVoid());
573:       assertFalse(node0.isExprResult());
574:       assertFalse(node0.isCall());
575:       assertFalse(node0.isGetElem());
576:       assertFalse(node0.isName());
577:       assertFalse(node0.isDelProp());
578:       assertFalse(node0.isNull());
579:       assertFalse(node0.isTrue());
580:       assertFalse(node0.isLabel());
581:       assertFalse(node0.isAssignAdd());
582:       assertEquals((-1), node0.getLineno());
583:       assertFalse(node0.isOr());
584:       assertFalse(node0.isTypeOf());
585:       assertFalse(node0.hasMoreThanOneChild());
586:       assertFalse(node0.isContinue());
587:       assertEquals(39, node0.getType());
588:       assertFalse(node0.isAssign());
589:       assertFalse(node0.isDec());
590:       assertFalse(node0.isDo());
591:       assertFalse(node0.hasChildren());
592:       assertFalse(node0.isWhile());
593:       assertFalse(node0.isReturn());
594:       assertFalse(node0.hasOneChild());
595:       assertFalse(node0.isScript());
596:       assertFalse(node0.isCast());
597:       assertFalse(node0.isStringKey());
598:       assertFalse(node0.isObjectLit());
599:       assertFalse(node0.isNot());
600:       assertFalse(node0.isLabelName());
601:       assertEquals((-1), node0.getSourcePosition());
602:       assertFalse(node0.isAnd());
603:       assertFalse(node0.isParamList());
604:       assertFalse(node0.isInstanceOf());
605:       assertFalse(node0.isSetterDef());
606:       assertFalse(node0.isCatch());
607:       assertFalse(node0.isFalse());
608:       assertFalse(node0.isWith());
609:       assertFalse(node0.isHook());
610:       assertFalse(node0.isThis());
611:       assertFalse(node0.isThrow());
612:       assertFalse(node0.isBlock());
613:       assertFalse(node0.isRegExp());
614:       assertFalse(node0.isInc());
615:       assertFalse(node0.isIf());
616:       assertFalse(node0.isNE());
617:       assertEquals(0, node1.getChildCount());
618:       assertFalse(node1.isCatch());
619:       assertFalse(node1.isSetterDef());
620:       assertEquals(15, node1.getType());
621:       assertFalse(node1.isDefaultCase());
622:       assertFalse(node1.isFunction());
623:       assertFalse(node1.isRegExp());
624:       assertFalse(node1.isVar());
625:       assertFalse(node1.isArrayLit());
626:       assertFalse(node1.isTry());
627:       assertFalse(node1.isGetterDef());
628:       assertFalse(node1.isStringKey());
629:       assertFalse(node1.isDebugger());
630:       assertFalse(node1.isParamList());
631:       assertFalse(node1.isOr());
632:       assertFalse(node1.isAssignAdd());
633:       assertFalse(node1.isDec());
634:       assertFalse(node1.hasChildren());
635:       assertFalse(node1.isWhile());
636:       assertFalse(node1.isAssign());
637:       assertFalse(node1.isDo());
638:       assertFalse(node1.isTypeOf());
639:       assertFalse(node1.isLabel());
640:       assertFalse(node1.isReturn());
641:       assertFalse(node1.isVoid());
642:       assertFalse(node1.isNew());
643:       assertFalse(node1.isEmpty());
644:       assertFalse(node1.isExprResult());
645:       assertFalse(node1.isGetElem());
646:       assertFalse(node1.isCall());
647:       assertFalse(node1.isAdd());
648:       assertFalse(node1.isBreak());
649:       assertFalse(node1.isName());
650:       assertFalse(node1.isDelProp());
651:       assertFalse(node1.isNull());
652:       assertFalse(node1.isTrue());
653:       assertFalse(node1.isInstanceOf());
654:       assertFalse(node1.isObjectLit());
655:       assertFalse(node1.isGetProp());
656:       assertFalse(node1.isWith());
657:       assertFalse(node1.isComma());
658:       assertFalse(node1.isThrow());
659:       assertFalse(node1.isThis());
660:       assertFalse(node1.hasOneChild());
661:       assertFalse(node1.isFalse());
662:       assertFalse(node1.isCast());
663:       assertFalse(node1.isScript());
664:       assertFalse(node1.isNumber());
665:       assertEquals((-1), node1.getSourcePosition());
666:       assertFalse(node1.isString());
667:       assertFalse(node1.isNot());
668:       assertFalse(node1.isSwitch());
669:       assertFalse(node1.isLabelName());
670:       assertFalse(node1.isAnd());
671:       assertEquals((-1), node1.getCharno());
672:       assertFalse(node1.isIn());
673:       assertEquals((-1), node1.getLineno());
674:       assertFalse(node1.hasMoreThanOneChild());
675:       assertFalse(node1.isContinue());
676:       assertFalse(node1.isCase());
677:       assertFalse(node1.isBlock());
678:       assertFalse(node1.isFor());
679:       assertFalse(node1.isHook());
680:       assertFalse(node1.isInc());
681:       assertFalse(node1.isIf());
682:       assertFalse(node1.isNE());
683:       assertFalse(node2.isSwitch());
684:       assertFalse(node2.isInc());
685:       assertFalse(node2.isCase());
686:       assertFalse(node2.isThrow());
687:       assertFalse(node2.isFalse());
688:       assertFalse(node2.isComma());
689:       assertFalse(node2.isThis());
690:       assertFalse(node2.isHook());
691:       assertTrue(node2.isNumber());
692:       assertFalse(node2.isGetProp());
693:       assertFalse(node2.isNot());
694:       assertFalse(node2.isAnd());
695:       assertFalse(node2.isString());
696:       assertFalse(node2.isObjectLit());
697:       assertFalse(node2.isGetterDef());
698:       assertEquals((-1), node2.getCharno());
699:       assertFalse(node2.isVoid());
700:       assertFalse(node2.isArrayLit());
701:       assertFalse(node2.isExprResult());
702:       assertFalse(node2.isGetElem());
703:       assertFalse(node2.isAssign());
704:       assertFalse(node2.isDefaultCase());
705:       assertFalse(node2.isTypeOf());
706:       assertEquals(0, node2.getChildCount());
707:       assertFalse(node2.isDec());
708:       assertFalse(node2.hasChildren());
709:       assertFalse(node2.isOr());
710:       assertFalse(node2.isAssignAdd());
711:       assertFalse(node2.isBreak());
712:       assertFalse(node2.isEmpty());
713:       assertFalse(node2.isName());
714:       assertFalse(node2.isDelProp());
715:       assertFalse(node2.isNull());
716:       assertFalse(node2.isTrue());
717:       assertFalse(node2.isAdd());
718:       assertFalse(node2.isNew());
719:       assertFalse(node2.isCall());
720:       assertFalse(node2.isDo());
721:       assertFalse(node2.isWhile());
722:       assertFalse(node2.isContinue());
723:       assertFalse(node2.hasMoreThanOneChild());
724:       assertFalse(node2.isVar());
725:       assertFalse(node2.isReturn());
726:       assertEquals(39, node2.getType());
727:       assertFalse(node2.isBlock());
728:       assertFalse(node2.isLabel());
729:       assertFalse(node2.isLabelName());
730:       assertFalse(node2.isStringKey());
731:       assertEquals((-1), node2.getSourcePosition());
732:       assertFalse(node2.isParamList());
733:       assertFalse(node2.isDebugger());
734:       assertFalse(node2.isTry());
735:       assertFalse(node2.isFunction());
736:       assertFalse(node2.isScript());
737:       assertFalse(node2.isCast());
738:       assertFalse(node2.hasOneChild());
739:       assertFalse(node2.isFor());
740:       assertFalse(node2.isWith());
741:       assertFalse(node2.isRegExp());
742:       assertEquals((-1), node2.getLineno());
743:       assertFalse(node2.isIn());
744:       assertFalse(node2.isInstanceOf());
745:       assertFalse(node2.isCatch());
746:       assertFalse(node2.isSetterDef());
747:       assertFalse(node2.isIf());
748:       assertFalse(node2.isNE());
749:       assertSame(node0, node2);
750:       assertSame(node2, node0);
751:       assertNotNull(node2);
752:       assertFalse(node0.equals((Object)node1));
753:       assertFalse(node1.equals((Object)node0));
754:       assertFalse(node2.equals((Object)node1));
755:       
756:       boolean boolean1 = node0.isSwitch();
757:       assertEquals(48, Node.DIRECTIVES);
758:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
759:       assertEquals(8, Node.FLAG_NO_THROWS);
760:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
761:       assertEquals(39, Node.EMPTY_BLOCK);
762:       assertEquals(40, Node.ORIGINALNAME_PROP);
763:       assertEquals(4095, Node.COLUMN_MASK);
764:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
765:       assertEquals(54, Node.SLASH_V);
766:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
767:       assertEquals(50, Node.FREE_CALL);
768:       assertEquals(46, Node.IS_NAMESPACE);
769:       assertEquals(43, Node.IS_CONSTANT_NAME);
770:       assertEquals(51, Node.STATIC_SOURCE_FILE);
771:       assertEquals(37, Node.OPT_ARG_NAME);
772:       assertEquals(2, Node.POST_FLAG);
773:       assertEquals(32, Node.INCRDECR_PROP);
774:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
775:       assertEquals(29, Node.JSDOC_INFO_PROP);
776:       assertEquals(1, Node.DECR_FLAG);
777:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
778:       assertEquals(30, Node.VAR_ARGS_NAME);
779:       assertEquals(12, Node.COLUMN_BITS);
780:       assertEquals(47, Node.IS_DISPATCHER);
781:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
782:       assertEquals(52, Node.LENGTH);
783:       assertEquals(57, Node.LAST_PROP);
784:       assertEquals(53, Node.INPUT_ID);
785:       assertEquals(15, Node.NO_SIDE_EFFECTS);
786:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
787:       assertEquals(55, Node.INFERRED_FUNCTION);
788:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
789:       assertEquals(49, Node.DIRECT_EVAL);
790:       assertEquals(56, Node.CHANGE_TIME);
791:       assertEquals(36, Node.QUOTED_PROP);
792:       assertEquals(57, Node.REFLECTED_OBJECT);
793:       assertTrue(node0.isNumber());
794:       assertFalse(node0.isIn());
795:       assertFalse(node0.isEmpty());
796:       assertFalse(node0.isCase());
797:       assertFalse(node0.isFor());
798:       assertEquals((-1), node0.getCharno());
799:       assertFalse(node0.isDebugger());
800:       assertFalse(node0.isFunction());
801:       assertFalse(node0.isTry());
802:       assertFalse(node0.isArrayLit());
803:       assertFalse(node0.isString());
804:       assertFalse(node0.isGetterDef());
805:       assertFalse(node0.isSwitch());
806:       assertFalse(node0.isGetProp());
807:       assertFalse(node0.isComma());
808:       assertEquals(0, node0.getChildCount());
809:       assertFalse(node0.isBreak());
810:       assertFalse(node0.isDefaultCase());
811:       assertFalse(node0.isVar());
812:       assertFalse(node0.isAdd());
813:       assertFalse(node0.isNew());
814:       assertFalse(node0.isVoid());
815:       assertFalse(node0.isExprResult());
816:       assertFalse(node0.isCall());
817:       assertFalse(node0.isGetElem());
818:       assertFalse(node0.isName());
819:       assertFalse(node0.isDelProp());
820:       assertFalse(node0.isNull());
821:       assertFalse(node0.isTrue());
822:       assertFalse(node0.isLabel());
823:       assertFalse(node0.isAssignAdd());
824:       assertEquals((-1), node0.getLineno());
825:       assertFalse(node0.isOr());
826:       assertFalse(node0.isTypeOf());
827:       assertFalse(node0.hasMoreThanOneChild());
828:       assertFalse(node0.isContinue());
829:       assertEquals(39, node0.getType());
830:       assertFalse(node0.isAssign());
831:       assertFalse(node0.isDec());
832:       assertFalse(node0.isDo());
833:       assertFalse(node0.hasChildren());
834:       assertFalse(node0.isWhile());
835:       assertFalse(node0.isReturn());
836:       assertFalse(node0.hasOneChild());
837:       assertFalse(node0.isScript());
838:       assertFalse(node0.isCast());
839:       assertFalse(node0.isStringKey());
840:       assertFalse(node0.isObjectLit());
841:       assertFalse(node0.isNot());
842:       assertFalse(node0.isLabelName());
843:       assertEquals((-1), node0.getSourcePosition());
844:       assertFalse(node0.isAnd());
845:       assertFalse(node0.isParamList());
846:       assertFalse(node0.isInstanceOf());
847:       assertFalse(node0.isSetterDef());
848:       assertFalse(node0.isCatch());
849:       assertFalse(node0.isFalse());
850:       assertFalse(node0.isWith());
851:       assertFalse(node0.isHook());
852:       assertFalse(node0.isThis());
853:       assertFalse(node0.isThrow());
854:       assertFalse(node0.isBlock());
855:       assertFalse(node0.isRegExp());
856:       assertFalse(node0.isInc());
857:       assertFalse(node0.isIf());
858:       assertFalse(node0.isNE());
859:       assertSame(node0, node2);
860:       assertFalse(node0.equals((Object)node1));
861:       assertTrue(boolean1 == boolean0);
862:       assertFalse(boolean1);
863:       
864:       boolean boolean2 = node0.isBreak();
865:       assertEquals(48, Node.DIRECTIVES);
866:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
867:       assertEquals(8, Node.FLAG_NO_THROWS);
868:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
869:       assertEquals(39, Node.EMPTY_BLOCK);
870:       assertEquals(40, Node.ORIGINALNAME_PROP);
871:       assertEquals(4095, Node.COLUMN_MASK);
872:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
873:       assertEquals(54, Node.SLASH_V);
874:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
875:       assertEquals(50, Node.FREE_CALL);
876:       assertEquals(46, Node.IS_NAMESPACE);
877:       assertEquals(43, Node.IS_CONSTANT_NAME);
878:       assertEquals(51, Node.STATIC_SOURCE_FILE);
879:       assertEquals(37, Node.OPT_ARG_NAME);
880:       assertEquals(2, Node.POST_FLAG);
881:       assertEquals(32, Node.INCRDECR_PROP);
882:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
883:       assertEquals(29, Node.JSDOC_INFO_PROP);
884:       assertEquals(1, Node.DECR_FLAG);
885:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
886:       assertEquals(30, Node.VAR_ARGS_NAME);
887:       assertEquals(12, Node.COLUMN_BITS);
888:       assertEquals(47, Node.IS_DISPATCHER);
889:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
890:       assertEquals(52, Node.LENGTH);
891:       assertEquals(57, Node.LAST_PROP);
892:       assertEquals(53, Node.INPUT_ID);
893:       assertEquals(15, Node.NO_SIDE_EFFECTS);
894:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
895:       assertEquals(55, Node.INFERRED_FUNCTION);
896:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
897:       assertEquals(49, Node.DIRECT_EVAL);
898:       assertEquals(56, Node.CHANGE_TIME);
899:       assertEquals(36, Node.QUOTED_PROP);
900:       assertEquals(57, Node.REFLECTED_OBJECT);
901:       assertTrue(node0.isNumber());
902:       assertFalse(node0.isIn());
903:       assertFalse(node0.isEmpty());
904:       assertFalse(node0.isCase());
905:       assertFalse(node0.isFor());
906:       assertEquals((-1), node0.getCharno());
907:       assertFalse(node0.isDebugger());
908:       assertFalse(node0.isFunction());
909:       assertFalse(node0.isTry());
910:       assertFalse(node0.isArrayLit());
911:       assertFalse(node0.isString());
912:       assertFalse(node0.isGetterDef());
913:       assertFalse(node0.isSwitch());
914:       assertFalse(node0.isGetProp());
915:       assertFalse(node0.isComma());
916:       assertEquals(0, node0.getChildCount());
917:       assertFalse(node0.isBreak());
918:       assertFalse(node0.isDefaultCase());
919:       assertFalse(node0.isVar());
920:       assertFalse(node0.isAdd());
921:       assertFalse(node0.isNew());
922:       assertFalse(node0.isVoid());
923:       assertFalse(node0.isExprResult());
924:       assertFalse(node0.isCall());
925:       assertFalse(node0.isGetElem());
926:       assertFalse(node0.isName());
927:       assertFalse(node0.isDelProp());
928:       assertFalse(node0.isNull());
929:       assertFalse(node0.isTrue());
930:       assertFalse(node0.isLabel());
931:       assertFalse(node0.isAssignAdd());
932:       assertEquals((-1), node0.getLineno());
933:       assertFalse(node0.isOr());
934:       assertFalse(node0.isTypeOf());
935:       assertFalse(node0.hasMoreThanOneChild());
936:       assertFalse(node0.isContinue());
937:       assertEquals(39, node0.getType());
938:       assertFalse(node0.isAssign());
939:       assertFalse(node0.isDec());
940:       assertFalse(node0.isDo());
941:       assertFalse(node0.hasChildren());
942:       assertFalse(node0.isWhile());
943:       assertFalse(node0.isReturn());
944:       assertFalse(node0.hasOneChild());
945:       assertFalse(node0.isScript());
946:       assertFalse(node0.isCast());
947:       assertFalse(node0.isStringKey());
948:       assertFalse(node0.isObjectLit());
949:       assertFalse(node0.isNot());
950:       assertFalse(node0.isLabelName());
951:       assertEquals((-1), node0.getSourcePosition());
952:       assertFalse(node0.isAnd());
953:       assertFalse(node0.isParamList());
954:       assertFalse(node0.isInstanceOf());
955:       assertFalse(node0.isSetterDef());
956:       assertFalse(node0.isCatch());
957:       assertFalse(node0.isFalse());
958:       assertFalse(node0.isWith());
959:       assertFalse(node0.isHook());
960:       assertFalse(node0.isThis());
961:       assertFalse(node0.isThrow());
962:       assertFalse(node0.isBlock());
963:       assertFalse(node0.isRegExp());
964:       assertFalse(node0.isInc());
965:       assertFalse(node0.isIf());
966:       assertFalse(node0.isNE());
967:       assertSame(node0, node2);
968:       assertFalse(node0.equals((Object)node1));
969:       assertTrue(boolean2 == boolean1);
970:       assertTrue(boolean2 == boolean0);
971:       assertFalse(boolean2);
972:       
973:       boolean boolean3 = node0.isCatch();
974:       assertEquals(48, Node.DIRECTIVES);
975:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
976:       assertEquals(8, Node.FLAG_NO_THROWS);
977:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
978:       assertEquals(39, Node.EMPTY_BLOCK);
979:       assertEquals(40, Node.ORIGINALNAME_PROP);
980:       assertEquals(4095, Node.COLUMN_MASK);
981:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
982:       assertEquals(54, Node.SLASH_V);
983:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
984:       assertEquals(50, Node.FREE_CALL);
985:       assertEquals(46, Node.IS_NAMESPACE);
986:       assertEquals(43, Node.IS_CONSTANT_NAME);
987:       assertEquals(51, Node.STATIC_SOURCE_FILE);
988:       assertEquals(37, Node.OPT_ARG_NAME);
989:       assertEquals(2, Node.POST_FLAG);
990:       assertEquals(32, Node.INCRDECR_PROP);
991:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
992:       assertEquals(29, Node.JSDOC_INFO_PROP);
993:       assertEquals(1, Node.DECR_FLAG);
994:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
995:       assertEquals(30, Node.VAR_ARGS_NAME);
996:       assertEquals(12, Node.COLUMN_BITS);
997:       assertEquals(47, Node.IS_DISPATCHER);
998:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
999:       assertEquals(52, Node.LENGTH);
1000:       assertEquals(57, Node.LAST_PROP);
1001:       assertEquals(53, Node.INPUT_ID);
1002:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1003:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1004:       assertEquals(55, Node.INFERRED_FUNCTION);
1005:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1006:       assertEquals(49, Node.DIRECT_EVAL);
1007:       assertEquals(56, Node.CHANGE_TIME);
1008:       assertEquals(36, Node.QUOTED_PROP);
1009:       assertEquals(57, Node.REFLECTED_OBJECT);
1010:       assertTrue(node0.isNumber());
1011:       assertFalse(node0.isIn());
1012:       assertFalse(node0.isEmpty());
1013:       assertFalse(node0.isCase());
1014:       assertFalse(node0.isFor());
1015:       assertEquals((-1), node0.getCharno());
1016:       assertFalse(node0.isDebugger());
1017:       assertFalse(node0.isFunction());
1018:       assertFalse(node0.isTry());
1019:       assertFalse(node0.isArrayLit());
1020:       assertFalse(node0.isString());
1021:       assertFalse(node0.isGetterDef());
1022:       assertFalse(node0.isSwitch());
1023:       assertFalse(node0.isGetProp());
1024:       assertFalse(node0.isComma());
1025:       assertEquals(0, node0.getChildCount());
1026:       assertFalse(node0.isBreak());
1027:       assertFalse(node0.isDefaultCase());
1028:       assertFalse(node0.isVar());
1029:       assertFalse(node0.isAdd());
1030:       assertFalse(node0.isNew());
1031:       assertFalse(node0.isVoid());
1032:       assertFalse(node0.isExprResult());
1033:       assertFalse(node0.isCall());
1034:       assertFalse(node0.isGetElem());
1035:       assertFalse(node0.isName());
1036:       assertFalse(node0.isDelProp());
1037:       assertFalse(node0.isNull());
1038:       assertFalse(node0.isTrue());
1039:       assertFalse(node0.isLabel());
1040:       assertFalse(node0.isAssignAdd());
1041:       assertEquals((-1), node0.getLineno());
1042:       assertFalse(node0.isOr());
1043:       assertFalse(node0.isTypeOf());
1044:       assertFalse(node0.hasMoreThanOneChild());
1045:       assertFalse(node0.isContinue());
1046:       assertEquals(39, node0.getType());
1047:       assertFalse(node0.isAssign());
1048:       assertFalse(node0.isDec());
1049:       assertFalse(node0.isDo());
1050:       assertFalse(node0.hasChildren());
1051:       assertFalse(node0.isWhile());
1052:       assertFalse(node0.isReturn());
1053:       assertFalse(node0.hasOneChild());
1054:       assertFalse(node0.isScript());
1055:       assertFalse(node0.isCast());
1056:       assertFalse(node0.isStringKey());
1057:       assertFalse(node0.isObjectLit());
1058:       assertFalse(node0.isNot());
1059:       assertFalse(node0.isLabelName());
1060:       assertEquals((-1), node0.getSourcePosition());
1061:       assertFalse(node0.isAnd());
1062:       assertFalse(node0.isParamList());
1063:       assertFalse(node0.isInstanceOf());
1064:       assertFalse(node0.isSetterDef());
1065:       assertFalse(node0.isCatch());
1066:       assertFalse(node0.isFalse());
1067:       assertFalse(node0.isWith());
1068:       assertFalse(node0.isHook());
1069:       assertFalse(node0.isThis());
1070:       assertFalse(node0.isThrow());
1071:       assertFalse(node0.isBlock());
1072:       assertFalse(node0.isRegExp());
1073:       assertFalse(node0.isInc());
1074:       assertFalse(node0.isIf());
1075:       assertFalse(node0.isNE());
1076:       assertSame(node0, node2);
1077:       assertFalse(node0.equals((Object)node1));
1078:       assertTrue(boolean3 == boolean2);
1079:       assertTrue(boolean3 == boolean0);
1080:       assertTrue(boolean3 == boolean1);
1081:       assertFalse(boolean3);
1082:       
1083:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
1084:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1085:       assertEquals(37, node_SideEffectFlags0.valueOf());
1086:       assertNotNull(node_SideEffectFlags0);
1087:       
1088:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
1089:       assertEquals(31, node_SideEffectFlags0.valueOf());
1090:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1091:       assertEquals(31, node_SideEffectFlags1.valueOf());
1092:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1093:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1094:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1095:       assertNotNull(node_SideEffectFlags1);
1096:       
1097:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
1098:       assertEquals(27, node_SideEffectFlags0.valueOf());
1099:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1100:       assertEquals(27, node_SideEffectFlags2.valueOf());
1101:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1102:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1103:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1104:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1105:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1106:       assertNotNull(node_SideEffectFlags2);
1107:       
1108:       int int0 = node_SideEffectFlags1.valueOf();
1109:       assertEquals(27, node_SideEffectFlags0.valueOf());
1110:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1111:       assertEquals(27, node_SideEffectFlags1.valueOf());
1112:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1113:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1114:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1115:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1116:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1117:       assertEquals(27, int0);
1118:   }
1119: }
RegularFileObject[/tmp/EvoSuite_69_1628157514591/com/google/javascript/rhino/Node_69_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:34 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_69_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_69_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_69_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:34.727 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-7.415161004860078));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDo());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(iterable0.contains(node0));
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDo());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertNotNull(iterable0);

boolean boolean0 = node0.isDec();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDo());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(boolean0);

Node node1 = new Node(15, (-4), 48);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertEquals(15, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = node0.clonePropsFrom(node1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDo());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertEquals(15, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertTrue(node2.isNumber());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTypeOf());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCall());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isFunction());
assertFalse(node2.isScript());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertSame(node0, node2);
assertSame(node2, node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean1 = node0.isSwitch();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDo());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

boolean boolean2 = node0.isBreak();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDo());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

boolean boolean3 = node0.isCatch();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDo());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(37, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
assertEquals(27, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(27, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);

int int0 = node_SideEffectFlags1.valueOf();
assertEquals(27, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(27, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(27, int0);


[MASTER] 09:58:37.507 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_88_1628157517441/com/google/javascript/rhino/Node_88_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_88_1628157517441/com/google/javascript/rhino/Node_88_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:37.507 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:37.507 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:37.507 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 162
[MASTER] 09:58:37.508 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_88_1628157517441/com/google/javascript/rhino/Node_88_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:37 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_88_tmp__ESTest extends Node_88_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(1.0);
21:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
22:       assertEquals(54, Node.SLASH_V);
23:       assertEquals(52, Node.LENGTH);
24:       assertEquals(57, Node.REFLECTED_OBJECT);
25:       assertEquals(30, Node.VAR_ARGS_NAME);
26:       assertEquals(1, Node.DECR_FLAG);
27:       assertEquals(50, Node.FREE_CALL);
28:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
29:       assertEquals(15, Node.NO_SIDE_EFFECTS);
30:       assertEquals(57, Node.LAST_PROP);
31:       assertEquals(32, Node.INCRDECR_PROP);
32:       assertEquals(39, Node.EMPTY_BLOCK);
33:       assertEquals(48, Node.DIRECTIVES);
34:       assertEquals(8, Node.FLAG_NO_THROWS);
35:       assertEquals(56, Node.CHANGE_TIME);
36:       assertEquals(12, Node.COLUMN_BITS);
37:       assertEquals(49, Node.DIRECT_EVAL);
38:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
39:       assertEquals(4095, Node.COLUMN_MASK);
40:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
41:       assertEquals(37, Node.OPT_ARG_NAME);
42:       assertEquals(53, Node.INPUT_ID);
43:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
44:       assertEquals(43, Node.IS_CONSTANT_NAME);
45:       assertEquals(36, Node.QUOTED_PROP);
46:       assertEquals(29, Node.JSDOC_INFO_PROP);
47:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
48:       assertEquals(55, Node.INFERRED_FUNCTION);
49:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
50:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
51:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
52:       assertEquals(47, Node.IS_DISPATCHER);
53:       assertEquals(46, Node.IS_NAMESPACE);
54:       assertEquals(2, Node.POST_FLAG);
55:       assertEquals(51, Node.STATIC_SOURCE_FILE);
56:       assertEquals(40, Node.ORIGINALNAME_PROP);
57:       assertFalse(node0.isTry());
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isFunction());
60:       assertFalse(node0.isRegExp());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isTrue());
63:       assertFalse(node0.isEmpty());
64:       assertFalse(node0.isFor());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isGetterDef());
67:       assertTrue(node0.isNumber());
68:       assertFalse(node0.isIn());
69:       assertFalse(node0.isNE());
70:       assertFalse(node0.isNull());
71:       assertFalse(node0.isIf());
72:       assertFalse(node0.isDelProp());
73:       assertFalse(node0.isName());
74:       assertFalse(node0.isCatch());
75:       assertFalse(node0.isCall());
76:       assertFalse(node0.isThrow());
77:       assertFalse(node0.isWhile());
78:       assertFalse(node0.isString());
79:       assertFalse(node0.isGetProp());
80:       assertFalse(node0.isInc());
81:       assertFalse(node0.isSetterDef());
82:       assertEquals((-1), node0.getSourcePosition());
83:       assertFalse(node0.isAnd());
84:       assertFalse(node0.isContinue());
85:       assertFalse(node0.isFalse());
86:       assertFalse(node0.isCast());
87:       assertFalse(node0.isNot());
88:       assertFalse(node0.isObjectLit());
89:       assertFalse(node0.isScript());
90:       assertFalse(node0.hasOneChild());
91:       assertFalse(node0.isOr());
92:       assertEquals((-1), node0.getLineno());
93:       assertFalse(node0.isComma());
94:       assertFalse(node0.isDec());
95:       assertFalse(node0.hasChildren());
96:       assertFalse(node0.isThis());
97:       assertFalse(node0.isReturn());
98:       assertFalse(node0.isAssign());
99:       assertEquals(39, node0.getType());
100:       assertFalse(node0.isWith());
101:       assertFalse(node0.isTypeOf());
102:       assertFalse(node0.hasMoreThanOneChild());
103:       assertFalse(node0.isInstanceOf());
104:       assertFalse(node0.isBreak());
105:       assertFalse(node0.isExprResult());
106:       assertFalse(node0.isGetElem());
107:       assertFalse(node0.isAdd());
108:       assertFalse(node0.isNew());
109:       assertFalse(node0.isSwitch());
110:       assertFalse(node0.isVar());
111:       assertEquals((-1), node0.getCharno());
112:       assertFalse(node0.isBlock());
113:       assertFalse(node0.isHook());
114:       assertFalse(node0.isDo());
115:       assertFalse(node0.isCase());
116:       assertFalse(node0.isLabel());
117:       assertFalse(node0.isAssignAdd());
118:       assertEquals(0, node0.getChildCount());
119:       assertFalse(node0.isParamList());
120:       assertFalse(node0.isLabelName());
121:       assertFalse(node0.isStringKey());
122:       assertFalse(node0.isArrayLit());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
127:       assertEquals(54, Node.SLASH_V);
128:       assertEquals(52, Node.LENGTH);
129:       assertEquals(57, Node.REFLECTED_OBJECT);
130:       assertEquals(30, Node.VAR_ARGS_NAME);
131:       assertEquals(1, Node.DECR_FLAG);
132:       assertEquals(50, Node.FREE_CALL);
133:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
134:       assertEquals(15, Node.NO_SIDE_EFFECTS);
135:       assertEquals(57, Node.LAST_PROP);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(39, Node.EMPTY_BLOCK);
138:       assertEquals(48, Node.DIRECTIVES);
139:       assertEquals(8, Node.FLAG_NO_THROWS);
140:       assertEquals(56, Node.CHANGE_TIME);
141:       assertEquals(12, Node.COLUMN_BITS);
142:       assertEquals(49, Node.DIRECT_EVAL);
143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
144:       assertEquals(4095, Node.COLUMN_MASK);
145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
146:       assertEquals(37, Node.OPT_ARG_NAME);
147:       assertEquals(53, Node.INPUT_ID);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(43, Node.IS_CONSTANT_NAME);
150:       assertEquals(36, Node.QUOTED_PROP);
151:       assertEquals(29, Node.JSDOC_INFO_PROP);
152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
156:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
157:       assertEquals(47, Node.IS_DISPATCHER);
158:       assertEquals(46, Node.IS_NAMESPACE);
159:       assertEquals(2, Node.POST_FLAG);
160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
161:       assertEquals(40, Node.ORIGINALNAME_PROP);
162:       assertFalse(iterable0.contains(node0));
163:       assertFalse(node0.isTry());
164:       assertFalse(node0.isVoid());
165:       assertFalse(node0.isFunction());
166:       assertFalse(node0.isRegExp());
167:       assertFalse(node0.isDebugger());
168:       assertFalse(node0.isTrue());
169:       assertFalse(node0.isEmpty());
170:       assertFalse(node0.isFor());
171:       assertFalse(node0.isDefaultCase());
172:       assertFalse(node0.isGetterDef());
173:       assertTrue(node0.isNumber());
174:       assertFalse(node0.isIn());
175:       assertFalse(node0.isNE());
176:       assertFalse(node0.isNull());
177:       assertFalse(node0.isIf());
178:       assertFalse(node0.isDelProp());
179:       assertFalse(node0.isName());
180:       assertFalse(node0.isCatch());
181:       assertFalse(node0.isCall());
182:       assertFalse(node0.isThrow());
183:       assertFalse(node0.isWhile());
184:       assertFalse(node0.isString());
185:       assertFalse(node0.isGetProp());
186:       assertFalse(node0.isInc());
187:       assertFalse(node0.isSetterDef());
188:       assertEquals((-1), node0.getSourcePosition());
189:       assertFalse(node0.isAnd());
190:       assertFalse(node0.isContinue());
191:       assertFalse(node0.isFalse());
192:       assertFalse(node0.isCast());
193:       assertFalse(node0.isNot());
194:       assertFalse(node0.isObjectLit());
195:       assertFalse(node0.isScript());
196:       assertFalse(node0.hasOneChild());
197:       assertFalse(node0.isOr());
198:       assertEquals((-1), node0.getLineno());
199:       assertFalse(node0.isComma());
200:       assertFalse(node0.isDec());
201:       assertFalse(node0.hasChildren());
202:       assertFalse(node0.isThis());
203:       assertFalse(node0.isReturn());
204:       assertFalse(node0.isAssign());
205:       assertEquals(39, node0.getType());
206:       assertFalse(node0.isWith());
207:       assertFalse(node0.isTypeOf());
208:       assertFalse(node0.hasMoreThanOneChild());
209:       assertFalse(node0.isInstanceOf());
210:       assertFalse(node0.isBreak());
211:       assertFalse(node0.isExprResult());
212:       assertFalse(node0.isGetElem());
213:       assertFalse(node0.isAdd());
214:       assertFalse(node0.isNew());
215:       assertFalse(node0.isSwitch());
216:       assertFalse(node0.isVar());
217:       assertEquals((-1), node0.getCharno());
218:       assertFalse(node0.isBlock());
219:       assertFalse(node0.isHook());
220:       assertFalse(node0.isDo());
221:       assertFalse(node0.isCase());
222:       assertFalse(node0.isLabel());
223:       assertFalse(node0.isAssignAdd());
224:       assertEquals(0, node0.getChildCount());
225:       assertFalse(node0.isParamList());
226:       assertFalse(node0.isLabelName());
227:       assertFalse(node0.isStringKey());
228:       assertFalse(node0.isArrayLit());
229:       assertNotNull(iterable0);
230:       
231:       boolean boolean0 = node0.isTry();
232:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
233:       assertEquals(54, Node.SLASH_V);
234:       assertEquals(52, Node.LENGTH);
235:       assertEquals(57, Node.REFLECTED_OBJECT);
236:       assertEquals(30, Node.VAR_ARGS_NAME);
237:       assertEquals(1, Node.DECR_FLAG);
238:       assertEquals(50, Node.FREE_CALL);
239:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
240:       assertEquals(15, Node.NO_SIDE_EFFECTS);
241:       assertEquals(57, Node.LAST_PROP);
242:       assertEquals(32, Node.INCRDECR_PROP);
243:       assertEquals(39, Node.EMPTY_BLOCK);
244:       assertEquals(48, Node.DIRECTIVES);
245:       assertEquals(8, Node.FLAG_NO_THROWS);
246:       assertEquals(56, Node.CHANGE_TIME);
247:       assertEquals(12, Node.COLUMN_BITS);
248:       assertEquals(49, Node.DIRECT_EVAL);
249:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
250:       assertEquals(4095, Node.COLUMN_MASK);
251:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
252:       assertEquals(37, Node.OPT_ARG_NAME);
253:       assertEquals(53, Node.INPUT_ID);
254:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
255:       assertEquals(43, Node.IS_CONSTANT_NAME);
256:       assertEquals(36, Node.QUOTED_PROP);
257:       assertEquals(29, Node.JSDOC_INFO_PROP);
258:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
259:       assertEquals(55, Node.INFERRED_FUNCTION);
260:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
263:       assertEquals(47, Node.IS_DISPATCHER);
264:       assertEquals(46, Node.IS_NAMESPACE);
265:       assertEquals(2, Node.POST_FLAG);
266:       assertEquals(51, Node.STATIC_SOURCE_FILE);
267:       assertEquals(40, Node.ORIGINALNAME_PROP);
268:       assertFalse(node0.isTry());
269:       assertFalse(node0.isVoid());
270:       assertFalse(node0.isFunction());
271:       assertFalse(node0.isRegExp());
272:       assertFalse(node0.isDebugger());
273:       assertFalse(node0.isTrue());
274:       assertFalse(node0.isEmpty());
275:       assertFalse(node0.isFor());
276:       assertFalse(node0.isDefaultCase());
277:       assertFalse(node0.isGetterDef());
278:       assertTrue(node0.isNumber());
279:       assertFalse(node0.isIn());
280:       assertFalse(node0.isNE());
281:       assertFalse(node0.isNull());
282:       assertFalse(node0.isIf());
283:       assertFalse(node0.isDelProp());
284:       assertFalse(node0.isName());
285:       assertFalse(node0.isCatch());
286:       assertFalse(node0.isCall());
287:       assertFalse(node0.isThrow());
288:       assertFalse(node0.isWhile());
289:       assertFalse(node0.isString());
290:       assertFalse(node0.isGetProp());
291:       assertFalse(node0.isInc());
292:       assertFalse(node0.isSetterDef());
293:       assertEquals((-1), node0.getSourcePosition());
294:       assertFalse(node0.isAnd());
295:       assertFalse(node0.isContinue());
296:       assertFalse(node0.isFalse());
297:       assertFalse(node0.isCast());
298:       assertFalse(node0.isNot());
299:       assertFalse(node0.isObjectLit());
300:       assertFalse(node0.isScript());
301:       assertFalse(node0.hasOneChild());
302:       assertFalse(node0.isOr());
303:       assertEquals((-1), node0.getLineno());
304:       assertFalse(node0.isComma());
305:       assertFalse(node0.isDec());
306:       assertFalse(node0.hasChildren());
307:       assertFalse(node0.isThis());
308:       assertFalse(node0.isReturn());
309:       assertFalse(node0.isAssign());
310:       assertEquals(39, node0.getType());
311:       assertFalse(node0.isWith());
312:       assertFalse(node0.isTypeOf());
313:       assertFalse(node0.hasMoreThanOneChild());
314:       assertFalse(node0.isInstanceOf());
315:       assertFalse(node0.isBreak());
316:       assertFalse(node0.isExprResult());
317:       assertFalse(node0.isGetElem());
318:       assertFalse(node0.isAdd());
319:       assertFalse(node0.isNew());
320:       assertFalse(node0.isSwitch());
321:       assertFalse(node0.isVar());
322:       assertEquals((-1), node0.getCharno());
323:       assertFalse(node0.isBlock());
324:       assertFalse(node0.isHook());
325:       assertFalse(node0.isDo());
326:       assertFalse(node0.isCase());
327:       assertFalse(node0.isLabel());
328:       assertFalse(node0.isAssignAdd());
329:       assertEquals(0, node0.getChildCount());
330:       assertFalse(node0.isParamList());
331:       assertFalse(node0.isLabelName());
332:       assertFalse(node0.isStringKey());
333:       assertFalse(node0.isArrayLit());
334:       assertFalse(boolean0);
335:       
336:       Node node1 = new Node(15, 0, 48);
337:       assertEquals(49, Node.DIRECT_EVAL);
338:       assertEquals(15, Node.NO_SIDE_EFFECTS);
339:       assertEquals(57, Node.LAST_PROP);
340:       assertEquals(32, Node.INCRDECR_PROP);
341:       assertEquals(1, Node.DECR_FLAG);
342:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
343:       assertEquals(2, Node.POST_FLAG);
344:       assertEquals(12, Node.COLUMN_BITS);
345:       assertEquals(47, Node.IS_DISPATCHER);
346:       assertEquals(30, Node.VAR_ARGS_NAME);
347:       assertEquals(50, Node.FREE_CALL);
348:       assertEquals(40, Node.ORIGINALNAME_PROP);
349:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
350:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
351:       assertEquals(46, Node.IS_NAMESPACE);
352:       assertEquals(54, Node.SLASH_V);
353:       assertEquals(51, Node.STATIC_SOURCE_FILE);
354:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
355:       assertEquals(55, Node.INFERRED_FUNCTION);
356:       assertEquals(43, Node.IS_CONSTANT_NAME);
357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
358:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
359:       assertEquals(4095, Node.COLUMN_MASK);
360:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
361:       assertEquals(29, Node.JSDOC_INFO_PROP);
362:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
363:       assertEquals(56, Node.CHANGE_TIME);
364:       assertEquals(39, Node.EMPTY_BLOCK);
365:       assertEquals(37, Node.OPT_ARG_NAME);
366:       assertEquals(48, Node.DIRECTIVES);
367:       assertEquals(53, Node.INPUT_ID);
368:       assertEquals(52, Node.LENGTH);
369:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
370:       assertEquals(36, Node.QUOTED_PROP);
371:       assertEquals(8, Node.FLAG_NO_THROWS);
372:       assertEquals(57, Node.REFLECTED_OBJECT);
373:       assertFalse(node1.isNot());
374:       assertFalse(node1.isWith());
375:       assertFalse(node1.isExprResult());
376:       assertFalse(node1.isScript());
377:       assertFalse(node1.isInstanceOf());
378:       assertFalse(node1.isComma());
379:       assertFalse(node1.isThis());
380:       assertEquals(48, node1.getSourcePosition());
381:       assertFalse(node1.isLabelName());
382:       assertFalse(node1.isFalse());
383:       assertFalse(node1.isNumber());
384:       assertFalse(node1.isCast());
385:       assertFalse(node1.hasOneChild());
386:       assertFalse(node1.isGetProp());
387:       assertFalse(node1.isAnd());
388:       assertFalse(node1.isObjectLit());
389:       assertFalse(node1.isInc());
390:       assertFalse(node1.isContinue());
391:       assertFalse(node1.isCase());
392:       assertFalse(node1.hasMoreThanOneChild());
393:       assertFalse(node1.isThrow());
394:       assertFalse(node1.isBlock());
395:       assertFalse(node1.isHook());
396:       assertFalse(node1.isIf());
397:       assertFalse(node1.isSetterDef());
398:       assertEquals(15, node1.getType());
399:       assertFalse(node1.isIn());
400:       assertFalse(node1.isNE());
401:       assertFalse(node1.isRegExp());
402:       assertFalse(node1.isDefaultCase());
403:       assertFalse(node1.isVoid());
404:       assertFalse(node1.isCatch());
405:       assertEquals(0, node1.getChildCount());
406:       assertFalse(node1.isTry());
407:       assertFalse(node1.isFunction());
408:       assertFalse(node1.isFor());
409:       assertFalse(node1.isGetterDef());
410:       assertFalse(node1.isArrayLit());
411:       assertEquals(0, node1.getLineno());
412:       assertFalse(node1.isDebugger());
413:       assertFalse(node1.isParamList());
414:       assertFalse(node1.isStringKey());
415:       assertFalse(node1.isWhile());
416:       assertFalse(node1.isString());
417:       assertFalse(node1.isDo());
418:       assertFalse(node1.isSwitch());
419:       assertFalse(node1.isAdd());
420:       assertFalse(node1.isNew());
421:       assertFalse(node1.isReturn());
422:       assertFalse(node1.isAssignAdd());
423:       assertEquals(48, node1.getCharno());
424:       assertFalse(node1.isVar());
425:       assertFalse(node1.hasChildren());
426:       assertFalse(node1.isLabel());
427:       assertFalse(node1.isDelProp());
428:       assertFalse(node1.isAssign());
429:       assertFalse(node1.isDec());
430:       assertFalse(node1.isEmpty());
431:       assertFalse(node1.isTypeOf());
432:       assertFalse(node1.isName());
433:       assertFalse(node1.isCall());
434:       assertFalse(node1.isGetElem());
435:       assertFalse(node1.isBreak());
436:       assertFalse(node1.isOr());
437:       assertFalse(node1.isTrue());
438:       assertFalse(node1.isNull());
439:       assertNotNull(node1);
440:       assertFalse(node1.equals((Object)node0));
441:       
442:       Node node2 = new Node(57, 4095, 4);
443:       assertEquals(48, Node.DIRECTIVES);
444:       assertEquals(8, Node.FLAG_NO_THROWS);
445:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
446:       assertEquals(50, Node.FREE_CALL);
447:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
448:       assertEquals(55, Node.INFERRED_FUNCTION);
449:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
450:       assertEquals(39, Node.EMPTY_BLOCK);
451:       assertEquals(43, Node.IS_CONSTANT_NAME);
452:       assertEquals(54, Node.SLASH_V);
453:       assertEquals(30, Node.VAR_ARGS_NAME);
454:       assertEquals(40, Node.ORIGINALNAME_PROP);
455:       assertEquals(32, Node.INCRDECR_PROP);
456:       assertEquals(51, Node.STATIC_SOURCE_FILE);
457:       assertEquals(12, Node.COLUMN_BITS);
458:       assertEquals(2, Node.POST_FLAG);
459:       assertEquals(56, Node.CHANGE_TIME);
460:       assertEquals(46, Node.IS_NAMESPACE);
461:       assertEquals(47, Node.IS_DISPATCHER);
462:       assertEquals(29, Node.JSDOC_INFO_PROP);
463:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
464:       assertEquals(1, Node.DECR_FLAG);
465:       assertEquals(57, Node.LAST_PROP);
466:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
467:       assertEquals(15, Node.NO_SIDE_EFFECTS);
468:       assertEquals(53, Node.INPUT_ID);
469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
470:       assertEquals(52, Node.LENGTH);
471:       assertEquals(36, Node.QUOTED_PROP);
472:       assertEquals(57, Node.REFLECTED_OBJECT);
473:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
474:       assertEquals(49, Node.DIRECT_EVAL);
475:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
476:       assertEquals(4095, Node.COLUMN_MASK);
477:       assertEquals(37, Node.OPT_ARG_NAME);
478:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
479:       assertFalse(node2.isIn());
480:       assertFalse(node2.isNE());
481:       assertFalse(node2.isString());
482:       assertFalse(node2.isCase());
483:       assertFalse(node2.isGetterDef());
484:       assertFalse(node2.isInc());
485:       assertFalse(node2.isEmpty());
486:       assertFalse(node2.isDebugger());
487:       assertFalse(node2.isSwitch());
488:       assertFalse(node2.isThrow());
489:       assertEquals(57, node2.getType());
490:       assertFalse(node2.isFalse());
491:       assertFalse(node2.isFunction());
492:       assertFalse(node2.isArrayLit());
493:       assertFalse(node2.isThis());
494:       assertFalse(node2.isParamList());
495:       assertFalse(node2.isSetterDef());
496:       assertFalse(node2.isScript());
497:       assertFalse(node2.hasOneChild());
498:       assertFalse(node2.isTry());
499:       assertFalse(node2.isBlock());
500:       assertFalse(node2.isHook());
501:       assertFalse(node2.isFor());
502:       assertEquals(4, node2.getCharno());
503:       assertFalse(node2.isWith());
504:       assertFalse(node2.isIf());
505:       assertFalse(node2.isRegExp());
506:       assertFalse(node2.isCatch());
507:       assertFalse(node2.hasMoreThanOneChild());
508:       assertFalse(node2.isInstanceOf());
509:       assertFalse(node2.isReturn());
510:       assertFalse(node2.isLabel());
511:       assertFalse(node2.isAssignAdd());
512:       assertEquals(4095, node2.getLineno());
513:       assertFalse(node2.isOr());
514:       assertFalse(node2.isWhile());
515:       assertFalse(node2.isNumber());
516:       assertFalse(node2.isDo());
517:       assertFalse(node2.isAdd());
518:       assertFalse(node2.isNew());
519:       assertFalse(node2.isStringKey());
520:       assertFalse(node2.isVar());
521:       assertFalse(node2.isLabelName());
522:       assertFalse(node2.isContinue());
523:       assertFalse(node2.isCast());
524:       assertEquals(0, node2.getChildCount());
525:       assertFalse(node2.isComma());
526:       assertFalse(node2.isAnd());
527:       assertFalse(node2.isNull());
528:       assertFalse(node2.isDefaultCase());
529:       assertFalse(node2.isNot());
530:       assertFalse(node2.isObjectLit());
531:       assertFalse(node2.isGetProp());
532:       assertFalse(node2.isVoid());
533:       assertFalse(node2.isTrue());
534:       assertFalse(node2.isBreak());
535:       assertFalse(node2.hasChildren());
536:       assertFalse(node2.isDec());
537:       assertFalse(node2.isTypeOf());
538:       assertFalse(node2.isName());
539:       assertEquals(16773124, node2.getSourcePosition());
540:       assertFalse(node2.isAssign());
541:       assertFalse(node2.isDelProp());
542:       assertFalse(node2.isExprResult());
543:       assertFalse(node2.isCall());
544:       assertFalse(node2.isGetElem());
545:       assertNotNull(node2);
546:       assertFalse(node2.equals((Object)node1));
547:       assertFalse(node2.equals((Object)node0));
548:       
549:       boolean boolean1 = node0.isSwitch();
550:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
551:       assertEquals(54, Node.SLASH_V);
552:       assertEquals(52, Node.LENGTH);
553:       assertEquals(57, Node.REFLECTED_OBJECT);
554:       assertEquals(30, Node.VAR_ARGS_NAME);
555:       assertEquals(1, Node.DECR_FLAG);
556:       assertEquals(50, Node.FREE_CALL);
557:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
558:       assertEquals(15, Node.NO_SIDE_EFFECTS);
559:       assertEquals(57, Node.LAST_PROP);
560:       assertEquals(32, Node.INCRDECR_PROP);
561:       assertEquals(39, Node.EMPTY_BLOCK);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(8, Node.FLAG_NO_THROWS);
564:       assertEquals(56, Node.CHANGE_TIME);
565:       assertEquals(12, Node.COLUMN_BITS);
566:       assertEquals(49, Node.DIRECT_EVAL);
567:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
568:       assertEquals(4095, Node.COLUMN_MASK);
569:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
570:       assertEquals(37, Node.OPT_ARG_NAME);
571:       assertEquals(53, Node.INPUT_ID);
572:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
573:       assertEquals(43, Node.IS_CONSTANT_NAME);
574:       assertEquals(36, Node.QUOTED_PROP);
575:       assertEquals(29, Node.JSDOC_INFO_PROP);
576:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
577:       assertEquals(55, Node.INFERRED_FUNCTION);
578:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
580:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
581:       assertEquals(47, Node.IS_DISPATCHER);
582:       assertEquals(46, Node.IS_NAMESPACE);
583:       assertEquals(2, Node.POST_FLAG);
584:       assertEquals(51, Node.STATIC_SOURCE_FILE);
585:       assertEquals(40, Node.ORIGINALNAME_PROP);
586:       assertFalse(node0.isTry());
587:       assertFalse(node0.isVoid());
588:       assertFalse(node0.isFunction());
589:       assertFalse(node0.isRegExp());
590:       assertFalse(node0.isDebugger());
591:       assertFalse(node0.isTrue());
592:       assertFalse(node0.isEmpty());
593:       assertFalse(node0.isFor());
594:       assertFalse(node0.isDefaultCase());
595:       assertFalse(node0.isGetterDef());
596:       assertTrue(node0.isNumber());
597:       assertFalse(node0.isIn());
598:       assertFalse(node0.isNE());
599:       assertFalse(node0.isNull());
600:       assertFalse(node0.isIf());
601:       assertFalse(node0.isDelProp());
602:       assertFalse(node0.isName());
603:       assertFalse(node0.isCatch());
604:       assertFalse(node0.isCall());
605:       assertFalse(node0.isThrow());
606:       assertFalse(node0.isWhile());
607:       assertFalse(node0.isString());
608:       assertFalse(node0.isGetProp());
609:       assertFalse(node0.isInc());
610:       assertFalse(node0.isSetterDef());
611:       assertEquals((-1), node0.getSourcePosition());
612:       assertFalse(node0.isAnd());
613:       assertFalse(node0.isContinue());
614:       assertFalse(node0.isFalse());
615:       assertFalse(node0.isCast());
616:       assertFalse(node0.isNot());
617:       assertFalse(node0.isObjectLit());
618:       assertFalse(node0.isScript());
619:       assertFalse(node0.hasOneChild());
620:       assertFalse(node0.isOr());
621:       assertEquals((-1), node0.getLineno());
622:       assertFalse(node0.isComma());
623:       assertFalse(node0.isDec());
624:       assertFalse(node0.hasChildren());
625:       assertFalse(node0.isThis());
626:       assertFalse(node0.isReturn());
627:       assertFalse(node0.isAssign());
628:       assertEquals(39, node0.getType());
629:       assertFalse(node0.isWith());
630:       assertFalse(node0.isTypeOf());
631:       assertFalse(node0.hasMoreThanOneChild());
632:       assertFalse(node0.isInstanceOf());
633:       assertFalse(node0.isBreak());
634:       assertFalse(node0.isExprResult());
635:       assertFalse(node0.isGetElem());
636:       assertFalse(node0.isAdd());
637:       assertFalse(node0.isNew());
638:       assertFalse(node0.isSwitch());
639:       assertFalse(node0.isVar());
640:       assertEquals((-1), node0.getCharno());
641:       assertFalse(node0.isBlock());
642:       assertFalse(node0.isHook());
643:       assertFalse(node0.isDo());
644:       assertFalse(node0.isCase());
645:       assertFalse(node0.isLabel());
646:       assertFalse(node0.isAssignAdd());
647:       assertEquals(0, node0.getChildCount());
648:       assertFalse(node0.isParamList());
649:       assertFalse(node0.isLabelName());
650:       assertFalse(node0.isStringKey());
651:       assertFalse(node0.isArrayLit());
652:       assertFalse(node0.equals((Object)node2));
653:       assertFalse(node0.equals((Object)node1));
654:       assertTrue(boolean1 == boolean0);
655:       assertFalse(boolean1);
656:       
657:       boolean boolean2 = node2.isBreak();
658:       assertEquals(48, Node.DIRECTIVES);
659:       assertEquals(8, Node.FLAG_NO_THROWS);
660:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
661:       assertEquals(50, Node.FREE_CALL);
662:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
663:       assertEquals(55, Node.INFERRED_FUNCTION);
664:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
665:       assertEquals(39, Node.EMPTY_BLOCK);
666:       assertEquals(43, Node.IS_CONSTANT_NAME);
667:       assertEquals(54, Node.SLASH_V);
668:       assertEquals(30, Node.VAR_ARGS_NAME);
669:       assertEquals(40, Node.ORIGINALNAME_PROP);
670:       assertEquals(32, Node.INCRDECR_PROP);
671:       assertEquals(51, Node.STATIC_SOURCE_FILE);
672:       assertEquals(12, Node.COLUMN_BITS);
673:       assertEquals(2, Node.POST_FLAG);
674:       assertEquals(56, Node.CHANGE_TIME);
675:       assertEquals(46, Node.IS_NAMESPACE);
676:       assertEquals(47, Node.IS_DISPATCHER);
677:       assertEquals(29, Node.JSDOC_INFO_PROP);
678:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
679:       assertEquals(1, Node.DECR_FLAG);
680:       assertEquals(57, Node.LAST_PROP);
681:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
682:       assertEquals(15, Node.NO_SIDE_EFFECTS);
683:       assertEquals(53, Node.INPUT_ID);
684:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
685:       assertEquals(52, Node.LENGTH);
686:       assertEquals(36, Node.QUOTED_PROP);
687:       assertEquals(57, Node.REFLECTED_OBJECT);
688:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
689:       assertEquals(49, Node.DIRECT_EVAL);
690:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
691:       assertEquals(4095, Node.COLUMN_MASK);
692:       assertEquals(37, Node.OPT_ARG_NAME);
693:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
694:       assertFalse(node2.isIn());
695:       assertFalse(node2.isNE());
696:       assertFalse(node2.isString());
697:       assertFalse(node2.isCase());
698:       assertFalse(node2.isGetterDef());
699:       assertFalse(node2.isInc());
700:       assertFalse(node2.isEmpty());
701:       assertFalse(node2.isDebugger());
702:       assertFalse(node2.isSwitch());
703:       assertFalse(node2.isThrow());
704:       assertEquals(57, node2.getType());
705:       assertFalse(node2.isFalse());
706:       assertFalse(node2.isFunction());
707:       assertFalse(node2.isArrayLit());
708:       assertFalse(node2.isThis());
709:       assertFalse(node2.isParamList());
710:       assertFalse(node2.isSetterDef());
711:       assertFalse(node2.isScript());
712:       assertFalse(node2.hasOneChild());
713:       assertFalse(node2.isTry());
714:       assertFalse(node2.isBlock());
715:       assertFalse(node2.isHook());
716:       assertFalse(node2.isFor());
717:       assertEquals(4, node2.getCharno());
718:       assertFalse(node2.isWith());
719:       assertFalse(node2.isIf());
720:       assertFalse(node2.isRegExp());
721:       assertFalse(node2.isCatch());
722:       assertFalse(node2.hasMoreThanOneChild());
723:       assertFalse(node2.isInstanceOf());
724:       assertFalse(node2.isReturn());
725:       assertFalse(node2.isLabel());
726:       assertFalse(node2.isAssignAdd());
727:       assertEquals(4095, node2.getLineno());
728:       assertFalse(node2.isOr());
729:       assertFalse(node2.isWhile());
730:       assertFalse(node2.isNumber());
731:       assertFalse(node2.isDo());
732:       assertFalse(node2.isAdd());
733:       assertFalse(node2.isNew());
734:       assertFalse(node2.isStringKey());
735:       assertFalse(node2.isVar());
736:       assertFalse(node2.isLabelName());
737:       assertFalse(node2.isContinue());
738:       assertFalse(node2.isCast());
739:       assertEquals(0, node2.getChildCount());
740:       assertFalse(node2.isComma());
741:       assertFalse(node2.isAnd());
742:       assertFalse(node2.isNull());
743:       assertFalse(node2.isDefaultCase());
744:       assertFalse(node2.isNot());
745:       assertFalse(node2.isObjectLit());
746:       assertFalse(node2.isGetProp());
747:       assertFalse(node2.isVoid());
748:       assertFalse(node2.isTrue());
749:       assertFalse(node2.isBreak());
750:       assertFalse(node2.hasChildren());
751:       assertFalse(node2.isDec());
752:       assertFalse(node2.isTypeOf());
753:       assertFalse(node2.isName());
754:       assertEquals(16773124, node2.getSourcePosition());
755:       assertFalse(node2.isAssign());
756:       assertFalse(node2.isDelProp());
757:       assertFalse(node2.isExprResult());
758:       assertFalse(node2.isCall());
759:       assertFalse(node2.isGetElem());
760:       assertNotSame(node2, node1);
761:       assertFalse(node2.equals((Object)node1));
762:       assertFalse(node2.equals((Object)node0));
763:       assertTrue(boolean2 == boolean1);
764:       assertTrue(boolean2 == boolean0);
765:       assertFalse(boolean2);
766:       
767:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1552);
768:       assertEquals(1552, node_SideEffectFlags0.valueOf());
769:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
770:       assertNotNull(node_SideEffectFlags0);
771:       
772:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
773:       assertEquals(31, node_SideEffectFlags0.valueOf());
774:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
775:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
776:       assertEquals(31, node_SideEffectFlags1.valueOf());
777:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
778:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
779:       assertNotNull(node_SideEffectFlags1);
780:       
781:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
782:       assertEquals(15, node_SideEffectFlags0.valueOf());
783:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
784:       assertEquals(15, node_SideEffectFlags2.valueOf());
785:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
786:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
787:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
788:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
789:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
790:       assertNotNull(node_SideEffectFlags2);
791:       
792:       Node node3 = node1.getAncestor(52);
793:       assertEquals(49, Node.DIRECT_EVAL);
794:       assertEquals(15, Node.NO_SIDE_EFFECTS);
795:       assertEquals(57, Node.LAST_PROP);
796:       assertEquals(32, Node.INCRDECR_PROP);
797:       assertEquals(1, Node.DECR_FLAG);
798:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
799:       assertEquals(2, Node.POST_FLAG);
800:       assertEquals(12, Node.COLUMN_BITS);
801:       assertEquals(47, Node.IS_DISPATCHER);
802:       assertEquals(30, Node.VAR_ARGS_NAME);
803:       assertEquals(50, Node.FREE_CALL);
804:       assertEquals(40, Node.ORIGINALNAME_PROP);
805:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
806:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
807:       assertEquals(46, Node.IS_NAMESPACE);
808:       assertEquals(54, Node.SLASH_V);
809:       assertEquals(51, Node.STATIC_SOURCE_FILE);
810:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
811:       assertEquals(55, Node.INFERRED_FUNCTION);
812:       assertEquals(43, Node.IS_CONSTANT_NAME);
813:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
814:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
815:       assertEquals(4095, Node.COLUMN_MASK);
816:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
817:       assertEquals(29, Node.JSDOC_INFO_PROP);
818:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
819:       assertEquals(56, Node.CHANGE_TIME);
820:       assertEquals(39, Node.EMPTY_BLOCK);
821:       assertEquals(37, Node.OPT_ARG_NAME);
822:       assertEquals(48, Node.DIRECTIVES);
823:       assertEquals(53, Node.INPUT_ID);
824:       assertEquals(52, Node.LENGTH);
825:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
826:       assertEquals(36, Node.QUOTED_PROP);
827:       assertEquals(8, Node.FLAG_NO_THROWS);
828:       assertEquals(57, Node.REFLECTED_OBJECT);
829:       assertFalse(node1.isNot());
830:       assertFalse(node1.isWith());
831:       assertFalse(node1.isExprResult());
832:       assertFalse(node1.isScript());
833:       assertFalse(node1.isInstanceOf());
834:       assertFalse(node1.isComma());
835:       assertFalse(node1.isThis());
836:       assertEquals(48, node1.getSourcePosition());
837:       assertFalse(node1.isLabelName());
838:       assertFalse(node1.isFalse());
839:       assertFalse(node1.isNumber());
840:       assertFalse(node1.isCast());
841:       assertFalse(node1.hasOneChild());
842:       assertFalse(node1.isGetProp());
843:       assertFalse(node1.isAnd());
844:       assertFalse(node1.isObjectLit());
845:       assertFalse(node1.isInc());
846:       assertFalse(node1.isContinue());
847:       assertFalse(node1.isCase());
848:       assertFalse(node1.hasMoreThanOneChild());
849:       assertFalse(node1.isThrow());
850:       assertFalse(node1.isBlock());
851:       assertFalse(node1.isHook());
852:       assertFalse(node1.isIf());
853:       assertFalse(node1.isSetterDef());
854:       assertEquals(15, node1.getType());
855:       assertFalse(node1.isIn());
856:       assertFalse(node1.isNE());
857:       assertFalse(node1.isRegExp());
858:       assertFalse(node1.isDefaultCase());
859:       assertFalse(node1.isVoid());
860:       assertFalse(node1.isCatch());
861:       assertEquals(0, node1.getChildCount());
862:       assertFalse(node1.isTry());
863:       assertFalse(node1.isFunction());
864:       assertFalse(node1.isFor());
865:       assertFalse(node1.isGetterDef());
866:       assertFalse(node1.isArrayLit());
867:       assertEquals(0, node1.getLineno());
868:       assertFalse(node1.isDebugger());
869:       assertFalse(node1.isParamList());
870:       assertFalse(node1.isStringKey());
871:       assertFalse(node1.isWhile());
872:       assertFalse(node1.isString());
873:       assertFalse(node1.isDo());
874:       assertFalse(node1.isSwitch());
875:       assertFalse(node1.isAdd());
876:       assertFalse(node1.isNew());
877:       assertFalse(node1.isReturn());
878:       assertFalse(node1.isAssignAdd());
879:       assertEquals(48, node1.getCharno());
880:       assertFalse(node1.isVar());
881:       assertFalse(node1.hasChildren());
882:       assertFalse(node1.isLabel());
883:       assertFalse(node1.isDelProp());
884:       assertFalse(node1.isAssign());
885:       assertFalse(node1.isDec());
886:       assertFalse(node1.isEmpty());
887:       assertFalse(node1.isTypeOf());
888:       assertFalse(node1.isName());
889:       assertFalse(node1.isCall());
890:       assertFalse(node1.isGetElem());
891:       assertFalse(node1.isBreak());
892:       assertFalse(node1.isOr());
893:       assertFalse(node1.isTrue());
894:       assertFalse(node1.isNull());
895:       assertNotSame(node1, node2);
896:       assertNull(node3);
897:       assertFalse(node1.equals((Object)node0));
898:       assertFalse(node1.equals((Object)node2));
899:   }
900: }
RegularFileObject[/tmp/EvoSuite_88_1628157517441/com/google/javascript/rhino/Node_88_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:37 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_88_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_88_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_88_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:37.610 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertNotNull(iterable0);

boolean boolean0 = node0.isTry();
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(boolean0);

Node node1 = new Node(15, 0, 48);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals(15, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertEquals(48, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isEmpty());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = new Node(57, 4095, 4);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isDebugger());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertEquals(57, node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertEquals(4, node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(4095, node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isNumber());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isName());
assertEquals(16773124, node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));

boolean boolean1 = node0.isSwitch();
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

boolean boolean2 = node2.isBreak();
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isDebugger());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertEquals(57, node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertEquals(4, node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(4095, node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isNumber());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isName());
assertEquals(16773124, node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1552);
assertEquals(1552, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags2);

Node node3 = node1.getAncestor(52);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isNumber());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertEquals(15, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertEquals(48, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isEmpty());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertNotSame(node1, node2);
assertNull(node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));


[MASTER] 09:58:38.922 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_97_1628157518520/com/google/javascript/rhino/Node_97_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_97_1628157518520/com/google/javascript/rhino/Node_97_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:38.922 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:38.922 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:38.922 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 163
[MASTER] 09:58:38.924 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_97_1628157518520/com/google/javascript/rhino/Node_97_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_97_tmp__ESTest extends Node_97_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertEquals(30, Node.VAR_ARGS_NAME);
23:       assertEquals(57, Node.LAST_PROP);
24:       assertEquals(15, Node.NO_SIDE_EFFECTS);
25:       assertEquals(1, Node.DECR_FLAG);
26:       assertEquals(49, Node.DIRECT_EVAL);
27:       assertEquals(32, Node.INCRDECR_PROP);
28:       assertEquals(52, Node.LENGTH);
29:       assertEquals(57, Node.REFLECTED_OBJECT);
30:       assertEquals(46, Node.IS_NAMESPACE);
31:       assertEquals(54, Node.SLASH_V);
32:       assertEquals(51, Node.STATIC_SOURCE_FILE);
33:       assertEquals(50, Node.FREE_CALL);
34:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(40, Node.ORIGINALNAME_PROP);
37:       assertEquals(29, Node.JSDOC_INFO_PROP);
38:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
39:       assertEquals(39, Node.EMPTY_BLOCK);
40:       assertEquals(2, Node.POST_FLAG);
41:       assertEquals(43, Node.IS_CONSTANT_NAME);
42:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
43:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
44:       assertEquals(53, Node.INPUT_ID);
45:       assertEquals(55, Node.INFERRED_FUNCTION);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
49:       assertEquals(56, Node.CHANGE_TIME);
50:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
51:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
52:       assertEquals(37, Node.OPT_ARG_NAME);
53:       assertEquals(48, Node.DIRECTIVES);
54:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
55:       assertEquals(12, Node.COLUMN_BITS);
56:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
57:       assertEquals(4095, Node.COLUMN_MASK);
58:       assertFalse(node0.isDefaultCase());
59:       assertFalse(node0.isRegExp());
60:       assertFalse(node0.isVoid());
61:       assertFalse(node0.isTry());
62:       assertFalse(node0.isTrue());
63:       assertFalse(node0.isDebugger());
64:       assertFalse(node0.isEmpty());
65:       assertFalse(node0.isParamList());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isArrayLit());
68:       assertEquals(0, node0.getChildCount());
69:       assertFalse(node0.isVar());
70:       assertFalse(node0.isFunction());
71:       assertFalse(node0.isWhile());
72:       assertFalse(node0.isString());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isDo());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isOr());
77:       assertEquals((-1), node0.getSourcePosition());
78:       assertFalse(node0.isBreak());
79:       assertFalse(node0.isDec());
80:       assertFalse(node0.hasChildren());
81:       assertFalse(node0.isTypeOf());
82:       assertFalse(node0.isNull());
83:       assertFalse(node0.isDelProp());
84:       assertFalse(node0.isGetProp());
85:       assertFalse(node0.isGetElem());
86:       assertFalse(node0.isCall());
87:       assertFalse(node0.isName());
88:       assertTrue(node0.isNumber());
89:       assertFalse(node0.isReturn());
90:       assertFalse(node0.isComma());
91:       assertFalse(node0.isAssign());
92:       assertFalse(node0.isScript());
93:       assertFalse(node0.isWith());
94:       assertFalse(node0.isExprResult());
95:       assertFalse(node0.isAnd());
96:       assertFalse(node0.isObjectLit());
97:       assertFalse(node0.isNot());
98:       assertFalse(node0.isLabelName());
99:       assertFalse(node0.isCast());
100:       assertFalse(node0.isAssignAdd());
101:       assertFalse(node0.isContinue());
102:       assertFalse(node0.isThrow());
103:       assertFalse(node0.isFalse());
104:       assertFalse(node0.isLabel());
105:       assertFalse(node0.isSwitch());
106:       assertFalse(node0.isInc());
107:       assertFalse(node0.isCase());
108:       assertFalse(node0.isIn());
109:       assertFalse(node0.isStringKey());
110:       assertEquals((-1), node0.getCharno());
111:       assertFalse(node0.isIf());
112:       assertFalse(node0.isGetterDef());
113:       assertFalse(node0.isNE());
114:       assertEquals((-1), node0.getLineno());
115:       assertFalse(node0.isInstanceOf());
116:       assertFalse(node0.isHook());
117:       assertFalse(node0.hasOneChild());
118:       assertFalse(node0.isCatch());
119:       assertFalse(node0.hasMoreThanOneChild());
120:       assertFalse(node0.isBlock());
121:       assertFalse(node0.isFor());
122:       assertFalse(node0.isThis());
123:       assertEquals(39, node0.getType());
124:       assertNotNull(node0);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertEquals(30, Node.VAR_ARGS_NAME);
128:       assertEquals(57, Node.LAST_PROP);
129:       assertEquals(15, Node.NO_SIDE_EFFECTS);
130:       assertEquals(1, Node.DECR_FLAG);
131:       assertEquals(49, Node.DIRECT_EVAL);
132:       assertEquals(32, Node.INCRDECR_PROP);
133:       assertEquals(52, Node.LENGTH);
134:       assertEquals(57, Node.REFLECTED_OBJECT);
135:       assertEquals(46, Node.IS_NAMESPACE);
136:       assertEquals(54, Node.SLASH_V);
137:       assertEquals(51, Node.STATIC_SOURCE_FILE);
138:       assertEquals(50, Node.FREE_CALL);
139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(40, Node.ORIGINALNAME_PROP);
142:       assertEquals(29, Node.JSDOC_INFO_PROP);
143:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
144:       assertEquals(39, Node.EMPTY_BLOCK);
145:       assertEquals(2, Node.POST_FLAG);
146:       assertEquals(43, Node.IS_CONSTANT_NAME);
147:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(53, Node.INPUT_ID);
150:       assertEquals(55, Node.INFERRED_FUNCTION);
151:       assertEquals(8, Node.FLAG_NO_THROWS);
152:       assertEquals(36, Node.QUOTED_PROP);
153:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
154:       assertEquals(56, Node.CHANGE_TIME);
155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
157:       assertEquals(37, Node.OPT_ARG_NAME);
158:       assertEquals(48, Node.DIRECTIVES);
159:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
160:       assertEquals(12, Node.COLUMN_BITS);
161:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
162:       assertEquals(4095, Node.COLUMN_MASK);
163:       assertFalse(iterable0.contains(node0));
164:       assertFalse(node0.isDefaultCase());
165:       assertFalse(node0.isRegExp());
166:       assertFalse(node0.isVoid());
167:       assertFalse(node0.isTry());
168:       assertFalse(node0.isTrue());
169:       assertFalse(node0.isDebugger());
170:       assertFalse(node0.isEmpty());
171:       assertFalse(node0.isParamList());
172:       assertFalse(node0.isSetterDef());
173:       assertFalse(node0.isArrayLit());
174:       assertEquals(0, node0.getChildCount());
175:       assertFalse(node0.isVar());
176:       assertFalse(node0.isFunction());
177:       assertFalse(node0.isWhile());
178:       assertFalse(node0.isString());
179:       assertFalse(node0.isAdd());
180:       assertFalse(node0.isDo());
181:       assertFalse(node0.isNew());
182:       assertFalse(node0.isOr());
183:       assertEquals((-1), node0.getSourcePosition());
184:       assertFalse(node0.isBreak());
185:       assertFalse(node0.isDec());
186:       assertFalse(node0.hasChildren());
187:       assertFalse(node0.isTypeOf());
188:       assertFalse(node0.isNull());
189:       assertFalse(node0.isDelProp());
190:       assertFalse(node0.isGetProp());
191:       assertFalse(node0.isGetElem());
192:       assertFalse(node0.isCall());
193:       assertFalse(node0.isName());
194:       assertTrue(node0.isNumber());
195:       assertFalse(node0.isReturn());
196:       assertFalse(node0.isComma());
197:       assertFalse(node0.isAssign());
198:       assertFalse(node0.isScript());
199:       assertFalse(node0.isWith());
200:       assertFalse(node0.isExprResult());
201:       assertFalse(node0.isAnd());
202:       assertFalse(node0.isObjectLit());
203:       assertFalse(node0.isNot());
204:       assertFalse(node0.isLabelName());
205:       assertFalse(node0.isCast());
206:       assertFalse(node0.isAssignAdd());
207:       assertFalse(node0.isContinue());
208:       assertFalse(node0.isThrow());
209:       assertFalse(node0.isFalse());
210:       assertFalse(node0.isLabel());
211:       assertFalse(node0.isSwitch());
212:       assertFalse(node0.isInc());
213:       assertFalse(node0.isCase());
214:       assertFalse(node0.isIn());
215:       assertFalse(node0.isStringKey());
216:       assertEquals((-1), node0.getCharno());
217:       assertFalse(node0.isIf());
218:       assertFalse(node0.isGetterDef());
219:       assertFalse(node0.isNE());
220:       assertEquals((-1), node0.getLineno());
221:       assertFalse(node0.isInstanceOf());
222:       assertFalse(node0.isHook());
223:       assertFalse(node0.hasOneChild());
224:       assertFalse(node0.isCatch());
225:       assertFalse(node0.hasMoreThanOneChild());
226:       assertFalse(node0.isBlock());
227:       assertFalse(node0.isFor());
228:       assertFalse(node0.isThis());
229:       assertEquals(39, node0.getType());
230:       assertNotNull(iterable0);
231:       
232:       boolean boolean0 = node0.isDec();
233:       assertEquals(30, Node.VAR_ARGS_NAME);
234:       assertEquals(57, Node.LAST_PROP);
235:       assertEquals(15, Node.NO_SIDE_EFFECTS);
236:       assertEquals(1, Node.DECR_FLAG);
237:       assertEquals(49, Node.DIRECT_EVAL);
238:       assertEquals(32, Node.INCRDECR_PROP);
239:       assertEquals(52, Node.LENGTH);
240:       assertEquals(57, Node.REFLECTED_OBJECT);
241:       assertEquals(46, Node.IS_NAMESPACE);
242:       assertEquals(54, Node.SLASH_V);
243:       assertEquals(51, Node.STATIC_SOURCE_FILE);
244:       assertEquals(50, Node.FREE_CALL);
245:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(40, Node.ORIGINALNAME_PROP);
248:       assertEquals(29, Node.JSDOC_INFO_PROP);
249:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
250:       assertEquals(39, Node.EMPTY_BLOCK);
251:       assertEquals(2, Node.POST_FLAG);
252:       assertEquals(43, Node.IS_CONSTANT_NAME);
253:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
254:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
255:       assertEquals(53, Node.INPUT_ID);
256:       assertEquals(55, Node.INFERRED_FUNCTION);
257:       assertEquals(8, Node.FLAG_NO_THROWS);
258:       assertEquals(36, Node.QUOTED_PROP);
259:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
260:       assertEquals(56, Node.CHANGE_TIME);
261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
262:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
263:       assertEquals(37, Node.OPT_ARG_NAME);
264:       assertEquals(48, Node.DIRECTIVES);
265:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
266:       assertEquals(12, Node.COLUMN_BITS);
267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
268:       assertEquals(4095, Node.COLUMN_MASK);
269:       assertFalse(node0.isDefaultCase());
270:       assertFalse(node0.isRegExp());
271:       assertFalse(node0.isVoid());
272:       assertFalse(node0.isTry());
273:       assertFalse(node0.isTrue());
274:       assertFalse(node0.isDebugger());
275:       assertFalse(node0.isEmpty());
276:       assertFalse(node0.isParamList());
277:       assertFalse(node0.isSetterDef());
278:       assertFalse(node0.isArrayLit());
279:       assertEquals(0, node0.getChildCount());
280:       assertFalse(node0.isVar());
281:       assertFalse(node0.isFunction());
282:       assertFalse(node0.isWhile());
283:       assertFalse(node0.isString());
284:       assertFalse(node0.isAdd());
285:       assertFalse(node0.isDo());
286:       assertFalse(node0.isNew());
287:       assertFalse(node0.isOr());
288:       assertEquals((-1), node0.getSourcePosition());
289:       assertFalse(node0.isBreak());
290:       assertFalse(node0.isDec());
291:       assertFalse(node0.hasChildren());
292:       assertFalse(node0.isTypeOf());
293:       assertFalse(node0.isNull());
294:       assertFalse(node0.isDelProp());
295:       assertFalse(node0.isGetProp());
296:       assertFalse(node0.isGetElem());
297:       assertFalse(node0.isCall());
298:       assertFalse(node0.isName());
299:       assertTrue(node0.isNumber());
300:       assertFalse(node0.isReturn());
301:       assertFalse(node0.isComma());
302:       assertFalse(node0.isAssign());
303:       assertFalse(node0.isScript());
304:       assertFalse(node0.isWith());
305:       assertFalse(node0.isExprResult());
306:       assertFalse(node0.isAnd());
307:       assertFalse(node0.isObjectLit());
308:       assertFalse(node0.isNot());
309:       assertFalse(node0.isLabelName());
310:       assertFalse(node0.isCast());
311:       assertFalse(node0.isAssignAdd());
312:       assertFalse(node0.isContinue());
313:       assertFalse(node0.isThrow());
314:       assertFalse(node0.isFalse());
315:       assertFalse(node0.isLabel());
316:       assertFalse(node0.isSwitch());
317:       assertFalse(node0.isInc());
318:       assertFalse(node0.isCase());
319:       assertFalse(node0.isIn());
320:       assertFalse(node0.isStringKey());
321:       assertEquals((-1), node0.getCharno());
322:       assertFalse(node0.isIf());
323:       assertFalse(node0.isGetterDef());
324:       assertFalse(node0.isNE());
325:       assertEquals((-1), node0.getLineno());
326:       assertFalse(node0.isInstanceOf());
327:       assertFalse(node0.isHook());
328:       assertFalse(node0.hasOneChild());
329:       assertFalse(node0.isCatch());
330:       assertFalse(node0.hasMoreThanOneChild());
331:       assertFalse(node0.isBlock());
332:       assertFalse(node0.isFor());
333:       assertFalse(node0.isThis());
334:       assertEquals(39, node0.getType());
335:       assertFalse(boolean0);
336:       
337:       Node node1 = new Node(15, 0, 48);
338:       assertEquals(29, Node.JSDOC_INFO_PROP);
339:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
340:       assertEquals(47, Node.IS_DISPATCHER);
341:       assertEquals(2, Node.POST_FLAG);
342:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
343:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
344:       assertEquals(32, Node.INCRDECR_PROP);
345:       assertEquals(53, Node.INPUT_ID);
346:       assertEquals(12, Node.COLUMN_BITS);
347:       assertEquals(30, Node.VAR_ARGS_NAME);
348:       assertEquals(1, Node.DECR_FLAG);
349:       assertEquals(46, Node.IS_NAMESPACE);
350:       assertEquals(51, Node.STATIC_SOURCE_FILE);
351:       assertEquals(54, Node.SLASH_V);
352:       assertEquals(43, Node.IS_CONSTANT_NAME);
353:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
354:       assertEquals(50, Node.FREE_CALL);
355:       assertEquals(40, Node.ORIGINALNAME_PROP);
356:       assertEquals(8, Node.FLAG_NO_THROWS);
357:       assertEquals(39, Node.EMPTY_BLOCK);
358:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
359:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
360:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
361:       assertEquals(57, Node.LAST_PROP);
362:       assertEquals(49, Node.DIRECT_EVAL);
363:       assertEquals(15, Node.NO_SIDE_EFFECTS);
364:       assertEquals(36, Node.QUOTED_PROP);
365:       assertEquals(55, Node.INFERRED_FUNCTION);
366:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
367:       assertEquals(4095, Node.COLUMN_MASK);
368:       assertEquals(52, Node.LENGTH);
369:       assertEquals(57, Node.REFLECTED_OBJECT);
370:       assertEquals(37, Node.OPT_ARG_NAME);
371:       assertEquals(48, Node.DIRECTIVES);
372:       assertEquals(56, Node.CHANGE_TIME);
373:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
374:       assertFalse(node1.isBreak());
375:       assertFalse(node1.isThis());
376:       assertFalse(node1.isFalse());
377:       assertFalse(node1.isComma());
378:       assertFalse(node1.isHook());
379:       assertFalse(node1.isThrow());
380:       assertFalse(node1.isGetProp());
381:       assertEquals(48, node1.getSourcePosition());
382:       assertFalse(node1.isString());
383:       assertFalse(node1.isScript());
384:       assertFalse(node1.isNot());
385:       assertFalse(node1.isObjectLit());
386:       assertFalse(node1.isCast());
387:       assertFalse(node1.isAnd());
388:       assertFalse(node1.isSwitch());
389:       assertFalse(node1.isLabelName());
390:       assertFalse(node1.isIf());
391:       assertFalse(node1.isNumber());
392:       assertFalse(node1.isNE());
393:       assertFalse(node1.isFor());
394:       assertFalse(node1.isGetterDef());
395:       assertFalse(node1.isIn());
396:       assertFalse(node1.hasOneChild());
397:       assertFalse(node1.isCase());
398:       assertFalse(node1.isTry());
399:       assertFalse(node1.isInc());
400:       assertFalse(node1.isWith());
401:       assertFalse(node1.hasMoreThanOneChild());
402:       assertFalse(node1.isRegExp());
403:       assertFalse(node1.isInstanceOf());
404:       assertFalse(node1.isCatch());
405:       assertFalse(node1.isSetterDef());
406:       assertFalse(node1.isNull());
407:       assertEquals(0, node1.getChildCount());
408:       assertEquals(15, node1.getType());
409:       assertFalse(node1.isAdd());
410:       assertFalse(node1.isBlock());
411:       assertFalse(node1.isVar());
412:       assertFalse(node1.isNew());
413:       assertFalse(node1.isDefaultCase());
414:       assertFalse(node1.isContinue());
415:       assertFalse(node1.isDebugger());
416:       assertFalse(node1.isFunction());
417:       assertFalse(node1.isArrayLit());
418:       assertEquals(0, node1.getLineno());
419:       assertFalse(node1.isStringKey());
420:       assertFalse(node1.isParamList());
421:       assertFalse(node1.isDec());
422:       assertFalse(node1.hasChildren());
423:       assertEquals(48, node1.getCharno());
424:       assertFalse(node1.isEmpty());
425:       assertFalse(node1.isLabel());
426:       assertFalse(node1.isAssign());
427:       assertFalse(node1.isOr());
428:       assertFalse(node1.isTypeOf());
429:       assertFalse(node1.isReturn());
430:       assertFalse(node1.isDo());
431:       assertFalse(node1.isAssignAdd());
432:       assertFalse(node1.isWhile());
433:       assertFalse(node1.isExprResult());
434:       assertFalse(node1.isTrue());
435:       assertFalse(node1.isCall());
436:       assertFalse(node1.isGetElem());
437:       assertFalse(node1.isVoid());
438:       assertFalse(node1.isName());
439:       assertFalse(node1.isDelProp());
440:       assertNotNull(node1);
441:       assertFalse(node1.equals((Object)node0));
442:       
443:       Node node2 = node0.clonePropsFrom(node1);
444:       assertEquals(30, Node.VAR_ARGS_NAME);
445:       assertEquals(57, Node.LAST_PROP);
446:       assertEquals(15, Node.NO_SIDE_EFFECTS);
447:       assertEquals(1, Node.DECR_FLAG);
448:       assertEquals(49, Node.DIRECT_EVAL);
449:       assertEquals(32, Node.INCRDECR_PROP);
450:       assertEquals(52, Node.LENGTH);
451:       assertEquals(57, Node.REFLECTED_OBJECT);
452:       assertEquals(46, Node.IS_NAMESPACE);
453:       assertEquals(54, Node.SLASH_V);
454:       assertEquals(51, Node.STATIC_SOURCE_FILE);
455:       assertEquals(50, Node.FREE_CALL);
456:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
457:       assertEquals(47, Node.IS_DISPATCHER);
458:       assertEquals(40, Node.ORIGINALNAME_PROP);
459:       assertEquals(29, Node.JSDOC_INFO_PROP);
460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
461:       assertEquals(39, Node.EMPTY_BLOCK);
462:       assertEquals(2, Node.POST_FLAG);
463:       assertEquals(43, Node.IS_CONSTANT_NAME);
464:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
465:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
466:       assertEquals(53, Node.INPUT_ID);
467:       assertEquals(55, Node.INFERRED_FUNCTION);
468:       assertEquals(8, Node.FLAG_NO_THROWS);
469:       assertEquals(36, Node.QUOTED_PROP);
470:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
471:       assertEquals(56, Node.CHANGE_TIME);
472:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
473:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
474:       assertEquals(37, Node.OPT_ARG_NAME);
475:       assertEquals(48, Node.DIRECTIVES);
476:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
477:       assertEquals(12, Node.COLUMN_BITS);
478:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
479:       assertEquals(4095, Node.COLUMN_MASK);
480:       assertEquals(29, Node.JSDOC_INFO_PROP);
481:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
482:       assertEquals(47, Node.IS_DISPATCHER);
483:       assertEquals(2, Node.POST_FLAG);
484:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
485:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
486:       assertEquals(32, Node.INCRDECR_PROP);
487:       assertEquals(53, Node.INPUT_ID);
488:       assertEquals(12, Node.COLUMN_BITS);
489:       assertEquals(30, Node.VAR_ARGS_NAME);
490:       assertEquals(1, Node.DECR_FLAG);
491:       assertEquals(46, Node.IS_NAMESPACE);
492:       assertEquals(51, Node.STATIC_SOURCE_FILE);
493:       assertEquals(54, Node.SLASH_V);
494:       assertEquals(43, Node.IS_CONSTANT_NAME);
495:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
496:       assertEquals(50, Node.FREE_CALL);
497:       assertEquals(40, Node.ORIGINALNAME_PROP);
498:       assertEquals(8, Node.FLAG_NO_THROWS);
499:       assertEquals(39, Node.EMPTY_BLOCK);
500:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
501:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
502:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
503:       assertEquals(57, Node.LAST_PROP);
504:       assertEquals(49, Node.DIRECT_EVAL);
505:       assertEquals(15, Node.NO_SIDE_EFFECTS);
506:       assertEquals(36, Node.QUOTED_PROP);
507:       assertEquals(55, Node.INFERRED_FUNCTION);
508:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
509:       assertEquals(4095, Node.COLUMN_MASK);
510:       assertEquals(52, Node.LENGTH);
511:       assertEquals(57, Node.REFLECTED_OBJECT);
512:       assertEquals(37, Node.OPT_ARG_NAME);
513:       assertEquals(48, Node.DIRECTIVES);
514:       assertEquals(56, Node.CHANGE_TIME);
515:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
516:       assertEquals(29, Node.JSDOC_INFO_PROP);
517:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
518:       assertEquals(56, Node.CHANGE_TIME);
519:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
520:       assertEquals(37, Node.OPT_ARG_NAME);
521:       assertEquals(32, Node.INCRDECR_PROP);
522:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
523:       assertEquals(2, Node.POST_FLAG);
524:       assertEquals(12, Node.COLUMN_BITS);
525:       assertEquals(47, Node.IS_DISPATCHER);
526:       assertEquals(49, Node.DIRECT_EVAL);
527:       assertEquals(57, Node.LAST_PROP);
528:       assertEquals(55, Node.INFERRED_FUNCTION);
529:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
530:       assertEquals(15, Node.NO_SIDE_EFFECTS);
531:       assertEquals(52, Node.LENGTH);
532:       assertEquals(53, Node.INPUT_ID);
533:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
534:       assertEquals(8, Node.FLAG_NO_THROWS);
535:       assertEquals(57, Node.REFLECTED_OBJECT);
536:       assertEquals(36, Node.QUOTED_PROP);
537:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
538:       assertEquals(50, Node.FREE_CALL);
539:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
540:       assertEquals(39, Node.EMPTY_BLOCK);
541:       assertEquals(40, Node.ORIGINALNAME_PROP);
542:       assertEquals(48, Node.DIRECTIVES);
543:       assertEquals(4095, Node.COLUMN_MASK);
544:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
545:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
546:       assertEquals(30, Node.VAR_ARGS_NAME);
547:       assertEquals(43, Node.IS_CONSTANT_NAME);
548:       assertEquals(1, Node.DECR_FLAG);
549:       assertEquals(46, Node.IS_NAMESPACE);
550:       assertEquals(54, Node.SLASH_V);
551:       assertEquals(51, Node.STATIC_SOURCE_FILE);
552:       assertFalse(node0.isDefaultCase());
553:       assertFalse(node0.isRegExp());
554:       assertFalse(node0.isVoid());
555:       assertFalse(node0.isTry());
556:       assertFalse(node0.isTrue());
557:       assertFalse(node0.isDebugger());
558:       assertFalse(node0.isEmpty());
559:       assertFalse(node0.isParamList());
560:       assertFalse(node0.isSetterDef());
561:       assertFalse(node0.isArrayLit());
562:       assertEquals(0, node0.getChildCount());
563:       assertFalse(node0.isVar());
564:       assertFalse(node0.isFunction());
565:       assertFalse(node0.isWhile());
566:       assertFalse(node0.isString());
567:       assertFalse(node0.isAdd());
568:       assertFalse(node0.isDo());
569:       assertFalse(node0.isNew());
570:       assertFalse(node0.isOr());
571:       assertEquals((-1), node0.getSourcePosition());
572:       assertFalse(node0.isBreak());
573:       assertFalse(node0.isDec());
574:       assertFalse(node0.hasChildren());
575:       assertFalse(node0.isTypeOf());
576:       assertFalse(node0.isNull());
577:       assertFalse(node0.isDelProp());
578:       assertFalse(node0.isGetProp());
579:       assertFalse(node0.isGetElem());
580:       assertFalse(node0.isCall());
581:       assertFalse(node0.isName());
582:       assertTrue(node0.isNumber());
583:       assertFalse(node0.isReturn());
584:       assertFalse(node0.isComma());
585:       assertFalse(node0.isAssign());
586:       assertFalse(node0.isScript());
587:       assertFalse(node0.isWith());
588:       assertFalse(node0.isExprResult());
589:       assertFalse(node0.isAnd());
590:       assertFalse(node0.isObjectLit());
591:       assertFalse(node0.isNot());
592:       assertFalse(node0.isLabelName());
593:       assertFalse(node0.isCast());
594:       assertFalse(node0.isAssignAdd());
595:       assertFalse(node0.isContinue());
596:       assertFalse(node0.isThrow());
597:       assertFalse(node0.isFalse());
598:       assertFalse(node0.isLabel());
599:       assertFalse(node0.isSwitch());
600:       assertFalse(node0.isInc());
601:       assertFalse(node0.isCase());
602:       assertFalse(node0.isIn());
603:       assertFalse(node0.isStringKey());
604:       assertEquals((-1), node0.getCharno());
605:       assertFalse(node0.isIf());
606:       assertFalse(node0.isGetterDef());
607:       assertFalse(node0.isNE());
608:       assertEquals((-1), node0.getLineno());
609:       assertFalse(node0.isInstanceOf());
610:       assertFalse(node0.isHook());
611:       assertFalse(node0.hasOneChild());
612:       assertFalse(node0.isCatch());
613:       assertFalse(node0.hasMoreThanOneChild());
614:       assertFalse(node0.isBlock());
615:       assertFalse(node0.isFor());
616:       assertFalse(node0.isThis());
617:       assertEquals(39, node0.getType());
618:       assertFalse(node1.isBreak());
619:       assertFalse(node1.isThis());
620:       assertFalse(node1.isFalse());
621:       assertFalse(node1.isComma());
622:       assertFalse(node1.isHook());
623:       assertFalse(node1.isThrow());
624:       assertFalse(node1.isGetProp());
625:       assertEquals(48, node1.getSourcePosition());
626:       assertFalse(node1.isString());
627:       assertFalse(node1.isScript());
628:       assertFalse(node1.isNot());
629:       assertFalse(node1.isObjectLit());
630:       assertFalse(node1.isCast());
631:       assertFalse(node1.isAnd());
632:       assertFalse(node1.isSwitch());
633:       assertFalse(node1.isLabelName());
634:       assertFalse(node1.isIf());
635:       assertFalse(node1.isNumber());
636:       assertFalse(node1.isNE());
637:       assertFalse(node1.isFor());
638:       assertFalse(node1.isGetterDef());
639:       assertFalse(node1.isIn());
640:       assertFalse(node1.hasOneChild());
641:       assertFalse(node1.isCase());
642:       assertFalse(node1.isTry());
643:       assertFalse(node1.isInc());
644:       assertFalse(node1.isWith());
645:       assertFalse(node1.hasMoreThanOneChild());
646:       assertFalse(node1.isRegExp());
647:       assertFalse(node1.isInstanceOf());
648:       assertFalse(node1.isCatch());
649:       assertFalse(node1.isSetterDef());
650:       assertFalse(node1.isNull());
651:       assertEquals(0, node1.getChildCount());
652:       assertEquals(15, node1.getType());
653:       assertFalse(node1.isAdd());
654:       assertFalse(node1.isBlock());
655:       assertFalse(node1.isVar());
656:       assertFalse(node1.isNew());
657:       assertFalse(node1.isDefaultCase());
658:       assertFalse(node1.isContinue());
659:       assertFalse(node1.isDebugger());
660:       assertFalse(node1.isFunction());
661:       assertFalse(node1.isArrayLit());
662:       assertEquals(0, node1.getLineno());
663:       assertFalse(node1.isStringKey());
664:       assertFalse(node1.isParamList());
665:       assertFalse(node1.isDec());
666:       assertFalse(node1.hasChildren());
667:       assertEquals(48, node1.getCharno());
668:       assertFalse(node1.isEmpty());
669:       assertFalse(node1.isLabel());
670:       assertFalse(node1.isAssign());
671:       assertFalse(node1.isOr());
672:       assertFalse(node1.isTypeOf());
673:       assertFalse(node1.isReturn());
674:       assertFalse(node1.isDo());
675:       assertFalse(node1.isAssignAdd());
676:       assertFalse(node1.isWhile());
677:       assertFalse(node1.isExprResult());
678:       assertFalse(node1.isTrue());
679:       assertFalse(node1.isCall());
680:       assertFalse(node1.isGetElem());
681:       assertFalse(node1.isVoid());
682:       assertFalse(node1.isName());
683:       assertFalse(node1.isDelProp());
684:       assertFalse(node2.isBreak());
685:       assertFalse(node2.isFalse());
686:       assertFalse(node2.isGetProp());
687:       assertFalse(node2.isInstanceOf());
688:       assertFalse(node2.isThrow());
689:       assertFalse(node2.isComma());
690:       assertFalse(node2.isThis());
691:       assertFalse(node2.isHook());
692:       assertFalse(node2.isWith());
693:       assertFalse(node2.isExprResult());
694:       assertFalse(node2.isInc());
695:       assertFalse(node2.isIn());
696:       assertFalse(node2.isNE());
697:       assertFalse(node2.hasChildren());
698:       assertFalse(node2.isDelProp());
699:       assertEquals((-1), node2.getSourcePosition());
700:       assertFalse(node2.isDec());
701:       assertFalse(node2.isAssign());
702:       assertFalse(node2.isTypeOf());
703:       assertFalse(node2.isCast());
704:       assertFalse(node2.isGetElem());
705:       assertTrue(node2.isNumber());
706:       assertFalse(node2.isReturn());
707:       assertFalse(node2.isWhile());
708:       assertFalse(node2.isString());
709:       assertFalse(node2.isNot());
710:       assertFalse(node2.isFunction());
711:       assertFalse(node2.isContinue());
712:       assertFalse(node2.isAnd());
713:       assertFalse(node2.isDebugger());
714:       assertFalse(node2.isObjectLit());
715:       assertFalse(node2.isName());
716:       assertFalse(node2.isCall());
717:       assertFalse(node2.isSetterDef());
718:       assertEquals(0, node2.getChildCount());
719:       assertFalse(node2.isVar());
720:       assertFalse(node2.isBlock());
721:       assertFalse(node2.isRegExp());
722:       assertFalse(node2.isDo());
723:       assertFalse(node2.isDefaultCase());
724:       assertFalse(node2.isVoid());
725:       assertFalse(node2.isCatch());
726:       assertFalse(node2.isNew());
727:       assertFalse(node2.isAdd());
728:       assertEquals((-1), node2.getLineno());
729:       assertFalse(node2.isOr());
730:       assertFalse(node2.isNull());
731:       assertFalse(node2.isTrue());
732:       assertFalse(node2.isIf());
733:       assertFalse(node2.isGetterDef());
734:       assertFalse(node2.isLabelName());
735:       assertFalse(node2.isEmpty());
736:       assertFalse(node2.isArrayLit());
737:       assertFalse(node2.hasOneChild());
738:       assertFalse(node2.isTry());
739:       assertFalse(node2.isAssignAdd());
740:       assertFalse(node2.hasMoreThanOneChild());
741:       assertEquals(39, node2.getType());
742:       assertFalse(node2.isLabel());
743:       assertFalse(node2.isFor());
744:       assertFalse(node2.isSwitch());
745:       assertFalse(node2.isCase());
746:       assertFalse(node2.isScript());
747:       assertEquals((-1), node2.getCharno());
748:       assertFalse(node2.isStringKey());
749:       assertFalse(node2.isParamList());
750:       assertSame(node0, node2);
751:       assertSame(node2, node0);
752:       assertNotNull(node2);
753:       assertFalse(node0.equals((Object)node1));
754:       assertFalse(node1.equals((Object)node0));
755:       assertFalse(node2.equals((Object)node1));
756:       
757:       node1.removeProp(2126);
758:       assertEquals(29, Node.JSDOC_INFO_PROP);
759:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
760:       assertEquals(47, Node.IS_DISPATCHER);
761:       assertEquals(2, Node.POST_FLAG);
762:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
763:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
764:       assertEquals(32, Node.INCRDECR_PROP);
765:       assertEquals(53, Node.INPUT_ID);
766:       assertEquals(12, Node.COLUMN_BITS);
767:       assertEquals(30, Node.VAR_ARGS_NAME);
768:       assertEquals(1, Node.DECR_FLAG);
769:       assertEquals(46, Node.IS_NAMESPACE);
770:       assertEquals(51, Node.STATIC_SOURCE_FILE);
771:       assertEquals(54, Node.SLASH_V);
772:       assertEquals(43, Node.IS_CONSTANT_NAME);
773:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
774:       assertEquals(50, Node.FREE_CALL);
775:       assertEquals(40, Node.ORIGINALNAME_PROP);
776:       assertEquals(8, Node.FLAG_NO_THROWS);
777:       assertEquals(39, Node.EMPTY_BLOCK);
778:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
779:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
780:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
781:       assertEquals(57, Node.LAST_PROP);
782:       assertEquals(49, Node.DIRECT_EVAL);
783:       assertEquals(15, Node.NO_SIDE_EFFECTS);
784:       assertEquals(36, Node.QUOTED_PROP);
785:       assertEquals(55, Node.INFERRED_FUNCTION);
786:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
787:       assertEquals(4095, Node.COLUMN_MASK);
788:       assertEquals(52, Node.LENGTH);
789:       assertEquals(57, Node.REFLECTED_OBJECT);
790:       assertEquals(37, Node.OPT_ARG_NAME);
791:       assertEquals(48, Node.DIRECTIVES);
792:       assertEquals(56, Node.CHANGE_TIME);
793:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
794:       assertFalse(node1.isBreak());
795:       assertFalse(node1.isThis());
796:       assertFalse(node1.isFalse());
797:       assertFalse(node1.isComma());
798:       assertFalse(node1.isHook());
799:       assertFalse(node1.isThrow());
800:       assertFalse(node1.isGetProp());
801:       assertEquals(48, node1.getSourcePosition());
802:       assertFalse(node1.isString());
803:       assertFalse(node1.isScript());
804:       assertFalse(node1.isNot());
805:       assertFalse(node1.isObjectLit());
806:       assertFalse(node1.isCast());
807:       assertFalse(node1.isAnd());
808:       assertFalse(node1.isSwitch());
809:       assertFalse(node1.isLabelName());
810:       assertFalse(node1.isIf());
811:       assertFalse(node1.isNumber());
812:       assertFalse(node1.isNE());
813:       assertFalse(node1.isFor());
814:       assertFalse(node1.isGetterDef());
815:       assertFalse(node1.isIn());
816:       assertFalse(node1.hasOneChild());
817:       assertFalse(node1.isCase());
818:       assertFalse(node1.isTry());
819:       assertFalse(node1.isInc());
820:       assertFalse(node1.isWith());
821:       assertFalse(node1.hasMoreThanOneChild());
822:       assertFalse(node1.isRegExp());
823:       assertFalse(node1.isInstanceOf());
824:       assertFalse(node1.isCatch());
825:       assertFalse(node1.isSetterDef());
826:       assertFalse(node1.isNull());
827:       assertEquals(0, node1.getChildCount());
828:       assertEquals(15, node1.getType());
829:       assertFalse(node1.isAdd());
830:       assertFalse(node1.isBlock());
831:       assertFalse(node1.isVar());
832:       assertFalse(node1.isNew());
833:       assertFalse(node1.isDefaultCase());
834:       assertFalse(node1.isContinue());
835:       assertFalse(node1.isDebugger());
836:       assertFalse(node1.isFunction());
837:       assertFalse(node1.isArrayLit());
838:       assertEquals(0, node1.getLineno());
839:       assertFalse(node1.isStringKey());
840:       assertFalse(node1.isParamList());
841:       assertFalse(node1.isDec());
842:       assertFalse(node1.hasChildren());
843:       assertEquals(48, node1.getCharno());
844:       assertFalse(node1.isEmpty());
845:       assertFalse(node1.isLabel());
846:       assertFalse(node1.isAssign());
847:       assertFalse(node1.isOr());
848:       assertFalse(node1.isTypeOf());
849:       assertFalse(node1.isReturn());
850:       assertFalse(node1.isDo());
851:       assertFalse(node1.isAssignAdd());
852:       assertFalse(node1.isWhile());
853:       assertFalse(node1.isExprResult());
854:       assertFalse(node1.isTrue());
855:       assertFalse(node1.isCall());
856:       assertFalse(node1.isGetElem());
857:       assertFalse(node1.isVoid());
858:       assertFalse(node1.isName());
859:       assertFalse(node1.isDelProp());
860:       assertFalse(node1.equals((Object)node0));
861:       assertFalse(node1.equals((Object)node2));
862:       
863:       Node node3 = Node.newString(57, "com.google.javascript.rhino.Node$AncestorIterable$1", 2361, 52);
864:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
865:       assertEquals(55, Node.INFERRED_FUNCTION);
866:       assertEquals(43, Node.IS_CONSTANT_NAME);
867:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
868:       assertEquals(36, Node.QUOTED_PROP);
869:       assertEquals(53, Node.INPUT_ID);
870:       assertEquals(39, Node.EMPTY_BLOCK);
871:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
872:       assertEquals(50, Node.FREE_CALL);
873:       assertEquals(8, Node.FLAG_NO_THROWS);
874:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
875:       assertEquals(57, Node.REFLECTED_OBJECT);
876:       assertEquals(56, Node.CHANGE_TIME);
877:       assertEquals(37, Node.OPT_ARG_NAME);
878:       assertEquals(48, Node.DIRECTIVES);
879:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
880:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
881:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
882:       assertEquals(4095, Node.COLUMN_MASK);
883:       assertEquals(1, Node.DECR_FLAG);
884:       assertEquals(12, Node.COLUMN_BITS);
885:       assertEquals(32, Node.INCRDECR_PROP);
886:       assertEquals(46, Node.IS_NAMESPACE);
887:       assertEquals(49, Node.DIRECT_EVAL);
888:       assertEquals(57, Node.LAST_PROP);
889:       assertEquals(54, Node.SLASH_V);
890:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
891:       assertEquals(15, Node.NO_SIDE_EFFECTS);
892:       assertEquals(51, Node.STATIC_SOURCE_FILE);
893:       assertEquals(52, Node.LENGTH);
894:       assertEquals(40, Node.ORIGINALNAME_PROP);
895:       assertEquals(29, Node.JSDOC_INFO_PROP);
896:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
897:       assertEquals(47, Node.IS_DISPATCHER);
898:       assertEquals(30, Node.VAR_ARGS_NAME);
899:       assertEquals(2, Node.POST_FLAG);
900:       assertFalse(node3.isCase());
901:       assertFalse(node3.isString());
902:       assertFalse(node3.isSwitch());
903:       assertFalse(node3.isInc());
904:       assertFalse(node3.isNE());
905:       assertFalse(node3.isIn());
906:       assertFalse(node3.isGetterDef());
907:       assertFalse(node3.isFor());
908:       assertFalse(node3.isBreak());
909:       assertFalse(node3.isIf());
910:       assertFalse(node3.isDelProp());
911:       assertFalse(node3.isTry());
912:       assertFalse(node3.isThis());
913:       assertFalse(node3.isInstanceOf());
914:       assertFalse(node3.isRegExp());
915:       assertFalse(node3.isHook());
916:       assertFalse(node3.isComma());
917:       assertFalse(node3.isWith());
918:       assertFalse(node3.isAnd());
919:       assertFalse(node3.isCatch());
920:       assertFalse(node3.isGetProp());
921:       assertFalse(node3.isDebugger());
922:       assertFalse(node3.isObjectLit());
923:       assertFalse(node3.isNot());
924:       assertFalse(node3.isFalse());
925:       assertFalse(node3.isCast());
926:       assertFalse(node3.isThrow());
927:       assertEquals(57, node3.getType());
928:       assertFalse(node3.isSetterDef());
929:       assertFalse(node3.isFunction());
930:       assertEquals(9670708, node3.getSourcePosition());
931:       assertEquals(2361, node3.getLineno());
932:       assertFalse(node3.isContinue());
933:       assertFalse(node3.isWhile());
934:       assertFalse(node3.isDo());
935:       assertFalse(node3.isAdd());
936:       assertFalse(node3.isNew());
937:       assertFalse(node3.isNumber());
938:       assertFalse(node3.isOr());
939:       assertFalse(node3.isGetElem());
940:       assertFalse(node3.isName());
941:       assertFalse(node3.isCall());
942:       assertFalse(node3.hasOneChild());
943:       assertFalse(node3.isBlock());
944:       assertFalse(node3.isExprResult());
945:       assertFalse(node3.isReturn());
946:       assertFalse(node3.isTypeOf());
947:       assertFalse(node3.hasChildren());
948:       assertFalse(node3.hasMoreThanOneChild());
949:       assertFalse(node3.isAssign());
950:       assertFalse(node3.isDec());
951:       assertFalse(node3.isScript());
952:       assertFalse(node3.isDefaultCase());
953:       assertFalse(node3.isVoid());
954:       assertFalse(node3.isTrue());
955:       assertFalse(node3.isParamList());
956:       assertFalse(node3.isNull());
957:       assertFalse(node3.isEmpty());
958:       assertFalse(node3.isVar());
959:       assertFalse(node3.isStringKey());
960:       assertFalse(node3.isArrayLit());
961:       assertEquals(52, node3.getCharno());
962:       assertFalse(node3.isLabelName());
963:       assertFalse(node3.isLabel());
964:       assertFalse(node3.isAssignAdd());
965:       assertEquals(0, node3.getChildCount());
966:       assertNotNull(node3);
967:       assertFalse(node3.equals((Object)node0));
968:       assertFalse(node3.equals((Object)node1));
969:       assertFalse(node3.equals((Object)node2));
970:       
971:       Node node4 = node3.removeFirstChild();
972:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
973:       assertEquals(55, Node.INFERRED_FUNCTION);
974:       assertEquals(43, Node.IS_CONSTANT_NAME);
975:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
976:       assertEquals(36, Node.QUOTED_PROP);
977:       assertEquals(53, Node.INPUT_ID);
978:       assertEquals(39, Node.EMPTY_BLOCK);
979:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
980:       assertEquals(50, Node.FREE_CALL);
981:       assertEquals(8, Node.FLAG_NO_THROWS);
982:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
983:       assertEquals(57, Node.REFLECTED_OBJECT);
984:       assertEquals(56, Node.CHANGE_TIME);
985:       assertEquals(37, Node.OPT_ARG_NAME);
986:       assertEquals(48, Node.DIRECTIVES);
987:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
988:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
989:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
990:       assertEquals(4095, Node.COLUMN_MASK);
991:       assertEquals(1, Node.DECR_FLAG);
992:       assertEquals(12, Node.COLUMN_BITS);
993:       assertEquals(32, Node.INCRDECR_PROP);
994:       assertEquals(46, Node.IS_NAMESPACE);
995:       assertEquals(49, Node.DIRECT_EVAL);
996:       assertEquals(57, Node.LAST_PROP);
997:       assertEquals(54, Node.SLASH_V);
998:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
999:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1000:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1001:       assertEquals(52, Node.LENGTH);
1002:       assertEquals(40, Node.ORIGINALNAME_PROP);
1003:       assertEquals(29, Node.JSDOC_INFO_PROP);
1004:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1005:       assertEquals(47, Node.IS_DISPATCHER);
1006:       assertEquals(30, Node.VAR_ARGS_NAME);
1007:       assertEquals(2, Node.POST_FLAG);
1008:       assertFalse(node3.isCase());
1009:       assertFalse(node3.isString());
1010:       assertFalse(node3.isSwitch());
1011:       assertFalse(node3.isInc());
1012:       assertFalse(node3.isNE());
1013:       assertFalse(node3.isIn());
1014:       assertFalse(node3.isGetterDef());
1015:       assertFalse(node3.isFor());
1016:       assertFalse(node3.isBreak());
1017:       assertFalse(node3.isIf());
1018:       assertFalse(node3.isDelProp());
1019:       assertFalse(node3.isTry());
1020:       assertFalse(node3.isThis());
1021:       assertFalse(node3.isInstanceOf());
1022:       assertFalse(node3.isRegExp());
1023:       assertFalse(node3.isHook());
1024:       assertFalse(node3.isComma());
1025:       assertFalse(node3.isWith());
1026:       assertFalse(node3.isAnd());
1027:       assertFalse(node3.isCatch());
1028:       assertFalse(node3.isGetProp());
1029:       assertFalse(node3.isDebugger());
1030:       assertFalse(node3.isObjectLit());
1031:       assertFalse(node3.isNot());
1032:       assertFalse(node3.isFalse());
1033:       assertFalse(node3.isCast());
1034:       assertFalse(node3.isThrow());
1035:       assertEquals(57, node3.getType());
1036:       assertFalse(node3.isSetterDef());
1037:       assertFalse(node3.isFunction());
1038:       assertEquals(9670708, node3.getSourcePosition());
1039:       assertEquals(2361, node3.getLineno());
1040:       assertFalse(node3.isContinue());
1041:       assertFalse(node3.isWhile());
1042:       assertFalse(node3.isDo());
1043:       assertFalse(node3.isAdd());
1044:       assertFalse(node3.isNew());
1045:       assertFalse(node3.isNumber());
1046:       assertFalse(node3.isOr());
1047:       assertFalse(node3.isGetElem());
1048:       assertFalse(node3.isName());
1049:       assertFalse(node3.isCall());
1050:       assertFalse(node3.hasOneChild());
1051:       assertFalse(node3.isBlock());
1052:       assertFalse(node3.isExprResult());
1053:       assertFalse(node3.isReturn());
1054:       assertFalse(node3.isTypeOf());
1055:       assertFalse(node3.hasChildren());
1056:       assertFalse(node3.hasMoreThanOneChild());
1057:       assertFalse(node3.isAssign());
1058:       assertFalse(node3.isDec());
1059:       assertFalse(node3.isScript());
1060:       assertFalse(node3.isDefaultCase());
1061:       assertFalse(node3.isVoid());
1062:       assertFalse(node3.isTrue());
1063:       assertFalse(node3.isParamList());
1064:       assertFalse(node3.isNull());
1065:       assertFalse(node3.isEmpty());
1066:       assertFalse(node3.isVar());
1067:       assertFalse(node3.isStringKey());
1068:       assertFalse(node3.isArrayLit());
1069:       assertEquals(52, node3.getCharno());
1070:       assertFalse(node3.isLabelName());
1071:       assertFalse(node3.isLabel());
1072:       assertFalse(node3.isAssignAdd());
1073:       assertEquals(0, node3.getChildCount());
1074:       assertNull(node4);
1075:       assertFalse(node3.equals((Object)node0));
1076:       assertFalse(node3.equals((Object)node1));
1077:       assertFalse(node3.equals((Object)node2));
1078:       
1079:       Node node5 = Node.newNumber((double) 1);
1080:       assertEquals(29, Node.JSDOC_INFO_PROP);
1081:       assertEquals(53, Node.INPUT_ID);
1082:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1083:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1084:       assertEquals(2, Node.POST_FLAG);
1085:       assertEquals(47, Node.IS_DISPATCHER);
1086:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1087:       assertEquals(32, Node.INCRDECR_PROP);
1088:       assertEquals(55, Node.INFERRED_FUNCTION);
1089:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1090:       assertEquals(12, Node.COLUMN_BITS);
1091:       assertEquals(4095, Node.COLUMN_MASK);
1092:       assertEquals(8, Node.FLAG_NO_THROWS);
1093:       assertEquals(48, Node.DIRECTIVES);
1094:       assertEquals(37, Node.OPT_ARG_NAME);
1095:       assertEquals(36, Node.QUOTED_PROP);
1096:       assertEquals(49, Node.DIRECT_EVAL);
1097:       assertEquals(56, Node.CHANGE_TIME);
1098:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1099:       assertEquals(40, Node.ORIGINALNAME_PROP);
1100:       assertEquals(57, Node.REFLECTED_OBJECT);
1101:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1102:       assertEquals(52, Node.LENGTH);
1103:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1104:       assertEquals(50, Node.FREE_CALL);
1105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1106:       assertEquals(39, Node.EMPTY_BLOCK);
1107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1108:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1109:       assertEquals(57, Node.LAST_PROP);
1110:       assertEquals(1, Node.DECR_FLAG);
1111:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1112:       assertEquals(30, Node.VAR_ARGS_NAME);
1113:       assertEquals(54, Node.SLASH_V);
1114:       assertEquals(46, Node.IS_NAMESPACE);
1115:       assertEquals(43, Node.IS_CONSTANT_NAME);
1116:       assertFalse(node5.isThrow());
1117:       assertFalse(node5.isHook());
1118:       assertFalse(node5.isFalse());
1119:       assertFalse(node5.isGetProp());
1120:       assertFalse(node5.isComma());
1121:       assertFalse(node5.isThis());
1122:       assertFalse(node5.isInc());
1123:       assertFalse(node5.isIn());
1124:       assertFalse(node5.isInstanceOf());
1125:       assertFalse(node5.isWith());
1126:       assertFalse(node5.isNE());
1127:       assertFalse(node5.isExprResult());
1128:       assertFalse(node5.isBreak());
1129:       assertFalse(node5.isIf());
1130:       assertFalse(node5.isDelProp());
1131:       assertFalse(node5.isCast());
1132:       assertFalse(node5.isGetElem());
1133:       assertFalse(node5.hasChildren());
1134:       assertEquals((-1), node5.getSourcePosition());
1135:       assertFalse(node5.isDec());
1136:       assertFalse(node5.isAssign());
1137:       assertFalse(node5.isTypeOf());
1138:       assertFalse(node5.isReturn());
1139:       assertTrue(node5.isNumber());
1140:       assertFalse(node5.isAnd());
1141:       assertFalse(node5.isContinue());
1142:       assertFalse(node5.isString());
1143:       assertFalse(node5.isNot());
1144:       assertFalse(node5.isObjectLit());
1145:       assertFalse(node5.isFunction());
1146:       assertFalse(node5.isDebugger());
1147:       assertFalse(node5.isStringKey());
1148:       assertFalse(node5.isVar());
1149:       assertFalse(node5.isCall());
1150:       assertFalse(node5.isNew());
1151:       assertFalse(node5.isAdd());
1152:       assertFalse(node5.isSetterDef());
1153:       assertFalse(node5.isBlock());
1154:       assertFalse(node5.isWhile());
1155:       assertFalse(node5.isDo());
1156:       assertFalse(node5.isCatch());
1157:       assertEquals(39, node5.getType());
1158:       assertFalse(node5.isOr());
1159:       assertFalse(node5.hasMoreThanOneChild());
1160:       assertFalse(node5.isRegExp());
1161:       assertFalse(node5.isVoid());
1162:       assertFalse(node5.isNull());
1163:       assertFalse(node5.isTrue());
1164:       assertEquals((-1), node5.getLineno());
1165:       assertFalse(node5.isName());
1166:       assertFalse(node5.isEmpty());
1167:       assertFalse(node5.isFor());
1168:       assertFalse(node5.isArrayLit());
1169:       assertFalse(node5.isGetterDef());
1170:       assertFalse(node5.isScript());
1171:       assertFalse(node5.isLabel());
1172:       assertFalse(node5.isDefaultCase());
1173:       assertFalse(node5.hasOneChild());
1174:       assertFalse(node5.isTry());
1175:       assertFalse(node5.isAssignAdd());
1176:       assertFalse(node5.isCase());
1177:       assertEquals(0, node5.getChildCount());
1178:       assertEquals((-1), node5.getCharno());
1179:       assertFalse(node5.isParamList());
1180:       assertFalse(node5.isSwitch());
1181:       assertFalse(node5.isLabelName());
1182:       assertNotSame(node5, node0);
1183:       assertNotSame(node5, node2);
1184:       assertNotNull(node5);
1185:       assertFalse(node5.equals((Object)node0));
1186:       assertFalse(node5.equals((Object)node2));
1187:       assertFalse(node5.equals((Object)node3));
1188:       assertFalse(node5.equals((Object)node1));
1189:       
1190:       boolean boolean1 = node2.isGetProp();
1191:       assertEquals(30, Node.VAR_ARGS_NAME);
1192:       assertEquals(57, Node.LAST_PROP);
1193:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1194:       assertEquals(1, Node.DECR_FLAG);
1195:       assertEquals(49, Node.DIRECT_EVAL);
1196:       assertEquals(32, Node.INCRDECR_PROP);
1197:       assertEquals(52, Node.LENGTH);
1198:       assertEquals(57, Node.REFLECTED_OBJECT);
1199:       assertEquals(46, Node.IS_NAMESPACE);
1200:       assertEquals(54, Node.SLASH_V);
1201:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1202:       assertEquals(50, Node.FREE_CALL);
1203:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1204:       assertEquals(47, Node.IS_DISPATCHER);
1205:       assertEquals(40, Node.ORIGINALNAME_PROP);
1206:       assertEquals(29, Node.JSDOC_INFO_PROP);
1207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1208:       assertEquals(39, Node.EMPTY_BLOCK);
1209:       assertEquals(2, Node.POST_FLAG);
1210:       assertEquals(43, Node.IS_CONSTANT_NAME);
1211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1213:       assertEquals(53, Node.INPUT_ID);
1214:       assertEquals(55, Node.INFERRED_FUNCTION);
1215:       assertEquals(8, Node.FLAG_NO_THROWS);
1216:       assertEquals(36, Node.QUOTED_PROP);
1217:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1218:       assertEquals(56, Node.CHANGE_TIME);
1219:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1220:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1221:       assertEquals(37, Node.OPT_ARG_NAME);
1222:       assertEquals(48, Node.DIRECTIVES);
1223:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1224:       assertEquals(12, Node.COLUMN_BITS);
1225:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1226:       assertEquals(4095, Node.COLUMN_MASK);
1227:       assertEquals(29, Node.JSDOC_INFO_PROP);
1228:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1229:       assertEquals(47, Node.IS_DISPATCHER);
1230:       assertEquals(2, Node.POST_FLAG);
1231:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1232:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1233:       assertEquals(32, Node.INCRDECR_PROP);
1234:       assertEquals(53, Node.INPUT_ID);
1235:       assertEquals(12, Node.COLUMN_BITS);
1236:       assertEquals(30, Node.VAR_ARGS_NAME);
1237:       assertEquals(1, Node.DECR_FLAG);
1238:       assertEquals(46, Node.IS_NAMESPACE);
1239:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1240:       assertEquals(54, Node.SLASH_V);
1241:       assertEquals(43, Node.IS_CONSTANT_NAME);
1242:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1243:       assertEquals(50, Node.FREE_CALL);
1244:       assertEquals(40, Node.ORIGINALNAME_PROP);
1245:       assertEquals(8, Node.FLAG_NO_THROWS);
1246:       assertEquals(39, Node.EMPTY_BLOCK);
1247:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1248:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1249:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1250:       assertEquals(57, Node.LAST_PROP);
1251:       assertEquals(49, Node.DIRECT_EVAL);
1252:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1253:       assertEquals(36, Node.QUOTED_PROP);
1254:       assertEquals(55, Node.INFERRED_FUNCTION);
1255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1256:       assertEquals(4095, Node.COLUMN_MASK);
1257:       assertEquals(52, Node.LENGTH);
1258:       assertEquals(57, Node.REFLECTED_OBJECT);
1259:       assertEquals(37, Node.OPT_ARG_NAME);
1260:       assertEquals(48, Node.DIRECTIVES);
1261:       assertEquals(56, Node.CHANGE_TIME);
1262:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1263:       assertEquals(29, Node.JSDOC_INFO_PROP);
1264:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1265:       assertEquals(56, Node.CHANGE_TIME);
1266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1267:       assertEquals(37, Node.OPT_ARG_NAME);
1268:       assertEquals(32, Node.INCRDECR_PROP);
1269:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1270:       assertEquals(2, Node.POST_FLAG);
1271:       assertEquals(12, Node.COLUMN_BITS);
1272:       assertEquals(47, Node.IS_DISPATCHER);
1273:       assertEquals(49, Node.DIRECT_EVAL);
1274:       assertEquals(57, Node.LAST_PROP);
1275:       assertEquals(55, Node.INFERRED_FUNCTION);
1276:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1277:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1278:       assertEquals(52, Node.LENGTH);
1279:       assertEquals(53, Node.INPUT_ID);
1280:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1281:       assertEquals(8, Node.FLAG_NO_THROWS);
1282:       assertEquals(57, Node.REFLECTED_OBJECT);
1283:       assertEquals(36, Node.QUOTED_PROP);
1284:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1285:       assertEquals(50, Node.FREE_CALL);
1286:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1287:       assertEquals(39, Node.EMPTY_BLOCK);
1288:       assertEquals(40, Node.ORIGINALNAME_PROP);
1289:       assertEquals(48, Node.DIRECTIVES);
1290:       assertEquals(4095, Node.COLUMN_MASK);
1291:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1292:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1293:       assertEquals(30, Node.VAR_ARGS_NAME);
1294:       assertEquals(43, Node.IS_CONSTANT_NAME);
1295:       assertEquals(1, Node.DECR_FLAG);
1296:       assertEquals(46, Node.IS_NAMESPACE);
1297:       assertEquals(54, Node.SLASH_V);
1298:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1299:       assertFalse(node0.isDefaultCase());
1300:       assertFalse(node0.isRegExp());
1301:       assertFalse(node0.isVoid());
1302:       assertFalse(node0.isTry());
1303:       assertFalse(node0.isTrue());
1304:       assertFalse(node0.isDebugger());
1305:       assertFalse(node0.isEmpty());
1306:       assertFalse(node0.isParamList());
1307:       assertFalse(node0.isSetterDef());
1308:       assertFalse(node0.isArrayLit());
1309:       assertEquals(0, node0.getChildCount());
1310:       assertFalse(node0.isVar());
1311:       assertFalse(node0.isFunction());
1312:       assertFalse(node0.isWhile());
1313:       assertFalse(node0.isString());
1314:       assertFalse(node0.isAdd());
1315:       assertFalse(node0.isDo());
1316:       assertFalse(node0.isNew());
1317:       assertFalse(node0.isOr());
1318:       assertEquals((-1), node0.getSourcePosition());
1319:       assertFalse(node0.isBreak());
1320:       assertFalse(node0.isDec());
1321:       assertFalse(node0.hasChildren());
1322:       assertFalse(node0.isTypeOf());
1323:       assertFalse(node0.isNull());
1324:       assertFalse(node0.isDelProp());
1325:       assertFalse(node0.isGetProp());
1326:       assertFalse(node0.isGetElem());
1327:       assertFalse(node0.isCall());
1328:       assertFalse(node0.isName());
1329:       assertTrue(node0.isNumber());
1330:       assertFalse(node0.isReturn());
1331:       assertFalse(node0.isComma());
1332:       assertFalse(node0.isAssign());
1333:       assertFalse(node0.isScript());
1334:       assertFalse(node0.isWith());
1335:       assertFalse(node0.isExprResult());
1336:       assertFalse(node0.isAnd());
1337:       assertFalse(node0.isObjectLit());
1338:       assertFalse(node0.isNot());
1339:       assertFalse(node0.isLabelName());
1340:       assertFalse(node0.isCast());
1341:       assertFalse(node0.isAssignAdd());
1342:       assertFalse(node0.isContinue());
1343:       assertFalse(node0.isThrow());
1344:       assertFalse(node0.isFalse());
1345:       assertFalse(node0.isLabel());
1346:       assertFalse(node0.isSwitch());
1347:       assertFalse(node0.isInc());
1348:       assertFalse(node0.isCase());
1349:       assertFalse(node0.isIn());
1350:       assertFalse(node0.isStringKey());
1351:       assertEquals((-1), node0.getCharno());
1352:       assertFalse(node0.isIf());
1353:       assertFalse(node0.isGetterDef());
1354:       assertFalse(node0.isNE());
1355:       assertEquals((-1), node0.getLineno());
1356:       assertFalse(node0.isInstanceOf());
1357:       assertFalse(node0.isHook());
1358:       assertFalse(node0.hasOneChild());
1359:       assertFalse(node0.isCatch());
1360:       assertFalse(node0.hasMoreThanOneChild());
1361:       assertFalse(node0.isBlock());
1362:       assertFalse(node0.isFor());
1363:       assertFalse(node0.isThis());
1364:       assertEquals(39, node0.getType());
1365:       assertFalse(node1.isBreak());
1366:       assertFalse(node1.isThis());
1367:       assertFalse(node1.isFalse());
1368:       assertFalse(node1.isComma());
1369:       assertFalse(node1.isHook());
1370:       assertFalse(node1.isThrow());
1371:       assertFalse(node1.isGetProp());
1372:       assertEquals(48, node1.getSourcePosition());
1373:       assertFalse(node1.isString());
1374:       assertFalse(node1.isScript());
1375:       assertFalse(node1.isNot());
1376:       assertFalse(node1.isObjectLit());
1377:       assertFalse(node1.isCast());
1378:       assertFalse(node1.isAnd());
1379:       assertFalse(node1.isSwitch());
1380:       assertFalse(node1.isLabelName());
1381:       assertFalse(node1.isIf());
1382:       assertFalse(node1.isNumber());
1383:       assertFalse(node1.isNE());
1384:       assertFalse(node1.isFor());
1385:       assertFalse(node1.isGetterDef());
1386:       assertFalse(node1.isIn());
1387:       assertFalse(node1.hasOneChild());
1388:       assertFalse(node1.isCase());
1389:       assertFalse(node1.isTry());
1390:       assertFalse(node1.isInc());
1391:       assertFalse(node1.isWith());
1392:       assertFalse(node1.hasMoreThanOneChild());
1393:       assertFalse(node1.isRegExp());
1394:       assertFalse(node1.isInstanceOf());
1395:       assertFalse(node1.isCatch());
1396:       assertFalse(node1.isSetterDef());
1397:       assertFalse(node1.isNull());
1398:       assertEquals(0, node1.getChildCount());
1399:       assertEquals(15, node1.getType());
1400:       assertFalse(node1.isAdd());
1401:       assertFalse(node1.isBlock());
1402:       assertFalse(node1.isVar());
1403:       assertFalse(node1.isNew());
1404:       assertFalse(node1.isDefaultCase());
1405:       assertFalse(node1.isContinue());
1406:       assertFalse(node1.isDebugger());
1407:       assertFalse(node1.isFunction());
1408:       assertFalse(node1.isArrayLit());
1409:       assertEquals(0, node1.getLineno());
1410:       assertFalse(node1.isStringKey());
1411:       assertFalse(node1.isParamList());
1412:       assertFalse(node1.isDec());
1413:       assertFalse(node1.hasChildren());
1414:       assertEquals(48, node1.getCharno());
1415:       assertFalse(node1.isEmpty());
1416:       assertFalse(node1.isLabel());
1417:       assertFalse(node1.isAssign());
1418:       assertFalse(node1.isOr());
1419:       assertFalse(node1.isTypeOf());
1420:       assertFalse(node1.isReturn());
1421:       assertFalse(node1.isDo());
1422:       assertFalse(node1.isAssignAdd());
1423:       assertFalse(node1.isWhile());
1424:       assertFalse(node1.isExprResult());
1425:       assertFalse(node1.isTrue());
1426:       assertFalse(node1.isCall());
1427:       assertFalse(node1.isGetElem());
1428:       assertFalse(node1.isVoid());
1429:       assertFalse(node1.isName());
1430:       assertFalse(node1.isDelProp());
1431:       assertFalse(node2.isBreak());
1432:       assertFalse(node2.isFalse());
1433:       assertFalse(node2.isGetProp());
1434:       assertFalse(node2.isInstanceOf());
1435:       assertFalse(node2.isThrow());
1436:       assertFalse(node2.isComma());
1437:       assertFalse(node2.isThis());
1438:       assertFalse(node2.isHook());
1439:       assertFalse(node2.isWith());
1440:       assertFalse(node2.isExprResult());
1441:       assertFalse(node2.isInc());
1442:       assertFalse(node2.isIn());
1443:       assertFalse(node2.isNE());
1444:       assertFalse(node2.hasChildren());
1445:       assertFalse(node2.isDelProp());
1446:       assertEquals((-1), node2.getSourcePosition());
1447:       assertFalse(node2.isDec());
1448:       assertFalse(node2.isAssign());
1449:       assertFalse(node2.isTypeOf());
1450:       assertFalse(node2.isCast());
1451:       assertFalse(node2.isGetElem());
1452:       assertTrue(node2.isNumber());
1453:       assertFalse(node2.isReturn());
1454:       assertFalse(node2.isWhile());
1455:       assertFalse(node2.isString());
1456:       assertFalse(node2.isNot());
1457:       assertFalse(node2.isFunction());
1458:       assertFalse(node2.isContinue());
1459:       assertFalse(node2.isAnd());
1460:       assertFalse(node2.isDebugger());
1461:       assertFalse(node2.isObjectLit());
1462:       assertFalse(node2.isName());
1463:       assertFalse(node2.isCall());
1464:       assertFalse(node2.isSetterDef());
1465:       assertEquals(0, node2.getChildCount());
1466:       assertFalse(node2.isVar());
1467:       assertFalse(node2.isBlock());
1468:       assertFalse(node2.isRegExp());
1469:       assertFalse(node2.isDo());
1470:       assertFalse(node2.isDefaultCase());
1471:       assertFalse(node2.isVoid());
1472:       assertFalse(node2.isCatch());
1473:       assertFalse(node2.isNew());
1474:       assertFalse(node2.isAdd());
1475:       assertEquals((-1), node2.getLineno());
1476:       assertFalse(node2.isOr());
1477:       assertFalse(node2.isNull());
1478:       assertFalse(node2.isTrue());
1479:       assertFalse(node2.isIf());
1480:       assertFalse(node2.isGetterDef());
1481:       assertFalse(node2.isLabelName());
1482:       assertFalse(node2.isEmpty());
1483:       assertFalse(node2.isArrayLit());
1484:       assertFalse(node2.hasOneChild());
1485:       assertFalse(node2.isTry());
1486:       assertFalse(node2.isAssignAdd());
1487:       assertFalse(node2.hasMoreThanOneChild());
1488:       assertEquals(39, node2.getType());
1489:       assertFalse(node2.isLabel());
1490:       assertFalse(node2.isFor());
1491:       assertFalse(node2.isSwitch());
1492:       assertFalse(node2.isCase());
1493:       assertFalse(node2.isScript());
1494:       assertEquals((-1), node2.getCharno());
1495:       assertFalse(node2.isStringKey());
1496:       assertFalse(node2.isParamList());
1497:       assertNotSame(node0, node5);
1498:       assertSame(node0, node2);
1499:       assertNotSame(node2, node5);
1500:       assertSame(node2, node0);
1501:       assertFalse(node0.equals((Object)node5));
1502:       assertFalse(node0.equals((Object)node3));
1503:       assertFalse(node0.equals((Object)node1));
1504:       assertFalse(node1.equals((Object)node5));
1505:       assertFalse(node1.equals((Object)node0));
1506:       assertFalse(node1.equals((Object)node2));
1507:       assertFalse(node1.equals((Object)node3));
1508:       assertFalse(node2.equals((Object)node5));
1509:       assertFalse(node2.equals((Object)node3));
1510:       assertFalse(node2.equals((Object)node1));
1511:       assertTrue(boolean1 == boolean0);
1512:       assertFalse(boolean1);
1513:       
1514:       Object object0 = node2.getProp(46);
1515:       assertEquals(30, Node.VAR_ARGS_NAME);
1516:       assertEquals(57, Node.LAST_PROP);
1517:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1518:       assertEquals(1, Node.DECR_FLAG);
1519:       assertEquals(49, Node.DIRECT_EVAL);
1520:       assertEquals(32, Node.INCRDECR_PROP);
1521:       assertEquals(52, Node.LENGTH);
1522:       assertEquals(57, Node.REFLECTED_OBJECT);
1523:       assertEquals(46, Node.IS_NAMESPACE);
1524:       assertEquals(54, Node.SLASH_V);
1525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1526:       assertEquals(50, Node.FREE_CALL);
1527:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1528:       assertEquals(47, Node.IS_DISPATCHER);
1529:       assertEquals(40, Node.ORIGINALNAME_PROP);
1530:       assertEquals(29, Node.JSDOC_INFO_PROP);
1531:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1532:       assertEquals(39, Node.EMPTY_BLOCK);
1533:       assertEquals(2, Node.POST_FLAG);
1534:       assertEquals(43, Node.IS_CONSTANT_NAME);
1535:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1536:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1537:       assertEquals(53, Node.INPUT_ID);
1538:       assertEquals(55, Node.INFERRED_FUNCTION);
1539:       assertEquals(8, Node.FLAG_NO_THROWS);
1540:       assertEquals(36, Node.QUOTED_PROP);
1541:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1542:       assertEquals(56, Node.CHANGE_TIME);
1543:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1544:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1545:       assertEquals(37, Node.OPT_ARG_NAME);
1546:       assertEquals(48, Node.DIRECTIVES);
1547:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1548:       assertEquals(12, Node.COLUMN_BITS);
1549:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1550:       assertEquals(4095, Node.COLUMN_MASK);
1551:       assertEquals(29, Node.JSDOC_INFO_PROP);
1552:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1553:       assertEquals(47, Node.IS_DISPATCHER);
1554:       assertEquals(2, Node.POST_FLAG);
1555:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1556:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1557:       assertEquals(32, Node.INCRDECR_PROP);
1558:       assertEquals(53, Node.INPUT_ID);
1559:       assertEquals(12, Node.COLUMN_BITS);
1560:       assertEquals(30, Node.VAR_ARGS_NAME);
1561:       assertEquals(1, Node.DECR_FLAG);
1562:       assertEquals(46, Node.IS_NAMESPACE);
1563:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1564:       assertEquals(54, Node.SLASH_V);
1565:       assertEquals(43, Node.IS_CONSTANT_NAME);
1566:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1567:       assertEquals(50, Node.FREE_CALL);
1568:       assertEquals(40, Node.ORIGINALNAME_PROP);
1569:       assertEquals(8, Node.FLAG_NO_THROWS);
1570:       assertEquals(39, Node.EMPTY_BLOCK);
1571:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1572:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1573:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1574:       assertEquals(57, Node.LAST_PROP);
1575:       assertEquals(49, Node.DIRECT_EVAL);
1576:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1577:       assertEquals(36, Node.QUOTED_PROP);
1578:       assertEquals(55, Node.INFERRED_FUNCTION);
1579:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1580:       assertEquals(4095, Node.COLUMN_MASK);
1581:       assertEquals(52, Node.LENGTH);
1582:       assertEquals(57, Node.REFLECTED_OBJECT);
1583:       assertEquals(37, Node.OPT_ARG_NAME);
1584:       assertEquals(48, Node.DIRECTIVES);
1585:       assertEquals(56, Node.CHANGE_TIME);
1586:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1587:       assertEquals(29, Node.JSDOC_INFO_PROP);
1588:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1589:       assertEquals(56, Node.CHANGE_TIME);
1590:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1591:       assertEquals(37, Node.OPT_ARG_NAME);
1592:       assertEquals(32, Node.INCRDECR_PROP);
1593:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1594:       assertEquals(2, Node.POST_FLAG);
1595:       assertEquals(12, Node.COLUMN_BITS);
1596:       assertEquals(47, Node.IS_DISPATCHER);
1597:       assertEquals(49, Node.DIRECT_EVAL);
1598:       assertEquals(57, Node.LAST_PROP);
1599:       assertEquals(55, Node.INFERRED_FUNCTION);
1600:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1601:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1602:       assertEquals(52, Node.LENGTH);
1603:       assertEquals(53, Node.INPUT_ID);
1604:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1605:       assertEquals(8, Node.FLAG_NO_THROWS);
1606:       assertEquals(57, Node.REFLECTED_OBJECT);
1607:       assertEquals(36, Node.QUOTED_PROP);
1608:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1609:       assertEquals(50, Node.FREE_CALL);
1610:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1611:       assertEquals(39, Node.EMPTY_BLOCK);
1612:       assertEquals(40, Node.ORIGINALNAME_PROP);
1613:       assertEquals(48, Node.DIRECTIVES);
1614:       assertEquals(4095, Node.COLUMN_MASK);
1615:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1616:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1617:       assertEquals(30, Node.VAR_ARGS_NAME);
1618:       assertEquals(43, Node.IS_CONSTANT_NAME);
1619:       assertEquals(1, Node.DECR_FLAG);
1620:       assertEquals(46, Node.IS_NAMESPACE);
1621:       assertEquals(54, Node.SLASH_V);
1622:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1623:       assertFalse(node0.isDefaultCase());
1624:       assertFalse(node0.isRegExp());
1625:       assertFalse(node0.isVoid());
1626:       assertFalse(node0.isTry());
1627:       assertFalse(node0.isTrue());
1628:       assertFalse(node0.isDebugger());
1629:       assertFalse(node0.isEmpty());
1630:       assertFalse(node0.isParamList());
1631:       assertFalse(node0.isSetterDef());
1632:       assertFalse(node0.isArrayLit());
1633:       assertEquals(0, node0.getChildCount());
1634:       assertFalse(node0.isVar());
1635:       assertFalse(node0.isFunction());
1636:       assertFalse(node0.isWhile());
1637:       assertFalse(node0.isString());
1638:       assertFalse(node0.isAdd());
1639:       assertFalse(node0.isDo());
1640:       assertFalse(node0.isNew());
1641:       assertFalse(node0.isOr());
1642:       assertEquals((-1), node0.getSourcePosition());
1643:       assertFalse(node0.isBreak());
1644:       assertFalse(node0.isDec());
1645:       assertFalse(node0.hasChildren());
1646:       assertFalse(node0.isTypeOf());
1647:       assertFalse(node0.isNull());
1648:       assertFalse(node0.isDelProp());
1649:       assertFalse(node0.isGetProp());
1650:       assertFalse(node0.isGetElem());
1651:       assertFalse(node0.isCall());
1652:       assertFalse(node0.isName());
1653:       assertTrue(node0.isNumber());
1654:       assertFalse(node0.isReturn());
1655:       assertFalse(node0.isComma());
1656:       assertFalse(node0.isAssign());
1657:       assertFalse(node0.isScript());
1658:       assertFalse(node0.isWith());
1659:       assertFalse(node0.isExprResult());
1660:       assertFalse(node0.isAnd());
1661:       assertFalse(node0.isObjectLit());
1662:       assertFalse(node0.isNot());
1663:       assertFalse(node0.isLabelName());
1664:       assertFalse(node0.isCast());
1665:       assertFalse(node0.isAssignAdd());
1666:       assertFalse(node0.isContinue());
1667:       assertFalse(node0.isThrow());
1668:       assertFalse(node0.isFalse());
1669:       assertFalse(node0.isLabel());
1670:       assertFalse(node0.isSwitch());
1671:       assertFalse(node0.isInc());
1672:       assertFalse(node0.isCase());
1673:       assertFalse(node0.isIn());
1674:       assertFalse(node0.isStringKey());
1675:       assertEquals((-1), node0.getCharno());
1676:       assertFalse(node0.isIf());
1677:       assertFalse(node0.isGetterDef());
1678:       assertFalse(node0.isNE());
1679:       assertEquals((-1), node0.getLineno());
1680:       assertFalse(node0.isInstanceOf());
1681:       assertFalse(node0.isHook());
1682:       assertFalse(node0.hasOneChild());
1683:       assertFalse(node0.isCatch());
1684:       assertFalse(node0.hasMoreThanOneChild());
1685:       assertFalse(node0.isBlock());
1686:       assertFalse(node0.isFor());
1687:       assertFalse(node0.isThis());
1688:       assertEquals(39, node0.getType());
1689:       assertFalse(node1.isBreak());
1690:       assertFalse(node1.isThis());
1691:       assertFalse(node1.isFalse());
1692:       assertFalse(node1.isComma());
1693:       assertFalse(node1.isHook());
1694:       assertFalse(node1.isThrow());
1695:       assertFalse(node1.isGetProp());
1696:       assertEquals(48, node1.getSourcePosition());
1697:       assertFalse(node1.isString());
1698:       assertFalse(node1.isScript());
1699:       assertFalse(node1.isNot());
1700:       assertFalse(node1.isObjectLit());
1701:       assertFalse(node1.isCast());
1702:       assertFalse(node1.isAnd());
1703:       assertFalse(node1.isSwitch());
1704:       assertFalse(node1.isLabelName());
1705:       assertFalse(node1.isIf());
1706:       assertFalse(node1.isNumber());
1707:       assertFalse(node1.isNE());
1708:       assertFalse(node1.isFor());
1709:       assertFalse(node1.isGetterDef());
1710:       assertFalse(node1.isIn());
1711:       assertFalse(node1.hasOneChild());
1712:       assertFalse(node1.isCase());
1713:       assertFalse(node1.isTry());
1714:       assertFalse(node1.isInc());
1715:       assertFalse(node1.isWith());
1716:       assertFalse(node1.hasMoreThanOneChild());
1717:       assertFalse(node1.isRegExp());
1718:       assertFalse(node1.isInstanceOf());
1719:       assertFalse(node1.isCatch());
1720:       assertFalse(node1.isSetterDef());
1721:       assertFalse(node1.isNull());
1722:       assertEquals(0, node1.getChildCount());
1723:       assertEquals(15, node1.getType());
1724:       assertFalse(node1.isAdd());
1725:       assertFalse(node1.isBlock());
1726:       assertFalse(node1.isVar());
1727:       assertFalse(node1.isNew());
1728:       assertFalse(node1.isDefaultCase());
1729:       assertFalse(node1.isContinue());
1730:       assertFalse(node1.isDebugger());
1731:       assertFalse(node1.isFunction());
1732:       assertFalse(node1.isArrayLit());
1733:       assertEquals(0, node1.getLineno());
1734:       assertFalse(node1.isStringKey());
1735:       assertFalse(node1.isParamList());
1736:       assertFalse(node1.isDec());
1737:       assertFalse(node1.hasChildren());
1738:       assertEquals(48, node1.getCharno());
1739:       assertFalse(node1.isEmpty());
1740:       assertFalse(node1.isLabel());
1741:       assertFalse(node1.isAssign());
1742:       assertFalse(node1.isOr());
1743:       assertFalse(node1.isTypeOf());
1744:       assertFalse(node1.isReturn());
1745:       assertFalse(node1.isDo());
1746:       assertFalse(node1.isAssignAdd());
1747:       assertFalse(node1.isWhile());
1748:       assertFalse(node1.isExprResult());
1749:       assertFalse(node1.isTrue());
1750:       assertFalse(node1.isCall());
1751:       assertFalse(node1.isGetElem());
1752:       assertFalse(node1.isVoid());
1753:       assertFalse(node1.isName());
1754:       assertFalse(node1.isDelProp());
1755:       assertFalse(node2.isBreak());
1756:       assertFalse(node2.isFalse());
1757:       assertFalse(node2.isGetProp());
1758:       assertFalse(node2.isInstanceOf());
1759:       assertFalse(node2.isThrow());
1760:       assertFalse(node2.isComma());
1761:       assertFalse(node2.isThis());
1762:       assertFalse(node2.isHook());
1763:       assertFalse(node2.isWith());
1764:       assertFalse(node2.isExprResult());
1765:       assertFalse(node2.isInc());
1766:       assertFalse(node2.isIn());
1767:       assertFalse(node2.isNE());
1768:       assertFalse(node2.hasChildren());
1769:       assertFalse(node2.isDelProp());
1770:       assertEquals((-1), node2.getSourcePosition());
1771:       assertFalse(node2.isDec());
1772:       assertFalse(node2.isAssign());
1773:       assertFalse(node2.isTypeOf());
1774:       assertFalse(node2.isCast());
1775:       assertFalse(node2.isGetElem());
1776:       assertTrue(node2.isNumber());
1777:       assertFalse(node2.isReturn());
1778:       assertFalse(node2.isWhile());
1779:       assertFalse(node2.isString());
1780:       assertFalse(node2.isNot());
1781:       assertFalse(node2.isFunction());
1782:       assertFalse(node2.isContinue());
1783:       assertFalse(node2.isAnd());
1784:       assertFalse(node2.isDebugger());
1785:       assertFalse(node2.isObjectLit());
1786:       assertFalse(node2.isName());
1787:       assertFalse(node2.isCall());
1788:       assertFalse(node2.isSetterDef());
1789:       assertEquals(0, node2.getChildCount());
1790:       assertFalse(node2.isVar());
1791:       assertFalse(node2.isBlock());
1792:       assertFalse(node2.isRegExp());
1793:       assertFalse(node2.isDo());
1794:       assertFalse(node2.isDefaultCase());
1795:       assertFalse(node2.isVoid());
1796:       assertFalse(node2.isCatch());
1797:       assertFalse(node2.isNew());
1798:       assertFalse(node2.isAdd());
1799:       assertEquals((-1), node2.getLineno());
1800:       assertFalse(node2.isOr());
1801:       assertFalse(node2.isNull());
1802:       assertFalse(node2.isTrue());
1803:       assertFalse(node2.isIf());
1804:       assertFalse(node2.isGetterDef());
1805:       assertFalse(node2.isLabelName());
1806:       assertFalse(node2.isEmpty());
1807:       assertFalse(node2.isArrayLit());
1808:       assertFalse(node2.hasOneChild());
1809:       assertFalse(node2.isTry());
1810:       assertFalse(node2.isAssignAdd());
1811:       assertFalse(node2.hasMoreThanOneChild());
1812:       assertEquals(39, node2.getType());
1813:       assertFalse(node2.isLabel());
1814:       assertFalse(node2.isFor());
1815:       assertFalse(node2.isSwitch());
1816:       assertFalse(node2.isCase());
1817:       assertFalse(node2.isScript());
1818:       assertEquals((-1), node2.getCharno());
1819:       assertFalse(node2.isStringKey());
1820:       assertFalse(node2.isParamList());
1821:       assertNotSame(node0, node5);
1822:       assertSame(node0, node2);
1823:       assertNotSame(node2, node5);
1824:       assertSame(node2, node0);
1825:       assertNull(object0);
1826:       assertFalse(node0.equals((Object)node5));
1827:       assertFalse(node0.equals((Object)node3));
1828:       assertFalse(node0.equals((Object)node1));
1829:       assertFalse(node1.equals((Object)node5));
1830:       assertFalse(node1.equals((Object)node0));
1831:       assertFalse(node1.equals((Object)node2));
1832:       assertFalse(node1.equals((Object)node3));
1833:       assertFalse(node2.equals((Object)node5));
1834:       assertFalse(node2.equals((Object)node3));
1835:       assertFalse(node2.equals((Object)node1));
1836:       
1837:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node3);
1838:       assertEquals(29, Node.JSDOC_INFO_PROP);
1839:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1840:       assertEquals(47, Node.IS_DISPATCHER);
1841:       assertEquals(2, Node.POST_FLAG);
1842:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1843:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1844:       assertEquals(32, Node.INCRDECR_PROP);
1845:       assertEquals(53, Node.INPUT_ID);
1846:       assertEquals(12, Node.COLUMN_BITS);
1847:       assertEquals(30, Node.VAR_ARGS_NAME);
1848:       assertEquals(1, Node.DECR_FLAG);
1849:       assertEquals(46, Node.IS_NAMESPACE);
1850:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1851:       assertEquals(54, Node.SLASH_V);
1852:       assertEquals(43, Node.IS_CONSTANT_NAME);
1853:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1854:       assertEquals(50, Node.FREE_CALL);
1855:       assertEquals(40, Node.ORIGINALNAME_PROP);
1856:       assertEquals(8, Node.FLAG_NO_THROWS);
1857:       assertEquals(39, Node.EMPTY_BLOCK);
1858:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1859:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1860:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1861:       assertEquals(57, Node.LAST_PROP);
1862:       assertEquals(49, Node.DIRECT_EVAL);
1863:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1864:       assertEquals(36, Node.QUOTED_PROP);
1865:       assertEquals(55, Node.INFERRED_FUNCTION);
1866:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1867:       assertEquals(4095, Node.COLUMN_MASK);
1868:       assertEquals(52, Node.LENGTH);
1869:       assertEquals(57, Node.REFLECTED_OBJECT);
1870:       assertEquals(37, Node.OPT_ARG_NAME);
1871:       assertEquals(48, Node.DIRECTIVES);
1872:       assertEquals(56, Node.CHANGE_TIME);
1873:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1874:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1875:       assertEquals(55, Node.INFERRED_FUNCTION);
1876:       assertEquals(43, Node.IS_CONSTANT_NAME);
1877:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1878:       assertEquals(36, Node.QUOTED_PROP);
1879:       assertEquals(53, Node.INPUT_ID);
1880:       assertEquals(39, Node.EMPTY_BLOCK);
1881:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1882:       assertEquals(50, Node.FREE_CALL);
1883:       assertEquals(8, Node.FLAG_NO_THROWS);
1884:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1885:       assertEquals(57, Node.REFLECTED_OBJECT);
1886:       assertEquals(56, Node.CHANGE_TIME);
1887:       assertEquals(37, Node.OPT_ARG_NAME);
1888:       assertEquals(48, Node.DIRECTIVES);
1889:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1890:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1891:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1892:       assertEquals(4095, Node.COLUMN_MASK);
1893:       assertEquals(1, Node.DECR_FLAG);
1894:       assertEquals(12, Node.COLUMN_BITS);
1895:       assertEquals(32, Node.INCRDECR_PROP);
1896:       assertEquals(46, Node.IS_NAMESPACE);
1897:       assertEquals(49, Node.DIRECT_EVAL);
1898:       assertEquals(57, Node.LAST_PROP);
1899:       assertEquals(54, Node.SLASH_V);
1900:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1901:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1902:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1903:       assertEquals(52, Node.LENGTH);
1904:       assertEquals(40, Node.ORIGINALNAME_PROP);
1905:       assertEquals(29, Node.JSDOC_INFO_PROP);
1906:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1907:       assertEquals(47, Node.IS_DISPATCHER);
1908:       assertEquals(30, Node.VAR_ARGS_NAME);
1909:       assertEquals(2, Node.POST_FLAG);
1910:       assertFalse(node1.isBreak());
1911:       assertFalse(node1.isThis());
1912:       assertFalse(node1.isFalse());
1913:       assertFalse(node1.isComma());
1914:       assertFalse(node1.isHook());
1915:       assertFalse(node1.isThrow());
1916:       assertFalse(node1.isGetProp());
1917:       assertEquals(48, node1.getSourcePosition());
1918:       assertFalse(node1.isString());
1919:       assertFalse(node1.isScript());
1920:       assertFalse(node1.isNot());
1921:       assertFalse(node1.isObjectLit());
1922:       assertFalse(node1.isCast());
1923:       assertFalse(node1.isAnd());
1924:       assertFalse(node1.isSwitch());
1925:       assertFalse(node1.isLabelName());
1926:       assertFalse(node1.isIf());
1927:       assertFalse(node1.isNumber());
1928:       assertFalse(node1.isNE());
1929:       assertFalse(node1.isFor());
1930:       assertFalse(node1.isGetterDef());
1931:       assertFalse(node1.isIn());
1932:       assertFalse(node1.hasOneChild());
1933:       assertFalse(node1.isCase());
1934:       assertFalse(node1.isTry());
1935:       assertFalse(node1.isInc());
1936:       assertFalse(node1.isWith());
1937:       assertFalse(node1.hasMoreThanOneChild());
1938:       assertFalse(node1.isRegExp());
1939:       assertFalse(node1.isInstanceOf());
1940:       assertFalse(node1.isCatch());
1941:       assertFalse(node1.isSetterDef());
1942:       assertFalse(node1.isNull());
1943:       assertEquals(0, node1.getChildCount());
1944:       assertEquals(15, node1.getType());
1945:       assertFalse(node1.isAdd());
1946:       assertFalse(node1.isBlock());
1947:       assertFalse(node1.isVar());
1948:       assertFalse(node1.isNew());
1949:       assertFalse(node1.isDefaultCase());
1950:       assertFalse(node1.isContinue());
1951:       assertFalse(node1.isDebugger());
1952:       assertFalse(node1.isFunction());
1953:       assertFalse(node1.isArrayLit());
1954:       assertEquals(0, node1.getLineno());
1955:       assertFalse(node1.isStringKey());
1956:       assertFalse(node1.isParamList());
1957:       assertFalse(node1.isDec());
1958:       assertFalse(node1.hasChildren());
1959:       assertEquals(48, node1.getCharno());
1960:       assertFalse(node1.isEmpty());
1961:       assertFalse(node1.isLabel());
1962:       assertFalse(node1.isAssign());
1963:       assertFalse(node1.isOr());
1964:       assertFalse(node1.isTypeOf());
1965:       assertFalse(node1.isReturn());
1966:       assertFalse(node1.isDo());
1967:       assertFalse(node1.isAssignAdd());
1968:       assertFalse(node1.isWhile());
1969:       assertFalse(node1.isExprResult());
1970:       assertFalse(node1.isTrue());
1971:       assertFalse(node1.isCall());
1972:       assertFalse(node1.isGetElem());
1973:       assertFalse(node1.isVoid());
1974:       assertFalse(node1.isName());
1975:       assertFalse(node1.isDelProp());
1976:       assertFalse(node3.isCase());
1977:       assertFalse(node3.isString());
1978:       assertFalse(node3.isSwitch());
1979:       assertFalse(node3.isInc());
1980:       assertFalse(node3.isNE());
1981:       assertFalse(node3.isIn());
1982:       assertFalse(node3.isGetterDef());
1983:       assertFalse(node3.isFor());
1984:       assertFalse(node3.isBreak());
1985:       assertFalse(node3.isIf());
1986:       assertFalse(node3.isDelProp());
1987:       assertFalse(node3.isTry());
1988:       assertFalse(node3.isThis());
1989:       assertFalse(node3.isInstanceOf());
1990:       assertFalse(node3.isRegExp());
1991:       assertFalse(node3.isHook());
1992:       assertFalse(node3.isComma());
1993:       assertFalse(node3.isWith());
1994:       assertFalse(node3.isAnd());
1995:       assertFalse(node3.isCatch());
1996:       assertFalse(node3.isGetProp());
1997:       assertFalse(node3.isDebugger());
1998:       assertFalse(node3.isObjectLit());
1999:       assertFalse(node3.isNot());
2000:       assertFalse(node3.isFalse());
2001:       assertFalse(node3.isCast());
2002:       assertFalse(node3.isThrow());
2003:       assertEquals(57, node3.getType());
2004:       assertFalse(node3.isSetterDef());
2005:       assertFalse(node3.isFunction());
2006:       assertEquals(9670708, node3.getSourcePosition());
2007:       assertEquals(2361, node3.getLineno());
2008:       assertFalse(node3.isContinue());
2009:       assertFalse(node3.isWhile());
2010:       assertFalse(node3.isDo());
2011:       assertFalse(node3.isAdd());
2012:       assertFalse(node3.isNew());
2013:       assertFalse(node3.isNumber());
2014:       assertFalse(node3.isOr());
2015:       assertFalse(node3.isGetElem());
2016:       assertFalse(node3.isName());
2017:       assertFalse(node3.isCall());
2018:       assertFalse(node3.hasOneChild());
2019:       assertFalse(node3.isBlock());
2020:       assertFalse(node3.isExprResult());
2021:       assertFalse(node3.isReturn());
2022:       assertFalse(node3.isTypeOf());
2023:       assertFalse(node3.hasChildren());
2024:       assertFalse(node3.hasMoreThanOneChild());
2025:       assertFalse(node3.isAssign());
2026:       assertFalse(node3.isDec());
2027:       assertFalse(node3.isScript());
2028:       assertFalse(node3.isDefaultCase());
2029:       assertFalse(node3.isVoid());
2030:       assertFalse(node3.isTrue());
2031:       assertFalse(node3.isParamList());
2032:       assertFalse(node3.isNull());
2033:       assertFalse(node3.isEmpty());
2034:       assertFalse(node3.isVar());
2035:       assertFalse(node3.isStringKey());
2036:       assertFalse(node3.isArrayLit());
2037:       assertEquals(52, node3.getCharno());
2038:       assertFalse(node3.isLabelName());
2039:       assertFalse(node3.isLabel());
2040:       assertFalse(node3.isAssignAdd());
2041:       assertEquals(0, node3.getChildCount());
2042:       assertNotNull(node_NodeMismatch0);
2043:       assertFalse(node1.equals((Object)node5));
2044:       assertFalse(node1.equals((Object)node0));
2045:       assertFalse(node1.equals((Object)node2));
2046:       assertFalse(node1.equals((Object)node3));
2047:       assertFalse(node3.equals((Object)node0));
2048:       assertFalse(node3.equals((Object)node5));
2049:       assertFalse(node3.equals((Object)node1));
2050:       assertFalse(node3.equals((Object)node2));
2051:       
2052:       boolean boolean2 = node_NodeMismatch0.equals((Object) null);
2053:       assertEquals(29, Node.JSDOC_INFO_PROP);
2054:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2055:       assertEquals(47, Node.IS_DISPATCHER);
2056:       assertEquals(2, Node.POST_FLAG);
2057:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2058:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2059:       assertEquals(32, Node.INCRDECR_PROP);
2060:       assertEquals(53, Node.INPUT_ID);
2061:       assertEquals(12, Node.COLUMN_BITS);
2062:       assertEquals(30, Node.VAR_ARGS_NAME);
2063:       assertEquals(1, Node.DECR_FLAG);
2064:       assertEquals(46, Node.IS_NAMESPACE);
2065:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2066:       assertEquals(54, Node.SLASH_V);
2067:       assertEquals(43, Node.IS_CONSTANT_NAME);
2068:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2069:       assertEquals(50, Node.FREE_CALL);
2070:       assertEquals(40, Node.ORIGINALNAME_PROP);
2071:       assertEquals(8, Node.FLAG_NO_THROWS);
2072:       assertEquals(39, Node.EMPTY_BLOCK);
2073:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2074:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2075:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2076:       assertEquals(57, Node.LAST_PROP);
2077:       assertEquals(49, Node.DIRECT_EVAL);
2078:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2079:       assertEquals(36, Node.QUOTED_PROP);
2080:       assertEquals(55, Node.INFERRED_FUNCTION);
2081:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2082:       assertEquals(4095, Node.COLUMN_MASK);
2083:       assertEquals(52, Node.LENGTH);
2084:       assertEquals(57, Node.REFLECTED_OBJECT);
2085:       assertEquals(37, Node.OPT_ARG_NAME);
2086:       assertEquals(48, Node.DIRECTIVES);
2087:       assertEquals(56, Node.CHANGE_TIME);
2088:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2089:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2090:       assertEquals(55, Node.INFERRED_FUNCTION);
2091:       assertEquals(43, Node.IS_CONSTANT_NAME);
2092:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2093:       assertEquals(36, Node.QUOTED_PROP);
2094:       assertEquals(53, Node.INPUT_ID);
2095:       assertEquals(39, Node.EMPTY_BLOCK);
2096:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2097:       assertEquals(50, Node.FREE_CALL);
2098:       assertEquals(8, Node.FLAG_NO_THROWS);
2099:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2100:       assertEquals(57, Node.REFLECTED_OBJECT);
2101:       assertEquals(56, Node.CHANGE_TIME);
2102:       assertEquals(37, Node.OPT_ARG_NAME);
2103:       assertEquals(48, Node.DIRECTIVES);
2104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2105:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2107:       assertEquals(4095, Node.COLUMN_MASK);
2108:       assertEquals(1, Node.DECR_FLAG);
2109:       assertEquals(12, Node.COLUMN_BITS);
2110:       assertEquals(32, Node.INCRDECR_PROP);
2111:       assertEquals(46, Node.IS_NAMESPACE);
2112:       assertEquals(49, Node.DIRECT_EVAL);
2113:       assertEquals(57, Node.LAST_PROP);
2114:       assertEquals(54, Node.SLASH_V);
2115:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2116:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2118:       assertEquals(52, Node.LENGTH);
2119:       assertEquals(40, Node.ORIGINALNAME_PROP);
2120:       assertEquals(29, Node.JSDOC_INFO_PROP);
2121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2122:       assertEquals(47, Node.IS_DISPATCHER);
2123:       assertEquals(30, Node.VAR_ARGS_NAME);
2124:       assertEquals(2, Node.POST_FLAG);
2125:       assertFalse(node1.isBreak());
2126:       assertFalse(node1.isThis());
2127:       assertFalse(node1.isFalse());
2128:       assertFalse(node1.isComma());
2129:       assertFalse(node1.isHook());
2130:       assertFalse(node1.isThrow());
2131:       assertFalse(node1.isGetProp());
2132:       assertEquals(48, node1.getSourcePosition());
2133:       assertFalse(node1.isString());
2134:       assertFalse(node1.isScript());
2135:       assertFalse(node1.isNot());
2136:       assertFalse(node1.isObjectLit());
2137:       assertFalse(node1.isCast());
2138:       assertFalse(node1.isAnd());
2139:       assertFalse(node1.isSwitch());
2140:       assertFalse(node1.isLabelName());
2141:       assertFalse(node1.isIf());
2142:       assertFalse(node1.isNumber());
2143:       assertFalse(node1.isNE());
2144:       assertFalse(node1.isFor());
2145:       assertFalse(node1.isGetterDef());
2146:       assertFalse(node1.isIn());
2147:       assertFalse(node1.hasOneChild());
2148:       assertFalse(node1.isCase());
2149:       assertFalse(node1.isTry());
2150:       assertFalse(node1.isInc());
2151:       assertFalse(node1.isWith());
2152:       assertFalse(node1.hasMoreThanOneChild());
2153:       assertFalse(node1.isRegExp());
2154:       assertFalse(node1.isInstanceOf());
2155:       assertFalse(node1.isCatch());
2156:       assertFalse(node1.isSetterDef());
2157:       assertFalse(node1.isNull());
2158:       assertEquals(0, node1.getChildCount());
2159:       assertEquals(15, node1.getType());
2160:       assertFalse(node1.isAdd());
2161:       assertFalse(node1.isBlock());
2162:       assertFalse(node1.isVar());
2163:       assertFalse(node1.isNew());
2164:       assertFalse(node1.isDefaultCase());
2165:       assertFalse(node1.isContinue());
2166:       assertFalse(node1.isDebugger());
2167:       assertFalse(node1.isFunction());
2168:       assertFalse(node1.isArrayLit());
2169:       assertEquals(0, node1.getLineno());
2170:       assertFalse(node1.isStringKey());
2171:       assertFalse(node1.isParamList());
2172:       assertFalse(node1.isDec());
2173:       assertFalse(node1.hasChildren());
2174:       assertEquals(48, node1.getCharno());
2175:       assertFalse(node1.isEmpty());
2176:       assertFalse(node1.isLabel());
2177:       assertFalse(node1.isAssign());
2178:       assertFalse(node1.isOr());
2179:       assertFalse(node1.isTypeOf());
2180:       assertFalse(node1.isReturn());
2181:       assertFalse(node1.isDo());
2182:       assertFalse(node1.isAssignAdd());
2183:       assertFalse(node1.isWhile());
2184:       assertFalse(node1.isExprResult());
2185:       assertFalse(node1.isTrue());
2186:       assertFalse(node1.isCall());
2187:       assertFalse(node1.isGetElem());
2188:       assertFalse(node1.isVoid());
2189:       assertFalse(node1.isName());
2190:       assertFalse(node1.isDelProp());
2191:       assertFalse(node3.isCase());
2192:       assertFalse(node3.isString());
2193:       assertFalse(node3.isSwitch());
2194:       assertFalse(node3.isInc());
2195:       assertFalse(node3.isNE());
2196:       assertFalse(node3.isIn());
2197:       assertFalse(node3.isGetterDef());
2198:       assertFalse(node3.isFor());
2199:       assertFalse(node3.isBreak());
2200:       assertFalse(node3.isIf());
2201:       assertFalse(node3.isDelProp());
2202:       assertFalse(node3.isTry());
2203:       assertFalse(node3.isThis());
2204:       assertFalse(node3.isInstanceOf());
2205:       assertFalse(node3.isRegExp());
2206:       assertFalse(node3.isHook());
2207:       assertFalse(node3.isComma());
2208:       assertFalse(node3.isWith());
2209:       assertFalse(node3.isAnd());
2210:       assertFalse(node3.isCatch());
2211:       assertFalse(node3.isGetProp());
2212:       assertFalse(node3.isDebugger());
2213:       assertFalse(node3.isObjectLit());
2214:       assertFalse(node3.isNot());
2215:       assertFalse(node3.isFalse());
2216:       assertFalse(node3.isCast());
2217:       assertFalse(node3.isThrow());
2218:       assertEquals(57, node3.getType());
2219:       assertFalse(node3.isSetterDef());
2220:       assertFalse(node3.isFunction());
2221:       assertEquals(9670708, node3.getSourcePosition());
2222:       assertEquals(2361, node3.getLineno());
2223:       assertFalse(node3.isContinue());
2224:       assertFalse(node3.isWhile());
2225:       assertFalse(node3.isDo());
2226:       assertFalse(node3.isAdd());
2227:       assertFalse(node3.isNew());
2228:       assertFalse(node3.isNumber());
2229:       assertFalse(node3.isOr());
2230:       assertFalse(node3.isGetElem());
2231:       assertFalse(node3.isName());
2232:       assertFalse(node3.isCall());
2233:       assertFalse(node3.hasOneChild());
2234:       assertFalse(node3.isBlock());
2235:       assertFalse(node3.isExprResult());
2236:       assertFalse(node3.isReturn());
2237:       assertFalse(node3.isTypeOf());
2238:       assertFalse(node3.hasChildren());
2239:       assertFalse(node3.hasMoreThanOneChild());
2240:       assertFalse(node3.isAssign());
2241:       assertFalse(node3.isDec());
2242:       assertFalse(node3.isScript());
2243:       assertFalse(node3.isDefaultCase());
2244:       assertFalse(node3.isVoid());
2245:       assertFalse(node3.isTrue());
2246:       assertFalse(node3.isParamList());
2247:       assertFalse(node3.isNull());
2248:       assertFalse(node3.isEmpty());
2249:       assertFalse(node3.isVar());
2250:       assertFalse(node3.isStringKey());
2251:       assertFalse(node3.isArrayLit());
2252:       assertEquals(52, node3.getCharno());
2253:       assertFalse(node3.isLabelName());
2254:       assertFalse(node3.isLabel());
2255:       assertFalse(node3.isAssignAdd());
2256:       assertEquals(0, node3.getChildCount());
2257:       assertFalse(node1.equals((Object)node5));
2258:       assertFalse(node1.equals((Object)node0));
2259:       assertFalse(node1.equals((Object)node2));
2260:       assertFalse(node1.equals((Object)node3));
2261:       assertFalse(node3.equals((Object)node0));
2262:       assertFalse(node3.equals((Object)node5));
2263:       assertFalse(node3.equals((Object)node1));
2264:       assertFalse(node3.equals((Object)node2));
2265:       assertTrue(boolean2 == boolean1);
2266:       assertTrue(boolean2 == boolean0);
2267:       assertFalse(boolean2);
2268:       
2269:       // Undeclared exception!
2270:       try { 
2271:         node0.appendStringTree((Appendable) null);
2272:         fail("Expecting exception: NullPointerException");
2273:       
2274:       } catch(NullPointerException e) {
2275:          //
2276:          // no message in exception (getMessage() returned null)
2277:          //
2278:          verifyException("com.google.javascript.rhino.Node", e);
2279:       }
2280:   }
2281: }
RegularFileObject[/tmp/EvoSuite_97_1628157518520/com/google/javascript/rhino/Node_97_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_97_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_97_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_97_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:39.054 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertNotNull(iterable0);

boolean boolean0 = node0.isDec();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(boolean0);

Node node1 = new Node(15, 0, 48);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertEquals(15, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(48, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = node0.clonePropsFrom(node1);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertEquals(15, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(48, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertTrue(node2.isNumber());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(39, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isFor());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertSame(node0, node2);
assertSame(node2, node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

node1.removeProp(2126);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertEquals(15, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(48, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

Node node3 = Node.newString(57, "com.google.javascript.rhino.Node$AncestorIterable$1", 2361, 52);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isBreak());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isTry());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertFalse(node3.isComma());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isCatch());
assertFalse(node3.isGetProp());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertEquals(57, node3.getType());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertEquals(9670708, node3.getSourcePosition());
assertEquals(2361, node3.getLineno());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.hasOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isExprResult());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isScript());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isEmpty());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertEquals(52, node3.getCharno());
assertFalse(node3.isLabelName());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertEquals(0, node3.getChildCount());
assertNotNull(node3);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));

Node node4 = node3.removeFirstChild();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isBreak());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isTry());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertFalse(node3.isComma());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isCatch());
assertFalse(node3.isGetProp());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertEquals(57, node3.getType());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertEquals(9670708, node3.getSourcePosition());
assertEquals(2361, node3.getLineno());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.hasOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isExprResult());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isScript());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isEmpty());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertEquals(52, node3.getCharno());
assertFalse(node3.isLabelName());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertEquals(0, node3.getChildCount());
assertNull(node4);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));

Node node5 = Node.newNumber((double) 1);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node5.isThrow());
assertFalse(node5.isHook());
assertFalse(node5.isFalse());
assertFalse(node5.isGetProp());
assertFalse(node5.isComma());
assertFalse(node5.isThis());
assertFalse(node5.isInc());
assertFalse(node5.isIn());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isWith());
assertFalse(node5.isNE());
assertFalse(node5.isExprResult());
assertFalse(node5.isBreak());
assertFalse(node5.isIf());
assertFalse(node5.isDelProp());
assertFalse(node5.isCast());
assertFalse(node5.isGetElem());
assertFalse(node5.hasChildren());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isDec());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertFalse(node5.isReturn());
assertTrue(node5.isNumber());
assertFalse(node5.isAnd());
assertFalse(node5.isContinue());
assertFalse(node5.isString());
assertFalse(node5.isNot());
assertFalse(node5.isObjectLit());
assertFalse(node5.isFunction());
assertFalse(node5.isDebugger());
assertFalse(node5.isStringKey());
assertFalse(node5.isVar());
assertFalse(node5.isCall());
assertFalse(node5.isNew());
assertFalse(node5.isAdd());
assertFalse(node5.isSetterDef());
assertFalse(node5.isBlock());
assertFalse(node5.isWhile());
assertFalse(node5.isDo());
assertFalse(node5.isCatch());
assertEquals(39, node5.getType());
assertFalse(node5.isOr());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isRegExp());
assertFalse(node5.isVoid());
assertFalse(node5.isNull());
assertFalse(node5.isTrue());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isName());
assertFalse(node5.isEmpty());
assertFalse(node5.isFor());
assertFalse(node5.isArrayLit());
assertFalse(node5.isGetterDef());
assertFalse(node5.isScript());
assertFalse(node5.isLabel());
assertFalse(node5.isDefaultCase());
assertFalse(node5.hasOneChild());
assertFalse(node5.isTry());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isCase());
assertEquals(0, node5.getChildCount());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isParamList());
assertFalse(node5.isSwitch());
assertFalse(node5.isLabelName());
assertNotSame(node5, node0);
assertNotSame(node5, node2);
assertNotNull(node5);
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));

boolean boolean1 = node2.isGetProp();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertEquals(15, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(48, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertTrue(node2.isNumber());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(39, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isFor());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertNotSame(node0, node5);
assertSame(node0, node2);
assertNotSame(node2, node5);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

Object object0 = node2.getProp(46);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertEquals(15, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(48, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertTrue(node2.isNumber());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(39, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isFor());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertNotSame(node0, node5);
assertSame(node0, node2);
assertNotSame(node2, node5);
assertSame(node2, node0);
assertNull(object0);
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node3);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertEquals(15, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(48, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isBreak());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isTry());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertFalse(node3.isComma());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isCatch());
assertFalse(node3.isGetProp());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertEquals(57, node3.getType());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertEquals(9670708, node3.getSourcePosition());
assertEquals(2361, node3.getLineno());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.hasOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isExprResult());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isScript());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isEmpty());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertEquals(52, node3.getCharno());
assertFalse(node3.isLabelName());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertEquals(0, node3.getChildCount());
assertNotNull(node_NodeMismatch0);
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));

boolean boolean2 = node_NodeMismatch0.equals((Object) null);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertEquals(15, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(48, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isBreak());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isTry());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertFalse(node3.isComma());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isCatch());
assertFalse(node3.isGetProp());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertEquals(57, node3.getType());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertEquals(9670708, node3.getSourcePosition());
assertEquals(2361, node3.getLineno());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.hasOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isExprResult());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isScript());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isEmpty());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertEquals(52, node3.getCharno());
assertFalse(node3.isLabelName());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertEquals(0, node3.getChildCount());
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

node0.appendStringTree((Appendable) null);

[MASTER] 09:58:39.666 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_100_1628157519303/com/google/javascript/rhino/Node_100_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_100_1628157519303/com/google/javascript/rhino/Node_100_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:39.666 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:39.666 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:39.667 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 163
[MASTER] 09:58:39.668 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_100_1628157519303/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:39 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.Set;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_100_tmp__ESTest extends Node_100_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertEquals(56, Node.CHANGE_TIME);
23:       assertEquals(47, Node.IS_DISPATCHER);
24:       assertEquals(2, Node.POST_FLAG);
25:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
26:       assertEquals(29, Node.JSDOC_INFO_PROP);
27:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
28:       assertEquals(37, Node.OPT_ARG_NAME);
29:       assertEquals(12, Node.COLUMN_BITS);
30:       assertEquals(32, Node.INCRDECR_PROP);
31:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
32:       assertEquals(30, Node.VAR_ARGS_NAME);
33:       assertEquals(43, Node.IS_CONSTANT_NAME);
34:       assertEquals(1, Node.DECR_FLAG);
35:       assertEquals(51, Node.STATIC_SOURCE_FILE);
36:       assertEquals(46, Node.IS_NAMESPACE);
37:       assertEquals(50, Node.FREE_CALL);
38:       assertEquals(54, Node.SLASH_V);
39:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
40:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
41:       assertEquals(8, Node.FLAG_NO_THROWS);
42:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
43:       assertEquals(40, Node.ORIGINALNAME_PROP);
44:       assertEquals(48, Node.DIRECTIVES);
45:       assertEquals(39, Node.EMPTY_BLOCK);
46:       assertEquals(4095, Node.COLUMN_MASK);
47:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
48:       assertEquals(15, Node.NO_SIDE_EFFECTS);
49:       assertEquals(36, Node.QUOTED_PROP);
50:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
51:       assertEquals(57, Node.LAST_PROP);
52:       assertEquals(53, Node.INPUT_ID);
53:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
54:       assertEquals(49, Node.DIRECT_EVAL);
55:       assertEquals(57, Node.REFLECTED_OBJECT);
56:       assertEquals(55, Node.INFERRED_FUNCTION);
57:       assertEquals(52, Node.LENGTH);
58:       assertFalse(node0.isSetterDef());
59:       assertFalse(node0.isParamList());
60:       assertFalse(node0.isCall());
61:       assertFalse(node0.isCatch());
62:       assertFalse(node0.isVar());
63:       assertEquals(0, node0.getChildCount());
64:       assertFalse(node0.isBlock());
65:       assertFalse(node0.isDebugger());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isTry());
68:       assertFalse(node0.isArrayLit());
69:       assertFalse(node0.isStringKey());
70:       assertFalse(node0.isNE());
71:       assertFalse(node0.isIf());
72:       assertFalse(node0.isGetterDef());
73:       assertEquals((-1), node0.getLineno());
74:       assertFalse(node0.isCast());
75:       assertFalse(node0.hasMoreThanOneChild());
76:       assertFalse(node0.isContinue());
77:       assertFalse(node0.hasOneChild());
78:       assertEquals(39, node0.getType());
79:       assertFalse(node0.isFor());
80:       assertFalse(node0.isRegExp());
81:       assertFalse(node0.isWith());
82:       assertFalse(node0.isInc());
83:       assertFalse(node0.isIn());
84:       assertFalse(node0.isComma());
85:       assertFalse(node0.isInstanceOf());
86:       assertFalse(node0.isBreak());
87:       assertFalse(node0.isGetProp());
88:       assertFalse(node0.isFalse());
89:       assertFalse(node0.isThrow());
90:       assertFalse(node0.isHook());
91:       assertFalse(node0.isThis());
92:       assertFalse(node0.isSwitch());
93:       assertEquals((-1), node0.getCharno());
94:       assertFalse(node0.isString());
95:       assertFalse(node0.isCase());
96:       assertFalse(node0.isScript());
97:       assertFalse(node0.isAnd());
98:       assertFalse(node0.isObjectLit());
99:       assertFalse(node0.isNot());
100:       assertEquals((-1), node0.getSourcePosition());
101:       assertFalse(node0.isDec());
102:       assertFalse(node0.isTypeOf());
103:       assertFalse(node0.isDelProp());
104:       assertFalse(node0.isEmpty());
105:       assertFalse(node0.isLabelName());
106:       assertTrue(node0.isNumber());
107:       assertFalse(node0.isGetElem());
108:       assertFalse(node0.isAssign());
109:       assertFalse(node0.isLabel());
110:       assertFalse(node0.isAssignAdd());
111:       assertFalse(node0.isWhile());
112:       assertFalse(node0.hasChildren());
113:       assertFalse(node0.isReturn());
114:       assertFalse(node0.isDefaultCase());
115:       assertFalse(node0.isVoid());
116:       assertFalse(node0.isDo());
117:       assertFalse(node0.isNew());
118:       assertFalse(node0.isExprResult());
119:       assertFalse(node0.isAdd());
120:       assertFalse(node0.isName());
121:       assertFalse(node0.isOr());
122:       assertFalse(node0.isNull());
123:       assertFalse(node0.isTrue());
124:       assertNotNull(node0);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertEquals(56, Node.CHANGE_TIME);
128:       assertEquals(47, Node.IS_DISPATCHER);
129:       assertEquals(2, Node.POST_FLAG);
130:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
131:       assertEquals(29, Node.JSDOC_INFO_PROP);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(37, Node.OPT_ARG_NAME);
134:       assertEquals(12, Node.COLUMN_BITS);
135:       assertEquals(32, Node.INCRDECR_PROP);
136:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
137:       assertEquals(30, Node.VAR_ARGS_NAME);
138:       assertEquals(43, Node.IS_CONSTANT_NAME);
139:       assertEquals(1, Node.DECR_FLAG);
140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
141:       assertEquals(46, Node.IS_NAMESPACE);
142:       assertEquals(50, Node.FREE_CALL);
143:       assertEquals(54, Node.SLASH_V);
144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
146:       assertEquals(8, Node.FLAG_NO_THROWS);
147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
148:       assertEquals(40, Node.ORIGINALNAME_PROP);
149:       assertEquals(48, Node.DIRECTIVES);
150:       assertEquals(39, Node.EMPTY_BLOCK);
151:       assertEquals(4095, Node.COLUMN_MASK);
152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
153:       assertEquals(15, Node.NO_SIDE_EFFECTS);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
156:       assertEquals(57, Node.LAST_PROP);
157:       assertEquals(53, Node.INPUT_ID);
158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
159:       assertEquals(49, Node.DIRECT_EVAL);
160:       assertEquals(57, Node.REFLECTED_OBJECT);
161:       assertEquals(55, Node.INFERRED_FUNCTION);
162:       assertEquals(52, Node.LENGTH);
163:       assertFalse(iterable0.contains(node0));
164:       assertFalse(node0.isSetterDef());
165:       assertFalse(node0.isParamList());
166:       assertFalse(node0.isCall());
167:       assertFalse(node0.isCatch());
168:       assertFalse(node0.isVar());
169:       assertEquals(0, node0.getChildCount());
170:       assertFalse(node0.isBlock());
171:       assertFalse(node0.isDebugger());
172:       assertFalse(node0.isFunction());
173:       assertFalse(node0.isTry());
174:       assertFalse(node0.isArrayLit());
175:       assertFalse(node0.isStringKey());
176:       assertFalse(node0.isNE());
177:       assertFalse(node0.isIf());
178:       assertFalse(node0.isGetterDef());
179:       assertEquals((-1), node0.getLineno());
180:       assertFalse(node0.isCast());
181:       assertFalse(node0.hasMoreThanOneChild());
182:       assertFalse(node0.isContinue());
183:       assertFalse(node0.hasOneChild());
184:       assertEquals(39, node0.getType());
185:       assertFalse(node0.isFor());
186:       assertFalse(node0.isRegExp());
187:       assertFalse(node0.isWith());
188:       assertFalse(node0.isInc());
189:       assertFalse(node0.isIn());
190:       assertFalse(node0.isComma());
191:       assertFalse(node0.isInstanceOf());
192:       assertFalse(node0.isBreak());
193:       assertFalse(node0.isGetProp());
194:       assertFalse(node0.isFalse());
195:       assertFalse(node0.isThrow());
196:       assertFalse(node0.isHook());
197:       assertFalse(node0.isThis());
198:       assertFalse(node0.isSwitch());
199:       assertEquals((-1), node0.getCharno());
200:       assertFalse(node0.isString());
201:       assertFalse(node0.isCase());
202:       assertFalse(node0.isScript());
203:       assertFalse(node0.isAnd());
204:       assertFalse(node0.isObjectLit());
205:       assertFalse(node0.isNot());
206:       assertEquals((-1), node0.getSourcePosition());
207:       assertFalse(node0.isDec());
208:       assertFalse(node0.isTypeOf());
209:       assertFalse(node0.isDelProp());
210:       assertFalse(node0.isEmpty());
211:       assertFalse(node0.isLabelName());
212:       assertTrue(node0.isNumber());
213:       assertFalse(node0.isGetElem());
214:       assertFalse(node0.isAssign());
215:       assertFalse(node0.isLabel());
216:       assertFalse(node0.isAssignAdd());
217:       assertFalse(node0.isWhile());
218:       assertFalse(node0.hasChildren());
219:       assertFalse(node0.isReturn());
220:       assertFalse(node0.isDefaultCase());
221:       assertFalse(node0.isVoid());
222:       assertFalse(node0.isDo());
223:       assertFalse(node0.isNew());
224:       assertFalse(node0.isExprResult());
225:       assertFalse(node0.isAdd());
226:       assertFalse(node0.isName());
227:       assertFalse(node0.isOr());
228:       assertFalse(node0.isNull());
229:       assertFalse(node0.isTrue());
230:       assertNotNull(iterable0);
231:       
232:       boolean boolean0 = node0.isDec();
233:       assertEquals(56, Node.CHANGE_TIME);
234:       assertEquals(47, Node.IS_DISPATCHER);
235:       assertEquals(2, Node.POST_FLAG);
236:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
237:       assertEquals(29, Node.JSDOC_INFO_PROP);
238:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
239:       assertEquals(37, Node.OPT_ARG_NAME);
240:       assertEquals(12, Node.COLUMN_BITS);
241:       assertEquals(32, Node.INCRDECR_PROP);
242:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
243:       assertEquals(30, Node.VAR_ARGS_NAME);
244:       assertEquals(43, Node.IS_CONSTANT_NAME);
245:       assertEquals(1, Node.DECR_FLAG);
246:       assertEquals(51, Node.STATIC_SOURCE_FILE);
247:       assertEquals(46, Node.IS_NAMESPACE);
248:       assertEquals(50, Node.FREE_CALL);
249:       assertEquals(54, Node.SLASH_V);
250:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
251:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
252:       assertEquals(8, Node.FLAG_NO_THROWS);
253:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
254:       assertEquals(40, Node.ORIGINALNAME_PROP);
255:       assertEquals(48, Node.DIRECTIVES);
256:       assertEquals(39, Node.EMPTY_BLOCK);
257:       assertEquals(4095, Node.COLUMN_MASK);
258:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
259:       assertEquals(15, Node.NO_SIDE_EFFECTS);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
262:       assertEquals(57, Node.LAST_PROP);
263:       assertEquals(53, Node.INPUT_ID);
264:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
265:       assertEquals(49, Node.DIRECT_EVAL);
266:       assertEquals(57, Node.REFLECTED_OBJECT);
267:       assertEquals(55, Node.INFERRED_FUNCTION);
268:       assertEquals(52, Node.LENGTH);
269:       assertFalse(node0.isSetterDef());
270:       assertFalse(node0.isParamList());
271:       assertFalse(node0.isCall());
272:       assertFalse(node0.isCatch());
273:       assertFalse(node0.isVar());
274:       assertEquals(0, node0.getChildCount());
275:       assertFalse(node0.isBlock());
276:       assertFalse(node0.isDebugger());
277:       assertFalse(node0.isFunction());
278:       assertFalse(node0.isTry());
279:       assertFalse(node0.isArrayLit());
280:       assertFalse(node0.isStringKey());
281:       assertFalse(node0.isNE());
282:       assertFalse(node0.isIf());
283:       assertFalse(node0.isGetterDef());
284:       assertEquals((-1), node0.getLineno());
285:       assertFalse(node0.isCast());
286:       assertFalse(node0.hasMoreThanOneChild());
287:       assertFalse(node0.isContinue());
288:       assertFalse(node0.hasOneChild());
289:       assertEquals(39, node0.getType());
290:       assertFalse(node0.isFor());
291:       assertFalse(node0.isRegExp());
292:       assertFalse(node0.isWith());
293:       assertFalse(node0.isInc());
294:       assertFalse(node0.isIn());
295:       assertFalse(node0.isComma());
296:       assertFalse(node0.isInstanceOf());
297:       assertFalse(node0.isBreak());
298:       assertFalse(node0.isGetProp());
299:       assertFalse(node0.isFalse());
300:       assertFalse(node0.isThrow());
301:       assertFalse(node0.isHook());
302:       assertFalse(node0.isThis());
303:       assertFalse(node0.isSwitch());
304:       assertEquals((-1), node0.getCharno());
305:       assertFalse(node0.isString());
306:       assertFalse(node0.isCase());
307:       assertFalse(node0.isScript());
308:       assertFalse(node0.isAnd());
309:       assertFalse(node0.isObjectLit());
310:       assertFalse(node0.isNot());
311:       assertEquals((-1), node0.getSourcePosition());
312:       assertFalse(node0.isDec());
313:       assertFalse(node0.isTypeOf());
314:       assertFalse(node0.isDelProp());
315:       assertFalse(node0.isEmpty());
316:       assertFalse(node0.isLabelName());
317:       assertTrue(node0.isNumber());
318:       assertFalse(node0.isGetElem());
319:       assertFalse(node0.isAssign());
320:       assertFalse(node0.isLabel());
321:       assertFalse(node0.isAssignAdd());
322:       assertFalse(node0.isWhile());
323:       assertFalse(node0.hasChildren());
324:       assertFalse(node0.isReturn());
325:       assertFalse(node0.isDefaultCase());
326:       assertFalse(node0.isVoid());
327:       assertFalse(node0.isDo());
328:       assertFalse(node0.isNew());
329:       assertFalse(node0.isExprResult());
330:       assertFalse(node0.isAdd());
331:       assertFalse(node0.isName());
332:       assertFalse(node0.isOr());
333:       assertFalse(node0.isNull());
334:       assertFalse(node0.isTrue());
335:       assertFalse(boolean0);
336:       
337:       Node node1 = new Node(15, 0, 48);
338:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
339:       assertEquals(55, Node.INFERRED_FUNCTION);
340:       assertEquals(43, Node.IS_CONSTANT_NAME);
341:       assertEquals(48, Node.DIRECTIVES);
342:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
343:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
344:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
345:       assertEquals(4095, Node.COLUMN_MASK);
346:       assertEquals(57, Node.REFLECTED_OBJECT);
347:       assertEquals(56, Node.CHANGE_TIME);
348:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
349:       assertEquals(36, Node.QUOTED_PROP);
350:       assertEquals(53, Node.INPUT_ID);
351:       assertEquals(15, Node.NO_SIDE_EFFECTS);
352:       assertEquals(39, Node.EMPTY_BLOCK);
353:       assertEquals(29, Node.JSDOC_INFO_PROP);
354:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
355:       assertEquals(52, Node.LENGTH);
356:       assertEquals(8, Node.FLAG_NO_THROWS);
357:       assertEquals(1, Node.DECR_FLAG);
358:       assertEquals(51, Node.STATIC_SOURCE_FILE);
359:       assertEquals(12, Node.COLUMN_BITS);
360:       assertEquals(32, Node.INCRDECR_PROP);
361:       assertEquals(46, Node.IS_NAMESPACE);
362:       assertEquals(49, Node.DIRECT_EVAL);
363:       assertEquals(57, Node.LAST_PROP);
364:       assertEquals(37, Node.OPT_ARG_NAME);
365:       assertEquals(2, Node.POST_FLAG);
366:       assertEquals(47, Node.IS_DISPATCHER);
367:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
368:       assertEquals(30, Node.VAR_ARGS_NAME);
369:       assertEquals(40, Node.ORIGINALNAME_PROP);
370:       assertEquals(54, Node.SLASH_V);
371:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
372:       assertEquals(50, Node.FREE_CALL);
373:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
374:       assertFalse(node1.isCase());
375:       assertFalse(node1.isString());
376:       assertFalse(node1.isSwitch());
377:       assertEquals(48, node1.getCharno());
378:       assertFalse(node1.isHook());
379:       assertFalse(node1.isThrow());
380:       assertFalse(node1.isEmpty());
381:       assertFalse(node1.isBreak());
382:       assertFalse(node1.isIf());
383:       assertFalse(node1.isDelProp());
384:       assertFalse(node1.isInc());
385:       assertFalse(node1.isTrue());
386:       assertFalse(node1.isNE());
387:       assertFalse(node1.isIn());
388:       assertFalse(node1.isAnd());
389:       assertFalse(node1.isVoid());
390:       assertEquals(0, node1.getLineno());
391:       assertFalse(node1.isExprResult());
392:       assertEquals(48, node1.getSourcePosition());
393:       assertFalse(node1.isComma());
394:       assertFalse(node1.isFunction());
395:       assertFalse(node1.isFalse());
396:       assertFalse(node1.isCast());
397:       assertFalse(node1.isGetProp());
398:       assertFalse(node1.isDebugger());
399:       assertFalse(node1.isNot());
400:       assertFalse(node1.isObjectLit());
401:       assertFalse(node1.isContinue());
402:       assertFalse(node1.isWhile());
403:       assertFalse(node1.isDo());
404:       assertFalse(node1.isBlock());
405:       assertFalse(node1.isLabel());
406:       assertFalse(node1.isAssignAdd());
407:       assertFalse(node1.isReturn());
408:       assertFalse(node1.isDec());
409:       assertFalse(node1.isTypeOf());
410:       assertFalse(node1.hasChildren());
411:       assertFalse(node1.hasMoreThanOneChild());
412:       assertFalse(node1.isAssign());
413:       assertFalse(node1.isGetElem());
414:       assertFalse(node1.isName());
415:       assertFalse(node1.isCall());
416:       assertFalse(node1.isVar());
417:       assertFalse(node1.isNew());
418:       assertEquals(15, node1.getType());
419:       assertFalse(node1.isSetterDef());
420:       assertFalse(node1.isAdd());
421:       assertFalse(node1.isNull());
422:       assertFalse(node1.isOr());
423:       assertFalse(node1.isCatch());
424:       assertFalse(node1.isDefaultCase());
425:       assertFalse(node1.isThis());
426:       assertFalse(node1.isInstanceOf());
427:       assertFalse(node1.isWith());
428:       assertEquals(0, node1.getChildCount());
429:       assertFalse(node1.isRegExp());
430:       assertFalse(node1.isStringKey());
431:       assertFalse(node1.isFor());
432:       assertFalse(node1.hasOneChild());
433:       assertFalse(node1.isArrayLit());
434:       assertFalse(node1.isTry());
435:       assertFalse(node1.isLabelName());
436:       assertFalse(node1.isParamList());
437:       assertFalse(node1.isScript());
438:       assertFalse(node1.isNumber());
439:       assertFalse(node1.isGetterDef());
440:       assertNotNull(node1);
441:       assertFalse(node1.equals((Object)node0));
442:       
443:       Node node2 = node0.clonePropsFrom(node1);
444:       assertEquals(56, Node.CHANGE_TIME);
445:       assertEquals(47, Node.IS_DISPATCHER);
446:       assertEquals(2, Node.POST_FLAG);
447:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
448:       assertEquals(29, Node.JSDOC_INFO_PROP);
449:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
450:       assertEquals(37, Node.OPT_ARG_NAME);
451:       assertEquals(12, Node.COLUMN_BITS);
452:       assertEquals(32, Node.INCRDECR_PROP);
453:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
454:       assertEquals(30, Node.VAR_ARGS_NAME);
455:       assertEquals(43, Node.IS_CONSTANT_NAME);
456:       assertEquals(1, Node.DECR_FLAG);
457:       assertEquals(51, Node.STATIC_SOURCE_FILE);
458:       assertEquals(46, Node.IS_NAMESPACE);
459:       assertEquals(50, Node.FREE_CALL);
460:       assertEquals(54, Node.SLASH_V);
461:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
462:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
463:       assertEquals(8, Node.FLAG_NO_THROWS);
464:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
465:       assertEquals(40, Node.ORIGINALNAME_PROP);
466:       assertEquals(48, Node.DIRECTIVES);
467:       assertEquals(39, Node.EMPTY_BLOCK);
468:       assertEquals(4095, Node.COLUMN_MASK);
469:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
470:       assertEquals(15, Node.NO_SIDE_EFFECTS);
471:       assertEquals(36, Node.QUOTED_PROP);
472:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
473:       assertEquals(57, Node.LAST_PROP);
474:       assertEquals(53, Node.INPUT_ID);
475:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
476:       assertEquals(49, Node.DIRECT_EVAL);
477:       assertEquals(57, Node.REFLECTED_OBJECT);
478:       assertEquals(55, Node.INFERRED_FUNCTION);
479:       assertEquals(52, Node.LENGTH);
480:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
481:       assertEquals(55, Node.INFERRED_FUNCTION);
482:       assertEquals(43, Node.IS_CONSTANT_NAME);
483:       assertEquals(48, Node.DIRECTIVES);
484:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
485:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
487:       assertEquals(4095, Node.COLUMN_MASK);
488:       assertEquals(57, Node.REFLECTED_OBJECT);
489:       assertEquals(56, Node.CHANGE_TIME);
490:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
491:       assertEquals(36, Node.QUOTED_PROP);
492:       assertEquals(53, Node.INPUT_ID);
493:       assertEquals(15, Node.NO_SIDE_EFFECTS);
494:       assertEquals(39, Node.EMPTY_BLOCK);
495:       assertEquals(29, Node.JSDOC_INFO_PROP);
496:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
497:       assertEquals(52, Node.LENGTH);
498:       assertEquals(8, Node.FLAG_NO_THROWS);
499:       assertEquals(1, Node.DECR_FLAG);
500:       assertEquals(51, Node.STATIC_SOURCE_FILE);
501:       assertEquals(12, Node.COLUMN_BITS);
502:       assertEquals(32, Node.INCRDECR_PROP);
503:       assertEquals(46, Node.IS_NAMESPACE);
504:       assertEquals(49, Node.DIRECT_EVAL);
505:       assertEquals(57, Node.LAST_PROP);
506:       assertEquals(37, Node.OPT_ARG_NAME);
507:       assertEquals(2, Node.POST_FLAG);
508:       assertEquals(47, Node.IS_DISPATCHER);
509:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
510:       assertEquals(30, Node.VAR_ARGS_NAME);
511:       assertEquals(40, Node.ORIGINALNAME_PROP);
512:       assertEquals(54, Node.SLASH_V);
513:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
514:       assertEquals(50, Node.FREE_CALL);
515:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
516:       assertEquals(40, Node.ORIGINALNAME_PROP);
517:       assertEquals(50, Node.FREE_CALL);
518:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
519:       assertEquals(52, Node.LENGTH);
520:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
521:       assertEquals(8, Node.FLAG_NO_THROWS);
522:       assertEquals(48, Node.DIRECTIVES);
523:       assertEquals(57, Node.REFLECTED_OBJECT);
524:       assertEquals(54, Node.SLASH_V);
525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
526:       assertEquals(49, Node.DIRECT_EVAL);
527:       assertEquals(1, Node.DECR_FLAG);
528:       assertEquals(4095, Node.COLUMN_MASK);
529:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
530:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
531:       assertEquals(32, Node.INCRDECR_PROP);
532:       assertEquals(12, Node.COLUMN_BITS);
533:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
534:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
535:       assertEquals(53, Node.INPUT_ID);
536:       assertEquals(29, Node.JSDOC_INFO_PROP);
537:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
538:       assertEquals(37, Node.OPT_ARG_NAME);
539:       assertEquals(36, Node.QUOTED_PROP);
540:       assertEquals(46, Node.IS_NAMESPACE);
541:       assertEquals(43, Node.IS_CONSTANT_NAME);
542:       assertEquals(56, Node.CHANGE_TIME);
543:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
544:       assertEquals(30, Node.VAR_ARGS_NAME);
545:       assertEquals(15, Node.NO_SIDE_EFFECTS);
546:       assertEquals(55, Node.INFERRED_FUNCTION);
547:       assertEquals(39, Node.EMPTY_BLOCK);
548:       assertEquals(2, Node.POST_FLAG);
549:       assertEquals(57, Node.LAST_PROP);
550:       assertEquals(47, Node.IS_DISPATCHER);
551:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
552:       assertFalse(node0.isSetterDef());
553:       assertFalse(node0.isParamList());
554:       assertFalse(node0.isCall());
555:       assertFalse(node0.isCatch());
556:       assertFalse(node0.isVar());
557:       assertEquals(0, node0.getChildCount());
558:       assertFalse(node0.isBlock());
559:       assertFalse(node0.isDebugger());
560:       assertFalse(node0.isFunction());
561:       assertFalse(node0.isTry());
562:       assertFalse(node0.isArrayLit());
563:       assertFalse(node0.isStringKey());
564:       assertFalse(node0.isNE());
565:       assertFalse(node0.isIf());
566:       assertFalse(node0.isGetterDef());
567:       assertEquals((-1), node0.getLineno());
568:       assertFalse(node0.isCast());
569:       assertFalse(node0.hasMoreThanOneChild());
570:       assertFalse(node0.isContinue());
571:       assertFalse(node0.hasOneChild());
572:       assertEquals(39, node0.getType());
573:       assertFalse(node0.isFor());
574:       assertFalse(node0.isRegExp());
575:       assertFalse(node0.isWith());
576:       assertFalse(node0.isInc());
577:       assertFalse(node0.isIn());
578:       assertFalse(node0.isComma());
579:       assertFalse(node0.isInstanceOf());
580:       assertFalse(node0.isBreak());
581:       assertFalse(node0.isGetProp());
582:       assertFalse(node0.isFalse());
583:       assertFalse(node0.isThrow());
584:       assertFalse(node0.isHook());
585:       assertFalse(node0.isThis());
586:       assertFalse(node0.isSwitch());
587:       assertEquals((-1), node0.getCharno());
588:       assertFalse(node0.isString());
589:       assertFalse(node0.isCase());
590:       assertFalse(node0.isScript());
591:       assertFalse(node0.isAnd());
592:       assertFalse(node0.isObjectLit());
593:       assertFalse(node0.isNot());
594:       assertEquals((-1), node0.getSourcePosition());
595:       assertFalse(node0.isDec());
596:       assertFalse(node0.isTypeOf());
597:       assertFalse(node0.isDelProp());
598:       assertFalse(node0.isEmpty());
599:       assertFalse(node0.isLabelName());
600:       assertTrue(node0.isNumber());
601:       assertFalse(node0.isGetElem());
602:       assertFalse(node0.isAssign());
603:       assertFalse(node0.isLabel());
604:       assertFalse(node0.isAssignAdd());
605:       assertFalse(node0.isWhile());
606:       assertFalse(node0.hasChildren());
607:       assertFalse(node0.isReturn());
608:       assertFalse(node0.isDefaultCase());
609:       assertFalse(node0.isVoid());
610:       assertFalse(node0.isDo());
611:       assertFalse(node0.isNew());
612:       assertFalse(node0.isExprResult());
613:       assertFalse(node0.isAdd());
614:       assertFalse(node0.isName());
615:       assertFalse(node0.isOr());
616:       assertFalse(node0.isNull());
617:       assertFalse(node0.isTrue());
618:       assertFalse(node1.isCase());
619:       assertFalse(node1.isString());
620:       assertFalse(node1.isSwitch());
621:       assertEquals(48, node1.getCharno());
622:       assertFalse(node1.isHook());
623:       assertFalse(node1.isThrow());
624:       assertFalse(node1.isEmpty());
625:       assertFalse(node1.isBreak());
626:       assertFalse(node1.isIf());
627:       assertFalse(node1.isDelProp());
628:       assertFalse(node1.isInc());
629:       assertFalse(node1.isTrue());
630:       assertFalse(node1.isNE());
631:       assertFalse(node1.isIn());
632:       assertFalse(node1.isAnd());
633:       assertFalse(node1.isVoid());
634:       assertEquals(0, node1.getLineno());
635:       assertFalse(node1.isExprResult());
636:       assertEquals(48, node1.getSourcePosition());
637:       assertFalse(node1.isComma());
638:       assertFalse(node1.isFunction());
639:       assertFalse(node1.isFalse());
640:       assertFalse(node1.isCast());
641:       assertFalse(node1.isGetProp());
642:       assertFalse(node1.isDebugger());
643:       assertFalse(node1.isNot());
644:       assertFalse(node1.isObjectLit());
645:       assertFalse(node1.isContinue());
646:       assertFalse(node1.isWhile());
647:       assertFalse(node1.isDo());
648:       assertFalse(node1.isBlock());
649:       assertFalse(node1.isLabel());
650:       assertFalse(node1.isAssignAdd());
651:       assertFalse(node1.isReturn());
652:       assertFalse(node1.isDec());
653:       assertFalse(node1.isTypeOf());
654:       assertFalse(node1.hasChildren());
655:       assertFalse(node1.hasMoreThanOneChild());
656:       assertFalse(node1.isAssign());
657:       assertFalse(node1.isGetElem());
658:       assertFalse(node1.isName());
659:       assertFalse(node1.isCall());
660:       assertFalse(node1.isVar());
661:       assertFalse(node1.isNew());
662:       assertEquals(15, node1.getType());
663:       assertFalse(node1.isSetterDef());
664:       assertFalse(node1.isAdd());
665:       assertFalse(node1.isNull());
666:       assertFalse(node1.isOr());
667:       assertFalse(node1.isCatch());
668:       assertFalse(node1.isDefaultCase());
669:       assertFalse(node1.isThis());
670:       assertFalse(node1.isInstanceOf());
671:       assertFalse(node1.isWith());
672:       assertEquals(0, node1.getChildCount());
673:       assertFalse(node1.isRegExp());
674:       assertFalse(node1.isStringKey());
675:       assertFalse(node1.isFor());
676:       assertFalse(node1.hasOneChild());
677:       assertFalse(node1.isArrayLit());
678:       assertFalse(node1.isTry());
679:       assertFalse(node1.isLabelName());
680:       assertFalse(node1.isParamList());
681:       assertFalse(node1.isScript());
682:       assertFalse(node1.isNumber());
683:       assertFalse(node1.isGetterDef());
684:       assertFalse(node2.isGetElem());
685:       assertFalse(node2.isAssign());
686:       assertFalse(node2.isLabelName());
687:       assertFalse(node2.hasChildren());
688:       assertEquals((-1), node2.getSourcePosition());
689:       assertFalse(node2.isDec());
690:       assertFalse(node2.isTypeOf());
691:       assertFalse(node2.isCast());
692:       assertFalse(node2.isOr());
693:       assertEquals((-1), node2.getLineno());
694:       assertFalse(node2.isExprResult());
695:       assertFalse(node2.isNot());
696:       assertFalse(node2.isObjectLit());
697:       assertEquals(39, node2.getType());
698:       assertFalse(node2.isInstanceOf());
699:       assertFalse(node2.isScript());
700:       assertFalse(node2.isWith());
701:       assertFalse(node2.hasMoreThanOneChild());
702:       assertFalse(node2.isBlock());
703:       assertFalse(node2.isComma());
704:       assertFalse(node2.isThis());
705:       assertFalse(node2.isReturn());
706:       assertFalse(node2.isGetProp());
707:       assertFalse(node2.hasOneChild());
708:       assertFalse(node2.isWhile());
709:       assertFalse(node2.isFalse());
710:       assertFalse(node2.isThrow());
711:       assertFalse(node2.isAnd());
712:       assertFalse(node2.isFunction());
713:       assertFalse(node2.isContinue());
714:       assertFalse(node2.isIn());
715:       assertFalse(node2.isInc());
716:       assertFalse(node2.isSetterDef());
717:       assertFalse(node2.isEmpty());
718:       assertFalse(node2.isFor());
719:       assertFalse(node2.isArrayLit());
720:       assertFalse(node2.isGetterDef());
721:       assertFalse(node2.isVoid());
722:       assertFalse(node2.isTrue());
723:       assertFalse(node2.isDebugger());
724:       assertFalse(node2.isNE());
725:       assertFalse(node2.isDelProp());
726:       assertFalse(node2.isIf());
727:       assertFalse(node2.isCase());
728:       assertFalse(node2.isRegExp());
729:       assertFalse(node2.isString());
730:       assertFalse(node2.isCatch());
731:       assertFalse(node2.isTry());
732:       assertTrue(node2.isNumber());
733:       assertFalse(node2.isHook());
734:       assertFalse(node2.isName());
735:       assertFalse(node2.isStringKey());
736:       assertFalse(node2.isCall());
737:       assertFalse(node2.isBreak());
738:       assertEquals((-1), node2.getCharno());
739:       assertFalse(node2.isNull());
740:       assertFalse(node2.isParamList());
741:       assertFalse(node2.isSwitch());
742:       assertFalse(node2.isDo());
743:       assertEquals(0, node2.getChildCount());
744:       assertFalse(node2.isNew());
745:       assertFalse(node2.isAdd());
746:       assertFalse(node2.isLabel());
747:       assertFalse(node2.isVar());
748:       assertFalse(node2.isDefaultCase());
749:       assertFalse(node2.isAssignAdd());
750:       assertSame(node0, node2);
751:       assertSame(node2, node0);
752:       assertNotNull(node2);
753:       assertFalse(node0.equals((Object)node1));
754:       assertFalse(node1.equals((Object)node0));
755:       assertFalse(node2.equals((Object)node1));
756:       
757:       boolean boolean1 = node0.isFromExterns();
758:       assertEquals(56, Node.CHANGE_TIME);
759:       assertEquals(47, Node.IS_DISPATCHER);
760:       assertEquals(2, Node.POST_FLAG);
761:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
762:       assertEquals(29, Node.JSDOC_INFO_PROP);
763:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
764:       assertEquals(37, Node.OPT_ARG_NAME);
765:       assertEquals(12, Node.COLUMN_BITS);
766:       assertEquals(32, Node.INCRDECR_PROP);
767:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
768:       assertEquals(30, Node.VAR_ARGS_NAME);
769:       assertEquals(43, Node.IS_CONSTANT_NAME);
770:       assertEquals(1, Node.DECR_FLAG);
771:       assertEquals(51, Node.STATIC_SOURCE_FILE);
772:       assertEquals(46, Node.IS_NAMESPACE);
773:       assertEquals(50, Node.FREE_CALL);
774:       assertEquals(54, Node.SLASH_V);
775:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
776:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
777:       assertEquals(8, Node.FLAG_NO_THROWS);
778:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
779:       assertEquals(40, Node.ORIGINALNAME_PROP);
780:       assertEquals(48, Node.DIRECTIVES);
781:       assertEquals(39, Node.EMPTY_BLOCK);
782:       assertEquals(4095, Node.COLUMN_MASK);
783:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
784:       assertEquals(15, Node.NO_SIDE_EFFECTS);
785:       assertEquals(36, Node.QUOTED_PROP);
786:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
787:       assertEquals(57, Node.LAST_PROP);
788:       assertEquals(53, Node.INPUT_ID);
789:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
790:       assertEquals(49, Node.DIRECT_EVAL);
791:       assertEquals(57, Node.REFLECTED_OBJECT);
792:       assertEquals(55, Node.INFERRED_FUNCTION);
793:       assertEquals(52, Node.LENGTH);
794:       assertFalse(node0.isSetterDef());
795:       assertFalse(node0.isParamList());
796:       assertFalse(node0.isCall());
797:       assertFalse(node0.isCatch());
798:       assertFalse(node0.isVar());
799:       assertEquals(0, node0.getChildCount());
800:       assertFalse(node0.isBlock());
801:       assertFalse(node0.isDebugger());
802:       assertFalse(node0.isFunction());
803:       assertFalse(node0.isTry());
804:       assertFalse(node0.isArrayLit());
805:       assertFalse(node0.isStringKey());
806:       assertFalse(node0.isNE());
807:       assertFalse(node0.isIf());
808:       assertFalse(node0.isGetterDef());
809:       assertEquals((-1), node0.getLineno());
810:       assertFalse(node0.isCast());
811:       assertFalse(node0.hasMoreThanOneChild());
812:       assertFalse(node0.isContinue());
813:       assertFalse(node0.hasOneChild());
814:       assertEquals(39, node0.getType());
815:       assertFalse(node0.isFor());
816:       assertFalse(node0.isRegExp());
817:       assertFalse(node0.isWith());
818:       assertFalse(node0.isInc());
819:       assertFalse(node0.isIn());
820:       assertFalse(node0.isComma());
821:       assertFalse(node0.isInstanceOf());
822:       assertFalse(node0.isBreak());
823:       assertFalse(node0.isGetProp());
824:       assertFalse(node0.isFalse());
825:       assertFalse(node0.isThrow());
826:       assertFalse(node0.isHook());
827:       assertFalse(node0.isThis());
828:       assertFalse(node0.isSwitch());
829:       assertEquals((-1), node0.getCharno());
830:       assertFalse(node0.isString());
831:       assertFalse(node0.isCase());
832:       assertFalse(node0.isScript());
833:       assertFalse(node0.isAnd());
834:       assertFalse(node0.isObjectLit());
835:       assertFalse(node0.isNot());
836:       assertEquals((-1), node0.getSourcePosition());
837:       assertFalse(node0.isDec());
838:       assertFalse(node0.isTypeOf());
839:       assertFalse(node0.isDelProp());
840:       assertFalse(node0.isEmpty());
841:       assertFalse(node0.isLabelName());
842:       assertTrue(node0.isNumber());
843:       assertFalse(node0.isGetElem());
844:       assertFalse(node0.isAssign());
845:       assertFalse(node0.isLabel());
846:       assertFalse(node0.isAssignAdd());
847:       assertFalse(node0.isWhile());
848:       assertFalse(node0.hasChildren());
849:       assertFalse(node0.isReturn());
850:       assertFalse(node0.isDefaultCase());
851:       assertFalse(node0.isVoid());
852:       assertFalse(node0.isDo());
853:       assertFalse(node0.isNew());
854:       assertFalse(node0.isExprResult());
855:       assertFalse(node0.isAdd());
856:       assertFalse(node0.isName());
857:       assertFalse(node0.isOr());
858:       assertFalse(node0.isNull());
859:       assertFalse(node0.isTrue());
860:       assertSame(node0, node2);
861:       assertFalse(node0.equals((Object)node1));
862:       assertTrue(boolean1 == boolean0);
863:       assertFalse(boolean1);
864:       
865:       boolean boolean2 = node0.isBreak();
866:       assertEquals(56, Node.CHANGE_TIME);
867:       assertEquals(47, Node.IS_DISPATCHER);
868:       assertEquals(2, Node.POST_FLAG);
869:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
870:       assertEquals(29, Node.JSDOC_INFO_PROP);
871:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
872:       assertEquals(37, Node.OPT_ARG_NAME);
873:       assertEquals(12, Node.COLUMN_BITS);
874:       assertEquals(32, Node.INCRDECR_PROP);
875:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
876:       assertEquals(30, Node.VAR_ARGS_NAME);
877:       assertEquals(43, Node.IS_CONSTANT_NAME);
878:       assertEquals(1, Node.DECR_FLAG);
879:       assertEquals(51, Node.STATIC_SOURCE_FILE);
880:       assertEquals(46, Node.IS_NAMESPACE);
881:       assertEquals(50, Node.FREE_CALL);
882:       assertEquals(54, Node.SLASH_V);
883:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
884:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
885:       assertEquals(8, Node.FLAG_NO_THROWS);
886:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
887:       assertEquals(40, Node.ORIGINALNAME_PROP);
888:       assertEquals(48, Node.DIRECTIVES);
889:       assertEquals(39, Node.EMPTY_BLOCK);
890:       assertEquals(4095, Node.COLUMN_MASK);
891:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
892:       assertEquals(15, Node.NO_SIDE_EFFECTS);
893:       assertEquals(36, Node.QUOTED_PROP);
894:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
895:       assertEquals(57, Node.LAST_PROP);
896:       assertEquals(53, Node.INPUT_ID);
897:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
898:       assertEquals(49, Node.DIRECT_EVAL);
899:       assertEquals(57, Node.REFLECTED_OBJECT);
900:       assertEquals(55, Node.INFERRED_FUNCTION);
901:       assertEquals(52, Node.LENGTH);
902:       assertFalse(node0.isSetterDef());
903:       assertFalse(node0.isParamList());
904:       assertFalse(node0.isCall());
905:       assertFalse(node0.isCatch());
906:       assertFalse(node0.isVar());
907:       assertEquals(0, node0.getChildCount());
908:       assertFalse(node0.isBlock());
909:       assertFalse(node0.isDebugger());
910:       assertFalse(node0.isFunction());
911:       assertFalse(node0.isTry());
912:       assertFalse(node0.isArrayLit());
913:       assertFalse(node0.isStringKey());
914:       assertFalse(node0.isNE());
915:       assertFalse(node0.isIf());
916:       assertFalse(node0.isGetterDef());
917:       assertEquals((-1), node0.getLineno());
918:       assertFalse(node0.isCast());
919:       assertFalse(node0.hasMoreThanOneChild());
920:       assertFalse(node0.isContinue());
921:       assertFalse(node0.hasOneChild());
922:       assertEquals(39, node0.getType());
923:       assertFalse(node0.isFor());
924:       assertFalse(node0.isRegExp());
925:       assertFalse(node0.isWith());
926:       assertFalse(node0.isInc());
927:       assertFalse(node0.isIn());
928:       assertFalse(node0.isComma());
929:       assertFalse(node0.isInstanceOf());
930:       assertFalse(node0.isBreak());
931:       assertFalse(node0.isGetProp());
932:       assertFalse(node0.isFalse());
933:       assertFalse(node0.isThrow());
934:       assertFalse(node0.isHook());
935:       assertFalse(node0.isThis());
936:       assertFalse(node0.isSwitch());
937:       assertEquals((-1), node0.getCharno());
938:       assertFalse(node0.isString());
939:       assertFalse(node0.isCase());
940:       assertFalse(node0.isScript());
941:       assertFalse(node0.isAnd());
942:       assertFalse(node0.isObjectLit());
943:       assertFalse(node0.isNot());
944:       assertEquals((-1), node0.getSourcePosition());
945:       assertFalse(node0.isDec());
946:       assertFalse(node0.isTypeOf());
947:       assertFalse(node0.isDelProp());
948:       assertFalse(node0.isEmpty());
949:       assertFalse(node0.isLabelName());
950:       assertTrue(node0.isNumber());
951:       assertFalse(node0.isGetElem());
952:       assertFalse(node0.isAssign());
953:       assertFalse(node0.isLabel());
954:       assertFalse(node0.isAssignAdd());
955:       assertFalse(node0.isWhile());
956:       assertFalse(node0.hasChildren());
957:       assertFalse(node0.isReturn());
958:       assertFalse(node0.isDefaultCase());
959:       assertFalse(node0.isVoid());
960:       assertFalse(node0.isDo());
961:       assertFalse(node0.isNew());
962:       assertFalse(node0.isExprResult());
963:       assertFalse(node0.isAdd());
964:       assertFalse(node0.isName());
965:       assertFalse(node0.isOr());
966:       assertFalse(node0.isNull());
967:       assertFalse(node0.isTrue());
968:       assertSame(node0, node2);
969:       assertFalse(node0.equals((Object)node1));
970:       assertTrue(boolean2 == boolean1);
971:       assertTrue(boolean2 == boolean0);
972:       assertFalse(boolean2);
973:       
974:       boolean boolean3 = node0.isCatch();
975:       assertEquals(56, Node.CHANGE_TIME);
976:       assertEquals(47, Node.IS_DISPATCHER);
977:       assertEquals(2, Node.POST_FLAG);
978:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
979:       assertEquals(29, Node.JSDOC_INFO_PROP);
980:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
981:       assertEquals(37, Node.OPT_ARG_NAME);
982:       assertEquals(12, Node.COLUMN_BITS);
983:       assertEquals(32, Node.INCRDECR_PROP);
984:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
985:       assertEquals(30, Node.VAR_ARGS_NAME);
986:       assertEquals(43, Node.IS_CONSTANT_NAME);
987:       assertEquals(1, Node.DECR_FLAG);
988:       assertEquals(51, Node.STATIC_SOURCE_FILE);
989:       assertEquals(46, Node.IS_NAMESPACE);
990:       assertEquals(50, Node.FREE_CALL);
991:       assertEquals(54, Node.SLASH_V);
992:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
993:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
994:       assertEquals(8, Node.FLAG_NO_THROWS);
995:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
996:       assertEquals(40, Node.ORIGINALNAME_PROP);
997:       assertEquals(48, Node.DIRECTIVES);
998:       assertEquals(39, Node.EMPTY_BLOCK);
999:       assertEquals(4095, Node.COLUMN_MASK);
1000:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1001:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1002:       assertEquals(36, Node.QUOTED_PROP);
1003:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1004:       assertEquals(57, Node.LAST_PROP);
1005:       assertEquals(53, Node.INPUT_ID);
1006:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1007:       assertEquals(49, Node.DIRECT_EVAL);
1008:       assertEquals(57, Node.REFLECTED_OBJECT);
1009:       assertEquals(55, Node.INFERRED_FUNCTION);
1010:       assertEquals(52, Node.LENGTH);
1011:       assertFalse(node0.isSetterDef());
1012:       assertFalse(node0.isParamList());
1013:       assertFalse(node0.isCall());
1014:       assertFalse(node0.isCatch());
1015:       assertFalse(node0.isVar());
1016:       assertEquals(0, node0.getChildCount());
1017:       assertFalse(node0.isBlock());
1018:       assertFalse(node0.isDebugger());
1019:       assertFalse(node0.isFunction());
1020:       assertFalse(node0.isTry());
1021:       assertFalse(node0.isArrayLit());
1022:       assertFalse(node0.isStringKey());
1023:       assertFalse(node0.isNE());
1024:       assertFalse(node0.isIf());
1025:       assertFalse(node0.isGetterDef());
1026:       assertEquals((-1), node0.getLineno());
1027:       assertFalse(node0.isCast());
1028:       assertFalse(node0.hasMoreThanOneChild());
1029:       assertFalse(node0.isContinue());
1030:       assertFalse(node0.hasOneChild());
1031:       assertEquals(39, node0.getType());
1032:       assertFalse(node0.isFor());
1033:       assertFalse(node0.isRegExp());
1034:       assertFalse(node0.isWith());
1035:       assertFalse(node0.isInc());
1036:       assertFalse(node0.isIn());
1037:       assertFalse(node0.isComma());
1038:       assertFalse(node0.isInstanceOf());
1039:       assertFalse(node0.isBreak());
1040:       assertFalse(node0.isGetProp());
1041:       assertFalse(node0.isFalse());
1042:       assertFalse(node0.isThrow());
1043:       assertFalse(node0.isHook());
1044:       assertFalse(node0.isThis());
1045:       assertFalse(node0.isSwitch());
1046:       assertEquals((-1), node0.getCharno());
1047:       assertFalse(node0.isString());
1048:       assertFalse(node0.isCase());
1049:       assertFalse(node0.isScript());
1050:       assertFalse(node0.isAnd());
1051:       assertFalse(node0.isObjectLit());
1052:       assertFalse(node0.isNot());
1053:       assertEquals((-1), node0.getSourcePosition());
1054:       assertFalse(node0.isDec());
1055:       assertFalse(node0.isTypeOf());
1056:       assertFalse(node0.isDelProp());
1057:       assertFalse(node0.isEmpty());
1058:       assertFalse(node0.isLabelName());
1059:       assertTrue(node0.isNumber());
1060:       assertFalse(node0.isGetElem());
1061:       assertFalse(node0.isAssign());
1062:       assertFalse(node0.isLabel());
1063:       assertFalse(node0.isAssignAdd());
1064:       assertFalse(node0.isWhile());
1065:       assertFalse(node0.hasChildren());
1066:       assertFalse(node0.isReturn());
1067:       assertFalse(node0.isDefaultCase());
1068:       assertFalse(node0.isVoid());
1069:       assertFalse(node0.isDo());
1070:       assertFalse(node0.isNew());
1071:       assertFalse(node0.isExprResult());
1072:       assertFalse(node0.isAdd());
1073:       assertFalse(node0.isName());
1074:       assertFalse(node0.isOr());
1075:       assertFalse(node0.isNull());
1076:       assertFalse(node0.isTrue());
1077:       assertSame(node0, node2);
1078:       assertFalse(node0.equals((Object)node1));
1079:       assertTrue(boolean3 == boolean1);
1080:       assertTrue(boolean3 == boolean0);
1081:       assertTrue(boolean3 == boolean2);
1082:       assertFalse(boolean3);
1083:       
1084:       Node node3 = Node.newNumber(0.0, 52, 46);
1085:       assertEquals(29, Node.JSDOC_INFO_PROP);
1086:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1087:       assertEquals(47, Node.IS_DISPATCHER);
1088:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1089:       assertEquals(37, Node.OPT_ARG_NAME);
1090:       assertEquals(56, Node.CHANGE_TIME);
1091:       assertEquals(2, Node.POST_FLAG);
1092:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1093:       assertEquals(12, Node.COLUMN_BITS);
1094:       assertEquals(43, Node.IS_CONSTANT_NAME);
1095:       assertEquals(32, Node.INCRDECR_PROP);
1096:       assertEquals(1, Node.DECR_FLAG);
1097:       assertEquals(46, Node.IS_NAMESPACE);
1098:       assertEquals(54, Node.SLASH_V);
1099:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1101:       assertEquals(50, Node.FREE_CALL);
1102:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1103:       assertEquals(40, Node.ORIGINALNAME_PROP);
1104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1105:       assertEquals(48, Node.DIRECTIVES);
1106:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1107:       assertEquals(4095, Node.COLUMN_MASK);
1108:       assertEquals(30, Node.VAR_ARGS_NAME);
1109:       assertEquals(49, Node.DIRECT_EVAL);
1110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1113:       assertEquals(57, Node.LAST_PROP);
1114:       assertEquals(52, Node.LENGTH);
1115:       assertEquals(39, Node.EMPTY_BLOCK);
1116:       assertEquals(53, Node.INPUT_ID);
1117:       assertEquals(57, Node.REFLECTED_OBJECT);
1118:       assertEquals(55, Node.INFERRED_FUNCTION);
1119:       assertEquals(36, Node.QUOTED_PROP);
1120:       assertEquals(8, Node.FLAG_NO_THROWS);
1121:       assertFalse(node3.isNull());
1122:       assertFalse(node3.isStringKey());
1123:       assertFalse(node3.isCall());
1124:       assertFalse(node3.isParamList());
1125:       assertFalse(node3.isSetterDef());
1126:       assertFalse(node3.isName());
1127:       assertFalse(node3.isBlock());
1128:       assertFalse(node3.isVar());
1129:       assertFalse(node3.isCatch());
1130:       assertEquals(0, node3.getChildCount());
1131:       assertFalse(node3.isWhile());
1132:       assertEquals(39, node3.getType());
1133:       assertFalse(node3.isTry());
1134:       assertFalse(node3.isDebugger());
1135:       assertFalse(node3.hasChildren());
1136:       assertFalse(node3.isDelProp());
1137:       assertFalse(node3.isEmpty());
1138:       assertFalse(node3.isGetElem());
1139:       assertFalse(node3.isArrayLit());
1140:       assertFalse(node3.isLabelName());
1141:       assertTrue(node3.isNumber());
1142:       assertFalse(node3.isReturn());
1143:       assertFalse(node3.isAssignAdd());
1144:       assertFalse(node3.isTypeOf());
1145:       assertFalse(node3.isLabel());
1146:       assertFalse(node3.isAssign());
1147:       assertFalse(node3.isDec());
1148:       assertFalse(node3.isDefaultCase());
1149:       assertEquals(213038, node3.getSourcePosition());
1150:       assertFalse(node3.isExprResult());
1151:       assertFalse(node3.isVoid());
1152:       assertFalse(node3.isNew());
1153:       assertFalse(node3.isDo());
1154:       assertFalse(node3.isAdd());
1155:       assertFalse(node3.isTrue());
1156:       assertFalse(node3.isOr());
1157:       assertFalse(node3.isBreak());
1158:       assertFalse(node3.isThrow());
1159:       assertFalse(node3.isGetProp());
1160:       assertFalse(node3.isHook());
1161:       assertFalse(node3.isInstanceOf());
1162:       assertFalse(node3.isThis());
1163:       assertFalse(node3.isFalse());
1164:       assertFalse(node3.isComma());
1165:       assertFalse(node3.isString());
1166:       assertEquals(52, node3.getLineno());
1167:       assertFalse(node3.isScript());
1168:       assertFalse(node3.isAnd());
1169:       assertFalse(node3.isSwitch());
1170:       assertFalse(node3.isCase());
1171:       assertFalse(node3.isObjectLit());
1172:       assertFalse(node3.isNot());
1173:       assertFalse(node3.isGetterDef());
1174:       assertFalse(node3.isIf());
1175:       assertFalse(node3.isFor());
1176:       assertFalse(node3.isNE());
1177:       assertFalse(node3.hasOneChild());
1178:       assertFalse(node3.isCast());
1179:       assertFalse(node3.isContinue());
1180:       assertFalse(node3.isFunction());
1181:       assertFalse(node3.hasMoreThanOneChild());
1182:       assertFalse(node3.isRegExp());
1183:       assertEquals(46, node3.getCharno());
1184:       assertFalse(node3.isWith());
1185:       assertFalse(node3.isInc());
1186:       assertFalse(node3.isIn());
1187:       assertNotSame(node3, node0);
1188:       assertNotSame(node3, node2);
1189:       assertNotNull(node3);
1190:       assertFalse(node3.equals((Object)node1));
1191:       assertFalse(node3.equals((Object)node0));
1192:       assertFalse(node3.equals((Object)node2));
1193:       
1194:       boolean boolean4 = node3.isQuotedString();
1195:       assertEquals(29, Node.JSDOC_INFO_PROP);
1196:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1197:       assertEquals(47, Node.IS_DISPATCHER);
1198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1199:       assertEquals(37, Node.OPT_ARG_NAME);
1200:       assertEquals(56, Node.CHANGE_TIME);
1201:       assertEquals(2, Node.POST_FLAG);
1202:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1203:       assertEquals(12, Node.COLUMN_BITS);
1204:       assertEquals(43, Node.IS_CONSTANT_NAME);
1205:       assertEquals(32, Node.INCRDECR_PROP);
1206:       assertEquals(1, Node.DECR_FLAG);
1207:       assertEquals(46, Node.IS_NAMESPACE);
1208:       assertEquals(54, Node.SLASH_V);
1209:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1211:       assertEquals(50, Node.FREE_CALL);
1212:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1213:       assertEquals(40, Node.ORIGINALNAME_PROP);
1214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1215:       assertEquals(48, Node.DIRECTIVES);
1216:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1217:       assertEquals(4095, Node.COLUMN_MASK);
1218:       assertEquals(30, Node.VAR_ARGS_NAME);
1219:       assertEquals(49, Node.DIRECT_EVAL);
1220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1221:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1223:       assertEquals(57, Node.LAST_PROP);
1224:       assertEquals(52, Node.LENGTH);
1225:       assertEquals(39, Node.EMPTY_BLOCK);
1226:       assertEquals(53, Node.INPUT_ID);
1227:       assertEquals(57, Node.REFLECTED_OBJECT);
1228:       assertEquals(55, Node.INFERRED_FUNCTION);
1229:       assertEquals(36, Node.QUOTED_PROP);
1230:       assertEquals(8, Node.FLAG_NO_THROWS);
1231:       assertFalse(node3.isNull());
1232:       assertFalse(node3.isStringKey());
1233:       assertFalse(node3.isCall());
1234:       assertFalse(node3.isParamList());
1235:       assertFalse(node3.isSetterDef());
1236:       assertFalse(node3.isName());
1237:       assertFalse(node3.isBlock());
1238:       assertFalse(node3.isVar());
1239:       assertFalse(node3.isCatch());
1240:       assertEquals(0, node3.getChildCount());
1241:       assertFalse(node3.isWhile());
1242:       assertEquals(39, node3.getType());
1243:       assertFalse(node3.isTry());
1244:       assertFalse(node3.isDebugger());
1245:       assertFalse(node3.hasChildren());
1246:       assertFalse(node3.isDelProp());
1247:       assertFalse(node3.isEmpty());
1248:       assertFalse(node3.isGetElem());
1249:       assertFalse(node3.isArrayLit());
1250:       assertFalse(node3.isLabelName());
1251:       assertTrue(node3.isNumber());
1252:       assertFalse(node3.isReturn());
1253:       assertFalse(node3.isAssignAdd());
1254:       assertFalse(node3.isTypeOf());
1255:       assertFalse(node3.isLabel());
1256:       assertFalse(node3.isAssign());
1257:       assertFalse(node3.isDec());
1258:       assertFalse(node3.isDefaultCase());
1259:       assertEquals(213038, node3.getSourcePosition());
1260:       assertFalse(node3.isExprResult());
1261:       assertFalse(node3.isVoid());
1262:       assertFalse(node3.isNew());
1263:       assertFalse(node3.isDo());
1264:       assertFalse(node3.isAdd());
1265:       assertFalse(node3.isTrue());
1266:       assertFalse(node3.isOr());
1267:       assertFalse(node3.isBreak());
1268:       assertFalse(node3.isThrow());
1269:       assertFalse(node3.isGetProp());
1270:       assertFalse(node3.isHook());
1271:       assertFalse(node3.isInstanceOf());
1272:       assertFalse(node3.isThis());
1273:       assertFalse(node3.isFalse());
1274:       assertFalse(node3.isComma());
1275:       assertFalse(node3.isString());
1276:       assertEquals(52, node3.getLineno());
1277:       assertFalse(node3.isScript());
1278:       assertFalse(node3.isAnd());
1279:       assertFalse(node3.isSwitch());
1280:       assertFalse(node3.isCase());
1281:       assertFalse(node3.isObjectLit());
1282:       assertFalse(node3.isNot());
1283:       assertFalse(node3.isGetterDef());
1284:       assertFalse(node3.isIf());
1285:       assertFalse(node3.isFor());
1286:       assertFalse(node3.isNE());
1287:       assertFalse(node3.hasOneChild());
1288:       assertFalse(node3.isCast());
1289:       assertFalse(node3.isContinue());
1290:       assertFalse(node3.isFunction());
1291:       assertFalse(node3.hasMoreThanOneChild());
1292:       assertFalse(node3.isRegExp());
1293:       assertEquals(46, node3.getCharno());
1294:       assertFalse(node3.isWith());
1295:       assertFalse(node3.isInc());
1296:       assertFalse(node3.isIn());
1297:       assertNotSame(node3, node0);
1298:       assertNotSame(node3, node2);
1299:       assertFalse(node3.equals((Object)node1));
1300:       assertFalse(node3.equals((Object)node0));
1301:       assertFalse(node3.equals((Object)node2));
1302:       assertTrue(boolean4 == boolean2);
1303:       assertTrue(boolean4 == boolean1);
1304:       assertTrue(boolean4 == boolean0);
1305:       assertTrue(boolean4 == boolean3);
1306:       assertFalse(boolean4);
1307:       
1308:       Set<String> set0 = node0.getDirectives();
1309:       assertEquals(56, Node.CHANGE_TIME);
1310:       assertEquals(47, Node.IS_DISPATCHER);
1311:       assertEquals(2, Node.POST_FLAG);
1312:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1313:       assertEquals(29, Node.JSDOC_INFO_PROP);
1314:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1315:       assertEquals(37, Node.OPT_ARG_NAME);
1316:       assertEquals(12, Node.COLUMN_BITS);
1317:       assertEquals(32, Node.INCRDECR_PROP);
1318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1319:       assertEquals(30, Node.VAR_ARGS_NAME);
1320:       assertEquals(43, Node.IS_CONSTANT_NAME);
1321:       assertEquals(1, Node.DECR_FLAG);
1322:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1323:       assertEquals(46, Node.IS_NAMESPACE);
1324:       assertEquals(50, Node.FREE_CALL);
1325:       assertEquals(54, Node.SLASH_V);
1326:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1328:       assertEquals(8, Node.FLAG_NO_THROWS);
1329:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1330:       assertEquals(40, Node.ORIGINALNAME_PROP);
1331:       assertEquals(48, Node.DIRECTIVES);
1332:       assertEquals(39, Node.EMPTY_BLOCK);
1333:       assertEquals(4095, Node.COLUMN_MASK);
1334:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1335:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1336:       assertEquals(36, Node.QUOTED_PROP);
1337:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1338:       assertEquals(57, Node.LAST_PROP);
1339:       assertEquals(53, Node.INPUT_ID);
1340:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1341:       assertEquals(49, Node.DIRECT_EVAL);
1342:       assertEquals(57, Node.REFLECTED_OBJECT);
1343:       assertEquals(55, Node.INFERRED_FUNCTION);
1344:       assertEquals(52, Node.LENGTH);
1345:       assertFalse(node0.isSetterDef());
1346:       assertFalse(node0.isParamList());
1347:       assertFalse(node0.isCall());
1348:       assertFalse(node0.isCatch());
1349:       assertFalse(node0.isVar());
1350:       assertEquals(0, node0.getChildCount());
1351:       assertFalse(node0.isBlock());
1352:       assertFalse(node0.isDebugger());
1353:       assertFalse(node0.isFunction());
1354:       assertFalse(node0.isTry());
1355:       assertFalse(node0.isArrayLit());
1356:       assertFalse(node0.isStringKey());
1357:       assertFalse(node0.isNE());
1358:       assertFalse(node0.isIf());
1359:       assertFalse(node0.isGetterDef());
1360:       assertEquals((-1), node0.getLineno());
1361:       assertFalse(node0.isCast());
1362:       assertFalse(node0.hasMoreThanOneChild());
1363:       assertFalse(node0.isContinue());
1364:       assertFalse(node0.hasOneChild());
1365:       assertEquals(39, node0.getType());
1366:       assertFalse(node0.isFor());
1367:       assertFalse(node0.isRegExp());
1368:       assertFalse(node0.isWith());
1369:       assertFalse(node0.isInc());
1370:       assertFalse(node0.isIn());
1371:       assertFalse(node0.isComma());
1372:       assertFalse(node0.isInstanceOf());
1373:       assertFalse(node0.isBreak());
1374:       assertFalse(node0.isGetProp());
1375:       assertFalse(node0.isFalse());
1376:       assertFalse(node0.isThrow());
1377:       assertFalse(node0.isHook());
1378:       assertFalse(node0.isThis());
1379:       assertFalse(node0.isSwitch());
1380:       assertEquals((-1), node0.getCharno());
1381:       assertFalse(node0.isString());
1382:       assertFalse(node0.isCase());
1383:       assertFalse(node0.isScript());
1384:       assertFalse(node0.isAnd());
1385:       assertFalse(node0.isObjectLit());
1386:       assertFalse(node0.isNot());
1387:       assertEquals((-1), node0.getSourcePosition());
1388:       assertFalse(node0.isDec());
1389:       assertFalse(node0.isTypeOf());
1390:       assertFalse(node0.isDelProp());
1391:       assertFalse(node0.isEmpty());
1392:       assertFalse(node0.isLabelName());
1393:       assertTrue(node0.isNumber());
1394:       assertFalse(node0.isGetElem());
1395:       assertFalse(node0.isAssign());
1396:       assertFalse(node0.isLabel());
1397:       assertFalse(node0.isAssignAdd());
1398:       assertFalse(node0.isWhile());
1399:       assertFalse(node0.hasChildren());
1400:       assertFalse(node0.isReturn());
1401:       assertFalse(node0.isDefaultCase());
1402:       assertFalse(node0.isVoid());
1403:       assertFalse(node0.isDo());
1404:       assertFalse(node0.isNew());
1405:       assertFalse(node0.isExprResult());
1406:       assertFalse(node0.isAdd());
1407:       assertFalse(node0.isName());
1408:       assertFalse(node0.isOr());
1409:       assertFalse(node0.isNull());
1410:       assertFalse(node0.isTrue());
1411:       assertNotSame(node0, node3);
1412:       assertSame(node0, node2);
1413:       assertNull(set0);
1414:       assertFalse(node0.equals((Object)node3));
1415:       assertFalse(node0.equals((Object)node1));
1416:       
1417:       double double0 = node3.getDouble();
1418:       assertEquals(29, Node.JSDOC_INFO_PROP);
1419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1420:       assertEquals(47, Node.IS_DISPATCHER);
1421:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1422:       assertEquals(37, Node.OPT_ARG_NAME);
1423:       assertEquals(56, Node.CHANGE_TIME);
1424:       assertEquals(2, Node.POST_FLAG);
1425:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1426:       assertEquals(12, Node.COLUMN_BITS);
1427:       assertEquals(43, Node.IS_CONSTANT_NAME);
1428:       assertEquals(32, Node.INCRDECR_PROP);
1429:       assertEquals(1, Node.DECR_FLAG);
1430:       assertEquals(46, Node.IS_NAMESPACE);
1431:       assertEquals(54, Node.SLASH_V);
1432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1434:       assertEquals(50, Node.FREE_CALL);
1435:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1436:       assertEquals(40, Node.ORIGINALNAME_PROP);
1437:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1438:       assertEquals(48, Node.DIRECTIVES);
1439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1440:       assertEquals(4095, Node.COLUMN_MASK);
1441:       assertEquals(30, Node.VAR_ARGS_NAME);
1442:       assertEquals(49, Node.DIRECT_EVAL);
1443:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1444:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1445:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1446:       assertEquals(57, Node.LAST_PROP);
1447:       assertEquals(52, Node.LENGTH);
1448:       assertEquals(39, Node.EMPTY_BLOCK);
1449:       assertEquals(53, Node.INPUT_ID);
1450:       assertEquals(57, Node.REFLECTED_OBJECT);
1451:       assertEquals(55, Node.INFERRED_FUNCTION);
1452:       assertEquals(36, Node.QUOTED_PROP);
1453:       assertEquals(8, Node.FLAG_NO_THROWS);
1454:       assertFalse(node3.isNull());
1455:       assertFalse(node3.isStringKey());
1456:       assertFalse(node3.isCall());
1457:       assertFalse(node3.isParamList());
1458:       assertFalse(node3.isSetterDef());
1459:       assertFalse(node3.isName());
1460:       assertFalse(node3.isBlock());
1461:       assertFalse(node3.isVar());
1462:       assertFalse(node3.isCatch());
1463:       assertEquals(0, node3.getChildCount());
1464:       assertFalse(node3.isWhile());
1465:       assertEquals(39, node3.getType());
1466:       assertFalse(node3.isTry());
1467:       assertFalse(node3.isDebugger());
1468:       assertFalse(node3.hasChildren());
1469:       assertFalse(node3.isDelProp());
1470:       assertFalse(node3.isEmpty());
1471:       assertFalse(node3.isGetElem());
1472:       assertFalse(node3.isArrayLit());
1473:       assertFalse(node3.isLabelName());
1474:       assertTrue(node3.isNumber());
1475:       assertFalse(node3.isReturn());
1476:       assertFalse(node3.isAssignAdd());
1477:       assertFalse(node3.isTypeOf());
1478:       assertFalse(node3.isLabel());
1479:       assertFalse(node3.isAssign());
1480:       assertFalse(node3.isDec());
1481:       assertFalse(node3.isDefaultCase());
1482:       assertEquals(213038, node3.getSourcePosition());
1483:       assertFalse(node3.isExprResult());
1484:       assertFalse(node3.isVoid());
1485:       assertFalse(node3.isNew());
1486:       assertFalse(node3.isDo());
1487:       assertFalse(node3.isAdd());
1488:       assertFalse(node3.isTrue());
1489:       assertFalse(node3.isOr());
1490:       assertFalse(node3.isBreak());
1491:       assertFalse(node3.isThrow());
1492:       assertFalse(node3.isGetProp());
1493:       assertFalse(node3.isHook());
1494:       assertFalse(node3.isInstanceOf());
1495:       assertFalse(node3.isThis());
1496:       assertFalse(node3.isFalse());
1497:       assertFalse(node3.isComma());
1498:       assertFalse(node3.isString());
1499:       assertEquals(52, node3.getLineno());
1500:       assertFalse(node3.isScript());
1501:       assertFalse(node3.isAnd());
1502:       assertFalse(node3.isSwitch());
1503:       assertFalse(node3.isCase());
1504:       assertFalse(node3.isObjectLit());
1505:       assertFalse(node3.isNot());
1506:       assertFalse(node3.isGetterDef());
1507:       assertFalse(node3.isIf());
1508:       assertFalse(node3.isFor());
1509:       assertFalse(node3.isNE());
1510:       assertFalse(node3.hasOneChild());
1511:       assertFalse(node3.isCast());
1512:       assertFalse(node3.isContinue());
1513:       assertFalse(node3.isFunction());
1514:       assertFalse(node3.hasMoreThanOneChild());
1515:       assertFalse(node3.isRegExp());
1516:       assertEquals(46, node3.getCharno());
1517:       assertFalse(node3.isWith());
1518:       assertFalse(node3.isInc());
1519:       assertFalse(node3.isIn());
1520:       assertNotSame(node3, node0);
1521:       assertNotSame(node3, node2);
1522:       assertFalse(node3.equals((Object)node1));
1523:       assertFalse(node3.equals((Object)node0));
1524:       assertFalse(node3.equals((Object)node2));
1525:       assertEquals(0.0, double0, 0.01);
1526:       
1527:       Node node4 = node0.getParent();
1528:       assertEquals(56, Node.CHANGE_TIME);
1529:       assertEquals(47, Node.IS_DISPATCHER);
1530:       assertEquals(2, Node.POST_FLAG);
1531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1532:       assertEquals(29, Node.JSDOC_INFO_PROP);
1533:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1534:       assertEquals(37, Node.OPT_ARG_NAME);
1535:       assertEquals(12, Node.COLUMN_BITS);
1536:       assertEquals(32, Node.INCRDECR_PROP);
1537:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1538:       assertEquals(30, Node.VAR_ARGS_NAME);
1539:       assertEquals(43, Node.IS_CONSTANT_NAME);
1540:       assertEquals(1, Node.DECR_FLAG);
1541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1542:       assertEquals(46, Node.IS_NAMESPACE);
1543:       assertEquals(50, Node.FREE_CALL);
1544:       assertEquals(54, Node.SLASH_V);
1545:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1546:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1547:       assertEquals(8, Node.FLAG_NO_THROWS);
1548:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1549:       assertEquals(40, Node.ORIGINALNAME_PROP);
1550:       assertEquals(48, Node.DIRECTIVES);
1551:       assertEquals(39, Node.EMPTY_BLOCK);
1552:       assertEquals(4095, Node.COLUMN_MASK);
1553:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1554:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1555:       assertEquals(36, Node.QUOTED_PROP);
1556:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1557:       assertEquals(57, Node.LAST_PROP);
1558:       assertEquals(53, Node.INPUT_ID);
1559:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1560:       assertEquals(49, Node.DIRECT_EVAL);
1561:       assertEquals(57, Node.REFLECTED_OBJECT);
1562:       assertEquals(55, Node.INFERRED_FUNCTION);
1563:       assertEquals(52, Node.LENGTH);
1564:       assertFalse(node0.isSetterDef());
1565:       assertFalse(node0.isParamList());
1566:       assertFalse(node0.isCall());
1567:       assertFalse(node0.isCatch());
1568:       assertFalse(node0.isVar());
1569:       assertEquals(0, node0.getChildCount());
1570:       assertFalse(node0.isBlock());
1571:       assertFalse(node0.isDebugger());
1572:       assertFalse(node0.isFunction());
1573:       assertFalse(node0.isTry());
1574:       assertFalse(node0.isArrayLit());
1575:       assertFalse(node0.isStringKey());
1576:       assertFalse(node0.isNE());
1577:       assertFalse(node0.isIf());
1578:       assertFalse(node0.isGetterDef());
1579:       assertEquals((-1), node0.getLineno());
1580:       assertFalse(node0.isCast());
1581:       assertFalse(node0.hasMoreThanOneChild());
1582:       assertFalse(node0.isContinue());
1583:       assertFalse(node0.hasOneChild());
1584:       assertEquals(39, node0.getType());
1585:       assertFalse(node0.isFor());
1586:       assertFalse(node0.isRegExp());
1587:       assertFalse(node0.isWith());
1588:       assertFalse(node0.isInc());
1589:       assertFalse(node0.isIn());
1590:       assertFalse(node0.isComma());
1591:       assertFalse(node0.isInstanceOf());
1592:       assertFalse(node0.isBreak());
1593:       assertFalse(node0.isGetProp());
1594:       assertFalse(node0.isFalse());
1595:       assertFalse(node0.isThrow());
1596:       assertFalse(node0.isHook());
1597:       assertFalse(node0.isThis());
1598:       assertFalse(node0.isSwitch());
1599:       assertEquals((-1), node0.getCharno());
1600:       assertFalse(node0.isString());
1601:       assertFalse(node0.isCase());
1602:       assertFalse(node0.isScript());
1603:       assertFalse(node0.isAnd());
1604:       assertFalse(node0.isObjectLit());
1605:       assertFalse(node0.isNot());
1606:       assertEquals((-1), node0.getSourcePosition());
1607:       assertFalse(node0.isDec());
1608:       assertFalse(node0.isTypeOf());
1609:       assertFalse(node0.isDelProp());
1610:       assertFalse(node0.isEmpty());
1611:       assertFalse(node0.isLabelName());
1612:       assertTrue(node0.isNumber());
1613:       assertFalse(node0.isGetElem());
1614:       assertFalse(node0.isAssign());
1615:       assertFalse(node0.isLabel());
1616:       assertFalse(node0.isAssignAdd());
1617:       assertFalse(node0.isWhile());
1618:       assertFalse(node0.hasChildren());
1619:       assertFalse(node0.isReturn());
1620:       assertFalse(node0.isDefaultCase());
1621:       assertFalse(node0.isVoid());
1622:       assertFalse(node0.isDo());
1623:       assertFalse(node0.isNew());
1624:       assertFalse(node0.isExprResult());
1625:       assertFalse(node0.isAdd());
1626:       assertFalse(node0.isName());
1627:       assertFalse(node0.isOr());
1628:       assertFalse(node0.isNull());
1629:       assertFalse(node0.isTrue());
1630:       assertNotSame(node0, node3);
1631:       assertSame(node0, node2);
1632:       assertNull(node4);
1633:       assertFalse(node0.equals((Object)node3));
1634:       assertFalse(node0.equals((Object)node1));
1635:       
1636:       boolean boolean5 = node2.hasChild(node3);
1637:       assertEquals(56, Node.CHANGE_TIME);
1638:       assertEquals(47, Node.IS_DISPATCHER);
1639:       assertEquals(2, Node.POST_FLAG);
1640:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1641:       assertEquals(29, Node.JSDOC_INFO_PROP);
1642:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1643:       assertEquals(37, Node.OPT_ARG_NAME);
1644:       assertEquals(12, Node.COLUMN_BITS);
1645:       assertEquals(32, Node.INCRDECR_PROP);
1646:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1647:       assertEquals(30, Node.VAR_ARGS_NAME);
1648:       assertEquals(43, Node.IS_CONSTANT_NAME);
1649:       assertEquals(1, Node.DECR_FLAG);
1650:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1651:       assertEquals(46, Node.IS_NAMESPACE);
1652:       assertEquals(50, Node.FREE_CALL);
1653:       assertEquals(54, Node.SLASH_V);
1654:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1655:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1656:       assertEquals(8, Node.FLAG_NO_THROWS);
1657:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1658:       assertEquals(40, Node.ORIGINALNAME_PROP);
1659:       assertEquals(48, Node.DIRECTIVES);
1660:       assertEquals(39, Node.EMPTY_BLOCK);
1661:       assertEquals(4095, Node.COLUMN_MASK);
1662:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1663:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1664:       assertEquals(36, Node.QUOTED_PROP);
1665:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1666:       assertEquals(57, Node.LAST_PROP);
1667:       assertEquals(53, Node.INPUT_ID);
1668:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1669:       assertEquals(49, Node.DIRECT_EVAL);
1670:       assertEquals(57, Node.REFLECTED_OBJECT);
1671:       assertEquals(55, Node.INFERRED_FUNCTION);
1672:       assertEquals(52, Node.LENGTH);
1673:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1674:       assertEquals(55, Node.INFERRED_FUNCTION);
1675:       assertEquals(43, Node.IS_CONSTANT_NAME);
1676:       assertEquals(48, Node.DIRECTIVES);
1677:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1678:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1679:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1680:       assertEquals(4095, Node.COLUMN_MASK);
1681:       assertEquals(57, Node.REFLECTED_OBJECT);
1682:       assertEquals(56, Node.CHANGE_TIME);
1683:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1684:       assertEquals(36, Node.QUOTED_PROP);
1685:       assertEquals(53, Node.INPUT_ID);
1686:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1687:       assertEquals(39, Node.EMPTY_BLOCK);
1688:       assertEquals(29, Node.JSDOC_INFO_PROP);
1689:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1690:       assertEquals(52, Node.LENGTH);
1691:       assertEquals(8, Node.FLAG_NO_THROWS);
1692:       assertEquals(1, Node.DECR_FLAG);
1693:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1694:       assertEquals(12, Node.COLUMN_BITS);
1695:       assertEquals(32, Node.INCRDECR_PROP);
1696:       assertEquals(46, Node.IS_NAMESPACE);
1697:       assertEquals(49, Node.DIRECT_EVAL);
1698:       assertEquals(57, Node.LAST_PROP);
1699:       assertEquals(37, Node.OPT_ARG_NAME);
1700:       assertEquals(2, Node.POST_FLAG);
1701:       assertEquals(47, Node.IS_DISPATCHER);
1702:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1703:       assertEquals(30, Node.VAR_ARGS_NAME);
1704:       assertEquals(40, Node.ORIGINALNAME_PROP);
1705:       assertEquals(54, Node.SLASH_V);
1706:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1707:       assertEquals(50, Node.FREE_CALL);
1708:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1709:       assertEquals(40, Node.ORIGINALNAME_PROP);
1710:       assertEquals(50, Node.FREE_CALL);
1711:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1712:       assertEquals(52, Node.LENGTH);
1713:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1714:       assertEquals(8, Node.FLAG_NO_THROWS);
1715:       assertEquals(48, Node.DIRECTIVES);
1716:       assertEquals(57, Node.REFLECTED_OBJECT);
1717:       assertEquals(54, Node.SLASH_V);
1718:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1719:       assertEquals(49, Node.DIRECT_EVAL);
1720:       assertEquals(1, Node.DECR_FLAG);
1721:       assertEquals(4095, Node.COLUMN_MASK);
1722:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1723:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1724:       assertEquals(32, Node.INCRDECR_PROP);
1725:       assertEquals(12, Node.COLUMN_BITS);
1726:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1727:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1728:       assertEquals(53, Node.INPUT_ID);
1729:       assertEquals(29, Node.JSDOC_INFO_PROP);
1730:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1731:       assertEquals(37, Node.OPT_ARG_NAME);
1732:       assertEquals(36, Node.QUOTED_PROP);
1733:       assertEquals(46, Node.IS_NAMESPACE);
1734:       assertEquals(43, Node.IS_CONSTANT_NAME);
1735:       assertEquals(56, Node.CHANGE_TIME);
1736:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1737:       assertEquals(30, Node.VAR_ARGS_NAME);
1738:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1739:       assertEquals(55, Node.INFERRED_FUNCTION);
1740:       assertEquals(39, Node.EMPTY_BLOCK);
1741:       assertEquals(2, Node.POST_FLAG);
1742:       assertEquals(57, Node.LAST_PROP);
1743:       assertEquals(47, Node.IS_DISPATCHER);
1744:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1745:       assertEquals(29, Node.JSDOC_INFO_PROP);
1746:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1747:       assertEquals(47, Node.IS_DISPATCHER);
1748:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1749:       assertEquals(37, Node.OPT_ARG_NAME);
1750:       assertEquals(56, Node.CHANGE_TIME);
1751:       assertEquals(2, Node.POST_FLAG);
1752:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1753:       assertEquals(12, Node.COLUMN_BITS);
1754:       assertEquals(43, Node.IS_CONSTANT_NAME);
1755:       assertEquals(32, Node.INCRDECR_PROP);
1756:       assertEquals(1, Node.DECR_FLAG);
1757:       assertEquals(46, Node.IS_NAMESPACE);
1758:       assertEquals(54, Node.SLASH_V);
1759:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1760:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1761:       assertEquals(50, Node.FREE_CALL);
1762:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1763:       assertEquals(40, Node.ORIGINALNAME_PROP);
1764:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1765:       assertEquals(48, Node.DIRECTIVES);
1766:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1767:       assertEquals(4095, Node.COLUMN_MASK);
1768:       assertEquals(30, Node.VAR_ARGS_NAME);
1769:       assertEquals(49, Node.DIRECT_EVAL);
1770:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1771:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1772:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1773:       assertEquals(57, Node.LAST_PROP);
1774:       assertEquals(52, Node.LENGTH);
1775:       assertEquals(39, Node.EMPTY_BLOCK);
1776:       assertEquals(53, Node.INPUT_ID);
1777:       assertEquals(57, Node.REFLECTED_OBJECT);
1778:       assertEquals(55, Node.INFERRED_FUNCTION);
1779:       assertEquals(36, Node.QUOTED_PROP);
1780:       assertEquals(8, Node.FLAG_NO_THROWS);
1781:       assertFalse(node0.isSetterDef());
1782:       assertFalse(node0.isParamList());
1783:       assertFalse(node0.isCall());
1784:       assertFalse(node0.isCatch());
1785:       assertFalse(node0.isVar());
1786:       assertEquals(0, node0.getChildCount());
1787:       assertFalse(node0.isBlock());
1788:       assertFalse(node0.isDebugger());
1789:       assertFalse(node0.isFunction());
1790:       assertFalse(node0.isTry());
1791:       assertFalse(node0.isArrayLit());
1792:       assertFalse(node0.isStringKey());
1793:       assertFalse(node0.isNE());
1794:       assertFalse(node0.isIf());
1795:       assertFalse(node0.isGetterDef());
1796:       assertEquals((-1), node0.getLineno());
1797:       assertFalse(node0.isCast());
1798:       assertFalse(node0.hasMoreThanOneChild());
1799:       assertFalse(node0.isContinue());
1800:       assertFalse(node0.hasOneChild());
1801:       assertEquals(39, node0.getType());
1802:       assertFalse(node0.isFor());
1803:       assertFalse(node0.isRegExp());
1804:       assertFalse(node0.isWith());
1805:       assertFalse(node0.isInc());
1806:       assertFalse(node0.isIn());
1807:       assertFalse(node0.isComma());
1808:       assertFalse(node0.isInstanceOf());
1809:       assertFalse(node0.isBreak());
1810:       assertFalse(node0.isGetProp());
1811:       assertFalse(node0.isFalse());
1812:       assertFalse(node0.isThrow());
1813:       assertFalse(node0.isHook());
1814:       assertFalse(node0.isThis());
1815:       assertFalse(node0.isSwitch());
1816:       assertEquals((-1), node0.getCharno());
1817:       assertFalse(node0.isString());
1818:       assertFalse(node0.isCase());
1819:       assertFalse(node0.isScript());
1820:       assertFalse(node0.isAnd());
1821:       assertFalse(node0.isObjectLit());
1822:       assertFalse(node0.isNot());
1823:       assertEquals((-1), node0.getSourcePosition());
1824:       assertFalse(node0.isDec());
1825:       assertFalse(node0.isTypeOf());
1826:       assertFalse(node0.isDelProp());
1827:       assertFalse(node0.isEmpty());
1828:       assertFalse(node0.isLabelName());
1829:       assertTrue(node0.isNumber());
1830:       assertFalse(node0.isGetElem());
1831:       assertFalse(node0.isAssign());
1832:       assertFalse(node0.isLabel());
1833:       assertFalse(node0.isAssignAdd());
1834:       assertFalse(node0.isWhile());
1835:       assertFalse(node0.hasChildren());
1836:       assertFalse(node0.isReturn());
1837:       assertFalse(node0.isDefaultCase());
1838:       assertFalse(node0.isVoid());
1839:       assertFalse(node0.isDo());
1840:       assertFalse(node0.isNew());
1841:       assertFalse(node0.isExprResult());
1842:       assertFalse(node0.isAdd());
1843:       assertFalse(node0.isName());
1844:       assertFalse(node0.isOr());
1845:       assertFalse(node0.isNull());
1846:       assertFalse(node0.isTrue());
1847:       assertFalse(node1.isCase());
1848:       assertFalse(node1.isString());
1849:       assertFalse(node1.isSwitch());
1850:       assertEquals(48, node1.getCharno());
1851:       assertFalse(node1.isHook());
1852:       assertFalse(node1.isThrow());
1853:       assertFalse(node1.isEmpty());
1854:       assertFalse(node1.isBreak());
1855:       assertFalse(node1.isIf());
1856:       assertFalse(node1.isDelProp());
1857:       assertFalse(node1.isInc());
1858:       assertFalse(node1.isTrue());
1859:       assertFalse(node1.isNE());
1860:       assertFalse(node1.isIn());
1861:       assertFalse(node1.isAnd());
1862:       assertFalse(node1.isVoid());
1863:       assertEquals(0, node1.getLineno());
1864:       assertFalse(node1.isExprResult());
1865:       assertEquals(48, node1.getSourcePosition());
1866:       assertFalse(node1.isComma());
1867:       assertFalse(node1.isFunction());
1868:       assertFalse(node1.isFalse());
1869:       assertFalse(node1.isCast());
1870:       assertFalse(node1.isGetProp());
1871:       assertFalse(node1.isDebugger());
1872:       assertFalse(node1.isNot());
1873:       assertFalse(node1.isObjectLit());
1874:       assertFalse(node1.isContinue());
1875:       assertFalse(node1.isWhile());
1876:       assertFalse(node1.isDo());
1877:       assertFalse(node1.isBlock());
1878:       assertFalse(node1.isLabel());
1879:       assertFalse(node1.isAssignAdd());
1880:       assertFalse(node1.isReturn());
1881:       assertFalse(node1.isDec());
1882:       assertFalse(node1.isTypeOf());
1883:       assertFalse(node1.hasChildren());
1884:       assertFalse(node1.hasMoreThanOneChild());
1885:       assertFalse(node1.isAssign());
1886:       assertFalse(node1.isGetElem());
1887:       assertFalse(node1.isName());
1888:       assertFalse(node1.isCall());
1889:       assertFalse(node1.isVar());
1890:       assertFalse(node1.isNew());
1891:       assertEquals(15, node1.getType());
1892:       assertFalse(node1.isSetterDef());
1893:       assertFalse(node1.isAdd());
1894:       assertFalse(node1.isNull());
1895:       assertFalse(node1.isOr());
1896:       assertFalse(node1.isCatch());
1897:       assertFalse(node1.isDefaultCase());
1898:       assertFalse(node1.isThis());
1899:       assertFalse(node1.isInstanceOf());
1900:       assertFalse(node1.isWith());
1901:       assertEquals(0, node1.getChildCount());
1902:       assertFalse(node1.isRegExp());
1903:       assertFalse(node1.isStringKey());
1904:       assertFalse(node1.isFor());
1905:       assertFalse(node1.hasOneChild());
1906:       assertFalse(node1.isArrayLit());
1907:       assertFalse(node1.isTry());
1908:       assertFalse(node1.isLabelName());
1909:       assertFalse(node1.isParamList());
1910:       assertFalse(node1.isScript());
1911:       assertFalse(node1.isNumber());
1912:       assertFalse(node1.isGetterDef());
1913:       assertFalse(node2.isGetElem());
1914:       assertFalse(node2.isAssign());
1915:       assertFalse(node2.isLabelName());
1916:       assertFalse(node2.hasChildren());
1917:       assertEquals((-1), node2.getSourcePosition());
1918:       assertFalse(node2.isDec());
1919:       assertFalse(node2.isTypeOf());
1920:       assertFalse(node2.isCast());
1921:       assertFalse(node2.isOr());
1922:       assertEquals((-1), node2.getLineno());
1923:       assertFalse(node2.isExprResult());
1924:       assertFalse(node2.isNot());
1925:       assertFalse(node2.isObjectLit());
1926:       assertEquals(39, node2.getType());
1927:       assertFalse(node2.isInstanceOf());
1928:       assertFalse(node2.isScript());
1929:       assertFalse(node2.isWith());
1930:       assertFalse(node2.hasMoreThanOneChild());
1931:       assertFalse(node2.isBlock());
1932:       assertFalse(node2.isComma());
1933:       assertFalse(node2.isThis());
1934:       assertFalse(node2.isReturn());
1935:       assertFalse(node2.isGetProp());
1936:       assertFalse(node2.hasOneChild());
1937:       assertFalse(node2.isWhile());
1938:       assertFalse(node2.isFalse());
1939:       assertFalse(node2.isThrow());
1940:       assertFalse(node2.isAnd());
1941:       assertFalse(node2.isFunction());
1942:       assertFalse(node2.isContinue());
1943:       assertFalse(node2.isIn());
1944:       assertFalse(node2.isInc());
1945:       assertFalse(node2.isSetterDef());
1946:       assertFalse(node2.isEmpty());
1947:       assertFalse(node2.isFor());
1948:       assertFalse(node2.isArrayLit());
1949:       assertFalse(node2.isGetterDef());
1950:       assertFalse(node2.isVoid());
1951:       assertFalse(node2.isTrue());
1952:       assertFalse(node2.isDebugger());
1953:       assertFalse(node2.isNE());
1954:       assertFalse(node2.isDelProp());
1955:       assertFalse(node2.isIf());
1956:       assertFalse(node2.isCase());
1957:       assertFalse(node2.isRegExp());
1958:       assertFalse(node2.isString());
1959:       assertFalse(node2.isCatch());
1960:       assertFalse(node2.isTry());
1961:       assertTrue(node2.isNumber());
1962:       assertFalse(node2.isHook());
1963:       assertFalse(node2.isName());
1964:       assertFalse(node2.isStringKey());
1965:       assertFalse(node2.isCall());
1966:       assertFalse(node2.isBreak());
1967:       assertEquals((-1), node2.getCharno());
1968:       assertFalse(node2.isNull());
1969:       assertFalse(node2.isParamList());
1970:       assertFalse(node2.isSwitch());
1971:       assertFalse(node2.isDo());
1972:       assertEquals(0, node2.getChildCount());
1973:       assertFalse(node2.isNew());
1974:       assertFalse(node2.isAdd());
1975:       assertFalse(node2.isLabel());
1976:       assertFalse(node2.isVar());
1977:       assertFalse(node2.isDefaultCase());
1978:       assertFalse(node2.isAssignAdd());
1979:       assertFalse(node3.isNull());
1980:       assertFalse(node3.isStringKey());
1981:       assertFalse(node3.isCall());
1982:       assertFalse(node3.isParamList());
1983:       assertFalse(node3.isSetterDef());
1984:       assertFalse(node3.isName());
1985:       assertFalse(node3.isBlock());
1986:       assertFalse(node3.isVar());
1987:       assertFalse(node3.isCatch());
1988:       assertEquals(0, node3.getChildCount());
1989:       assertFalse(node3.isWhile());
1990:       assertEquals(39, node3.getType());
1991:       assertFalse(node3.isTry());
1992:       assertFalse(node3.isDebugger());
1993:       assertFalse(node3.hasChildren());
1994:       assertFalse(node3.isDelProp());
1995:       assertFalse(node3.isEmpty());
1996:       assertFalse(node3.isGetElem());
1997:       assertFalse(node3.isArrayLit());
1998:       assertFalse(node3.isLabelName());
1999:       assertTrue(node3.isNumber());
2000:       assertFalse(node3.isReturn());
2001:       assertFalse(node3.isAssignAdd());
2002:       assertFalse(node3.isTypeOf());
2003:       assertFalse(node3.isLabel());
2004:       assertFalse(node3.isAssign());
2005:       assertFalse(node3.isDec());
2006:       assertFalse(node3.isDefaultCase());
2007:       assertEquals(213038, node3.getSourcePosition());
2008:       assertFalse(node3.isExprResult());
2009:       assertFalse(node3.isVoid());
2010:       assertFalse(node3.isNew());
2011:       assertFalse(node3.isDo());
2012:       assertFalse(node3.isAdd());
2013:       assertFalse(node3.isTrue());
2014:       assertFalse(node3.isOr());
2015:       assertFalse(node3.isBreak());
2016:       assertFalse(node3.isThrow());
2017:       assertFalse(node3.isGetProp());
2018:       assertFalse(node3.isHook());
2019:       assertFalse(node3.isInstanceOf());
2020:       assertFalse(node3.isThis());
2021:       assertFalse(node3.isFalse());
2022:       assertFalse(node3.isComma());
2023:       assertFalse(node3.isString());
2024:       assertEquals(52, node3.getLineno());
2025:       assertFalse(node3.isScript());
2026:       assertFalse(node3.isAnd());
2027:       assertFalse(node3.isSwitch());
2028:       assertFalse(node3.isCase());
2029:       assertFalse(node3.isObjectLit());
2030:       assertFalse(node3.isNot());
2031:       assertFalse(node3.isGetterDef());
2032:       assertFalse(node3.isIf());
2033:       assertFalse(node3.isFor());
2034:       assertFalse(node3.isNE());
2035:       assertFalse(node3.hasOneChild());
2036:       assertFalse(node3.isCast());
2037:       assertFalse(node3.isContinue());
2038:       assertFalse(node3.isFunction());
2039:       assertFalse(node3.hasMoreThanOneChild());
2040:       assertFalse(node3.isRegExp());
2041:       assertEquals(46, node3.getCharno());
2042:       assertFalse(node3.isWith());
2043:       assertFalse(node3.isInc());
2044:       assertFalse(node3.isIn());
2045:       assertNotSame(node0, node3);
2046:       assertSame(node0, node2);
2047:       assertSame(node2, node0);
2048:       assertNotSame(node2, node3);
2049:       assertNotSame(node3, node0);
2050:       assertNotSame(node3, node2);
2051:       assertFalse(node0.equals((Object)node3));
2052:       assertFalse(node0.equals((Object)node1));
2053:       assertFalse(node1.equals((Object)node0));
2054:       assertFalse(node1.equals((Object)node3));
2055:       assertFalse(node1.equals((Object)node2));
2056:       assertFalse(node2.equals((Object)node3));
2057:       assertFalse(node2.equals((Object)node1));
2058:       assertFalse(node3.equals((Object)node1));
2059:       assertFalse(node3.equals((Object)node0));
2060:       assertFalse(node3.equals((Object)node2));
2061:       assertTrue(boolean5 == boolean0);
2062:       assertTrue(boolean5 == boolean2);
2063:       assertTrue(boolean5 == boolean1);
2064:       assertTrue(boolean5 == boolean3);
2065:       assertTrue(boolean5 == boolean4);
2066:       assertFalse(boolean5);
2067:       
2068:       boolean boolean6 = node0.isNumber();
2069:       assertEquals(56, Node.CHANGE_TIME);
2070:       assertEquals(47, Node.IS_DISPATCHER);
2071:       assertEquals(2, Node.POST_FLAG);
2072:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2073:       assertEquals(29, Node.JSDOC_INFO_PROP);
2074:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2075:       assertEquals(37, Node.OPT_ARG_NAME);
2076:       assertEquals(12, Node.COLUMN_BITS);
2077:       assertEquals(32, Node.INCRDECR_PROP);
2078:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2079:       assertEquals(30, Node.VAR_ARGS_NAME);
2080:       assertEquals(43, Node.IS_CONSTANT_NAME);
2081:       assertEquals(1, Node.DECR_FLAG);
2082:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2083:       assertEquals(46, Node.IS_NAMESPACE);
2084:       assertEquals(50, Node.FREE_CALL);
2085:       assertEquals(54, Node.SLASH_V);
2086:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2087:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2088:       assertEquals(8, Node.FLAG_NO_THROWS);
2089:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2090:       assertEquals(40, Node.ORIGINALNAME_PROP);
2091:       assertEquals(48, Node.DIRECTIVES);
2092:       assertEquals(39, Node.EMPTY_BLOCK);
2093:       assertEquals(4095, Node.COLUMN_MASK);
2094:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2095:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2096:       assertEquals(36, Node.QUOTED_PROP);
2097:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2098:       assertEquals(57, Node.LAST_PROP);
2099:       assertEquals(53, Node.INPUT_ID);
2100:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2101:       assertEquals(49, Node.DIRECT_EVAL);
2102:       assertEquals(57, Node.REFLECTED_OBJECT);
2103:       assertEquals(55, Node.INFERRED_FUNCTION);
2104:       assertEquals(52, Node.LENGTH);
2105:       assertFalse(node0.isSetterDef());
2106:       assertFalse(node0.isParamList());
2107:       assertFalse(node0.isCall());
2108:       assertFalse(node0.isCatch());
2109:       assertFalse(node0.isVar());
2110:       assertEquals(0, node0.getChildCount());
2111:       assertFalse(node0.isBlock());
2112:       assertFalse(node0.isDebugger());
2113:       assertFalse(node0.isFunction());
2114:       assertFalse(node0.isTry());
2115:       assertFalse(node0.isArrayLit());
2116:       assertFalse(node0.isStringKey());
2117:       assertFalse(node0.isNE());
2118:       assertFalse(node0.isIf());
2119:       assertFalse(node0.isGetterDef());
2120:       assertEquals((-1), node0.getLineno());
2121:       assertFalse(node0.isCast());
2122:       assertFalse(node0.hasMoreThanOneChild());
2123:       assertFalse(node0.isContinue());
2124:       assertFalse(node0.hasOneChild());
2125:       assertEquals(39, node0.getType());
2126:       assertFalse(node0.isFor());
2127:       assertFalse(node0.isRegExp());
2128:       assertFalse(node0.isWith());
2129:       assertFalse(node0.isInc());
2130:       assertFalse(node0.isIn());
2131:       assertFalse(node0.isComma());
2132:       assertFalse(node0.isInstanceOf());
2133:       assertFalse(node0.isBreak());
2134:       assertFalse(node0.isGetProp());
2135:       assertFalse(node0.isFalse());
2136:       assertFalse(node0.isThrow());
2137:       assertFalse(node0.isHook());
2138:       assertFalse(node0.isThis());
2139:       assertFalse(node0.isSwitch());
2140:       assertEquals((-1), node0.getCharno());
2141:       assertFalse(node0.isString());
2142:       assertFalse(node0.isCase());
2143:       assertFalse(node0.isScript());
2144:       assertFalse(node0.isAnd());
2145:       assertFalse(node0.isObjectLit());
2146:       assertFalse(node0.isNot());
2147:       assertEquals((-1), node0.getSourcePosition());
2148:       assertFalse(node0.isDec());
2149:       assertFalse(node0.isTypeOf());
2150:       assertFalse(node0.isDelProp());
2151:       assertFalse(node0.isEmpty());
2152:       assertFalse(node0.isLabelName());
2153:       assertTrue(node0.isNumber());
2154:       assertFalse(node0.isGetElem());
2155:       assertFalse(node0.isAssign());
2156:       assertFalse(node0.isLabel());
2157:       assertFalse(node0.isAssignAdd());
2158:       assertFalse(node0.isWhile());
2159:       assertFalse(node0.hasChildren());
2160:       assertFalse(node0.isReturn());
2161:       assertFalse(node0.isDefaultCase());
2162:       assertFalse(node0.isVoid());
2163:       assertFalse(node0.isDo());
2164:       assertFalse(node0.isNew());
2165:       assertFalse(node0.isExprResult());
2166:       assertFalse(node0.isAdd());
2167:       assertFalse(node0.isName());
2168:       assertFalse(node0.isOr());
2169:       assertFalse(node0.isNull());
2170:       assertFalse(node0.isTrue());
2171:       assertNotSame(node0, node3);
2172:       assertSame(node0, node2);
2173:       assertFalse(node0.equals((Object)node3));
2174:       assertFalse(node0.equals((Object)node1));
2175:       assertFalse(boolean6 == boolean3);
2176:       assertFalse(boolean6 == boolean1);
2177:       assertFalse(boolean6 == boolean2);
2178:       assertFalse(boolean6 == boolean4);
2179:       assertFalse(boolean6 == boolean0);
2180:       assertFalse(boolean6 == boolean5);
2181:       assertTrue(boolean6);
2182:   }
2183: }
RegularFileObject[/tmp/EvoSuite_100_1628157519303/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:39 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_100_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_100_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_100_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:39.830 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertNotNull(iterable0);

boolean boolean0 = node0.isDec();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(boolean0);

Node node1 = new Node(15, 0, 48);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertEquals(48, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertEquals(0, node1.getLineno());
assertFalse(node1.isExprResult());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isComma());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertEquals(15, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = node0.clonePropsFrom(node1);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertEquals(48, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertEquals(0, node1.getLineno());
assertFalse(node1.isExprResult());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isComma());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertEquals(15, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(39, node2.getType());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isAnd());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isString());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertTrue(node2.isNumber());
assertFalse(node2.isHook());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertSame(node0, node2);
assertSame(node2, node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean1 = node0.isFromExterns();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

boolean boolean2 = node0.isBreak();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

boolean boolean3 = node0.isCatch();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);

Node node3 = Node.newNumber(0.0, 52, 46);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isCall());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isWhile());
assertEquals(39, node3.getType());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertTrue(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isTypeOf());
assertFalse(node3.isLabel());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isDefaultCase());
assertEquals(213038, node3.getSourcePosition());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isGetProp());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThis());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isString());
assertEquals(52, node3.getLineno());
assertFalse(node3.isScript());
assertFalse(node3.isAnd());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isFunction());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertEquals(46, node3.getCharno());
assertFalse(node3.isWith());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertNotNull(node3);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));

boolean boolean4 = node3.isQuotedString();
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isCall());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isWhile());
assertEquals(39, node3.getType());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertTrue(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isTypeOf());
assertFalse(node3.isLabel());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isDefaultCase());
assertEquals(213038, node3.getSourcePosition());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isGetProp());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThis());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isString());
assertEquals(52, node3.getLineno());
assertFalse(node3.isScript());
assertFalse(node3.isAnd());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isFunction());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertEquals(46, node3.getCharno());
assertFalse(node3.isWith());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4);

Set<String> set0 = node0.getDirectives();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertNotSame(node0, node3);
assertSame(node0, node2);
assertNull(set0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));

double double0 = node3.getDouble();
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isCall());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isWhile());
assertEquals(39, node3.getType());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertTrue(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isTypeOf());
assertFalse(node3.isLabel());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isDefaultCase());
assertEquals(213038, node3.getSourcePosition());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isGetProp());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThis());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isString());
assertEquals(52, node3.getLineno());
assertFalse(node3.isScript());
assertFalse(node3.isAnd());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isFunction());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertEquals(46, node3.getCharno());
assertFalse(node3.isWith());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(0.0, double0, 0.01);

Node node4 = node0.getParent();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertNotSame(node0, node3);
assertSame(node0, node2);
assertNull(node4);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));

boolean boolean5 = node2.hasChild(node3);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertEquals(48, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertEquals(0, node1.getLineno());
assertFalse(node1.isExprResult());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isComma());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertEquals(15, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(39, node2.getType());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isAnd());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isString());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertTrue(node2.isNumber());
assertFalse(node2.isHook());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isCall());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isWhile());
assertEquals(39, node3.getType());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertTrue(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isTypeOf());
assertFalse(node3.isLabel());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isDefaultCase());
assertEquals(213038, node3.getSourcePosition());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isGetProp());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThis());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isString());
assertEquals(52, node3.getLineno());
assertFalse(node3.isScript());
assertFalse(node3.isAnd());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isFunction());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertEquals(46, node3.getCharno());
assertFalse(node3.isWith());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertNotSame(node0, node3);
assertSame(node0, node2);
assertSame(node2, node0);
assertNotSame(node2, node3);
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertFalse(boolean5);

boolean boolean6 = node0.isNumber();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertTrue(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertNotSame(node0, node3);
assertSame(node0, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(boolean6 == boolean3);
assertFalse(boolean6 == boolean1);
assertFalse(boolean6 == boolean2);
assertFalse(boolean6 == boolean4);
assertFalse(boolean6 == boolean0);
assertFalse(boolean6 == boolean5);
assertTrue(boolean6);


[MASTER] 09:58:41.185 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_107_1628157520811/com/google/javascript/rhino/Node_107_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_107_1628157520811/com/google/javascript/rhino/Node_107_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:41.185 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:41.185 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:41.186 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 163
[MASTER] 09:58:41.193 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_107_1628157520811/com/google/javascript/rhino/Node_107_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:40 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_107_tmp__ESTest extends Node_107_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertEquals(12, Node.COLUMN_BITS);
23:       assertEquals(51, Node.STATIC_SOURCE_FILE);
24:       assertEquals(32, Node.INCRDECR_PROP);
25:       assertEquals(30, Node.VAR_ARGS_NAME);
26:       assertEquals(46, Node.IS_NAMESPACE);
27:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
28:       assertEquals(57, Node.LAST_PROP);
29:       assertEquals(29, Node.JSDOC_INFO_PROP);
30:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
31:       assertEquals(1, Node.DECR_FLAG);
32:       assertEquals(15, Node.NO_SIDE_EFFECTS);
33:       assertEquals(50, Node.FREE_CALL);
34:       assertEquals(47, Node.IS_DISPATCHER);
35:       assertEquals(54, Node.SLASH_V);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(43, Node.IS_CONSTANT_NAME);
38:       assertEquals(40, Node.ORIGINALNAME_PROP);
39:       assertEquals(55, Node.INFERRED_FUNCTION);
40:       assertEquals(4095, Node.COLUMN_MASK);
41:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
42:       assertEquals(36, Node.QUOTED_PROP);
43:       assertEquals(8, Node.FLAG_NO_THROWS);
44:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
45:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
46:       assertEquals(39, Node.EMPTY_BLOCK);
47:       assertEquals(53, Node.INPUT_ID);
48:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
49:       assertEquals(52, Node.LENGTH);
50:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
51:       assertEquals(57, Node.REFLECTED_OBJECT);
52:       assertEquals(37, Node.OPT_ARG_NAME);
53:       assertEquals(56, Node.CHANGE_TIME);
54:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
55:       assertEquals(48, Node.DIRECTIVES);
56:       assertEquals(49, Node.DIRECT_EVAL);
57:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
58:       assertFalse(node0.isAnd());
59:       assertFalse(node0.isObjectLit());
60:       assertFalse(node0.isNot());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isScript());
63:       assertFalse(node0.isFalse());
64:       assertFalse(node0.isLabelName());
65:       assertFalse(node0.isThrow());
66:       assertFalse(node0.isSwitch());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.isCast());
69:       assertFalse(node0.isContinue());
70:       assertFalse(node0.hasMoreThanOneChild());
71:       assertFalse(node0.isCase());
72:       assertEquals(39, node0.getType());
73:       assertEquals((-1), node0.getCharno());
74:       assertFalse(node0.isInc());
75:       assertFalse(node0.isGetterDef());
76:       assertFalse(node0.isIn());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.isIf());
79:       assertFalse(node0.isHook());
80:       assertFalse(node0.isBlock());
81:       assertFalse(node0.isFor());
82:       assertFalse(node0.isNE());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isRegExp());
85:       assertEquals((-1), node0.getLineno());
86:       assertFalse(node0.isWith());
87:       assertFalse(node0.isInstanceOf());
88:       assertFalse(node0.isCatch());
89:       assertEquals(0, node0.getChildCount());
90:       assertFalse(node0.isDefaultCase());
91:       assertFalse(node0.isDebugger());
92:       assertFalse(node0.isTrue());
93:       assertFalse(node0.isSetterDef());
94:       assertFalse(node0.isTry());
95:       assertFalse(node0.isArrayLit());
96:       assertFalse(node0.isVar());
97:       assertFalse(node0.isStringKey());
98:       assertFalse(node0.isFunction());
99:       assertFalse(node0.isParamList());
100:       assertFalse(node0.isDo());
101:       assertFalse(node0.isWhile());
102:       assertFalse(node0.isReturn());
103:       assertFalse(node0.isAssignAdd());
104:       assertEquals((-1), node0.getSourcePosition());
105:       assertFalse(node0.isNew());
106:       assertFalse(node0.isOr());
107:       assertTrue(node0.isNumber());
108:       assertFalse(node0.isString());
109:       assertFalse(node0.isEmpty());
110:       assertFalse(node0.isAdd());
111:       assertFalse(node0.isCall());
112:       assertFalse(node0.isGetElem());
113:       assertFalse(node0.isName());
114:       assertFalse(node0.isAssign());
115:       assertFalse(node0.isDelProp());
116:       assertFalse(node0.hasChildren());
117:       assertFalse(node0.isNull());
118:       assertFalse(node0.isExprResult());
119:       assertFalse(node0.isVoid());
120:       assertFalse(node0.isTypeOf());
121:       assertFalse(node0.isComma());
122:       assertFalse(node0.isDec());
123:       assertFalse(node0.isBreak());
124:       assertNotNull(node0);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertEquals(12, Node.COLUMN_BITS);
128:       assertEquals(51, Node.STATIC_SOURCE_FILE);
129:       assertEquals(32, Node.INCRDECR_PROP);
130:       assertEquals(30, Node.VAR_ARGS_NAME);
131:       assertEquals(46, Node.IS_NAMESPACE);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(57, Node.LAST_PROP);
134:       assertEquals(29, Node.JSDOC_INFO_PROP);
135:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
136:       assertEquals(1, Node.DECR_FLAG);
137:       assertEquals(15, Node.NO_SIDE_EFFECTS);
138:       assertEquals(50, Node.FREE_CALL);
139:       assertEquals(47, Node.IS_DISPATCHER);
140:       assertEquals(54, Node.SLASH_V);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(43, Node.IS_CONSTANT_NAME);
143:       assertEquals(40, Node.ORIGINALNAME_PROP);
144:       assertEquals(55, Node.INFERRED_FUNCTION);
145:       assertEquals(4095, Node.COLUMN_MASK);
146:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
147:       assertEquals(36, Node.QUOTED_PROP);
148:       assertEquals(8, Node.FLAG_NO_THROWS);
149:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
150:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
151:       assertEquals(39, Node.EMPTY_BLOCK);
152:       assertEquals(53, Node.INPUT_ID);
153:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
154:       assertEquals(52, Node.LENGTH);
155:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
156:       assertEquals(57, Node.REFLECTED_OBJECT);
157:       assertEquals(37, Node.OPT_ARG_NAME);
158:       assertEquals(56, Node.CHANGE_TIME);
159:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
160:       assertEquals(48, Node.DIRECTIVES);
161:       assertEquals(49, Node.DIRECT_EVAL);
162:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
163:       assertFalse(iterable0.contains(node0));
164:       assertFalse(node0.isAnd());
165:       assertFalse(node0.isObjectLit());
166:       assertFalse(node0.isNot());
167:       assertFalse(node0.isGetProp());
168:       assertFalse(node0.isScript());
169:       assertFalse(node0.isFalse());
170:       assertFalse(node0.isLabelName());
171:       assertFalse(node0.isThrow());
172:       assertFalse(node0.isSwitch());
173:       assertFalse(node0.isLabel());
174:       assertFalse(node0.isCast());
175:       assertFalse(node0.isContinue());
176:       assertFalse(node0.hasMoreThanOneChild());
177:       assertFalse(node0.isCase());
178:       assertEquals(39, node0.getType());
179:       assertEquals((-1), node0.getCharno());
180:       assertFalse(node0.isInc());
181:       assertFalse(node0.isGetterDef());
182:       assertFalse(node0.isIn());
183:       assertFalse(node0.hasOneChild());
184:       assertFalse(node0.isIf());
185:       assertFalse(node0.isHook());
186:       assertFalse(node0.isBlock());
187:       assertFalse(node0.isFor());
188:       assertFalse(node0.isNE());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isRegExp());
191:       assertEquals((-1), node0.getLineno());
192:       assertFalse(node0.isWith());
193:       assertFalse(node0.isInstanceOf());
194:       assertFalse(node0.isCatch());
195:       assertEquals(0, node0.getChildCount());
196:       assertFalse(node0.isDefaultCase());
197:       assertFalse(node0.isDebugger());
198:       assertFalse(node0.isTrue());
199:       assertFalse(node0.isSetterDef());
200:       assertFalse(node0.isTry());
201:       assertFalse(node0.isArrayLit());
202:       assertFalse(node0.isVar());
203:       assertFalse(node0.isStringKey());
204:       assertFalse(node0.isFunction());
205:       assertFalse(node0.isParamList());
206:       assertFalse(node0.isDo());
207:       assertFalse(node0.isWhile());
208:       assertFalse(node0.isReturn());
209:       assertFalse(node0.isAssignAdd());
210:       assertEquals((-1), node0.getSourcePosition());
211:       assertFalse(node0.isNew());
212:       assertFalse(node0.isOr());
213:       assertTrue(node0.isNumber());
214:       assertFalse(node0.isString());
215:       assertFalse(node0.isEmpty());
216:       assertFalse(node0.isAdd());
217:       assertFalse(node0.isCall());
218:       assertFalse(node0.isGetElem());
219:       assertFalse(node0.isName());
220:       assertFalse(node0.isAssign());
221:       assertFalse(node0.isDelProp());
222:       assertFalse(node0.hasChildren());
223:       assertFalse(node0.isNull());
224:       assertFalse(node0.isExprResult());
225:       assertFalse(node0.isVoid());
226:       assertFalse(node0.isTypeOf());
227:       assertFalse(node0.isComma());
228:       assertFalse(node0.isDec());
229:       assertFalse(node0.isBreak());
230:       assertNotNull(iterable0);
231:       
232:       boolean boolean0 = node0.isDec();
233:       assertEquals(12, Node.COLUMN_BITS);
234:       assertEquals(51, Node.STATIC_SOURCE_FILE);
235:       assertEquals(32, Node.INCRDECR_PROP);
236:       assertEquals(30, Node.VAR_ARGS_NAME);
237:       assertEquals(46, Node.IS_NAMESPACE);
238:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
239:       assertEquals(57, Node.LAST_PROP);
240:       assertEquals(29, Node.JSDOC_INFO_PROP);
241:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
242:       assertEquals(1, Node.DECR_FLAG);
243:       assertEquals(15, Node.NO_SIDE_EFFECTS);
244:       assertEquals(50, Node.FREE_CALL);
245:       assertEquals(47, Node.IS_DISPATCHER);
246:       assertEquals(54, Node.SLASH_V);
247:       assertEquals(2, Node.POST_FLAG);
248:       assertEquals(43, Node.IS_CONSTANT_NAME);
249:       assertEquals(40, Node.ORIGINALNAME_PROP);
250:       assertEquals(55, Node.INFERRED_FUNCTION);
251:       assertEquals(4095, Node.COLUMN_MASK);
252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
253:       assertEquals(36, Node.QUOTED_PROP);
254:       assertEquals(8, Node.FLAG_NO_THROWS);
255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
257:       assertEquals(39, Node.EMPTY_BLOCK);
258:       assertEquals(53, Node.INPUT_ID);
259:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
260:       assertEquals(52, Node.LENGTH);
261:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
262:       assertEquals(57, Node.REFLECTED_OBJECT);
263:       assertEquals(37, Node.OPT_ARG_NAME);
264:       assertEquals(56, Node.CHANGE_TIME);
265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
266:       assertEquals(48, Node.DIRECTIVES);
267:       assertEquals(49, Node.DIRECT_EVAL);
268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
269:       assertFalse(node0.isAnd());
270:       assertFalse(node0.isObjectLit());
271:       assertFalse(node0.isNot());
272:       assertFalse(node0.isGetProp());
273:       assertFalse(node0.isScript());
274:       assertFalse(node0.isFalse());
275:       assertFalse(node0.isLabelName());
276:       assertFalse(node0.isThrow());
277:       assertFalse(node0.isSwitch());
278:       assertFalse(node0.isLabel());
279:       assertFalse(node0.isCast());
280:       assertFalse(node0.isContinue());
281:       assertFalse(node0.hasMoreThanOneChild());
282:       assertFalse(node0.isCase());
283:       assertEquals(39, node0.getType());
284:       assertEquals((-1), node0.getCharno());
285:       assertFalse(node0.isInc());
286:       assertFalse(node0.isGetterDef());
287:       assertFalse(node0.isIn());
288:       assertFalse(node0.hasOneChild());
289:       assertFalse(node0.isIf());
290:       assertFalse(node0.isHook());
291:       assertFalse(node0.isBlock());
292:       assertFalse(node0.isFor());
293:       assertFalse(node0.isNE());
294:       assertFalse(node0.isThis());
295:       assertFalse(node0.isRegExp());
296:       assertEquals((-1), node0.getLineno());
297:       assertFalse(node0.isWith());
298:       assertFalse(node0.isInstanceOf());
299:       assertFalse(node0.isCatch());
300:       assertEquals(0, node0.getChildCount());
301:       assertFalse(node0.isDefaultCase());
302:       assertFalse(node0.isDebugger());
303:       assertFalse(node0.isTrue());
304:       assertFalse(node0.isSetterDef());
305:       assertFalse(node0.isTry());
306:       assertFalse(node0.isArrayLit());
307:       assertFalse(node0.isVar());
308:       assertFalse(node0.isStringKey());
309:       assertFalse(node0.isFunction());
310:       assertFalse(node0.isParamList());
311:       assertFalse(node0.isDo());
312:       assertFalse(node0.isWhile());
313:       assertFalse(node0.isReturn());
314:       assertFalse(node0.isAssignAdd());
315:       assertEquals((-1), node0.getSourcePosition());
316:       assertFalse(node0.isNew());
317:       assertFalse(node0.isOr());
318:       assertTrue(node0.isNumber());
319:       assertFalse(node0.isString());
320:       assertFalse(node0.isEmpty());
321:       assertFalse(node0.isAdd());
322:       assertFalse(node0.isCall());
323:       assertFalse(node0.isGetElem());
324:       assertFalse(node0.isName());
325:       assertFalse(node0.isAssign());
326:       assertFalse(node0.isDelProp());
327:       assertFalse(node0.hasChildren());
328:       assertFalse(node0.isNull());
329:       assertFalse(node0.isExprResult());
330:       assertFalse(node0.isVoid());
331:       assertFalse(node0.isTypeOf());
332:       assertFalse(node0.isComma());
333:       assertFalse(node0.isDec());
334:       assertFalse(node0.isBreak());
335:       assertFalse(boolean0);
336:       
337:       Node node1 = new Node((-2812), 31, 57);
338:       assertEquals(32, Node.INCRDECR_PROP);
339:       assertEquals(37, Node.OPT_ARG_NAME);
340:       assertEquals(51, Node.STATIC_SOURCE_FILE);
341:       assertEquals(2, Node.POST_FLAG);
342:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
343:       assertEquals(29, Node.JSDOC_INFO_PROP);
344:       assertEquals(30, Node.VAR_ARGS_NAME);
345:       assertEquals(47, Node.IS_DISPATCHER);
346:       assertEquals(1, Node.DECR_FLAG);
347:       assertEquals(12, Node.COLUMN_BITS);
348:       assertEquals(57, Node.LAST_PROP);
349:       assertEquals(40, Node.ORIGINALNAME_PROP);
350:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
351:       assertEquals(50, Node.FREE_CALL);
352:       assertEquals(46, Node.IS_NAMESPACE);
353:       assertEquals(54, Node.SLASH_V);
354:       assertEquals(43, Node.IS_CONSTANT_NAME);
355:       assertEquals(48, Node.DIRECTIVES);
356:       assertEquals(4095, Node.COLUMN_MASK);
357:       assertEquals(8, Node.FLAG_NO_THROWS);
358:       assertEquals(39, Node.EMPTY_BLOCK);
359:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
360:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
361:       assertEquals(55, Node.INFERRED_FUNCTION);
362:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
363:       assertEquals(52, Node.LENGTH);
364:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
365:       assertEquals(53, Node.INPUT_ID);
366:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
367:       assertEquals(15, Node.NO_SIDE_EFFECTS);
368:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
369:       assertEquals(49, Node.DIRECT_EVAL);
370:       assertEquals(36, Node.QUOTED_PROP);
371:       assertEquals(57, Node.REFLECTED_OBJECT);
372:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
373:       assertEquals(56, Node.CHANGE_TIME);
374:       assertEquals(0, node1.getChildCount());
375:       assertFalse(node1.isCatch());
376:       assertFalse(node1.isSetterDef());
377:       assertFalse(node1.isTry());
378:       assertFalse(node1.isDefaultCase());
379:       assertFalse(node1.isVar());
380:       assertFalse(node1.isArrayLit());
381:       assertFalse(node1.isDebugger());
382:       assertFalse(node1.isFunction());
383:       assertFalse(node1.isGetterDef());
384:       assertFalse(node1.isParamList());
385:       assertFalse(node1.isStringKey());
386:       assertEquals(127033, node1.getSourcePosition());
387:       assertFalse(node1.isContinue());
388:       assertFalse(node1.isIn());
389:       assertFalse(node1.hasMoreThanOneChild());
390:       assertFalse(node1.isNumber());
391:       assertFalse(node1.isCase());
392:       assertFalse(node1.isFor());
393:       assertFalse(node1.isBlock());
394:       assertFalse(node1.isHook());
395:       assertFalse(node1.isInc());
396:       assertFalse(node1.isRegExp());
397:       assertFalse(node1.isNE());
398:       assertFalse(node1.isIf());
399:       assertEquals(31, node1.getLineno());
400:       assertFalse(node1.isInstanceOf());
401:       assertFalse(node1.isGetProp());
402:       assertFalse(node1.isObjectLit());
403:       assertFalse(node1.isComma());
404:       assertFalse(node1.isWith());
405:       assertFalse(node1.isScript());
406:       assertFalse(node1.isThis());
407:       assertFalse(node1.isThrow());
408:       assertFalse(node1.hasOneChild());
409:       assertEquals(57, node1.getCharno());
410:       assertFalse(node1.isCast());
411:       assertFalse(node1.isFalse());
412:       assertFalse(node1.isNot());
413:       assertFalse(node1.isLabelName());
414:       assertFalse(node1.isAnd());
415:       assertFalse(node1.isSwitch());
416:       assertFalse(node1.isOr());
417:       assertFalse(node1.isLabel());
418:       assertFalse(node1.isReturn());
419:       assertFalse(node1.isTypeOf());
420:       assertFalse(node1.isWhile());
421:       assertFalse(node1.isString());
422:       assertFalse(node1.isAssign());
423:       assertFalse(node1.isDec());
424:       assertFalse(node1.isDo());
425:       assertFalse(node1.isEmpty());
426:       assertFalse(node1.hasChildren());
427:       assertFalse(node1.isAssignAdd());
428:       assertFalse(node1.isAdd());
429:       assertFalse(node1.isNew());
430:       assertFalse(node1.isExprResult());
431:       assertFalse(node1.isCall());
432:       assertEquals((-2812), node1.getType());
433:       assertFalse(node1.isDelProp());
434:       assertFalse(node1.isNull());
435:       assertFalse(node1.isBreak());
436:       assertFalse(node1.isGetElem());
437:       assertFalse(node1.isVoid());
438:       assertFalse(node1.isTrue());
439:       assertFalse(node1.isName());
440:       assertNotNull(node1);
441:       assertFalse(node1.equals((Object)node0));
442:       
443:       Node node2 = node1.clonePropsFrom(node0);
444:       assertEquals(12, Node.COLUMN_BITS);
445:       assertEquals(51, Node.STATIC_SOURCE_FILE);
446:       assertEquals(32, Node.INCRDECR_PROP);
447:       assertEquals(30, Node.VAR_ARGS_NAME);
448:       assertEquals(46, Node.IS_NAMESPACE);
449:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
450:       assertEquals(57, Node.LAST_PROP);
451:       assertEquals(29, Node.JSDOC_INFO_PROP);
452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
453:       assertEquals(1, Node.DECR_FLAG);
454:       assertEquals(15, Node.NO_SIDE_EFFECTS);
455:       assertEquals(50, Node.FREE_CALL);
456:       assertEquals(47, Node.IS_DISPATCHER);
457:       assertEquals(54, Node.SLASH_V);
458:       assertEquals(2, Node.POST_FLAG);
459:       assertEquals(43, Node.IS_CONSTANT_NAME);
460:       assertEquals(40, Node.ORIGINALNAME_PROP);
461:       assertEquals(55, Node.INFERRED_FUNCTION);
462:       assertEquals(4095, Node.COLUMN_MASK);
463:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
464:       assertEquals(36, Node.QUOTED_PROP);
465:       assertEquals(8, Node.FLAG_NO_THROWS);
466:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
467:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
468:       assertEquals(39, Node.EMPTY_BLOCK);
469:       assertEquals(53, Node.INPUT_ID);
470:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
471:       assertEquals(52, Node.LENGTH);
472:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
473:       assertEquals(57, Node.REFLECTED_OBJECT);
474:       assertEquals(37, Node.OPT_ARG_NAME);
475:       assertEquals(56, Node.CHANGE_TIME);
476:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
477:       assertEquals(48, Node.DIRECTIVES);
478:       assertEquals(49, Node.DIRECT_EVAL);
479:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
480:       assertEquals(32, Node.INCRDECR_PROP);
481:       assertEquals(37, Node.OPT_ARG_NAME);
482:       assertEquals(51, Node.STATIC_SOURCE_FILE);
483:       assertEquals(2, Node.POST_FLAG);
484:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
485:       assertEquals(29, Node.JSDOC_INFO_PROP);
486:       assertEquals(30, Node.VAR_ARGS_NAME);
487:       assertEquals(47, Node.IS_DISPATCHER);
488:       assertEquals(1, Node.DECR_FLAG);
489:       assertEquals(12, Node.COLUMN_BITS);
490:       assertEquals(57, Node.LAST_PROP);
491:       assertEquals(40, Node.ORIGINALNAME_PROP);
492:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
493:       assertEquals(50, Node.FREE_CALL);
494:       assertEquals(46, Node.IS_NAMESPACE);
495:       assertEquals(54, Node.SLASH_V);
496:       assertEquals(43, Node.IS_CONSTANT_NAME);
497:       assertEquals(48, Node.DIRECTIVES);
498:       assertEquals(4095, Node.COLUMN_MASK);
499:       assertEquals(8, Node.FLAG_NO_THROWS);
500:       assertEquals(39, Node.EMPTY_BLOCK);
501:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
502:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
503:       assertEquals(55, Node.INFERRED_FUNCTION);
504:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
505:       assertEquals(52, Node.LENGTH);
506:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
507:       assertEquals(53, Node.INPUT_ID);
508:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
509:       assertEquals(15, Node.NO_SIDE_EFFECTS);
510:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
511:       assertEquals(49, Node.DIRECT_EVAL);
512:       assertEquals(36, Node.QUOTED_PROP);
513:       assertEquals(57, Node.REFLECTED_OBJECT);
514:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
515:       assertEquals(56, Node.CHANGE_TIME);
516:       assertEquals(55, Node.INFERRED_FUNCTION);
517:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
520:       assertEquals(39, Node.EMPTY_BLOCK);
521:       assertEquals(53, Node.INPUT_ID);
522:       assertEquals(40, Node.ORIGINALNAME_PROP);
523:       assertEquals(50, Node.FREE_CALL);
524:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
525:       assertEquals(54, Node.SLASH_V);
526:       assertEquals(46, Node.IS_NAMESPACE);
527:       assertEquals(43, Node.IS_CONSTANT_NAME);
528:       assertEquals(12, Node.COLUMN_BITS);
529:       assertEquals(51, Node.STATIC_SOURCE_FILE);
530:       assertEquals(1, Node.DECR_FLAG);
531:       assertEquals(30, Node.VAR_ARGS_NAME);
532:       assertEquals(2, Node.POST_FLAG);
533:       assertEquals(15, Node.NO_SIDE_EFFECTS);
534:       assertEquals(47, Node.IS_DISPATCHER);
535:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
536:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
537:       assertEquals(32, Node.INCRDECR_PROP);
538:       assertEquals(57, Node.LAST_PROP);
539:       assertEquals(57, Node.REFLECTED_OBJECT);
540:       assertEquals(52, Node.LENGTH);
541:       assertEquals(29, Node.JSDOC_INFO_PROP);
542:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
543:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
544:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
545:       assertEquals(8, Node.FLAG_NO_THROWS);
546:       assertEquals(48, Node.DIRECTIVES);
547:       assertEquals(36, Node.QUOTED_PROP);
548:       assertEquals(37, Node.OPT_ARG_NAME);
549:       assertEquals(49, Node.DIRECT_EVAL);
550:       assertEquals(56, Node.CHANGE_TIME);
551:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
552:       assertFalse(node0.isAnd());
553:       assertFalse(node0.isObjectLit());
554:       assertFalse(node0.isNot());
555:       assertFalse(node0.isGetProp());
556:       assertFalse(node0.isScript());
557:       assertFalse(node0.isFalse());
558:       assertFalse(node0.isLabelName());
559:       assertFalse(node0.isThrow());
560:       assertFalse(node0.isSwitch());
561:       assertFalse(node0.isLabel());
562:       assertFalse(node0.isCast());
563:       assertFalse(node0.isContinue());
564:       assertFalse(node0.hasMoreThanOneChild());
565:       assertFalse(node0.isCase());
566:       assertEquals(39, node0.getType());
567:       assertEquals((-1), node0.getCharno());
568:       assertFalse(node0.isInc());
569:       assertFalse(node0.isGetterDef());
570:       assertFalse(node0.isIn());
571:       assertFalse(node0.hasOneChild());
572:       assertFalse(node0.isIf());
573:       assertFalse(node0.isHook());
574:       assertFalse(node0.isBlock());
575:       assertFalse(node0.isFor());
576:       assertFalse(node0.isNE());
577:       assertFalse(node0.isThis());
578:       assertFalse(node0.isRegExp());
579:       assertEquals((-1), node0.getLineno());
580:       assertFalse(node0.isWith());
581:       assertFalse(node0.isInstanceOf());
582:       assertFalse(node0.isCatch());
583:       assertEquals(0, node0.getChildCount());
584:       assertFalse(node0.isDefaultCase());
585:       assertFalse(node0.isDebugger());
586:       assertFalse(node0.isTrue());
587:       assertFalse(node0.isSetterDef());
588:       assertFalse(node0.isTry());
589:       assertFalse(node0.isArrayLit());
590:       assertFalse(node0.isVar());
591:       assertFalse(node0.isStringKey());
592:       assertFalse(node0.isFunction());
593:       assertFalse(node0.isParamList());
594:       assertFalse(node0.isDo());
595:       assertFalse(node0.isWhile());
596:       assertFalse(node0.isReturn());
597:       assertFalse(node0.isAssignAdd());
598:       assertEquals((-1), node0.getSourcePosition());
599:       assertFalse(node0.isNew());
600:       assertFalse(node0.isOr());
601:       assertTrue(node0.isNumber());
602:       assertFalse(node0.isString());
603:       assertFalse(node0.isEmpty());
604:       assertFalse(node0.isAdd());
605:       assertFalse(node0.isCall());
606:       assertFalse(node0.isGetElem());
607:       assertFalse(node0.isName());
608:       assertFalse(node0.isAssign());
609:       assertFalse(node0.isDelProp());
610:       assertFalse(node0.hasChildren());
611:       assertFalse(node0.isNull());
612:       assertFalse(node0.isExprResult());
613:       assertFalse(node0.isVoid());
614:       assertFalse(node0.isTypeOf());
615:       assertFalse(node0.isComma());
616:       assertFalse(node0.isDec());
617:       assertFalse(node0.isBreak());
618:       assertEquals(0, node1.getChildCount());
619:       assertFalse(node1.isCatch());
620:       assertFalse(node1.isSetterDef());
621:       assertFalse(node1.isTry());
622:       assertFalse(node1.isDefaultCase());
623:       assertFalse(node1.isVar());
624:       assertFalse(node1.isArrayLit());
625:       assertFalse(node1.isDebugger());
626:       assertFalse(node1.isFunction());
627:       assertFalse(node1.isGetterDef());
628:       assertFalse(node1.isParamList());
629:       assertFalse(node1.isStringKey());
630:       assertEquals(127033, node1.getSourcePosition());
631:       assertFalse(node1.isContinue());
632:       assertFalse(node1.isIn());
633:       assertFalse(node1.hasMoreThanOneChild());
634:       assertFalse(node1.isNumber());
635:       assertFalse(node1.isCase());
636:       assertFalse(node1.isFor());
637:       assertFalse(node1.isBlock());
638:       assertFalse(node1.isHook());
639:       assertFalse(node1.isInc());
640:       assertFalse(node1.isRegExp());
641:       assertFalse(node1.isNE());
642:       assertFalse(node1.isIf());
643:       assertEquals(31, node1.getLineno());
644:       assertFalse(node1.isInstanceOf());
645:       assertFalse(node1.isGetProp());
646:       assertFalse(node1.isObjectLit());
647:       assertFalse(node1.isComma());
648:       assertFalse(node1.isWith());
649:       assertFalse(node1.isScript());
650:       assertFalse(node1.isThis());
651:       assertFalse(node1.isThrow());
652:       assertFalse(node1.hasOneChild());
653:       assertEquals(57, node1.getCharno());
654:       assertFalse(node1.isCast());
655:       assertFalse(node1.isFalse());
656:       assertFalse(node1.isNot());
657:       assertFalse(node1.isLabelName());
658:       assertFalse(node1.isAnd());
659:       assertFalse(node1.isSwitch());
660:       assertFalse(node1.isOr());
661:       assertFalse(node1.isLabel());
662:       assertFalse(node1.isReturn());
663:       assertFalse(node1.isTypeOf());
664:       assertFalse(node1.isWhile());
665:       assertFalse(node1.isString());
666:       assertFalse(node1.isAssign());
667:       assertFalse(node1.isDec());
668:       assertFalse(node1.isDo());
669:       assertFalse(node1.isEmpty());
670:       assertFalse(node1.hasChildren());
671:       assertFalse(node1.isAssignAdd());
672:       assertFalse(node1.isAdd());
673:       assertFalse(node1.isNew());
674:       assertFalse(node1.isExprResult());
675:       assertFalse(node1.isCall());
676:       assertEquals((-2812), node1.getType());
677:       assertFalse(node1.isDelProp());
678:       assertFalse(node1.isNull());
679:       assertFalse(node1.isBreak());
680:       assertFalse(node1.isGetElem());
681:       assertFalse(node1.isVoid());
682:       assertFalse(node1.isTrue());
683:       assertFalse(node1.isName());
684:       assertFalse(node2.isContinue());
685:       assertFalse(node2.isOr());
686:       assertFalse(node2.hasMoreThanOneChild());
687:       assertFalse(node2.isNew());
688:       assertFalse(node2.isLabel());
689:       assertFalse(node2.isReturn());
690:       assertFalse(node2.isAdd());
691:       assertFalse(node2.isBlock());
692:       assertFalse(node2.isWhile());
693:       assertFalse(node2.isDo());
694:       assertFalse(node2.isAssignAdd());
695:       assertFalse(node2.isStringKey());
696:       assertFalse(node2.isCast());
697:       assertFalse(node2.isVar());
698:       assertFalse(node2.isNumber());
699:       assertFalse(node2.isParamList());
700:       assertFalse(node2.isLabelName());
701:       assertFalse(node2.isAnd());
702:       assertEquals(0, node2.getChildCount());
703:       assertFalse(node2.isNot());
704:       assertFalse(node2.isObjectLit());
705:       assertFalse(node2.isGetProp());
706:       assertFalse(node2.isDefaultCase());
707:       assertFalse(node2.isEmpty());
708:       assertFalse(node2.isGetElem());
709:       assertFalse(node2.isCall());
710:       assertFalse(node2.isDec());
711:       assertFalse(node2.hasChildren());
712:       assertFalse(node2.isComma());
713:       assertFalse(node2.isAssign());
714:       assertFalse(node2.isTypeOf());
715:       assertFalse(node2.isVoid());
716:       assertFalse(node2.isExprResult());
717:       assertFalse(node2.isNull());
718:       assertFalse(node2.isTrue());
719:       assertFalse(node2.isBreak());
720:       assertFalse(node2.isName());
721:       assertFalse(node2.isDelProp());
722:       assertFalse(node2.isCase());
723:       assertFalse(node2.isIn());
724:       assertFalse(node2.isString());
725:       assertEquals((-2812), node2.getType());
726:       assertEquals(127033, node2.getSourcePosition());
727:       assertFalse(node2.isInc());
728:       assertFalse(node2.isThrow());
729:       assertFalse(node2.isFalse());
730:       assertEquals(57, node2.getCharno());
731:       assertFalse(node2.isGetterDef());
732:       assertFalse(node2.isDebugger());
733:       assertEquals(31, node2.getLineno());
734:       assertFalse(node2.isArrayLit());
735:       assertFalse(node2.isSwitch());
736:       assertFalse(node2.isCatch());
737:       assertFalse(node2.isInstanceOf());
738:       assertFalse(node2.isWith());
739:       assertFalse(node2.isFunction());
740:       assertFalse(node2.isRegExp());
741:       assertFalse(node2.isSetterDef());
742:       assertFalse(node2.isScript());
743:       assertFalse(node2.isThis());
744:       assertFalse(node2.hasOneChild());
745:       assertFalse(node2.isTry());
746:       assertFalse(node2.isFor());
747:       assertFalse(node2.isHook());
748:       assertFalse(node2.isNE());
749:       assertFalse(node2.isIf());
750:       assertSame(node1, node2);
751:       assertSame(node2, node1);
752:       assertNotNull(node2);
753:       assertFalse(node0.equals((Object)node1));
754:       assertFalse(node1.equals((Object)node0));
755:       assertFalse(node2.equals((Object)node0));
756:       
757:       node2.removeProp(340);
758:       assertEquals(12, Node.COLUMN_BITS);
759:       assertEquals(51, Node.STATIC_SOURCE_FILE);
760:       assertEquals(32, Node.INCRDECR_PROP);
761:       assertEquals(30, Node.VAR_ARGS_NAME);
762:       assertEquals(46, Node.IS_NAMESPACE);
763:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
764:       assertEquals(57, Node.LAST_PROP);
765:       assertEquals(29, Node.JSDOC_INFO_PROP);
766:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
767:       assertEquals(1, Node.DECR_FLAG);
768:       assertEquals(15, Node.NO_SIDE_EFFECTS);
769:       assertEquals(50, Node.FREE_CALL);
770:       assertEquals(47, Node.IS_DISPATCHER);
771:       assertEquals(54, Node.SLASH_V);
772:       assertEquals(2, Node.POST_FLAG);
773:       assertEquals(43, Node.IS_CONSTANT_NAME);
774:       assertEquals(40, Node.ORIGINALNAME_PROP);
775:       assertEquals(55, Node.INFERRED_FUNCTION);
776:       assertEquals(4095, Node.COLUMN_MASK);
777:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
778:       assertEquals(36, Node.QUOTED_PROP);
779:       assertEquals(8, Node.FLAG_NO_THROWS);
780:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
781:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
782:       assertEquals(39, Node.EMPTY_BLOCK);
783:       assertEquals(53, Node.INPUT_ID);
784:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
785:       assertEquals(52, Node.LENGTH);
786:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
787:       assertEquals(57, Node.REFLECTED_OBJECT);
788:       assertEquals(37, Node.OPT_ARG_NAME);
789:       assertEquals(56, Node.CHANGE_TIME);
790:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
791:       assertEquals(48, Node.DIRECTIVES);
792:       assertEquals(49, Node.DIRECT_EVAL);
793:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
794:       assertEquals(32, Node.INCRDECR_PROP);
795:       assertEquals(37, Node.OPT_ARG_NAME);
796:       assertEquals(51, Node.STATIC_SOURCE_FILE);
797:       assertEquals(2, Node.POST_FLAG);
798:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
799:       assertEquals(29, Node.JSDOC_INFO_PROP);
800:       assertEquals(30, Node.VAR_ARGS_NAME);
801:       assertEquals(47, Node.IS_DISPATCHER);
802:       assertEquals(1, Node.DECR_FLAG);
803:       assertEquals(12, Node.COLUMN_BITS);
804:       assertEquals(57, Node.LAST_PROP);
805:       assertEquals(40, Node.ORIGINALNAME_PROP);
806:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
807:       assertEquals(50, Node.FREE_CALL);
808:       assertEquals(46, Node.IS_NAMESPACE);
809:       assertEquals(54, Node.SLASH_V);
810:       assertEquals(43, Node.IS_CONSTANT_NAME);
811:       assertEquals(48, Node.DIRECTIVES);
812:       assertEquals(4095, Node.COLUMN_MASK);
813:       assertEquals(8, Node.FLAG_NO_THROWS);
814:       assertEquals(39, Node.EMPTY_BLOCK);
815:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
816:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
817:       assertEquals(55, Node.INFERRED_FUNCTION);
818:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
819:       assertEquals(52, Node.LENGTH);
820:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
821:       assertEquals(53, Node.INPUT_ID);
822:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
823:       assertEquals(15, Node.NO_SIDE_EFFECTS);
824:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
825:       assertEquals(49, Node.DIRECT_EVAL);
826:       assertEquals(36, Node.QUOTED_PROP);
827:       assertEquals(57, Node.REFLECTED_OBJECT);
828:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
829:       assertEquals(56, Node.CHANGE_TIME);
830:       assertEquals(55, Node.INFERRED_FUNCTION);
831:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
832:       assertEquals(4095, Node.COLUMN_MASK);
833:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
834:       assertEquals(39, Node.EMPTY_BLOCK);
835:       assertEquals(53, Node.INPUT_ID);
836:       assertEquals(40, Node.ORIGINALNAME_PROP);
837:       assertEquals(50, Node.FREE_CALL);
838:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
839:       assertEquals(54, Node.SLASH_V);
840:       assertEquals(46, Node.IS_NAMESPACE);
841:       assertEquals(43, Node.IS_CONSTANT_NAME);
842:       assertEquals(12, Node.COLUMN_BITS);
843:       assertEquals(51, Node.STATIC_SOURCE_FILE);
844:       assertEquals(1, Node.DECR_FLAG);
845:       assertEquals(30, Node.VAR_ARGS_NAME);
846:       assertEquals(2, Node.POST_FLAG);
847:       assertEquals(15, Node.NO_SIDE_EFFECTS);
848:       assertEquals(47, Node.IS_DISPATCHER);
849:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
850:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
851:       assertEquals(32, Node.INCRDECR_PROP);
852:       assertEquals(57, Node.LAST_PROP);
853:       assertEquals(57, Node.REFLECTED_OBJECT);
854:       assertEquals(52, Node.LENGTH);
855:       assertEquals(29, Node.JSDOC_INFO_PROP);
856:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
857:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
858:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
859:       assertEquals(8, Node.FLAG_NO_THROWS);
860:       assertEquals(48, Node.DIRECTIVES);
861:       assertEquals(36, Node.QUOTED_PROP);
862:       assertEquals(37, Node.OPT_ARG_NAME);
863:       assertEquals(49, Node.DIRECT_EVAL);
864:       assertEquals(56, Node.CHANGE_TIME);
865:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
866:       assertFalse(node0.isAnd());
867:       assertFalse(node0.isObjectLit());
868:       assertFalse(node0.isNot());
869:       assertFalse(node0.isGetProp());
870:       assertFalse(node0.isScript());
871:       assertFalse(node0.isFalse());
872:       assertFalse(node0.isLabelName());
873:       assertFalse(node0.isThrow());
874:       assertFalse(node0.isSwitch());
875:       assertFalse(node0.isLabel());
876:       assertFalse(node0.isCast());
877:       assertFalse(node0.isContinue());
878:       assertFalse(node0.hasMoreThanOneChild());
879:       assertFalse(node0.isCase());
880:       assertEquals(39, node0.getType());
881:       assertEquals((-1), node0.getCharno());
882:       assertFalse(node0.isInc());
883:       assertFalse(node0.isGetterDef());
884:       assertFalse(node0.isIn());
885:       assertFalse(node0.hasOneChild());
886:       assertFalse(node0.isIf());
887:       assertFalse(node0.isHook());
888:       assertFalse(node0.isBlock());
889:       assertFalse(node0.isFor());
890:       assertFalse(node0.isNE());
891:       assertFalse(node0.isThis());
892:       assertFalse(node0.isRegExp());
893:       assertEquals((-1), node0.getLineno());
894:       assertFalse(node0.isWith());
895:       assertFalse(node0.isInstanceOf());
896:       assertFalse(node0.isCatch());
897:       assertEquals(0, node0.getChildCount());
898:       assertFalse(node0.isDefaultCase());
899:       assertFalse(node0.isDebugger());
900:       assertFalse(node0.isTrue());
901:       assertFalse(node0.isSetterDef());
902:       assertFalse(node0.isTry());
903:       assertFalse(node0.isArrayLit());
904:       assertFalse(node0.isVar());
905:       assertFalse(node0.isStringKey());
906:       assertFalse(node0.isFunction());
907:       assertFalse(node0.isParamList());
908:       assertFalse(node0.isDo());
909:       assertFalse(node0.isWhile());
910:       assertFalse(node0.isReturn());
911:       assertFalse(node0.isAssignAdd());
912:       assertEquals((-1), node0.getSourcePosition());
913:       assertFalse(node0.isNew());
914:       assertFalse(node0.isOr());
915:       assertTrue(node0.isNumber());
916:       assertFalse(node0.isString());
917:       assertFalse(node0.isEmpty());
918:       assertFalse(node0.isAdd());
919:       assertFalse(node0.isCall());
920:       assertFalse(node0.isGetElem());
921:       assertFalse(node0.isName());
922:       assertFalse(node0.isAssign());
923:       assertFalse(node0.isDelProp());
924:       assertFalse(node0.hasChildren());
925:       assertFalse(node0.isNull());
926:       assertFalse(node0.isExprResult());
927:       assertFalse(node0.isVoid());
928:       assertFalse(node0.isTypeOf());
929:       assertFalse(node0.isComma());
930:       assertFalse(node0.isDec());
931:       assertFalse(node0.isBreak());
932:       assertEquals(0, node1.getChildCount());
933:       assertFalse(node1.isCatch());
934:       assertFalse(node1.isSetterDef());
935:       assertFalse(node1.isTry());
936:       assertFalse(node1.isDefaultCase());
937:       assertFalse(node1.isVar());
938:       assertFalse(node1.isArrayLit());
939:       assertFalse(node1.isDebugger());
940:       assertFalse(node1.isFunction());
941:       assertFalse(node1.isGetterDef());
942:       assertFalse(node1.isParamList());
943:       assertFalse(node1.isStringKey());
944:       assertEquals(127033, node1.getSourcePosition());
945:       assertFalse(node1.isContinue());
946:       assertFalse(node1.isIn());
947:       assertFalse(node1.hasMoreThanOneChild());
948:       assertFalse(node1.isNumber());
949:       assertFalse(node1.isCase());
950:       assertFalse(node1.isFor());
951:       assertFalse(node1.isBlock());
952:       assertFalse(node1.isHook());
953:       assertFalse(node1.isInc());
954:       assertFalse(node1.isRegExp());
955:       assertFalse(node1.isNE());
956:       assertFalse(node1.isIf());
957:       assertEquals(31, node1.getLineno());
958:       assertFalse(node1.isInstanceOf());
959:       assertFalse(node1.isGetProp());
960:       assertFalse(node1.isObjectLit());
961:       assertFalse(node1.isComma());
962:       assertFalse(node1.isWith());
963:       assertFalse(node1.isScript());
964:       assertFalse(node1.isThis());
965:       assertFalse(node1.isThrow());
966:       assertFalse(node1.hasOneChild());
967:       assertEquals(57, node1.getCharno());
968:       assertFalse(node1.isCast());
969:       assertFalse(node1.isFalse());
970:       assertFalse(node1.isNot());
971:       assertFalse(node1.isLabelName());
972:       assertFalse(node1.isAnd());
973:       assertFalse(node1.isSwitch());
974:       assertFalse(node1.isOr());
975:       assertFalse(node1.isLabel());
976:       assertFalse(node1.isReturn());
977:       assertFalse(node1.isTypeOf());
978:       assertFalse(node1.isWhile());
979:       assertFalse(node1.isString());
980:       assertFalse(node1.isAssign());
981:       assertFalse(node1.isDec());
982:       assertFalse(node1.isDo());
983:       assertFalse(node1.isEmpty());
984:       assertFalse(node1.hasChildren());
985:       assertFalse(node1.isAssignAdd());
986:       assertFalse(node1.isAdd());
987:       assertFalse(node1.isNew());
988:       assertFalse(node1.isExprResult());
989:       assertFalse(node1.isCall());
990:       assertEquals((-2812), node1.getType());
991:       assertFalse(node1.isDelProp());
992:       assertFalse(node1.isNull());
993:       assertFalse(node1.isBreak());
994:       assertFalse(node1.isGetElem());
995:       assertFalse(node1.isVoid());
996:       assertFalse(node1.isTrue());
997:       assertFalse(node1.isName());
998:       assertFalse(node2.isContinue());
999:       assertFalse(node2.isOr());
1000:       assertFalse(node2.hasMoreThanOneChild());
1001:       assertFalse(node2.isNew());
1002:       assertFalse(node2.isLabel());
1003:       assertFalse(node2.isReturn());
1004:       assertFalse(node2.isAdd());
1005:       assertFalse(node2.isBlock());
1006:       assertFalse(node2.isWhile());
1007:       assertFalse(node2.isDo());
1008:       assertFalse(node2.isAssignAdd());
1009:       assertFalse(node2.isStringKey());
1010:       assertFalse(node2.isCast());
1011:       assertFalse(node2.isVar());
1012:       assertFalse(node2.isNumber());
1013:       assertFalse(node2.isParamList());
1014:       assertFalse(node2.isLabelName());
1015:       assertFalse(node2.isAnd());
1016:       assertEquals(0, node2.getChildCount());
1017:       assertFalse(node2.isNot());
1018:       assertFalse(node2.isObjectLit());
1019:       assertFalse(node2.isGetProp());
1020:       assertFalse(node2.isDefaultCase());
1021:       assertFalse(node2.isEmpty());
1022:       assertFalse(node2.isGetElem());
1023:       assertFalse(node2.isCall());
1024:       assertFalse(node2.isDec());
1025:       assertFalse(node2.hasChildren());
1026:       assertFalse(node2.isComma());
1027:       assertFalse(node2.isAssign());
1028:       assertFalse(node2.isTypeOf());
1029:       assertFalse(node2.isVoid());
1030:       assertFalse(node2.isExprResult());
1031:       assertFalse(node2.isNull());
1032:       assertFalse(node2.isTrue());
1033:       assertFalse(node2.isBreak());
1034:       assertFalse(node2.isName());
1035:       assertFalse(node2.isDelProp());
1036:       assertFalse(node2.isCase());
1037:       assertFalse(node2.isIn());
1038:       assertFalse(node2.isString());
1039:       assertEquals((-2812), node2.getType());
1040:       assertEquals(127033, node2.getSourcePosition());
1041:       assertFalse(node2.isInc());
1042:       assertFalse(node2.isThrow());
1043:       assertFalse(node2.isFalse());
1044:       assertEquals(57, node2.getCharno());
1045:       assertFalse(node2.isGetterDef());
1046:       assertFalse(node2.isDebugger());
1047:       assertEquals(31, node2.getLineno());
1048:       assertFalse(node2.isArrayLit());
1049:       assertFalse(node2.isSwitch());
1050:       assertFalse(node2.isCatch());
1051:       assertFalse(node2.isInstanceOf());
1052:       assertFalse(node2.isWith());
1053:       assertFalse(node2.isFunction());
1054:       assertFalse(node2.isRegExp());
1055:       assertFalse(node2.isSetterDef());
1056:       assertFalse(node2.isScript());
1057:       assertFalse(node2.isThis());
1058:       assertFalse(node2.hasOneChild());
1059:       assertFalse(node2.isTry());
1060:       assertFalse(node2.isFor());
1061:       assertFalse(node2.isHook());
1062:       assertFalse(node2.isNE());
1063:       assertFalse(node2.isIf());
1064:       assertSame(node1, node2);
1065:       assertSame(node2, node1);
1066:       assertFalse(node0.equals((Object)node2));
1067:       assertFalse(node0.equals((Object)node1));
1068:       assertFalse(node1.equals((Object)node0));
1069:       assertFalse(node2.equals((Object)node0));
1070:       
1071:       Node node3 = Node.newString(47, "LABEL_NAME", 724, (-2748));
1072:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1073:       assertEquals(57, Node.LAST_PROP);
1074:       assertEquals(54, Node.SLASH_V);
1075:       assertEquals(49, Node.DIRECT_EVAL);
1076:       assertEquals(1, Node.DECR_FLAG);
1077:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1078:       assertEquals(57, Node.REFLECTED_OBJECT);
1079:       assertEquals(46, Node.IS_NAMESPACE);
1080:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1081:       assertEquals(52, Node.LENGTH);
1082:       assertEquals(50, Node.FREE_CALL);
1083:       assertEquals(8, Node.FLAG_NO_THROWS);
1084:       assertEquals(39, Node.EMPTY_BLOCK);
1085:       assertEquals(47, Node.IS_DISPATCHER);
1086:       assertEquals(29, Node.JSDOC_INFO_PROP);
1087:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1088:       assertEquals(40, Node.ORIGINALNAME_PROP);
1089:       assertEquals(2, Node.POST_FLAG);
1090:       assertEquals(30, Node.VAR_ARGS_NAME);
1091:       assertEquals(43, Node.IS_CONSTANT_NAME);
1092:       assertEquals(36, Node.QUOTED_PROP);
1093:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1094:       assertEquals(53, Node.INPUT_ID);
1095:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1096:       assertEquals(55, Node.INFERRED_FUNCTION);
1097:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1098:       assertEquals(56, Node.CHANGE_TIME);
1099:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1101:       assertEquals(37, Node.OPT_ARG_NAME);
1102:       assertEquals(32, Node.INCRDECR_PROP);
1103:       assertEquals(48, Node.DIRECTIVES);
1104:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1105:       assertEquals(12, Node.COLUMN_BITS);
1106:       assertEquals(4095, Node.COLUMN_MASK);
1107:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1108:       assertFalse(node3.isFunction());
1109:       assertFalse(node3.isTrue());
1110:       assertFalse(node3.isVoid());
1111:       assertFalse(node3.isDefaultCase());
1112:       assertFalse(node3.isTry());
1113:       assertFalse(node3.isArrayLit());
1114:       assertFalse(node3.isGetterDef());
1115:       assertFalse(node3.isDebugger());
1116:       assertFalse(node3.isSetterDef());
1117:       assertFalse(node3.isParamList());
1118:       assertFalse(node3.isEmpty());
1119:       assertFalse(node3.isVar());
1120:       assertEquals(0, node3.getChildCount());
1121:       assertFalse(node3.isString());
1122:       assertFalse(node3.isAdd());
1123:       assertFalse(node3.isDo());
1124:       assertFalse(node3.isNew());
1125:       assertFalse(node3.isName());
1126:       assertFalse(node3.isOr());
1127:       assertFalse(node3.isNull());
1128:       assertFalse(node3.isComma());
1129:       assertFalse(node3.isTypeOf());
1130:       assertFalse(node3.isDelProp());
1131:       assertFalse(node3.isGetElem());
1132:       assertFalse(node3.isBreak());
1133:       assertFalse(node3.isGetProp());
1134:       assertFalse(node3.isCall());
1135:       assertFalse(node3.isWhile());
1136:       assertFalse(node3.isReturn());
1137:       assertFalse(node3.isAssign());
1138:       assertFalse(node3.isDec());
1139:       assertFalse(node3.hasChildren());
1140:       assertFalse(node3.isExprResult());
1141:       assertFalse(node3.isScript());
1142:       assertFalse(node3.hasOneChild());
1143:       assertTrue(node3.isRegExp());
1144:       assertFalse(node3.isObjectLit());
1145:       assertFalse(node3.isAnd());
1146:       assertFalse(node3.isNot());
1147:       assertEquals((-1), node3.getSourcePosition());
1148:       assertFalse(node3.isAssignAdd());
1149:       assertFalse(node3.isLabelName());
1150:       assertFalse(node3.isCast());
1151:       assertFalse(node3.isThrow());
1152:       assertFalse(node3.isFalse());
1153:       assertFalse(node3.isContinue());
1154:       assertFalse(node3.isLabel());
1155:       assertFalse(node3.isInc());
1156:       assertFalse(node3.isSwitch());
1157:       assertFalse(node3.isCase());
1158:       assertFalse(node3.isStringKey());
1159:       assertFalse(node3.isIn());
1160:       assertEquals((-1), node3.getCharno());
1161:       assertFalse(node3.isThis());
1162:       assertFalse(node3.isNE());
1163:       assertFalse(node3.isNumber());
1164:       assertFalse(node3.isIf());
1165:       assertEquals((-1), node3.getLineno());
1166:       assertEquals(47, node3.getType());
1167:       assertFalse(node3.isCatch());
1168:       assertFalse(node3.hasMoreThanOneChild());
1169:       assertFalse(node3.isInstanceOf());
1170:       assertFalse(node3.isWith());
1171:       assertFalse(node3.isFor());
1172:       assertFalse(node3.isBlock());
1173:       assertFalse(node3.isHook());
1174:       assertNotNull(node3);
1175:       assertFalse(node3.equals((Object)node0));
1176:       assertFalse(node3.equals((Object)node1));
1177:       assertFalse(node3.equals((Object)node2));
1178:       
1179:       Node node4 = node1.removeFirstChild();
1180:       assertEquals(32, Node.INCRDECR_PROP);
1181:       assertEquals(37, Node.OPT_ARG_NAME);
1182:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1183:       assertEquals(2, Node.POST_FLAG);
1184:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1185:       assertEquals(29, Node.JSDOC_INFO_PROP);
1186:       assertEquals(30, Node.VAR_ARGS_NAME);
1187:       assertEquals(47, Node.IS_DISPATCHER);
1188:       assertEquals(1, Node.DECR_FLAG);
1189:       assertEquals(12, Node.COLUMN_BITS);
1190:       assertEquals(57, Node.LAST_PROP);
1191:       assertEquals(40, Node.ORIGINALNAME_PROP);
1192:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1193:       assertEquals(50, Node.FREE_CALL);
1194:       assertEquals(46, Node.IS_NAMESPACE);
1195:       assertEquals(54, Node.SLASH_V);
1196:       assertEquals(43, Node.IS_CONSTANT_NAME);
1197:       assertEquals(48, Node.DIRECTIVES);
1198:       assertEquals(4095, Node.COLUMN_MASK);
1199:       assertEquals(8, Node.FLAG_NO_THROWS);
1200:       assertEquals(39, Node.EMPTY_BLOCK);
1201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1202:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1203:       assertEquals(55, Node.INFERRED_FUNCTION);
1204:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1205:       assertEquals(52, Node.LENGTH);
1206:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1207:       assertEquals(53, Node.INPUT_ID);
1208:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1209:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1211:       assertEquals(49, Node.DIRECT_EVAL);
1212:       assertEquals(36, Node.QUOTED_PROP);
1213:       assertEquals(57, Node.REFLECTED_OBJECT);
1214:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1215:       assertEquals(56, Node.CHANGE_TIME);
1216:       assertEquals(0, node1.getChildCount());
1217:       assertFalse(node1.isCatch());
1218:       assertFalse(node1.isSetterDef());
1219:       assertFalse(node1.isTry());
1220:       assertFalse(node1.isDefaultCase());
1221:       assertFalse(node1.isVar());
1222:       assertFalse(node1.isArrayLit());
1223:       assertFalse(node1.isDebugger());
1224:       assertFalse(node1.isFunction());
1225:       assertFalse(node1.isGetterDef());
1226:       assertFalse(node1.isParamList());
1227:       assertFalse(node1.isStringKey());
1228:       assertEquals(127033, node1.getSourcePosition());
1229:       assertFalse(node1.isContinue());
1230:       assertFalse(node1.isIn());
1231:       assertFalse(node1.hasMoreThanOneChild());
1232:       assertFalse(node1.isNumber());
1233:       assertFalse(node1.isCase());
1234:       assertFalse(node1.isFor());
1235:       assertFalse(node1.isBlock());
1236:       assertFalse(node1.isHook());
1237:       assertFalse(node1.isInc());
1238:       assertFalse(node1.isRegExp());
1239:       assertFalse(node1.isNE());
1240:       assertFalse(node1.isIf());
1241:       assertEquals(31, node1.getLineno());
1242:       assertFalse(node1.isInstanceOf());
1243:       assertFalse(node1.isGetProp());
1244:       assertFalse(node1.isObjectLit());
1245:       assertFalse(node1.isComma());
1246:       assertFalse(node1.isWith());
1247:       assertFalse(node1.isScript());
1248:       assertFalse(node1.isThis());
1249:       assertFalse(node1.isThrow());
1250:       assertFalse(node1.hasOneChild());
1251:       assertEquals(57, node1.getCharno());
1252:       assertFalse(node1.isCast());
1253:       assertFalse(node1.isFalse());
1254:       assertFalse(node1.isNot());
1255:       assertFalse(node1.isLabelName());
1256:       assertFalse(node1.isAnd());
1257:       assertFalse(node1.isSwitch());
1258:       assertFalse(node1.isOr());
1259:       assertFalse(node1.isLabel());
1260:       assertFalse(node1.isReturn());
1261:       assertFalse(node1.isTypeOf());
1262:       assertFalse(node1.isWhile());
1263:       assertFalse(node1.isString());
1264:       assertFalse(node1.isAssign());
1265:       assertFalse(node1.isDec());
1266:       assertFalse(node1.isDo());
1267:       assertFalse(node1.isEmpty());
1268:       assertFalse(node1.hasChildren());
1269:       assertFalse(node1.isAssignAdd());
1270:       assertFalse(node1.isAdd());
1271:       assertFalse(node1.isNew());
1272:       assertFalse(node1.isExprResult());
1273:       assertFalse(node1.isCall());
1274:       assertEquals((-2812), node1.getType());
1275:       assertFalse(node1.isDelProp());
1276:       assertFalse(node1.isNull());
1277:       assertFalse(node1.isBreak());
1278:       assertFalse(node1.isGetElem());
1279:       assertFalse(node1.isVoid());
1280:       assertFalse(node1.isTrue());
1281:       assertFalse(node1.isName());
1282:       assertSame(node1, node2);
1283:       assertNull(node4);
1284:       assertFalse(node1.equals((Object)node0));
1285:       assertFalse(node1.equals((Object)node3));
1286:       
1287:       Node node5 = Node.newNumber(2858.03753);
1288:       assertEquals(57, Node.REFLECTED_OBJECT);
1289:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1290:       assertEquals(54, Node.SLASH_V);
1291:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1292:       assertEquals(57, Node.LAST_PROP);
1293:       assertEquals(8, Node.FLAG_NO_THROWS);
1294:       assertEquals(50, Node.FREE_CALL);
1295:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1296:       assertEquals(52, Node.LENGTH);
1297:       assertEquals(39, Node.EMPTY_BLOCK);
1298:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1299:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1300:       assertEquals(46, Node.IS_NAMESPACE);
1301:       assertEquals(43, Node.IS_CONSTANT_NAME);
1302:       assertEquals(47, Node.IS_DISPATCHER);
1303:       assertEquals(2, Node.POST_FLAG);
1304:       assertEquals(30, Node.VAR_ARGS_NAME);
1305:       assertEquals(40, Node.ORIGINALNAME_PROP);
1306:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1307:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1308:       assertEquals(36, Node.QUOTED_PROP);
1309:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1310:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1311:       assertEquals(53, Node.INPUT_ID);
1312:       assertEquals(55, Node.INFERRED_FUNCTION);
1313:       assertEquals(29, Node.JSDOC_INFO_PROP);
1314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1315:       assertEquals(12, Node.COLUMN_BITS);
1316:       assertEquals(4095, Node.COLUMN_MASK);
1317:       assertEquals(32, Node.INCRDECR_PROP);
1318:       assertEquals(1, Node.DECR_FLAG);
1319:       assertEquals(56, Node.CHANGE_TIME);
1320:       assertEquals(37, Node.OPT_ARG_NAME);
1321:       assertEquals(48, Node.DIRECTIVES);
1322:       assertEquals(49, Node.DIRECT_EVAL);
1323:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1324:       assertFalse(node5.isCast());
1325:       assertFalse(node5.isGetElem());
1326:       assertFalse(node5.hasOneChild());
1327:       assertFalse(node5.isLabelName());
1328:       assertFalse(node5.isScript());
1329:       assertEquals((-1), node5.getSourcePosition());
1330:       assertFalse(node5.isOr());
1331:       assertFalse(node5.isNot());
1332:       assertFalse(node5.isObjectLit());
1333:       assertFalse(node5.isDo());
1334:       assertFalse(node5.isAnd());
1335:       assertFalse(node5.isAssignAdd());
1336:       assertFalse(node5.isLabel());
1337:       assertFalse(node5.isFalse());
1338:       assertFalse(node5.isContinue());
1339:       assertFalse(node5.isHook());
1340:       assertFalse(node5.isBlock());
1341:       assertFalse(node5.isThrow());
1342:       assertFalse(node5.isStringKey());
1343:       assertFalse(node5.isInc());
1344:       assertFalse(node5.isSetterDef());
1345:       assertEquals((-1), node5.getCharno());
1346:       assertFalse(node5.isCatch());
1347:       assertFalse(node5.hasMoreThanOneChild());
1348:       assertFalse(node5.isCase());
1349:       assertEquals((-1), node5.getLineno());
1350:       assertEquals(39, node5.getType());
1351:       assertFalse(node5.isThis());
1352:       assertFalse(node5.isRegExp());
1353:       assertFalse(node5.isWith());
1354:       assertFalse(node5.isInstanceOf());
1355:       assertFalse(node5.isArrayLit());
1356:       assertFalse(node5.isTry());
1357:       assertFalse(node5.isDelProp());
1358:       assertFalse(node5.isFor());
1359:       assertFalse(node5.isIf());
1360:       assertFalse(node5.isNE());
1361:       assertFalse(node5.isTrue());
1362:       assertFalse(node5.isDebugger());
1363:       assertFalse(node5.isEmpty());
1364:       assertFalse(node5.isGetterDef());
1365:       assertFalse(node5.isIn());
1366:       assertEquals(0, node5.getChildCount());
1367:       assertFalse(node5.isDefaultCase());
1368:       assertFalse(node5.isParamList());
1369:       assertFalse(node5.isFunction());
1370:       assertFalse(node5.isSwitch());
1371:       assertFalse(node5.isCall());
1372:       assertFalse(node5.isVar());
1373:       assertFalse(node5.isName());
1374:       assertFalse(node5.isNull());
1375:       assertFalse(node5.isGetProp());
1376:       assertFalse(node5.isNew());
1377:       assertFalse(node5.isAdd());
1378:       assertFalse(node5.isString());
1379:       assertFalse(node5.isReturn());
1380:       assertTrue(node5.isNumber());
1381:       assertFalse(node5.isWhile());
1382:       assertFalse(node5.isComma());
1383:       assertFalse(node5.isExprResult());
1384:       assertFalse(node5.isTypeOf());
1385:       assertFalse(node5.isVoid());
1386:       assertFalse(node5.isDec());
1387:       assertFalse(node5.isBreak());
1388:       assertFalse(node5.hasChildren());
1389:       assertFalse(node5.isAssign());
1390:       assertNotSame(node5, node0);
1391:       assertNotNull(node5);
1392:       assertFalse(node5.equals((Object)node2));
1393:       assertFalse(node5.equals((Object)node1));
1394:       assertFalse(node5.equals((Object)node0));
1395:       assertFalse(node5.equals((Object)node3));
1396:       
1397:       boolean boolean1 = node0.isGetProp();
1398:       assertEquals(12, Node.COLUMN_BITS);
1399:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1400:       assertEquals(32, Node.INCRDECR_PROP);
1401:       assertEquals(30, Node.VAR_ARGS_NAME);
1402:       assertEquals(46, Node.IS_NAMESPACE);
1403:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1404:       assertEquals(57, Node.LAST_PROP);
1405:       assertEquals(29, Node.JSDOC_INFO_PROP);
1406:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1407:       assertEquals(1, Node.DECR_FLAG);
1408:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1409:       assertEquals(50, Node.FREE_CALL);
1410:       assertEquals(47, Node.IS_DISPATCHER);
1411:       assertEquals(54, Node.SLASH_V);
1412:       assertEquals(2, Node.POST_FLAG);
1413:       assertEquals(43, Node.IS_CONSTANT_NAME);
1414:       assertEquals(40, Node.ORIGINALNAME_PROP);
1415:       assertEquals(55, Node.INFERRED_FUNCTION);
1416:       assertEquals(4095, Node.COLUMN_MASK);
1417:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1418:       assertEquals(36, Node.QUOTED_PROP);
1419:       assertEquals(8, Node.FLAG_NO_THROWS);
1420:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1421:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1422:       assertEquals(39, Node.EMPTY_BLOCK);
1423:       assertEquals(53, Node.INPUT_ID);
1424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1425:       assertEquals(52, Node.LENGTH);
1426:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1427:       assertEquals(57, Node.REFLECTED_OBJECT);
1428:       assertEquals(37, Node.OPT_ARG_NAME);
1429:       assertEquals(56, Node.CHANGE_TIME);
1430:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1431:       assertEquals(48, Node.DIRECTIVES);
1432:       assertEquals(49, Node.DIRECT_EVAL);
1433:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1434:       assertFalse(node0.isAnd());
1435:       assertFalse(node0.isObjectLit());
1436:       assertFalse(node0.isNot());
1437:       assertFalse(node0.isGetProp());
1438:       assertFalse(node0.isScript());
1439:       assertFalse(node0.isFalse());
1440:       assertFalse(node0.isLabelName());
1441:       assertFalse(node0.isThrow());
1442:       assertFalse(node0.isSwitch());
1443:       assertFalse(node0.isLabel());
1444:       assertFalse(node0.isCast());
1445:       assertFalse(node0.isContinue());
1446:       assertFalse(node0.hasMoreThanOneChild());
1447:       assertFalse(node0.isCase());
1448:       assertEquals(39, node0.getType());
1449:       assertEquals((-1), node0.getCharno());
1450:       assertFalse(node0.isInc());
1451:       assertFalse(node0.isGetterDef());
1452:       assertFalse(node0.isIn());
1453:       assertFalse(node0.hasOneChild());
1454:       assertFalse(node0.isIf());
1455:       assertFalse(node0.isHook());
1456:       assertFalse(node0.isBlock());
1457:       assertFalse(node0.isFor());
1458:       assertFalse(node0.isNE());
1459:       assertFalse(node0.isThis());
1460:       assertFalse(node0.isRegExp());
1461:       assertEquals((-1), node0.getLineno());
1462:       assertFalse(node0.isWith());
1463:       assertFalse(node0.isInstanceOf());
1464:       assertFalse(node0.isCatch());
1465:       assertEquals(0, node0.getChildCount());
1466:       assertFalse(node0.isDefaultCase());
1467:       assertFalse(node0.isDebugger());
1468:       assertFalse(node0.isTrue());
1469:       assertFalse(node0.isSetterDef());
1470:       assertFalse(node0.isTry());
1471:       assertFalse(node0.isArrayLit());
1472:       assertFalse(node0.isVar());
1473:       assertFalse(node0.isStringKey());
1474:       assertFalse(node0.isFunction());
1475:       assertFalse(node0.isParamList());
1476:       assertFalse(node0.isDo());
1477:       assertFalse(node0.isWhile());
1478:       assertFalse(node0.isReturn());
1479:       assertFalse(node0.isAssignAdd());
1480:       assertEquals((-1), node0.getSourcePosition());
1481:       assertFalse(node0.isNew());
1482:       assertFalse(node0.isOr());
1483:       assertTrue(node0.isNumber());
1484:       assertFalse(node0.isString());
1485:       assertFalse(node0.isEmpty());
1486:       assertFalse(node0.isAdd());
1487:       assertFalse(node0.isCall());
1488:       assertFalse(node0.isGetElem());
1489:       assertFalse(node0.isName());
1490:       assertFalse(node0.isAssign());
1491:       assertFalse(node0.isDelProp());
1492:       assertFalse(node0.hasChildren());
1493:       assertFalse(node0.isNull());
1494:       assertFalse(node0.isExprResult());
1495:       assertFalse(node0.isVoid());
1496:       assertFalse(node0.isTypeOf());
1497:       assertFalse(node0.isComma());
1498:       assertFalse(node0.isDec());
1499:       assertFalse(node0.isBreak());
1500:       assertNotSame(node0, node5);
1501:       assertFalse(node0.equals((Object)node2));
1502:       assertFalse(node0.equals((Object)node1));
1503:       assertFalse(node0.equals((Object)node3));
1504:       assertFalse(node0.equals((Object)node5));
1505:       assertTrue(boolean1 == boolean0);
1506:       assertFalse(boolean1);
1507:       
1508:       Object object0 = node2.getProp(46);
1509:       assertEquals(12, Node.COLUMN_BITS);
1510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1511:       assertEquals(32, Node.INCRDECR_PROP);
1512:       assertEquals(30, Node.VAR_ARGS_NAME);
1513:       assertEquals(46, Node.IS_NAMESPACE);
1514:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1515:       assertEquals(57, Node.LAST_PROP);
1516:       assertEquals(29, Node.JSDOC_INFO_PROP);
1517:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1518:       assertEquals(1, Node.DECR_FLAG);
1519:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1520:       assertEquals(50, Node.FREE_CALL);
1521:       assertEquals(47, Node.IS_DISPATCHER);
1522:       assertEquals(54, Node.SLASH_V);
1523:       assertEquals(2, Node.POST_FLAG);
1524:       assertEquals(43, Node.IS_CONSTANT_NAME);
1525:       assertEquals(40, Node.ORIGINALNAME_PROP);
1526:       assertEquals(55, Node.INFERRED_FUNCTION);
1527:       assertEquals(4095, Node.COLUMN_MASK);
1528:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1529:       assertEquals(36, Node.QUOTED_PROP);
1530:       assertEquals(8, Node.FLAG_NO_THROWS);
1531:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1532:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1533:       assertEquals(39, Node.EMPTY_BLOCK);
1534:       assertEquals(53, Node.INPUT_ID);
1535:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1536:       assertEquals(52, Node.LENGTH);
1537:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1538:       assertEquals(57, Node.REFLECTED_OBJECT);
1539:       assertEquals(37, Node.OPT_ARG_NAME);
1540:       assertEquals(56, Node.CHANGE_TIME);
1541:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1542:       assertEquals(48, Node.DIRECTIVES);
1543:       assertEquals(49, Node.DIRECT_EVAL);
1544:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1545:       assertEquals(32, Node.INCRDECR_PROP);
1546:       assertEquals(37, Node.OPT_ARG_NAME);
1547:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1548:       assertEquals(2, Node.POST_FLAG);
1549:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1550:       assertEquals(29, Node.JSDOC_INFO_PROP);
1551:       assertEquals(30, Node.VAR_ARGS_NAME);
1552:       assertEquals(47, Node.IS_DISPATCHER);
1553:       assertEquals(1, Node.DECR_FLAG);
1554:       assertEquals(12, Node.COLUMN_BITS);
1555:       assertEquals(57, Node.LAST_PROP);
1556:       assertEquals(40, Node.ORIGINALNAME_PROP);
1557:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1558:       assertEquals(50, Node.FREE_CALL);
1559:       assertEquals(46, Node.IS_NAMESPACE);
1560:       assertEquals(54, Node.SLASH_V);
1561:       assertEquals(43, Node.IS_CONSTANT_NAME);
1562:       assertEquals(48, Node.DIRECTIVES);
1563:       assertEquals(4095, Node.COLUMN_MASK);
1564:       assertEquals(8, Node.FLAG_NO_THROWS);
1565:       assertEquals(39, Node.EMPTY_BLOCK);
1566:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1567:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1568:       assertEquals(55, Node.INFERRED_FUNCTION);
1569:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1570:       assertEquals(52, Node.LENGTH);
1571:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1572:       assertEquals(53, Node.INPUT_ID);
1573:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1574:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1575:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1576:       assertEquals(49, Node.DIRECT_EVAL);
1577:       assertEquals(36, Node.QUOTED_PROP);
1578:       assertEquals(57, Node.REFLECTED_OBJECT);
1579:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1580:       assertEquals(56, Node.CHANGE_TIME);
1581:       assertEquals(55, Node.INFERRED_FUNCTION);
1582:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1583:       assertEquals(4095, Node.COLUMN_MASK);
1584:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1585:       assertEquals(39, Node.EMPTY_BLOCK);
1586:       assertEquals(53, Node.INPUT_ID);
1587:       assertEquals(40, Node.ORIGINALNAME_PROP);
1588:       assertEquals(50, Node.FREE_CALL);
1589:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1590:       assertEquals(54, Node.SLASH_V);
1591:       assertEquals(46, Node.IS_NAMESPACE);
1592:       assertEquals(43, Node.IS_CONSTANT_NAME);
1593:       assertEquals(12, Node.COLUMN_BITS);
1594:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1595:       assertEquals(1, Node.DECR_FLAG);
1596:       assertEquals(30, Node.VAR_ARGS_NAME);
1597:       assertEquals(2, Node.POST_FLAG);
1598:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1599:       assertEquals(47, Node.IS_DISPATCHER);
1600:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1601:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1602:       assertEquals(32, Node.INCRDECR_PROP);
1603:       assertEquals(57, Node.LAST_PROP);
1604:       assertEquals(57, Node.REFLECTED_OBJECT);
1605:       assertEquals(52, Node.LENGTH);
1606:       assertEquals(29, Node.JSDOC_INFO_PROP);
1607:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1608:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1609:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1610:       assertEquals(8, Node.FLAG_NO_THROWS);
1611:       assertEquals(48, Node.DIRECTIVES);
1612:       assertEquals(36, Node.QUOTED_PROP);
1613:       assertEquals(37, Node.OPT_ARG_NAME);
1614:       assertEquals(49, Node.DIRECT_EVAL);
1615:       assertEquals(56, Node.CHANGE_TIME);
1616:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1617:       assertFalse(node0.isAnd());
1618:       assertFalse(node0.isObjectLit());
1619:       assertFalse(node0.isNot());
1620:       assertFalse(node0.isGetProp());
1621:       assertFalse(node0.isScript());
1622:       assertFalse(node0.isFalse());
1623:       assertFalse(node0.isLabelName());
1624:       assertFalse(node0.isThrow());
1625:       assertFalse(node0.isSwitch());
1626:       assertFalse(node0.isLabel());
1627:       assertFalse(node0.isCast());
1628:       assertFalse(node0.isContinue());
1629:       assertFalse(node0.hasMoreThanOneChild());
1630:       assertFalse(node0.isCase());
1631:       assertEquals(39, node0.getType());
1632:       assertEquals((-1), node0.getCharno());
1633:       assertFalse(node0.isInc());
1634:       assertFalse(node0.isGetterDef());
1635:       assertFalse(node0.isIn());
1636:       assertFalse(node0.hasOneChild());
1637:       assertFalse(node0.isIf());
1638:       assertFalse(node0.isHook());
1639:       assertFalse(node0.isBlock());
1640:       assertFalse(node0.isFor());
1641:       assertFalse(node0.isNE());
1642:       assertFalse(node0.isThis());
1643:       assertFalse(node0.isRegExp());
1644:       assertEquals((-1), node0.getLineno());
1645:       assertFalse(node0.isWith());
1646:       assertFalse(node0.isInstanceOf());
1647:       assertFalse(node0.isCatch());
1648:       assertEquals(0, node0.getChildCount());
1649:       assertFalse(node0.isDefaultCase());
1650:       assertFalse(node0.isDebugger());
1651:       assertFalse(node0.isTrue());
1652:       assertFalse(node0.isSetterDef());
1653:       assertFalse(node0.isTry());
1654:       assertFalse(node0.isArrayLit());
1655:       assertFalse(node0.isVar());
1656:       assertFalse(node0.isStringKey());
1657:       assertFalse(node0.isFunction());
1658:       assertFalse(node0.isParamList());
1659:       assertFalse(node0.isDo());
1660:       assertFalse(node0.isWhile());
1661:       assertFalse(node0.isReturn());
1662:       assertFalse(node0.isAssignAdd());
1663:       assertEquals((-1), node0.getSourcePosition());
1664:       assertFalse(node0.isNew());
1665:       assertFalse(node0.isOr());
1666:       assertTrue(node0.isNumber());
1667:       assertFalse(node0.isString());
1668:       assertFalse(node0.isEmpty());
1669:       assertFalse(node0.isAdd());
1670:       assertFalse(node0.isCall());
1671:       assertFalse(node0.isGetElem());
1672:       assertFalse(node0.isName());
1673:       assertFalse(node0.isAssign());
1674:       assertFalse(node0.isDelProp());
1675:       assertFalse(node0.hasChildren());
1676:       assertFalse(node0.isNull());
1677:       assertFalse(node0.isExprResult());
1678:       assertFalse(node0.isVoid());
1679:       assertFalse(node0.isTypeOf());
1680:       assertFalse(node0.isComma());
1681:       assertFalse(node0.isDec());
1682:       assertFalse(node0.isBreak());
1683:       assertEquals(0, node1.getChildCount());
1684:       assertFalse(node1.isCatch());
1685:       assertFalse(node1.isSetterDef());
1686:       assertFalse(node1.isTry());
1687:       assertFalse(node1.isDefaultCase());
1688:       assertFalse(node1.isVar());
1689:       assertFalse(node1.isArrayLit());
1690:       assertFalse(node1.isDebugger());
1691:       assertFalse(node1.isFunction());
1692:       assertFalse(node1.isGetterDef());
1693:       assertFalse(node1.isParamList());
1694:       assertFalse(node1.isStringKey());
1695:       assertEquals(127033, node1.getSourcePosition());
1696:       assertFalse(node1.isContinue());
1697:       assertFalse(node1.isIn());
1698:       assertFalse(node1.hasMoreThanOneChild());
1699:       assertFalse(node1.isNumber());
1700:       assertFalse(node1.isCase());
1701:       assertFalse(node1.isFor());
1702:       assertFalse(node1.isBlock());
1703:       assertFalse(node1.isHook());
1704:       assertFalse(node1.isInc());
1705:       assertFalse(node1.isRegExp());
1706:       assertFalse(node1.isNE());
1707:       assertFalse(node1.isIf());
1708:       assertEquals(31, node1.getLineno());
1709:       assertFalse(node1.isInstanceOf());
1710:       assertFalse(node1.isGetProp());
1711:       assertFalse(node1.isObjectLit());
1712:       assertFalse(node1.isComma());
1713:       assertFalse(node1.isWith());
1714:       assertFalse(node1.isScript());
1715:       assertFalse(node1.isThis());
1716:       assertFalse(node1.isThrow());
1717:       assertFalse(node1.hasOneChild());
1718:       assertEquals(57, node1.getCharno());
1719:       assertFalse(node1.isCast());
1720:       assertFalse(node1.isFalse());
1721:       assertFalse(node1.isNot());
1722:       assertFalse(node1.isLabelName());
1723:       assertFalse(node1.isAnd());
1724:       assertFalse(node1.isSwitch());
1725:       assertFalse(node1.isOr());
1726:       assertFalse(node1.isLabel());
1727:       assertFalse(node1.isReturn());
1728:       assertFalse(node1.isTypeOf());
1729:       assertFalse(node1.isWhile());
1730:       assertFalse(node1.isString());
1731:       assertFalse(node1.isAssign());
1732:       assertFalse(node1.isDec());
1733:       assertFalse(node1.isDo());
1734:       assertFalse(node1.isEmpty());
1735:       assertFalse(node1.hasChildren());
1736:       assertFalse(node1.isAssignAdd());
1737:       assertFalse(node1.isAdd());
1738:       assertFalse(node1.isNew());
1739:       assertFalse(node1.isExprResult());
1740:       assertFalse(node1.isCall());
1741:       assertEquals((-2812), node1.getType());
1742:       assertFalse(node1.isDelProp());
1743:       assertFalse(node1.isNull());
1744:       assertFalse(node1.isBreak());
1745:       assertFalse(node1.isGetElem());
1746:       assertFalse(node1.isVoid());
1747:       assertFalse(node1.isTrue());
1748:       assertFalse(node1.isName());
1749:       assertFalse(node2.isContinue());
1750:       assertFalse(node2.isOr());
1751:       assertFalse(node2.hasMoreThanOneChild());
1752:       assertFalse(node2.isNew());
1753:       assertFalse(node2.isLabel());
1754:       assertFalse(node2.isReturn());
1755:       assertFalse(node2.isAdd());
1756:       assertFalse(node2.isBlock());
1757:       assertFalse(node2.isWhile());
1758:       assertFalse(node2.isDo());
1759:       assertFalse(node2.isAssignAdd());
1760:       assertFalse(node2.isStringKey());
1761:       assertFalse(node2.isCast());
1762:       assertFalse(node2.isVar());
1763:       assertFalse(node2.isNumber());
1764:       assertFalse(node2.isParamList());
1765:       assertFalse(node2.isLabelName());
1766:       assertFalse(node2.isAnd());
1767:       assertEquals(0, node2.getChildCount());
1768:       assertFalse(node2.isNot());
1769:       assertFalse(node2.isObjectLit());
1770:       assertFalse(node2.isGetProp());
1771:       assertFalse(node2.isDefaultCase());
1772:       assertFalse(node2.isEmpty());
1773:       assertFalse(node2.isGetElem());
1774:       assertFalse(node2.isCall());
1775:       assertFalse(node2.isDec());
1776:       assertFalse(node2.hasChildren());
1777:       assertFalse(node2.isComma());
1778:       assertFalse(node2.isAssign());
1779:       assertFalse(node2.isTypeOf());
1780:       assertFalse(node2.isVoid());
1781:       assertFalse(node2.isExprResult());
1782:       assertFalse(node2.isNull());
1783:       assertFalse(node2.isTrue());
1784:       assertFalse(node2.isBreak());
1785:       assertFalse(node2.isName());
1786:       assertFalse(node2.isDelProp());
1787:       assertFalse(node2.isCase());
1788:       assertFalse(node2.isIn());
1789:       assertFalse(node2.isString());
1790:       assertEquals((-2812), node2.getType());
1791:       assertEquals(127033, node2.getSourcePosition());
1792:       assertFalse(node2.isInc());
1793:       assertFalse(node2.isThrow());
1794:       assertFalse(node2.isFalse());
1795:       assertEquals(57, node2.getCharno());
1796:       assertFalse(node2.isGetterDef());
1797:       assertFalse(node2.isDebugger());
1798:       assertEquals(31, node2.getLineno());
1799:       assertFalse(node2.isArrayLit());
1800:       assertFalse(node2.isSwitch());
1801:       assertFalse(node2.isCatch());
1802:       assertFalse(node2.isInstanceOf());
1803:       assertFalse(node2.isWith());
1804:       assertFalse(node2.isFunction());
1805:       assertFalse(node2.isRegExp());
1806:       assertFalse(node2.isSetterDef());
1807:       assertFalse(node2.isScript());
1808:       assertFalse(node2.isThis());
1809:       assertFalse(node2.hasOneChild());
1810:       assertFalse(node2.isTry());
1811:       assertFalse(node2.isFor());
1812:       assertFalse(node2.isHook());
1813:       assertFalse(node2.isNE());
1814:       assertFalse(node2.isIf());
1815:       assertNotSame(node0, node5);
1816:       assertSame(node1, node2);
1817:       assertSame(node2, node1);
1818:       assertNull(object0);
1819:       assertFalse(node0.equals((Object)node2));
1820:       assertFalse(node0.equals((Object)node1));
1821:       assertFalse(node0.equals((Object)node3));
1822:       assertFalse(node0.equals((Object)node5));
1823:       assertFalse(node1.equals((Object)node0));
1824:       assertFalse(node1.equals((Object)node5));
1825:       assertFalse(node1.equals((Object)node3));
1826:       assertFalse(node2.equals((Object)node5));
1827:       assertFalse(node2.equals((Object)node3));
1828:       assertFalse(node2.equals((Object)node0));
1829:       
1830:       // Undeclared exception!
1831:       try { 
1832:         node3.checkTreeTypeAwareEqualsImpl((Node) null);
1833:         fail("Expecting exception: NullPointerException");
1834:       
1835:       } catch(NullPointerException e) {
1836:          //
1837:          // no message in exception (getMessage() returned null)
1838:          //
1839:          verifyException("com.google.javascript.rhino.Node", e);
1840:       }
1841:   }
1842: }
RegularFileObject[/tmp/EvoSuite_107_1628157520811/com/google/javascript/rhino/Node_107_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_107_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_107_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_107_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:41.296 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertNotNull(iterable0);

boolean boolean0 = node0.isDec();
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(boolean0);

Node node1 = new Node((-2812), 31, 57);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(127033, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(31, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.hasOneChild());
assertEquals(57, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals((-2812), node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = node1.clonePropsFrom(node0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(127033, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(31, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.hasOneChild());
assertEquals(57, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals((-2812), node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertFalse(node2.isNumber());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertEquals((-2812), node2.getType());
assertEquals(127033, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(57, node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertEquals(31, node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertSame(node1, node2);
assertSame(node2, node1);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));

node2.removeProp(340);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(127033, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(31, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.hasOneChild());
assertEquals(57, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals((-2812), node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertFalse(node2.isNumber());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertEquals((-2812), node2.getType());
assertEquals(127033, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(57, node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertEquals(31, node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertSame(node1, node2);
assertSame(node2, node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));

Node node3 = Node.newString(47, "LABEL_NAME", 724, (-2748));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node3.isFunction());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isEmpty());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isName());
assertFalse(node3.isOr());
assertFalse(node3.isNull());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetElem());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isCall());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertTrue(node3.isRegExp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabelName());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isLabel());
assertFalse(node3.isInc());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isStringKey());
assertFalse(node3.isIn());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isThis());
assertFalse(node3.isNE());
assertFalse(node3.isNumber());
assertFalse(node3.isIf());
assertEquals((-1), node3.getLineno());
assertEquals(47, node3.getType());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isWith());
assertFalse(node3.isFor());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertNotNull(node3);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));

Node node4 = node1.removeFirstChild();
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(127033, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(31, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.hasOneChild());
assertEquals(57, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals((-2812), node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertSame(node1, node2);
assertNull(node4);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));

Node node5 = Node.newNumber(2858.03753);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node5.isCast());
assertFalse(node5.isGetElem());
assertFalse(node5.hasOneChild());
assertFalse(node5.isLabelName());
assertFalse(node5.isScript());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isOr());
assertFalse(node5.isNot());
assertFalse(node5.isObjectLit());
assertFalse(node5.isDo());
assertFalse(node5.isAnd());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isLabel());
assertFalse(node5.isFalse());
assertFalse(node5.isContinue());
assertFalse(node5.isHook());
assertFalse(node5.isBlock());
assertFalse(node5.isThrow());
assertFalse(node5.isStringKey());
assertFalse(node5.isInc());
assertFalse(node5.isSetterDef());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isCatch());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCase());
assertEquals((-1), node5.getLineno());
assertEquals(39, node5.getType());
assertFalse(node5.isThis());
assertFalse(node5.isRegExp());
assertFalse(node5.isWith());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isArrayLit());
assertFalse(node5.isTry());
assertFalse(node5.isDelProp());
assertFalse(node5.isFor());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isTrue());
assertFalse(node5.isDebugger());
assertFalse(node5.isEmpty());
assertFalse(node5.isGetterDef());
assertFalse(node5.isIn());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isParamList());
assertFalse(node5.isFunction());
assertFalse(node5.isSwitch());
assertFalse(node5.isCall());
assertFalse(node5.isVar());
assertFalse(node5.isName());
assertFalse(node5.isNull());
assertFalse(node5.isGetProp());
assertFalse(node5.isNew());
assertFalse(node5.isAdd());
assertFalse(node5.isString());
assertFalse(node5.isReturn());
assertTrue(node5.isNumber());
assertFalse(node5.isWhile());
assertFalse(node5.isComma());
assertFalse(node5.isExprResult());
assertFalse(node5.isTypeOf());
assertFalse(node5.isVoid());
assertFalse(node5.isDec());
assertFalse(node5.isBreak());
assertFalse(node5.hasChildren());
assertFalse(node5.isAssign());
assertNotSame(node5, node0);
assertNotNull(node5);
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));

boolean boolean1 = node0.isGetProp();
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertNotSame(node0, node5);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node5));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

Object object0 = node2.getProp(46);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals(127033, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(31, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.hasOneChild());
assertEquals(57, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertEquals((-2812), node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertFalse(node2.isNumber());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertEquals((-2812), node2.getType());
assertEquals(127033, node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(57, node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertEquals(31, node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertNotSame(node0, node5);
assertSame(node1, node2);
assertSame(node2, node1);
assertNull(object0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));

node3.checkTreeTypeAwareEqualsImpl((Node) null);

[MASTER] 09:58:41.387 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_108_1628157521297/com/google/javascript/rhino/Node_108_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_108_1628157521297/com/google/javascript/rhino/Node_108_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:41.387 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:41.387 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:41.388 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 163
[MASTER] 09:58:41.389 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_108_1628157521297/com/google/javascript/rhino/Node_108_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_108_tmp__ESTest extends Node_108_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertEquals(37, Node.OPT_ARG_NAME);
23:       assertEquals(2, Node.POST_FLAG);
24:       assertEquals(46, Node.IS_NAMESPACE);
25:       assertEquals(56, Node.CHANGE_TIME);
26:       assertEquals(51, Node.STATIC_SOURCE_FILE);
27:       assertEquals(12, Node.COLUMN_BITS);
28:       assertEquals(47, Node.IS_DISPATCHER);
29:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
30:       assertEquals(1, Node.DECR_FLAG);
31:       assertEquals(32, Node.INCRDECR_PROP);
32:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
33:       assertEquals(29, Node.JSDOC_INFO_PROP);
34:       assertEquals(53, Node.INPUT_ID);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
37:       assertEquals(52, Node.LENGTH);
38:       assertEquals(36, Node.QUOTED_PROP);
39:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
40:       assertEquals(57, Node.REFLECTED_OBJECT);
41:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
42:       assertEquals(49, Node.DIRECT_EVAL);
43:       assertEquals(4095, Node.COLUMN_MASK);
44:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
47:       assertEquals(8, Node.FLAG_NO_THROWS);
48:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
49:       assertEquals(55, Node.INFERRED_FUNCTION);
50:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
51:       assertEquals(50, Node.FREE_CALL);
52:       assertEquals(39, Node.EMPTY_BLOCK);
53:       assertEquals(54, Node.SLASH_V);
54:       assertEquals(57, Node.LAST_PROP);
55:       assertEquals(43, Node.IS_CONSTANT_NAME);
56:       assertEquals(30, Node.VAR_ARGS_NAME);
57:       assertEquals(40, Node.ORIGINALNAME_PROP);
58:       assertFalse(node0.isGetProp());
59:       assertFalse(node0.isComma());
60:       assertFalse(node0.isAnd());
61:       assertFalse(node0.isThis());
62:       assertFalse(node0.isObjectLit());
63:       assertFalse(node0.isNot());
64:       assertFalse(node0.isScript());
65:       assertFalse(node0.isHook());
66:       assertFalse(node0.isGetElem());
67:       assertFalse(node0.isWith());
68:       assertFalse(node0.isAssign());
69:       assertFalse(node0.isDec());
70:       assertFalse(node0.isInstanceOf());
71:       assertFalse(node0.isTypeOf());
72:       assertFalse(node0.isBreak());
73:       assertFalse(node0.isExprResult());
74:       assertFalse(node0.isLabel());
75:       assertFalse(node0.isAssignAdd());
76:       assertFalse(node0.isOr());
77:       assertFalse(node0.isCase());
78:       assertFalse(node0.isDo());
79:       assertFalse(node0.isGetterDef());
80:       assertFalse(node0.hasOneChild());
81:       assertFalse(node0.isEmpty());
82:       assertFalse(node0.isAdd());
83:       assertFalse(node0.isNew());
84:       assertEquals((-1), node0.getCharno());
85:       assertFalse(node0.isDefaultCase());
86:       assertFalse(node0.isSwitch());
87:       assertFalse(node0.isVar());
88:       assertFalse(node0.isStringKey());
89:       assertFalse(node0.isLabelName());
90:       assertFalse(node0.isArrayLit());
91:       assertEquals(0, node0.getChildCount());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isParamList());
94:       assertFalse(node0.isSetterDef());
95:       assertFalse(node0.isBlock());
96:       assertFalse(node0.isTry());
97:       assertFalse(node0.isVoid());
98:       assertFalse(node0.isWhile());
99:       assertFalse(node0.isTrue());
100:       assertFalse(node0.isName());
101:       assertFalse(node0.isFor());
102:       assertEquals(39, node0.getType());
103:       assertFalse(node0.isDelProp());
104:       assertFalse(node0.isRegExp());
105:       assertFalse(node0.hasMoreThanOneChild());
106:       assertFalse(node0.isCall());
107:       assertFalse(node0.isCatch());
108:       assertEquals((-1), node0.getLineno());
109:       assertTrue(node0.isNumber());
110:       assertEquals((-1), node0.getSourcePosition());
111:       assertFalse(node0.hasChildren());
112:       assertFalse(node0.isIf());
113:       assertFalse(node0.isReturn());
114:       assertFalse(node0.isNE());
115:       assertFalse(node0.isIn());
116:       assertFalse(node0.isString());
117:       assertFalse(node0.isInc());
118:       assertFalse(node0.isDebugger());
119:       assertFalse(node0.isFunction());
120:       assertFalse(node0.isThrow());
121:       assertFalse(node0.isFalse());
122:       assertFalse(node0.isContinue());
123:       assertFalse(node0.isCast());
124:       assertNotNull(node0);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertEquals(37, Node.OPT_ARG_NAME);
128:       assertEquals(2, Node.POST_FLAG);
129:       assertEquals(46, Node.IS_NAMESPACE);
130:       assertEquals(56, Node.CHANGE_TIME);
131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
132:       assertEquals(12, Node.COLUMN_BITS);
133:       assertEquals(47, Node.IS_DISPATCHER);
134:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
135:       assertEquals(1, Node.DECR_FLAG);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
138:       assertEquals(29, Node.JSDOC_INFO_PROP);
139:       assertEquals(53, Node.INPUT_ID);
140:       assertEquals(15, Node.NO_SIDE_EFFECTS);
141:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
142:       assertEquals(52, Node.LENGTH);
143:       assertEquals(36, Node.QUOTED_PROP);
144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
145:       assertEquals(57, Node.REFLECTED_OBJECT);
146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
147:       assertEquals(49, Node.DIRECT_EVAL);
148:       assertEquals(4095, Node.COLUMN_MASK);
149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
152:       assertEquals(8, Node.FLAG_NO_THROWS);
153:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
154:       assertEquals(55, Node.INFERRED_FUNCTION);
155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
156:       assertEquals(50, Node.FREE_CALL);
157:       assertEquals(39, Node.EMPTY_BLOCK);
158:       assertEquals(54, Node.SLASH_V);
159:       assertEquals(57, Node.LAST_PROP);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(30, Node.VAR_ARGS_NAME);
162:       assertEquals(40, Node.ORIGINALNAME_PROP);
163:       assertFalse(iterable0.contains(node0));
164:       assertFalse(node0.isGetProp());
165:       assertFalse(node0.isComma());
166:       assertFalse(node0.isAnd());
167:       assertFalse(node0.isThis());
168:       assertFalse(node0.isObjectLit());
169:       assertFalse(node0.isNot());
170:       assertFalse(node0.isScript());
171:       assertFalse(node0.isHook());
172:       assertFalse(node0.isGetElem());
173:       assertFalse(node0.isWith());
174:       assertFalse(node0.isAssign());
175:       assertFalse(node0.isDec());
176:       assertFalse(node0.isInstanceOf());
177:       assertFalse(node0.isTypeOf());
178:       assertFalse(node0.isBreak());
179:       assertFalse(node0.isExprResult());
180:       assertFalse(node0.isLabel());
181:       assertFalse(node0.isAssignAdd());
182:       assertFalse(node0.isOr());
183:       assertFalse(node0.isCase());
184:       assertFalse(node0.isDo());
185:       assertFalse(node0.isGetterDef());
186:       assertFalse(node0.hasOneChild());
187:       assertFalse(node0.isEmpty());
188:       assertFalse(node0.isAdd());
189:       assertFalse(node0.isNew());
190:       assertEquals((-1), node0.getCharno());
191:       assertFalse(node0.isDefaultCase());
192:       assertFalse(node0.isSwitch());
193:       assertFalse(node0.isVar());
194:       assertFalse(node0.isStringKey());
195:       assertFalse(node0.isLabelName());
196:       assertFalse(node0.isArrayLit());
197:       assertEquals(0, node0.getChildCount());
198:       assertFalse(node0.isNull());
199:       assertFalse(node0.isParamList());
200:       assertFalse(node0.isSetterDef());
201:       assertFalse(node0.isBlock());
202:       assertFalse(node0.isTry());
203:       assertFalse(node0.isVoid());
204:       assertFalse(node0.isWhile());
205:       assertFalse(node0.isTrue());
206:       assertFalse(node0.isName());
207:       assertFalse(node0.isFor());
208:       assertEquals(39, node0.getType());
209:       assertFalse(node0.isDelProp());
210:       assertFalse(node0.isRegExp());
211:       assertFalse(node0.hasMoreThanOneChild());
212:       assertFalse(node0.isCall());
213:       assertFalse(node0.isCatch());
214:       assertEquals((-1), node0.getLineno());
215:       assertTrue(node0.isNumber());
216:       assertEquals((-1), node0.getSourcePosition());
217:       assertFalse(node0.hasChildren());
218:       assertFalse(node0.isIf());
219:       assertFalse(node0.isReturn());
220:       assertFalse(node0.isNE());
221:       assertFalse(node0.isIn());
222:       assertFalse(node0.isString());
223:       assertFalse(node0.isInc());
224:       assertFalse(node0.isDebugger());
225:       assertFalse(node0.isFunction());
226:       assertFalse(node0.isThrow());
227:       assertFalse(node0.isFalse());
228:       assertFalse(node0.isContinue());
229:       assertFalse(node0.isCast());
230:       assertNotNull(iterable0);
231:       
232:       boolean boolean0 = node0.isDec();
233:       assertEquals(37, Node.OPT_ARG_NAME);
234:       assertEquals(2, Node.POST_FLAG);
235:       assertEquals(46, Node.IS_NAMESPACE);
236:       assertEquals(56, Node.CHANGE_TIME);
237:       assertEquals(51, Node.STATIC_SOURCE_FILE);
238:       assertEquals(12, Node.COLUMN_BITS);
239:       assertEquals(47, Node.IS_DISPATCHER);
240:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
241:       assertEquals(1, Node.DECR_FLAG);
242:       assertEquals(32, Node.INCRDECR_PROP);
243:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
244:       assertEquals(29, Node.JSDOC_INFO_PROP);
245:       assertEquals(53, Node.INPUT_ID);
246:       assertEquals(15, Node.NO_SIDE_EFFECTS);
247:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
248:       assertEquals(52, Node.LENGTH);
249:       assertEquals(36, Node.QUOTED_PROP);
250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
251:       assertEquals(57, Node.REFLECTED_OBJECT);
252:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
253:       assertEquals(49, Node.DIRECT_EVAL);
254:       assertEquals(4095, Node.COLUMN_MASK);
255:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
256:       assertEquals(48, Node.DIRECTIVES);
257:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
258:       assertEquals(8, Node.FLAG_NO_THROWS);
259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
260:       assertEquals(55, Node.INFERRED_FUNCTION);
261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
262:       assertEquals(50, Node.FREE_CALL);
263:       assertEquals(39, Node.EMPTY_BLOCK);
264:       assertEquals(54, Node.SLASH_V);
265:       assertEquals(57, Node.LAST_PROP);
266:       assertEquals(43, Node.IS_CONSTANT_NAME);
267:       assertEquals(30, Node.VAR_ARGS_NAME);
268:       assertEquals(40, Node.ORIGINALNAME_PROP);
269:       assertFalse(node0.isGetProp());
270:       assertFalse(node0.isComma());
271:       assertFalse(node0.isAnd());
272:       assertFalse(node0.isThis());
273:       assertFalse(node0.isObjectLit());
274:       assertFalse(node0.isNot());
275:       assertFalse(node0.isScript());
276:       assertFalse(node0.isHook());
277:       assertFalse(node0.isGetElem());
278:       assertFalse(node0.isWith());
279:       assertFalse(node0.isAssign());
280:       assertFalse(node0.isDec());
281:       assertFalse(node0.isInstanceOf());
282:       assertFalse(node0.isTypeOf());
283:       assertFalse(node0.isBreak());
284:       assertFalse(node0.isExprResult());
285:       assertFalse(node0.isLabel());
286:       assertFalse(node0.isAssignAdd());
287:       assertFalse(node0.isOr());
288:       assertFalse(node0.isCase());
289:       assertFalse(node0.isDo());
290:       assertFalse(node0.isGetterDef());
291:       assertFalse(node0.hasOneChild());
292:       assertFalse(node0.isEmpty());
293:       assertFalse(node0.isAdd());
294:       assertFalse(node0.isNew());
295:       assertEquals((-1), node0.getCharno());
296:       assertFalse(node0.isDefaultCase());
297:       assertFalse(node0.isSwitch());
298:       assertFalse(node0.isVar());
299:       assertFalse(node0.isStringKey());
300:       assertFalse(node0.isLabelName());
301:       assertFalse(node0.isArrayLit());
302:       assertEquals(0, node0.getChildCount());
303:       assertFalse(node0.isNull());
304:       assertFalse(node0.isParamList());
305:       assertFalse(node0.isSetterDef());
306:       assertFalse(node0.isBlock());
307:       assertFalse(node0.isTry());
308:       assertFalse(node0.isVoid());
309:       assertFalse(node0.isWhile());
310:       assertFalse(node0.isTrue());
311:       assertFalse(node0.isName());
312:       assertFalse(node0.isFor());
313:       assertEquals(39, node0.getType());
314:       assertFalse(node0.isDelProp());
315:       assertFalse(node0.isRegExp());
316:       assertFalse(node0.hasMoreThanOneChild());
317:       assertFalse(node0.isCall());
318:       assertFalse(node0.isCatch());
319:       assertEquals((-1), node0.getLineno());
320:       assertTrue(node0.isNumber());
321:       assertEquals((-1), node0.getSourcePosition());
322:       assertFalse(node0.hasChildren());
323:       assertFalse(node0.isIf());
324:       assertFalse(node0.isReturn());
325:       assertFalse(node0.isNE());
326:       assertFalse(node0.isIn());
327:       assertFalse(node0.isString());
328:       assertFalse(node0.isInc());
329:       assertFalse(node0.isDebugger());
330:       assertFalse(node0.isFunction());
331:       assertFalse(node0.isThrow());
332:       assertFalse(node0.isFalse());
333:       assertFalse(node0.isContinue());
334:       assertFalse(node0.isCast());
335:       assertFalse(boolean0);
336:       
337:       Node node1 = new Node(57, 8, 2);
338:       assertEquals(30, Node.VAR_ARGS_NAME);
339:       assertEquals(49, Node.DIRECT_EVAL);
340:       assertEquals(57, Node.LAST_PROP);
341:       assertEquals(12, Node.COLUMN_BITS);
342:       assertEquals(54, Node.SLASH_V);
343:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
344:       assertEquals(51, Node.STATIC_SOURCE_FILE);
345:       assertEquals(52, Node.LENGTH);
346:       assertEquals(32, Node.INCRDECR_PROP);
347:       assertEquals(15, Node.NO_SIDE_EFFECTS);
348:       assertEquals(1, Node.DECR_FLAG);
349:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
350:       assertEquals(29, Node.JSDOC_INFO_PROP);
351:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
352:       assertEquals(56, Node.CHANGE_TIME);
353:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
354:       assertEquals(8, Node.FLAG_NO_THROWS);
355:       assertEquals(57, Node.REFLECTED_OBJECT);
356:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
357:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
358:       assertEquals(4095, Node.COLUMN_MASK);
359:       assertEquals(48, Node.DIRECTIVES);
360:       assertEquals(37, Node.OPT_ARG_NAME);
361:       assertEquals(43, Node.IS_CONSTANT_NAME);
362:       assertEquals(36, Node.QUOTED_PROP);
363:       assertEquals(53, Node.INPUT_ID);
364:       assertEquals(55, Node.INFERRED_FUNCTION);
365:       assertEquals(39, Node.EMPTY_BLOCK);
366:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
367:       assertEquals(50, Node.FREE_CALL);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
370:       assertEquals(2, Node.POST_FLAG);
371:       assertEquals(47, Node.IS_DISPATCHER);
372:       assertEquals(46, Node.IS_NAMESPACE);
373:       assertEquals(40, Node.ORIGINALNAME_PROP);
374:       assertFalse(node1.isWith());
375:       assertFalse(node1.isNot());
376:       assertFalse(node1.isAnd());
377:       assertFalse(node1.hasOneChild());
378:       assertFalse(node1.isObjectLit());
379:       assertFalse(node1.isGetProp());
380:       assertFalse(node1.isScript());
381:       assertFalse(node1.isBreak());
382:       assertFalse(node1.hasChildren());
383:       assertFalse(node1.isDec());
384:       assertFalse(node1.isAssign());
385:       assertFalse(node1.isTypeOf());
386:       assertFalse(node1.isComma());
387:       assertFalse(node1.isThis());
388:       assertFalse(node1.isReturn());
389:       assertFalse(node1.isHook());
390:       assertFalse(node1.isInstanceOf());
391:       assertFalse(node1.hasMoreThanOneChild());
392:       assertFalse(node1.isExprResult());
393:       assertFalse(node1.isGetElem());
394:       assertFalse(node1.isSwitch());
395:       assertFalse(node1.isDo());
396:       assertFalse(node1.isBlock());
397:       assertFalse(node1.isOr());
398:       assertFalse(node1.isAssignAdd());
399:       assertFalse(node1.isCase());
400:       assertFalse(node1.isNew());
401:       assertFalse(node1.isAdd());
402:       assertFalse(node1.isGetterDef());
403:       assertFalse(node1.isLabelName());
404:       assertFalse(node1.isNumber());
405:       assertFalse(node1.isStringKey());
406:       assertFalse(node1.isParamList());
407:       assertFalse(node1.isLabel());
408:       assertFalse(node1.isVar());
409:       assertEquals(0, node1.getChildCount());
410:       assertFalse(node1.isArrayLit());
411:       assertFalse(node1.isDefaultCase());
412:       assertEquals(2, node1.getCharno());
413:       assertFalse(node1.isFunction());
414:       assertFalse(node1.isRegExp());
415:       assertFalse(node1.isDebugger());
416:       assertFalse(node1.isTrue());
417:       assertFalse(node1.isTry());
418:       assertFalse(node1.isEmpty());
419:       assertFalse(node1.isSetterDef());
420:       assertFalse(node1.isIf());
421:       assertFalse(node1.isName());
422:       assertFalse(node1.isDelProp());
423:       assertFalse(node1.isNE());
424:       assertFalse(node1.isFor());
425:       assertFalse(node1.isNull());
426:       assertFalse(node1.isVoid());
427:       assertFalse(node1.isCatch());
428:       assertFalse(node1.isCall());
429:       assertEquals(32770, node1.getSourcePosition());
430:       assertFalse(node1.isWhile());
431:       assertFalse(node1.isString());
432:       assertFalse(node1.isIn());
433:       assertFalse(node1.isInc());
434:       assertFalse(node1.isFalse());
435:       assertFalse(node1.isThrow());
436:       assertEquals(57, node1.getType());
437:       assertEquals(8, node1.getLineno());
438:       assertFalse(node1.isContinue());
439:       assertFalse(node1.isCast());
440:       assertNotNull(node1);
441:       assertFalse(node1.equals((Object)node0));
442:       
443:       Node node2 = new Node(4095, node0, 51, 8);
444:       assertEquals(37, Node.OPT_ARG_NAME);
445:       assertEquals(2, Node.POST_FLAG);
446:       assertEquals(46, Node.IS_NAMESPACE);
447:       assertEquals(56, Node.CHANGE_TIME);
448:       assertEquals(51, Node.STATIC_SOURCE_FILE);
449:       assertEquals(12, Node.COLUMN_BITS);
450:       assertEquals(47, Node.IS_DISPATCHER);
451:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
452:       assertEquals(1, Node.DECR_FLAG);
453:       assertEquals(32, Node.INCRDECR_PROP);
454:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
455:       assertEquals(29, Node.JSDOC_INFO_PROP);
456:       assertEquals(53, Node.INPUT_ID);
457:       assertEquals(15, Node.NO_SIDE_EFFECTS);
458:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
459:       assertEquals(52, Node.LENGTH);
460:       assertEquals(36, Node.QUOTED_PROP);
461:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
462:       assertEquals(57, Node.REFLECTED_OBJECT);
463:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(4095, Node.COLUMN_MASK);
466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
467:       assertEquals(48, Node.DIRECTIVES);
468:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
469:       assertEquals(8, Node.FLAG_NO_THROWS);
470:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
471:       assertEquals(55, Node.INFERRED_FUNCTION);
472:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
473:       assertEquals(50, Node.FREE_CALL);
474:       assertEquals(39, Node.EMPTY_BLOCK);
475:       assertEquals(54, Node.SLASH_V);
476:       assertEquals(57, Node.LAST_PROP);
477:       assertEquals(43, Node.IS_CONSTANT_NAME);
478:       assertEquals(30, Node.VAR_ARGS_NAME);
479:       assertEquals(40, Node.ORIGINALNAME_PROP);
480:       assertEquals(57, Node.REFLECTED_OBJECT);
481:       assertEquals(52, Node.LENGTH);
482:       assertEquals(40, Node.ORIGINALNAME_PROP);
483:       assertEquals(15, Node.NO_SIDE_EFFECTS);
484:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
485:       assertEquals(54, Node.SLASH_V);
486:       assertEquals(8, Node.FLAG_NO_THROWS);
487:       assertEquals(50, Node.FREE_CALL);
488:       assertEquals(51, Node.STATIC_SOURCE_FILE);
489:       assertEquals(32, Node.INCRDECR_PROP);
490:       assertEquals(12, Node.COLUMN_BITS);
491:       assertEquals(4095, Node.COLUMN_MASK);
492:       assertEquals(48, Node.DIRECTIVES);
493:       assertEquals(1, Node.DECR_FLAG);
494:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
495:       assertEquals(49, Node.DIRECT_EVAL);
496:       assertEquals(37, Node.OPT_ARG_NAME);
497:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
498:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
499:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
500:       assertEquals(53, Node.INPUT_ID);
501:       assertEquals(29, Node.JSDOC_INFO_PROP);
502:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
503:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
504:       assertEquals(43, Node.IS_CONSTANT_NAME);
505:       assertEquals(56, Node.CHANGE_TIME);
506:       assertEquals(36, Node.QUOTED_PROP);
507:       assertEquals(46, Node.IS_NAMESPACE);
508:       assertEquals(55, Node.INFERRED_FUNCTION);
509:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
510:       assertEquals(39, Node.EMPTY_BLOCK);
511:       assertEquals(57, Node.LAST_PROP);
512:       assertEquals(47, Node.IS_DISPATCHER);
513:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
514:       assertEquals(2, Node.POST_FLAG);
515:       assertEquals(30, Node.VAR_ARGS_NAME);
516:       assertFalse(node0.isGetProp());
517:       assertFalse(node0.isComma());
518:       assertFalse(node0.isAnd());
519:       assertFalse(node0.isThis());
520:       assertFalse(node0.isObjectLit());
521:       assertFalse(node0.isNot());
522:       assertFalse(node0.isScript());
523:       assertFalse(node0.isHook());
524:       assertFalse(node0.isGetElem());
525:       assertFalse(node0.isWith());
526:       assertFalse(node0.isAssign());
527:       assertFalse(node0.isDec());
528:       assertFalse(node0.isInstanceOf());
529:       assertFalse(node0.isTypeOf());
530:       assertFalse(node0.isBreak());
531:       assertFalse(node0.isExprResult());
532:       assertFalse(node0.isLabel());
533:       assertFalse(node0.isAssignAdd());
534:       assertFalse(node0.isOr());
535:       assertFalse(node0.isCase());
536:       assertFalse(node0.isDo());
537:       assertFalse(node0.isGetterDef());
538:       assertFalse(node0.hasOneChild());
539:       assertFalse(node0.isEmpty());
540:       assertFalse(node0.isAdd());
541:       assertFalse(node0.isNew());
542:       assertEquals((-1), node0.getCharno());
543:       assertFalse(node0.isDefaultCase());
544:       assertFalse(node0.isSwitch());
545:       assertFalse(node0.isVar());
546:       assertFalse(node0.isStringKey());
547:       assertFalse(node0.isLabelName());
548:       assertFalse(node0.isArrayLit());
549:       assertEquals(0, node0.getChildCount());
550:       assertFalse(node0.isNull());
551:       assertFalse(node0.isParamList());
552:       assertFalse(node0.isSetterDef());
553:       assertFalse(node0.isBlock());
554:       assertFalse(node0.isTry());
555:       assertFalse(node0.isVoid());
556:       assertFalse(node0.isWhile());
557:       assertFalse(node0.isTrue());
558:       assertFalse(node0.isName());
559:       assertFalse(node0.isFor());
560:       assertEquals(39, node0.getType());
561:       assertFalse(node0.isDelProp());
562:       assertFalse(node0.isRegExp());
563:       assertFalse(node0.hasMoreThanOneChild());
564:       assertFalse(node0.isCall());
565:       assertFalse(node0.isCatch());
566:       assertEquals((-1), node0.getLineno());
567:       assertTrue(node0.isNumber());
568:       assertEquals((-1), node0.getSourcePosition());
569:       assertFalse(node0.hasChildren());
570:       assertFalse(node0.isIf());
571:       assertFalse(node0.isReturn());
572:       assertFalse(node0.isNE());
573:       assertFalse(node0.isIn());
574:       assertFalse(node0.isString());
575:       assertFalse(node0.isInc());
576:       assertFalse(node0.isDebugger());
577:       assertFalse(node0.isFunction());
578:       assertFalse(node0.isThrow());
579:       assertFalse(node0.isFalse());
580:       assertFalse(node0.isContinue());
581:       assertFalse(node0.isCast());
582:       assertFalse(node2.isCast());
583:       assertFalse(node2.isLabelName());
584:       assertFalse(node2.isExprResult());
585:       assertFalse(node2.isGetElem());
586:       assertFalse(node2.isScript());
587:       assertFalse(node2.isNumber());
588:       assertFalse(node2.isNot());
589:       assertFalse(node2.isOr());
590:       assertFalse(node2.isInstanceOf());
591:       assertFalse(node2.isObjectLit());
592:       assertFalse(node2.hasMoreThanOneChild());
593:       assertFalse(node2.isGetProp());
594:       assertEquals(8, node2.getCharno());
595:       assertFalse(node2.isTypeOf());
596:       assertFalse(node2.isComma());
597:       assertFalse(node2.isDec());
598:       assertFalse(node2.isWhile());
599:       assertFalse(node2.isWith());
600:       assertFalse(node2.isAssign());
601:       assertFalse(node2.isThis());
602:       assertFalse(node2.isReturn());
603:       assertFalse(node2.isBlock());
604:       assertFalse(node2.isVar());
605:       assertFalse(node2.isName());
606:       assertFalse(node2.isAdd());
607:       assertFalse(node2.isNew());
608:       assertFalse(node2.isBreak());
609:       assertFalse(node2.isCall());
610:       assertFalse(node2.isNull());
611:       assertEquals(51, node2.getLineno());
612:       assertFalse(node2.isParamList());
613:       assertFalse(node2.isSwitch());
614:       assertFalse(node2.isStringKey());
615:       assertFalse(node2.isDo());
616:       assertFalse(node2.isDefaultCase());
617:       assertFalse(node2.isLabel());
618:       assertFalse(node2.isAssignAdd());
619:       assertFalse(node2.isArrayLit());
620:       assertEquals(208904, node2.getSourcePosition());
621:       assertFalse(node2.isTry());
622:       assertFalse(node2.isEmpty());
623:       assertEquals(4095, node2.getType());
624:       assertFalse(node2.isNE());
625:       assertFalse(node2.isVoid());
626:       assertFalse(node2.isIf());
627:       assertFalse(node2.isDelProp());
628:       assertFalse(node2.isGetterDef());
629:       assertFalse(node2.isDebugger());
630:       assertFalse(node2.isTrue());
631:       assertFalse(node2.isCatch());
632:       assertTrue(node2.hasChildren());
633:       assertFalse(node2.isCase());
634:       assertFalse(node2.isRegExp());
635:       assertFalse(node2.isFor());
636:       assertEquals(1, node2.getChildCount());
637:       assertFalse(node2.isHook());
638:       assertTrue(node2.hasOneChild());
639:       assertFalse(node2.isFalse());
640:       assertFalse(node2.isInc());
641:       assertFalse(node2.isString());
642:       assertFalse(node2.isAnd());
643:       assertFalse(node2.isContinue());
644:       assertFalse(node2.isIn());
645:       assertFalse(node2.isSetterDef());
646:       assertFalse(node2.isFunction());
647:       assertFalse(node2.isThrow());
648:       assertNotNull(node2);
649:       assertFalse(node0.equals((Object)node1));
650:       assertFalse(node2.equals((Object)node1));
651:       assertFalse(node2.equals((Object)node0));
652:       
653:       boolean boolean1 = node1.isFromExterns();
654:       assertEquals(30, Node.VAR_ARGS_NAME);
655:       assertEquals(49, Node.DIRECT_EVAL);
656:       assertEquals(57, Node.LAST_PROP);
657:       assertEquals(12, Node.COLUMN_BITS);
658:       assertEquals(54, Node.SLASH_V);
659:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
660:       assertEquals(51, Node.STATIC_SOURCE_FILE);
661:       assertEquals(52, Node.LENGTH);
662:       assertEquals(32, Node.INCRDECR_PROP);
663:       assertEquals(15, Node.NO_SIDE_EFFECTS);
664:       assertEquals(1, Node.DECR_FLAG);
665:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
666:       assertEquals(29, Node.JSDOC_INFO_PROP);
667:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
668:       assertEquals(56, Node.CHANGE_TIME);
669:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
670:       assertEquals(8, Node.FLAG_NO_THROWS);
671:       assertEquals(57, Node.REFLECTED_OBJECT);
672:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
673:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
674:       assertEquals(4095, Node.COLUMN_MASK);
675:       assertEquals(48, Node.DIRECTIVES);
676:       assertEquals(37, Node.OPT_ARG_NAME);
677:       assertEquals(43, Node.IS_CONSTANT_NAME);
678:       assertEquals(36, Node.QUOTED_PROP);
679:       assertEquals(53, Node.INPUT_ID);
680:       assertEquals(55, Node.INFERRED_FUNCTION);
681:       assertEquals(39, Node.EMPTY_BLOCK);
682:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
683:       assertEquals(50, Node.FREE_CALL);
684:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
685:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
686:       assertEquals(2, Node.POST_FLAG);
687:       assertEquals(47, Node.IS_DISPATCHER);
688:       assertEquals(46, Node.IS_NAMESPACE);
689:       assertEquals(40, Node.ORIGINALNAME_PROP);
690:       assertFalse(node1.isWith());
691:       assertFalse(node1.isNot());
692:       assertFalse(node1.isAnd());
693:       assertFalse(node1.hasOneChild());
694:       assertFalse(node1.isObjectLit());
695:       assertFalse(node1.isGetProp());
696:       assertFalse(node1.isScript());
697:       assertFalse(node1.isBreak());
698:       assertFalse(node1.hasChildren());
699:       assertFalse(node1.isDec());
700:       assertFalse(node1.isAssign());
701:       assertFalse(node1.isTypeOf());
702:       assertFalse(node1.isComma());
703:       assertFalse(node1.isThis());
704:       assertFalse(node1.isReturn());
705:       assertFalse(node1.isHook());
706:       assertFalse(node1.isInstanceOf());
707:       assertFalse(node1.hasMoreThanOneChild());
708:       assertFalse(node1.isExprResult());
709:       assertFalse(node1.isGetElem());
710:       assertFalse(node1.isSwitch());
711:       assertFalse(node1.isDo());
712:       assertFalse(node1.isBlock());
713:       assertFalse(node1.isOr());
714:       assertFalse(node1.isAssignAdd());
715:       assertFalse(node1.isCase());
716:       assertFalse(node1.isNew());
717:       assertFalse(node1.isAdd());
718:       assertFalse(node1.isGetterDef());
719:       assertFalse(node1.isLabelName());
720:       assertFalse(node1.isNumber());
721:       assertFalse(node1.isStringKey());
722:       assertFalse(node1.isParamList());
723:       assertFalse(node1.isLabel());
724:       assertFalse(node1.isVar());
725:       assertEquals(0, node1.getChildCount());
726:       assertFalse(node1.isArrayLit());
727:       assertFalse(node1.isDefaultCase());
728:       assertEquals(2, node1.getCharno());
729:       assertFalse(node1.isFunction());
730:       assertFalse(node1.isRegExp());
731:       assertFalse(node1.isDebugger());
732:       assertFalse(node1.isTrue());
733:       assertFalse(node1.isTry());
734:       assertFalse(node1.isEmpty());
735:       assertFalse(node1.isSetterDef());
736:       assertFalse(node1.isIf());
737:       assertFalse(node1.isName());
738:       assertFalse(node1.isDelProp());
739:       assertFalse(node1.isNE());
740:       assertFalse(node1.isFor());
741:       assertFalse(node1.isNull());
742:       assertFalse(node1.isVoid());
743:       assertFalse(node1.isCatch());
744:       assertFalse(node1.isCall());
745:       assertEquals(32770, node1.getSourcePosition());
746:       assertFalse(node1.isWhile());
747:       assertFalse(node1.isString());
748:       assertFalse(node1.isIn());
749:       assertFalse(node1.isInc());
750:       assertFalse(node1.isFalse());
751:       assertFalse(node1.isThrow());
752:       assertEquals(57, node1.getType());
753:       assertEquals(8, node1.getLineno());
754:       assertFalse(node1.isContinue());
755:       assertFalse(node1.isCast());
756:       assertNotSame(node1, node2);
757:       assertFalse(node1.equals((Object)node0));
758:       assertFalse(node1.equals((Object)node2));
759:       assertTrue(boolean1 == boolean0);
760:       assertFalse(boolean1);
761:       
762:       boolean boolean2 = node2.isBreak();
763:       assertEquals(37, Node.OPT_ARG_NAME);
764:       assertEquals(2, Node.POST_FLAG);
765:       assertEquals(46, Node.IS_NAMESPACE);
766:       assertEquals(56, Node.CHANGE_TIME);
767:       assertEquals(51, Node.STATIC_SOURCE_FILE);
768:       assertEquals(12, Node.COLUMN_BITS);
769:       assertEquals(47, Node.IS_DISPATCHER);
770:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
771:       assertEquals(1, Node.DECR_FLAG);
772:       assertEquals(32, Node.INCRDECR_PROP);
773:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
774:       assertEquals(29, Node.JSDOC_INFO_PROP);
775:       assertEquals(53, Node.INPUT_ID);
776:       assertEquals(15, Node.NO_SIDE_EFFECTS);
777:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
778:       assertEquals(52, Node.LENGTH);
779:       assertEquals(36, Node.QUOTED_PROP);
780:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
781:       assertEquals(57, Node.REFLECTED_OBJECT);
782:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
783:       assertEquals(49, Node.DIRECT_EVAL);
784:       assertEquals(4095, Node.COLUMN_MASK);
785:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
786:       assertEquals(48, Node.DIRECTIVES);
787:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
788:       assertEquals(8, Node.FLAG_NO_THROWS);
789:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
790:       assertEquals(55, Node.INFERRED_FUNCTION);
791:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
792:       assertEquals(50, Node.FREE_CALL);
793:       assertEquals(39, Node.EMPTY_BLOCK);
794:       assertEquals(54, Node.SLASH_V);
795:       assertEquals(57, Node.LAST_PROP);
796:       assertEquals(43, Node.IS_CONSTANT_NAME);
797:       assertEquals(30, Node.VAR_ARGS_NAME);
798:       assertEquals(40, Node.ORIGINALNAME_PROP);
799:       assertEquals(57, Node.REFLECTED_OBJECT);
800:       assertEquals(52, Node.LENGTH);
801:       assertEquals(40, Node.ORIGINALNAME_PROP);
802:       assertEquals(15, Node.NO_SIDE_EFFECTS);
803:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
804:       assertEquals(54, Node.SLASH_V);
805:       assertEquals(8, Node.FLAG_NO_THROWS);
806:       assertEquals(50, Node.FREE_CALL);
807:       assertEquals(51, Node.STATIC_SOURCE_FILE);
808:       assertEquals(32, Node.INCRDECR_PROP);
809:       assertEquals(12, Node.COLUMN_BITS);
810:       assertEquals(4095, Node.COLUMN_MASK);
811:       assertEquals(48, Node.DIRECTIVES);
812:       assertEquals(1, Node.DECR_FLAG);
813:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
814:       assertEquals(49, Node.DIRECT_EVAL);
815:       assertEquals(37, Node.OPT_ARG_NAME);
816:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
817:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
818:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
819:       assertEquals(53, Node.INPUT_ID);
820:       assertEquals(29, Node.JSDOC_INFO_PROP);
821:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
822:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
823:       assertEquals(43, Node.IS_CONSTANT_NAME);
824:       assertEquals(56, Node.CHANGE_TIME);
825:       assertEquals(36, Node.QUOTED_PROP);
826:       assertEquals(46, Node.IS_NAMESPACE);
827:       assertEquals(55, Node.INFERRED_FUNCTION);
828:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
829:       assertEquals(39, Node.EMPTY_BLOCK);
830:       assertEquals(57, Node.LAST_PROP);
831:       assertEquals(47, Node.IS_DISPATCHER);
832:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
833:       assertEquals(2, Node.POST_FLAG);
834:       assertEquals(30, Node.VAR_ARGS_NAME);
835:       assertFalse(node0.isGetProp());
836:       assertFalse(node0.isComma());
837:       assertFalse(node0.isAnd());
838:       assertFalse(node0.isThis());
839:       assertFalse(node0.isObjectLit());
840:       assertFalse(node0.isNot());
841:       assertFalse(node0.isScript());
842:       assertFalse(node0.isHook());
843:       assertFalse(node0.isGetElem());
844:       assertFalse(node0.isWith());
845:       assertFalse(node0.isAssign());
846:       assertFalse(node0.isDec());
847:       assertFalse(node0.isInstanceOf());
848:       assertFalse(node0.isTypeOf());
849:       assertFalse(node0.isBreak());
850:       assertFalse(node0.isExprResult());
851:       assertFalse(node0.isLabel());
852:       assertFalse(node0.isAssignAdd());
853:       assertFalse(node0.isOr());
854:       assertFalse(node0.isCase());
855:       assertFalse(node0.isDo());
856:       assertFalse(node0.isGetterDef());
857:       assertFalse(node0.hasOneChild());
858:       assertFalse(node0.isEmpty());
859:       assertFalse(node0.isAdd());
860:       assertFalse(node0.isNew());
861:       assertEquals((-1), node0.getCharno());
862:       assertFalse(node0.isDefaultCase());
863:       assertFalse(node0.isSwitch());
864:       assertFalse(node0.isVar());
865:       assertFalse(node0.isStringKey());
866:       assertFalse(node0.isLabelName());
867:       assertFalse(node0.isArrayLit());
868:       assertEquals(0, node0.getChildCount());
869:       assertFalse(node0.isNull());
870:       assertFalse(node0.isParamList());
871:       assertFalse(node0.isSetterDef());
872:       assertFalse(node0.isBlock());
873:       assertFalse(node0.isTry());
874:       assertFalse(node0.isVoid());
875:       assertFalse(node0.isWhile());
876:       assertFalse(node0.isTrue());
877:       assertFalse(node0.isName());
878:       assertFalse(node0.isFor());
879:       assertEquals(39, node0.getType());
880:       assertFalse(node0.isDelProp());
881:       assertFalse(node0.isRegExp());
882:       assertFalse(node0.hasMoreThanOneChild());
883:       assertFalse(node0.isCall());
884:       assertFalse(node0.isCatch());
885:       assertEquals((-1), node0.getLineno());
886:       assertTrue(node0.isNumber());
887:       assertEquals((-1), node0.getSourcePosition());
888:       assertFalse(node0.hasChildren());
889:       assertFalse(node0.isIf());
890:       assertFalse(node0.isReturn());
891:       assertFalse(node0.isNE());
892:       assertFalse(node0.isIn());
893:       assertFalse(node0.isString());
894:       assertFalse(node0.isInc());
895:       assertFalse(node0.isDebugger());
896:       assertFalse(node0.isFunction());
897:       assertFalse(node0.isThrow());
898:       assertFalse(node0.isFalse());
899:       assertFalse(node0.isContinue());
900:       assertFalse(node0.isCast());
901:       assertFalse(node2.isCast());
902:       assertFalse(node2.isLabelName());
903:       assertFalse(node2.isExprResult());
904:       assertFalse(node2.isGetElem());
905:       assertFalse(node2.isScript());
906:       assertFalse(node2.isNumber());
907:       assertFalse(node2.isNot());
908:       assertFalse(node2.isOr());
909:       assertFalse(node2.isInstanceOf());
910:       assertFalse(node2.isObjectLit());
911:       assertFalse(node2.hasMoreThanOneChild());
912:       assertFalse(node2.isGetProp());
913:       assertEquals(8, node2.getCharno());
914:       assertFalse(node2.isTypeOf());
915:       assertFalse(node2.isComma());
916:       assertFalse(node2.isDec());
917:       assertFalse(node2.isWhile());
918:       assertFalse(node2.isWith());
919:       assertFalse(node2.isAssign());
920:       assertFalse(node2.isThis());
921:       assertFalse(node2.isReturn());
922:       assertFalse(node2.isBlock());
923:       assertFalse(node2.isVar());
924:       assertFalse(node2.isName());
925:       assertFalse(node2.isAdd());
926:       assertFalse(node2.isNew());
927:       assertFalse(node2.isBreak());
928:       assertFalse(node2.isCall());
929:       assertFalse(node2.isNull());
930:       assertEquals(51, node2.getLineno());
931:       assertFalse(node2.isParamList());
932:       assertFalse(node2.isSwitch());
933:       assertFalse(node2.isStringKey());
934:       assertFalse(node2.isDo());
935:       assertFalse(node2.isDefaultCase());
936:       assertFalse(node2.isLabel());
937:       assertFalse(node2.isAssignAdd());
938:       assertFalse(node2.isArrayLit());
939:       assertEquals(208904, node2.getSourcePosition());
940:       assertFalse(node2.isTry());
941:       assertFalse(node2.isEmpty());
942:       assertEquals(4095, node2.getType());
943:       assertFalse(node2.isNE());
944:       assertFalse(node2.isVoid());
945:       assertFalse(node2.isIf());
946:       assertFalse(node2.isDelProp());
947:       assertFalse(node2.isGetterDef());
948:       assertFalse(node2.isDebugger());
949:       assertFalse(node2.isTrue());
950:       assertFalse(node2.isCatch());
951:       assertTrue(node2.hasChildren());
952:       assertFalse(node2.isCase());
953:       assertFalse(node2.isRegExp());
954:       assertFalse(node2.isFor());
955:       assertEquals(1, node2.getChildCount());
956:       assertFalse(node2.isHook());
957:       assertTrue(node2.hasOneChild());
958:       assertFalse(node2.isFalse());
959:       assertFalse(node2.isInc());
960:       assertFalse(node2.isString());
961:       assertFalse(node2.isAnd());
962:       assertFalse(node2.isContinue());
963:       assertFalse(node2.isIn());
964:       assertFalse(node2.isSetterDef());
965:       assertFalse(node2.isFunction());
966:       assertFalse(node2.isThrow());
967:       assertNotSame(node2, node1);
968:       assertFalse(node0.equals((Object)node2));
969:       assertFalse(node0.equals((Object)node1));
970:       assertFalse(node2.equals((Object)node1));
971:       assertFalse(node2.equals((Object)node0));
972:       assertTrue(boolean2 == boolean0);
973:       assertTrue(boolean2 == boolean1);
974:       assertFalse(boolean2);
975:       
976:       boolean boolean3 = node2.isCatch();
977:       assertEquals(37, Node.OPT_ARG_NAME);
978:       assertEquals(2, Node.POST_FLAG);
979:       assertEquals(46, Node.IS_NAMESPACE);
980:       assertEquals(56, Node.CHANGE_TIME);
981:       assertEquals(51, Node.STATIC_SOURCE_FILE);
982:       assertEquals(12, Node.COLUMN_BITS);
983:       assertEquals(47, Node.IS_DISPATCHER);
984:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
985:       assertEquals(1, Node.DECR_FLAG);
986:       assertEquals(32, Node.INCRDECR_PROP);
987:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
988:       assertEquals(29, Node.JSDOC_INFO_PROP);
989:       assertEquals(53, Node.INPUT_ID);
990:       assertEquals(15, Node.NO_SIDE_EFFECTS);
991:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
992:       assertEquals(52, Node.LENGTH);
993:       assertEquals(36, Node.QUOTED_PROP);
994:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
995:       assertEquals(57, Node.REFLECTED_OBJECT);
996:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
997:       assertEquals(49, Node.DIRECT_EVAL);
998:       assertEquals(4095, Node.COLUMN_MASK);
999:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1000:       assertEquals(48, Node.DIRECTIVES);
1001:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1002:       assertEquals(8, Node.FLAG_NO_THROWS);
1003:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1004:       assertEquals(55, Node.INFERRED_FUNCTION);
1005:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1006:       assertEquals(50, Node.FREE_CALL);
1007:       assertEquals(39, Node.EMPTY_BLOCK);
1008:       assertEquals(54, Node.SLASH_V);
1009:       assertEquals(57, Node.LAST_PROP);
1010:       assertEquals(43, Node.IS_CONSTANT_NAME);
1011:       assertEquals(30, Node.VAR_ARGS_NAME);
1012:       assertEquals(40, Node.ORIGINALNAME_PROP);
1013:       assertEquals(57, Node.REFLECTED_OBJECT);
1014:       assertEquals(52, Node.LENGTH);
1015:       assertEquals(40, Node.ORIGINALNAME_PROP);
1016:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1017:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1018:       assertEquals(54, Node.SLASH_V);
1019:       assertEquals(8, Node.FLAG_NO_THROWS);
1020:       assertEquals(50, Node.FREE_CALL);
1021:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1022:       assertEquals(32, Node.INCRDECR_PROP);
1023:       assertEquals(12, Node.COLUMN_BITS);
1024:       assertEquals(4095, Node.COLUMN_MASK);
1025:       assertEquals(48, Node.DIRECTIVES);
1026:       assertEquals(1, Node.DECR_FLAG);
1027:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1028:       assertEquals(49, Node.DIRECT_EVAL);
1029:       assertEquals(37, Node.OPT_ARG_NAME);
1030:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1031:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1032:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1033:       assertEquals(53, Node.INPUT_ID);
1034:       assertEquals(29, Node.JSDOC_INFO_PROP);
1035:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1036:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1037:       assertEquals(43, Node.IS_CONSTANT_NAME);
1038:       assertEquals(56, Node.CHANGE_TIME);
1039:       assertEquals(36, Node.QUOTED_PROP);
1040:       assertEquals(46, Node.IS_NAMESPACE);
1041:       assertEquals(55, Node.INFERRED_FUNCTION);
1042:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1043:       assertEquals(39, Node.EMPTY_BLOCK);
1044:       assertEquals(57, Node.LAST_PROP);
1045:       assertEquals(47, Node.IS_DISPATCHER);
1046:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1047:       assertEquals(2, Node.POST_FLAG);
1048:       assertEquals(30, Node.VAR_ARGS_NAME);
1049:       assertFalse(node0.isGetProp());
1050:       assertFalse(node0.isComma());
1051:       assertFalse(node0.isAnd());
1052:       assertFalse(node0.isThis());
1053:       assertFalse(node0.isObjectLit());
1054:       assertFalse(node0.isNot());
1055:       assertFalse(node0.isScript());
1056:       assertFalse(node0.isHook());
1057:       assertFalse(node0.isGetElem());
1058:       assertFalse(node0.isWith());
1059:       assertFalse(node0.isAssign());
1060:       assertFalse(node0.isDec());
1061:       assertFalse(node0.isInstanceOf());
1062:       assertFalse(node0.isTypeOf());
1063:       assertFalse(node0.isBreak());
1064:       assertFalse(node0.isExprResult());
1065:       assertFalse(node0.isLabel());
1066:       assertFalse(node0.isAssignAdd());
1067:       assertFalse(node0.isOr());
1068:       assertFalse(node0.isCase());
1069:       assertFalse(node0.isDo());
1070:       assertFalse(node0.isGetterDef());
1071:       assertFalse(node0.hasOneChild());
1072:       assertFalse(node0.isEmpty());
1073:       assertFalse(node0.isAdd());
1074:       assertFalse(node0.isNew());
1075:       assertEquals((-1), node0.getCharno());
1076:       assertFalse(node0.isDefaultCase());
1077:       assertFalse(node0.isSwitch());
1078:       assertFalse(node0.isVar());
1079:       assertFalse(node0.isStringKey());
1080:       assertFalse(node0.isLabelName());
1081:       assertFalse(node0.isArrayLit());
1082:       assertEquals(0, node0.getChildCount());
1083:       assertFalse(node0.isNull());
1084:       assertFalse(node0.isParamList());
1085:       assertFalse(node0.isSetterDef());
1086:       assertFalse(node0.isBlock());
1087:       assertFalse(node0.isTry());
1088:       assertFalse(node0.isVoid());
1089:       assertFalse(node0.isWhile());
1090:       assertFalse(node0.isTrue());
1091:       assertFalse(node0.isName());
1092:       assertFalse(node0.isFor());
1093:       assertEquals(39, node0.getType());
1094:       assertFalse(node0.isDelProp());
1095:       assertFalse(node0.isRegExp());
1096:       assertFalse(node0.hasMoreThanOneChild());
1097:       assertFalse(node0.isCall());
1098:       assertFalse(node0.isCatch());
1099:       assertEquals((-1), node0.getLineno());
1100:       assertTrue(node0.isNumber());
1101:       assertEquals((-1), node0.getSourcePosition());
1102:       assertFalse(node0.hasChildren());
1103:       assertFalse(node0.isIf());
1104:       assertFalse(node0.isReturn());
1105:       assertFalse(node0.isNE());
1106:       assertFalse(node0.isIn());
1107:       assertFalse(node0.isString());
1108:       assertFalse(node0.isInc());
1109:       assertFalse(node0.isDebugger());
1110:       assertFalse(node0.isFunction());
1111:       assertFalse(node0.isThrow());
1112:       assertFalse(node0.isFalse());
1113:       assertFalse(node0.isContinue());
1114:       assertFalse(node0.isCast());
1115:       assertFalse(node2.isCast());
1116:       assertFalse(node2.isLabelName());
1117:       assertFalse(node2.isExprResult());
1118:       assertFalse(node2.isGetElem());
1119:       assertFalse(node2.isScript());
1120:       assertFalse(node2.isNumber());
1121:       assertFalse(node2.isNot());
1122:       assertFalse(node2.isOr());
1123:       assertFalse(node2.isInstanceOf());
1124:       assertFalse(node2.isObjectLit());
1125:       assertFalse(node2.hasMoreThanOneChild());
1126:       assertFalse(node2.isGetProp());
1127:       assertEquals(8, node2.getCharno());
1128:       assertFalse(node2.isTypeOf());
1129:       assertFalse(node2.isComma());
1130:       assertFalse(node2.isDec());
1131:       assertFalse(node2.isWhile());
1132:       assertFalse(node2.isWith());
1133:       assertFalse(node2.isAssign());
1134:       assertFalse(node2.isThis());
1135:       assertFalse(node2.isReturn());
1136:       assertFalse(node2.isBlock());
1137:       assertFalse(node2.isVar());
1138:       assertFalse(node2.isName());
1139:       assertFalse(node2.isAdd());
1140:       assertFalse(node2.isNew());
1141:       assertFalse(node2.isBreak());
1142:       assertFalse(node2.isCall());
1143:       assertFalse(node2.isNull());
1144:       assertEquals(51, node2.getLineno());
1145:       assertFalse(node2.isParamList());
1146:       assertFalse(node2.isSwitch());
1147:       assertFalse(node2.isStringKey());
1148:       assertFalse(node2.isDo());
1149:       assertFalse(node2.isDefaultCase());
1150:       assertFalse(node2.isLabel());
1151:       assertFalse(node2.isAssignAdd());
1152:       assertFalse(node2.isArrayLit());
1153:       assertEquals(208904, node2.getSourcePosition());
1154:       assertFalse(node2.isTry());
1155:       assertFalse(node2.isEmpty());
1156:       assertEquals(4095, node2.getType());
1157:       assertFalse(node2.isNE());
1158:       assertFalse(node2.isVoid());
1159:       assertFalse(node2.isIf());
1160:       assertFalse(node2.isDelProp());
1161:       assertFalse(node2.isGetterDef());
1162:       assertFalse(node2.isDebugger());
1163:       assertFalse(node2.isTrue());
1164:       assertFalse(node2.isCatch());
1165:       assertTrue(node2.hasChildren());
1166:       assertFalse(node2.isCase());
1167:       assertFalse(node2.isRegExp());
1168:       assertFalse(node2.isFor());
1169:       assertEquals(1, node2.getChildCount());
1170:       assertFalse(node2.isHook());
1171:       assertTrue(node2.hasOneChild());
1172:       assertFalse(node2.isFalse());
1173:       assertFalse(node2.isInc());
1174:       assertFalse(node2.isString());
1175:       assertFalse(node2.isAnd());
1176:       assertFalse(node2.isContinue());
1177:       assertFalse(node2.isIn());
1178:       assertFalse(node2.isSetterDef());
1179:       assertFalse(node2.isFunction());
1180:       assertFalse(node2.isThrow());
1181:       assertNotSame(node2, node1);
1182:       assertFalse(node0.equals((Object)node2));
1183:       assertFalse(node0.equals((Object)node1));
1184:       assertFalse(node2.equals((Object)node1));
1185:       assertFalse(node2.equals((Object)node0));
1186:       assertTrue(boolean3 == boolean2);
1187:       assertTrue(boolean3 == boolean1);
1188:       assertTrue(boolean3 == boolean0);
1189:       assertFalse(boolean3);
1190:       
1191:       Node node3 = null;
1192:       try {
1193:         node3 = new Node(54, node2, node0, 57, 12);
1194:         fail("Expecting exception: IllegalArgumentException");
1195:       
1196:       } catch(IllegalArgumentException e) {
1197:          //
1198:          // second new child has existing parent
1199:          //
1200:          verifyException("com.google.common.base.Preconditions", e);
1201:       }
1202:   }
1203: }
RegularFileObject[/tmp/EvoSuite_108_1628157521297/com/google/javascript/rhino/Node_108_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_108_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_108_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_108_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:41.469 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertNotNull(iterable0);

boolean boolean0 = node0.isDec();
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(boolean0);

Node node1 = new Node(57, 8, 2);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertEquals(2, node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertEquals(32770, node1.getSourcePosition());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(57, node1.getType());
assertEquals(8, node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = new Node(4095, node0, 51, 8);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isNot());
assertFalse(node2.isOr());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetProp());
assertEquals(8, node2.getCharno());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertEquals(51, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isArrayLit());
assertEquals(208904, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertEquals(4095, node2.getType());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));

boolean boolean1 = node1.isFromExterns();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertEquals(2, node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertEquals(32770, node1.getSourcePosition());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(57, node1.getType());
assertEquals(8, node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

boolean boolean2 = node2.isBreak();
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isNot());
assertFalse(node2.isOr());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetProp());
assertEquals(8, node2.getCharno());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertEquals(51, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isArrayLit());
assertEquals(208904, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertEquals(4095, node2.getType());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);

boolean boolean3 = node2.isCatch();
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isIf());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isNot());
assertFalse(node2.isOr());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetProp());
assertEquals(8, node2.getCharno());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertEquals(51, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isArrayLit());
assertEquals(208904, node2.getSourcePosition());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertEquals(4095, node2.getType());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3);

Node node3 = new Node(54, node2, node0, 57, 12);

[MASTER] 09:58:41.762 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_112_1628157521730/com/google/javascript/rhino/Node_112_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_112_1628157521730/com/google/javascript/rhino/Node_112_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:41.762 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:41.762 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:41.763 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 163
[MASTER] 09:58:41.763 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_112_1628157521730/com/google/javascript/rhino/Node_112_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_112_tmp__ESTest extends Node_112_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
23:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
24:       assertEquals(2, Node.POST_FLAG);
25:       assertEquals(37, Node.OPT_ARG_NAME);
26:       assertEquals(47, Node.IS_DISPATCHER);
27:       assertEquals(12, Node.COLUMN_BITS);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(1, Node.DECR_FLAG);
31:       assertEquals(32, Node.INCRDECR_PROP);
32:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
33:       assertEquals(43, Node.IS_CONSTANT_NAME);
34:       assertEquals(54, Node.SLASH_V);
35:       assertEquals(50, Node.FREE_CALL);
36:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
37:       assertEquals(40, Node.ORIGINALNAME_PROP);
38:       assertEquals(57, Node.REFLECTED_OBJECT);
39:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
40:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
41:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
42:       assertEquals(30, Node.VAR_ARGS_NAME);
43:       assertEquals(4095, Node.COLUMN_MASK);
44:       assertEquals(55, Node.INFERRED_FUNCTION);
45:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
46:       assertEquals(49, Node.DIRECT_EVAL);
47:       assertEquals(48, Node.DIRECTIVES);
48:       assertEquals(57, Node.LAST_PROP);
49:       assertEquals(36, Node.QUOTED_PROP);
50:       assertEquals(56, Node.CHANGE_TIME);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(39, Node.EMPTY_BLOCK);
53:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
54:       assertEquals(29, Node.JSDOC_INFO_PROP);
55:       assertEquals(53, Node.INPUT_ID);
56:       assertEquals(52, Node.LENGTH);
57:       assertEquals(8, Node.FLAG_NO_THROWS);
58:       assertFalse(node0.isFalse());
59:       assertFalse(node0.isHook());
60:       assertFalse(node0.isThrow());
61:       assertFalse(node0.isBreak());
62:       assertFalse(node0.isComma());
63:       assertFalse(node0.isThis());
64:       assertFalse(node0.isAnd());
65:       assertFalse(node0.isObjectLit());
66:       assertTrue(node0.isNumber());
67:       assertFalse(node0.isCase());
68:       assertFalse(node0.isGetProp());
69:       assertEquals((-1), node0.getCharno());
70:       assertFalse(node0.isSwitch());
71:       assertFalse(node0.isScript());
72:       assertFalse(node0.isString());
73:       assertFalse(node0.isGetterDef());
74:       assertFalse(node0.isNot());
75:       assertFalse(node0.isFor());
76:       assertFalse(node0.isCast());
77:       assertFalse(node0.isIf());
78:       assertFalse(node0.hasOneChild());
79:       assertFalse(node0.isTry());
80:       assertFalse(node0.isFunction());
81:       assertFalse(node0.isWith());
82:       assertFalse(node0.isRegExp());
83:       assertFalse(node0.hasMoreThanOneChild());
84:       assertFalse(node0.isInstanceOf());
85:       assertFalse(node0.isCatch());
86:       assertEquals((-1), node0.getLineno());
87:       assertFalse(node0.isInc());
88:       assertFalse(node0.isSetterDef());
89:       assertFalse(node0.isNE());
90:       assertFalse(node0.isIn());
91:       assertFalse(node0.isCall());
92:       assertFalse(node0.isVar());
93:       assertFalse(node0.isStringKey());
94:       assertFalse(node0.isName());
95:       assertFalse(node0.isNew());
96:       assertFalse(node0.isBlock());
97:       assertEquals(39, node0.getType());
98:       assertEquals(0, node0.getChildCount());
99:       assertFalse(node0.isContinue());
100:       assertFalse(node0.isWhile());
101:       assertFalse(node0.isDebugger());
102:       assertFalse(node0.isParamList());
103:       assertEquals((-1), node0.getSourcePosition());
104:       assertFalse(node0.isGetElem());
105:       assertFalse(node0.isEmpty());
106:       assertFalse(node0.isDelProp());
107:       assertFalse(node0.isArrayLit());
108:       assertFalse(node0.isVoid());
109:       assertFalse(node0.isLabelName());
110:       assertFalse(node0.isExprResult());
111:       assertFalse(node0.isReturn());
112:       assertFalse(node0.hasChildren());
113:       assertFalse(node0.isLabel());
114:       assertFalse(node0.isTypeOf());
115:       assertFalse(node0.isAssign());
116:       assertFalse(node0.isDec());
117:       assertFalse(node0.isDefaultCase());
118:       assertFalse(node0.isAssignAdd());
119:       assertFalse(node0.isDo());
120:       assertFalse(node0.isTrue());
121:       assertFalse(node0.isNull());
122:       assertFalse(node0.isAdd());
123:       assertFalse(node0.isOr());
124:       assertNotNull(node0);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(2, Node.POST_FLAG);
130:       assertEquals(37, Node.OPT_ARG_NAME);
131:       assertEquals(47, Node.IS_DISPATCHER);
132:       assertEquals(12, Node.COLUMN_BITS);
133:       assertEquals(51, Node.STATIC_SOURCE_FILE);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(1, Node.DECR_FLAG);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
138:       assertEquals(43, Node.IS_CONSTANT_NAME);
139:       assertEquals(54, Node.SLASH_V);
140:       assertEquals(50, Node.FREE_CALL);
141:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
142:       assertEquals(40, Node.ORIGINALNAME_PROP);
143:       assertEquals(57, Node.REFLECTED_OBJECT);
144:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
146:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
147:       assertEquals(30, Node.VAR_ARGS_NAME);
148:       assertEquals(4095, Node.COLUMN_MASK);
149:       assertEquals(55, Node.INFERRED_FUNCTION);
150:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
151:       assertEquals(49, Node.DIRECT_EVAL);
152:       assertEquals(48, Node.DIRECTIVES);
153:       assertEquals(57, Node.LAST_PROP);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(56, Node.CHANGE_TIME);
156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
157:       assertEquals(39, Node.EMPTY_BLOCK);
158:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
159:       assertEquals(29, Node.JSDOC_INFO_PROP);
160:       assertEquals(53, Node.INPUT_ID);
161:       assertEquals(52, Node.LENGTH);
162:       assertEquals(8, Node.FLAG_NO_THROWS);
163:       assertFalse(iterable0.contains(node0));
164:       assertFalse(node0.isFalse());
165:       assertFalse(node0.isHook());
166:       assertFalse(node0.isThrow());
167:       assertFalse(node0.isBreak());
168:       assertFalse(node0.isComma());
169:       assertFalse(node0.isThis());
170:       assertFalse(node0.isAnd());
171:       assertFalse(node0.isObjectLit());
172:       assertTrue(node0.isNumber());
173:       assertFalse(node0.isCase());
174:       assertFalse(node0.isGetProp());
175:       assertEquals((-1), node0.getCharno());
176:       assertFalse(node0.isSwitch());
177:       assertFalse(node0.isScript());
178:       assertFalse(node0.isString());
179:       assertFalse(node0.isGetterDef());
180:       assertFalse(node0.isNot());
181:       assertFalse(node0.isFor());
182:       assertFalse(node0.isCast());
183:       assertFalse(node0.isIf());
184:       assertFalse(node0.hasOneChild());
185:       assertFalse(node0.isTry());
186:       assertFalse(node0.isFunction());
187:       assertFalse(node0.isWith());
188:       assertFalse(node0.isRegExp());
189:       assertFalse(node0.hasMoreThanOneChild());
190:       assertFalse(node0.isInstanceOf());
191:       assertFalse(node0.isCatch());
192:       assertEquals((-1), node0.getLineno());
193:       assertFalse(node0.isInc());
194:       assertFalse(node0.isSetterDef());
195:       assertFalse(node0.isNE());
196:       assertFalse(node0.isIn());
197:       assertFalse(node0.isCall());
198:       assertFalse(node0.isVar());
199:       assertFalse(node0.isStringKey());
200:       assertFalse(node0.isName());
201:       assertFalse(node0.isNew());
202:       assertFalse(node0.isBlock());
203:       assertEquals(39, node0.getType());
204:       assertEquals(0, node0.getChildCount());
205:       assertFalse(node0.isContinue());
206:       assertFalse(node0.isWhile());
207:       assertFalse(node0.isDebugger());
208:       assertFalse(node0.isParamList());
209:       assertEquals((-1), node0.getSourcePosition());
210:       assertFalse(node0.isGetElem());
211:       assertFalse(node0.isEmpty());
212:       assertFalse(node0.isDelProp());
213:       assertFalse(node0.isArrayLit());
214:       assertFalse(node0.isVoid());
215:       assertFalse(node0.isLabelName());
216:       assertFalse(node0.isExprResult());
217:       assertFalse(node0.isReturn());
218:       assertFalse(node0.hasChildren());
219:       assertFalse(node0.isLabel());
220:       assertFalse(node0.isTypeOf());
221:       assertFalse(node0.isAssign());
222:       assertFalse(node0.isDec());
223:       assertFalse(node0.isDefaultCase());
224:       assertFalse(node0.isAssignAdd());
225:       assertFalse(node0.isDo());
226:       assertFalse(node0.isTrue());
227:       assertFalse(node0.isNull());
228:       assertFalse(node0.isAdd());
229:       assertFalse(node0.isOr());
230:       assertNotNull(iterable0);
231:       
232:       boolean boolean0 = node0.isDec();
233:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
235:       assertEquals(2, Node.POST_FLAG);
236:       assertEquals(37, Node.OPT_ARG_NAME);
237:       assertEquals(47, Node.IS_DISPATCHER);
238:       assertEquals(12, Node.COLUMN_BITS);
239:       assertEquals(51, Node.STATIC_SOURCE_FILE);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       assertEquals(1, Node.DECR_FLAG);
242:       assertEquals(32, Node.INCRDECR_PROP);
243:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
244:       assertEquals(43, Node.IS_CONSTANT_NAME);
245:       assertEquals(54, Node.SLASH_V);
246:       assertEquals(50, Node.FREE_CALL);
247:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
248:       assertEquals(40, Node.ORIGINALNAME_PROP);
249:       assertEquals(57, Node.REFLECTED_OBJECT);
250:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
251:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
252:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
253:       assertEquals(30, Node.VAR_ARGS_NAME);
254:       assertEquals(4095, Node.COLUMN_MASK);
255:       assertEquals(55, Node.INFERRED_FUNCTION);
256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
257:       assertEquals(49, Node.DIRECT_EVAL);
258:       assertEquals(48, Node.DIRECTIVES);
259:       assertEquals(57, Node.LAST_PROP);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(56, Node.CHANGE_TIME);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(39, Node.EMPTY_BLOCK);
264:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
265:       assertEquals(29, Node.JSDOC_INFO_PROP);
266:       assertEquals(53, Node.INPUT_ID);
267:       assertEquals(52, Node.LENGTH);
268:       assertEquals(8, Node.FLAG_NO_THROWS);
269:       assertFalse(node0.isFalse());
270:       assertFalse(node0.isHook());
271:       assertFalse(node0.isThrow());
272:       assertFalse(node0.isBreak());
273:       assertFalse(node0.isComma());
274:       assertFalse(node0.isThis());
275:       assertFalse(node0.isAnd());
276:       assertFalse(node0.isObjectLit());
277:       assertTrue(node0.isNumber());
278:       assertFalse(node0.isCase());
279:       assertFalse(node0.isGetProp());
280:       assertEquals((-1), node0.getCharno());
281:       assertFalse(node0.isSwitch());
282:       assertFalse(node0.isScript());
283:       assertFalse(node0.isString());
284:       assertFalse(node0.isGetterDef());
285:       assertFalse(node0.isNot());
286:       assertFalse(node0.isFor());
287:       assertFalse(node0.isCast());
288:       assertFalse(node0.isIf());
289:       assertFalse(node0.hasOneChild());
290:       assertFalse(node0.isTry());
291:       assertFalse(node0.isFunction());
292:       assertFalse(node0.isWith());
293:       assertFalse(node0.isRegExp());
294:       assertFalse(node0.hasMoreThanOneChild());
295:       assertFalse(node0.isInstanceOf());
296:       assertFalse(node0.isCatch());
297:       assertEquals((-1), node0.getLineno());
298:       assertFalse(node0.isInc());
299:       assertFalse(node0.isSetterDef());
300:       assertFalse(node0.isNE());
301:       assertFalse(node0.isIn());
302:       assertFalse(node0.isCall());
303:       assertFalse(node0.isVar());
304:       assertFalse(node0.isStringKey());
305:       assertFalse(node0.isName());
306:       assertFalse(node0.isNew());
307:       assertFalse(node0.isBlock());
308:       assertEquals(39, node0.getType());
309:       assertEquals(0, node0.getChildCount());
310:       assertFalse(node0.isContinue());
311:       assertFalse(node0.isWhile());
312:       assertFalse(node0.isDebugger());
313:       assertFalse(node0.isParamList());
314:       assertEquals((-1), node0.getSourcePosition());
315:       assertFalse(node0.isGetElem());
316:       assertFalse(node0.isEmpty());
317:       assertFalse(node0.isDelProp());
318:       assertFalse(node0.isArrayLit());
319:       assertFalse(node0.isVoid());
320:       assertFalse(node0.isLabelName());
321:       assertFalse(node0.isExprResult());
322:       assertFalse(node0.isReturn());
323:       assertFalse(node0.hasChildren());
324:       assertFalse(node0.isLabel());
325:       assertFalse(node0.isTypeOf());
326:       assertFalse(node0.isAssign());
327:       assertFalse(node0.isDec());
328:       assertFalse(node0.isDefaultCase());
329:       assertFalse(node0.isAssignAdd());
330:       assertFalse(node0.isDo());
331:       assertFalse(node0.isTrue());
332:       assertFalse(node0.isNull());
333:       assertFalse(node0.isAdd());
334:       assertFalse(node0.isOr());
335:       assertFalse(boolean0);
336:       
337:       Node node1 = new Node(15, 0, 48);
338:       assertEquals(53, Node.INPUT_ID);
339:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
340:       assertEquals(43, Node.IS_CONSTANT_NAME);
341:       assertEquals(47, Node.IS_DISPATCHER);
342:       assertEquals(2, Node.POST_FLAG);
343:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
344:       assertEquals(4095, Node.COLUMN_MASK);
345:       assertEquals(37, Node.OPT_ARG_NAME);
346:       assertEquals(48, Node.DIRECTIVES);
347:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
348:       assertEquals(56, Node.CHANGE_TIME);
349:       assertEquals(29, Node.JSDOC_INFO_PROP);
350:       assertEquals(36, Node.QUOTED_PROP);
351:       assertEquals(15, Node.NO_SIDE_EFFECTS);
352:       assertEquals(39, Node.EMPTY_BLOCK);
353:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
354:       assertEquals(55, Node.INFERRED_FUNCTION);
355:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
356:       assertEquals(52, Node.LENGTH);
357:       assertEquals(8, Node.FLAG_NO_THROWS);
358:       assertEquals(57, Node.REFLECTED_OBJECT);
359:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
360:       assertEquals(54, Node.SLASH_V);
361:       assertEquals(57, Node.LAST_PROP);
362:       assertEquals(30, Node.VAR_ARGS_NAME);
363:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
364:       assertEquals(49, Node.DIRECT_EVAL);
365:       assertEquals(40, Node.ORIGINALNAME_PROP);
366:       assertEquals(32, Node.INCRDECR_PROP);
367:       assertEquals(46, Node.IS_NAMESPACE);
368:       assertEquals(51, Node.STATIC_SOURCE_FILE);
369:       assertEquals(12, Node.COLUMN_BITS);
370:       assertEquals(1, Node.DECR_FLAG);
371:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
372:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
373:       assertEquals(50, Node.FREE_CALL);
374:       assertFalse(node1.isCall());
375:       assertFalse(node1.isAdd());
376:       assertFalse(node1.isVar());
377:       assertFalse(node1.isName());
378:       assertFalse(node1.isNew());
379:       assertFalse(node1.isStringKey());
380:       assertFalse(node1.isWhile());
381:       assertFalse(node1.isBlock());
382:       assertFalse(node1.isContinue());
383:       assertFalse(node1.hasMoreThanOneChild());
384:       assertEquals(0, node1.getChildCount());
385:       assertFalse(node1.isCatch());
386:       assertEquals(15, node1.getType());
387:       assertFalse(node1.isAssignAdd());
388:       assertFalse(node1.isDo());
389:       assertFalse(node1.isNull());
390:       assertFalse(node1.isSetterDef());
391:       assertFalse(node1.isTrue());
392:       assertFalse(node1.isOr());
393:       assertFalse(node1.isCast());
394:       assertFalse(node1.isGetElem());
395:       assertFalse(node1.isVoid());
396:       assertFalse(node1.isDelProp());
397:       assertFalse(node1.isDec());
398:       assertFalse(node1.isTypeOf());
399:       assertEquals(48, node1.getSourcePosition());
400:       assertFalse(node1.hasChildren());
401:       assertFalse(node1.isExprResult());
402:       assertFalse(node1.isFunction());
403:       assertFalse(node1.isAssign());
404:       assertFalse(node1.isReturn());
405:       assertEquals(0, node1.getLineno());
406:       assertFalse(node1.isAnd());
407:       assertFalse(node1.isGetProp());
408:       assertFalse(node1.isString());
409:       assertFalse(node1.isDebugger());
410:       assertFalse(node1.isNot());
411:       assertFalse(node1.isObjectLit());
412:       assertFalse(node1.isHook());
413:       assertFalse(node1.isThrow());
414:       assertFalse(node1.isBreak());
415:       assertFalse(node1.isThis());
416:       assertFalse(node1.isFalse());
417:       assertFalse(node1.isComma());
418:       assertFalse(node1.isInstanceOf());
419:       assertFalse(node1.isIn());
420:       assertFalse(node1.isIf());
421:       assertFalse(node1.isInc());
422:       assertFalse(node1.isNE());
423:       assertFalse(node1.isEmpty());
424:       assertFalse(node1.hasOneChild());
425:       assertFalse(node1.isArrayLit());
426:       assertFalse(node1.isTry());
427:       assertFalse(node1.isLabelName());
428:       assertFalse(node1.isDefaultCase());
429:       assertEquals(48, node1.getCharno());
430:       assertFalse(node1.isFor());
431:       assertFalse(node1.isLabel());
432:       assertFalse(node1.isWith());
433:       assertFalse(node1.isRegExp());
434:       assertFalse(node1.isCase());
435:       assertFalse(node1.isNumber());
436:       assertFalse(node1.isSwitch());
437:       assertFalse(node1.isParamList());
438:       assertFalse(node1.isScript());
439:       assertFalse(node1.isGetterDef());
440:       assertNotNull(node1);
441:       assertFalse(node1.equals((Object)node0));
442:       
443:       // Undeclared exception!
444:       try { 
445:         node1.clonePropsFrom((Node) null);
446:         fail("Expecting exception: NullPointerException");
447:       
448:       } catch(NullPointerException e) {
449:          //
450:          // no message in exception (getMessage() returned null)
451:          //
452:          verifyException("com.google.javascript.rhino.Node", e);
453:       }
454:   }
455: }
RegularFileObject[/tmp/EvoSuite_112_1628157521730/com/google/javascript/rhino/Node_112_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_112_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_112_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_112_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:41.768 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertNotNull(iterable0);

boolean boolean0 = node0.isDec();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(boolean0);

Node node1 = new Node(15, 0, 48);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isStringKey());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(15, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertEquals(48, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isLabel());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

node1.clonePropsFrom((Node) null);

[MASTER] 09:58:42.473 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_114_1628157521951/com/google/javascript/rhino/Node_114_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_114_1628157521951/com/google/javascript/rhino/Node_114_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:42.473 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:42.473 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:42.474 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 164
[MASTER] 09:58:42.475 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_114_1628157521951/com/google/javascript/rhino/Node_114_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.LinkedHashSet;
13: import java.util.Set;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_114_tmp__ESTest extends Node_114_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newNumber(1.0);
24:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
25:       assertEquals(29, Node.JSDOC_INFO_PROP);
26:       assertEquals(56, Node.CHANGE_TIME);
27:       assertEquals(37, Node.OPT_ARG_NAME);
28:       assertEquals(47, Node.IS_DISPATCHER);
29:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
30:       assertEquals(2, Node.POST_FLAG);
31:       assertEquals(1, Node.DECR_FLAG);
32:       assertEquals(12, Node.COLUMN_BITS);
33:       assertEquals(32, Node.INCRDECR_PROP);
34:       assertEquals(46, Node.IS_NAMESPACE);
35:       assertEquals(43, Node.IS_CONSTANT_NAME);
36:       assertEquals(54, Node.SLASH_V);
37:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
38:       assertEquals(51, Node.STATIC_SOURCE_FILE);
39:       assertEquals(50, Node.FREE_CALL);
40:       assertEquals(40, Node.ORIGINALNAME_PROP);
41:       assertEquals(57, Node.REFLECTED_OBJECT);
42:       assertEquals(48, Node.DIRECTIVES);
43:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
44:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
45:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
46:       assertEquals(30, Node.VAR_ARGS_NAME);
47:       assertEquals(4095, Node.COLUMN_MASK);
48:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
49:       assertEquals(55, Node.INFERRED_FUNCTION);
50:       assertEquals(57, Node.LAST_PROP);
51:       assertEquals(49, Node.DIRECT_EVAL);
52:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
53:       assertEquals(15, Node.NO_SIDE_EFFECTS);
54:       assertEquals(39, Node.EMPTY_BLOCK);
55:       assertEquals(53, Node.INPUT_ID);
56:       assertEquals(36, Node.QUOTED_PROP);
57:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
58:       assertEquals(52, Node.LENGTH);
59:       assertEquals(8, Node.FLAG_NO_THROWS);
60:       assertFalse(node0.isName());
61:       assertFalse(node0.isCall());
62:       assertFalse(node0.isStringKey());
63:       assertFalse(node0.isSetterDef());
64:       assertFalse(node0.isBlock());
65:       assertFalse(node0.isVar());
66:       assertEquals(0, node0.getChildCount());
67:       assertEquals(39, node0.getType());
68:       assertFalse(node0.isWhile());
69:       assertFalse(node0.isContinue());
70:       assertFalse(node0.isParamList());
71:       assertEquals((-1), node0.getSourcePosition());
72:       assertFalse(node0.isDebugger());
73:       assertFalse(node0.isEmpty());
74:       assertFalse(node0.isGetElem());
75:       assertFalse(node0.isArrayLit());
76:       assertFalse(node0.isDelProp());
77:       assertFalse(node0.isLabelName());
78:       assertFalse(node0.isLabel());
79:       assertFalse(node0.isReturn());
80:       assertFalse(node0.isAssignAdd());
81:       assertFalse(node0.isExprResult());
82:       assertFalse(node0.isTypeOf());
83:       assertFalse(node0.hasChildren());
84:       assertFalse(node0.isAssign());
85:       assertFalse(node0.isDec());
86:       assertFalse(node0.isDefaultCase());
87:       assertFalse(node0.isVoid());
88:       assertFalse(node0.isDo());
89:       assertFalse(node0.isAdd());
90:       assertFalse(node0.isNew());
91:       assertFalse(node0.isTrue());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isOr());
94:       assertFalse(node0.isFalse());
95:       assertFalse(node0.isThrow());
96:       assertFalse(node0.isBreak());
97:       assertFalse(node0.isInstanceOf());
98:       assertFalse(node0.isThis());
99:       assertFalse(node0.isHook());
100:       assertFalse(node0.isComma());
101:       assertFalse(node0.isCase());
102:       assertFalse(node0.isAnd());
103:       assertFalse(node0.isString());
104:       assertFalse(node0.isScript());
105:       assertFalse(node0.isSwitch());
106:       assertTrue(node0.isNumber());
107:       assertFalse(node0.isGetProp());
108:       assertFalse(node0.isObjectLit());
109:       assertEquals((-1), node0.getCharno());
110:       assertFalse(node0.isGetterDef());
111:       assertFalse(node0.isNot());
112:       assertFalse(node0.isFor());
113:       assertFalse(node0.isCast());
114:       assertFalse(node0.isIf());
115:       assertFalse(node0.hasOneChild());
116:       assertFalse(node0.isTry());
117:       assertFalse(node0.isRegExp());
118:       assertFalse(node0.hasMoreThanOneChild());
119:       assertFalse(node0.isFunction());
120:       assertFalse(node0.isWith());
121:       assertFalse(node0.isCatch());
122:       assertFalse(node0.isInc());
123:       assertEquals((-1), node0.getLineno());
124:       assertFalse(node0.isNE());
125:       assertFalse(node0.isIn());
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
129:       assertEquals(29, Node.JSDOC_INFO_PROP);
130:       assertEquals(56, Node.CHANGE_TIME);
131:       assertEquals(37, Node.OPT_ARG_NAME);
132:       assertEquals(47, Node.IS_DISPATCHER);
133:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
134:       assertEquals(2, Node.POST_FLAG);
135:       assertEquals(1, Node.DECR_FLAG);
136:       assertEquals(12, Node.COLUMN_BITS);
137:       assertEquals(32, Node.INCRDECR_PROP);
138:       assertEquals(46, Node.IS_NAMESPACE);
139:       assertEquals(43, Node.IS_CONSTANT_NAME);
140:       assertEquals(54, Node.SLASH_V);
141:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
142:       assertEquals(51, Node.STATIC_SOURCE_FILE);
143:       assertEquals(50, Node.FREE_CALL);
144:       assertEquals(40, Node.ORIGINALNAME_PROP);
145:       assertEquals(57, Node.REFLECTED_OBJECT);
146:       assertEquals(48, Node.DIRECTIVES);
147:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
148:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
150:       assertEquals(30, Node.VAR_ARGS_NAME);
151:       assertEquals(4095, Node.COLUMN_MASK);
152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(57, Node.LAST_PROP);
155:       assertEquals(49, Node.DIRECT_EVAL);
156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
158:       assertEquals(39, Node.EMPTY_BLOCK);
159:       assertEquals(53, Node.INPUT_ID);
160:       assertEquals(36, Node.QUOTED_PROP);
161:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
162:       assertEquals(52, Node.LENGTH);
163:       assertEquals(8, Node.FLAG_NO_THROWS);
164:       assertFalse(iterable0.contains(node0));
165:       assertFalse(node0.isName());
166:       assertFalse(node0.isCall());
167:       assertFalse(node0.isStringKey());
168:       assertFalse(node0.isSetterDef());
169:       assertFalse(node0.isBlock());
170:       assertFalse(node0.isVar());
171:       assertEquals(0, node0.getChildCount());
172:       assertEquals(39, node0.getType());
173:       assertFalse(node0.isWhile());
174:       assertFalse(node0.isContinue());
175:       assertFalse(node0.isParamList());
176:       assertEquals((-1), node0.getSourcePosition());
177:       assertFalse(node0.isDebugger());
178:       assertFalse(node0.isEmpty());
179:       assertFalse(node0.isGetElem());
180:       assertFalse(node0.isArrayLit());
181:       assertFalse(node0.isDelProp());
182:       assertFalse(node0.isLabelName());
183:       assertFalse(node0.isLabel());
184:       assertFalse(node0.isReturn());
185:       assertFalse(node0.isAssignAdd());
186:       assertFalse(node0.isExprResult());
187:       assertFalse(node0.isTypeOf());
188:       assertFalse(node0.hasChildren());
189:       assertFalse(node0.isAssign());
190:       assertFalse(node0.isDec());
191:       assertFalse(node0.isDefaultCase());
192:       assertFalse(node0.isVoid());
193:       assertFalse(node0.isDo());
194:       assertFalse(node0.isAdd());
195:       assertFalse(node0.isNew());
196:       assertFalse(node0.isTrue());
197:       assertFalse(node0.isNull());
198:       assertFalse(node0.isOr());
199:       assertFalse(node0.isFalse());
200:       assertFalse(node0.isThrow());
201:       assertFalse(node0.isBreak());
202:       assertFalse(node0.isInstanceOf());
203:       assertFalse(node0.isThis());
204:       assertFalse(node0.isHook());
205:       assertFalse(node0.isComma());
206:       assertFalse(node0.isCase());
207:       assertFalse(node0.isAnd());
208:       assertFalse(node0.isString());
209:       assertFalse(node0.isScript());
210:       assertFalse(node0.isSwitch());
211:       assertTrue(node0.isNumber());
212:       assertFalse(node0.isGetProp());
213:       assertFalse(node0.isObjectLit());
214:       assertEquals((-1), node0.getCharno());
215:       assertFalse(node0.isGetterDef());
216:       assertFalse(node0.isNot());
217:       assertFalse(node0.isFor());
218:       assertFalse(node0.isCast());
219:       assertFalse(node0.isIf());
220:       assertFalse(node0.hasOneChild());
221:       assertFalse(node0.isTry());
222:       assertFalse(node0.isRegExp());
223:       assertFalse(node0.hasMoreThanOneChild());
224:       assertFalse(node0.isFunction());
225:       assertFalse(node0.isWith());
226:       assertFalse(node0.isCatch());
227:       assertFalse(node0.isInc());
228:       assertEquals((-1), node0.getLineno());
229:       assertFalse(node0.isNE());
230:       assertFalse(node0.isIn());
231:       
232:       node0.isDec();
233:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
234:       assertEquals(29, Node.JSDOC_INFO_PROP);
235:       assertEquals(56, Node.CHANGE_TIME);
236:       assertEquals(37, Node.OPT_ARG_NAME);
237:       assertEquals(47, Node.IS_DISPATCHER);
238:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
239:       assertEquals(2, Node.POST_FLAG);
240:       assertEquals(1, Node.DECR_FLAG);
241:       assertEquals(12, Node.COLUMN_BITS);
242:       assertEquals(32, Node.INCRDECR_PROP);
243:       assertEquals(46, Node.IS_NAMESPACE);
244:       assertEquals(43, Node.IS_CONSTANT_NAME);
245:       assertEquals(54, Node.SLASH_V);
246:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
247:       assertEquals(51, Node.STATIC_SOURCE_FILE);
248:       assertEquals(50, Node.FREE_CALL);
249:       assertEquals(40, Node.ORIGINALNAME_PROP);
250:       assertEquals(57, Node.REFLECTED_OBJECT);
251:       assertEquals(48, Node.DIRECTIVES);
252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
253:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
254:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
255:       assertEquals(30, Node.VAR_ARGS_NAME);
256:       assertEquals(4095, Node.COLUMN_MASK);
257:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
258:       assertEquals(55, Node.INFERRED_FUNCTION);
259:       assertEquals(57, Node.LAST_PROP);
260:       assertEquals(49, Node.DIRECT_EVAL);
261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(39, Node.EMPTY_BLOCK);
264:       assertEquals(53, Node.INPUT_ID);
265:       assertEquals(36, Node.QUOTED_PROP);
266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
267:       assertEquals(52, Node.LENGTH);
268:       assertEquals(8, Node.FLAG_NO_THROWS);
269:       assertFalse(node0.isName());
270:       assertFalse(node0.isCall());
271:       assertFalse(node0.isStringKey());
272:       assertFalse(node0.isSetterDef());
273:       assertFalse(node0.isBlock());
274:       assertFalse(node0.isVar());
275:       assertEquals(0, node0.getChildCount());
276:       assertEquals(39, node0.getType());
277:       assertFalse(node0.isWhile());
278:       assertFalse(node0.isContinue());
279:       assertFalse(node0.isParamList());
280:       assertEquals((-1), node0.getSourcePosition());
281:       assertFalse(node0.isDebugger());
282:       assertFalse(node0.isEmpty());
283:       assertFalse(node0.isGetElem());
284:       assertFalse(node0.isArrayLit());
285:       assertFalse(node0.isDelProp());
286:       assertFalse(node0.isLabelName());
287:       assertFalse(node0.isLabel());
288:       assertFalse(node0.isReturn());
289:       assertFalse(node0.isAssignAdd());
290:       assertFalse(node0.isExprResult());
291:       assertFalse(node0.isTypeOf());
292:       assertFalse(node0.hasChildren());
293:       assertFalse(node0.isAssign());
294:       assertFalse(node0.isDec());
295:       assertFalse(node0.isDefaultCase());
296:       assertFalse(node0.isVoid());
297:       assertFalse(node0.isDo());
298:       assertFalse(node0.isAdd());
299:       assertFalse(node0.isNew());
300:       assertFalse(node0.isTrue());
301:       assertFalse(node0.isNull());
302:       assertFalse(node0.isOr());
303:       assertFalse(node0.isFalse());
304:       assertFalse(node0.isThrow());
305:       assertFalse(node0.isBreak());
306:       assertFalse(node0.isInstanceOf());
307:       assertFalse(node0.isThis());
308:       assertFalse(node0.isHook());
309:       assertFalse(node0.isComma());
310:       assertFalse(node0.isCase());
311:       assertFalse(node0.isAnd());
312:       assertFalse(node0.isString());
313:       assertFalse(node0.isScript());
314:       assertFalse(node0.isSwitch());
315:       assertTrue(node0.isNumber());
316:       assertFalse(node0.isGetProp());
317:       assertFalse(node0.isObjectLit());
318:       assertEquals((-1), node0.getCharno());
319:       assertFalse(node0.isGetterDef());
320:       assertFalse(node0.isNot());
321:       assertFalse(node0.isFor());
322:       assertFalse(node0.isCast());
323:       assertFalse(node0.isIf());
324:       assertFalse(node0.hasOneChild());
325:       assertFalse(node0.isTry());
326:       assertFalse(node0.isRegExp());
327:       assertFalse(node0.hasMoreThanOneChild());
328:       assertFalse(node0.isFunction());
329:       assertFalse(node0.isWith());
330:       assertFalse(node0.isCatch());
331:       assertFalse(node0.isInc());
332:       assertEquals((-1), node0.getLineno());
333:       assertFalse(node0.isNE());
334:       assertFalse(node0.isIn());
335:       
336:       Node node1 = new Node(15, 0, 48);
337:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
338:       assertEquals(55, Node.INFERRED_FUNCTION);
339:       assertEquals(36, Node.QUOTED_PROP);
340:       assertEquals(4095, Node.COLUMN_MASK);
341:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
342:       assertEquals(39, Node.EMPTY_BLOCK);
343:       assertEquals(53, Node.INPUT_ID);
344:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
345:       assertEquals(40, Node.ORIGINALNAME_PROP);
346:       assertEquals(47, Node.IS_DISPATCHER);
347:       assertEquals(2, Node.POST_FLAG);
348:       assertEquals(50, Node.FREE_CALL);
349:       assertEquals(54, Node.SLASH_V);
350:       assertEquals(46, Node.IS_NAMESPACE);
351:       assertEquals(43, Node.IS_CONSTANT_NAME);
352:       assertEquals(1, Node.DECR_FLAG);
353:       assertEquals(12, Node.COLUMN_BITS);
354:       assertEquals(51, Node.STATIC_SOURCE_FILE);
355:       assertEquals(30, Node.VAR_ARGS_NAME);
356:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
357:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
358:       assertEquals(15, Node.NO_SIDE_EFFECTS);
359:       assertEquals(57, Node.LAST_PROP);
360:       assertEquals(32, Node.INCRDECR_PROP);
361:       assertEquals(29, Node.JSDOC_INFO_PROP);
362:       assertEquals(57, Node.REFLECTED_OBJECT);
363:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
364:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
365:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
366:       assertEquals(52, Node.LENGTH);
367:       assertEquals(8, Node.FLAG_NO_THROWS);
368:       assertEquals(48, Node.DIRECTIVES);
369:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
370:       assertEquals(37, Node.OPT_ARG_NAME);
371:       assertEquals(56, Node.CHANGE_TIME);
372:       assertEquals(49, Node.DIRECT_EVAL);
373:       assertFalse(node1.isCase());
374:       assertFalse(node1.isString());
375:       assertFalse(node1.isIn());
376:       assertFalse(node1.isInc());
377:       assertFalse(node1.isFalse());
378:       assertFalse(node1.isThrow());
379:       assertEquals(48, node1.getCharno());
380:       assertFalse(node1.isGetterDef());
381:       assertFalse(node1.isArrayLit());
382:       assertFalse(node1.isSwitch());
383:       assertFalse(node1.isWith());
384:       assertFalse(node1.isCatch());
385:       assertFalse(node1.isRegExp());
386:       assertFalse(node1.isFunction());
387:       assertEquals(48, node1.getSourcePosition());
388:       assertFalse(node1.isTry());
389:       assertEquals(15, node1.getType());
390:       assertFalse(node1.isScript());
391:       assertFalse(node1.isSetterDef());
392:       assertFalse(node1.hasOneChild());
393:       assertFalse(node1.isFor());
394:       assertFalse(node1.isIf());
395:       assertFalse(node1.isNE());
396:       assertFalse(node1.isThis());
397:       assertFalse(node1.isHook());
398:       assertFalse(node1.isInstanceOf());
399:       assertFalse(node1.isDo());
400:       assertFalse(node1.isContinue());
401:       assertFalse(node1.isWhile());
402:       assertFalse(node1.hasMoreThanOneChild());
403:       assertFalse(node1.isOr());
404:       assertFalse(node1.isAdd());
405:       assertFalse(node1.isLabel());
406:       assertFalse(node1.isAssignAdd());
407:       assertFalse(node1.isReturn());
408:       assertFalse(node1.isBlock());
409:       assertFalse(node1.isNew());
410:       assertFalse(node1.isLabelName());
411:       assertFalse(node1.isCast());
412:       assertFalse(node1.isStringKey());
413:       assertFalse(node1.isVar());
414:       assertFalse(node1.isNumber());
415:       assertEquals(0, node1.getLineno());
416:       assertFalse(node1.isParamList());
417:       assertFalse(node1.isNot());
418:       assertFalse(node1.isAnd());
419:       assertFalse(node1.isDebugger());
420:       assertFalse(node1.isObjectLit());
421:       assertEquals(0, node1.getChildCount());
422:       assertFalse(node1.isGetProp());
423:       assertFalse(node1.isDefaultCase());
424:       assertFalse(node1.isAssign());
425:       assertFalse(node1.isEmpty());
426:       assertFalse(node1.isName());
427:       assertFalse(node1.isGetElem());
428:       assertFalse(node1.isCall());
429:       assertFalse(node1.isTypeOf());
430:       assertFalse(node1.isNull());
431:       assertFalse(node1.hasChildren());
432:       assertFalse(node1.isComma());
433:       assertFalse(node1.isDec());
434:       assertFalse(node1.isExprResult());
435:       assertFalse(node1.isTrue());
436:       assertFalse(node1.isBreak());
437:       assertFalse(node1.isVoid());
438:       assertFalse(node1.isDelProp());
439:       
440:       Node node2 = node0.clonePropsFrom(node1);
441:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
442:       assertEquals(29, Node.JSDOC_INFO_PROP);
443:       assertEquals(56, Node.CHANGE_TIME);
444:       assertEquals(37, Node.OPT_ARG_NAME);
445:       assertEquals(47, Node.IS_DISPATCHER);
446:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
447:       assertEquals(2, Node.POST_FLAG);
448:       assertEquals(1, Node.DECR_FLAG);
449:       assertEquals(12, Node.COLUMN_BITS);
450:       assertEquals(32, Node.INCRDECR_PROP);
451:       assertEquals(46, Node.IS_NAMESPACE);
452:       assertEquals(43, Node.IS_CONSTANT_NAME);
453:       assertEquals(54, Node.SLASH_V);
454:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
455:       assertEquals(51, Node.STATIC_SOURCE_FILE);
456:       assertEquals(50, Node.FREE_CALL);
457:       assertEquals(40, Node.ORIGINALNAME_PROP);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(48, Node.DIRECTIVES);
460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
461:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
462:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
463:       assertEquals(30, Node.VAR_ARGS_NAME);
464:       assertEquals(4095, Node.COLUMN_MASK);
465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
466:       assertEquals(55, Node.INFERRED_FUNCTION);
467:       assertEquals(57, Node.LAST_PROP);
468:       assertEquals(49, Node.DIRECT_EVAL);
469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
470:       assertEquals(15, Node.NO_SIDE_EFFECTS);
471:       assertEquals(39, Node.EMPTY_BLOCK);
472:       assertEquals(53, Node.INPUT_ID);
473:       assertEquals(36, Node.QUOTED_PROP);
474:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
475:       assertEquals(52, Node.LENGTH);
476:       assertEquals(8, Node.FLAG_NO_THROWS);
477:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
478:       assertEquals(55, Node.INFERRED_FUNCTION);
479:       assertEquals(36, Node.QUOTED_PROP);
480:       assertEquals(4095, Node.COLUMN_MASK);
481:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
482:       assertEquals(39, Node.EMPTY_BLOCK);
483:       assertEquals(53, Node.INPUT_ID);
484:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
485:       assertEquals(40, Node.ORIGINALNAME_PROP);
486:       assertEquals(47, Node.IS_DISPATCHER);
487:       assertEquals(2, Node.POST_FLAG);
488:       assertEquals(50, Node.FREE_CALL);
489:       assertEquals(54, Node.SLASH_V);
490:       assertEquals(46, Node.IS_NAMESPACE);
491:       assertEquals(43, Node.IS_CONSTANT_NAME);
492:       assertEquals(1, Node.DECR_FLAG);
493:       assertEquals(12, Node.COLUMN_BITS);
494:       assertEquals(51, Node.STATIC_SOURCE_FILE);
495:       assertEquals(30, Node.VAR_ARGS_NAME);
496:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
498:       assertEquals(15, Node.NO_SIDE_EFFECTS);
499:       assertEquals(57, Node.LAST_PROP);
500:       assertEquals(32, Node.INCRDECR_PROP);
501:       assertEquals(29, Node.JSDOC_INFO_PROP);
502:       assertEquals(57, Node.REFLECTED_OBJECT);
503:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
504:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
505:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
506:       assertEquals(52, Node.LENGTH);
507:       assertEquals(8, Node.FLAG_NO_THROWS);
508:       assertEquals(48, Node.DIRECTIVES);
509:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
510:       assertEquals(37, Node.OPT_ARG_NAME);
511:       assertEquals(56, Node.CHANGE_TIME);
512:       assertEquals(49, Node.DIRECT_EVAL);
513:       assertEquals(43, Node.IS_CONSTANT_NAME);
514:       assertEquals(36, Node.QUOTED_PROP);
515:       assertEquals(53, Node.INPUT_ID);
516:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
517:       assertEquals(4095, Node.COLUMN_MASK);
518:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
519:       assertEquals(48, Node.DIRECTIVES);
520:       assertEquals(2, Node.POST_FLAG);
521:       assertEquals(56, Node.CHANGE_TIME);
522:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
523:       assertEquals(39, Node.EMPTY_BLOCK);
524:       assertEquals(47, Node.IS_DISPATCHER);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(29, Node.JSDOC_INFO_PROP);
527:       assertEquals(8, Node.FLAG_NO_THROWS);
528:       assertEquals(55, Node.INFERRED_FUNCTION);
529:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
530:       assertEquals(57, Node.LAST_PROP);
531:       assertEquals(54, Node.SLASH_V);
532:       assertEquals(15, Node.NO_SIDE_EFFECTS);
533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
534:       assertEquals(30, Node.VAR_ARGS_NAME);
535:       assertEquals(52, Node.LENGTH);
536:       assertEquals(51, Node.STATIC_SOURCE_FILE);
537:       assertEquals(46, Node.IS_NAMESPACE);
538:       assertEquals(40, Node.ORIGINALNAME_PROP);
539:       assertEquals(57, Node.REFLECTED_OBJECT);
540:       assertEquals(49, Node.DIRECT_EVAL);
541:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
542:       assertEquals(37, Node.OPT_ARG_NAME);
543:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
544:       assertEquals(50, Node.FREE_CALL);
545:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
546:       assertEquals(12, Node.COLUMN_BITS);
547:       assertEquals(1, Node.DECR_FLAG);
548:       assertEquals(32, Node.INCRDECR_PROP);
549:       assertFalse(node0.isName());
550:       assertFalse(node0.isCall());
551:       assertFalse(node0.isStringKey());
552:       assertFalse(node0.isSetterDef());
553:       assertFalse(node0.isBlock());
554:       assertFalse(node0.isVar());
555:       assertEquals(0, node0.getChildCount());
556:       assertEquals(39, node0.getType());
557:       assertFalse(node0.isWhile());
558:       assertFalse(node0.isContinue());
559:       assertFalse(node0.isParamList());
560:       assertEquals((-1), node0.getSourcePosition());
561:       assertFalse(node0.isDebugger());
562:       assertFalse(node0.isEmpty());
563:       assertFalse(node0.isGetElem());
564:       assertFalse(node0.isArrayLit());
565:       assertFalse(node0.isDelProp());
566:       assertFalse(node0.isLabelName());
567:       assertFalse(node0.isLabel());
568:       assertFalse(node0.isReturn());
569:       assertFalse(node0.isAssignAdd());
570:       assertFalse(node0.isExprResult());
571:       assertFalse(node0.isTypeOf());
572:       assertFalse(node0.hasChildren());
573:       assertFalse(node0.isAssign());
574:       assertFalse(node0.isDec());
575:       assertFalse(node0.isDefaultCase());
576:       assertFalse(node0.isVoid());
577:       assertFalse(node0.isDo());
578:       assertFalse(node0.isAdd());
579:       assertFalse(node0.isNew());
580:       assertFalse(node0.isTrue());
581:       assertFalse(node0.isNull());
582:       assertFalse(node0.isOr());
583:       assertFalse(node0.isFalse());
584:       assertFalse(node0.isThrow());
585:       assertFalse(node0.isBreak());
586:       assertFalse(node0.isInstanceOf());
587:       assertFalse(node0.isThis());
588:       assertFalse(node0.isHook());
589:       assertFalse(node0.isComma());
590:       assertFalse(node0.isCase());
591:       assertFalse(node0.isAnd());
592:       assertFalse(node0.isString());
593:       assertFalse(node0.isScript());
594:       assertFalse(node0.isSwitch());
595:       assertTrue(node0.isNumber());
596:       assertFalse(node0.isGetProp());
597:       assertFalse(node0.isObjectLit());
598:       assertEquals((-1), node0.getCharno());
599:       assertFalse(node0.isGetterDef());
600:       assertFalse(node0.isNot());
601:       assertFalse(node0.isFor());
602:       assertFalse(node0.isCast());
603:       assertFalse(node0.isIf());
604:       assertFalse(node0.hasOneChild());
605:       assertFalse(node0.isTry());
606:       assertFalse(node0.isRegExp());
607:       assertFalse(node0.hasMoreThanOneChild());
608:       assertFalse(node0.isFunction());
609:       assertFalse(node0.isWith());
610:       assertFalse(node0.isCatch());
611:       assertFalse(node0.isInc());
612:       assertEquals((-1), node0.getLineno());
613:       assertFalse(node0.isNE());
614:       assertFalse(node0.isIn());
615:       assertFalse(node1.isCase());
616:       assertFalse(node1.isString());
617:       assertFalse(node1.isIn());
618:       assertFalse(node1.isInc());
619:       assertFalse(node1.isFalse());
620:       assertFalse(node1.isThrow());
621:       assertEquals(48, node1.getCharno());
622:       assertFalse(node1.isGetterDef());
623:       assertFalse(node1.isArrayLit());
624:       assertFalse(node1.isSwitch());
625:       assertFalse(node1.isWith());
626:       assertFalse(node1.isCatch());
627:       assertFalse(node1.isRegExp());
628:       assertFalse(node1.isFunction());
629:       assertEquals(48, node1.getSourcePosition());
630:       assertFalse(node1.isTry());
631:       assertEquals(15, node1.getType());
632:       assertFalse(node1.isScript());
633:       assertFalse(node1.isSetterDef());
634:       assertFalse(node1.hasOneChild());
635:       assertFalse(node1.isFor());
636:       assertFalse(node1.isIf());
637:       assertFalse(node1.isNE());
638:       assertFalse(node1.isThis());
639:       assertFalse(node1.isHook());
640:       assertFalse(node1.isInstanceOf());
641:       assertFalse(node1.isDo());
642:       assertFalse(node1.isContinue());
643:       assertFalse(node1.isWhile());
644:       assertFalse(node1.hasMoreThanOneChild());
645:       assertFalse(node1.isOr());
646:       assertFalse(node1.isAdd());
647:       assertFalse(node1.isLabel());
648:       assertFalse(node1.isAssignAdd());
649:       assertFalse(node1.isReturn());
650:       assertFalse(node1.isBlock());
651:       assertFalse(node1.isNew());
652:       assertFalse(node1.isLabelName());
653:       assertFalse(node1.isCast());
654:       assertFalse(node1.isStringKey());
655:       assertFalse(node1.isVar());
656:       assertFalse(node1.isNumber());
657:       assertEquals(0, node1.getLineno());
658:       assertFalse(node1.isParamList());
659:       assertFalse(node1.isNot());
660:       assertFalse(node1.isAnd());
661:       assertFalse(node1.isDebugger());
662:       assertFalse(node1.isObjectLit());
663:       assertEquals(0, node1.getChildCount());
664:       assertFalse(node1.isGetProp());
665:       assertFalse(node1.isDefaultCase());
666:       assertFalse(node1.isAssign());
667:       assertFalse(node1.isEmpty());
668:       assertFalse(node1.isName());
669:       assertFalse(node1.isGetElem());
670:       assertFalse(node1.isCall());
671:       assertFalse(node1.isTypeOf());
672:       assertFalse(node1.isNull());
673:       assertFalse(node1.hasChildren());
674:       assertFalse(node1.isComma());
675:       assertFalse(node1.isDec());
676:       assertFalse(node1.isExprResult());
677:       assertFalse(node1.isTrue());
678:       assertFalse(node1.isBreak());
679:       assertFalse(node1.isVoid());
680:       assertFalse(node1.isDelProp());
681:       assertFalse(node2.isInc());
682:       assertEquals((-1), node2.getCharno());
683:       assertFalse(node2.isSwitch());
684:       assertFalse(node2.isString());
685:       assertFalse(node2.isHook());
686:       assertFalse(node2.isFalse());
687:       assertFalse(node2.isBreak());
688:       assertFalse(node2.isNE());
689:       assertFalse(node2.isIn());
690:       assertFalse(node2.isEmpty());
691:       assertFalse(node2.isThrow());
692:       assertFalse(node2.isExprResult());
693:       assertFalse(node2.isDebugger());
694:       assertFalse(node2.isVoid());
695:       assertFalse(node2.isFunction());
696:       assertFalse(node2.isTrue());
697:       assertFalse(node2.isNot());
698:       assertFalse(node2.isAnd());
699:       assertFalse(node2.isGetElem());
700:       assertFalse(node2.isCast());
701:       assertFalse(node2.isDelProp());
702:       assertFalse(node2.isGetProp());
703:       assertFalse(node2.isReturn());
704:       assertFalse(node2.hasChildren());
705:       assertEquals((-1), node2.getSourcePosition());
706:       assertFalse(node2.isTypeOf());
707:       assertFalse(node2.isComma());
708:       assertFalse(node2.isAssign());
709:       assertFalse(node2.isDec());
710:       assertFalse(node2.isObjectLit());
711:       assertFalse(node2.isWhile());
712:       assertTrue(node2.isNumber());
713:       assertFalse(node2.isAdd());
714:       assertFalse(node2.isBlock());
715:       assertEquals(39, node2.getType());
716:       assertFalse(node2.isContinue());
717:       assertFalse(node2.isCall());
718:       assertFalse(node2.hasMoreThanOneChild());
719:       assertFalse(node2.isStringKey());
720:       assertEquals((-1), node2.getLineno());
721:       assertFalse(node2.isName());
722:       assertFalse(node2.isSetterDef());
723:       assertFalse(node2.isNull());
724:       assertFalse(node2.isLabel());
725:       assertEquals(0, node2.getChildCount());
726:       assertFalse(node2.isOr());
727:       assertFalse(node2.isVar());
728:       assertFalse(node2.isDefaultCase());
729:       assertFalse(node2.isAssignAdd());
730:       assertFalse(node2.isNew());
731:       assertFalse(node2.isDo());
732:       assertFalse(node2.isScript());
733:       assertFalse(node2.isWith());
734:       assertFalse(node2.isRegExp());
735:       assertFalse(node2.isInstanceOf());
736:       assertFalse(node2.isCatch());
737:       assertFalse(node2.isIf());
738:       assertFalse(node2.isArrayLit());
739:       assertFalse(node2.isLabelName());
740:       assertFalse(node2.isParamList());
741:       assertFalse(node2.isThis());
742:       assertFalse(node2.isGetterDef());
743:       assertFalse(node2.isFor());
744:       assertFalse(node2.isTry());
745:       assertFalse(node2.isCase());
746:       assertFalse(node2.hasOneChild());
747:       
748:       Node node3 = node0.clonePropsFrom(node2);
749:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
750:       assertEquals(29, Node.JSDOC_INFO_PROP);
751:       assertEquals(56, Node.CHANGE_TIME);
752:       assertEquals(37, Node.OPT_ARG_NAME);
753:       assertEquals(47, Node.IS_DISPATCHER);
754:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
755:       assertEquals(2, Node.POST_FLAG);
756:       assertEquals(1, Node.DECR_FLAG);
757:       assertEquals(12, Node.COLUMN_BITS);
758:       assertEquals(32, Node.INCRDECR_PROP);
759:       assertEquals(46, Node.IS_NAMESPACE);
760:       assertEquals(43, Node.IS_CONSTANT_NAME);
761:       assertEquals(54, Node.SLASH_V);
762:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
763:       assertEquals(51, Node.STATIC_SOURCE_FILE);
764:       assertEquals(50, Node.FREE_CALL);
765:       assertEquals(40, Node.ORIGINALNAME_PROP);
766:       assertEquals(57, Node.REFLECTED_OBJECT);
767:       assertEquals(48, Node.DIRECTIVES);
768:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
769:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
770:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
771:       assertEquals(30, Node.VAR_ARGS_NAME);
772:       assertEquals(4095, Node.COLUMN_MASK);
773:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
774:       assertEquals(55, Node.INFERRED_FUNCTION);
775:       assertEquals(57, Node.LAST_PROP);
776:       assertEquals(49, Node.DIRECT_EVAL);
777:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
778:       assertEquals(15, Node.NO_SIDE_EFFECTS);
779:       assertEquals(39, Node.EMPTY_BLOCK);
780:       assertEquals(53, Node.INPUT_ID);
781:       assertEquals(36, Node.QUOTED_PROP);
782:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
783:       assertEquals(52, Node.LENGTH);
784:       assertEquals(8, Node.FLAG_NO_THROWS);
785:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
786:       assertEquals(55, Node.INFERRED_FUNCTION);
787:       assertEquals(36, Node.QUOTED_PROP);
788:       assertEquals(4095, Node.COLUMN_MASK);
789:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
790:       assertEquals(39, Node.EMPTY_BLOCK);
791:       assertEquals(53, Node.INPUT_ID);
792:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
793:       assertEquals(40, Node.ORIGINALNAME_PROP);
794:       assertEquals(47, Node.IS_DISPATCHER);
795:       assertEquals(2, Node.POST_FLAG);
796:       assertEquals(50, Node.FREE_CALL);
797:       assertEquals(54, Node.SLASH_V);
798:       assertEquals(46, Node.IS_NAMESPACE);
799:       assertEquals(43, Node.IS_CONSTANT_NAME);
800:       assertEquals(1, Node.DECR_FLAG);
801:       assertEquals(12, Node.COLUMN_BITS);
802:       assertEquals(51, Node.STATIC_SOURCE_FILE);
803:       assertEquals(30, Node.VAR_ARGS_NAME);
804:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
805:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
806:       assertEquals(15, Node.NO_SIDE_EFFECTS);
807:       assertEquals(57, Node.LAST_PROP);
808:       assertEquals(32, Node.INCRDECR_PROP);
809:       assertEquals(29, Node.JSDOC_INFO_PROP);
810:       assertEquals(57, Node.REFLECTED_OBJECT);
811:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
812:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
813:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
814:       assertEquals(52, Node.LENGTH);
815:       assertEquals(8, Node.FLAG_NO_THROWS);
816:       assertEquals(48, Node.DIRECTIVES);
817:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
818:       assertEquals(37, Node.OPT_ARG_NAME);
819:       assertEquals(56, Node.CHANGE_TIME);
820:       assertEquals(49, Node.DIRECT_EVAL);
821:       assertEquals(43, Node.IS_CONSTANT_NAME);
822:       assertEquals(36, Node.QUOTED_PROP);
823:       assertEquals(53, Node.INPUT_ID);
824:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
825:       assertEquals(4095, Node.COLUMN_MASK);
826:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
827:       assertEquals(48, Node.DIRECTIVES);
828:       assertEquals(2, Node.POST_FLAG);
829:       assertEquals(56, Node.CHANGE_TIME);
830:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
831:       assertEquals(39, Node.EMPTY_BLOCK);
832:       assertEquals(47, Node.IS_DISPATCHER);
833:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
834:       assertEquals(29, Node.JSDOC_INFO_PROP);
835:       assertEquals(8, Node.FLAG_NO_THROWS);
836:       assertEquals(55, Node.INFERRED_FUNCTION);
837:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
838:       assertEquals(57, Node.LAST_PROP);
839:       assertEquals(54, Node.SLASH_V);
840:       assertEquals(15, Node.NO_SIDE_EFFECTS);
841:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
842:       assertEquals(30, Node.VAR_ARGS_NAME);
843:       assertEquals(52, Node.LENGTH);
844:       assertEquals(51, Node.STATIC_SOURCE_FILE);
845:       assertEquals(46, Node.IS_NAMESPACE);
846:       assertEquals(40, Node.ORIGINALNAME_PROP);
847:       assertEquals(57, Node.REFLECTED_OBJECT);
848:       assertEquals(49, Node.DIRECT_EVAL);
849:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
850:       assertEquals(37, Node.OPT_ARG_NAME);
851:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
852:       assertEquals(50, Node.FREE_CALL);
853:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
854:       assertEquals(12, Node.COLUMN_BITS);
855:       assertEquals(1, Node.DECR_FLAG);
856:       assertEquals(32, Node.INCRDECR_PROP);
857:       assertEquals(48, Node.DIRECTIVES);
858:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
859:       assertEquals(39, Node.EMPTY_BLOCK);
860:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
861:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
862:       assertEquals(50, Node.FREE_CALL);
863:       assertEquals(4095, Node.COLUMN_MASK);
864:       assertEquals(8, Node.FLAG_NO_THROWS);
865:       assertEquals(40, Node.ORIGINALNAME_PROP);
866:       assertEquals(57, Node.REFLECTED_OBJECT);
867:       assertEquals(43, Node.IS_CONSTANT_NAME);
868:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
869:       assertEquals(36, Node.QUOTED_PROP);
870:       assertEquals(53, Node.INPUT_ID);
871:       assertEquals(15, Node.NO_SIDE_EFFECTS);
872:       assertEquals(30, Node.VAR_ARGS_NAME);
873:       assertEquals(52, Node.LENGTH);
874:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
875:       assertEquals(55, Node.INFERRED_FUNCTION);
876:       assertEquals(29, Node.JSDOC_INFO_PROP);
877:       assertEquals(57, Node.LAST_PROP);
878:       assertEquals(37, Node.OPT_ARG_NAME);
879:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
880:       assertEquals(47, Node.IS_DISPATCHER);
881:       assertEquals(51, Node.STATIC_SOURCE_FILE);
882:       assertEquals(2, Node.POST_FLAG);
883:       assertEquals(46, Node.IS_NAMESPACE);
884:       assertEquals(56, Node.CHANGE_TIME);
885:       assertEquals(49, Node.DIRECT_EVAL);
886:       assertEquals(54, Node.SLASH_V);
887:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
888:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
889:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
890:       assertEquals(1, Node.DECR_FLAG);
891:       assertEquals(12, Node.COLUMN_BITS);
892:       assertEquals(32, Node.INCRDECR_PROP);
893:       assertFalse(node0.isName());
894:       assertFalse(node0.isCall());
895:       assertFalse(node0.isStringKey());
896:       assertFalse(node0.isSetterDef());
897:       assertFalse(node0.isBlock());
898:       assertFalse(node0.isVar());
899:       assertEquals(0, node0.getChildCount());
900:       assertEquals(39, node0.getType());
901:       assertFalse(node0.isWhile());
902:       assertFalse(node0.isContinue());
903:       assertFalse(node0.isParamList());
904:       assertEquals((-1), node0.getSourcePosition());
905:       assertFalse(node0.isDebugger());
906:       assertFalse(node0.isEmpty());
907:       assertFalse(node0.isGetElem());
908:       assertFalse(node0.isArrayLit());
909:       assertFalse(node0.isDelProp());
910:       assertFalse(node0.isLabelName());
911:       assertFalse(node0.isLabel());
912:       assertFalse(node0.isReturn());
913:       assertFalse(node0.isAssignAdd());
914:       assertFalse(node0.isExprResult());
915:       assertFalse(node0.isTypeOf());
916:       assertFalse(node0.hasChildren());
917:       assertFalse(node0.isAssign());
918:       assertFalse(node0.isDec());
919:       assertFalse(node0.isDefaultCase());
920:       assertFalse(node0.isVoid());
921:       assertFalse(node0.isDo());
922:       assertFalse(node0.isAdd());
923:       assertFalse(node0.isNew());
924:       assertFalse(node0.isTrue());
925:       assertFalse(node0.isNull());
926:       assertFalse(node0.isOr());
927:       assertFalse(node0.isFalse());
928:       assertFalse(node0.isThrow());
929:       assertFalse(node0.isBreak());
930:       assertFalse(node0.isInstanceOf());
931:       assertFalse(node0.isThis());
932:       assertFalse(node0.isHook());
933:       assertFalse(node0.isComma());
934:       assertFalse(node0.isCase());
935:       assertFalse(node0.isAnd());
936:       assertFalse(node0.isString());
937:       assertFalse(node0.isScript());
938:       assertFalse(node0.isSwitch());
939:       assertTrue(node0.isNumber());
940:       assertFalse(node0.isGetProp());
941:       assertFalse(node0.isObjectLit());
942:       assertEquals((-1), node0.getCharno());
943:       assertFalse(node0.isGetterDef());
944:       assertFalse(node0.isNot());
945:       assertFalse(node0.isFor());
946:       assertFalse(node0.isCast());
947:       assertFalse(node0.isIf());
948:       assertFalse(node0.hasOneChild());
949:       assertFalse(node0.isTry());
950:       assertFalse(node0.isRegExp());
951:       assertFalse(node0.hasMoreThanOneChild());
952:       assertFalse(node0.isFunction());
953:       assertFalse(node0.isWith());
954:       assertFalse(node0.isCatch());
955:       assertFalse(node0.isInc());
956:       assertEquals((-1), node0.getLineno());
957:       assertFalse(node0.isNE());
958:       assertFalse(node0.isIn());
959:       assertFalse(node1.isCase());
960:       assertFalse(node1.isString());
961:       assertFalse(node1.isIn());
962:       assertFalse(node1.isInc());
963:       assertFalse(node1.isFalse());
964:       assertFalse(node1.isThrow());
965:       assertEquals(48, node1.getCharno());
966:       assertFalse(node1.isGetterDef());
967:       assertFalse(node1.isArrayLit());
968:       assertFalse(node1.isSwitch());
969:       assertFalse(node1.isWith());
970:       assertFalse(node1.isCatch());
971:       assertFalse(node1.isRegExp());
972:       assertFalse(node1.isFunction());
973:       assertEquals(48, node1.getSourcePosition());
974:       assertFalse(node1.isTry());
975:       assertEquals(15, node1.getType());
976:       assertFalse(node1.isScript());
977:       assertFalse(node1.isSetterDef());
978:       assertFalse(node1.hasOneChild());
979:       assertFalse(node1.isFor());
980:       assertFalse(node1.isIf());
981:       assertFalse(node1.isNE());
982:       assertFalse(node1.isThis());
983:       assertFalse(node1.isHook());
984:       assertFalse(node1.isInstanceOf());
985:       assertFalse(node1.isDo());
986:       assertFalse(node1.isContinue());
987:       assertFalse(node1.isWhile());
988:       assertFalse(node1.hasMoreThanOneChild());
989:       assertFalse(node1.isOr());
990:       assertFalse(node1.isAdd());
991:       assertFalse(node1.isLabel());
992:       assertFalse(node1.isAssignAdd());
993:       assertFalse(node1.isReturn());
994:       assertFalse(node1.isBlock());
995:       assertFalse(node1.isNew());
996:       assertFalse(node1.isLabelName());
997:       assertFalse(node1.isCast());
998:       assertFalse(node1.isStringKey());
999:       assertFalse(node1.isVar());
1000:       assertFalse(node1.isNumber());
1001:       assertEquals(0, node1.getLineno());
1002:       assertFalse(node1.isParamList());
1003:       assertFalse(node1.isNot());
1004:       assertFalse(node1.isAnd());
1005:       assertFalse(node1.isDebugger());
1006:       assertFalse(node1.isObjectLit());
1007:       assertEquals(0, node1.getChildCount());
1008:       assertFalse(node1.isGetProp());
1009:       assertFalse(node1.isDefaultCase());
1010:       assertFalse(node1.isAssign());
1011:       assertFalse(node1.isEmpty());
1012:       assertFalse(node1.isName());
1013:       assertFalse(node1.isGetElem());
1014:       assertFalse(node1.isCall());
1015:       assertFalse(node1.isTypeOf());
1016:       assertFalse(node1.isNull());
1017:       assertFalse(node1.hasChildren());
1018:       assertFalse(node1.isComma());
1019:       assertFalse(node1.isDec());
1020:       assertFalse(node1.isExprResult());
1021:       assertFalse(node1.isTrue());
1022:       assertFalse(node1.isBreak());
1023:       assertFalse(node1.isVoid());
1024:       assertFalse(node1.isDelProp());
1025:       assertFalse(node2.isInc());
1026:       assertEquals((-1), node2.getCharno());
1027:       assertFalse(node2.isSwitch());
1028:       assertFalse(node2.isString());
1029:       assertFalse(node2.isHook());
1030:       assertFalse(node2.isFalse());
1031:       assertFalse(node2.isBreak());
1032:       assertFalse(node2.isNE());
1033:       assertFalse(node2.isIn());
1034:       assertFalse(node2.isEmpty());
1035:       assertFalse(node2.isThrow());
1036:       assertFalse(node2.isExprResult());
1037:       assertFalse(node2.isDebugger());
1038:       assertFalse(node2.isVoid());
1039:       assertFalse(node2.isFunction());
1040:       assertFalse(node2.isTrue());
1041:       assertFalse(node2.isNot());
1042:       assertFalse(node2.isAnd());
1043:       assertFalse(node2.isGetElem());
1044:       assertFalse(node2.isCast());
1045:       assertFalse(node2.isDelProp());
1046:       assertFalse(node2.isGetProp());
1047:       assertFalse(node2.isReturn());
1048:       assertFalse(node2.hasChildren());
1049:       assertEquals((-1), node2.getSourcePosition());
1050:       assertFalse(node2.isTypeOf());
1051:       assertFalse(node2.isComma());
1052:       assertFalse(node2.isAssign());
1053:       assertFalse(node2.isDec());
1054:       assertFalse(node2.isObjectLit());
1055:       assertFalse(node2.isWhile());
1056:       assertTrue(node2.isNumber());
1057:       assertFalse(node2.isAdd());
1058:       assertFalse(node2.isBlock());
1059:       assertEquals(39, node2.getType());
1060:       assertFalse(node2.isContinue());
1061:       assertFalse(node2.isCall());
1062:       assertFalse(node2.hasMoreThanOneChild());
1063:       assertFalse(node2.isStringKey());
1064:       assertEquals((-1), node2.getLineno());
1065:       assertFalse(node2.isName());
1066:       assertFalse(node2.isSetterDef());
1067:       assertFalse(node2.isNull());
1068:       assertFalse(node2.isLabel());
1069:       assertEquals(0, node2.getChildCount());
1070:       assertFalse(node2.isOr());
1071:       assertFalse(node2.isVar());
1072:       assertFalse(node2.isDefaultCase());
1073:       assertFalse(node2.isAssignAdd());
1074:       assertFalse(node2.isNew());
1075:       assertFalse(node2.isDo());
1076:       assertFalse(node2.isScript());
1077:       assertFalse(node2.isWith());
1078:       assertFalse(node2.isRegExp());
1079:       assertFalse(node2.isInstanceOf());
1080:       assertFalse(node2.isCatch());
1081:       assertFalse(node2.isIf());
1082:       assertFalse(node2.isArrayLit());
1083:       assertFalse(node2.isLabelName());
1084:       assertFalse(node2.isParamList());
1085:       assertFalse(node2.isThis());
1086:       assertFalse(node2.isGetterDef());
1087:       assertFalse(node2.isFor());
1088:       assertFalse(node2.isTry());
1089:       assertFalse(node2.isCase());
1090:       assertFalse(node2.hasOneChild());
1091:       assertFalse(node3.isLabel());
1092:       assertFalse(node3.isAssignAdd());
1093:       assertFalse(node3.isReturn());
1094:       assertEquals((-1), node3.getSourcePosition());
1095:       assertFalse(node3.isTypeOf());
1096:       assertFalse(node3.hasChildren());
1097:       assertFalse(node3.hasMoreThanOneChild());
1098:       assertFalse(node3.isAssign());
1099:       assertFalse(node3.isOr());
1100:       assertFalse(node3.isDec());
1101:       assertFalse(node3.isGetElem());
1102:       assertFalse(node3.isContinue());
1103:       assertFalse(node3.isCast());
1104:       assertEquals((-1), node3.getLineno());
1105:       assertFalse(node3.isLabelName());
1106:       assertFalse(node3.isAdd());
1107:       assertFalse(node3.isNew());
1108:       assertFalse(node3.isVar());
1109:       assertFalse(node3.isSetterDef());
1110:       assertFalse(node3.isDo());
1111:       assertFalse(node3.isThis());
1112:       assertFalse(node3.isParamList());
1113:       assertFalse(node3.isInstanceOf());
1114:       assertEquals(0, node3.getChildCount());
1115:       assertFalse(node3.isWith());
1116:       assertFalse(node3.isCatch());
1117:       assertFalse(node3.isStringKey());
1118:       assertFalse(node3.isBlock());
1119:       assertEquals((-1), node3.getCharno());
1120:       assertFalse(node3.isRegExp());
1121:       assertFalse(node3.isHook());
1122:       assertFalse(node3.isCase());
1123:       assertFalse(node3.isFor());
1124:       assertEquals(39, node3.getType());
1125:       assertFalse(node3.isScript());
1126:       assertFalse(node3.hasOneChild());
1127:       assertFalse(node3.isTry());
1128:       assertFalse(node3.isNE());
1129:       assertFalse(node3.isIn());
1130:       assertFalse(node3.isGetterDef());
1131:       assertFalse(node3.isArrayLit());
1132:       assertFalse(node3.isIf());
1133:       assertFalse(node3.isSwitch());
1134:       assertFalse(node3.isDelProp());
1135:       assertFalse(node3.isInc());
1136:       assertFalse(node3.isTrue());
1137:       assertFalse(node3.isFunction());
1138:       assertFalse(node3.isThrow());
1139:       assertFalse(node3.isEmpty());
1140:       assertFalse(node3.isDefaultCase());
1141:       assertFalse(node3.isGetProp());
1142:       assertFalse(node3.isNull());
1143:       assertFalse(node3.isComma());
1144:       assertFalse(node3.isObjectLit());
1145:       assertFalse(node3.isName());
1146:       assertFalse(node3.isFalse());
1147:       assertFalse(node3.isAnd());
1148:       assertFalse(node3.isCall());
1149:       assertFalse(node3.isBreak());
1150:       assertFalse(node3.isVoid());
1151:       assertFalse(node3.isExprResult());
1152:       assertFalse(node3.isDebugger());
1153:       assertFalse(node3.isNot());
1154:       assertFalse(node3.isWhile());
1155:       assertFalse(node3.isString());
1156:       assertTrue(node3.isNumber());
1157:       
1158:       node3.isFromExterns();
1159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1160:       assertEquals(29, Node.JSDOC_INFO_PROP);
1161:       assertEquals(56, Node.CHANGE_TIME);
1162:       assertEquals(37, Node.OPT_ARG_NAME);
1163:       assertEquals(47, Node.IS_DISPATCHER);
1164:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1165:       assertEquals(2, Node.POST_FLAG);
1166:       assertEquals(1, Node.DECR_FLAG);
1167:       assertEquals(12, Node.COLUMN_BITS);
1168:       assertEquals(32, Node.INCRDECR_PROP);
1169:       assertEquals(46, Node.IS_NAMESPACE);
1170:       assertEquals(43, Node.IS_CONSTANT_NAME);
1171:       assertEquals(54, Node.SLASH_V);
1172:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1173:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1174:       assertEquals(50, Node.FREE_CALL);
1175:       assertEquals(40, Node.ORIGINALNAME_PROP);
1176:       assertEquals(57, Node.REFLECTED_OBJECT);
1177:       assertEquals(48, Node.DIRECTIVES);
1178:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1179:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1180:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1181:       assertEquals(30, Node.VAR_ARGS_NAME);
1182:       assertEquals(4095, Node.COLUMN_MASK);
1183:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1184:       assertEquals(55, Node.INFERRED_FUNCTION);
1185:       assertEquals(57, Node.LAST_PROP);
1186:       assertEquals(49, Node.DIRECT_EVAL);
1187:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1188:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1189:       assertEquals(39, Node.EMPTY_BLOCK);
1190:       assertEquals(53, Node.INPUT_ID);
1191:       assertEquals(36, Node.QUOTED_PROP);
1192:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1193:       assertEquals(52, Node.LENGTH);
1194:       assertEquals(8, Node.FLAG_NO_THROWS);
1195:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1196:       assertEquals(55, Node.INFERRED_FUNCTION);
1197:       assertEquals(36, Node.QUOTED_PROP);
1198:       assertEquals(4095, Node.COLUMN_MASK);
1199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1200:       assertEquals(39, Node.EMPTY_BLOCK);
1201:       assertEquals(53, Node.INPUT_ID);
1202:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1203:       assertEquals(40, Node.ORIGINALNAME_PROP);
1204:       assertEquals(47, Node.IS_DISPATCHER);
1205:       assertEquals(2, Node.POST_FLAG);
1206:       assertEquals(50, Node.FREE_CALL);
1207:       assertEquals(54, Node.SLASH_V);
1208:       assertEquals(46, Node.IS_NAMESPACE);
1209:       assertEquals(43, Node.IS_CONSTANT_NAME);
1210:       assertEquals(1, Node.DECR_FLAG);
1211:       assertEquals(12, Node.COLUMN_BITS);
1212:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1213:       assertEquals(30, Node.VAR_ARGS_NAME);
1214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1215:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1217:       assertEquals(57, Node.LAST_PROP);
1218:       assertEquals(32, Node.INCRDECR_PROP);
1219:       assertEquals(29, Node.JSDOC_INFO_PROP);
1220:       assertEquals(57, Node.REFLECTED_OBJECT);
1221:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1222:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1223:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1224:       assertEquals(52, Node.LENGTH);
1225:       assertEquals(8, Node.FLAG_NO_THROWS);
1226:       assertEquals(48, Node.DIRECTIVES);
1227:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1228:       assertEquals(37, Node.OPT_ARG_NAME);
1229:       assertEquals(56, Node.CHANGE_TIME);
1230:       assertEquals(49, Node.DIRECT_EVAL);
1231:       assertEquals(43, Node.IS_CONSTANT_NAME);
1232:       assertEquals(36, Node.QUOTED_PROP);
1233:       assertEquals(53, Node.INPUT_ID);
1234:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1235:       assertEquals(4095, Node.COLUMN_MASK);
1236:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1237:       assertEquals(48, Node.DIRECTIVES);
1238:       assertEquals(2, Node.POST_FLAG);
1239:       assertEquals(56, Node.CHANGE_TIME);
1240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1241:       assertEquals(39, Node.EMPTY_BLOCK);
1242:       assertEquals(47, Node.IS_DISPATCHER);
1243:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1244:       assertEquals(29, Node.JSDOC_INFO_PROP);
1245:       assertEquals(8, Node.FLAG_NO_THROWS);
1246:       assertEquals(55, Node.INFERRED_FUNCTION);
1247:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1248:       assertEquals(57, Node.LAST_PROP);
1249:       assertEquals(54, Node.SLASH_V);
1250:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1251:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1252:       assertEquals(30, Node.VAR_ARGS_NAME);
1253:       assertEquals(52, Node.LENGTH);
1254:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1255:       assertEquals(46, Node.IS_NAMESPACE);
1256:       assertEquals(40, Node.ORIGINALNAME_PROP);
1257:       assertEquals(57, Node.REFLECTED_OBJECT);
1258:       assertEquals(49, Node.DIRECT_EVAL);
1259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1260:       assertEquals(37, Node.OPT_ARG_NAME);
1261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1262:       assertEquals(50, Node.FREE_CALL);
1263:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1264:       assertEquals(12, Node.COLUMN_BITS);
1265:       assertEquals(1, Node.DECR_FLAG);
1266:       assertEquals(32, Node.INCRDECR_PROP);
1267:       assertEquals(48, Node.DIRECTIVES);
1268:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1269:       assertEquals(39, Node.EMPTY_BLOCK);
1270:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1271:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1272:       assertEquals(50, Node.FREE_CALL);
1273:       assertEquals(4095, Node.COLUMN_MASK);
1274:       assertEquals(8, Node.FLAG_NO_THROWS);
1275:       assertEquals(40, Node.ORIGINALNAME_PROP);
1276:       assertEquals(57, Node.REFLECTED_OBJECT);
1277:       assertEquals(43, Node.IS_CONSTANT_NAME);
1278:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1279:       assertEquals(36, Node.QUOTED_PROP);
1280:       assertEquals(53, Node.INPUT_ID);
1281:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1282:       assertEquals(30, Node.VAR_ARGS_NAME);
1283:       assertEquals(52, Node.LENGTH);
1284:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1285:       assertEquals(55, Node.INFERRED_FUNCTION);
1286:       assertEquals(29, Node.JSDOC_INFO_PROP);
1287:       assertEquals(57, Node.LAST_PROP);
1288:       assertEquals(37, Node.OPT_ARG_NAME);
1289:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1290:       assertEquals(47, Node.IS_DISPATCHER);
1291:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1292:       assertEquals(2, Node.POST_FLAG);
1293:       assertEquals(46, Node.IS_NAMESPACE);
1294:       assertEquals(56, Node.CHANGE_TIME);
1295:       assertEquals(49, Node.DIRECT_EVAL);
1296:       assertEquals(54, Node.SLASH_V);
1297:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1298:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1299:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1300:       assertEquals(1, Node.DECR_FLAG);
1301:       assertEquals(12, Node.COLUMN_BITS);
1302:       assertEquals(32, Node.INCRDECR_PROP);
1303:       assertFalse(node0.isName());
1304:       assertFalse(node0.isCall());
1305:       assertFalse(node0.isStringKey());
1306:       assertFalse(node0.isSetterDef());
1307:       assertFalse(node0.isBlock());
1308:       assertFalse(node0.isVar());
1309:       assertEquals(0, node0.getChildCount());
1310:       assertEquals(39, node0.getType());
1311:       assertFalse(node0.isWhile());
1312:       assertFalse(node0.isContinue());
1313:       assertFalse(node0.isParamList());
1314:       assertEquals((-1), node0.getSourcePosition());
1315:       assertFalse(node0.isDebugger());
1316:       assertFalse(node0.isEmpty());
1317:       assertFalse(node0.isGetElem());
1318:       assertFalse(node0.isArrayLit());
1319:       assertFalse(node0.isDelProp());
1320:       assertFalse(node0.isLabelName());
1321:       assertFalse(node0.isLabel());
1322:       assertFalse(node0.isReturn());
1323:       assertFalse(node0.isAssignAdd());
1324:       assertFalse(node0.isExprResult());
1325:       assertFalse(node0.isTypeOf());
1326:       assertFalse(node0.hasChildren());
1327:       assertFalse(node0.isAssign());
1328:       assertFalse(node0.isDec());
1329:       assertFalse(node0.isDefaultCase());
1330:       assertFalse(node0.isVoid());
1331:       assertFalse(node0.isDo());
1332:       assertFalse(node0.isAdd());
1333:       assertFalse(node0.isNew());
1334:       assertFalse(node0.isTrue());
1335:       assertFalse(node0.isNull());
1336:       assertFalse(node0.isOr());
1337:       assertFalse(node0.isFalse());
1338:       assertFalse(node0.isThrow());
1339:       assertFalse(node0.isBreak());
1340:       assertFalse(node0.isInstanceOf());
1341:       assertFalse(node0.isThis());
1342:       assertFalse(node0.isHook());
1343:       assertFalse(node0.isComma());
1344:       assertFalse(node0.isCase());
1345:       assertFalse(node0.isAnd());
1346:       assertFalse(node0.isString());
1347:       assertFalse(node0.isScript());
1348:       assertFalse(node0.isSwitch());
1349:       assertTrue(node0.isNumber());
1350:       assertFalse(node0.isGetProp());
1351:       assertFalse(node0.isObjectLit());
1352:       assertEquals((-1), node0.getCharno());
1353:       assertFalse(node0.isGetterDef());
1354:       assertFalse(node0.isNot());
1355:       assertFalse(node0.isFor());
1356:       assertFalse(node0.isCast());
1357:       assertFalse(node0.isIf());
1358:       assertFalse(node0.hasOneChild());
1359:       assertFalse(node0.isTry());
1360:       assertFalse(node0.isRegExp());
1361:       assertFalse(node0.hasMoreThanOneChild());
1362:       assertFalse(node0.isFunction());
1363:       assertFalse(node0.isWith());
1364:       assertFalse(node0.isCatch());
1365:       assertFalse(node0.isInc());
1366:       assertEquals((-1), node0.getLineno());
1367:       assertFalse(node0.isNE());
1368:       assertFalse(node0.isIn());
1369:       assertFalse(node1.isCase());
1370:       assertFalse(node1.isString());
1371:       assertFalse(node1.isIn());
1372:       assertFalse(node1.isInc());
1373:       assertFalse(node1.isFalse());
1374:       assertFalse(node1.isThrow());
1375:       assertEquals(48, node1.getCharno());
1376:       assertFalse(node1.isGetterDef());
1377:       assertFalse(node1.isArrayLit());
1378:       assertFalse(node1.isSwitch());
1379:       assertFalse(node1.isWith());
1380:       assertFalse(node1.isCatch());
1381:       assertFalse(node1.isRegExp());
1382:       assertFalse(node1.isFunction());
1383:       assertEquals(48, node1.getSourcePosition());
1384:       assertFalse(node1.isTry());
1385:       assertEquals(15, node1.getType());
1386:       assertFalse(node1.isScript());
1387:       assertFalse(node1.isSetterDef());
1388:       assertFalse(node1.hasOneChild());
1389:       assertFalse(node1.isFor());
1390:       assertFalse(node1.isIf());
1391:       assertFalse(node1.isNE());
1392:       assertFalse(node1.isThis());
1393:       assertFalse(node1.isHook());
1394:       assertFalse(node1.isInstanceOf());
1395:       assertFalse(node1.isDo());
1396:       assertFalse(node1.isContinue());
1397:       assertFalse(node1.isWhile());
1398:       assertFalse(node1.hasMoreThanOneChild());
1399:       assertFalse(node1.isOr());
1400:       assertFalse(node1.isAdd());
1401:       assertFalse(node1.isLabel());
1402:       assertFalse(node1.isAssignAdd());
1403:       assertFalse(node1.isReturn());
1404:       assertFalse(node1.isBlock());
1405:       assertFalse(node1.isNew());
1406:       assertFalse(node1.isLabelName());
1407:       assertFalse(node1.isCast());
1408:       assertFalse(node1.isStringKey());
1409:       assertFalse(node1.isVar());
1410:       assertFalse(node1.isNumber());
1411:       assertEquals(0, node1.getLineno());
1412:       assertFalse(node1.isParamList());
1413:       assertFalse(node1.isNot());
1414:       assertFalse(node1.isAnd());
1415:       assertFalse(node1.isDebugger());
1416:       assertFalse(node1.isObjectLit());
1417:       assertEquals(0, node1.getChildCount());
1418:       assertFalse(node1.isGetProp());
1419:       assertFalse(node1.isDefaultCase());
1420:       assertFalse(node1.isAssign());
1421:       assertFalse(node1.isEmpty());
1422:       assertFalse(node1.isName());
1423:       assertFalse(node1.isGetElem());
1424:       assertFalse(node1.isCall());
1425:       assertFalse(node1.isTypeOf());
1426:       assertFalse(node1.isNull());
1427:       assertFalse(node1.hasChildren());
1428:       assertFalse(node1.isComma());
1429:       assertFalse(node1.isDec());
1430:       assertFalse(node1.isExprResult());
1431:       assertFalse(node1.isTrue());
1432:       assertFalse(node1.isBreak());
1433:       assertFalse(node1.isVoid());
1434:       assertFalse(node1.isDelProp());
1435:       assertFalse(node2.isInc());
1436:       assertEquals((-1), node2.getCharno());
1437:       assertFalse(node2.isSwitch());
1438:       assertFalse(node2.isString());
1439:       assertFalse(node2.isHook());
1440:       assertFalse(node2.isFalse());
1441:       assertFalse(node2.isBreak());
1442:       assertFalse(node2.isNE());
1443:       assertFalse(node2.isIn());
1444:       assertFalse(node2.isEmpty());
1445:       assertFalse(node2.isThrow());
1446:       assertFalse(node2.isExprResult());
1447:       assertFalse(node2.isDebugger());
1448:       assertFalse(node2.isVoid());
1449:       assertFalse(node2.isFunction());
1450:       assertFalse(node2.isTrue());
1451:       assertFalse(node2.isNot());
1452:       assertFalse(node2.isAnd());
1453:       assertFalse(node2.isGetElem());
1454:       assertFalse(node2.isCast());
1455:       assertFalse(node2.isDelProp());
1456:       assertFalse(node2.isGetProp());
1457:       assertFalse(node2.isReturn());
1458:       assertFalse(node2.hasChildren());
1459:       assertEquals((-1), node2.getSourcePosition());
1460:       assertFalse(node2.isTypeOf());
1461:       assertFalse(node2.isComma());
1462:       assertFalse(node2.isAssign());
1463:       assertFalse(node2.isDec());
1464:       assertFalse(node2.isObjectLit());
1465:       assertFalse(node2.isWhile());
1466:       assertTrue(node2.isNumber());
1467:       assertFalse(node2.isAdd());
1468:       assertFalse(node2.isBlock());
1469:       assertEquals(39, node2.getType());
1470:       assertFalse(node2.isContinue());
1471:       assertFalse(node2.isCall());
1472:       assertFalse(node2.hasMoreThanOneChild());
1473:       assertFalse(node2.isStringKey());
1474:       assertEquals((-1), node2.getLineno());
1475:       assertFalse(node2.isName());
1476:       assertFalse(node2.isSetterDef());
1477:       assertFalse(node2.isNull());
1478:       assertFalse(node2.isLabel());
1479:       assertEquals(0, node2.getChildCount());
1480:       assertFalse(node2.isOr());
1481:       assertFalse(node2.isVar());
1482:       assertFalse(node2.isDefaultCase());
1483:       assertFalse(node2.isAssignAdd());
1484:       assertFalse(node2.isNew());
1485:       assertFalse(node2.isDo());
1486:       assertFalse(node2.isScript());
1487:       assertFalse(node2.isWith());
1488:       assertFalse(node2.isRegExp());
1489:       assertFalse(node2.isInstanceOf());
1490:       assertFalse(node2.isCatch());
1491:       assertFalse(node2.isIf());
1492:       assertFalse(node2.isArrayLit());
1493:       assertFalse(node2.isLabelName());
1494:       assertFalse(node2.isParamList());
1495:       assertFalse(node2.isThis());
1496:       assertFalse(node2.isGetterDef());
1497:       assertFalse(node2.isFor());
1498:       assertFalse(node2.isTry());
1499:       assertFalse(node2.isCase());
1500:       assertFalse(node2.hasOneChild());
1501:       assertFalse(node3.isLabel());
1502:       assertFalse(node3.isAssignAdd());
1503:       assertFalse(node3.isReturn());
1504:       assertEquals((-1), node3.getSourcePosition());
1505:       assertFalse(node3.isTypeOf());
1506:       assertFalse(node3.hasChildren());
1507:       assertFalse(node3.hasMoreThanOneChild());
1508:       assertFalse(node3.isAssign());
1509:       assertFalse(node3.isOr());
1510:       assertFalse(node3.isDec());
1511:       assertFalse(node3.isGetElem());
1512:       assertFalse(node3.isContinue());
1513:       assertFalse(node3.isCast());
1514:       assertEquals((-1), node3.getLineno());
1515:       assertFalse(node3.isLabelName());
1516:       assertFalse(node3.isAdd());
1517:       assertFalse(node3.isNew());
1518:       assertFalse(node3.isVar());
1519:       assertFalse(node3.isSetterDef());
1520:       assertFalse(node3.isDo());
1521:       assertFalse(node3.isThis());
1522:       assertFalse(node3.isParamList());
1523:       assertFalse(node3.isInstanceOf());
1524:       assertEquals(0, node3.getChildCount());
1525:       assertFalse(node3.isWith());
1526:       assertFalse(node3.isCatch());
1527:       assertFalse(node3.isStringKey());
1528:       assertFalse(node3.isBlock());
1529:       assertEquals((-1), node3.getCharno());
1530:       assertFalse(node3.isRegExp());
1531:       assertFalse(node3.isHook());
1532:       assertFalse(node3.isCase());
1533:       assertFalse(node3.isFor());
1534:       assertEquals(39, node3.getType());
1535:       assertFalse(node3.isScript());
1536:       assertFalse(node3.hasOneChild());
1537:       assertFalse(node3.isTry());
1538:       assertFalse(node3.isNE());
1539:       assertFalse(node3.isIn());
1540:       assertFalse(node3.isGetterDef());
1541:       assertFalse(node3.isArrayLit());
1542:       assertFalse(node3.isIf());
1543:       assertFalse(node3.isSwitch());
1544:       assertFalse(node3.isDelProp());
1545:       assertFalse(node3.isInc());
1546:       assertFalse(node3.isTrue());
1547:       assertFalse(node3.isFunction());
1548:       assertFalse(node3.isThrow());
1549:       assertFalse(node3.isEmpty());
1550:       assertFalse(node3.isDefaultCase());
1551:       assertFalse(node3.isGetProp());
1552:       assertFalse(node3.isNull());
1553:       assertFalse(node3.isComma());
1554:       assertFalse(node3.isObjectLit());
1555:       assertFalse(node3.isName());
1556:       assertFalse(node3.isFalse());
1557:       assertFalse(node3.isAnd());
1558:       assertFalse(node3.isCall());
1559:       assertFalse(node3.isBreak());
1560:       assertFalse(node3.isVoid());
1561:       assertFalse(node3.isExprResult());
1562:       assertFalse(node3.isDebugger());
1563:       assertFalse(node3.isNot());
1564:       assertFalse(node3.isWhile());
1565:       assertFalse(node3.isString());
1566:       assertTrue(node3.isNumber());
1567:       
1568:       node3.isBreak();
1569:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1570:       assertEquals(29, Node.JSDOC_INFO_PROP);
1571:       assertEquals(56, Node.CHANGE_TIME);
1572:       assertEquals(37, Node.OPT_ARG_NAME);
1573:       assertEquals(47, Node.IS_DISPATCHER);
1574:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1575:       assertEquals(2, Node.POST_FLAG);
1576:       assertEquals(1, Node.DECR_FLAG);
1577:       assertEquals(12, Node.COLUMN_BITS);
1578:       assertEquals(32, Node.INCRDECR_PROP);
1579:       assertEquals(46, Node.IS_NAMESPACE);
1580:       assertEquals(43, Node.IS_CONSTANT_NAME);
1581:       assertEquals(54, Node.SLASH_V);
1582:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1583:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1584:       assertEquals(50, Node.FREE_CALL);
1585:       assertEquals(40, Node.ORIGINALNAME_PROP);
1586:       assertEquals(57, Node.REFLECTED_OBJECT);
1587:       assertEquals(48, Node.DIRECTIVES);
1588:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1589:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1591:       assertEquals(30, Node.VAR_ARGS_NAME);
1592:       assertEquals(4095, Node.COLUMN_MASK);
1593:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1594:       assertEquals(55, Node.INFERRED_FUNCTION);
1595:       assertEquals(57, Node.LAST_PROP);
1596:       assertEquals(49, Node.DIRECT_EVAL);
1597:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1598:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1599:       assertEquals(39, Node.EMPTY_BLOCK);
1600:       assertEquals(53, Node.INPUT_ID);
1601:       assertEquals(36, Node.QUOTED_PROP);
1602:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1603:       assertEquals(52, Node.LENGTH);
1604:       assertEquals(8, Node.FLAG_NO_THROWS);
1605:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1606:       assertEquals(55, Node.INFERRED_FUNCTION);
1607:       assertEquals(36, Node.QUOTED_PROP);
1608:       assertEquals(4095, Node.COLUMN_MASK);
1609:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1610:       assertEquals(39, Node.EMPTY_BLOCK);
1611:       assertEquals(53, Node.INPUT_ID);
1612:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1613:       assertEquals(40, Node.ORIGINALNAME_PROP);
1614:       assertEquals(47, Node.IS_DISPATCHER);
1615:       assertEquals(2, Node.POST_FLAG);
1616:       assertEquals(50, Node.FREE_CALL);
1617:       assertEquals(54, Node.SLASH_V);
1618:       assertEquals(46, Node.IS_NAMESPACE);
1619:       assertEquals(43, Node.IS_CONSTANT_NAME);
1620:       assertEquals(1, Node.DECR_FLAG);
1621:       assertEquals(12, Node.COLUMN_BITS);
1622:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1623:       assertEquals(30, Node.VAR_ARGS_NAME);
1624:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1625:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1626:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1627:       assertEquals(57, Node.LAST_PROP);
1628:       assertEquals(32, Node.INCRDECR_PROP);
1629:       assertEquals(29, Node.JSDOC_INFO_PROP);
1630:       assertEquals(57, Node.REFLECTED_OBJECT);
1631:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1632:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1633:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1634:       assertEquals(52, Node.LENGTH);
1635:       assertEquals(8, Node.FLAG_NO_THROWS);
1636:       assertEquals(48, Node.DIRECTIVES);
1637:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1638:       assertEquals(37, Node.OPT_ARG_NAME);
1639:       assertEquals(56, Node.CHANGE_TIME);
1640:       assertEquals(49, Node.DIRECT_EVAL);
1641:       assertEquals(43, Node.IS_CONSTANT_NAME);
1642:       assertEquals(36, Node.QUOTED_PROP);
1643:       assertEquals(53, Node.INPUT_ID);
1644:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1645:       assertEquals(4095, Node.COLUMN_MASK);
1646:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1647:       assertEquals(48, Node.DIRECTIVES);
1648:       assertEquals(2, Node.POST_FLAG);
1649:       assertEquals(56, Node.CHANGE_TIME);
1650:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1651:       assertEquals(39, Node.EMPTY_BLOCK);
1652:       assertEquals(47, Node.IS_DISPATCHER);
1653:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1654:       assertEquals(29, Node.JSDOC_INFO_PROP);
1655:       assertEquals(8, Node.FLAG_NO_THROWS);
1656:       assertEquals(55, Node.INFERRED_FUNCTION);
1657:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1658:       assertEquals(57, Node.LAST_PROP);
1659:       assertEquals(54, Node.SLASH_V);
1660:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1661:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1662:       assertEquals(30, Node.VAR_ARGS_NAME);
1663:       assertEquals(52, Node.LENGTH);
1664:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1665:       assertEquals(46, Node.IS_NAMESPACE);
1666:       assertEquals(40, Node.ORIGINALNAME_PROP);
1667:       assertEquals(57, Node.REFLECTED_OBJECT);
1668:       assertEquals(49, Node.DIRECT_EVAL);
1669:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1670:       assertEquals(37, Node.OPT_ARG_NAME);
1671:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1672:       assertEquals(50, Node.FREE_CALL);
1673:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1674:       assertEquals(12, Node.COLUMN_BITS);
1675:       assertEquals(1, Node.DECR_FLAG);
1676:       assertEquals(32, Node.INCRDECR_PROP);
1677:       assertEquals(48, Node.DIRECTIVES);
1678:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1679:       assertEquals(39, Node.EMPTY_BLOCK);
1680:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1681:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1682:       assertEquals(50, Node.FREE_CALL);
1683:       assertEquals(4095, Node.COLUMN_MASK);
1684:       assertEquals(8, Node.FLAG_NO_THROWS);
1685:       assertEquals(40, Node.ORIGINALNAME_PROP);
1686:       assertEquals(57, Node.REFLECTED_OBJECT);
1687:       assertEquals(43, Node.IS_CONSTANT_NAME);
1688:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1689:       assertEquals(36, Node.QUOTED_PROP);
1690:       assertEquals(53, Node.INPUT_ID);
1691:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1692:       assertEquals(30, Node.VAR_ARGS_NAME);
1693:       assertEquals(52, Node.LENGTH);
1694:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1695:       assertEquals(55, Node.INFERRED_FUNCTION);
1696:       assertEquals(29, Node.JSDOC_INFO_PROP);
1697:       assertEquals(57, Node.LAST_PROP);
1698:       assertEquals(37, Node.OPT_ARG_NAME);
1699:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1700:       assertEquals(47, Node.IS_DISPATCHER);
1701:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1702:       assertEquals(2, Node.POST_FLAG);
1703:       assertEquals(46, Node.IS_NAMESPACE);
1704:       assertEquals(56, Node.CHANGE_TIME);
1705:       assertEquals(49, Node.DIRECT_EVAL);
1706:       assertEquals(54, Node.SLASH_V);
1707:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1708:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1709:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1710:       assertEquals(1, Node.DECR_FLAG);
1711:       assertEquals(12, Node.COLUMN_BITS);
1712:       assertEquals(32, Node.INCRDECR_PROP);
1713:       assertFalse(node0.isName());
1714:       assertFalse(node0.isCall());
1715:       assertFalse(node0.isStringKey());
1716:       assertFalse(node0.isSetterDef());
1717:       assertFalse(node0.isBlock());
1718:       assertFalse(node0.isVar());
1719:       assertEquals(0, node0.getChildCount());
1720:       assertEquals(39, node0.getType());
1721:       assertFalse(node0.isWhile());
1722:       assertFalse(node0.isContinue());
1723:       assertFalse(node0.isParamList());
1724:       assertEquals((-1), node0.getSourcePosition());
1725:       assertFalse(node0.isDebugger());
1726:       assertFalse(node0.isEmpty());
1727:       assertFalse(node0.isGetElem());
1728:       assertFalse(node0.isArrayLit());
1729:       assertFalse(node0.isDelProp());
1730:       assertFalse(node0.isLabelName());
1731:       assertFalse(node0.isLabel());
1732:       assertFalse(node0.isReturn());
1733:       assertFalse(node0.isAssignAdd());
1734:       assertFalse(node0.isExprResult());
1735:       assertFalse(node0.isTypeOf());
1736:       assertFalse(node0.hasChildren());
1737:       assertFalse(node0.isAssign());
1738:       assertFalse(node0.isDec());
1739:       assertFalse(node0.isDefaultCase());
1740:       assertFalse(node0.isVoid());
1741:       assertFalse(node0.isDo());
1742:       assertFalse(node0.isAdd());
1743:       assertFalse(node0.isNew());
1744:       assertFalse(node0.isTrue());
1745:       assertFalse(node0.isNull());
1746:       assertFalse(node0.isOr());
1747:       assertFalse(node0.isFalse());
1748:       assertFalse(node0.isThrow());
1749:       assertFalse(node0.isBreak());
1750:       assertFalse(node0.isInstanceOf());
1751:       assertFalse(node0.isThis());
1752:       assertFalse(node0.isHook());
1753:       assertFalse(node0.isComma());
1754:       assertFalse(node0.isCase());
1755:       assertFalse(node0.isAnd());
1756:       assertFalse(node0.isString());
1757:       assertFalse(node0.isScript());
1758:       assertFalse(node0.isSwitch());
1759:       assertTrue(node0.isNumber());
1760:       assertFalse(node0.isGetProp());
1761:       assertFalse(node0.isObjectLit());
1762:       assertEquals((-1), node0.getCharno());
1763:       assertFalse(node0.isGetterDef());
1764:       assertFalse(node0.isNot());
1765:       assertFalse(node0.isFor());
1766:       assertFalse(node0.isCast());
1767:       assertFalse(node0.isIf());
1768:       assertFalse(node0.hasOneChild());
1769:       assertFalse(node0.isTry());
1770:       assertFalse(node0.isRegExp());
1771:       assertFalse(node0.hasMoreThanOneChild());
1772:       assertFalse(node0.isFunction());
1773:       assertFalse(node0.isWith());
1774:       assertFalse(node0.isCatch());
1775:       assertFalse(node0.isInc());
1776:       assertEquals((-1), node0.getLineno());
1777:       assertFalse(node0.isNE());
1778:       assertFalse(node0.isIn());
1779:       assertFalse(node1.isCase());
1780:       assertFalse(node1.isString());
1781:       assertFalse(node1.isIn());
1782:       assertFalse(node1.isInc());
1783:       assertFalse(node1.isFalse());
1784:       assertFalse(node1.isThrow());
1785:       assertEquals(48, node1.getCharno());
1786:       assertFalse(node1.isGetterDef());
1787:       assertFalse(node1.isArrayLit());
1788:       assertFalse(node1.isSwitch());
1789:       assertFalse(node1.isWith());
1790:       assertFalse(node1.isCatch());
1791:       assertFalse(node1.isRegExp());
1792:       assertFalse(node1.isFunction());
1793:       assertEquals(48, node1.getSourcePosition());
1794:       assertFalse(node1.isTry());
1795:       assertEquals(15, node1.getType());
1796:       assertFalse(node1.isScript());
1797:       assertFalse(node1.isSetterDef());
1798:       assertFalse(node1.hasOneChild());
1799:       assertFalse(node1.isFor());
1800:       assertFalse(node1.isIf());
1801:       assertFalse(node1.isNE());
1802:       assertFalse(node1.isThis());
1803:       assertFalse(node1.isHook());
1804:       assertFalse(node1.isInstanceOf());
1805:       assertFalse(node1.isDo());
1806:       assertFalse(node1.isContinue());
1807:       assertFalse(node1.isWhile());
1808:       assertFalse(node1.hasMoreThanOneChild());
1809:       assertFalse(node1.isOr());
1810:       assertFalse(node1.isAdd());
1811:       assertFalse(node1.isLabel());
1812:       assertFalse(node1.isAssignAdd());
1813:       assertFalse(node1.isReturn());
1814:       assertFalse(node1.isBlock());
1815:       assertFalse(node1.isNew());
1816:       assertFalse(node1.isLabelName());
1817:       assertFalse(node1.isCast());
1818:       assertFalse(node1.isStringKey());
1819:       assertFalse(node1.isVar());
1820:       assertFalse(node1.isNumber());
1821:       assertEquals(0, node1.getLineno());
1822:       assertFalse(node1.isParamList());
1823:       assertFalse(node1.isNot());
1824:       assertFalse(node1.isAnd());
1825:       assertFalse(node1.isDebugger());
1826:       assertFalse(node1.isObjectLit());
1827:       assertEquals(0, node1.getChildCount());
1828:       assertFalse(node1.isGetProp());
1829:       assertFalse(node1.isDefaultCase());
1830:       assertFalse(node1.isAssign());
1831:       assertFalse(node1.isEmpty());
1832:       assertFalse(node1.isName());
1833:       assertFalse(node1.isGetElem());
1834:       assertFalse(node1.isCall());
1835:       assertFalse(node1.isTypeOf());
1836:       assertFalse(node1.isNull());
1837:       assertFalse(node1.hasChildren());
1838:       assertFalse(node1.isComma());
1839:       assertFalse(node1.isDec());
1840:       assertFalse(node1.isExprResult());
1841:       assertFalse(node1.isTrue());
1842:       assertFalse(node1.isBreak());
1843:       assertFalse(node1.isVoid());
1844:       assertFalse(node1.isDelProp());
1845:       assertFalse(node2.isInc());
1846:       assertEquals((-1), node2.getCharno());
1847:       assertFalse(node2.isSwitch());
1848:       assertFalse(node2.isString());
1849:       assertFalse(node2.isHook());
1850:       assertFalse(node2.isFalse());
1851:       assertFalse(node2.isBreak());
1852:       assertFalse(node2.isNE());
1853:       assertFalse(node2.isIn());
1854:       assertFalse(node2.isEmpty());
1855:       assertFalse(node2.isThrow());
1856:       assertFalse(node2.isExprResult());
1857:       assertFalse(node2.isDebugger());
1858:       assertFalse(node2.isVoid());
1859:       assertFalse(node2.isFunction());
1860:       assertFalse(node2.isTrue());
1861:       assertFalse(node2.isNot());
1862:       assertFalse(node2.isAnd());
1863:       assertFalse(node2.isGetElem());
1864:       assertFalse(node2.isCast());
1865:       assertFalse(node2.isDelProp());
1866:       assertFalse(node2.isGetProp());
1867:       assertFalse(node2.isReturn());
1868:       assertFalse(node2.hasChildren());
1869:       assertEquals((-1), node2.getSourcePosition());
1870:       assertFalse(node2.isTypeOf());
1871:       assertFalse(node2.isComma());
1872:       assertFalse(node2.isAssign());
1873:       assertFalse(node2.isDec());
1874:       assertFalse(node2.isObjectLit());
1875:       assertFalse(node2.isWhile());
1876:       assertTrue(node2.isNumber());
1877:       assertFalse(node2.isAdd());
1878:       assertFalse(node2.isBlock());
1879:       assertEquals(39, node2.getType());
1880:       assertFalse(node2.isContinue());
1881:       assertFalse(node2.isCall());
1882:       assertFalse(node2.hasMoreThanOneChild());
1883:       assertFalse(node2.isStringKey());
1884:       assertEquals((-1), node2.getLineno());
1885:       assertFalse(node2.isName());
1886:       assertFalse(node2.isSetterDef());
1887:       assertFalse(node2.isNull());
1888:       assertFalse(node2.isLabel());
1889:       assertEquals(0, node2.getChildCount());
1890:       assertFalse(node2.isOr());
1891:       assertFalse(node2.isVar());
1892:       assertFalse(node2.isDefaultCase());
1893:       assertFalse(node2.isAssignAdd());
1894:       assertFalse(node2.isNew());
1895:       assertFalse(node2.isDo());
1896:       assertFalse(node2.isScript());
1897:       assertFalse(node2.isWith());
1898:       assertFalse(node2.isRegExp());
1899:       assertFalse(node2.isInstanceOf());
1900:       assertFalse(node2.isCatch());
1901:       assertFalse(node2.isIf());
1902:       assertFalse(node2.isArrayLit());
1903:       assertFalse(node2.isLabelName());
1904:       assertFalse(node2.isParamList());
1905:       assertFalse(node2.isThis());
1906:       assertFalse(node2.isGetterDef());
1907:       assertFalse(node2.isFor());
1908:       assertFalse(node2.isTry());
1909:       assertFalse(node2.isCase());
1910:       assertFalse(node2.hasOneChild());
1911:       assertFalse(node3.isLabel());
1912:       assertFalse(node3.isAssignAdd());
1913:       assertFalse(node3.isReturn());
1914:       assertEquals((-1), node3.getSourcePosition());
1915:       assertFalse(node3.isTypeOf());
1916:       assertFalse(node3.hasChildren());
1917:       assertFalse(node3.hasMoreThanOneChild());
1918:       assertFalse(node3.isAssign());
1919:       assertFalse(node3.isOr());
1920:       assertFalse(node3.isDec());
1921:       assertFalse(node3.isGetElem());
1922:       assertFalse(node3.isContinue());
1923:       assertFalse(node3.isCast());
1924:       assertEquals((-1), node3.getLineno());
1925:       assertFalse(node3.isLabelName());
1926:       assertFalse(node3.isAdd());
1927:       assertFalse(node3.isNew());
1928:       assertFalse(node3.isVar());
1929:       assertFalse(node3.isSetterDef());
1930:       assertFalse(node3.isDo());
1931:       assertFalse(node3.isThis());
1932:       assertFalse(node3.isParamList());
1933:       assertFalse(node3.isInstanceOf());
1934:       assertEquals(0, node3.getChildCount());
1935:       assertFalse(node3.isWith());
1936:       assertFalse(node3.isCatch());
1937:       assertFalse(node3.isStringKey());
1938:       assertFalse(node3.isBlock());
1939:       assertEquals((-1), node3.getCharno());
1940:       assertFalse(node3.isRegExp());
1941:       assertFalse(node3.isHook());
1942:       assertFalse(node3.isCase());
1943:       assertFalse(node3.isFor());
1944:       assertEquals(39, node3.getType());
1945:       assertFalse(node3.isScript());
1946:       assertFalse(node3.hasOneChild());
1947:       assertFalse(node3.isTry());
1948:       assertFalse(node3.isNE());
1949:       assertFalse(node3.isIn());
1950:       assertFalse(node3.isGetterDef());
1951:       assertFalse(node3.isArrayLit());
1952:       assertFalse(node3.isIf());
1953:       assertFalse(node3.isSwitch());
1954:       assertFalse(node3.isDelProp());
1955:       assertFalse(node3.isInc());
1956:       assertFalse(node3.isTrue());
1957:       assertFalse(node3.isFunction());
1958:       assertFalse(node3.isThrow());
1959:       assertFalse(node3.isEmpty());
1960:       assertFalse(node3.isDefaultCase());
1961:       assertFalse(node3.isGetProp());
1962:       assertFalse(node3.isNull());
1963:       assertFalse(node3.isComma());
1964:       assertFalse(node3.isObjectLit());
1965:       assertFalse(node3.isName());
1966:       assertFalse(node3.isFalse());
1967:       assertFalse(node3.isAnd());
1968:       assertFalse(node3.isCall());
1969:       assertFalse(node3.isBreak());
1970:       assertFalse(node3.isVoid());
1971:       assertFalse(node3.isExprResult());
1972:       assertFalse(node3.isDebugger());
1973:       assertFalse(node3.isNot());
1974:       assertFalse(node3.isWhile());
1975:       assertFalse(node3.isString());
1976:       assertTrue(node3.isNumber());
1977:       
1978:       node0.isCatch();
1979:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1980:       assertEquals(29, Node.JSDOC_INFO_PROP);
1981:       assertEquals(56, Node.CHANGE_TIME);
1982:       assertEquals(37, Node.OPT_ARG_NAME);
1983:       assertEquals(47, Node.IS_DISPATCHER);
1984:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1985:       assertEquals(2, Node.POST_FLAG);
1986:       assertEquals(1, Node.DECR_FLAG);
1987:       assertEquals(12, Node.COLUMN_BITS);
1988:       assertEquals(32, Node.INCRDECR_PROP);
1989:       assertEquals(46, Node.IS_NAMESPACE);
1990:       assertEquals(43, Node.IS_CONSTANT_NAME);
1991:       assertEquals(54, Node.SLASH_V);
1992:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1993:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1994:       assertEquals(50, Node.FREE_CALL);
1995:       assertEquals(40, Node.ORIGINALNAME_PROP);
1996:       assertEquals(57, Node.REFLECTED_OBJECT);
1997:       assertEquals(48, Node.DIRECTIVES);
1998:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1999:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2000:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2001:       assertEquals(30, Node.VAR_ARGS_NAME);
2002:       assertEquals(4095, Node.COLUMN_MASK);
2003:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2004:       assertEquals(55, Node.INFERRED_FUNCTION);
2005:       assertEquals(57, Node.LAST_PROP);
2006:       assertEquals(49, Node.DIRECT_EVAL);
2007:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2008:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2009:       assertEquals(39, Node.EMPTY_BLOCK);
2010:       assertEquals(53, Node.INPUT_ID);
2011:       assertEquals(36, Node.QUOTED_PROP);
2012:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2013:       assertEquals(52, Node.LENGTH);
2014:       assertEquals(8, Node.FLAG_NO_THROWS);
2015:       assertFalse(node0.isName());
2016:       assertFalse(node0.isCall());
2017:       assertFalse(node0.isStringKey());
2018:       assertFalse(node0.isSetterDef());
2019:       assertFalse(node0.isBlock());
2020:       assertFalse(node0.isVar());
2021:       assertEquals(0, node0.getChildCount());
2022:       assertEquals(39, node0.getType());
2023:       assertFalse(node0.isWhile());
2024:       assertFalse(node0.isContinue());
2025:       assertFalse(node0.isParamList());
2026:       assertEquals((-1), node0.getSourcePosition());
2027:       assertFalse(node0.isDebugger());
2028:       assertFalse(node0.isEmpty());
2029:       assertFalse(node0.isGetElem());
2030:       assertFalse(node0.isArrayLit());
2031:       assertFalse(node0.isDelProp());
2032:       assertFalse(node0.isLabelName());
2033:       assertFalse(node0.isLabel());
2034:       assertFalse(node0.isReturn());
2035:       assertFalse(node0.isAssignAdd());
2036:       assertFalse(node0.isExprResult());
2037:       assertFalse(node0.isTypeOf());
2038:       assertFalse(node0.hasChildren());
2039:       assertFalse(node0.isAssign());
2040:       assertFalse(node0.isDec());
2041:       assertFalse(node0.isDefaultCase());
2042:       assertFalse(node0.isVoid());
2043:       assertFalse(node0.isDo());
2044:       assertFalse(node0.isAdd());
2045:       assertFalse(node0.isNew());
2046:       assertFalse(node0.isTrue());
2047:       assertFalse(node0.isNull());
2048:       assertFalse(node0.isOr());
2049:       assertFalse(node0.isFalse());
2050:       assertFalse(node0.isThrow());
2051:       assertFalse(node0.isBreak());
2052:       assertFalse(node0.isInstanceOf());
2053:       assertFalse(node0.isThis());
2054:       assertFalse(node0.isHook());
2055:       assertFalse(node0.isComma());
2056:       assertFalse(node0.isCase());
2057:       assertFalse(node0.isAnd());
2058:       assertFalse(node0.isString());
2059:       assertFalse(node0.isScript());
2060:       assertFalse(node0.isSwitch());
2061:       assertTrue(node0.isNumber());
2062:       assertFalse(node0.isGetProp());
2063:       assertFalse(node0.isObjectLit());
2064:       assertEquals((-1), node0.getCharno());
2065:       assertFalse(node0.isGetterDef());
2066:       assertFalse(node0.isNot());
2067:       assertFalse(node0.isFor());
2068:       assertFalse(node0.isCast());
2069:       assertFalse(node0.isIf());
2070:       assertFalse(node0.hasOneChild());
2071:       assertFalse(node0.isTry());
2072:       assertFalse(node0.isRegExp());
2073:       assertFalse(node0.hasMoreThanOneChild());
2074:       assertFalse(node0.isFunction());
2075:       assertFalse(node0.isWith());
2076:       assertFalse(node0.isCatch());
2077:       assertFalse(node0.isInc());
2078:       assertEquals((-1), node0.getLineno());
2079:       assertFalse(node0.isNE());
2080:       assertFalse(node0.isIn());
2081:       
2082:       Node node4 = Node.newNumber(0.0, 63, 12);
2083:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2084:       assertEquals(50, Node.FREE_CALL);
2085:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2086:       assertEquals(40, Node.ORIGINALNAME_PROP);
2087:       assertEquals(39, Node.EMPTY_BLOCK);
2088:       assertEquals(48, Node.DIRECTIVES);
2089:       assertEquals(52, Node.LENGTH);
2090:       assertEquals(54, Node.SLASH_V);
2091:       assertEquals(8, Node.FLAG_NO_THROWS);
2092:       assertEquals(57, Node.REFLECTED_OBJECT);
2093:       assertEquals(30, Node.VAR_ARGS_NAME);
2094:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2095:       assertEquals(57, Node.LAST_PROP);
2096:       assertEquals(55, Node.INFERRED_FUNCTION);
2097:       assertEquals(43, Node.IS_CONSTANT_NAME);
2098:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2099:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2100:       assertEquals(2, Node.POST_FLAG);
2101:       assertEquals(47, Node.IS_DISPATCHER);
2102:       assertEquals(29, Node.JSDOC_INFO_PROP);
2103:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2104:       assertEquals(56, Node.CHANGE_TIME);
2105:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2106:       assertEquals(37, Node.OPT_ARG_NAME);
2107:       assertEquals(53, Node.INPUT_ID);
2108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2109:       assertEquals(46, Node.IS_NAMESPACE);
2110:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2111:       assertEquals(36, Node.QUOTED_PROP);
2112:       assertEquals(49, Node.DIRECT_EVAL);
2113:       assertEquals(32, Node.INCRDECR_PROP);
2114:       assertEquals(1, Node.DECR_FLAG);
2115:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2117:       assertEquals(12, Node.COLUMN_BITS);
2118:       assertEquals(4095, Node.COLUMN_MASK);
2119:       assertFalse(node4.isAssign());
2120:       assertFalse(node4.isDec());
2121:       assertFalse(node4.isLabelName());
2122:       assertFalse(node4.isTypeOf());
2123:       assertFalse(node4.isCast());
2124:       assertFalse(node4.isGetElem());
2125:       assertFalse(node4.isOr());
2126:       assertFalse(node4.isDo());
2127:       assertFalse(node4.isContinue());
2128:       assertFalse(node4.isAdd());
2129:       assertFalse(node4.isNew());
2130:       assertFalse(node4.isAssignAdd());
2131:       assertFalse(node4.isLabel());
2132:       assertFalse(node4.isVar());
2133:       assertFalse(node4.isSetterDef());
2134:       assertFalse(node4.isParamList());
2135:       assertFalse(node4.isStringKey());
2136:       assertFalse(node4.isRegExp());
2137:       assertFalse(node4.isWith());
2138:       assertFalse(node4.isCatch());
2139:       assertFalse(node4.isScript());
2140:       assertFalse(node4.isCase());
2141:       assertFalse(node4.isInstanceOf());
2142:       assertFalse(node4.hasOneChild());
2143:       assertFalse(node4.isTry());
2144:       assertEquals(12, node4.getCharno());
2145:       assertFalse(node4.hasMoreThanOneChild());
2146:       assertFalse(node4.isBlock());
2147:       assertFalse(node4.isFor());
2148:       assertFalse(node4.isThis());
2149:       assertEquals(39, node4.getType());
2150:       assertFalse(node4.isHook());
2151:       assertFalse(node4.isDelProp());
2152:       assertFalse(node4.isGetterDef());
2153:       assertFalse(node4.isIf());
2154:       assertFalse(node4.isEmpty());
2155:       assertFalse(node4.isArrayLit());
2156:       assertEquals(63, node4.getLineno());
2157:       assertFalse(node4.isIn());
2158:       assertFalse(node4.isDebugger());
2159:       assertFalse(node4.isTrue());
2160:       assertFalse(node4.isNE());
2161:       assertFalse(node4.isDefaultCase());
2162:       assertFalse(node4.isSwitch());
2163:       assertFalse(node4.isInc());
2164:       assertEquals(0, node4.getChildCount());
2165:       assertFalse(node4.isFunction());
2166:       assertFalse(node4.isThrow());
2167:       assertFalse(node4.isName());
2168:       assertFalse(node4.isFalse());
2169:       assertFalse(node4.isCall());
2170:       assertFalse(node4.isBreak());
2171:       assertFalse(node4.isGetProp());
2172:       assertFalse(node4.isAnd());
2173:       assertFalse(node4.isObjectLit());
2174:       assertFalse(node4.isNull());
2175:       assertFalse(node4.isWhile());
2176:       assertFalse(node4.isString());
2177:       assertFalse(node4.isNot());
2178:       assertFalse(node4.isExprResult());
2179:       assertFalse(node4.isVoid());
2180:       assertTrue(node4.isNumber());
2181:       assertEquals(258060, node4.getSourcePosition());
2182:       assertFalse(node4.isComma());
2183:       assertFalse(node4.isReturn());
2184:       assertFalse(node4.hasChildren());
2185:       
2186:       node1.isQuotedString();
2187:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2188:       assertEquals(55, Node.INFERRED_FUNCTION);
2189:       assertEquals(36, Node.QUOTED_PROP);
2190:       assertEquals(4095, Node.COLUMN_MASK);
2191:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2192:       assertEquals(39, Node.EMPTY_BLOCK);
2193:       assertEquals(53, Node.INPUT_ID);
2194:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2195:       assertEquals(40, Node.ORIGINALNAME_PROP);
2196:       assertEquals(47, Node.IS_DISPATCHER);
2197:       assertEquals(2, Node.POST_FLAG);
2198:       assertEquals(50, Node.FREE_CALL);
2199:       assertEquals(54, Node.SLASH_V);
2200:       assertEquals(46, Node.IS_NAMESPACE);
2201:       assertEquals(43, Node.IS_CONSTANT_NAME);
2202:       assertEquals(1, Node.DECR_FLAG);
2203:       assertEquals(12, Node.COLUMN_BITS);
2204:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2205:       assertEquals(30, Node.VAR_ARGS_NAME);
2206:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2207:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2208:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2209:       assertEquals(57, Node.LAST_PROP);
2210:       assertEquals(32, Node.INCRDECR_PROP);
2211:       assertEquals(29, Node.JSDOC_INFO_PROP);
2212:       assertEquals(57, Node.REFLECTED_OBJECT);
2213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2214:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2215:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2216:       assertEquals(52, Node.LENGTH);
2217:       assertEquals(8, Node.FLAG_NO_THROWS);
2218:       assertEquals(48, Node.DIRECTIVES);
2219:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2220:       assertEquals(37, Node.OPT_ARG_NAME);
2221:       assertEquals(56, Node.CHANGE_TIME);
2222:       assertEquals(49, Node.DIRECT_EVAL);
2223:       assertFalse(node1.isCase());
2224:       assertFalse(node1.isString());
2225:       assertFalse(node1.isIn());
2226:       assertFalse(node1.isInc());
2227:       assertFalse(node1.isFalse());
2228:       assertFalse(node1.isThrow());
2229:       assertEquals(48, node1.getCharno());
2230:       assertFalse(node1.isGetterDef());
2231:       assertFalse(node1.isArrayLit());
2232:       assertFalse(node1.isSwitch());
2233:       assertFalse(node1.isWith());
2234:       assertFalse(node1.isCatch());
2235:       assertFalse(node1.isRegExp());
2236:       assertFalse(node1.isFunction());
2237:       assertEquals(48, node1.getSourcePosition());
2238:       assertFalse(node1.isTry());
2239:       assertEquals(15, node1.getType());
2240:       assertFalse(node1.isScript());
2241:       assertFalse(node1.isSetterDef());
2242:       assertFalse(node1.hasOneChild());
2243:       assertFalse(node1.isFor());
2244:       assertFalse(node1.isIf());
2245:       assertFalse(node1.isNE());
2246:       assertFalse(node1.isThis());
2247:       assertFalse(node1.isHook());
2248:       assertFalse(node1.isInstanceOf());
2249:       assertFalse(node1.isDo());
2250:       assertFalse(node1.isContinue());
2251:       assertFalse(node1.isWhile());
2252:       assertFalse(node1.hasMoreThanOneChild());
2253:       assertFalse(node1.isOr());
2254:       assertFalse(node1.isAdd());
2255:       assertFalse(node1.isLabel());
2256:       assertFalse(node1.isAssignAdd());
2257:       assertFalse(node1.isReturn());
2258:       assertFalse(node1.isBlock());
2259:       assertFalse(node1.isNew());
2260:       assertFalse(node1.isLabelName());
2261:       assertFalse(node1.isCast());
2262:       assertFalse(node1.isStringKey());
2263:       assertFalse(node1.isVar());
2264:       assertFalse(node1.isNumber());
2265:       assertEquals(0, node1.getLineno());
2266:       assertFalse(node1.isParamList());
2267:       assertFalse(node1.isNot());
2268:       assertFalse(node1.isAnd());
2269:       assertFalse(node1.isDebugger());
2270:       assertFalse(node1.isObjectLit());
2271:       assertEquals(0, node1.getChildCount());
2272:       assertFalse(node1.isGetProp());
2273:       assertFalse(node1.isDefaultCase());
2274:       
2275:       Set<String> set0 = new LinkedHashSet<String>();
2276:       Node node5 = Node.newNumber((-2845.11372301), 996, 0);
2277:       assertEquals(29, Node.JSDOC_INFO_PROP);
2278:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2279:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2280:       assertEquals(37, Node.OPT_ARG_NAME);
2281:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2282:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2283:       assertEquals(43, Node.IS_CONSTANT_NAME);
2284:       assertEquals(56, Node.CHANGE_TIME);
2285:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2286:       assertEquals(36, Node.QUOTED_PROP);
2287:       assertEquals(46, Node.IS_NAMESPACE);
2288:       assertEquals(30, Node.VAR_ARGS_NAME);
2289:       assertEquals(57, Node.LAST_PROP);
2290:       assertEquals(55, Node.INFERRED_FUNCTION);
2291:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2292:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2293:       assertEquals(53, Node.INPUT_ID);
2294:       assertEquals(2, Node.POST_FLAG);
2295:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2296:       assertEquals(47, Node.IS_DISPATCHER);
2297:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2298:       assertEquals(50, Node.FREE_CALL);
2299:       assertEquals(8, Node.FLAG_NO_THROWS);
2300:       assertEquals(39, Node.EMPTY_BLOCK);
2301:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2302:       assertEquals(40, Node.ORIGINALNAME_PROP);
2303:       assertEquals(52, Node.LENGTH);
2304:       assertEquals(48, Node.DIRECTIVES);
2305:       assertEquals(54, Node.SLASH_V);
2306:       assertEquals(57, Node.REFLECTED_OBJECT);
2307:       assertEquals(49, Node.DIRECT_EVAL);
2308:       assertEquals(1, Node.DECR_FLAG);
2309:       assertEquals(4095, Node.COLUMN_MASK);
2310:       assertEquals(32, Node.INCRDECR_PROP);
2311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2312:       assertEquals(12, Node.COLUMN_BITS);
2313:       
2314:       Node node6 = new Node(120, node4, node1, node5, node2, (-675), 9);
2315:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2316:       assertEquals(29, Node.JSDOC_INFO_PROP);
2317:       assertEquals(56, Node.CHANGE_TIME);
2318:       assertEquals(37, Node.OPT_ARG_NAME);
2319:       assertEquals(47, Node.IS_DISPATCHER);
2320:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2321:       assertEquals(2, Node.POST_FLAG);
2322:       assertEquals(1, Node.DECR_FLAG);
2323:       assertEquals(12, Node.COLUMN_BITS);
2324:       assertEquals(32, Node.INCRDECR_PROP);
2325:       assertEquals(46, Node.IS_NAMESPACE);
2326:       assertEquals(43, Node.IS_CONSTANT_NAME);
2327:       assertEquals(54, Node.SLASH_V);
2328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2329:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2330:       assertEquals(50, Node.FREE_CALL);
2331:       assertEquals(40, Node.ORIGINALNAME_PROP);
2332:       assertEquals(57, Node.REFLECTED_OBJECT);
2333:       assertEquals(48, Node.DIRECTIVES);
2334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2335:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2336:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2337:       assertEquals(30, Node.VAR_ARGS_NAME);
2338:       assertEquals(4095, Node.COLUMN_MASK);
2339:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2340:       assertEquals(55, Node.INFERRED_FUNCTION);
2341:       assertEquals(57, Node.LAST_PROP);
2342:       assertEquals(49, Node.DIRECT_EVAL);
2343:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2344:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2345:       assertEquals(39, Node.EMPTY_BLOCK);
2346:       assertEquals(53, Node.INPUT_ID);
2347:       assertEquals(36, Node.QUOTED_PROP);
2348:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2349:       assertEquals(52, Node.LENGTH);
2350:       assertEquals(8, Node.FLAG_NO_THROWS);
2351:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2352:       assertEquals(55, Node.INFERRED_FUNCTION);
2353:       assertEquals(36, Node.QUOTED_PROP);
2354:       assertEquals(4095, Node.COLUMN_MASK);
2355:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2356:       assertEquals(39, Node.EMPTY_BLOCK);
2357:       assertEquals(53, Node.INPUT_ID);
2358:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2359:       assertEquals(40, Node.ORIGINALNAME_PROP);
2360:       assertEquals(47, Node.IS_DISPATCHER);
2361:       assertEquals(2, Node.POST_FLAG);
2362:       assertEquals(50, Node.FREE_CALL);
2363:       assertEquals(54, Node.SLASH_V);
2364:       assertEquals(46, Node.IS_NAMESPACE);
2365:       assertEquals(43, Node.IS_CONSTANT_NAME);
2366:       assertEquals(1, Node.DECR_FLAG);
2367:       assertEquals(12, Node.COLUMN_BITS);
2368:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2369:       assertEquals(30, Node.VAR_ARGS_NAME);
2370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2371:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2372:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2373:       assertEquals(57, Node.LAST_PROP);
2374:       assertEquals(32, Node.INCRDECR_PROP);
2375:       assertEquals(29, Node.JSDOC_INFO_PROP);
2376:       assertEquals(57, Node.REFLECTED_OBJECT);
2377:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2378:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2379:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2380:       assertEquals(52, Node.LENGTH);
2381:       assertEquals(8, Node.FLAG_NO_THROWS);
2382:       assertEquals(48, Node.DIRECTIVES);
2383:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2384:       assertEquals(37, Node.OPT_ARG_NAME);
2385:       assertEquals(56, Node.CHANGE_TIME);
2386:       assertEquals(49, Node.DIRECT_EVAL);
2387:       assertEquals(43, Node.IS_CONSTANT_NAME);
2388:       assertEquals(36, Node.QUOTED_PROP);
2389:       assertEquals(53, Node.INPUT_ID);
2390:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2391:       assertEquals(4095, Node.COLUMN_MASK);
2392:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2393:       assertEquals(48, Node.DIRECTIVES);
2394:       assertEquals(2, Node.POST_FLAG);
2395:       assertEquals(56, Node.CHANGE_TIME);
2396:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2397:       assertEquals(39, Node.EMPTY_BLOCK);
2398:       assertEquals(47, Node.IS_DISPATCHER);
2399:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2400:       assertEquals(29, Node.JSDOC_INFO_PROP);
2401:       assertEquals(8, Node.FLAG_NO_THROWS);
2402:       assertEquals(55, Node.INFERRED_FUNCTION);
2403:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2404:       assertEquals(57, Node.LAST_PROP);
2405:       assertEquals(54, Node.SLASH_V);
2406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2407:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2408:       assertEquals(30, Node.VAR_ARGS_NAME);
2409:       assertEquals(52, Node.LENGTH);
2410:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2411:       assertEquals(46, Node.IS_NAMESPACE);
2412:       assertEquals(40, Node.ORIGINALNAME_PROP);
2413:       assertEquals(57, Node.REFLECTED_OBJECT);
2414:       assertEquals(49, Node.DIRECT_EVAL);
2415:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2416:       assertEquals(37, Node.OPT_ARG_NAME);
2417:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2418:       assertEquals(50, Node.FREE_CALL);
2419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2420:       assertEquals(12, Node.COLUMN_BITS);
2421:       assertEquals(1, Node.DECR_FLAG);
2422:       assertEquals(32, Node.INCRDECR_PROP);
2423:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2424:       assertEquals(50, Node.FREE_CALL);
2425:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2426:       assertEquals(40, Node.ORIGINALNAME_PROP);
2427:       assertEquals(39, Node.EMPTY_BLOCK);
2428:       assertEquals(48, Node.DIRECTIVES);
2429:       assertEquals(52, Node.LENGTH);
2430:       assertEquals(54, Node.SLASH_V);
2431:       assertEquals(8, Node.FLAG_NO_THROWS);
2432:       assertEquals(57, Node.REFLECTED_OBJECT);
2433:       assertEquals(30, Node.VAR_ARGS_NAME);
2434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2435:       assertEquals(57, Node.LAST_PROP);
2436:       assertEquals(55, Node.INFERRED_FUNCTION);
2437:       assertEquals(43, Node.IS_CONSTANT_NAME);
2438:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2440:       assertEquals(2, Node.POST_FLAG);
2441:       assertEquals(47, Node.IS_DISPATCHER);
2442:       assertEquals(29, Node.JSDOC_INFO_PROP);
2443:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2444:       assertEquals(56, Node.CHANGE_TIME);
2445:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2446:       assertEquals(37, Node.OPT_ARG_NAME);
2447:       assertEquals(53, Node.INPUT_ID);
2448:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2449:       assertEquals(46, Node.IS_NAMESPACE);
2450:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2451:       assertEquals(36, Node.QUOTED_PROP);
2452:       assertEquals(49, Node.DIRECT_EVAL);
2453:       assertEquals(32, Node.INCRDECR_PROP);
2454:       assertEquals(1, Node.DECR_FLAG);
2455:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2456:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2457:       assertEquals(12, Node.COLUMN_BITS);
2458:       assertEquals(4095, Node.COLUMN_MASK);
2459:       assertEquals(29, Node.JSDOC_INFO_PROP);
2460:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2461:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2462:       assertEquals(37, Node.OPT_ARG_NAME);
2463:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2464:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2465:       assertEquals(43, Node.IS_CONSTANT_NAME);
2466:       assertEquals(56, Node.CHANGE_TIME);
2467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2468:       assertEquals(36, Node.QUOTED_PROP);
2469:       assertEquals(46, Node.IS_NAMESPACE);
2470:       assertEquals(30, Node.VAR_ARGS_NAME);
2471:       assertEquals(57, Node.LAST_PROP);
2472:       assertEquals(55, Node.INFERRED_FUNCTION);
2473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2474:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2475:       assertEquals(53, Node.INPUT_ID);
2476:       assertEquals(2, Node.POST_FLAG);
2477:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2478:       assertEquals(47, Node.IS_DISPATCHER);
2479:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2480:       assertEquals(50, Node.FREE_CALL);
2481:       assertEquals(8, Node.FLAG_NO_THROWS);
2482:       assertEquals(39, Node.EMPTY_BLOCK);
2483:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2484:       assertEquals(40, Node.ORIGINALNAME_PROP);
2485:       assertEquals(52, Node.LENGTH);
2486:       assertEquals(48, Node.DIRECTIVES);
2487:       assertEquals(54, Node.SLASH_V);
2488:       assertEquals(57, Node.REFLECTED_OBJECT);
2489:       assertEquals(49, Node.DIRECT_EVAL);
2490:       assertEquals(1, Node.DECR_FLAG);
2491:       assertEquals(4095, Node.COLUMN_MASK);
2492:       assertEquals(32, Node.INCRDECR_PROP);
2493:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2494:       assertEquals(12, Node.COLUMN_BITS);
2495:       assertEquals(46, Node.IS_NAMESPACE);
2496:       assertEquals(12, Node.COLUMN_BITS);
2497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2498:       assertEquals(37, Node.OPT_ARG_NAME);
2499:       assertEquals(56, Node.CHANGE_TIME);
2500:       assertEquals(1, Node.DECR_FLAG);
2501:       assertEquals(32, Node.INCRDECR_PROP);
2502:       assertEquals(30, Node.VAR_ARGS_NAME);
2503:       assertEquals(49, Node.DIRECT_EVAL);
2504:       assertEquals(47, Node.IS_DISPATCHER);
2505:       assertEquals(2, Node.POST_FLAG);
2506:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2507:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2508:       assertEquals(54, Node.SLASH_V);
2509:       assertEquals(43, Node.IS_CONSTANT_NAME);
2510:       assertEquals(50, Node.FREE_CALL);
2511:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2512:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2513:       assertEquals(39, Node.EMPTY_BLOCK);
2514:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2515:       assertEquals(48, Node.DIRECTIVES);
2516:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2517:       assertEquals(40, Node.ORIGINALNAME_PROP);
2518:       assertEquals(4095, Node.COLUMN_MASK);
2519:       assertEquals(52, Node.LENGTH);
2520:       assertEquals(53, Node.INPUT_ID);
2521:       assertEquals(57, Node.REFLECTED_OBJECT);
2522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2523:       assertEquals(57, Node.LAST_PROP);
2524:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2525:       assertEquals(29, Node.JSDOC_INFO_PROP);
2526:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2527:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2528:       assertEquals(55, Node.INFERRED_FUNCTION);
2529:       assertEquals(36, Node.QUOTED_PROP);
2530:       assertEquals(8, Node.FLAG_NO_THROWS);
2531:       
2532:       try { 
2533:         node6.getDouble();
2534:         fail("Expecting exception: UnsupportedOperationException");
2535:       
2536:       } catch(UnsupportedOperationException e) {
2537:          //
2538:          // CATCH is not a number node
2539:          //
2540:          verifyException("com.google.javascript.rhino.Node", e);
2541:       }
2542:   }
2543: }
RegularFileObject[/tmp/EvoSuite_114_1628157521951/com/google/javascript/rhino/Node_114_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:42 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_114_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_114_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_114_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:42.749 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());

Iterable<Node> iterable0 = node0.children();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());

node0.isDec();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());

Node node1 = new Node(15, 0, 48);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(48, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());

Node node2 = node0.clonePropsFrom(node1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(48, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertTrue(node2.isNumber());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());

Node node3 = node0.clonePropsFrom(node2);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(48, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertTrue(node2.isNumber());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isOr());
assertFalse(node3.isDec());
assertFalse(node3.isGetElem());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isStringKey());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertEquals(39, node3.getType());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertFalse(node3.isIf());
assertFalse(node3.isSwitch());
assertFalse(node3.isDelProp());
assertFalse(node3.isInc());
assertFalse(node3.isTrue());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetProp());
assertFalse(node3.isNull());
assertFalse(node3.isComma());
assertFalse(node3.isObjectLit());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isAnd());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertTrue(node3.isNumber());

node3.isFromExterns();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(48, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertTrue(node2.isNumber());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isOr());
assertFalse(node3.isDec());
assertFalse(node3.isGetElem());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isStringKey());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertEquals(39, node3.getType());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertFalse(node3.isIf());
assertFalse(node3.isSwitch());
assertFalse(node3.isDelProp());
assertFalse(node3.isInc());
assertFalse(node3.isTrue());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetProp());
assertFalse(node3.isNull());
assertFalse(node3.isComma());
assertFalse(node3.isObjectLit());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isAnd());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertTrue(node3.isNumber());

node3.isBreak();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(48, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isThrow());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertTrue(node2.isNumber());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isOr());
assertFalse(node3.isDec());
assertFalse(node3.isGetElem());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isStringKey());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertEquals(39, node3.getType());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertFalse(node3.isIf());
assertFalse(node3.isSwitch());
assertFalse(node3.isDelProp());
assertFalse(node3.isInc());
assertFalse(node3.isTrue());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetProp());
assertFalse(node3.isNull());
assertFalse(node3.isComma());
assertFalse(node3.isObjectLit());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isAnd());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertTrue(node3.isNumber());

node0.isCatch();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInc());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIn());

Node node4 = Node.newNumber(0.0, 63, 12);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isLabelName());
assertFalse(node4.isTypeOf());
assertFalse(node4.isCast());
assertFalse(node4.isGetElem());
assertFalse(node4.isOr());
assertFalse(node4.isDo());
assertFalse(node4.isContinue());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isVar());
assertFalse(node4.isSetterDef());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isRegExp());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertFalse(node4.isScript());
assertFalse(node4.isCase());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertEquals(12, node4.getCharno());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isFor());
assertFalse(node4.isThis());
assertEquals(39, node4.getType());
assertFalse(node4.isHook());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetterDef());
assertFalse(node4.isIf());
assertFalse(node4.isEmpty());
assertFalse(node4.isArrayLit());
assertEquals(63, node4.getLineno());
assertFalse(node4.isIn());
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertFalse(node4.isNE());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isFunction());
assertFalse(node4.isThrow());
assertFalse(node4.isName());
assertFalse(node4.isFalse());
assertFalse(node4.isCall());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNull());
assertFalse(node4.isWhile());
assertFalse(node4.isString());
assertFalse(node4.isNot());
assertFalse(node4.isExprResult());
assertFalse(node4.isVoid());
assertTrue(node4.isNumber());
assertEquals(258060, node4.getSourcePosition());
assertFalse(node4.isComma());
assertFalse(node4.isReturn());
assertFalse(node4.hasChildren());

node1.isQuotedString();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(48, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isTry());
assertEquals(15, node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNumber());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());

Set<String> set0 = new LinkedHashSet<String>();
Node node5 = Node.newNumber((-2845.11372301), 996, 0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

Node node6 = new Node(120, node4, node1, node5, node2, (-675), 9);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);

node6.getDouble();

[MASTER] 09:58:44.660 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_122_1628157524572/com/google/javascript/rhino/Node_122_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_122_1628157524572/com/google/javascript/rhino/Node_122_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:44.660 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:44.660 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:44.661 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 162
[MASTER] 09:58:44.664 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_122_1628157524572/com/google/javascript/rhino/Node_122_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_122_tmp__ESTest extends Node_122_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(1.0);
21:       assertEquals(50, Node.FREE_CALL);
22:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
23:       assertEquals(57, Node.REFLECTED_OBJECT);
24:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
25:       assertEquals(52, Node.LENGTH);
26:       assertEquals(8, Node.FLAG_NO_THROWS);
27:       assertEquals(55, Node.INFERRED_FUNCTION);
28:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
29:       assertEquals(15, Node.NO_SIDE_EFFECTS);
30:       assertEquals(39, Node.EMPTY_BLOCK);
31:       assertEquals(49, Node.DIRECT_EVAL);
32:       assertEquals(1, Node.DECR_FLAG);
33:       assertEquals(12, Node.COLUMN_BITS);
34:       assertEquals(36, Node.QUOTED_PROP);
35:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
36:       assertEquals(48, Node.DIRECTIVES);
37:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
38:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
39:       assertEquals(4095, Node.COLUMN_MASK);
40:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
41:       assertEquals(37, Node.OPT_ARG_NAME);
42:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
43:       assertEquals(29, Node.JSDOC_INFO_PROP);
44:       assertEquals(56, Node.CHANGE_TIME);
45:       assertEquals(2, Node.POST_FLAG);
46:       assertEquals(47, Node.IS_DISPATCHER);
47:       assertEquals(53, Node.INPUT_ID);
48:       assertEquals(32, Node.INCRDECR_PROP);
49:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
50:       assertEquals(30, Node.VAR_ARGS_NAME);
51:       assertEquals(57, Node.LAST_PROP);
52:       assertEquals(43, Node.IS_CONSTANT_NAME);
53:       assertEquals(51, Node.STATIC_SOURCE_FILE);
54:       assertEquals(46, Node.IS_NAMESPACE);
55:       assertEquals(54, Node.SLASH_V);
56:       assertEquals(40, Node.ORIGINALNAME_PROP);
57:       assertFalse(node0.hasChildren());
58:       assertEquals((-1), node0.getSourcePosition());
59:       assertFalse(node0.isDec());
60:       assertFalse(node0.isTypeOf());
61:       assertFalse(node0.isAssign());
62:       assertFalse(node0.isLabelName());
63:       assertFalse(node0.isAssignAdd());
64:       assertFalse(node0.hasOneChild());
65:       assertFalse(node0.isOr());
66:       assertFalse(node0.isScript());
67:       assertFalse(node0.isWith());
68:       assertFalse(node0.isWhile());
69:       assertEquals(39, node0.getType());
70:       assertFalse(node0.isBlock());
71:       assertEquals((-1), node0.getLineno());
72:       assertFalse(node0.isReturn());
73:       assertFalse(node0.isExprResult());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.hasMoreThanOneChild());
76:       assertFalse(node0.isInstanceOf());
77:       assertFalse(node0.isGetElem());
78:       assertFalse(node0.isFalse());
79:       assertFalse(node0.isComma());
80:       assertFalse(node0.isThrow());
81:       assertFalse(node0.isInc());
82:       assertFalse(node0.isSetterDef());
83:       assertFalse(node0.isGetProp());
84:       assertFalse(node0.isString());
85:       assertFalse(node0.isNot());
86:       assertFalse(node0.isObjectLit());
87:       assertFalse(node0.isAnd());
88:       assertFalse(node0.isDebugger());
89:       assertFalse(node0.isFunction());
90:       assertFalse(node0.isContinue());
91:       assertFalse(node0.isCast());
92:       assertFalse(node0.isIf());
93:       assertFalse(node0.isDelProp());
94:       assertFalse(node0.isGetterDef());
95:       assertFalse(node0.isNE());
96:       assertFalse(node0.isFor());
97:       assertTrue(node0.isNumber());
98:       assertFalse(node0.isIn());
99:       assertFalse(node0.isTry());
100:       assertFalse(node0.isEmpty());
101:       assertFalse(node0.isCase());
102:       assertFalse(node0.isRegExp());
103:       assertFalse(node0.isTrue());
104:       assertFalse(node0.isVoid());
105:       assertFalse(node0.isCatch());
106:       assertFalse(node0.isBreak());
107:       assertFalse(node0.isName());
108:       assertFalse(node0.isThis());
109:       assertFalse(node0.isParamList());
110:       assertFalse(node0.isNull());
111:       assertFalse(node0.isHook());
112:       assertFalse(node0.isStringKey());
113:       assertFalse(node0.isVar());
114:       assertFalse(node0.isNew());
115:       assertFalse(node0.isAdd());
116:       assertFalse(node0.isDefaultCase());
117:       assertFalse(node0.isDo());
118:       assertFalse(node0.isSwitch());
119:       assertEquals((-1), node0.getCharno());
120:       assertFalse(node0.isLabel());
121:       assertEquals(0, node0.getChildCount());
122:       assertFalse(node0.isArrayLit());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(50, Node.FREE_CALL);
127:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
128:       assertEquals(57, Node.REFLECTED_OBJECT);
129:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
130:       assertEquals(52, Node.LENGTH);
131:       assertEquals(8, Node.FLAG_NO_THROWS);
132:       assertEquals(55, Node.INFERRED_FUNCTION);
133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
134:       assertEquals(15, Node.NO_SIDE_EFFECTS);
135:       assertEquals(39, Node.EMPTY_BLOCK);
136:       assertEquals(49, Node.DIRECT_EVAL);
137:       assertEquals(1, Node.DECR_FLAG);
138:       assertEquals(12, Node.COLUMN_BITS);
139:       assertEquals(36, Node.QUOTED_PROP);
140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
141:       assertEquals(48, Node.DIRECTIVES);
142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
144:       assertEquals(4095, Node.COLUMN_MASK);
145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
146:       assertEquals(37, Node.OPT_ARG_NAME);
147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
148:       assertEquals(29, Node.JSDOC_INFO_PROP);
149:       assertEquals(56, Node.CHANGE_TIME);
150:       assertEquals(2, Node.POST_FLAG);
151:       assertEquals(47, Node.IS_DISPATCHER);
152:       assertEquals(53, Node.INPUT_ID);
153:       assertEquals(32, Node.INCRDECR_PROP);
154:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
155:       assertEquals(30, Node.VAR_ARGS_NAME);
156:       assertEquals(57, Node.LAST_PROP);
157:       assertEquals(43, Node.IS_CONSTANT_NAME);
158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
159:       assertEquals(46, Node.IS_NAMESPACE);
160:       assertEquals(54, Node.SLASH_V);
161:       assertEquals(40, Node.ORIGINALNAME_PROP);
162:       assertFalse(iterable0.contains(node0));
163:       assertFalse(node0.hasChildren());
164:       assertEquals((-1), node0.getSourcePosition());
165:       assertFalse(node0.isDec());
166:       assertFalse(node0.isTypeOf());
167:       assertFalse(node0.isAssign());
168:       assertFalse(node0.isLabelName());
169:       assertFalse(node0.isAssignAdd());
170:       assertFalse(node0.hasOneChild());
171:       assertFalse(node0.isOr());
172:       assertFalse(node0.isScript());
173:       assertFalse(node0.isWith());
174:       assertFalse(node0.isWhile());
175:       assertEquals(39, node0.getType());
176:       assertFalse(node0.isBlock());
177:       assertEquals((-1), node0.getLineno());
178:       assertFalse(node0.isReturn());
179:       assertFalse(node0.isExprResult());
180:       assertFalse(node0.isCall());
181:       assertFalse(node0.hasMoreThanOneChild());
182:       assertFalse(node0.isInstanceOf());
183:       assertFalse(node0.isGetElem());
184:       assertFalse(node0.isFalse());
185:       assertFalse(node0.isComma());
186:       assertFalse(node0.isThrow());
187:       assertFalse(node0.isInc());
188:       assertFalse(node0.isSetterDef());
189:       assertFalse(node0.isGetProp());
190:       assertFalse(node0.isString());
191:       assertFalse(node0.isNot());
192:       assertFalse(node0.isObjectLit());
193:       assertFalse(node0.isAnd());
194:       assertFalse(node0.isDebugger());
195:       assertFalse(node0.isFunction());
196:       assertFalse(node0.isContinue());
197:       assertFalse(node0.isCast());
198:       assertFalse(node0.isIf());
199:       assertFalse(node0.isDelProp());
200:       assertFalse(node0.isGetterDef());
201:       assertFalse(node0.isNE());
202:       assertFalse(node0.isFor());
203:       assertTrue(node0.isNumber());
204:       assertFalse(node0.isIn());
205:       assertFalse(node0.isTry());
206:       assertFalse(node0.isEmpty());
207:       assertFalse(node0.isCase());
208:       assertFalse(node0.isRegExp());
209:       assertFalse(node0.isTrue());
210:       assertFalse(node0.isVoid());
211:       assertFalse(node0.isCatch());
212:       assertFalse(node0.isBreak());
213:       assertFalse(node0.isName());
214:       assertFalse(node0.isThis());
215:       assertFalse(node0.isParamList());
216:       assertFalse(node0.isNull());
217:       assertFalse(node0.isHook());
218:       assertFalse(node0.isStringKey());
219:       assertFalse(node0.isVar());
220:       assertFalse(node0.isNew());
221:       assertFalse(node0.isAdd());
222:       assertFalse(node0.isDefaultCase());
223:       assertFalse(node0.isDo());
224:       assertFalse(node0.isSwitch());
225:       assertEquals((-1), node0.getCharno());
226:       assertFalse(node0.isLabel());
227:       assertEquals(0, node0.getChildCount());
228:       assertFalse(node0.isArrayLit());
229:       assertNotNull(iterable0);
230:       
231:       boolean boolean0 = node0.isTry();
232:       assertEquals(50, Node.FREE_CALL);
233:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
234:       assertEquals(57, Node.REFLECTED_OBJECT);
235:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
236:       assertEquals(52, Node.LENGTH);
237:       assertEquals(8, Node.FLAG_NO_THROWS);
238:       assertEquals(55, Node.INFERRED_FUNCTION);
239:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
240:       assertEquals(15, Node.NO_SIDE_EFFECTS);
241:       assertEquals(39, Node.EMPTY_BLOCK);
242:       assertEquals(49, Node.DIRECT_EVAL);
243:       assertEquals(1, Node.DECR_FLAG);
244:       assertEquals(12, Node.COLUMN_BITS);
245:       assertEquals(36, Node.QUOTED_PROP);
246:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
247:       assertEquals(48, Node.DIRECTIVES);
248:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
249:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
250:       assertEquals(4095, Node.COLUMN_MASK);
251:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
252:       assertEquals(37, Node.OPT_ARG_NAME);
253:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
254:       assertEquals(29, Node.JSDOC_INFO_PROP);
255:       assertEquals(56, Node.CHANGE_TIME);
256:       assertEquals(2, Node.POST_FLAG);
257:       assertEquals(47, Node.IS_DISPATCHER);
258:       assertEquals(53, Node.INPUT_ID);
259:       assertEquals(32, Node.INCRDECR_PROP);
260:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
261:       assertEquals(30, Node.VAR_ARGS_NAME);
262:       assertEquals(57, Node.LAST_PROP);
263:       assertEquals(43, Node.IS_CONSTANT_NAME);
264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
265:       assertEquals(46, Node.IS_NAMESPACE);
266:       assertEquals(54, Node.SLASH_V);
267:       assertEquals(40, Node.ORIGINALNAME_PROP);
268:       assertFalse(node0.hasChildren());
269:       assertEquals((-1), node0.getSourcePosition());
270:       assertFalse(node0.isDec());
271:       assertFalse(node0.isTypeOf());
272:       assertFalse(node0.isAssign());
273:       assertFalse(node0.isLabelName());
274:       assertFalse(node0.isAssignAdd());
275:       assertFalse(node0.hasOneChild());
276:       assertFalse(node0.isOr());
277:       assertFalse(node0.isScript());
278:       assertFalse(node0.isWith());
279:       assertFalse(node0.isWhile());
280:       assertEquals(39, node0.getType());
281:       assertFalse(node0.isBlock());
282:       assertEquals((-1), node0.getLineno());
283:       assertFalse(node0.isReturn());
284:       assertFalse(node0.isExprResult());
285:       assertFalse(node0.isCall());
286:       assertFalse(node0.hasMoreThanOneChild());
287:       assertFalse(node0.isInstanceOf());
288:       assertFalse(node0.isGetElem());
289:       assertFalse(node0.isFalse());
290:       assertFalse(node0.isComma());
291:       assertFalse(node0.isThrow());
292:       assertFalse(node0.isInc());
293:       assertFalse(node0.isSetterDef());
294:       assertFalse(node0.isGetProp());
295:       assertFalse(node0.isString());
296:       assertFalse(node0.isNot());
297:       assertFalse(node0.isObjectLit());
298:       assertFalse(node0.isAnd());
299:       assertFalse(node0.isDebugger());
300:       assertFalse(node0.isFunction());
301:       assertFalse(node0.isContinue());
302:       assertFalse(node0.isCast());
303:       assertFalse(node0.isIf());
304:       assertFalse(node0.isDelProp());
305:       assertFalse(node0.isGetterDef());
306:       assertFalse(node0.isNE());
307:       assertFalse(node0.isFor());
308:       assertTrue(node0.isNumber());
309:       assertFalse(node0.isIn());
310:       assertFalse(node0.isTry());
311:       assertFalse(node0.isEmpty());
312:       assertFalse(node0.isCase());
313:       assertFalse(node0.isRegExp());
314:       assertFalse(node0.isTrue());
315:       assertFalse(node0.isVoid());
316:       assertFalse(node0.isCatch());
317:       assertFalse(node0.isBreak());
318:       assertFalse(node0.isName());
319:       assertFalse(node0.isThis());
320:       assertFalse(node0.isParamList());
321:       assertFalse(node0.isNull());
322:       assertFalse(node0.isHook());
323:       assertFalse(node0.isStringKey());
324:       assertFalse(node0.isVar());
325:       assertFalse(node0.isNew());
326:       assertFalse(node0.isAdd());
327:       assertFalse(node0.isDefaultCase());
328:       assertFalse(node0.isDo());
329:       assertFalse(node0.isSwitch());
330:       assertEquals((-1), node0.getCharno());
331:       assertFalse(node0.isLabel());
332:       assertEquals(0, node0.getChildCount());
333:       assertFalse(node0.isArrayLit());
334:       assertFalse(boolean0);
335:       
336:       Node node1 = new Node(15, 0, 48);
337:       assertEquals(40, Node.ORIGINALNAME_PROP);
338:       assertEquals(50, Node.FREE_CALL);
339:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
340:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
341:       assertEquals(52, Node.LENGTH);
342:       assertEquals(8, Node.FLAG_NO_THROWS);
343:       assertEquals(48, Node.DIRECTIVES);
344:       assertEquals(54, Node.SLASH_V);
345:       assertEquals(57, Node.REFLECTED_OBJECT);
346:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
347:       assertEquals(30, Node.VAR_ARGS_NAME);
348:       assertEquals(15, Node.NO_SIDE_EFFECTS);
349:       assertEquals(55, Node.INFERRED_FUNCTION);
350:       assertEquals(53, Node.INPUT_ID);
351:       assertEquals(2, Node.POST_FLAG);
352:       assertEquals(39, Node.EMPTY_BLOCK);
353:       assertEquals(57, Node.LAST_PROP);
354:       assertEquals(47, Node.IS_DISPATCHER);
355:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
356:       assertEquals(29, Node.JSDOC_INFO_PROP);
357:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
358:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
359:       assertEquals(37, Node.OPT_ARG_NAME);
360:       assertEquals(36, Node.QUOTED_PROP);
361:       assertEquals(56, Node.CHANGE_TIME);
362:       assertEquals(46, Node.IS_NAMESPACE);
363:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
364:       assertEquals(43, Node.IS_CONSTANT_NAME);
365:       assertEquals(1, Node.DECR_FLAG);
366:       assertEquals(49, Node.DIRECT_EVAL);
367:       assertEquals(51, Node.STATIC_SOURCE_FILE);
368:       assertEquals(4095, Node.COLUMN_MASK);
369:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
370:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
371:       assertEquals(12, Node.COLUMN_BITS);
372:       assertEquals(32, Node.INCRDECR_PROP);
373:       assertFalse(node1.isAssign());
374:       assertFalse(node1.isLabelName());
375:       assertFalse(node1.hasChildren());
376:       assertFalse(node1.isGetElem());
377:       assertFalse(node1.isCast());
378:       assertFalse(node1.isDec());
379:       assertFalse(node1.isTypeOf());
380:       assertFalse(node1.isNumber());
381:       assertFalse(node1.isOr());
382:       assertFalse(node1.isExprResult());
383:       assertFalse(node1.isDo());
384:       assertEquals(48, node1.getSourcePosition());
385:       assertFalse(node1.isContinue());
386:       assertFalse(node1.isAdd());
387:       assertFalse(node1.isLabel());
388:       assertFalse(node1.isAssignAdd());
389:       assertFalse(node1.isNew());
390:       assertFalse(node1.isVar());
391:       assertFalse(node1.isStringKey());
392:       assertFalse(node1.isSwitch());
393:       assertFalse(node1.isParamList());
394:       assertFalse(node1.isCase());
395:       assertFalse(node1.isScript());
396:       assertFalse(node1.isRegExp());
397:       assertFalse(node1.hasMoreThanOneChild());
398:       assertFalse(node1.isInstanceOf());
399:       assertFalse(node1.isCatch());
400:       assertFalse(node1.isWith());
401:       assertFalse(node1.isTry());
402:       assertFalse(node1.isThis());
403:       assertFalse(node1.isBlock());
404:       assertFalse(node1.isHook());
405:       assertFalse(node1.hasOneChild());
406:       assertFalse(node1.isEmpty());
407:       assertFalse(node1.isFor());
408:       assertFalse(node1.isGetterDef());
409:       assertFalse(node1.isDebugger());
410:       assertFalse(node1.isTrue());
411:       assertFalse(node1.isNE());
412:       assertFalse(node1.isArrayLit());
413:       assertFalse(node1.isVoid());
414:       assertFalse(node1.isIf());
415:       assertFalse(node1.isDelProp());
416:       assertEquals(0, node1.getChildCount());
417:       assertFalse(node1.isIn());
418:       assertFalse(node1.isFunction());
419:       assertEquals(15, node1.getType());
420:       assertFalse(node1.isInc());
421:       assertFalse(node1.isSetterDef());
422:       assertEquals(48, node1.getCharno());
423:       assertFalse(node1.isDefaultCase());
424:       assertFalse(node1.isBreak());
425:       assertFalse(node1.isThrow());
426:       assertFalse(node1.isNull());
427:       assertFalse(node1.isCall());
428:       assertFalse(node1.isComma());
429:       assertFalse(node1.isFalse());
430:       assertEquals(0, node1.getLineno());
431:       assertFalse(node1.isAnd());
432:       assertFalse(node1.isName());
433:       assertFalse(node1.isNot());
434:       assertFalse(node1.isWhile());
435:       assertFalse(node1.isString());
436:       assertFalse(node1.isObjectLit());
437:       assertFalse(node1.isGetProp());
438:       assertFalse(node1.isReturn());
439:       assertNotNull(node1);
440:       assertFalse(node1.equals((Object)node0));
441:       
442:       Node node2 = new Node(57, 4095, 4);
443:       assertEquals(43, Node.IS_CONSTANT_NAME);
444:       assertEquals(36, Node.QUOTED_PROP);
445:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
446:       assertEquals(53, Node.INPUT_ID);
447:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
448:       assertEquals(55, Node.INFERRED_FUNCTION);
449:       assertEquals(56, Node.CHANGE_TIME);
450:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
451:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
452:       assertEquals(48, Node.DIRECTIVES);
453:       assertEquals(37, Node.OPT_ARG_NAME);
454:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
455:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
456:       assertEquals(12, Node.COLUMN_BITS);
457:       assertEquals(4095, Node.COLUMN_MASK);
458:       assertEquals(32, Node.INCRDECR_PROP);
459:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
460:       assertEquals(57, Node.LAST_PROP);
461:       assertEquals(49, Node.DIRECT_EVAL);
462:       assertEquals(1, Node.DECR_FLAG);
463:       assertEquals(15, Node.NO_SIDE_EFFECTS);
464:       assertEquals(51, Node.STATIC_SOURCE_FILE);
465:       assertEquals(57, Node.REFLECTED_OBJECT);
466:       assertEquals(52, Node.LENGTH);
467:       assertEquals(50, Node.FREE_CALL);
468:       assertEquals(54, Node.SLASH_V);
469:       assertEquals(46, Node.IS_NAMESPACE);
470:       assertEquals(2, Node.POST_FLAG);
471:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
472:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
473:       assertEquals(8, Node.FLAG_NO_THROWS);
474:       assertEquals(29, Node.JSDOC_INFO_PROP);
475:       assertEquals(40, Node.ORIGINALNAME_PROP);
476:       assertEquals(39, Node.EMPTY_BLOCK);
477:       assertEquals(30, Node.VAR_ARGS_NAME);
478:       assertEquals(47, Node.IS_DISPATCHER);
479:       assertFalse(node2.isInc());
480:       assertFalse(node2.isSwitch());
481:       assertFalse(node2.isString());
482:       assertFalse(node2.isComma());
483:       assertFalse(node2.isThis());
484:       assertFalse(node2.isGetProp());
485:       assertFalse(node2.isDelProp());
486:       assertFalse(node2.isGetterDef());
487:       assertFalse(node2.isBreak());
488:       assertFalse(node2.isInstanceOf());
489:       assertFalse(node2.isCase());
490:       assertFalse(node2.isHook());
491:       assertFalse(node2.isFor());
492:       assertFalse(node2.isExprResult());
493:       assertFalse(node2.isTrue());
494:       assertFalse(node2.isTry());
495:       assertFalse(node2.isVoid());
496:       assertFalse(node2.isScript());
497:       assertFalse(node2.isArrayLit());
498:       assertFalse(node2.isLabelName());
499:       assertFalse(node2.isParamList());
500:       assertFalse(node2.isOr());
501:       assertFalse(node2.isEmpty());
502:       assertEquals(0, node2.getChildCount());
503:       assertFalse(node2.isDo());
504:       assertFalse(node2.isDefaultCase());
505:       assertFalse(node2.isLabel());
506:       assertFalse(node2.isAssignAdd());
507:       assertFalse(node2.isVar());
508:       assertFalse(node2.isNew());
509:       assertFalse(node2.isAdd());
510:       assertFalse(node2.isCall());
511:       assertFalse(node2.isName());
512:       assertEquals(16773124, node2.getSourcePosition());
513:       assertFalse(node2.isNull());
514:       assertFalse(node2.isStringKey());
515:       assertEquals(4095, node2.getLineno());
516:       assertFalse(node2.isDec());
517:       assertFalse(node2.isTypeOf());
518:       assertFalse(node2.isNumber());
519:       assertFalse(node2.isGetElem());
520:       assertFalse(node2.isCatch());
521:       assertFalse(node2.hasMoreThanOneChild());
522:       assertFalse(node2.hasOneChild());
523:       assertFalse(node2.isAssign());
524:       assertFalse(node2.isWhile());
525:       assertFalse(node2.isReturn());
526:       assertFalse(node2.hasChildren());
527:       assertFalse(node2.isBlock());
528:       assertFalse(node2.isFunction());
529:       assertFalse(node2.isDebugger());
530:       assertFalse(node2.isRegExp());
531:       assertFalse(node2.isWith());
532:       assertFalse(node2.isCast());
533:       assertFalse(node2.isAnd());
534:       assertFalse(node2.isNot());
535:       assertFalse(node2.isObjectLit());
536:       assertEquals(4, node2.getCharno());
537:       assertFalse(node2.isIf());
538:       assertFalse(node2.isNE());
539:       assertEquals(57, node2.getType());
540:       assertFalse(node2.isSetterDef());
541:       assertFalse(node2.isIn());
542:       assertFalse(node2.isContinue());
543:       assertFalse(node2.isFalse());
544:       assertFalse(node2.isThrow());
545:       assertNotNull(node2);
546:       assertFalse(node2.equals((Object)node0));
547:       assertFalse(node2.equals((Object)node1));
548:       
549:       boolean boolean1 = node0.isSwitch();
550:       assertEquals(50, Node.FREE_CALL);
551:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
552:       assertEquals(57, Node.REFLECTED_OBJECT);
553:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
554:       assertEquals(52, Node.LENGTH);
555:       assertEquals(8, Node.FLAG_NO_THROWS);
556:       assertEquals(55, Node.INFERRED_FUNCTION);
557:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
558:       assertEquals(15, Node.NO_SIDE_EFFECTS);
559:       assertEquals(39, Node.EMPTY_BLOCK);
560:       assertEquals(49, Node.DIRECT_EVAL);
561:       assertEquals(1, Node.DECR_FLAG);
562:       assertEquals(12, Node.COLUMN_BITS);
563:       assertEquals(36, Node.QUOTED_PROP);
564:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
565:       assertEquals(48, Node.DIRECTIVES);
566:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
567:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
568:       assertEquals(4095, Node.COLUMN_MASK);
569:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
570:       assertEquals(37, Node.OPT_ARG_NAME);
571:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
572:       assertEquals(29, Node.JSDOC_INFO_PROP);
573:       assertEquals(56, Node.CHANGE_TIME);
574:       assertEquals(2, Node.POST_FLAG);
575:       assertEquals(47, Node.IS_DISPATCHER);
576:       assertEquals(53, Node.INPUT_ID);
577:       assertEquals(32, Node.INCRDECR_PROP);
578:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
579:       assertEquals(30, Node.VAR_ARGS_NAME);
580:       assertEquals(57, Node.LAST_PROP);
581:       assertEquals(43, Node.IS_CONSTANT_NAME);
582:       assertEquals(51, Node.STATIC_SOURCE_FILE);
583:       assertEquals(46, Node.IS_NAMESPACE);
584:       assertEquals(54, Node.SLASH_V);
585:       assertEquals(40, Node.ORIGINALNAME_PROP);
586:       assertFalse(node0.hasChildren());
587:       assertEquals((-1), node0.getSourcePosition());
588:       assertFalse(node0.isDec());
589:       assertFalse(node0.isTypeOf());
590:       assertFalse(node0.isAssign());
591:       assertFalse(node0.isLabelName());
592:       assertFalse(node0.isAssignAdd());
593:       assertFalse(node0.hasOneChild());
594:       assertFalse(node0.isOr());
595:       assertFalse(node0.isScript());
596:       assertFalse(node0.isWith());
597:       assertFalse(node0.isWhile());
598:       assertEquals(39, node0.getType());
599:       assertFalse(node0.isBlock());
600:       assertEquals((-1), node0.getLineno());
601:       assertFalse(node0.isReturn());
602:       assertFalse(node0.isExprResult());
603:       assertFalse(node0.isCall());
604:       assertFalse(node0.hasMoreThanOneChild());
605:       assertFalse(node0.isInstanceOf());
606:       assertFalse(node0.isGetElem());
607:       assertFalse(node0.isFalse());
608:       assertFalse(node0.isComma());
609:       assertFalse(node0.isThrow());
610:       assertFalse(node0.isInc());
611:       assertFalse(node0.isSetterDef());
612:       assertFalse(node0.isGetProp());
613:       assertFalse(node0.isString());
614:       assertFalse(node0.isNot());
615:       assertFalse(node0.isObjectLit());
616:       assertFalse(node0.isAnd());
617:       assertFalse(node0.isDebugger());
618:       assertFalse(node0.isFunction());
619:       assertFalse(node0.isContinue());
620:       assertFalse(node0.isCast());
621:       assertFalse(node0.isIf());
622:       assertFalse(node0.isDelProp());
623:       assertFalse(node0.isGetterDef());
624:       assertFalse(node0.isNE());
625:       assertFalse(node0.isFor());
626:       assertTrue(node0.isNumber());
627:       assertFalse(node0.isIn());
628:       assertFalse(node0.isTry());
629:       assertFalse(node0.isEmpty());
630:       assertFalse(node0.isCase());
631:       assertFalse(node0.isRegExp());
632:       assertFalse(node0.isTrue());
633:       assertFalse(node0.isVoid());
634:       assertFalse(node0.isCatch());
635:       assertFalse(node0.isBreak());
636:       assertFalse(node0.isName());
637:       assertFalse(node0.isThis());
638:       assertFalse(node0.isParamList());
639:       assertFalse(node0.isNull());
640:       assertFalse(node0.isHook());
641:       assertFalse(node0.isStringKey());
642:       assertFalse(node0.isVar());
643:       assertFalse(node0.isNew());
644:       assertFalse(node0.isAdd());
645:       assertFalse(node0.isDefaultCase());
646:       assertFalse(node0.isDo());
647:       assertFalse(node0.isSwitch());
648:       assertEquals((-1), node0.getCharno());
649:       assertFalse(node0.isLabel());
650:       assertEquals(0, node0.getChildCount());
651:       assertFalse(node0.isArrayLit());
652:       assertFalse(node0.equals((Object)node2));
653:       assertFalse(node0.equals((Object)node1));
654:       assertTrue(boolean1 == boolean0);
655:       assertFalse(boolean1);
656:       
657:       boolean boolean2 = node2.isBreak();
658:       assertEquals(43, Node.IS_CONSTANT_NAME);
659:       assertEquals(36, Node.QUOTED_PROP);
660:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
661:       assertEquals(53, Node.INPUT_ID);
662:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
663:       assertEquals(55, Node.INFERRED_FUNCTION);
664:       assertEquals(56, Node.CHANGE_TIME);
665:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
666:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
667:       assertEquals(48, Node.DIRECTIVES);
668:       assertEquals(37, Node.OPT_ARG_NAME);
669:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
670:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
671:       assertEquals(12, Node.COLUMN_BITS);
672:       assertEquals(4095, Node.COLUMN_MASK);
673:       assertEquals(32, Node.INCRDECR_PROP);
674:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
675:       assertEquals(57, Node.LAST_PROP);
676:       assertEquals(49, Node.DIRECT_EVAL);
677:       assertEquals(1, Node.DECR_FLAG);
678:       assertEquals(15, Node.NO_SIDE_EFFECTS);
679:       assertEquals(51, Node.STATIC_SOURCE_FILE);
680:       assertEquals(57, Node.REFLECTED_OBJECT);
681:       assertEquals(52, Node.LENGTH);
682:       assertEquals(50, Node.FREE_CALL);
683:       assertEquals(54, Node.SLASH_V);
684:       assertEquals(46, Node.IS_NAMESPACE);
685:       assertEquals(2, Node.POST_FLAG);
686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
687:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
688:       assertEquals(8, Node.FLAG_NO_THROWS);
689:       assertEquals(29, Node.JSDOC_INFO_PROP);
690:       assertEquals(40, Node.ORIGINALNAME_PROP);
691:       assertEquals(39, Node.EMPTY_BLOCK);
692:       assertEquals(30, Node.VAR_ARGS_NAME);
693:       assertEquals(47, Node.IS_DISPATCHER);
694:       assertFalse(node2.isInc());
695:       assertFalse(node2.isSwitch());
696:       assertFalse(node2.isString());
697:       assertFalse(node2.isComma());
698:       assertFalse(node2.isThis());
699:       assertFalse(node2.isGetProp());
700:       assertFalse(node2.isDelProp());
701:       assertFalse(node2.isGetterDef());
702:       assertFalse(node2.isBreak());
703:       assertFalse(node2.isInstanceOf());
704:       assertFalse(node2.isCase());
705:       assertFalse(node2.isHook());
706:       assertFalse(node2.isFor());
707:       assertFalse(node2.isExprResult());
708:       assertFalse(node2.isTrue());
709:       assertFalse(node2.isTry());
710:       assertFalse(node2.isVoid());
711:       assertFalse(node2.isScript());
712:       assertFalse(node2.isArrayLit());
713:       assertFalse(node2.isLabelName());
714:       assertFalse(node2.isParamList());
715:       assertFalse(node2.isOr());
716:       assertFalse(node2.isEmpty());
717:       assertEquals(0, node2.getChildCount());
718:       assertFalse(node2.isDo());
719:       assertFalse(node2.isDefaultCase());
720:       assertFalse(node2.isLabel());
721:       assertFalse(node2.isAssignAdd());
722:       assertFalse(node2.isVar());
723:       assertFalse(node2.isNew());
724:       assertFalse(node2.isAdd());
725:       assertFalse(node2.isCall());
726:       assertFalse(node2.isName());
727:       assertEquals(16773124, node2.getSourcePosition());
728:       assertFalse(node2.isNull());
729:       assertFalse(node2.isStringKey());
730:       assertEquals(4095, node2.getLineno());
731:       assertFalse(node2.isDec());
732:       assertFalse(node2.isTypeOf());
733:       assertFalse(node2.isNumber());
734:       assertFalse(node2.isGetElem());
735:       assertFalse(node2.isCatch());
736:       assertFalse(node2.hasMoreThanOneChild());
737:       assertFalse(node2.hasOneChild());
738:       assertFalse(node2.isAssign());
739:       assertFalse(node2.isWhile());
740:       assertFalse(node2.isReturn());
741:       assertFalse(node2.hasChildren());
742:       assertFalse(node2.isBlock());
743:       assertFalse(node2.isFunction());
744:       assertFalse(node2.isDebugger());
745:       assertFalse(node2.isRegExp());
746:       assertFalse(node2.isWith());
747:       assertFalse(node2.isCast());
748:       assertFalse(node2.isAnd());
749:       assertFalse(node2.isNot());
750:       assertFalse(node2.isObjectLit());
751:       assertEquals(4, node2.getCharno());
752:       assertFalse(node2.isIf());
753:       assertFalse(node2.isNE());
754:       assertEquals(57, node2.getType());
755:       assertFalse(node2.isSetterDef());
756:       assertFalse(node2.isIn());
757:       assertFalse(node2.isContinue());
758:       assertFalse(node2.isFalse());
759:       assertFalse(node2.isThrow());
760:       assertNotSame(node2, node1);
761:       assertFalse(node2.equals((Object)node0));
762:       assertFalse(node2.equals((Object)node1));
763:       assertTrue(boolean2 == boolean1);
764:       assertTrue(boolean2 == boolean0);
765:       assertFalse(boolean2);
766:       
767:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1552);
768:       assertEquals(1552, node_SideEffectFlags0.valueOf());
769:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
770:       assertNotNull(node_SideEffectFlags0);
771:       
772:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
773:       assertEquals(31, node_SideEffectFlags0.valueOf());
774:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
775:       assertEquals(31, node_SideEffectFlags1.valueOf());
776:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
777:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
778:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
779:       assertNotNull(node_SideEffectFlags1);
780:       
781:       int int0 = node_SideEffectFlags1.valueOf();
782:       assertEquals(31, node_SideEffectFlags0.valueOf());
783:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
784:       assertEquals(31, node_SideEffectFlags1.valueOf());
785:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
786:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
787:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
788:       assertEquals(31, int0);
789:       
790:       boolean boolean3 = node1.isComma();
791:       assertEquals(40, Node.ORIGINALNAME_PROP);
792:       assertEquals(50, Node.FREE_CALL);
793:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
794:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
795:       assertEquals(52, Node.LENGTH);
796:       assertEquals(8, Node.FLAG_NO_THROWS);
797:       assertEquals(48, Node.DIRECTIVES);
798:       assertEquals(54, Node.SLASH_V);
799:       assertEquals(57, Node.REFLECTED_OBJECT);
800:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
801:       assertEquals(30, Node.VAR_ARGS_NAME);
802:       assertEquals(15, Node.NO_SIDE_EFFECTS);
803:       assertEquals(55, Node.INFERRED_FUNCTION);
804:       assertEquals(53, Node.INPUT_ID);
805:       assertEquals(2, Node.POST_FLAG);
806:       assertEquals(39, Node.EMPTY_BLOCK);
807:       assertEquals(57, Node.LAST_PROP);
808:       assertEquals(47, Node.IS_DISPATCHER);
809:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
810:       assertEquals(29, Node.JSDOC_INFO_PROP);
811:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
812:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
813:       assertEquals(37, Node.OPT_ARG_NAME);
814:       assertEquals(36, Node.QUOTED_PROP);
815:       assertEquals(56, Node.CHANGE_TIME);
816:       assertEquals(46, Node.IS_NAMESPACE);
817:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
818:       assertEquals(43, Node.IS_CONSTANT_NAME);
819:       assertEquals(1, Node.DECR_FLAG);
820:       assertEquals(49, Node.DIRECT_EVAL);
821:       assertEquals(51, Node.STATIC_SOURCE_FILE);
822:       assertEquals(4095, Node.COLUMN_MASK);
823:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
824:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
825:       assertEquals(12, Node.COLUMN_BITS);
826:       assertEquals(32, Node.INCRDECR_PROP);
827:       assertFalse(node1.isAssign());
828:       assertFalse(node1.isLabelName());
829:       assertFalse(node1.hasChildren());
830:       assertFalse(node1.isGetElem());
831:       assertFalse(node1.isCast());
832:       assertFalse(node1.isDec());
833:       assertFalse(node1.isTypeOf());
834:       assertFalse(node1.isNumber());
835:       assertFalse(node1.isOr());
836:       assertFalse(node1.isExprResult());
837:       assertFalse(node1.isDo());
838:       assertEquals(48, node1.getSourcePosition());
839:       assertFalse(node1.isContinue());
840:       assertFalse(node1.isAdd());
841:       assertFalse(node1.isLabel());
842:       assertFalse(node1.isAssignAdd());
843:       assertFalse(node1.isNew());
844:       assertFalse(node1.isVar());
845:       assertFalse(node1.isStringKey());
846:       assertFalse(node1.isSwitch());
847:       assertFalse(node1.isParamList());
848:       assertFalse(node1.isCase());
849:       assertFalse(node1.isScript());
850:       assertFalse(node1.isRegExp());
851:       assertFalse(node1.hasMoreThanOneChild());
852:       assertFalse(node1.isInstanceOf());
853:       assertFalse(node1.isCatch());
854:       assertFalse(node1.isWith());
855:       assertFalse(node1.isTry());
856:       assertFalse(node1.isThis());
857:       assertFalse(node1.isBlock());
858:       assertFalse(node1.isHook());
859:       assertFalse(node1.hasOneChild());
860:       assertFalse(node1.isEmpty());
861:       assertFalse(node1.isFor());
862:       assertFalse(node1.isGetterDef());
863:       assertFalse(node1.isDebugger());
864:       assertFalse(node1.isTrue());
865:       assertFalse(node1.isNE());
866:       assertFalse(node1.isArrayLit());
867:       assertFalse(node1.isVoid());
868:       assertFalse(node1.isIf());
869:       assertFalse(node1.isDelProp());
870:       assertEquals(0, node1.getChildCount());
871:       assertFalse(node1.isIn());
872:       assertFalse(node1.isFunction());
873:       assertEquals(15, node1.getType());
874:       assertFalse(node1.isInc());
875:       assertFalse(node1.isSetterDef());
876:       assertEquals(48, node1.getCharno());
877:       assertFalse(node1.isDefaultCase());
878:       assertFalse(node1.isBreak());
879:       assertFalse(node1.isThrow());
880:       assertFalse(node1.isNull());
881:       assertFalse(node1.isCall());
882:       assertFalse(node1.isComma());
883:       assertFalse(node1.isFalse());
884:       assertEquals(0, node1.getLineno());
885:       assertFalse(node1.isAnd());
886:       assertFalse(node1.isName());
887:       assertFalse(node1.isNot());
888:       assertFalse(node1.isWhile());
889:       assertFalse(node1.isString());
890:       assertFalse(node1.isObjectLit());
891:       assertFalse(node1.isGetProp());
892:       assertFalse(node1.isReturn());
893:       assertNotSame(node1, node2);
894:       assertFalse(node1.equals((Object)node2));
895:       assertFalse(node1.equals((Object)node0));
896:       assertTrue(boolean3 == boolean1);
897:       assertTrue(boolean3 == boolean0);
898:       assertTrue(boolean3 == boolean2);
899:       assertFalse(boolean3);
900:   }
901: }
RegularFileObject[/tmp/EvoSuite_122_1628157524572/com/google/javascript/rhino/Node_122_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_122_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_122_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_122_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:44.691 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(iterable0.contains(node0));
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertNotNull(iterable0);

boolean boolean0 = node0.isTry();
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(boolean0);

Node node1 = new Node(15, 0, 48);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isDo());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertEquals(15, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertEquals(48, node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = new Node(57, 4095, 4);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(16773124, node2.getSourcePosition());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertEquals(4095, node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isGetElem());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isBlock());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(4, node2.getCharno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals(57, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean1 = node0.isSwitch();
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

boolean boolean2 = node2.isBreak();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(16773124, node2.getSourcePosition());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertEquals(4095, node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isGetElem());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isBlock());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(4, node2.getCharno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals(57, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1552);
assertEquals(1552, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

int int0 = node_SideEffectFlags1.valueOf();
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(31, int0);

boolean boolean3 = node1.isComma();
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isDo());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isTry());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertEquals(15, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertEquals(48, node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);


[MASTER] 09:58:45.227 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_123_1628157524692/com/google/javascript/rhino/Node_123_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_123_1628157524692/com/google/javascript/rhino/Node_123_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:45.227 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:45.227 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:45.228 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 161
[MASTER] 09:58:45.229 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_123_1628157524692/com/google/javascript/rhino/Node_123_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_123_tmp__ESTest extends Node_123_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(1.0);
21:       assertEquals(54, Node.SLASH_V);
22:       assertEquals(15, Node.NO_SIDE_EFFECTS);
23:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
24:       assertEquals(30, Node.VAR_ARGS_NAME);
25:       assertEquals(52, Node.LENGTH);
26:       assertEquals(12, Node.COLUMN_BITS);
27:       assertEquals(1, Node.DECR_FLAG);
28:       assertEquals(32, Node.INCRDECR_PROP);
29:       assertEquals(57, Node.LAST_PROP);
30:       assertEquals(8, Node.FLAG_NO_THROWS);
31:       assertEquals(39, Node.EMPTY_BLOCK);
32:       assertEquals(48, Node.DIRECTIVES);
33:       assertEquals(37, Node.OPT_ARG_NAME);
34:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
37:       assertEquals(4095, Node.COLUMN_MASK);
38:       assertEquals(57, Node.REFLECTED_OBJECT);
39:       assertEquals(49, Node.DIRECT_EVAL);
40:       assertEquals(56, Node.CHANGE_TIME);
41:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
42:       assertEquals(36, Node.QUOTED_PROP);
43:       assertEquals(53, Node.INPUT_ID);
44:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
45:       assertEquals(55, Node.INFERRED_FUNCTION);
46:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
47:       assertEquals(2, Node.POST_FLAG);
48:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
49:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
50:       assertEquals(47, Node.IS_DISPATCHER);
51:       assertEquals(50, Node.FREE_CALL);
52:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
53:       assertEquals(40, Node.ORIGINALNAME_PROP);
54:       assertEquals(51, Node.STATIC_SOURCE_FILE);
55:       assertEquals(46, Node.IS_NAMESPACE);
56:       assertEquals(43, Node.IS_CONSTANT_NAME);
57:       assertFalse(node0.isDebugger());
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isTrue());
60:       assertFalse(node0.isRegExp());
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isEmpty());
63:       assertFalse(node0.isFor());
64:       assertFalse(node0.isDefaultCase());
65:       assertFalse(node0.isTry());
66:       assertFalse(node0.isNE());
67:       assertFalse(node0.isNull());
68:       assertFalse(node0.isSetterDef());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isCatch());
71:       assertFalse(node0.isCall());
72:       assertFalse(node0.isIf());
73:       assertFalse(node0.isDelProp());
74:       assertFalse(node0.isName());
75:       assertEquals((-1), node0.getCharno());
76:       assertFalse(node0.isNew());
77:       assertFalse(node0.isAdd());
78:       assertFalse(node0.isBlock());
79:       assertFalse(node0.isCase());
80:       assertEquals(39, node0.getType());
81:       assertFalse(node0.isVar());
82:       assertFalse(node0.isHook());
83:       assertFalse(node0.isDo());
84:       assertFalse(node0.isAssignAdd());
85:       assertFalse(node0.isParamList());
86:       assertFalse(node0.isLabel());
87:       assertEquals(0, node0.getChildCount());
88:       assertFalse(node0.isGetterDef());
89:       assertFalse(node0.isStringKey());
90:       assertFalse(node0.isArrayLit());
91:       assertFalse(node0.isSwitch());
92:       assertFalse(node0.isLabelName());
93:       assertFalse(node0.isScript());
94:       assertFalse(node0.isExprResult());
95:       assertFalse(node0.isNot());
96:       assertFalse(node0.isWith());
97:       assertFalse(node0.hasOneChild());
98:       assertFalse(node0.isComma());
99:       assertFalse(node0.isThis());
100:       assertFalse(node0.isReturn());
101:       assertFalse(node0.hasChildren());
102:       assertFalse(node0.isInstanceOf());
103:       assertFalse(node0.isDec());
104:       assertFalse(node0.isAssign());
105:       assertFalse(node0.isOr());
106:       assertFalse(node0.isTypeOf());
107:       assertFalse(node0.hasMoreThanOneChild());
108:       assertFalse(node0.isGetElem());
109:       assertFalse(node0.isBreak());
110:       assertEquals((-1), node0.getLineno());
111:       assertFalse(node0.isInc());
112:       assertFalse(node0.isString());
113:       assertFalse(node0.isThrow());
114:       assertFalse(node0.isWhile());
115:       assertTrue(node0.isNumber());
116:       assertFalse(node0.isGetProp());
117:       assertEquals((-1), node0.getSourcePosition());
118:       assertFalse(node0.isFalse());
119:       assertFalse(node0.isAnd());
120:       assertFalse(node0.isContinue());
121:       assertFalse(node0.isObjectLit());
122:       assertFalse(node0.isCast());
123:       
124:       Iterable<Node> iterable0 = node0.children();
125:       assertEquals(54, Node.SLASH_V);
126:       assertEquals(15, Node.NO_SIDE_EFFECTS);
127:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
128:       assertEquals(30, Node.VAR_ARGS_NAME);
129:       assertEquals(52, Node.LENGTH);
130:       assertEquals(12, Node.COLUMN_BITS);
131:       assertEquals(1, Node.DECR_FLAG);
132:       assertEquals(32, Node.INCRDECR_PROP);
133:       assertEquals(57, Node.LAST_PROP);
134:       assertEquals(8, Node.FLAG_NO_THROWS);
135:       assertEquals(39, Node.EMPTY_BLOCK);
136:       assertEquals(48, Node.DIRECTIVES);
137:       assertEquals(37, Node.OPT_ARG_NAME);
138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
139:       assertEquals(29, Node.JSDOC_INFO_PROP);
140:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
141:       assertEquals(4095, Node.COLUMN_MASK);
142:       assertEquals(57, Node.REFLECTED_OBJECT);
143:       assertEquals(49, Node.DIRECT_EVAL);
144:       assertEquals(56, Node.CHANGE_TIME);
145:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
146:       assertEquals(36, Node.QUOTED_PROP);
147:       assertEquals(53, Node.INPUT_ID);
148:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
149:       assertEquals(55, Node.INFERRED_FUNCTION);
150:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
151:       assertEquals(2, Node.POST_FLAG);
152:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
154:       assertEquals(47, Node.IS_DISPATCHER);
155:       assertEquals(50, Node.FREE_CALL);
156:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
157:       assertEquals(40, Node.ORIGINALNAME_PROP);
158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
159:       assertEquals(46, Node.IS_NAMESPACE);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertFalse(iterable0.contains(node0));
162:       assertFalse(node0.isDebugger());
163:       assertFalse(node0.isVoid());
164:       assertFalse(node0.isTrue());
165:       assertFalse(node0.isRegExp());
166:       assertFalse(node0.isFunction());
167:       assertFalse(node0.isEmpty());
168:       assertFalse(node0.isFor());
169:       assertFalse(node0.isDefaultCase());
170:       assertFalse(node0.isTry());
171:       assertFalse(node0.isNE());
172:       assertFalse(node0.isNull());
173:       assertFalse(node0.isSetterDef());
174:       assertFalse(node0.isIn());
175:       assertFalse(node0.isCatch());
176:       assertFalse(node0.isCall());
177:       assertFalse(node0.isIf());
178:       assertFalse(node0.isDelProp());
179:       assertFalse(node0.isName());
180:       assertEquals((-1), node0.getCharno());
181:       assertFalse(node0.isNew());
182:       assertFalse(node0.isAdd());
183:       assertFalse(node0.isBlock());
184:       assertFalse(node0.isCase());
185:       assertEquals(39, node0.getType());
186:       assertFalse(node0.isVar());
187:       assertFalse(node0.isHook());
188:       assertFalse(node0.isDo());
189:       assertFalse(node0.isAssignAdd());
190:       assertFalse(node0.isParamList());
191:       assertFalse(node0.isLabel());
192:       assertEquals(0, node0.getChildCount());
193:       assertFalse(node0.isGetterDef());
194:       assertFalse(node0.isStringKey());
195:       assertFalse(node0.isArrayLit());
196:       assertFalse(node0.isSwitch());
197:       assertFalse(node0.isLabelName());
198:       assertFalse(node0.isScript());
199:       assertFalse(node0.isExprResult());
200:       assertFalse(node0.isNot());
201:       assertFalse(node0.isWith());
202:       assertFalse(node0.hasOneChild());
203:       assertFalse(node0.isComma());
204:       assertFalse(node0.isThis());
205:       assertFalse(node0.isReturn());
206:       assertFalse(node0.hasChildren());
207:       assertFalse(node0.isInstanceOf());
208:       assertFalse(node0.isDec());
209:       assertFalse(node0.isAssign());
210:       assertFalse(node0.isOr());
211:       assertFalse(node0.isTypeOf());
212:       assertFalse(node0.hasMoreThanOneChild());
213:       assertFalse(node0.isGetElem());
214:       assertFalse(node0.isBreak());
215:       assertEquals((-1), node0.getLineno());
216:       assertFalse(node0.isInc());
217:       assertFalse(node0.isString());
218:       assertFalse(node0.isThrow());
219:       assertFalse(node0.isWhile());
220:       assertTrue(node0.isNumber());
221:       assertFalse(node0.isGetProp());
222:       assertEquals((-1), node0.getSourcePosition());
223:       assertFalse(node0.isFalse());
224:       assertFalse(node0.isAnd());
225:       assertFalse(node0.isContinue());
226:       assertFalse(node0.isObjectLit());
227:       assertFalse(node0.isCast());
228:       
229:       node0.isDec();
230:       assertEquals(54, Node.SLASH_V);
231:       assertEquals(15, Node.NO_SIDE_EFFECTS);
232:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
233:       assertEquals(30, Node.VAR_ARGS_NAME);
234:       assertEquals(52, Node.LENGTH);
235:       assertEquals(12, Node.COLUMN_BITS);
236:       assertEquals(1, Node.DECR_FLAG);
237:       assertEquals(32, Node.INCRDECR_PROP);
238:       assertEquals(57, Node.LAST_PROP);
239:       assertEquals(8, Node.FLAG_NO_THROWS);
240:       assertEquals(39, Node.EMPTY_BLOCK);
241:       assertEquals(48, Node.DIRECTIVES);
242:       assertEquals(37, Node.OPT_ARG_NAME);
243:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
244:       assertEquals(29, Node.JSDOC_INFO_PROP);
245:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
246:       assertEquals(4095, Node.COLUMN_MASK);
247:       assertEquals(57, Node.REFLECTED_OBJECT);
248:       assertEquals(49, Node.DIRECT_EVAL);
249:       assertEquals(56, Node.CHANGE_TIME);
250:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
251:       assertEquals(36, Node.QUOTED_PROP);
252:       assertEquals(53, Node.INPUT_ID);
253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
254:       assertEquals(55, Node.INFERRED_FUNCTION);
255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
256:       assertEquals(2, Node.POST_FLAG);
257:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
258:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
259:       assertEquals(47, Node.IS_DISPATCHER);
260:       assertEquals(50, Node.FREE_CALL);
261:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
262:       assertEquals(40, Node.ORIGINALNAME_PROP);
263:       assertEquals(51, Node.STATIC_SOURCE_FILE);
264:       assertEquals(46, Node.IS_NAMESPACE);
265:       assertEquals(43, Node.IS_CONSTANT_NAME);
266:       assertFalse(node0.isDebugger());
267:       assertFalse(node0.isVoid());
268:       assertFalse(node0.isTrue());
269:       assertFalse(node0.isRegExp());
270:       assertFalse(node0.isFunction());
271:       assertFalse(node0.isEmpty());
272:       assertFalse(node0.isFor());
273:       assertFalse(node0.isDefaultCase());
274:       assertFalse(node0.isTry());
275:       assertFalse(node0.isNE());
276:       assertFalse(node0.isNull());
277:       assertFalse(node0.isSetterDef());
278:       assertFalse(node0.isIn());
279:       assertFalse(node0.isCatch());
280:       assertFalse(node0.isCall());
281:       assertFalse(node0.isIf());
282:       assertFalse(node0.isDelProp());
283:       assertFalse(node0.isName());
284:       assertEquals((-1), node0.getCharno());
285:       assertFalse(node0.isNew());
286:       assertFalse(node0.isAdd());
287:       assertFalse(node0.isBlock());
288:       assertFalse(node0.isCase());
289:       assertEquals(39, node0.getType());
290:       assertFalse(node0.isVar());
291:       assertFalse(node0.isHook());
292:       assertFalse(node0.isDo());
293:       assertFalse(node0.isAssignAdd());
294:       assertFalse(node0.isParamList());
295:       assertFalse(node0.isLabel());
296:       assertEquals(0, node0.getChildCount());
297:       assertFalse(node0.isGetterDef());
298:       assertFalse(node0.isStringKey());
299:       assertFalse(node0.isArrayLit());
300:       assertFalse(node0.isSwitch());
301:       assertFalse(node0.isLabelName());
302:       assertFalse(node0.isScript());
303:       assertFalse(node0.isExprResult());
304:       assertFalse(node0.isNot());
305:       assertFalse(node0.isWith());
306:       assertFalse(node0.hasOneChild());
307:       assertFalse(node0.isComma());
308:       assertFalse(node0.isThis());
309:       assertFalse(node0.isReturn());
310:       assertFalse(node0.hasChildren());
311:       assertFalse(node0.isInstanceOf());
312:       assertFalse(node0.isDec());
313:       assertFalse(node0.isAssign());
314:       assertFalse(node0.isOr());
315:       assertFalse(node0.isTypeOf());
316:       assertFalse(node0.hasMoreThanOneChild());
317:       assertFalse(node0.isGetElem());
318:       assertFalse(node0.isBreak());
319:       assertEquals((-1), node0.getLineno());
320:       assertFalse(node0.isInc());
321:       assertFalse(node0.isString());
322:       assertFalse(node0.isThrow());
323:       assertFalse(node0.isWhile());
324:       assertTrue(node0.isNumber());
325:       assertFalse(node0.isGetProp());
326:       assertEquals((-1), node0.getSourcePosition());
327:       assertFalse(node0.isFalse());
328:       assertFalse(node0.isAnd());
329:       assertFalse(node0.isContinue());
330:       assertFalse(node0.isObjectLit());
331:       assertFalse(node0.isCast());
332:       
333:       Node node1 = new Node(15, 0, 48);
334:       assertEquals(37, Node.OPT_ARG_NAME);
335:       assertEquals(2, Node.POST_FLAG);
336:       assertEquals(32, Node.INCRDECR_PROP);
337:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
338:       assertEquals(29, Node.JSDOC_INFO_PROP);
339:       assertEquals(1, Node.DECR_FLAG);
340:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
341:       assertEquals(30, Node.VAR_ARGS_NAME);
342:       assertEquals(12, Node.COLUMN_BITS);
343:       assertEquals(47, Node.IS_DISPATCHER);
344:       assertEquals(54, Node.SLASH_V);
345:       assertEquals(43, Node.IS_CONSTANT_NAME);
346:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
347:       assertEquals(50, Node.FREE_CALL);
348:       assertEquals(46, Node.IS_NAMESPACE);
349:       assertEquals(51, Node.STATIC_SOURCE_FILE);
350:       assertEquals(48, Node.DIRECTIVES);
351:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
352:       assertEquals(8, Node.FLAG_NO_THROWS);
353:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
354:       assertEquals(39, Node.EMPTY_BLOCK);
355:       assertEquals(40, Node.ORIGINALNAME_PROP);
356:       assertEquals(4095, Node.COLUMN_MASK);
357:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
358:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
359:       assertEquals(52, Node.LENGTH);
360:       assertEquals(57, Node.LAST_PROP);
361:       assertEquals(53, Node.INPUT_ID);
362:       assertEquals(15, Node.NO_SIDE_EFFECTS);
363:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
364:       assertEquals(55, Node.INFERRED_FUNCTION);
365:       assertEquals(49, Node.DIRECT_EVAL);
366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
367:       assertEquals(56, Node.CHANGE_TIME);
368:       assertEquals(36, Node.QUOTED_PROP);
369:       assertEquals(57, Node.REFLECTED_OBJECT);
370:       assertFalse(node1.isGetProp());
371:       assertFalse(node1.isComma());
372:       assertFalse(node1.isInstanceOf());
373:       assertFalse(node1.isBreak());
374:       assertFalse(node1.isFalse());
375:       assertFalse(node1.isWith());
376:       assertFalse(node1.isHook());
377:       assertEquals(48, node1.getSourcePosition());
378:       assertFalse(node1.isThis());
379:       assertFalse(node1.isThrow());
380:       assertFalse(node1.hasOneChild());
381:       assertFalse(node1.isString());
382:       assertFalse(node1.isScript());
383:       assertFalse(node1.isCast());
384:       assertFalse(node1.isAnd());
385:       assertFalse(node1.isObjectLit());
386:       assertFalse(node1.isNot());
387:       assertFalse(node1.isLabelName());
388:       assertFalse(node1.isSwitch());
389:       assertFalse(node1.isLabel());
390:       assertFalse(node1.isAssignAdd());
391:       assertFalse(node1.isOr());
392:       assertFalse(node1.isTypeOf());
393:       assertFalse(node1.isEmpty());
394:       assertFalse(node1.isAssign());
395:       assertFalse(node1.isDo());
396:       assertFalse(node1.isDec());
397:       assertFalse(node1.hasChildren());
398:       assertFalse(node1.isWhile());
399:       assertFalse(node1.isReturn());
400:       assertEquals(48, node1.getCharno());
401:       assertFalse(node1.isNew());
402:       assertFalse(node1.isVoid());
403:       assertFalse(node1.isExprResult());
404:       assertFalse(node1.isCall());
405:       assertFalse(node1.isAdd());
406:       assertFalse(node1.isGetElem());
407:       assertFalse(node1.isName());
408:       assertFalse(node1.isDelProp());
409:       assertFalse(node1.isNull());
410:       assertFalse(node1.isTrue());
411:       assertEquals(0, node1.getLineno());
412:       assertEquals(15, node1.getType());
413:       assertEquals(0, node1.getChildCount());
414:       assertFalse(node1.isCatch());
415:       assertFalse(node1.isSetterDef());
416:       assertFalse(node1.isDefaultCase());
417:       assertFalse(node1.isVar());
418:       assertFalse(node1.isDebugger());
419:       assertFalse(node1.isFunction());
420:       assertFalse(node1.isTry());
421:       assertFalse(node1.isArrayLit());
422:       assertFalse(node1.isStringKey());
423:       assertFalse(node1.isGetterDef());
424:       assertFalse(node1.isParamList());
425:       assertFalse(node1.isNumber());
426:       assertFalse(node1.isIn());
427:       assertFalse(node1.hasMoreThanOneChild());
428:       assertFalse(node1.isCase());
429:       assertFalse(node1.isContinue());
430:       assertFalse(node1.isFor());
431:       assertFalse(node1.isBlock());
432:       assertFalse(node1.isRegExp());
433:       assertFalse(node1.isInc());
434:       assertFalse(node1.isIf());
435:       assertFalse(node1.isNE());
436:       
437:       Node node2 = node0.clonePropsFrom(node1);
438:       assertEquals(54, Node.SLASH_V);
439:       assertEquals(15, Node.NO_SIDE_EFFECTS);
440:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
441:       assertEquals(30, Node.VAR_ARGS_NAME);
442:       assertEquals(52, Node.LENGTH);
443:       assertEquals(12, Node.COLUMN_BITS);
444:       assertEquals(1, Node.DECR_FLAG);
445:       assertEquals(32, Node.INCRDECR_PROP);
446:       assertEquals(57, Node.LAST_PROP);
447:       assertEquals(8, Node.FLAG_NO_THROWS);
448:       assertEquals(39, Node.EMPTY_BLOCK);
449:       assertEquals(48, Node.DIRECTIVES);
450:       assertEquals(37, Node.OPT_ARG_NAME);
451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
452:       assertEquals(29, Node.JSDOC_INFO_PROP);
453:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
454:       assertEquals(4095, Node.COLUMN_MASK);
455:       assertEquals(57, Node.REFLECTED_OBJECT);
456:       assertEquals(49, Node.DIRECT_EVAL);
457:       assertEquals(56, Node.CHANGE_TIME);
458:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
459:       assertEquals(36, Node.QUOTED_PROP);
460:       assertEquals(53, Node.INPUT_ID);
461:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
462:       assertEquals(55, Node.INFERRED_FUNCTION);
463:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
464:       assertEquals(2, Node.POST_FLAG);
465:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
466:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
467:       assertEquals(47, Node.IS_DISPATCHER);
468:       assertEquals(50, Node.FREE_CALL);
469:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
470:       assertEquals(40, Node.ORIGINALNAME_PROP);
471:       assertEquals(51, Node.STATIC_SOURCE_FILE);
472:       assertEquals(46, Node.IS_NAMESPACE);
473:       assertEquals(43, Node.IS_CONSTANT_NAME);
474:       assertEquals(37, Node.OPT_ARG_NAME);
475:       assertEquals(2, Node.POST_FLAG);
476:       assertEquals(32, Node.INCRDECR_PROP);
477:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
478:       assertEquals(29, Node.JSDOC_INFO_PROP);
479:       assertEquals(1, Node.DECR_FLAG);
480:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
481:       assertEquals(30, Node.VAR_ARGS_NAME);
482:       assertEquals(12, Node.COLUMN_BITS);
483:       assertEquals(47, Node.IS_DISPATCHER);
484:       assertEquals(54, Node.SLASH_V);
485:       assertEquals(43, Node.IS_CONSTANT_NAME);
486:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
487:       assertEquals(50, Node.FREE_CALL);
488:       assertEquals(46, Node.IS_NAMESPACE);
489:       assertEquals(51, Node.STATIC_SOURCE_FILE);
490:       assertEquals(48, Node.DIRECTIVES);
491:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
492:       assertEquals(8, Node.FLAG_NO_THROWS);
493:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
494:       assertEquals(39, Node.EMPTY_BLOCK);
495:       assertEquals(40, Node.ORIGINALNAME_PROP);
496:       assertEquals(4095, Node.COLUMN_MASK);
497:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
499:       assertEquals(52, Node.LENGTH);
500:       assertEquals(57, Node.LAST_PROP);
501:       assertEquals(53, Node.INPUT_ID);
502:       assertEquals(15, Node.NO_SIDE_EFFECTS);
503:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
504:       assertEquals(55, Node.INFERRED_FUNCTION);
505:       assertEquals(49, Node.DIRECT_EVAL);
506:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
507:       assertEquals(56, Node.CHANGE_TIME);
508:       assertEquals(36, Node.QUOTED_PROP);
509:       assertEquals(57, Node.REFLECTED_OBJECT);
510:       assertEquals(48, Node.DIRECTIVES);
511:       assertEquals(8, Node.FLAG_NO_THROWS);
512:       assertEquals(39, Node.EMPTY_BLOCK);
513:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
514:       assertEquals(50, Node.FREE_CALL);
515:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
516:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
517:       assertEquals(55, Node.INFERRED_FUNCTION);
518:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
519:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
520:       assertEquals(53, Node.INPUT_ID);
521:       assertEquals(52, Node.LENGTH);
522:       assertEquals(57, Node.REFLECTED_OBJECT);
523:       assertEquals(36, Node.QUOTED_PROP);
524:       assertEquals(4095, Node.COLUMN_MASK);
525:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
526:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
527:       assertEquals(49, Node.DIRECT_EVAL);
528:       assertEquals(37, Node.OPT_ARG_NAME);
529:       assertEquals(56, Node.CHANGE_TIME);
530:       assertEquals(46, Node.IS_NAMESPACE);
531:       assertEquals(47, Node.IS_DISPATCHER);
532:       assertEquals(2, Node.POST_FLAG);
533:       assertEquals(51, Node.STATIC_SOURCE_FILE);
534:       assertEquals(29, Node.JSDOC_INFO_PROP);
535:       assertEquals(12, Node.COLUMN_BITS);
536:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
537:       assertEquals(57, Node.LAST_PROP);
538:       assertEquals(32, Node.INCRDECR_PROP);
539:       assertEquals(15, Node.NO_SIDE_EFFECTS);
540:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
541:       assertEquals(1, Node.DECR_FLAG);
542:       assertEquals(54, Node.SLASH_V);
543:       assertEquals(43, Node.IS_CONSTANT_NAME);
544:       assertEquals(30, Node.VAR_ARGS_NAME);
545:       assertEquals(40, Node.ORIGINALNAME_PROP);
546:       assertFalse(node0.isDebugger());
547:       assertFalse(node0.isVoid());
548:       assertFalse(node0.isTrue());
549:       assertFalse(node0.isRegExp());
550:       assertFalse(node0.isFunction());
551:       assertFalse(node0.isEmpty());
552:       assertFalse(node0.isFor());
553:       assertFalse(node0.isDefaultCase());
554:       assertFalse(node0.isTry());
555:       assertFalse(node0.isNE());
556:       assertFalse(node0.isNull());
557:       assertFalse(node0.isSetterDef());
558:       assertFalse(node0.isIn());
559:       assertFalse(node0.isCatch());
560:       assertFalse(node0.isCall());
561:       assertFalse(node0.isIf());
562:       assertFalse(node0.isDelProp());
563:       assertFalse(node0.isName());
564:       assertEquals((-1), node0.getCharno());
565:       assertFalse(node0.isNew());
566:       assertFalse(node0.isAdd());
567:       assertFalse(node0.isBlock());
568:       assertFalse(node0.isCase());
569:       assertEquals(39, node0.getType());
570:       assertFalse(node0.isVar());
571:       assertFalse(node0.isHook());
572:       assertFalse(node0.isDo());
573:       assertFalse(node0.isAssignAdd());
574:       assertFalse(node0.isParamList());
575:       assertFalse(node0.isLabel());
576:       assertEquals(0, node0.getChildCount());
577:       assertFalse(node0.isGetterDef());
578:       assertFalse(node0.isStringKey());
579:       assertFalse(node0.isArrayLit());
580:       assertFalse(node0.isSwitch());
581:       assertFalse(node0.isLabelName());
582:       assertFalse(node0.isScript());
583:       assertFalse(node0.isExprResult());
584:       assertFalse(node0.isNot());
585:       assertFalse(node0.isWith());
586:       assertFalse(node0.hasOneChild());
587:       assertFalse(node0.isComma());
588:       assertFalse(node0.isThis());
589:       assertFalse(node0.isReturn());
590:       assertFalse(node0.hasChildren());
591:       assertFalse(node0.isInstanceOf());
592:       assertFalse(node0.isDec());
593:       assertFalse(node0.isAssign());
594:       assertFalse(node0.isOr());
595:       assertFalse(node0.isTypeOf());
596:       assertFalse(node0.hasMoreThanOneChild());
597:       assertFalse(node0.isGetElem());
598:       assertFalse(node0.isBreak());
599:       assertEquals((-1), node0.getLineno());
600:       assertFalse(node0.isInc());
601:       assertFalse(node0.isString());
602:       assertFalse(node0.isThrow());
603:       assertFalse(node0.isWhile());
604:       assertTrue(node0.isNumber());
605:       assertFalse(node0.isGetProp());
606:       assertEquals((-1), node0.getSourcePosition());
607:       assertFalse(node0.isFalse());
608:       assertFalse(node0.isAnd());
609:       assertFalse(node0.isContinue());
610:       assertFalse(node0.isObjectLit());
611:       assertFalse(node0.isCast());
612:       assertFalse(node1.isGetProp());
613:       assertFalse(node1.isComma());
614:       assertFalse(node1.isInstanceOf());
615:       assertFalse(node1.isBreak());
616:       assertFalse(node1.isFalse());
617:       assertFalse(node1.isWith());
618:       assertFalse(node1.isHook());
619:       assertEquals(48, node1.getSourcePosition());
620:       assertFalse(node1.isThis());
621:       assertFalse(node1.isThrow());
622:       assertFalse(node1.hasOneChild());
623:       assertFalse(node1.isString());
624:       assertFalse(node1.isScript());
625:       assertFalse(node1.isCast());
626:       assertFalse(node1.isAnd());
627:       assertFalse(node1.isObjectLit());
628:       assertFalse(node1.isNot());
629:       assertFalse(node1.isLabelName());
630:       assertFalse(node1.isSwitch());
631:       assertFalse(node1.isLabel());
632:       assertFalse(node1.isAssignAdd());
633:       assertFalse(node1.isOr());
634:       assertFalse(node1.isTypeOf());
635:       assertFalse(node1.isEmpty());
636:       assertFalse(node1.isAssign());
637:       assertFalse(node1.isDo());
638:       assertFalse(node1.isDec());
639:       assertFalse(node1.hasChildren());
640:       assertFalse(node1.isWhile());
641:       assertFalse(node1.isReturn());
642:       assertEquals(48, node1.getCharno());
643:       assertFalse(node1.isNew());
644:       assertFalse(node1.isVoid());
645:       assertFalse(node1.isExprResult());
646:       assertFalse(node1.isCall());
647:       assertFalse(node1.isAdd());
648:       assertFalse(node1.isGetElem());
649:       assertFalse(node1.isName());
650:       assertFalse(node1.isDelProp());
651:       assertFalse(node1.isNull());
652:       assertFalse(node1.isTrue());
653:       assertEquals(0, node1.getLineno());
654:       assertEquals(15, node1.getType());
655:       assertEquals(0, node1.getChildCount());
656:       assertFalse(node1.isCatch());
657:       assertFalse(node1.isSetterDef());
658:       assertFalse(node1.isDefaultCase());
659:       assertFalse(node1.isVar());
660:       assertFalse(node1.isDebugger());
661:       assertFalse(node1.isFunction());
662:       assertFalse(node1.isTry());
663:       assertFalse(node1.isArrayLit());
664:       assertFalse(node1.isStringKey());
665:       assertFalse(node1.isGetterDef());
666:       assertFalse(node1.isParamList());
667:       assertFalse(node1.isNumber());
668:       assertFalse(node1.isIn());
669:       assertFalse(node1.hasMoreThanOneChild());
670:       assertFalse(node1.isCase());
671:       assertFalse(node1.isContinue());
672:       assertFalse(node1.isFor());
673:       assertFalse(node1.isBlock());
674:       assertFalse(node1.isRegExp());
675:       assertFalse(node1.isInc());
676:       assertFalse(node1.isIf());
677:       assertFalse(node1.isNE());
678:       assertTrue(node2.isNumber());
679:       assertFalse(node2.isIn());
680:       assertFalse(node2.isNE());
681:       assertFalse(node2.isEmpty());
682:       assertFalse(node2.isCase());
683:       assertFalse(node2.isFor());
684:       assertFalse(node2.isString());
685:       assertFalse(node2.isGetterDef());
686:       assertFalse(node2.isInc());
687:       assertFalse(node2.isTry());
688:       assertFalse(node2.isVoid());
689:       assertFalse(node2.isRegExp());
690:       assertFalse(node2.isTrue());
691:       assertFalse(node2.isHook());
692:       assertFalse(node2.isDelProp());
693:       assertFalse(node2.isIf());
694:       assertFalse(node2.isCatch());
695:       assertFalse(node2.isBreak());
696:       assertFalse(node2.isComma());
697:       assertFalse(node2.isThrow());
698:       assertFalse(node2.isNot());
699:       assertFalse(node2.isObjectLit());
700:       assertFalse(node2.isGetProp());
701:       assertFalse(node2.isSetterDef());
702:       assertFalse(node2.isFunction());
703:       assertFalse(node2.isDebugger());
704:       assertFalse(node2.isAnd());
705:       assertFalse(node2.isContinue());
706:       assertFalse(node2.isFalse());
707:       assertFalse(node2.isCast());
708:       assertFalse(node2.isLabel());
709:       assertEquals((-1), node2.getLineno());
710:       assertFalse(node2.isOr());
711:       assertFalse(node2.isAssignAdd());
712:       assertEquals((-1), node2.getSourcePosition());
713:       assertFalse(node2.isTypeOf());
714:       assertFalse(node2.isDec());
715:       assertFalse(node2.isReturn());
716:       assertFalse(node2.hasChildren());
717:       assertFalse(node2.isDo());
718:       assertFalse(node2.isWhile());
719:       assertFalse(node2.hasOneChild());
720:       assertFalse(node2.isAdd());
721:       assertFalse(node2.isBlock());
722:       assertEquals(39, node2.getType());
723:       assertFalse(node2.isName());
724:       assertFalse(node2.isAssign());
725:       assertFalse(node2.isWith());
726:       assertFalse(node2.hasMoreThanOneChild());
727:       assertFalse(node2.isInstanceOf());
728:       assertFalse(node2.isExprResult());
729:       assertFalse(node2.isCall());
730:       assertFalse(node2.isGetElem());
731:       assertFalse(node2.isParamList());
732:       assertFalse(node2.isNull());
733:       assertEquals(0, node2.getChildCount());
734:       assertFalse(node2.isThis());
735:       assertFalse(node2.isDefaultCase());
736:       assertFalse(node2.isScript());
737:       assertFalse(node2.isNew());
738:       assertFalse(node2.isSwitch());
739:       assertFalse(node2.isVar());
740:       assertEquals((-1), node2.getCharno());
741:       assertFalse(node2.isStringKey());
742:       assertFalse(node2.isLabelName());
743:       assertFalse(node2.isArrayLit());
744:       
745:       node0.isFromExterns();
746:       assertEquals(54, Node.SLASH_V);
747:       assertEquals(15, Node.NO_SIDE_EFFECTS);
748:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
749:       assertEquals(30, Node.VAR_ARGS_NAME);
750:       assertEquals(52, Node.LENGTH);
751:       assertEquals(12, Node.COLUMN_BITS);
752:       assertEquals(1, Node.DECR_FLAG);
753:       assertEquals(32, Node.INCRDECR_PROP);
754:       assertEquals(57, Node.LAST_PROP);
755:       assertEquals(8, Node.FLAG_NO_THROWS);
756:       assertEquals(39, Node.EMPTY_BLOCK);
757:       assertEquals(48, Node.DIRECTIVES);
758:       assertEquals(37, Node.OPT_ARG_NAME);
759:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
760:       assertEquals(29, Node.JSDOC_INFO_PROP);
761:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
762:       assertEquals(4095, Node.COLUMN_MASK);
763:       assertEquals(57, Node.REFLECTED_OBJECT);
764:       assertEquals(49, Node.DIRECT_EVAL);
765:       assertEquals(56, Node.CHANGE_TIME);
766:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
767:       assertEquals(36, Node.QUOTED_PROP);
768:       assertEquals(53, Node.INPUT_ID);
769:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
770:       assertEquals(55, Node.INFERRED_FUNCTION);
771:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
772:       assertEquals(2, Node.POST_FLAG);
773:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
774:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
775:       assertEquals(47, Node.IS_DISPATCHER);
776:       assertEquals(50, Node.FREE_CALL);
777:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
778:       assertEquals(40, Node.ORIGINALNAME_PROP);
779:       assertEquals(51, Node.STATIC_SOURCE_FILE);
780:       assertEquals(46, Node.IS_NAMESPACE);
781:       assertEquals(43, Node.IS_CONSTANT_NAME);
782:       assertFalse(node0.isDebugger());
783:       assertFalse(node0.isVoid());
784:       assertFalse(node0.isTrue());
785:       assertFalse(node0.isRegExp());
786:       assertFalse(node0.isFunction());
787:       assertFalse(node0.isEmpty());
788:       assertFalse(node0.isFor());
789:       assertFalse(node0.isDefaultCase());
790:       assertFalse(node0.isTry());
791:       assertFalse(node0.isNE());
792:       assertFalse(node0.isNull());
793:       assertFalse(node0.isSetterDef());
794:       assertFalse(node0.isIn());
795:       assertFalse(node0.isCatch());
796:       assertFalse(node0.isCall());
797:       assertFalse(node0.isIf());
798:       assertFalse(node0.isDelProp());
799:       assertFalse(node0.isName());
800:       assertEquals((-1), node0.getCharno());
801:       assertFalse(node0.isNew());
802:       assertFalse(node0.isAdd());
803:       assertFalse(node0.isBlock());
804:       assertFalse(node0.isCase());
805:       assertEquals(39, node0.getType());
806:       assertFalse(node0.isVar());
807:       assertFalse(node0.isHook());
808:       assertFalse(node0.isDo());
809:       assertFalse(node0.isAssignAdd());
810:       assertFalse(node0.isParamList());
811:       assertFalse(node0.isLabel());
812:       assertEquals(0, node0.getChildCount());
813:       assertFalse(node0.isGetterDef());
814:       assertFalse(node0.isStringKey());
815:       assertFalse(node0.isArrayLit());
816:       assertFalse(node0.isSwitch());
817:       assertFalse(node0.isLabelName());
818:       assertFalse(node0.isScript());
819:       assertFalse(node0.isExprResult());
820:       assertFalse(node0.isNot());
821:       assertFalse(node0.isWith());
822:       assertFalse(node0.hasOneChild());
823:       assertFalse(node0.isComma());
824:       assertFalse(node0.isThis());
825:       assertFalse(node0.isReturn());
826:       assertFalse(node0.hasChildren());
827:       assertFalse(node0.isInstanceOf());
828:       assertFalse(node0.isDec());
829:       assertFalse(node0.isAssign());
830:       assertFalse(node0.isOr());
831:       assertFalse(node0.isTypeOf());
832:       assertFalse(node0.hasMoreThanOneChild());
833:       assertFalse(node0.isGetElem());
834:       assertFalse(node0.isBreak());
835:       assertEquals((-1), node0.getLineno());
836:       assertFalse(node0.isInc());
837:       assertFalse(node0.isString());
838:       assertFalse(node0.isThrow());
839:       assertFalse(node0.isWhile());
840:       assertTrue(node0.isNumber());
841:       assertFalse(node0.isGetProp());
842:       assertEquals((-1), node0.getSourcePosition());
843:       assertFalse(node0.isFalse());
844:       assertFalse(node0.isAnd());
845:       assertFalse(node0.isContinue());
846:       assertFalse(node0.isObjectLit());
847:       assertFalse(node0.isCast());
848:       
849:       node0.isBreak();
850:       assertEquals(54, Node.SLASH_V);
851:       assertEquals(15, Node.NO_SIDE_EFFECTS);
852:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
853:       assertEquals(30, Node.VAR_ARGS_NAME);
854:       assertEquals(52, Node.LENGTH);
855:       assertEquals(12, Node.COLUMN_BITS);
856:       assertEquals(1, Node.DECR_FLAG);
857:       assertEquals(32, Node.INCRDECR_PROP);
858:       assertEquals(57, Node.LAST_PROP);
859:       assertEquals(8, Node.FLAG_NO_THROWS);
860:       assertEquals(39, Node.EMPTY_BLOCK);
861:       assertEquals(48, Node.DIRECTIVES);
862:       assertEquals(37, Node.OPT_ARG_NAME);
863:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
864:       assertEquals(29, Node.JSDOC_INFO_PROP);
865:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
866:       assertEquals(4095, Node.COLUMN_MASK);
867:       assertEquals(57, Node.REFLECTED_OBJECT);
868:       assertEquals(49, Node.DIRECT_EVAL);
869:       assertEquals(56, Node.CHANGE_TIME);
870:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
871:       assertEquals(36, Node.QUOTED_PROP);
872:       assertEquals(53, Node.INPUT_ID);
873:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
874:       assertEquals(55, Node.INFERRED_FUNCTION);
875:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
876:       assertEquals(2, Node.POST_FLAG);
877:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
878:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
879:       assertEquals(47, Node.IS_DISPATCHER);
880:       assertEquals(50, Node.FREE_CALL);
881:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
882:       assertEquals(40, Node.ORIGINALNAME_PROP);
883:       assertEquals(51, Node.STATIC_SOURCE_FILE);
884:       assertEquals(46, Node.IS_NAMESPACE);
885:       assertEquals(43, Node.IS_CONSTANT_NAME);
886:       assertFalse(node0.isDebugger());
887:       assertFalse(node0.isVoid());
888:       assertFalse(node0.isTrue());
889:       assertFalse(node0.isRegExp());
890:       assertFalse(node0.isFunction());
891:       assertFalse(node0.isEmpty());
892:       assertFalse(node0.isFor());
893:       assertFalse(node0.isDefaultCase());
894:       assertFalse(node0.isTry());
895:       assertFalse(node0.isNE());
896:       assertFalse(node0.isNull());
897:       assertFalse(node0.isSetterDef());
898:       assertFalse(node0.isIn());
899:       assertFalse(node0.isCatch());
900:       assertFalse(node0.isCall());
901:       assertFalse(node0.isIf());
902:       assertFalse(node0.isDelProp());
903:       assertFalse(node0.isName());
904:       assertEquals((-1), node0.getCharno());
905:       assertFalse(node0.isNew());
906:       assertFalse(node0.isAdd());
907:       assertFalse(node0.isBlock());
908:       assertFalse(node0.isCase());
909:       assertEquals(39, node0.getType());
910:       assertFalse(node0.isVar());
911:       assertFalse(node0.isHook());
912:       assertFalse(node0.isDo());
913:       assertFalse(node0.isAssignAdd());
914:       assertFalse(node0.isParamList());
915:       assertFalse(node0.isLabel());
916:       assertEquals(0, node0.getChildCount());
917:       assertFalse(node0.isGetterDef());
918:       assertFalse(node0.isStringKey());
919:       assertFalse(node0.isArrayLit());
920:       assertFalse(node0.isSwitch());
921:       assertFalse(node0.isLabelName());
922:       assertFalse(node0.isScript());
923:       assertFalse(node0.isExprResult());
924:       assertFalse(node0.isNot());
925:       assertFalse(node0.isWith());
926:       assertFalse(node0.hasOneChild());
927:       assertFalse(node0.isComma());
928:       assertFalse(node0.isThis());
929:       assertFalse(node0.isReturn());
930:       assertFalse(node0.hasChildren());
931:       assertFalse(node0.isInstanceOf());
932:       assertFalse(node0.isDec());
933:       assertFalse(node0.isAssign());
934:       assertFalse(node0.isOr());
935:       assertFalse(node0.isTypeOf());
936:       assertFalse(node0.hasMoreThanOneChild());
937:       assertFalse(node0.isGetElem());
938:       assertFalse(node0.isBreak());
939:       assertEquals((-1), node0.getLineno());
940:       assertFalse(node0.isInc());
941:       assertFalse(node0.isString());
942:       assertFalse(node0.isThrow());
943:       assertFalse(node0.isWhile());
944:       assertTrue(node0.isNumber());
945:       assertFalse(node0.isGetProp());
946:       assertEquals((-1), node0.getSourcePosition());
947:       assertFalse(node0.isFalse());
948:       assertFalse(node0.isAnd());
949:       assertFalse(node0.isContinue());
950:       assertFalse(node0.isObjectLit());
951:       assertFalse(node0.isCast());
952:       
953:       Node node3 = node0.srcrefTree(node2);
954:       assertEquals(54, Node.SLASH_V);
955:       assertEquals(15, Node.NO_SIDE_EFFECTS);
956:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
957:       assertEquals(30, Node.VAR_ARGS_NAME);
958:       assertEquals(52, Node.LENGTH);
959:       assertEquals(12, Node.COLUMN_BITS);
960:       assertEquals(1, Node.DECR_FLAG);
961:       assertEquals(32, Node.INCRDECR_PROP);
962:       assertEquals(57, Node.LAST_PROP);
963:       assertEquals(8, Node.FLAG_NO_THROWS);
964:       assertEquals(39, Node.EMPTY_BLOCK);
965:       assertEquals(48, Node.DIRECTIVES);
966:       assertEquals(37, Node.OPT_ARG_NAME);
967:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
968:       assertEquals(29, Node.JSDOC_INFO_PROP);
969:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
970:       assertEquals(4095, Node.COLUMN_MASK);
971:       assertEquals(57, Node.REFLECTED_OBJECT);
972:       assertEquals(49, Node.DIRECT_EVAL);
973:       assertEquals(56, Node.CHANGE_TIME);
974:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
975:       assertEquals(36, Node.QUOTED_PROP);
976:       assertEquals(53, Node.INPUT_ID);
977:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
978:       assertEquals(55, Node.INFERRED_FUNCTION);
979:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
980:       assertEquals(2, Node.POST_FLAG);
981:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
982:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
983:       assertEquals(47, Node.IS_DISPATCHER);
984:       assertEquals(50, Node.FREE_CALL);
985:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
986:       assertEquals(40, Node.ORIGINALNAME_PROP);
987:       assertEquals(51, Node.STATIC_SOURCE_FILE);
988:       assertEquals(46, Node.IS_NAMESPACE);
989:       assertEquals(43, Node.IS_CONSTANT_NAME);
990:       assertEquals(37, Node.OPT_ARG_NAME);
991:       assertEquals(2, Node.POST_FLAG);
992:       assertEquals(32, Node.INCRDECR_PROP);
993:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
994:       assertEquals(29, Node.JSDOC_INFO_PROP);
995:       assertEquals(1, Node.DECR_FLAG);
996:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
997:       assertEquals(30, Node.VAR_ARGS_NAME);
998:       assertEquals(12, Node.COLUMN_BITS);
999:       assertEquals(47, Node.IS_DISPATCHER);
1000:       assertEquals(54, Node.SLASH_V);
1001:       assertEquals(43, Node.IS_CONSTANT_NAME);
1002:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1003:       assertEquals(50, Node.FREE_CALL);
1004:       assertEquals(46, Node.IS_NAMESPACE);
1005:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1006:       assertEquals(48, Node.DIRECTIVES);
1007:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1008:       assertEquals(8, Node.FLAG_NO_THROWS);
1009:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1010:       assertEquals(39, Node.EMPTY_BLOCK);
1011:       assertEquals(40, Node.ORIGINALNAME_PROP);
1012:       assertEquals(4095, Node.COLUMN_MASK);
1013:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1014:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1015:       assertEquals(52, Node.LENGTH);
1016:       assertEquals(57, Node.LAST_PROP);
1017:       assertEquals(53, Node.INPUT_ID);
1018:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1019:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1020:       assertEquals(55, Node.INFERRED_FUNCTION);
1021:       assertEquals(49, Node.DIRECT_EVAL);
1022:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1023:       assertEquals(56, Node.CHANGE_TIME);
1024:       assertEquals(36, Node.QUOTED_PROP);
1025:       assertEquals(57, Node.REFLECTED_OBJECT);
1026:       assertEquals(48, Node.DIRECTIVES);
1027:       assertEquals(8, Node.FLAG_NO_THROWS);
1028:       assertEquals(39, Node.EMPTY_BLOCK);
1029:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1030:       assertEquals(50, Node.FREE_CALL);
1031:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1032:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1033:       assertEquals(55, Node.INFERRED_FUNCTION);
1034:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1035:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1036:       assertEquals(53, Node.INPUT_ID);
1037:       assertEquals(52, Node.LENGTH);
1038:       assertEquals(57, Node.REFLECTED_OBJECT);
1039:       assertEquals(36, Node.QUOTED_PROP);
1040:       assertEquals(4095, Node.COLUMN_MASK);
1041:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1042:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1043:       assertEquals(49, Node.DIRECT_EVAL);
1044:       assertEquals(37, Node.OPT_ARG_NAME);
1045:       assertEquals(56, Node.CHANGE_TIME);
1046:       assertEquals(46, Node.IS_NAMESPACE);
1047:       assertEquals(47, Node.IS_DISPATCHER);
1048:       assertEquals(2, Node.POST_FLAG);
1049:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1050:       assertEquals(29, Node.JSDOC_INFO_PROP);
1051:       assertEquals(12, Node.COLUMN_BITS);
1052:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1053:       assertEquals(57, Node.LAST_PROP);
1054:       assertEquals(32, Node.INCRDECR_PROP);
1055:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1056:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1057:       assertEquals(1, Node.DECR_FLAG);
1058:       assertEquals(54, Node.SLASH_V);
1059:       assertEquals(43, Node.IS_CONSTANT_NAME);
1060:       assertEquals(30, Node.VAR_ARGS_NAME);
1061:       assertEquals(40, Node.ORIGINALNAME_PROP);
1062:       assertEquals(4095, Node.COLUMN_MASK);
1063:       assertEquals(55, Node.INFERRED_FUNCTION);
1064:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1065:       assertEquals(53, Node.INPUT_ID);
1066:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1067:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1068:       assertEquals(50, Node.FREE_CALL);
1069:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1070:       assertEquals(40, Node.ORIGINALNAME_PROP);
1071:       assertEquals(43, Node.IS_CONSTANT_NAME);
1072:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1073:       assertEquals(46, Node.IS_NAMESPACE);
1074:       assertEquals(54, Node.SLASH_V);
1075:       assertEquals(1, Node.DECR_FLAG);
1076:       assertEquals(30, Node.VAR_ARGS_NAME);
1077:       assertEquals(49, Node.DIRECT_EVAL);
1078:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1079:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1080:       assertEquals(2, Node.POST_FLAG);
1081:       assertEquals(32, Node.INCRDECR_PROP);
1082:       assertEquals(47, Node.IS_DISPATCHER);
1083:       assertEquals(57, Node.LAST_PROP);
1084:       assertEquals(12, Node.COLUMN_BITS);
1085:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1086:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1087:       assertEquals(39, Node.EMPTY_BLOCK);
1088:       assertEquals(29, Node.JSDOC_INFO_PROP);
1089:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1090:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1091:       assertEquals(37, Node.OPT_ARG_NAME);
1092:       assertEquals(52, Node.LENGTH);
1093:       assertEquals(8, Node.FLAG_NO_THROWS);
1094:       assertEquals(48, Node.DIRECTIVES);
1095:       assertEquals(56, Node.CHANGE_TIME);
1096:       assertEquals(36, Node.QUOTED_PROP);
1097:       assertEquals(57, Node.REFLECTED_OBJECT);
1098:       assertFalse(node0.isDebugger());
1099:       assertFalse(node0.isVoid());
1100:       assertFalse(node0.isTrue());
1101:       assertFalse(node0.isRegExp());
1102:       assertFalse(node0.isFunction());
1103:       assertFalse(node0.isEmpty());
1104:       assertFalse(node0.isFor());
1105:       assertFalse(node0.isDefaultCase());
1106:       assertFalse(node0.isTry());
1107:       assertFalse(node0.isNE());
1108:       assertFalse(node0.isNull());
1109:       assertFalse(node0.isSetterDef());
1110:       assertFalse(node0.isIn());
1111:       assertFalse(node0.isCatch());
1112:       assertFalse(node0.isCall());
1113:       assertFalse(node0.isIf());
1114:       assertFalse(node0.isDelProp());
1115:       assertFalse(node0.isName());
1116:       assertEquals((-1), node0.getCharno());
1117:       assertFalse(node0.isNew());
1118:       assertFalse(node0.isAdd());
1119:       assertFalse(node0.isBlock());
1120:       assertFalse(node0.isCase());
1121:       assertEquals(39, node0.getType());
1122:       assertFalse(node0.isVar());
1123:       assertFalse(node0.isHook());
1124:       assertFalse(node0.isDo());
1125:       assertFalse(node0.isAssignAdd());
1126:       assertFalse(node0.isParamList());
1127:       assertFalse(node0.isLabel());
1128:       assertEquals(0, node0.getChildCount());
1129:       assertFalse(node0.isGetterDef());
1130:       assertFalse(node0.isStringKey());
1131:       assertFalse(node0.isArrayLit());
1132:       assertFalse(node0.isSwitch());
1133:       assertFalse(node0.isLabelName());
1134:       assertFalse(node0.isScript());
1135:       assertFalse(node0.isExprResult());
1136:       assertFalse(node0.isNot());
1137:       assertFalse(node0.isWith());
1138:       assertFalse(node0.hasOneChild());
1139:       assertFalse(node0.isComma());
1140:       assertFalse(node0.isThis());
1141:       assertFalse(node0.isReturn());
1142:       assertFalse(node0.hasChildren());
1143:       assertFalse(node0.isInstanceOf());
1144:       assertFalse(node0.isDec());
1145:       assertFalse(node0.isAssign());
1146:       assertFalse(node0.isOr());
1147:       assertFalse(node0.isTypeOf());
1148:       assertFalse(node0.hasMoreThanOneChild());
1149:       assertFalse(node0.isGetElem());
1150:       assertFalse(node0.isBreak());
1151:       assertEquals((-1), node0.getLineno());
1152:       assertFalse(node0.isInc());
1153:       assertFalse(node0.isString());
1154:       assertFalse(node0.isThrow());
1155:       assertFalse(node0.isWhile());
1156:       assertTrue(node0.isNumber());
1157:       assertFalse(node0.isGetProp());
1158:       assertEquals((-1), node0.getSourcePosition());
1159:       assertFalse(node0.isFalse());
1160:       assertFalse(node0.isAnd());
1161:       assertFalse(node0.isContinue());
1162:       assertFalse(node0.isObjectLit());
1163:       assertFalse(node0.isCast());
1164:       assertFalse(node1.isGetProp());
1165:       assertFalse(node1.isComma());
1166:       assertFalse(node1.isInstanceOf());
1167:       assertFalse(node1.isBreak());
1168:       assertFalse(node1.isFalse());
1169:       assertFalse(node1.isWith());
1170:       assertFalse(node1.isHook());
1171:       assertEquals(48, node1.getSourcePosition());
1172:       assertFalse(node1.isThis());
1173:       assertFalse(node1.isThrow());
1174:       assertFalse(node1.hasOneChild());
1175:       assertFalse(node1.isString());
1176:       assertFalse(node1.isScript());
1177:       assertFalse(node1.isCast());
1178:       assertFalse(node1.isAnd());
1179:       assertFalse(node1.isObjectLit());
1180:       assertFalse(node1.isNot());
1181:       assertFalse(node1.isLabelName());
1182:       assertFalse(node1.isSwitch());
1183:       assertFalse(node1.isLabel());
1184:       assertFalse(node1.isAssignAdd());
1185:       assertFalse(node1.isOr());
1186:       assertFalse(node1.isTypeOf());
1187:       assertFalse(node1.isEmpty());
1188:       assertFalse(node1.isAssign());
1189:       assertFalse(node1.isDo());
1190:       assertFalse(node1.isDec());
1191:       assertFalse(node1.hasChildren());
1192:       assertFalse(node1.isWhile());
1193:       assertFalse(node1.isReturn());
1194:       assertEquals(48, node1.getCharno());
1195:       assertFalse(node1.isNew());
1196:       assertFalse(node1.isVoid());
1197:       assertFalse(node1.isExprResult());
1198:       assertFalse(node1.isCall());
1199:       assertFalse(node1.isAdd());
1200:       assertFalse(node1.isGetElem());
1201:       assertFalse(node1.isName());
1202:       assertFalse(node1.isDelProp());
1203:       assertFalse(node1.isNull());
1204:       assertFalse(node1.isTrue());
1205:       assertEquals(0, node1.getLineno());
1206:       assertEquals(15, node1.getType());
1207:       assertEquals(0, node1.getChildCount());
1208:       assertFalse(node1.isCatch());
1209:       assertFalse(node1.isSetterDef());
1210:       assertFalse(node1.isDefaultCase());
1211:       assertFalse(node1.isVar());
1212:       assertFalse(node1.isDebugger());
1213:       assertFalse(node1.isFunction());
1214:       assertFalse(node1.isTry());
1215:       assertFalse(node1.isArrayLit());
1216:       assertFalse(node1.isStringKey());
1217:       assertFalse(node1.isGetterDef());
1218:       assertFalse(node1.isParamList());
1219:       assertFalse(node1.isNumber());
1220:       assertFalse(node1.isIn());
1221:       assertFalse(node1.hasMoreThanOneChild());
1222:       assertFalse(node1.isCase());
1223:       assertFalse(node1.isContinue());
1224:       assertFalse(node1.isFor());
1225:       assertFalse(node1.isBlock());
1226:       assertFalse(node1.isRegExp());
1227:       assertFalse(node1.isInc());
1228:       assertFalse(node1.isIf());
1229:       assertFalse(node1.isNE());
1230:       assertTrue(node2.isNumber());
1231:       assertFalse(node2.isIn());
1232:       assertFalse(node2.isNE());
1233:       assertFalse(node2.isEmpty());
1234:       assertFalse(node2.isCase());
1235:       assertFalse(node2.isFor());
1236:       assertFalse(node2.isString());
1237:       assertFalse(node2.isGetterDef());
1238:       assertFalse(node2.isInc());
1239:       assertFalse(node2.isTry());
1240:       assertFalse(node2.isVoid());
1241:       assertFalse(node2.isRegExp());
1242:       assertFalse(node2.isTrue());
1243:       assertFalse(node2.isHook());
1244:       assertFalse(node2.isDelProp());
1245:       assertFalse(node2.isIf());
1246:       assertFalse(node2.isCatch());
1247:       assertFalse(node2.isBreak());
1248:       assertFalse(node2.isComma());
1249:       assertFalse(node2.isThrow());
1250:       assertFalse(node2.isNot());
1251:       assertFalse(node2.isObjectLit());
1252:       assertFalse(node2.isGetProp());
1253:       assertFalse(node2.isSetterDef());
1254:       assertFalse(node2.isFunction());
1255:       assertFalse(node2.isDebugger());
1256:       assertFalse(node2.isAnd());
1257:       assertFalse(node2.isContinue());
1258:       assertFalse(node2.isFalse());
1259:       assertFalse(node2.isCast());
1260:       assertFalse(node2.isLabel());
1261:       assertEquals((-1), node2.getLineno());
1262:       assertFalse(node2.isOr());
1263:       assertFalse(node2.isAssignAdd());
1264:       assertEquals((-1), node2.getSourcePosition());
1265:       assertFalse(node2.isTypeOf());
1266:       assertFalse(node2.isDec());
1267:       assertFalse(node2.isReturn());
1268:       assertFalse(node2.hasChildren());
1269:       assertFalse(node2.isDo());
1270:       assertFalse(node2.isWhile());
1271:       assertFalse(node2.hasOneChild());
1272:       assertFalse(node2.isAdd());
1273:       assertFalse(node2.isBlock());
1274:       assertEquals(39, node2.getType());
1275:       assertFalse(node2.isName());
1276:       assertFalse(node2.isAssign());
1277:       assertFalse(node2.isWith());
1278:       assertFalse(node2.hasMoreThanOneChild());
1279:       assertFalse(node2.isInstanceOf());
1280:       assertFalse(node2.isExprResult());
1281:       assertFalse(node2.isCall());
1282:       assertFalse(node2.isGetElem());
1283:       assertFalse(node2.isParamList());
1284:       assertFalse(node2.isNull());
1285:       assertEquals(0, node2.getChildCount());
1286:       assertFalse(node2.isThis());
1287:       assertFalse(node2.isDefaultCase());
1288:       assertFalse(node2.isScript());
1289:       assertFalse(node2.isNew());
1290:       assertFalse(node2.isSwitch());
1291:       assertFalse(node2.isVar());
1292:       assertEquals((-1), node2.getCharno());
1293:       assertFalse(node2.isStringKey());
1294:       assertFalse(node2.isLabelName());
1295:       assertFalse(node2.isArrayLit());
1296:       assertEquals(39, node3.getType());
1297:       assertFalse(node3.isDo());
1298:       assertFalse(node3.hasMoreThanOneChild());
1299:       assertFalse(node3.isContinue());
1300:       assertFalse(node3.isLabel());
1301:       assertFalse(node3.isAssignAdd());
1302:       assertFalse(node3.isReturn());
1303:       assertFalse(node3.isAdd());
1304:       assertFalse(node3.isBlock());
1305:       assertFalse(node3.isNew());
1306:       assertFalse(node3.isVar());
1307:       assertFalse(node3.isWhile());
1308:       assertFalse(node3.isLabelName());
1309:       assertEquals((-1), node3.getSourcePosition());
1310:       assertFalse(node3.isCast());
1311:       assertFalse(node3.isStringKey());
1312:       assertFalse(node3.isParamList());
1313:       assertFalse(node3.isNot());
1314:       assertFalse(node3.isExprResult());
1315:       assertFalse(node3.isObjectLit());
1316:       assertEquals(0, node3.getChildCount());
1317:       assertFalse(node3.isGetProp());
1318:       assertFalse(node3.isDefaultCase());
1319:       assertFalse(node3.isAssign());
1320:       assertFalse(node3.isEmpty());
1321:       assertFalse(node3.isGetElem());
1322:       assertFalse(node3.isName());
1323:       assertFalse(node3.isDelProp());
1324:       assertFalse(node3.isBreak());
1325:       assertFalse(node3.isDec());
1326:       assertFalse(node3.hasChildren());
1327:       assertFalse(node3.isComma());
1328:       assertFalse(node3.isTypeOf());
1329:       assertFalse(node3.isCall());
1330:       assertFalse(node3.isOr());
1331:       assertFalse(node3.isVoid());
1332:       assertFalse(node3.isNull());
1333:       assertFalse(node3.isTrue());
1334:       assertFalse(node3.isCase());
1335:       assertFalse(node3.isInc());
1336:       assertFalse(node3.isIn());
1337:       assertFalse(node3.isString());
1338:       assertTrue(node3.isNumber());
1339:       assertFalse(node3.isHook());
1340:       assertFalse(node3.isThrow());
1341:       assertFalse(node3.isGetterDef());
1342:       assertFalse(node3.isFalse());
1343:       assertFalse(node3.isDebugger());
1344:       assertEquals((-1), node3.getCharno());
1345:       assertFalse(node3.isArrayLit());
1346:       assertFalse(node3.isSwitch());
1347:       assertFalse(node3.isAnd());
1348:       assertFalse(node3.isWith());
1349:       assertFalse(node3.isCatch());
1350:       assertFalse(node3.isScript());
1351:       assertFalse(node3.isFunction());
1352:       assertFalse(node3.isRegExp());
1353:       assertFalse(node3.isInstanceOf());
1354:       assertFalse(node3.isTry());
1355:       assertFalse(node3.hasOneChild());
1356:       assertFalse(node3.isThis());
1357:       assertFalse(node3.isFor());
1358:       assertFalse(node3.isSetterDef());
1359:       assertEquals((-1), node3.getLineno());
1360:       assertFalse(node3.isNE());
1361:       assertFalse(node3.isIf());
1362:       
1363:       node0.isCatch();
1364:       assertEquals(54, Node.SLASH_V);
1365:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1366:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1367:       assertEquals(30, Node.VAR_ARGS_NAME);
1368:       assertEquals(52, Node.LENGTH);
1369:       assertEquals(12, Node.COLUMN_BITS);
1370:       assertEquals(1, Node.DECR_FLAG);
1371:       assertEquals(32, Node.INCRDECR_PROP);
1372:       assertEquals(57, Node.LAST_PROP);
1373:       assertEquals(8, Node.FLAG_NO_THROWS);
1374:       assertEquals(39, Node.EMPTY_BLOCK);
1375:       assertEquals(48, Node.DIRECTIVES);
1376:       assertEquals(37, Node.OPT_ARG_NAME);
1377:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1378:       assertEquals(29, Node.JSDOC_INFO_PROP);
1379:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1380:       assertEquals(4095, Node.COLUMN_MASK);
1381:       assertEquals(57, Node.REFLECTED_OBJECT);
1382:       assertEquals(49, Node.DIRECT_EVAL);
1383:       assertEquals(56, Node.CHANGE_TIME);
1384:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1385:       assertEquals(36, Node.QUOTED_PROP);
1386:       assertEquals(53, Node.INPUT_ID);
1387:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1388:       assertEquals(55, Node.INFERRED_FUNCTION);
1389:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1390:       assertEquals(2, Node.POST_FLAG);
1391:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1392:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1393:       assertEquals(47, Node.IS_DISPATCHER);
1394:       assertEquals(50, Node.FREE_CALL);
1395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1396:       assertEquals(40, Node.ORIGINALNAME_PROP);
1397:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1398:       assertEquals(46, Node.IS_NAMESPACE);
1399:       assertEquals(43, Node.IS_CONSTANT_NAME);
1400:       assertFalse(node0.isDebugger());
1401:       assertFalse(node0.isVoid());
1402:       assertFalse(node0.isTrue());
1403:       assertFalse(node0.isRegExp());
1404:       assertFalse(node0.isFunction());
1405:       assertFalse(node0.isEmpty());
1406:       assertFalse(node0.isFor());
1407:       assertFalse(node0.isDefaultCase());
1408:       assertFalse(node0.isTry());
1409:       assertFalse(node0.isNE());
1410:       assertFalse(node0.isNull());
1411:       assertFalse(node0.isSetterDef());
1412:       assertFalse(node0.isIn());
1413:       assertFalse(node0.isCatch());
1414:       assertFalse(node0.isCall());
1415:       assertFalse(node0.isIf());
1416:       assertFalse(node0.isDelProp());
1417:       assertFalse(node0.isName());
1418:       assertEquals((-1), node0.getCharno());
1419:       assertFalse(node0.isNew());
1420:       assertFalse(node0.isAdd());
1421:       assertFalse(node0.isBlock());
1422:       assertFalse(node0.isCase());
1423:       assertEquals(39, node0.getType());
1424:       assertFalse(node0.isVar());
1425:       assertFalse(node0.isHook());
1426:       assertFalse(node0.isDo());
1427:       assertFalse(node0.isAssignAdd());
1428:       assertFalse(node0.isParamList());
1429:       assertFalse(node0.isLabel());
1430:       assertEquals(0, node0.getChildCount());
1431:       assertFalse(node0.isGetterDef());
1432:       assertFalse(node0.isStringKey());
1433:       assertFalse(node0.isArrayLit());
1434:       assertFalse(node0.isSwitch());
1435:       assertFalse(node0.isLabelName());
1436:       assertFalse(node0.isScript());
1437:       assertFalse(node0.isExprResult());
1438:       assertFalse(node0.isNot());
1439:       assertFalse(node0.isWith());
1440:       assertFalse(node0.hasOneChild());
1441:       assertFalse(node0.isComma());
1442:       assertFalse(node0.isThis());
1443:       assertFalse(node0.isReturn());
1444:       assertFalse(node0.hasChildren());
1445:       assertFalse(node0.isInstanceOf());
1446:       assertFalse(node0.isDec());
1447:       assertFalse(node0.isAssign());
1448:       assertFalse(node0.isOr());
1449:       assertFalse(node0.isTypeOf());
1450:       assertFalse(node0.hasMoreThanOneChild());
1451:       assertFalse(node0.isGetElem());
1452:       assertFalse(node0.isBreak());
1453:       assertEquals((-1), node0.getLineno());
1454:       assertFalse(node0.isInc());
1455:       assertFalse(node0.isString());
1456:       assertFalse(node0.isThrow());
1457:       assertFalse(node0.isWhile());
1458:       assertTrue(node0.isNumber());
1459:       assertFalse(node0.isGetProp());
1460:       assertEquals((-1), node0.getSourcePosition());
1461:       assertFalse(node0.isFalse());
1462:       assertFalse(node0.isAnd());
1463:       assertFalse(node0.isContinue());
1464:       assertFalse(node0.isObjectLit());
1465:       assertFalse(node0.isCast());
1466:       
1467:       Node node4 = Node.newNumber(0.0, 52, 46);
1468:       assertEquals(30, Node.VAR_ARGS_NAME);
1469:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1470:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1471:       assertEquals(52, Node.LENGTH);
1472:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1473:       assertEquals(12, Node.COLUMN_BITS);
1474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1475:       assertEquals(57, Node.LAST_PROP);
1476:       assertEquals(1, Node.DECR_FLAG);
1477:       assertEquals(32, Node.INCRDECR_PROP);
1478:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1479:       assertEquals(47, Node.IS_DISPATCHER);
1480:       assertEquals(40, Node.ORIGINALNAME_PROP);
1481:       assertEquals(2, Node.POST_FLAG);
1482:       assertEquals(50, Node.FREE_CALL);
1483:       assertEquals(46, Node.IS_NAMESPACE);
1484:       assertEquals(54, Node.SLASH_V);
1485:       assertEquals(43, Node.IS_CONSTANT_NAME);
1486:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1487:       assertEquals(55, Node.INFERRED_FUNCTION);
1488:       assertEquals(36, Node.QUOTED_PROP);
1489:       assertEquals(4095, Node.COLUMN_MASK);
1490:       assertEquals(53, Node.INPUT_ID);
1491:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1492:       assertEquals(39, Node.EMPTY_BLOCK);
1493:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1494:       assertEquals(56, Node.CHANGE_TIME);
1495:       assertEquals(29, Node.JSDOC_INFO_PROP);
1496:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1497:       assertEquals(8, Node.FLAG_NO_THROWS);
1498:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1499:       assertEquals(57, Node.REFLECTED_OBJECT);
1500:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1501:       assertEquals(37, Node.OPT_ARG_NAME);
1502:       assertEquals(48, Node.DIRECTIVES);
1503:       assertEquals(49, Node.DIRECT_EVAL);
1504:       assertFalse(node4.isDefaultCase());
1505:       assertFalse(node4.isRegExp());
1506:       assertFalse(node4.isFunction());
1507:       assertFalse(node4.isTrue());
1508:       assertFalse(node4.isDebugger());
1509:       assertFalse(node4.isSetterDef());
1510:       assertFalse(node4.isTry());
1511:       assertFalse(node4.isGetterDef());
1512:       assertFalse(node4.isStringKey());
1513:       assertFalse(node4.isParamList());
1514:       assertEquals(0, node4.getChildCount());
1515:       assertFalse(node4.isArrayLit());
1516:       assertFalse(node4.isSwitch());
1517:       assertFalse(node4.isContinue());
1518:       assertFalse(node4.isBlock());
1519:       assertEquals(39, node4.getType());
1520:       assertFalse(node4.isIn());
1521:       assertFalse(node4.isHook());
1522:       assertFalse(node4.isInc());
1523:       assertFalse(node4.isCase());
1524:       assertFalse(node4.isIf());
1525:       assertFalse(node4.isNE());
1526:       assertFalse(node4.isFor());
1527:       assertFalse(node4.isThis());
1528:       assertFalse(node4.isCatch());
1529:       assertFalse(node4.hasMoreThanOneChild());
1530:       assertFalse(node4.isInstanceOf());
1531:       assertFalse(node4.isWith());
1532:       assertEquals(52, node4.getLineno());
1533:       assertFalse(node4.isScript());
1534:       assertFalse(node4.isObjectLit());
1535:       assertFalse(node4.isNot());
1536:       assertFalse(node4.isGetProp());
1537:       assertFalse(node4.hasOneChild());
1538:       assertFalse(node4.isThrow());
1539:       assertFalse(node4.isFalse());
1540:       assertFalse(node4.isLabel());
1541:       assertEquals(46, node4.getCharno());
1542:       assertFalse(node4.isCast());
1543:       assertFalse(node4.isAnd());
1544:       assertFalse(node4.isLabelName());
1545:       assertFalse(node4.isWhile());
1546:       assertFalse(node4.isString());
1547:       assertFalse(node4.isReturn());
1548:       assertFalse(node4.isAssignAdd());
1549:       assertFalse(node4.isVar());
1550:       assertFalse(node4.isAdd());
1551:       assertFalse(node4.isDo());
1552:       assertFalse(node4.isNew());
1553:       assertTrue(node4.isNumber());
1554:       assertFalse(node4.isBreak());
1555:       assertFalse(node4.hasChildren());
1556:       assertFalse(node4.isTypeOf());
1557:       assertFalse(node4.isNull());
1558:       assertFalse(node4.isDelProp());
1559:       assertFalse(node4.isEmpty());
1560:       assertFalse(node4.isAssign());
1561:       assertFalse(node4.isOr());
1562:       assertFalse(node4.isComma());
1563:       assertFalse(node4.isDec());
1564:       assertFalse(node4.isVoid());
1565:       assertEquals(213038, node4.getSourcePosition());
1566:       assertFalse(node4.isExprResult());
1567:       assertFalse(node4.isGetElem());
1568:       assertFalse(node4.isCall());
1569:       assertFalse(node4.isName());
1570:       
1571:       node4.isQuotedString();
1572:       assertEquals(30, Node.VAR_ARGS_NAME);
1573:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1574:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1575:       assertEquals(52, Node.LENGTH);
1576:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1577:       assertEquals(12, Node.COLUMN_BITS);
1578:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1579:       assertEquals(57, Node.LAST_PROP);
1580:       assertEquals(1, Node.DECR_FLAG);
1581:       assertEquals(32, Node.INCRDECR_PROP);
1582:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1583:       assertEquals(47, Node.IS_DISPATCHER);
1584:       assertEquals(40, Node.ORIGINALNAME_PROP);
1585:       assertEquals(2, Node.POST_FLAG);
1586:       assertEquals(50, Node.FREE_CALL);
1587:       assertEquals(46, Node.IS_NAMESPACE);
1588:       assertEquals(54, Node.SLASH_V);
1589:       assertEquals(43, Node.IS_CONSTANT_NAME);
1590:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1591:       assertEquals(55, Node.INFERRED_FUNCTION);
1592:       assertEquals(36, Node.QUOTED_PROP);
1593:       assertEquals(4095, Node.COLUMN_MASK);
1594:       assertEquals(53, Node.INPUT_ID);
1595:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1596:       assertEquals(39, Node.EMPTY_BLOCK);
1597:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1598:       assertEquals(56, Node.CHANGE_TIME);
1599:       assertEquals(29, Node.JSDOC_INFO_PROP);
1600:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1601:       assertEquals(8, Node.FLAG_NO_THROWS);
1602:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1603:       assertEquals(57, Node.REFLECTED_OBJECT);
1604:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1605:       assertEquals(37, Node.OPT_ARG_NAME);
1606:       assertEquals(48, Node.DIRECTIVES);
1607:       assertEquals(49, Node.DIRECT_EVAL);
1608:       assertFalse(node4.isDefaultCase());
1609:       assertFalse(node4.isRegExp());
1610:       assertFalse(node4.isFunction());
1611:       assertFalse(node4.isTrue());
1612:       assertFalse(node4.isDebugger());
1613:       assertFalse(node4.isSetterDef());
1614:       assertFalse(node4.isTry());
1615:       assertFalse(node4.isGetterDef());
1616:       assertFalse(node4.isStringKey());
1617:       assertFalse(node4.isParamList());
1618:       assertEquals(0, node4.getChildCount());
1619:       assertFalse(node4.isArrayLit());
1620:       assertFalse(node4.isSwitch());
1621:       assertFalse(node4.isContinue());
1622:       assertFalse(node4.isBlock());
1623:       assertEquals(39, node4.getType());
1624:       assertFalse(node4.isIn());
1625:       assertFalse(node4.isHook());
1626:       assertFalse(node4.isInc());
1627:       assertFalse(node4.isCase());
1628:       assertFalse(node4.isIf());
1629:       assertFalse(node4.isNE());
1630:       assertFalse(node4.isFor());
1631:       assertFalse(node4.isThis());
1632:       assertFalse(node4.isCatch());
1633:       assertFalse(node4.hasMoreThanOneChild());
1634:       assertFalse(node4.isInstanceOf());
1635:       assertFalse(node4.isWith());
1636:       assertEquals(52, node4.getLineno());
1637:       assertFalse(node4.isScript());
1638:       assertFalse(node4.isObjectLit());
1639:       assertFalse(node4.isNot());
1640:       assertFalse(node4.isGetProp());
1641:       assertFalse(node4.hasOneChild());
1642:       assertFalse(node4.isThrow());
1643:       assertFalse(node4.isFalse());
1644:       assertFalse(node4.isLabel());
1645:       assertEquals(46, node4.getCharno());
1646:       assertFalse(node4.isCast());
1647:       assertFalse(node4.isAnd());
1648:       assertFalse(node4.isLabelName());
1649:       assertFalse(node4.isWhile());
1650:       assertFalse(node4.isString());
1651:       assertFalse(node4.isReturn());
1652:       assertFalse(node4.isAssignAdd());
1653:       assertFalse(node4.isVar());
1654:       assertFalse(node4.isAdd());
1655:       assertFalse(node4.isDo());
1656:       assertFalse(node4.isNew());
1657:       assertTrue(node4.isNumber());
1658:       assertFalse(node4.isBreak());
1659:       assertFalse(node4.hasChildren());
1660:       assertFalse(node4.isTypeOf());
1661:       assertFalse(node4.isNull());
1662:       assertFalse(node4.isDelProp());
1663:       assertFalse(node4.isEmpty());
1664:       assertFalse(node4.isAssign());
1665:       assertFalse(node4.isOr());
1666:       assertFalse(node4.isComma());
1667:       assertFalse(node4.isDec());
1668:       assertFalse(node4.isVoid());
1669:       assertEquals(213038, node4.getSourcePosition());
1670:       assertFalse(node4.isExprResult());
1671:       assertFalse(node4.isGetElem());
1672:       assertFalse(node4.isCall());
1673:       assertFalse(node4.isName());
1674:       
1675:       node0.getDirectives();
1676:       assertEquals(54, Node.SLASH_V);
1677:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1678:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1679:       assertEquals(30, Node.VAR_ARGS_NAME);
1680:       assertEquals(52, Node.LENGTH);
1681:       assertEquals(12, Node.COLUMN_BITS);
1682:       assertEquals(1, Node.DECR_FLAG);
1683:       assertEquals(32, Node.INCRDECR_PROP);
1684:       assertEquals(57, Node.LAST_PROP);
1685:       assertEquals(8, Node.FLAG_NO_THROWS);
1686:       assertEquals(39, Node.EMPTY_BLOCK);
1687:       assertEquals(48, Node.DIRECTIVES);
1688:       assertEquals(37, Node.OPT_ARG_NAME);
1689:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1690:       assertEquals(29, Node.JSDOC_INFO_PROP);
1691:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1692:       assertEquals(4095, Node.COLUMN_MASK);
1693:       assertEquals(57, Node.REFLECTED_OBJECT);
1694:       assertEquals(49, Node.DIRECT_EVAL);
1695:       assertEquals(56, Node.CHANGE_TIME);
1696:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1697:       assertEquals(36, Node.QUOTED_PROP);
1698:       assertEquals(53, Node.INPUT_ID);
1699:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1700:       assertEquals(55, Node.INFERRED_FUNCTION);
1701:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1702:       assertEquals(2, Node.POST_FLAG);
1703:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1704:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1705:       assertEquals(47, Node.IS_DISPATCHER);
1706:       assertEquals(50, Node.FREE_CALL);
1707:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1708:       assertEquals(40, Node.ORIGINALNAME_PROP);
1709:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1710:       assertEquals(46, Node.IS_NAMESPACE);
1711:       assertEquals(43, Node.IS_CONSTANT_NAME);
1712:       assertFalse(node0.isDebugger());
1713:       assertFalse(node0.isVoid());
1714:       assertFalse(node0.isTrue());
1715:       assertFalse(node0.isRegExp());
1716:       assertFalse(node0.isFunction());
1717:       assertFalse(node0.isEmpty());
1718:       assertFalse(node0.isFor());
1719:       assertFalse(node0.isDefaultCase());
1720:       assertFalse(node0.isTry());
1721:       assertFalse(node0.isNE());
1722:       assertFalse(node0.isNull());
1723:       assertFalse(node0.isSetterDef());
1724:       assertFalse(node0.isIn());
1725:       assertFalse(node0.isCatch());
1726:       assertFalse(node0.isCall());
1727:       assertFalse(node0.isIf());
1728:       assertFalse(node0.isDelProp());
1729:       assertFalse(node0.isName());
1730:       assertEquals((-1), node0.getCharno());
1731:       assertFalse(node0.isNew());
1732:       assertFalse(node0.isAdd());
1733:       assertFalse(node0.isBlock());
1734:       assertFalse(node0.isCase());
1735:       assertEquals(39, node0.getType());
1736:       assertFalse(node0.isVar());
1737:       assertFalse(node0.isHook());
1738:       assertFalse(node0.isDo());
1739:       assertFalse(node0.isAssignAdd());
1740:       assertFalse(node0.isParamList());
1741:       assertFalse(node0.isLabel());
1742:       assertEquals(0, node0.getChildCount());
1743:       assertFalse(node0.isGetterDef());
1744:       assertFalse(node0.isStringKey());
1745:       assertFalse(node0.isArrayLit());
1746:       assertFalse(node0.isSwitch());
1747:       assertFalse(node0.isLabelName());
1748:       assertFalse(node0.isScript());
1749:       assertFalse(node0.isExprResult());
1750:       assertFalse(node0.isNot());
1751:       assertFalse(node0.isWith());
1752:       assertFalse(node0.hasOneChild());
1753:       assertFalse(node0.isComma());
1754:       assertFalse(node0.isThis());
1755:       assertFalse(node0.isReturn());
1756:       assertFalse(node0.hasChildren());
1757:       assertFalse(node0.isInstanceOf());
1758:       assertFalse(node0.isDec());
1759:       assertFalse(node0.isAssign());
1760:       assertFalse(node0.isOr());
1761:       assertFalse(node0.isTypeOf());
1762:       assertFalse(node0.hasMoreThanOneChild());
1763:       assertFalse(node0.isGetElem());
1764:       assertFalse(node0.isBreak());
1765:       assertEquals((-1), node0.getLineno());
1766:       assertFalse(node0.isInc());
1767:       assertFalse(node0.isString());
1768:       assertFalse(node0.isThrow());
1769:       assertFalse(node0.isWhile());
1770:       assertTrue(node0.isNumber());
1771:       assertFalse(node0.isGetProp());
1772:       assertEquals((-1), node0.getSourcePosition());
1773:       assertFalse(node0.isFalse());
1774:       assertFalse(node0.isAnd());
1775:       assertFalse(node0.isContinue());
1776:       assertFalse(node0.isObjectLit());
1777:       assertFalse(node0.isCast());
1778:       
1779:       node4.getDouble();
1780:       assertEquals(30, Node.VAR_ARGS_NAME);
1781:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1782:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1783:       assertEquals(52, Node.LENGTH);
1784:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1785:       assertEquals(12, Node.COLUMN_BITS);
1786:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1787:       assertEquals(57, Node.LAST_PROP);
1788:       assertEquals(1, Node.DECR_FLAG);
1789:       assertEquals(32, Node.INCRDECR_PROP);
1790:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1791:       assertEquals(47, Node.IS_DISPATCHER);
1792:       assertEquals(40, Node.ORIGINALNAME_PROP);
1793:       assertEquals(2, Node.POST_FLAG);
1794:       assertEquals(50, Node.FREE_CALL);
1795:       assertEquals(46, Node.IS_NAMESPACE);
1796:       assertEquals(54, Node.SLASH_V);
1797:       assertEquals(43, Node.IS_CONSTANT_NAME);
1798:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1799:       assertEquals(55, Node.INFERRED_FUNCTION);
1800:       assertEquals(36, Node.QUOTED_PROP);
1801:       assertEquals(4095, Node.COLUMN_MASK);
1802:       assertEquals(53, Node.INPUT_ID);
1803:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1804:       assertEquals(39, Node.EMPTY_BLOCK);
1805:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1806:       assertEquals(56, Node.CHANGE_TIME);
1807:       assertEquals(29, Node.JSDOC_INFO_PROP);
1808:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1809:       assertEquals(8, Node.FLAG_NO_THROWS);
1810:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1811:       assertEquals(57, Node.REFLECTED_OBJECT);
1812:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1813:       assertEquals(37, Node.OPT_ARG_NAME);
1814:       assertEquals(48, Node.DIRECTIVES);
1815:       assertEquals(49, Node.DIRECT_EVAL);
1816:       assertFalse(node4.isDefaultCase());
1817:       assertFalse(node4.isRegExp());
1818:       assertFalse(node4.isFunction());
1819:       assertFalse(node4.isTrue());
1820:       assertFalse(node4.isDebugger());
1821:       assertFalse(node4.isSetterDef());
1822:       assertFalse(node4.isTry());
1823:       assertFalse(node4.isGetterDef());
1824:       assertFalse(node4.isStringKey());
1825:       assertFalse(node4.isParamList());
1826:       assertEquals(0, node4.getChildCount());
1827:       assertFalse(node4.isArrayLit());
1828:       assertFalse(node4.isSwitch());
1829:       assertFalse(node4.isContinue());
1830:       assertFalse(node4.isBlock());
1831:       assertEquals(39, node4.getType());
1832:       assertFalse(node4.isIn());
1833:       assertFalse(node4.isHook());
1834:       assertFalse(node4.isInc());
1835:       assertFalse(node4.isCase());
1836:       assertFalse(node4.isIf());
1837:       assertFalse(node4.isNE());
1838:       assertFalse(node4.isFor());
1839:       assertFalse(node4.isThis());
1840:       assertFalse(node4.isCatch());
1841:       assertFalse(node4.hasMoreThanOneChild());
1842:       assertFalse(node4.isInstanceOf());
1843:       assertFalse(node4.isWith());
1844:       assertEquals(52, node4.getLineno());
1845:       assertFalse(node4.isScript());
1846:       assertFalse(node4.isObjectLit());
1847:       assertFalse(node4.isNot());
1848:       assertFalse(node4.isGetProp());
1849:       assertFalse(node4.hasOneChild());
1850:       assertFalse(node4.isThrow());
1851:       assertFalse(node4.isFalse());
1852:       assertFalse(node4.isLabel());
1853:       assertEquals(46, node4.getCharno());
1854:       assertFalse(node4.isCast());
1855:       assertFalse(node4.isAnd());
1856:       assertFalse(node4.isLabelName());
1857:       assertFalse(node4.isWhile());
1858:       assertFalse(node4.isString());
1859:       assertFalse(node4.isReturn());
1860:       assertFalse(node4.isAssignAdd());
1861:       assertFalse(node4.isVar());
1862:       assertFalse(node4.isAdd());
1863:       assertFalse(node4.isDo());
1864:       assertFalse(node4.isNew());
1865:       assertTrue(node4.isNumber());
1866:       assertFalse(node4.isBreak());
1867:       assertFalse(node4.hasChildren());
1868:       assertFalse(node4.isTypeOf());
1869:       assertFalse(node4.isNull());
1870:       assertFalse(node4.isDelProp());
1871:       assertFalse(node4.isEmpty());
1872:       assertFalse(node4.isAssign());
1873:       assertFalse(node4.isOr());
1874:       assertFalse(node4.isComma());
1875:       assertFalse(node4.isDec());
1876:       assertFalse(node4.isVoid());
1877:       assertEquals(213038, node4.getSourcePosition());
1878:       assertFalse(node4.isExprResult());
1879:       assertFalse(node4.isGetElem());
1880:       assertFalse(node4.isCall());
1881:       assertFalse(node4.isName());
1882:       
1883:       node0.getParent();
1884:       assertEquals(54, Node.SLASH_V);
1885:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1886:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1887:       assertEquals(30, Node.VAR_ARGS_NAME);
1888:       assertEquals(52, Node.LENGTH);
1889:       assertEquals(12, Node.COLUMN_BITS);
1890:       assertEquals(1, Node.DECR_FLAG);
1891:       assertEquals(32, Node.INCRDECR_PROP);
1892:       assertEquals(57, Node.LAST_PROP);
1893:       assertEquals(8, Node.FLAG_NO_THROWS);
1894:       assertEquals(39, Node.EMPTY_BLOCK);
1895:       assertEquals(48, Node.DIRECTIVES);
1896:       assertEquals(37, Node.OPT_ARG_NAME);
1897:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1898:       assertEquals(29, Node.JSDOC_INFO_PROP);
1899:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1900:       assertEquals(4095, Node.COLUMN_MASK);
1901:       assertEquals(57, Node.REFLECTED_OBJECT);
1902:       assertEquals(49, Node.DIRECT_EVAL);
1903:       assertEquals(56, Node.CHANGE_TIME);
1904:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1905:       assertEquals(36, Node.QUOTED_PROP);
1906:       assertEquals(53, Node.INPUT_ID);
1907:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1908:       assertEquals(55, Node.INFERRED_FUNCTION);
1909:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1910:       assertEquals(2, Node.POST_FLAG);
1911:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1912:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1913:       assertEquals(47, Node.IS_DISPATCHER);
1914:       assertEquals(50, Node.FREE_CALL);
1915:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1916:       assertEquals(40, Node.ORIGINALNAME_PROP);
1917:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1918:       assertEquals(46, Node.IS_NAMESPACE);
1919:       assertEquals(43, Node.IS_CONSTANT_NAME);
1920:       assertFalse(node0.isDebugger());
1921:       assertFalse(node0.isVoid());
1922:       assertFalse(node0.isTrue());
1923:       assertFalse(node0.isRegExp());
1924:       assertFalse(node0.isFunction());
1925:       assertFalse(node0.isEmpty());
1926:       assertFalse(node0.isFor());
1927:       assertFalse(node0.isDefaultCase());
1928:       assertFalse(node0.isTry());
1929:       assertFalse(node0.isNE());
1930:       assertFalse(node0.isNull());
1931:       assertFalse(node0.isSetterDef());
1932:       assertFalse(node0.isIn());
1933:       assertFalse(node0.isCatch());
1934:       assertFalse(node0.isCall());
1935:       assertFalse(node0.isIf());
1936:       assertFalse(node0.isDelProp());
1937:       assertFalse(node0.isName());
1938:       assertEquals((-1), node0.getCharno());
1939:       assertFalse(node0.isNew());
1940:       assertFalse(node0.isAdd());
1941:       assertFalse(node0.isBlock());
1942:       assertFalse(node0.isCase());
1943:       assertEquals(39, node0.getType());
1944:       assertFalse(node0.isVar());
1945:       assertFalse(node0.isHook());
1946:       assertFalse(node0.isDo());
1947:       assertFalse(node0.isAssignAdd());
1948:       assertFalse(node0.isParamList());
1949:       assertFalse(node0.isLabel());
1950:       assertEquals(0, node0.getChildCount());
1951:       assertFalse(node0.isGetterDef());
1952:       assertFalse(node0.isStringKey());
1953:       assertFalse(node0.isArrayLit());
1954:       assertFalse(node0.isSwitch());
1955:       assertFalse(node0.isLabelName());
1956:       assertFalse(node0.isScript());
1957:       assertFalse(node0.isExprResult());
1958:       assertFalse(node0.isNot());
1959:       assertFalse(node0.isWith());
1960:       assertFalse(node0.hasOneChild());
1961:       assertFalse(node0.isComma());
1962:       assertFalse(node0.isThis());
1963:       assertFalse(node0.isReturn());
1964:       assertFalse(node0.hasChildren());
1965:       assertFalse(node0.isInstanceOf());
1966:       assertFalse(node0.isDec());
1967:       assertFalse(node0.isAssign());
1968:       assertFalse(node0.isOr());
1969:       assertFalse(node0.isTypeOf());
1970:       assertFalse(node0.hasMoreThanOneChild());
1971:       assertFalse(node0.isGetElem());
1972:       assertFalse(node0.isBreak());
1973:       assertEquals((-1), node0.getLineno());
1974:       assertFalse(node0.isInc());
1975:       assertFalse(node0.isString());
1976:       assertFalse(node0.isThrow());
1977:       assertFalse(node0.isWhile());
1978:       assertTrue(node0.isNumber());
1979:       assertFalse(node0.isGetProp());
1980:       assertEquals((-1), node0.getSourcePosition());
1981:       assertFalse(node0.isFalse());
1982:       assertFalse(node0.isAnd());
1983:       assertFalse(node0.isContinue());
1984:       assertFalse(node0.isObjectLit());
1985:       assertFalse(node0.isCast());
1986:       
1987:       node2.hasChild(node4);
1988:       assertEquals(54, Node.SLASH_V);
1989:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1990:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1991:       assertEquals(30, Node.VAR_ARGS_NAME);
1992:       assertEquals(52, Node.LENGTH);
1993:       assertEquals(12, Node.COLUMN_BITS);
1994:       assertEquals(1, Node.DECR_FLAG);
1995:       assertEquals(32, Node.INCRDECR_PROP);
1996:       assertEquals(57, Node.LAST_PROP);
1997:       assertEquals(8, Node.FLAG_NO_THROWS);
1998:       assertEquals(39, Node.EMPTY_BLOCK);
1999:       assertEquals(48, Node.DIRECTIVES);
2000:       assertEquals(37, Node.OPT_ARG_NAME);
2001:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2002:       assertEquals(29, Node.JSDOC_INFO_PROP);
2003:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2004:       assertEquals(4095, Node.COLUMN_MASK);
2005:       assertEquals(57, Node.REFLECTED_OBJECT);
2006:       assertEquals(49, Node.DIRECT_EVAL);
2007:       assertEquals(56, Node.CHANGE_TIME);
2008:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2009:       assertEquals(36, Node.QUOTED_PROP);
2010:       assertEquals(53, Node.INPUT_ID);
2011:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2012:       assertEquals(55, Node.INFERRED_FUNCTION);
2013:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2014:       assertEquals(2, Node.POST_FLAG);
2015:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2016:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2017:       assertEquals(47, Node.IS_DISPATCHER);
2018:       assertEquals(50, Node.FREE_CALL);
2019:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2020:       assertEquals(40, Node.ORIGINALNAME_PROP);
2021:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2022:       assertEquals(46, Node.IS_NAMESPACE);
2023:       assertEquals(43, Node.IS_CONSTANT_NAME);
2024:       assertEquals(37, Node.OPT_ARG_NAME);
2025:       assertEquals(2, Node.POST_FLAG);
2026:       assertEquals(32, Node.INCRDECR_PROP);
2027:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2028:       assertEquals(29, Node.JSDOC_INFO_PROP);
2029:       assertEquals(1, Node.DECR_FLAG);
2030:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2031:       assertEquals(30, Node.VAR_ARGS_NAME);
2032:       assertEquals(12, Node.COLUMN_BITS);
2033:       assertEquals(47, Node.IS_DISPATCHER);
2034:       assertEquals(54, Node.SLASH_V);
2035:       assertEquals(43, Node.IS_CONSTANT_NAME);
2036:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2037:       assertEquals(50, Node.FREE_CALL);
2038:       assertEquals(46, Node.IS_NAMESPACE);
2039:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2040:       assertEquals(48, Node.DIRECTIVES);
2041:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2042:       assertEquals(8, Node.FLAG_NO_THROWS);
2043:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2044:       assertEquals(39, Node.EMPTY_BLOCK);
2045:       assertEquals(40, Node.ORIGINALNAME_PROP);
2046:       assertEquals(4095, Node.COLUMN_MASK);
2047:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2048:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2049:       assertEquals(52, Node.LENGTH);
2050:       assertEquals(57, Node.LAST_PROP);
2051:       assertEquals(53, Node.INPUT_ID);
2052:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2053:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2054:       assertEquals(55, Node.INFERRED_FUNCTION);
2055:       assertEquals(49, Node.DIRECT_EVAL);
2056:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2057:       assertEquals(56, Node.CHANGE_TIME);
2058:       assertEquals(36, Node.QUOTED_PROP);
2059:       assertEquals(57, Node.REFLECTED_OBJECT);
2060:       assertEquals(48, Node.DIRECTIVES);
2061:       assertEquals(8, Node.FLAG_NO_THROWS);
2062:       assertEquals(39, Node.EMPTY_BLOCK);
2063:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2064:       assertEquals(50, Node.FREE_CALL);
2065:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2066:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2067:       assertEquals(55, Node.INFERRED_FUNCTION);
2068:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2069:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2070:       assertEquals(53, Node.INPUT_ID);
2071:       assertEquals(52, Node.LENGTH);
2072:       assertEquals(57, Node.REFLECTED_OBJECT);
2073:       assertEquals(36, Node.QUOTED_PROP);
2074:       assertEquals(4095, Node.COLUMN_MASK);
2075:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2076:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2077:       assertEquals(49, Node.DIRECT_EVAL);
2078:       assertEquals(37, Node.OPT_ARG_NAME);
2079:       assertEquals(56, Node.CHANGE_TIME);
2080:       assertEquals(46, Node.IS_NAMESPACE);
2081:       assertEquals(47, Node.IS_DISPATCHER);
2082:       assertEquals(2, Node.POST_FLAG);
2083:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2084:       assertEquals(29, Node.JSDOC_INFO_PROP);
2085:       assertEquals(12, Node.COLUMN_BITS);
2086:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2087:       assertEquals(57, Node.LAST_PROP);
2088:       assertEquals(32, Node.INCRDECR_PROP);
2089:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2090:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2091:       assertEquals(1, Node.DECR_FLAG);
2092:       assertEquals(54, Node.SLASH_V);
2093:       assertEquals(43, Node.IS_CONSTANT_NAME);
2094:       assertEquals(30, Node.VAR_ARGS_NAME);
2095:       assertEquals(40, Node.ORIGINALNAME_PROP);
2096:       assertEquals(30, Node.VAR_ARGS_NAME);
2097:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2098:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2099:       assertEquals(52, Node.LENGTH);
2100:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2101:       assertEquals(12, Node.COLUMN_BITS);
2102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2103:       assertEquals(57, Node.LAST_PROP);
2104:       assertEquals(1, Node.DECR_FLAG);
2105:       assertEquals(32, Node.INCRDECR_PROP);
2106:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2107:       assertEquals(47, Node.IS_DISPATCHER);
2108:       assertEquals(40, Node.ORIGINALNAME_PROP);
2109:       assertEquals(2, Node.POST_FLAG);
2110:       assertEquals(50, Node.FREE_CALL);
2111:       assertEquals(46, Node.IS_NAMESPACE);
2112:       assertEquals(54, Node.SLASH_V);
2113:       assertEquals(43, Node.IS_CONSTANT_NAME);
2114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2115:       assertEquals(55, Node.INFERRED_FUNCTION);
2116:       assertEquals(36, Node.QUOTED_PROP);
2117:       assertEquals(4095, Node.COLUMN_MASK);
2118:       assertEquals(53, Node.INPUT_ID);
2119:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2120:       assertEquals(39, Node.EMPTY_BLOCK);
2121:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2122:       assertEquals(56, Node.CHANGE_TIME);
2123:       assertEquals(29, Node.JSDOC_INFO_PROP);
2124:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2125:       assertEquals(8, Node.FLAG_NO_THROWS);
2126:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2127:       assertEquals(57, Node.REFLECTED_OBJECT);
2128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2129:       assertEquals(37, Node.OPT_ARG_NAME);
2130:       assertEquals(48, Node.DIRECTIVES);
2131:       assertEquals(49, Node.DIRECT_EVAL);
2132:       assertFalse(node0.isDebugger());
2133:       assertFalse(node0.isVoid());
2134:       assertFalse(node0.isTrue());
2135:       assertFalse(node0.isRegExp());
2136:       assertFalse(node0.isFunction());
2137:       assertFalse(node0.isEmpty());
2138:       assertFalse(node0.isFor());
2139:       assertFalse(node0.isDefaultCase());
2140:       assertFalse(node0.isTry());
2141:       assertFalse(node0.isNE());
2142:       assertFalse(node0.isNull());
2143:       assertFalse(node0.isSetterDef());
2144:       assertFalse(node0.isIn());
2145:       assertFalse(node0.isCatch());
2146:       assertFalse(node0.isCall());
2147:       assertFalse(node0.isIf());
2148:       assertFalse(node0.isDelProp());
2149:       assertFalse(node0.isName());
2150:       assertEquals((-1), node0.getCharno());
2151:       assertFalse(node0.isNew());
2152:       assertFalse(node0.isAdd());
2153:       assertFalse(node0.isBlock());
2154:       assertFalse(node0.isCase());
2155:       assertEquals(39, node0.getType());
2156:       assertFalse(node0.isVar());
2157:       assertFalse(node0.isHook());
2158:       assertFalse(node0.isDo());
2159:       assertFalse(node0.isAssignAdd());
2160:       assertFalse(node0.isParamList());
2161:       assertFalse(node0.isLabel());
2162:       assertEquals(0, node0.getChildCount());
2163:       assertFalse(node0.isGetterDef());
2164:       assertFalse(node0.isStringKey());
2165:       assertFalse(node0.isArrayLit());
2166:       assertFalse(node0.isSwitch());
2167:       assertFalse(node0.isLabelName());
2168:       assertFalse(node0.isScript());
2169:       assertFalse(node0.isExprResult());
2170:       assertFalse(node0.isNot());
2171:       assertFalse(node0.isWith());
2172:       assertFalse(node0.hasOneChild());
2173:       assertFalse(node0.isComma());
2174:       assertFalse(node0.isThis());
2175:       assertFalse(node0.isReturn());
2176:       assertFalse(node0.hasChildren());
2177:       assertFalse(node0.isInstanceOf());
2178:       assertFalse(node0.isDec());
2179:       assertFalse(node0.isAssign());
2180:       assertFalse(node0.isOr());
2181:       assertFalse(node0.isTypeOf());
2182:       assertFalse(node0.hasMoreThanOneChild());
2183:       assertFalse(node0.isGetElem());
2184:       assertFalse(node0.isBreak());
2185:       assertEquals((-1), node0.getLineno());
2186:       assertFalse(node0.isInc());
2187:       assertFalse(node0.isString());
2188:       assertFalse(node0.isThrow());
2189:       assertFalse(node0.isWhile());
2190:       assertTrue(node0.isNumber());
2191:       assertFalse(node0.isGetProp());
2192:       assertEquals((-1), node0.getSourcePosition());
2193:       assertFalse(node0.isFalse());
2194:       assertFalse(node0.isAnd());
2195:       assertFalse(node0.isContinue());
2196:       assertFalse(node0.isObjectLit());
2197:       assertFalse(node0.isCast());
2198:       assertFalse(node1.isGetProp());
2199:       assertFalse(node1.isComma());
2200:       assertFalse(node1.isInstanceOf());
2201:       assertFalse(node1.isBreak());
2202:       assertFalse(node1.isFalse());
2203:       assertFalse(node1.isWith());
2204:       assertFalse(node1.isHook());
2205:       assertEquals(48, node1.getSourcePosition());
2206:       assertFalse(node1.isThis());
2207:       assertFalse(node1.isThrow());
2208:       assertFalse(node1.hasOneChild());
2209:       assertFalse(node1.isString());
2210:       assertFalse(node1.isScript());
2211:       assertFalse(node1.isCast());
2212:       assertFalse(node1.isAnd());
2213:       assertFalse(node1.isObjectLit());
2214:       assertFalse(node1.isNot());
2215:       assertFalse(node1.isLabelName());
2216:       assertFalse(node1.isSwitch());
2217:       assertFalse(node1.isLabel());
2218:       assertFalse(node1.isAssignAdd());
2219:       assertFalse(node1.isOr());
2220:       assertFalse(node1.isTypeOf());
2221:       assertFalse(node1.isEmpty());
2222:       assertFalse(node1.isAssign());
2223:       assertFalse(node1.isDo());
2224:       assertFalse(node1.isDec());
2225:       assertFalse(node1.hasChildren());
2226:       assertFalse(node1.isWhile());
2227:       assertFalse(node1.isReturn());
2228:       assertEquals(48, node1.getCharno());
2229:       assertFalse(node1.isNew());
2230:       assertFalse(node1.isVoid());
2231:       assertFalse(node1.isExprResult());
2232:       assertFalse(node1.isCall());
2233:       assertFalse(node1.isAdd());
2234:       assertFalse(node1.isGetElem());
2235:       assertFalse(node1.isName());
2236:       assertFalse(node1.isDelProp());
2237:       assertFalse(node1.isNull());
2238:       assertFalse(node1.isTrue());
2239:       assertEquals(0, node1.getLineno());
2240:       assertEquals(15, node1.getType());
2241:       assertEquals(0, node1.getChildCount());
2242:       assertFalse(node1.isCatch());
2243:       assertFalse(node1.isSetterDef());
2244:       assertFalse(node1.isDefaultCase());
2245:       assertFalse(node1.isVar());
2246:       assertFalse(node1.isDebugger());
2247:       assertFalse(node1.isFunction());
2248:       assertFalse(node1.isTry());
2249:       assertFalse(node1.isArrayLit());
2250:       assertFalse(node1.isStringKey());
2251:       assertFalse(node1.isGetterDef());
2252:       assertFalse(node1.isParamList());
2253:       assertFalse(node1.isNumber());
2254:       assertFalse(node1.isIn());
2255:       assertFalse(node1.hasMoreThanOneChild());
2256:       assertFalse(node1.isCase());
2257:       assertFalse(node1.isContinue());
2258:       assertFalse(node1.isFor());
2259:       assertFalse(node1.isBlock());
2260:       assertFalse(node1.isRegExp());
2261:       assertFalse(node1.isInc());
2262:       assertFalse(node1.isIf());
2263:       assertFalse(node1.isNE());
2264:       assertTrue(node2.isNumber());
2265:       assertFalse(node2.isIn());
2266:       assertFalse(node2.isNE());
2267:       assertFalse(node2.isEmpty());
2268:       assertFalse(node2.isCase());
2269:       assertFalse(node2.isFor());
2270:       assertFalse(node2.isString());
2271:       assertFalse(node2.isGetterDef());
2272:       assertFalse(node2.isInc());
2273:       assertFalse(node2.isTry());
2274:       assertFalse(node2.isVoid());
2275:       assertFalse(node2.isRegExp());
2276:       assertFalse(node2.isTrue());
2277:       assertFalse(node2.isHook());
2278:       assertFalse(node2.isDelProp());
2279:       assertFalse(node2.isIf());
2280:       assertFalse(node2.isCatch());
2281:       assertFalse(node2.isBreak());
2282:       assertFalse(node2.isComma());
2283:       assertFalse(node2.isThrow());
2284:       assertFalse(node2.isNot());
2285:       assertFalse(node2.isObjectLit());
2286:       assertFalse(node2.isGetProp());
2287:       assertFalse(node2.isSetterDef());
2288:       assertFalse(node2.isFunction());
2289:       assertFalse(node2.isDebugger());
2290:       assertFalse(node2.isAnd());
2291:       assertFalse(node2.isContinue());
2292:       assertFalse(node2.isFalse());
2293:       assertFalse(node2.isCast());
2294:       assertFalse(node2.isLabel());
2295:       assertEquals((-1), node2.getLineno());
2296:       assertFalse(node2.isOr());
2297:       assertFalse(node2.isAssignAdd());
2298:       assertEquals((-1), node2.getSourcePosition());
2299:       assertFalse(node2.isTypeOf());
2300:       assertFalse(node2.isDec());
2301:       assertFalse(node2.isReturn());
2302:       assertFalse(node2.hasChildren());
2303:       assertFalse(node2.isDo());
2304:       assertFalse(node2.isWhile());
2305:       assertFalse(node2.hasOneChild());
2306:       assertFalse(node2.isAdd());
2307:       assertFalse(node2.isBlock());
2308:       assertEquals(39, node2.getType());
2309:       assertFalse(node2.isName());
2310:       assertFalse(node2.isAssign());
2311:       assertFalse(node2.isWith());
2312:       assertFalse(node2.hasMoreThanOneChild());
2313:       assertFalse(node2.isInstanceOf());
2314:       assertFalse(node2.isExprResult());
2315:       assertFalse(node2.isCall());
2316:       assertFalse(node2.isGetElem());
2317:       assertFalse(node2.isParamList());
2318:       assertFalse(node2.isNull());
2319:       assertEquals(0, node2.getChildCount());
2320:       assertFalse(node2.isThis());
2321:       assertFalse(node2.isDefaultCase());
2322:       assertFalse(node2.isScript());
2323:       assertFalse(node2.isNew());
2324:       assertFalse(node2.isSwitch());
2325:       assertFalse(node2.isVar());
2326:       assertEquals((-1), node2.getCharno());
2327:       assertFalse(node2.isStringKey());
2328:       assertFalse(node2.isLabelName());
2329:       assertFalse(node2.isArrayLit());
2330:       assertFalse(node4.isDefaultCase());
2331:       assertFalse(node4.isRegExp());
2332:       assertFalse(node4.isFunction());
2333:       assertFalse(node4.isTrue());
2334:       assertFalse(node4.isDebugger());
2335:       assertFalse(node4.isSetterDef());
2336:       assertFalse(node4.isTry());
2337:       assertFalse(node4.isGetterDef());
2338:       assertFalse(node4.isStringKey());
2339:       assertFalse(node4.isParamList());
2340:       assertEquals(0, node4.getChildCount());
2341:       assertFalse(node4.isArrayLit());
2342:       assertFalse(node4.isSwitch());
2343:       assertFalse(node4.isContinue());
2344:       assertFalse(node4.isBlock());
2345:       assertEquals(39, node4.getType());
2346:       assertFalse(node4.isIn());
2347:       assertFalse(node4.isHook());
2348:       assertFalse(node4.isInc());
2349:       assertFalse(node4.isCase());
2350:       assertFalse(node4.isIf());
2351:       assertFalse(node4.isNE());
2352:       assertFalse(node4.isFor());
2353:       assertFalse(node4.isThis());
2354:       assertFalse(node4.isCatch());
2355:       assertFalse(node4.hasMoreThanOneChild());
2356:       assertFalse(node4.isInstanceOf());
2357:       assertFalse(node4.isWith());
2358:       assertEquals(52, node4.getLineno());
2359:       assertFalse(node4.isScript());
2360:       assertFalse(node4.isObjectLit());
2361:       assertFalse(node4.isNot());
2362:       assertFalse(node4.isGetProp());
2363:       assertFalse(node4.hasOneChild());
2364:       assertFalse(node4.isThrow());
2365:       assertFalse(node4.isFalse());
2366:       assertFalse(node4.isLabel());
2367:       assertEquals(46, node4.getCharno());
2368:       assertFalse(node4.isCast());
2369:       assertFalse(node4.isAnd());
2370:       assertFalse(node4.isLabelName());
2371:       assertFalse(node4.isWhile());
2372:       assertFalse(node4.isString());
2373:       assertFalse(node4.isReturn());
2374:       assertFalse(node4.isAssignAdd());
2375:       assertFalse(node4.isVar());
2376:       assertFalse(node4.isAdd());
2377:       assertFalse(node4.isDo());
2378:       assertFalse(node4.isNew());
2379:       assertTrue(node4.isNumber());
2380:       assertFalse(node4.isBreak());
2381:       assertFalse(node4.hasChildren());
2382:       assertFalse(node4.isTypeOf());
2383:       assertFalse(node4.isNull());
2384:       assertFalse(node4.isDelProp());
2385:       assertFalse(node4.isEmpty());
2386:       assertFalse(node4.isAssign());
2387:       assertFalse(node4.isOr());
2388:       assertFalse(node4.isComma());
2389:       assertFalse(node4.isDec());
2390:       assertFalse(node4.isVoid());
2391:       assertEquals(213038, node4.getSourcePosition());
2392:       assertFalse(node4.isExprResult());
2393:       assertFalse(node4.isGetElem());
2394:       assertFalse(node4.isCall());
2395:       assertFalse(node4.isName());
2396:       
2397:       node0.isNumber();
2398:       assertEquals(54, Node.SLASH_V);
2399:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2400:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2401:       assertEquals(30, Node.VAR_ARGS_NAME);
2402:       assertEquals(52, Node.LENGTH);
2403:       assertEquals(12, Node.COLUMN_BITS);
2404:       assertEquals(1, Node.DECR_FLAG);
2405:       assertEquals(32, Node.INCRDECR_PROP);
2406:       assertEquals(57, Node.LAST_PROP);
2407:       assertEquals(8, Node.FLAG_NO_THROWS);
2408:       assertEquals(39, Node.EMPTY_BLOCK);
2409:       assertEquals(48, Node.DIRECTIVES);
2410:       assertEquals(37, Node.OPT_ARG_NAME);
2411:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2412:       assertEquals(29, Node.JSDOC_INFO_PROP);
2413:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2414:       assertEquals(4095, Node.COLUMN_MASK);
2415:       assertEquals(57, Node.REFLECTED_OBJECT);
2416:       assertEquals(49, Node.DIRECT_EVAL);
2417:       assertEquals(56, Node.CHANGE_TIME);
2418:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2419:       assertEquals(36, Node.QUOTED_PROP);
2420:       assertEquals(53, Node.INPUT_ID);
2421:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2422:       assertEquals(55, Node.INFERRED_FUNCTION);
2423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2424:       assertEquals(2, Node.POST_FLAG);
2425:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2427:       assertEquals(47, Node.IS_DISPATCHER);
2428:       assertEquals(50, Node.FREE_CALL);
2429:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2430:       assertEquals(40, Node.ORIGINALNAME_PROP);
2431:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2432:       assertEquals(46, Node.IS_NAMESPACE);
2433:       assertEquals(43, Node.IS_CONSTANT_NAME);
2434:       assertFalse(node0.isDebugger());
2435:       assertFalse(node0.isVoid());
2436:       assertFalse(node0.isTrue());
2437:       assertFalse(node0.isRegExp());
2438:       assertFalse(node0.isFunction());
2439:       assertFalse(node0.isEmpty());
2440:       assertFalse(node0.isFor());
2441:       assertFalse(node0.isDefaultCase());
2442:       assertFalse(node0.isTry());
2443:       assertFalse(node0.isNE());
2444:       assertFalse(node0.isNull());
2445:       assertFalse(node0.isSetterDef());
2446:       assertFalse(node0.isIn());
2447:       assertFalse(node0.isCatch());
2448:       assertFalse(node0.isCall());
2449:       assertFalse(node0.isIf());
2450:       assertFalse(node0.isDelProp());
2451:       assertFalse(node0.isName());
2452:       assertEquals((-1), node0.getCharno());
2453:       assertFalse(node0.isNew());
2454:       assertFalse(node0.isAdd());
2455:       assertFalse(node0.isBlock());
2456:       assertFalse(node0.isCase());
2457:       assertEquals(39, node0.getType());
2458:       assertFalse(node0.isVar());
2459:       assertFalse(node0.isHook());
2460:       assertFalse(node0.isDo());
2461:       assertFalse(node0.isAssignAdd());
2462:       assertFalse(node0.isParamList());
2463:       assertFalse(node0.isLabel());
2464:       assertEquals(0, node0.getChildCount());
2465:       assertFalse(node0.isGetterDef());
2466:       assertFalse(node0.isStringKey());
2467:       assertFalse(node0.isArrayLit());
2468:       assertFalse(node0.isSwitch());
2469:       assertFalse(node0.isLabelName());
2470:       assertFalse(node0.isScript());
2471:       assertFalse(node0.isExprResult());
2472:       assertFalse(node0.isNot());
2473:       assertFalse(node0.isWith());
2474:       assertFalse(node0.hasOneChild());
2475:       assertFalse(node0.isComma());
2476:       assertFalse(node0.isThis());
2477:       assertFalse(node0.isReturn());
2478:       assertFalse(node0.hasChildren());
2479:       assertFalse(node0.isInstanceOf());
2480:       assertFalse(node0.isDec());
2481:       assertFalse(node0.isAssign());
2482:       assertFalse(node0.isOr());
2483:       assertFalse(node0.isTypeOf());
2484:       assertFalse(node0.hasMoreThanOneChild());
2485:       assertFalse(node0.isGetElem());
2486:       assertFalse(node0.isBreak());
2487:       assertEquals((-1), node0.getLineno());
2488:       assertFalse(node0.isInc());
2489:       assertFalse(node0.isString());
2490:       assertFalse(node0.isThrow());
2491:       assertFalse(node0.isWhile());
2492:       assertTrue(node0.isNumber());
2493:       assertFalse(node0.isGetProp());
2494:       assertEquals((-1), node0.getSourcePosition());
2495:       assertFalse(node0.isFalse());
2496:       assertFalse(node0.isAnd());
2497:       assertFalse(node0.isContinue());
2498:       
2499:       node0.isGetElem();
2500:       assertEquals(54, Node.SLASH_V);
2501:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2502:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2503:       assertEquals(30, Node.VAR_ARGS_NAME);
2504:       assertEquals(52, Node.LENGTH);
2505:       assertEquals(12, Node.COLUMN_BITS);
2506:       assertEquals(1, Node.DECR_FLAG);
2507:       assertEquals(32, Node.INCRDECR_PROP);
2508:       assertEquals(57, Node.LAST_PROP);
2509:       assertEquals(8, Node.FLAG_NO_THROWS);
2510:       assertEquals(39, Node.EMPTY_BLOCK);
2511:       assertEquals(48, Node.DIRECTIVES);
2512:       assertEquals(37, Node.OPT_ARG_NAME);
2513:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2514:       assertEquals(29, Node.JSDOC_INFO_PROP);
2515:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2516:       assertEquals(4095, Node.COLUMN_MASK);
2517:       assertEquals(57, Node.REFLECTED_OBJECT);
2518:       assertEquals(49, Node.DIRECT_EVAL);
2519:       assertEquals(56, Node.CHANGE_TIME);
2520:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2521:       assertEquals(36, Node.QUOTED_PROP);
2522:       assertEquals(53, Node.INPUT_ID);
2523:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2524:       assertEquals(55, Node.INFERRED_FUNCTION);
2525:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2526:       assertEquals(2, Node.POST_FLAG);
2527:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2528:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2529:       assertEquals(47, Node.IS_DISPATCHER);
2530:       assertEquals(50, Node.FREE_CALL);
2531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2532:       assertEquals(40, Node.ORIGINALNAME_PROP);
2533:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2534:       assertEquals(46, Node.IS_NAMESPACE);
2535:       assertEquals(43, Node.IS_CONSTANT_NAME);
2536:   }
2537: }
RegularFileObject[/tmp/EvoSuite_123_1628157524692/com/google/javascript/rhino/Node_123_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:45 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_123_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_123_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_123_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:45.447 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());

Iterable<Node> iterable0 = node0.children();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());

node0.isDec();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());

Node node1 = new Node(15, 0, 48);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals(48, node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertEquals(0, node1.getLineno());
assertEquals(15, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());

Node node2 = node0.clonePropsFrom(node1);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals(48, node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertEquals(0, node1.getLineno());
assertEquals(15, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertTrue(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isHook());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCatch());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isName());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isNew());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());

node0.isFromExterns();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());

node0.isBreak();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());

Node node3 = node0.srcrefTree(node2);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals(48, node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertEquals(0, node1.getLineno());
assertEquals(15, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertTrue(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isHook());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCatch());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isName());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isNew());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertEquals(39, node3.getType());
assertFalse(node3.isDo());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isLabelName());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isCast());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isNot());
assertFalse(node3.isExprResult());
assertFalse(node3.isObjectLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isGetProp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssign());
assertFalse(node3.isEmpty());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isCall());
assertFalse(node3.isOr());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertTrue(node3.isNumber());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFalse());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isAnd());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isScript());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertFalse(node3.isThis());
assertFalse(node3.isFor());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNE());
assertFalse(node3.isIf());

node0.isCatch();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());

Node node4 = Node.newNumber(0.0, 52, 46);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isSetterDef());
assertFalse(node4.isTry());
assertFalse(node4.isGetterDef());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isArrayLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isContinue());
assertFalse(node4.isBlock());
assertEquals(39, node4.getType());
assertFalse(node4.isIn());
assertFalse(node4.isHook());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.isThis());
assertFalse(node4.isCatch());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertEquals(52, node4.getLineno());
assertFalse(node4.isScript());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isGetProp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isLabel());
assertEquals(46, node4.getCharno());
assertFalse(node4.isCast());
assertFalse(node4.isAnd());
assertFalse(node4.isLabelName());
assertFalse(node4.isWhile());
assertFalse(node4.isString());
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isVar());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertTrue(node4.isNumber());
assertFalse(node4.isBreak());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isNull());
assertFalse(node4.isDelProp());
assertFalse(node4.isEmpty());
assertFalse(node4.isAssign());
assertFalse(node4.isOr());
assertFalse(node4.isComma());
assertFalse(node4.isDec());
assertFalse(node4.isVoid());
assertEquals(213038, node4.getSourcePosition());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isName());

node4.isQuotedString();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isSetterDef());
assertFalse(node4.isTry());
assertFalse(node4.isGetterDef());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isArrayLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isContinue());
assertFalse(node4.isBlock());
assertEquals(39, node4.getType());
assertFalse(node4.isIn());
assertFalse(node4.isHook());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.isThis());
assertFalse(node4.isCatch());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertEquals(52, node4.getLineno());
assertFalse(node4.isScript());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isGetProp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isLabel());
assertEquals(46, node4.getCharno());
assertFalse(node4.isCast());
assertFalse(node4.isAnd());
assertFalse(node4.isLabelName());
assertFalse(node4.isWhile());
assertFalse(node4.isString());
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isVar());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertTrue(node4.isNumber());
assertFalse(node4.isBreak());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isNull());
assertFalse(node4.isDelProp());
assertFalse(node4.isEmpty());
assertFalse(node4.isAssign());
assertFalse(node4.isOr());
assertFalse(node4.isComma());
assertFalse(node4.isDec());
assertFalse(node4.isVoid());
assertEquals(213038, node4.getSourcePosition());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isName());

node0.getDirectives();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());

node4.getDouble();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isSetterDef());
assertFalse(node4.isTry());
assertFalse(node4.isGetterDef());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isArrayLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isContinue());
assertFalse(node4.isBlock());
assertEquals(39, node4.getType());
assertFalse(node4.isIn());
assertFalse(node4.isHook());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.isThis());
assertFalse(node4.isCatch());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertEquals(52, node4.getLineno());
assertFalse(node4.isScript());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isGetProp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isLabel());
assertEquals(46, node4.getCharno());
assertFalse(node4.isCast());
assertFalse(node4.isAnd());
assertFalse(node4.isLabelName());
assertFalse(node4.isWhile());
assertFalse(node4.isString());
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isVar());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertTrue(node4.isNumber());
assertFalse(node4.isBreak());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isNull());
assertFalse(node4.isDelProp());
assertFalse(node4.isEmpty());
assertFalse(node4.isAssign());
assertFalse(node4.isOr());
assertFalse(node4.isComma());
assertFalse(node4.isDec());
assertFalse(node4.isVoid());
assertEquals(213038, node4.getSourcePosition());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isName());

node0.getParent();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());

node2.hasChild(node4);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.hasOneChild());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals(48, node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertEquals(0, node1.getLineno());
assertEquals(15, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertTrue(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isHook());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCatch());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertEquals(39, node2.getType());
assertFalse(node2.isName());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isNew());
assertFalse(node2.isSwitch());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isSetterDef());
assertFalse(node4.isTry());
assertFalse(node4.isGetterDef());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isArrayLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isContinue());
assertFalse(node4.isBlock());
assertEquals(39, node4.getType());
assertFalse(node4.isIn());
assertFalse(node4.isHook());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.isThis());
assertFalse(node4.isCatch());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertEquals(52, node4.getLineno());
assertFalse(node4.isScript());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isGetProp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isLabel());
assertEquals(46, node4.getCharno());
assertFalse(node4.isCast());
assertFalse(node4.isAnd());
assertFalse(node4.isLabelName());
assertFalse(node4.isWhile());
assertFalse(node4.isString());
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isVar());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertTrue(node4.isNumber());
assertFalse(node4.isBreak());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isNull());
assertFalse(node4.isDelProp());
assertFalse(node4.isEmpty());
assertFalse(node4.isAssign());
assertFalse(node4.isOr());
assertFalse(node4.isComma());
assertFalse(node4.isDec());
assertFalse(node4.isVoid());
assertEquals(213038, node4.getSourcePosition());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isName());

node0.isNumber();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());

node0.isGetElem();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);


[MASTER] 09:58:48.626 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_143_1628157528337/com/google/javascript/rhino/Node_143_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_143_1628157528337/com/google/javascript/rhino/Node_143_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:48.626 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:48.626 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:48.626 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 163
[MASTER] 09:58:48.627 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_143_1628157528337/com/google/javascript/rhino/Node_143_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:48 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_143_tmp__ESTest extends Node_143_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertEquals(57, Node.LAST_PROP);
23:       assertEquals(30, Node.VAR_ARGS_NAME);
24:       assertEquals(54, Node.SLASH_V);
25:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
26:       assertEquals(57, Node.REFLECTED_OBJECT);
27:       assertEquals(49, Node.DIRECT_EVAL);
28:       assertEquals(40, Node.ORIGINALNAME_PROP);
29:       assertEquals(37, Node.OPT_ARG_NAME);
30:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
31:       assertEquals(50, Node.FREE_CALL);
32:       assertEquals(46, Node.IS_NAMESPACE);
33:       assertEquals(51, Node.STATIC_SOURCE_FILE);
34:       assertEquals(12, Node.COLUMN_BITS);
35:       assertEquals(32, Node.INCRDECR_PROP);
36:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
37:       assertEquals(1, Node.DECR_FLAG);
38:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
39:       assertEquals(43, Node.IS_CONSTANT_NAME);
40:       assertEquals(36, Node.QUOTED_PROP);
41:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
42:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
43:       assertEquals(4095, Node.COLUMN_MASK);
44:       assertEquals(48, Node.DIRECTIVES);
45:       assertEquals(2, Node.POST_FLAG);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
48:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
49:       assertEquals(8, Node.FLAG_NO_THROWS);
50:       assertEquals(47, Node.IS_DISPATCHER);
51:       assertEquals(55, Node.INFERRED_FUNCTION);
52:       assertEquals(52, Node.LENGTH);
53:       assertEquals(53, Node.INPUT_ID);
54:       assertEquals(29, Node.JSDOC_INFO_PROP);
55:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
56:       assertEquals(15, Node.NO_SIDE_EFFECTS);
57:       assertEquals(39, Node.EMPTY_BLOCK);
58:       assertFalse(node0.isExprResult());
59:       assertFalse(node0.isAnd());
60:       assertFalse(node0.isAssign());
61:       assertFalse(node0.isLabelName());
62:       assertFalse(node0.isWith());
63:       assertFalse(node0.isInstanceOf());
64:       assertFalse(node0.isGetElem());
65:       assertFalse(node0.isCast());
66:       assertFalse(node0.isComma());
67:       assertFalse(node0.isThis());
68:       assertFalse(node0.isGetProp());
69:       assertEquals((-1), node0.getSourcePosition());
70:       assertFalse(node0.isDec());
71:       assertFalse(node0.isTypeOf());
72:       assertFalse(node0.isReturn());
73:       assertFalse(node0.hasChildren());
74:       assertFalse(node0.hasOneChild());
75:       assertFalse(node0.isNot());
76:       assertFalse(node0.isObjectLit());
77:       assertFalse(node0.isScript());
78:       assertFalse(node0.isInc());
79:       assertEquals(39, node0.getType());
80:       assertFalse(node0.isBlock());
81:       assertFalse(node0.isHook());
82:       assertFalse(node0.hasMoreThanOneChild());
83:       assertFalse(node0.isContinue());
84:       assertFalse(node0.isFalse());
85:       assertEquals((-1), node0.getLineno());
86:       assertFalse(node0.isSetterDef());
87:       assertFalse(node0.isIf());
88:       assertFalse(node0.isThrow());
89:       assertFalse(node0.isNE());
90:       assertFalse(node0.isIn());
91:       assertFalse(node0.isFunction());
92:       assertFalse(node0.isTrue());
93:       assertFalse(node0.isDebugger());
94:       assertFalse(node0.isTry());
95:       assertFalse(node0.isVoid());
96:       assertFalse(node0.isRegExp());
97:       assertFalse(node0.isDefaultCase());
98:       assertFalse(node0.isCatch());
99:       assertFalse(node0.isArrayLit());
100:       assertEquals(0, node0.getChildCount());
101:       assertFalse(node0.isParamList());
102:       assertFalse(node0.isGetterDef());
103:       assertFalse(node0.isStringKey());
104:       assertFalse(node0.isFor());
105:       assertFalse(node0.isCase());
106:       assertFalse(node0.isString());
107:       assertTrue(node0.isNumber());
108:       assertEquals((-1), node0.getCharno());
109:       assertFalse(node0.isSwitch());
110:       assertFalse(node0.isNew());
111:       assertFalse(node0.isWhile());
112:       assertFalse(node0.isVar());
113:       assertFalse(node0.isCall());
114:       assertFalse(node0.isName());
115:       assertFalse(node0.isBreak());
116:       assertFalse(node0.isOr());
117:       assertFalse(node0.isDelProp());
118:       assertFalse(node0.isLabel());
119:       assertFalse(node0.isAssignAdd());
120:       assertFalse(node0.isNull());
121:       assertFalse(node0.isDo());
122:       assertFalse(node0.isEmpty());
123:       assertFalse(node0.isAdd());
124:       assertNotNull(node0);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertEquals(57, Node.LAST_PROP);
128:       assertEquals(30, Node.VAR_ARGS_NAME);
129:       assertEquals(54, Node.SLASH_V);
130:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
131:       assertEquals(57, Node.REFLECTED_OBJECT);
132:       assertEquals(49, Node.DIRECT_EVAL);
133:       assertEquals(40, Node.ORIGINALNAME_PROP);
134:       assertEquals(37, Node.OPT_ARG_NAME);
135:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
136:       assertEquals(50, Node.FREE_CALL);
137:       assertEquals(46, Node.IS_NAMESPACE);
138:       assertEquals(51, Node.STATIC_SOURCE_FILE);
139:       assertEquals(12, Node.COLUMN_BITS);
140:       assertEquals(32, Node.INCRDECR_PROP);
141:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
142:       assertEquals(1, Node.DECR_FLAG);
143:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
144:       assertEquals(43, Node.IS_CONSTANT_NAME);
145:       assertEquals(36, Node.QUOTED_PROP);
146:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
147:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
148:       assertEquals(4095, Node.COLUMN_MASK);
149:       assertEquals(48, Node.DIRECTIVES);
150:       assertEquals(2, Node.POST_FLAG);
151:       assertEquals(56, Node.CHANGE_TIME);
152:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
154:       assertEquals(8, Node.FLAG_NO_THROWS);
155:       assertEquals(47, Node.IS_DISPATCHER);
156:       assertEquals(55, Node.INFERRED_FUNCTION);
157:       assertEquals(52, Node.LENGTH);
158:       assertEquals(53, Node.INPUT_ID);
159:       assertEquals(29, Node.JSDOC_INFO_PROP);
160:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
161:       assertEquals(15, Node.NO_SIDE_EFFECTS);
162:       assertEquals(39, Node.EMPTY_BLOCK);
163:       assertFalse(iterable0.contains(node0));
164:       assertFalse(node0.isExprResult());
165:       assertFalse(node0.isAnd());
166:       assertFalse(node0.isAssign());
167:       assertFalse(node0.isLabelName());
168:       assertFalse(node0.isWith());
169:       assertFalse(node0.isInstanceOf());
170:       assertFalse(node0.isGetElem());
171:       assertFalse(node0.isCast());
172:       assertFalse(node0.isComma());
173:       assertFalse(node0.isThis());
174:       assertFalse(node0.isGetProp());
175:       assertEquals((-1), node0.getSourcePosition());
176:       assertFalse(node0.isDec());
177:       assertFalse(node0.isTypeOf());
178:       assertFalse(node0.isReturn());
179:       assertFalse(node0.hasChildren());
180:       assertFalse(node0.hasOneChild());
181:       assertFalse(node0.isNot());
182:       assertFalse(node0.isObjectLit());
183:       assertFalse(node0.isScript());
184:       assertFalse(node0.isInc());
185:       assertEquals(39, node0.getType());
186:       assertFalse(node0.isBlock());
187:       assertFalse(node0.isHook());
188:       assertFalse(node0.hasMoreThanOneChild());
189:       assertFalse(node0.isContinue());
190:       assertFalse(node0.isFalse());
191:       assertEquals((-1), node0.getLineno());
192:       assertFalse(node0.isSetterDef());
193:       assertFalse(node0.isIf());
194:       assertFalse(node0.isThrow());
195:       assertFalse(node0.isNE());
196:       assertFalse(node0.isIn());
197:       assertFalse(node0.isFunction());
198:       assertFalse(node0.isTrue());
199:       assertFalse(node0.isDebugger());
200:       assertFalse(node0.isTry());
201:       assertFalse(node0.isVoid());
202:       assertFalse(node0.isRegExp());
203:       assertFalse(node0.isDefaultCase());
204:       assertFalse(node0.isCatch());
205:       assertFalse(node0.isArrayLit());
206:       assertEquals(0, node0.getChildCount());
207:       assertFalse(node0.isParamList());
208:       assertFalse(node0.isGetterDef());
209:       assertFalse(node0.isStringKey());
210:       assertFalse(node0.isFor());
211:       assertFalse(node0.isCase());
212:       assertFalse(node0.isString());
213:       assertTrue(node0.isNumber());
214:       assertEquals((-1), node0.getCharno());
215:       assertFalse(node0.isSwitch());
216:       assertFalse(node0.isNew());
217:       assertFalse(node0.isWhile());
218:       assertFalse(node0.isVar());
219:       assertFalse(node0.isCall());
220:       assertFalse(node0.isName());
221:       assertFalse(node0.isBreak());
222:       assertFalse(node0.isOr());
223:       assertFalse(node0.isDelProp());
224:       assertFalse(node0.isLabel());
225:       assertFalse(node0.isAssignAdd());
226:       assertFalse(node0.isNull());
227:       assertFalse(node0.isDo());
228:       assertFalse(node0.isEmpty());
229:       assertFalse(node0.isAdd());
230:       assertNotNull(iterable0);
231:       
232:       boolean boolean0 = node0.isDec();
233:       assertEquals(57, Node.LAST_PROP);
234:       assertEquals(30, Node.VAR_ARGS_NAME);
235:       assertEquals(54, Node.SLASH_V);
236:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
237:       assertEquals(57, Node.REFLECTED_OBJECT);
238:       assertEquals(49, Node.DIRECT_EVAL);
239:       assertEquals(40, Node.ORIGINALNAME_PROP);
240:       assertEquals(37, Node.OPT_ARG_NAME);
241:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
242:       assertEquals(50, Node.FREE_CALL);
243:       assertEquals(46, Node.IS_NAMESPACE);
244:       assertEquals(51, Node.STATIC_SOURCE_FILE);
245:       assertEquals(12, Node.COLUMN_BITS);
246:       assertEquals(32, Node.INCRDECR_PROP);
247:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
248:       assertEquals(1, Node.DECR_FLAG);
249:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
250:       assertEquals(43, Node.IS_CONSTANT_NAME);
251:       assertEquals(36, Node.QUOTED_PROP);
252:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
254:       assertEquals(4095, Node.COLUMN_MASK);
255:       assertEquals(48, Node.DIRECTIVES);
256:       assertEquals(2, Node.POST_FLAG);
257:       assertEquals(56, Node.CHANGE_TIME);
258:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
259:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
260:       assertEquals(8, Node.FLAG_NO_THROWS);
261:       assertEquals(47, Node.IS_DISPATCHER);
262:       assertEquals(55, Node.INFERRED_FUNCTION);
263:       assertEquals(52, Node.LENGTH);
264:       assertEquals(53, Node.INPUT_ID);
265:       assertEquals(29, Node.JSDOC_INFO_PROP);
266:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
267:       assertEquals(15, Node.NO_SIDE_EFFECTS);
268:       assertEquals(39, Node.EMPTY_BLOCK);
269:       assertFalse(node0.isExprResult());
270:       assertFalse(node0.isAnd());
271:       assertFalse(node0.isAssign());
272:       assertFalse(node0.isLabelName());
273:       assertFalse(node0.isWith());
274:       assertFalse(node0.isInstanceOf());
275:       assertFalse(node0.isGetElem());
276:       assertFalse(node0.isCast());
277:       assertFalse(node0.isComma());
278:       assertFalse(node0.isThis());
279:       assertFalse(node0.isGetProp());
280:       assertEquals((-1), node0.getSourcePosition());
281:       assertFalse(node0.isDec());
282:       assertFalse(node0.isTypeOf());
283:       assertFalse(node0.isReturn());
284:       assertFalse(node0.hasChildren());
285:       assertFalse(node0.hasOneChild());
286:       assertFalse(node0.isNot());
287:       assertFalse(node0.isObjectLit());
288:       assertFalse(node0.isScript());
289:       assertFalse(node0.isInc());
290:       assertEquals(39, node0.getType());
291:       assertFalse(node0.isBlock());
292:       assertFalse(node0.isHook());
293:       assertFalse(node0.hasMoreThanOneChild());
294:       assertFalse(node0.isContinue());
295:       assertFalse(node0.isFalse());
296:       assertEquals((-1), node0.getLineno());
297:       assertFalse(node0.isSetterDef());
298:       assertFalse(node0.isIf());
299:       assertFalse(node0.isThrow());
300:       assertFalse(node0.isNE());
301:       assertFalse(node0.isIn());
302:       assertFalse(node0.isFunction());
303:       assertFalse(node0.isTrue());
304:       assertFalse(node0.isDebugger());
305:       assertFalse(node0.isTry());
306:       assertFalse(node0.isVoid());
307:       assertFalse(node0.isRegExp());
308:       assertFalse(node0.isDefaultCase());
309:       assertFalse(node0.isCatch());
310:       assertFalse(node0.isArrayLit());
311:       assertEquals(0, node0.getChildCount());
312:       assertFalse(node0.isParamList());
313:       assertFalse(node0.isGetterDef());
314:       assertFalse(node0.isStringKey());
315:       assertFalse(node0.isFor());
316:       assertFalse(node0.isCase());
317:       assertFalse(node0.isString());
318:       assertTrue(node0.isNumber());
319:       assertEquals((-1), node0.getCharno());
320:       assertFalse(node0.isSwitch());
321:       assertFalse(node0.isNew());
322:       assertFalse(node0.isWhile());
323:       assertFalse(node0.isVar());
324:       assertFalse(node0.isCall());
325:       assertFalse(node0.isName());
326:       assertFalse(node0.isBreak());
327:       assertFalse(node0.isOr());
328:       assertFalse(node0.isDelProp());
329:       assertFalse(node0.isLabel());
330:       assertFalse(node0.isAssignAdd());
331:       assertFalse(node0.isNull());
332:       assertFalse(node0.isDo());
333:       assertFalse(node0.isEmpty());
334:       assertFalse(node0.isAdd());
335:       assertFalse(boolean0);
336:       
337:       Node node1 = new Node(15, 0, 48);
338:       assertEquals(15, Node.NO_SIDE_EFFECTS);
339:       assertEquals(57, Node.LAST_PROP);
340:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
341:       assertEquals(54, Node.SLASH_V);
342:       assertEquals(30, Node.VAR_ARGS_NAME);
343:       assertEquals(51, Node.STATIC_SOURCE_FILE);
344:       assertEquals(57, Node.REFLECTED_OBJECT);
345:       assertEquals(46, Node.IS_NAMESPACE);
346:       assertEquals(40, Node.ORIGINALNAME_PROP);
347:       assertEquals(49, Node.DIRECT_EVAL);
348:       assertEquals(37, Node.OPT_ARG_NAME);
349:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
350:       assertEquals(50, Node.FREE_CALL);
351:       assertEquals(12, Node.COLUMN_BITS);
352:       assertEquals(32, Node.INCRDECR_PROP);
353:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
354:       assertEquals(1, Node.DECR_FLAG);
355:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
356:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
357:       assertEquals(43, Node.IS_CONSTANT_NAME);
358:       assertEquals(36, Node.QUOTED_PROP);
359:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
360:       assertEquals(4095, Node.COLUMN_MASK);
361:       assertEquals(48, Node.DIRECTIVES);
362:       assertEquals(56, Node.CHANGE_TIME);
363:       assertEquals(47, Node.IS_DISPATCHER);
364:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
365:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
366:       assertEquals(8, Node.FLAG_NO_THROWS);
367:       assertEquals(2, Node.POST_FLAG);
368:       assertEquals(55, Node.INFERRED_FUNCTION);
369:       assertEquals(52, Node.LENGTH);
370:       assertEquals(29, Node.JSDOC_INFO_PROP);
371:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
372:       assertEquals(53, Node.INPUT_ID);
373:       assertEquals(39, Node.EMPTY_BLOCK);
374:       assertFalse(node1.isDebugger());
375:       assertFalse(node1.isDefaultCase());
376:       assertFalse(node1.isVoid());
377:       assertFalse(node1.isFunction());
378:       assertFalse(node1.isRegExp());
379:       assertFalse(node1.isTrue());
380:       assertFalse(node1.isCatch());
381:       assertFalse(node1.isArrayLit());
382:       assertEquals(0, node1.getChildCount());
383:       assertEquals(0, node1.getLineno());
384:       assertFalse(node1.isParamList());
385:       assertFalse(node1.isGetterDef());
386:       assertFalse(node1.isFor());
387:       assertFalse(node1.isStringKey());
388:       assertFalse(node1.isTry());
389:       assertFalse(node1.isString());
390:       assertFalse(node1.isCase());
391:       assertFalse(node1.isBlock());
392:       assertFalse(node1.isHook());
393:       assertFalse(node1.hasMoreThanOneChild());
394:       assertFalse(node1.isContinue());
395:       assertFalse(node1.isFalse());
396:       assertFalse(node1.isNE());
397:       assertFalse(node1.isIf());
398:       assertFalse(node1.isThrow());
399:       assertFalse(node1.isIn());
400:       assertEquals(15, node1.getType());
401:       assertFalse(node1.isInc());
402:       assertFalse(node1.isSetterDef());
403:       assertFalse(node1.isScript());
404:       assertFalse(node1.isNot());
405:       assertEquals(48, node1.getSourcePosition());
406:       assertFalse(node1.isCast());
407:       assertFalse(node1.isInstanceOf());
408:       assertFalse(node1.isAnd());
409:       assertFalse(node1.isWith());
410:       assertFalse(node1.isLabelName());
411:       assertFalse(node1.isExprResult());
412:       assertFalse(node1.isGetElem());
413:       assertFalse(node1.isComma());
414:       assertFalse(node1.isDec());
415:       assertFalse(node1.isTypeOf());
416:       assertFalse(node1.isNumber());
417:       assertFalse(node1.isAssign());
418:       assertFalse(node1.hasChildren());
419:       assertFalse(node1.isThis());
420:       assertFalse(node1.isReturn());
421:       assertFalse(node1.hasOneChild());
422:       assertFalse(node1.isObjectLit());
423:       assertFalse(node1.isGetProp());
424:       assertFalse(node1.isSwitch());
425:       assertFalse(node1.isWhile());
426:       assertFalse(node1.isName());
427:       assertFalse(node1.isBreak());
428:       assertFalse(node1.isCall());
429:       assertFalse(node1.isDelProp());
430:       assertFalse(node1.isOr());
431:       assertFalse(node1.isLabel());
432:       assertFalse(node1.isAssignAdd());
433:       assertFalse(node1.isNull());
434:       assertEquals(48, node1.getCharno());
435:       assertFalse(node1.isVar());
436:       assertFalse(node1.isEmpty());
437:       assertFalse(node1.isAdd());
438:       assertFalse(node1.isDo());
439:       assertFalse(node1.isNew());
440:       assertNotNull(node1);
441:       assertFalse(node1.equals((Object)node0));
442:       
443:       Node node2 = node0.clonePropsFrom(node1);
444:       assertEquals(57, Node.LAST_PROP);
445:       assertEquals(30, Node.VAR_ARGS_NAME);
446:       assertEquals(54, Node.SLASH_V);
447:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
448:       assertEquals(57, Node.REFLECTED_OBJECT);
449:       assertEquals(49, Node.DIRECT_EVAL);
450:       assertEquals(40, Node.ORIGINALNAME_PROP);
451:       assertEquals(37, Node.OPT_ARG_NAME);
452:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
453:       assertEquals(50, Node.FREE_CALL);
454:       assertEquals(46, Node.IS_NAMESPACE);
455:       assertEquals(51, Node.STATIC_SOURCE_FILE);
456:       assertEquals(12, Node.COLUMN_BITS);
457:       assertEquals(32, Node.INCRDECR_PROP);
458:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
459:       assertEquals(1, Node.DECR_FLAG);
460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
461:       assertEquals(43, Node.IS_CONSTANT_NAME);
462:       assertEquals(36, Node.QUOTED_PROP);
463:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
464:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
465:       assertEquals(4095, Node.COLUMN_MASK);
466:       assertEquals(48, Node.DIRECTIVES);
467:       assertEquals(2, Node.POST_FLAG);
468:       assertEquals(56, Node.CHANGE_TIME);
469:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
470:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
471:       assertEquals(8, Node.FLAG_NO_THROWS);
472:       assertEquals(47, Node.IS_DISPATCHER);
473:       assertEquals(55, Node.INFERRED_FUNCTION);
474:       assertEquals(52, Node.LENGTH);
475:       assertEquals(53, Node.INPUT_ID);
476:       assertEquals(29, Node.JSDOC_INFO_PROP);
477:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
478:       assertEquals(15, Node.NO_SIDE_EFFECTS);
479:       assertEquals(39, Node.EMPTY_BLOCK);
480:       assertEquals(15, Node.NO_SIDE_EFFECTS);
481:       assertEquals(57, Node.LAST_PROP);
482:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
483:       assertEquals(54, Node.SLASH_V);
484:       assertEquals(30, Node.VAR_ARGS_NAME);
485:       assertEquals(51, Node.STATIC_SOURCE_FILE);
486:       assertEquals(57, Node.REFLECTED_OBJECT);
487:       assertEquals(46, Node.IS_NAMESPACE);
488:       assertEquals(40, Node.ORIGINALNAME_PROP);
489:       assertEquals(49, Node.DIRECT_EVAL);
490:       assertEquals(37, Node.OPT_ARG_NAME);
491:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
492:       assertEquals(50, Node.FREE_CALL);
493:       assertEquals(12, Node.COLUMN_BITS);
494:       assertEquals(32, Node.INCRDECR_PROP);
495:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
496:       assertEquals(1, Node.DECR_FLAG);
497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
499:       assertEquals(43, Node.IS_CONSTANT_NAME);
500:       assertEquals(36, Node.QUOTED_PROP);
501:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
502:       assertEquals(4095, Node.COLUMN_MASK);
503:       assertEquals(48, Node.DIRECTIVES);
504:       assertEquals(56, Node.CHANGE_TIME);
505:       assertEquals(47, Node.IS_DISPATCHER);
506:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
507:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
508:       assertEquals(8, Node.FLAG_NO_THROWS);
509:       assertEquals(2, Node.POST_FLAG);
510:       assertEquals(55, Node.INFERRED_FUNCTION);
511:       assertEquals(52, Node.LENGTH);
512:       assertEquals(29, Node.JSDOC_INFO_PROP);
513:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
514:       assertEquals(53, Node.INPUT_ID);
515:       assertEquals(39, Node.EMPTY_BLOCK);
516:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
517:       assertEquals(55, Node.INFERRED_FUNCTION);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(36, Node.QUOTED_PROP);
520:       assertEquals(8, Node.FLAG_NO_THROWS);
521:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
522:       assertEquals(53, Node.INPUT_ID);
523:       assertEquals(39, Node.EMPTY_BLOCK);
524:       assertEquals(40, Node.ORIGINALNAME_PROP);
525:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
526:       assertEquals(50, Node.FREE_CALL);
527:       assertEquals(47, Node.IS_DISPATCHER);
528:       assertEquals(2, Node.POST_FLAG);
529:       assertEquals(54, Node.SLASH_V);
530:       assertEquals(43, Node.IS_CONSTANT_NAME);
531:       assertEquals(1, Node.DECR_FLAG);
532:       assertEquals(30, Node.VAR_ARGS_NAME);
533:       assertEquals(46, Node.IS_NAMESPACE);
534:       assertEquals(51, Node.STATIC_SOURCE_FILE);
535:       assertEquals(12, Node.COLUMN_BITS);
536:       assertEquals(52, Node.LENGTH);
537:       assertEquals(57, Node.LAST_PROP);
538:       assertEquals(32, Node.INCRDECR_PROP);
539:       assertEquals(29, Node.JSDOC_INFO_PROP);
540:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
541:       assertEquals(15, Node.NO_SIDE_EFFECTS);
542:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
543:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
544:       assertEquals(57, Node.REFLECTED_OBJECT);
545:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
547:       assertEquals(37, Node.OPT_ARG_NAME);
548:       assertEquals(48, Node.DIRECTIVES);
549:       assertEquals(56, Node.CHANGE_TIME);
550:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
551:       assertEquals(49, Node.DIRECT_EVAL);
552:       assertFalse(node0.isExprResult());
553:       assertFalse(node0.isAnd());
554:       assertFalse(node0.isAssign());
555:       assertFalse(node0.isLabelName());
556:       assertFalse(node0.isWith());
557:       assertFalse(node0.isInstanceOf());
558:       assertFalse(node0.isGetElem());
559:       assertFalse(node0.isCast());
560:       assertFalse(node0.isComma());
561:       assertFalse(node0.isThis());
562:       assertFalse(node0.isGetProp());
563:       assertEquals((-1), node0.getSourcePosition());
564:       assertFalse(node0.isDec());
565:       assertFalse(node0.isTypeOf());
566:       assertFalse(node0.isReturn());
567:       assertFalse(node0.hasChildren());
568:       assertFalse(node0.hasOneChild());
569:       assertFalse(node0.isNot());
570:       assertFalse(node0.isObjectLit());
571:       assertFalse(node0.isScript());
572:       assertFalse(node0.isInc());
573:       assertEquals(39, node0.getType());
574:       assertFalse(node0.isBlock());
575:       assertFalse(node0.isHook());
576:       assertFalse(node0.hasMoreThanOneChild());
577:       assertFalse(node0.isContinue());
578:       assertFalse(node0.isFalse());
579:       assertEquals((-1), node0.getLineno());
580:       assertFalse(node0.isSetterDef());
581:       assertFalse(node0.isIf());
582:       assertFalse(node0.isThrow());
583:       assertFalse(node0.isNE());
584:       assertFalse(node0.isIn());
585:       assertFalse(node0.isFunction());
586:       assertFalse(node0.isTrue());
587:       assertFalse(node0.isDebugger());
588:       assertFalse(node0.isTry());
589:       assertFalse(node0.isVoid());
590:       assertFalse(node0.isRegExp());
591:       assertFalse(node0.isDefaultCase());
592:       assertFalse(node0.isCatch());
593:       assertFalse(node0.isArrayLit());
594:       assertEquals(0, node0.getChildCount());
595:       assertFalse(node0.isParamList());
596:       assertFalse(node0.isGetterDef());
597:       assertFalse(node0.isStringKey());
598:       assertFalse(node0.isFor());
599:       assertFalse(node0.isCase());
600:       assertFalse(node0.isString());
601:       assertTrue(node0.isNumber());
602:       assertEquals((-1), node0.getCharno());
603:       assertFalse(node0.isSwitch());
604:       assertFalse(node0.isNew());
605:       assertFalse(node0.isWhile());
606:       assertFalse(node0.isVar());
607:       assertFalse(node0.isCall());
608:       assertFalse(node0.isName());
609:       assertFalse(node0.isBreak());
610:       assertFalse(node0.isOr());
611:       assertFalse(node0.isDelProp());
612:       assertFalse(node0.isLabel());
613:       assertFalse(node0.isAssignAdd());
614:       assertFalse(node0.isNull());
615:       assertFalse(node0.isDo());
616:       assertFalse(node0.isEmpty());
617:       assertFalse(node0.isAdd());
618:       assertFalse(node1.isDebugger());
619:       assertFalse(node1.isDefaultCase());
620:       assertFalse(node1.isVoid());
621:       assertFalse(node1.isFunction());
622:       assertFalse(node1.isRegExp());
623:       assertFalse(node1.isTrue());
624:       assertFalse(node1.isCatch());
625:       assertFalse(node1.isArrayLit());
626:       assertEquals(0, node1.getChildCount());
627:       assertEquals(0, node1.getLineno());
628:       assertFalse(node1.isParamList());
629:       assertFalse(node1.isGetterDef());
630:       assertFalse(node1.isFor());
631:       assertFalse(node1.isStringKey());
632:       assertFalse(node1.isTry());
633:       assertFalse(node1.isString());
634:       assertFalse(node1.isCase());
635:       assertFalse(node1.isBlock());
636:       assertFalse(node1.isHook());
637:       assertFalse(node1.hasMoreThanOneChild());
638:       assertFalse(node1.isContinue());
639:       assertFalse(node1.isFalse());
640:       assertFalse(node1.isNE());
641:       assertFalse(node1.isIf());
642:       assertFalse(node1.isThrow());
643:       assertFalse(node1.isIn());
644:       assertEquals(15, node1.getType());
645:       assertFalse(node1.isInc());
646:       assertFalse(node1.isSetterDef());
647:       assertFalse(node1.isScript());
648:       assertFalse(node1.isNot());
649:       assertEquals(48, node1.getSourcePosition());
650:       assertFalse(node1.isCast());
651:       assertFalse(node1.isInstanceOf());
652:       assertFalse(node1.isAnd());
653:       assertFalse(node1.isWith());
654:       assertFalse(node1.isLabelName());
655:       assertFalse(node1.isExprResult());
656:       assertFalse(node1.isGetElem());
657:       assertFalse(node1.isComma());
658:       assertFalse(node1.isDec());
659:       assertFalse(node1.isTypeOf());
660:       assertFalse(node1.isNumber());
661:       assertFalse(node1.isAssign());
662:       assertFalse(node1.hasChildren());
663:       assertFalse(node1.isThis());
664:       assertFalse(node1.isReturn());
665:       assertFalse(node1.hasOneChild());
666:       assertFalse(node1.isObjectLit());
667:       assertFalse(node1.isGetProp());
668:       assertFalse(node1.isSwitch());
669:       assertFalse(node1.isWhile());
670:       assertFalse(node1.isName());
671:       assertFalse(node1.isBreak());
672:       assertFalse(node1.isCall());
673:       assertFalse(node1.isDelProp());
674:       assertFalse(node1.isOr());
675:       assertFalse(node1.isLabel());
676:       assertFalse(node1.isAssignAdd());
677:       assertFalse(node1.isNull());
678:       assertEquals(48, node1.getCharno());
679:       assertFalse(node1.isVar());
680:       assertFalse(node1.isEmpty());
681:       assertFalse(node1.isAdd());
682:       assertFalse(node1.isDo());
683:       assertFalse(node1.isNew());
684:       assertFalse(node2.isCase());
685:       assertEquals((-1), node2.getCharno());
686:       assertTrue(node2.isNumber());
687:       assertFalse(node2.isIn());
688:       assertFalse(node2.isString());
689:       assertFalse(node2.isInc());
690:       assertFalse(node2.isEmpty());
691:       assertFalse(node2.isFalse());
692:       assertFalse(node2.isGetterDef());
693:       assertFalse(node2.isThrow());
694:       assertFalse(node2.isFunction());
695:       assertFalse(node2.isSwitch());
696:       assertFalse(node2.isArrayLit());
697:       assertFalse(node2.isAnd());
698:       assertFalse(node2.isNot());
699:       assertFalse(node2.isObjectLit());
700:       assertFalse(node2.isDefaultCase());
701:       assertFalse(node2.isTrue());
702:       assertFalse(node2.isGetProp());
703:       assertFalse(node2.isDebugger());
704:       assertFalse(node2.isGetElem());
705:       assertFalse(node2.isName());
706:       assertFalse(node2.isAssign());
707:       assertFalse(node2.isDelProp());
708:       assertFalse(node2.isDec());
709:       assertFalse(node2.hasChildren());
710:       assertFalse(node2.isNull());
711:       assertFalse(node2.isComma());
712:       assertFalse(node2.isTypeOf());
713:       assertFalse(node2.isVoid());
714:       assertFalse(node2.isBreak());
715:       assertFalse(node2.isCall());
716:       assertFalse(node2.isExprResult());
717:       assertFalse(node2.isContinue());
718:       assertEquals(39, node2.getType());
719:       assertFalse(node2.hasMoreThanOneChild());
720:       assertFalse(node2.isDo());
721:       assertFalse(node2.isWhile());
722:       assertFalse(node2.isReturn());
723:       assertFalse(node2.isNew());
724:       assertFalse(node2.isAssignAdd());
725:       assertFalse(node2.isOr());
726:       assertFalse(node2.isAdd());
727:       assertFalse(node2.isStringKey());
728:       assertFalse(node2.isLabelName());
729:       assertEquals((-1), node2.getSourcePosition());
730:       assertFalse(node2.isParamList());
731:       assertFalse(node2.isVar());
732:       assertFalse(node2.isLabel());
733:       assertEquals(0, node2.getChildCount());
734:       assertFalse(node2.isCast());
735:       assertFalse(node2.isWith());
736:       assertFalse(node2.isTry());
737:       assertFalse(node2.hasOneChild());
738:       assertFalse(node2.isSetterDef());
739:       assertFalse(node2.isScript());
740:       assertFalse(node2.isHook());
741:       assertFalse(node2.isIf());
742:       assertFalse(node2.isThis());
743:       assertFalse(node2.isNE());
744:       assertFalse(node2.isFor());
745:       assertFalse(node2.isBlock());
746:       assertEquals((-1), node2.getLineno());
747:       assertFalse(node2.isRegExp());
748:       assertFalse(node2.isInstanceOf());
749:       assertFalse(node2.isCatch());
750:       assertSame(node0, node2);
751:       assertSame(node2, node0);
752:       assertNotNull(node2);
753:       assertFalse(node0.equals((Object)node1));
754:       assertFalse(node1.equals((Object)node0));
755:       assertFalse(node2.equals((Object)node1));
756:       
757:       node1.removeProp(2128);
758:       assertEquals(15, Node.NO_SIDE_EFFECTS);
759:       assertEquals(57, Node.LAST_PROP);
760:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
761:       assertEquals(54, Node.SLASH_V);
762:       assertEquals(30, Node.VAR_ARGS_NAME);
763:       assertEquals(51, Node.STATIC_SOURCE_FILE);
764:       assertEquals(57, Node.REFLECTED_OBJECT);
765:       assertEquals(46, Node.IS_NAMESPACE);
766:       assertEquals(40, Node.ORIGINALNAME_PROP);
767:       assertEquals(49, Node.DIRECT_EVAL);
768:       assertEquals(37, Node.OPT_ARG_NAME);
769:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
770:       assertEquals(50, Node.FREE_CALL);
771:       assertEquals(12, Node.COLUMN_BITS);
772:       assertEquals(32, Node.INCRDECR_PROP);
773:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
774:       assertEquals(1, Node.DECR_FLAG);
775:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
776:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
777:       assertEquals(43, Node.IS_CONSTANT_NAME);
778:       assertEquals(36, Node.QUOTED_PROP);
779:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
780:       assertEquals(4095, Node.COLUMN_MASK);
781:       assertEquals(48, Node.DIRECTIVES);
782:       assertEquals(56, Node.CHANGE_TIME);
783:       assertEquals(47, Node.IS_DISPATCHER);
784:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
785:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
786:       assertEquals(8, Node.FLAG_NO_THROWS);
787:       assertEquals(2, Node.POST_FLAG);
788:       assertEquals(55, Node.INFERRED_FUNCTION);
789:       assertEquals(52, Node.LENGTH);
790:       assertEquals(29, Node.JSDOC_INFO_PROP);
791:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
792:       assertEquals(53, Node.INPUT_ID);
793:       assertEquals(39, Node.EMPTY_BLOCK);
794:       assertFalse(node1.isDebugger());
795:       assertFalse(node1.isDefaultCase());
796:       assertFalse(node1.isVoid());
797:       assertFalse(node1.isFunction());
798:       assertFalse(node1.isRegExp());
799:       assertFalse(node1.isTrue());
800:       assertFalse(node1.isCatch());
801:       assertFalse(node1.isArrayLit());
802:       assertEquals(0, node1.getChildCount());
803:       assertEquals(0, node1.getLineno());
804:       assertFalse(node1.isParamList());
805:       assertFalse(node1.isGetterDef());
806:       assertFalse(node1.isFor());
807:       assertFalse(node1.isStringKey());
808:       assertFalse(node1.isTry());
809:       assertFalse(node1.isString());
810:       assertFalse(node1.isCase());
811:       assertFalse(node1.isBlock());
812:       assertFalse(node1.isHook());
813:       assertFalse(node1.hasMoreThanOneChild());
814:       assertFalse(node1.isContinue());
815:       assertFalse(node1.isFalse());
816:       assertFalse(node1.isNE());
817:       assertFalse(node1.isIf());
818:       assertFalse(node1.isThrow());
819:       assertFalse(node1.isIn());
820:       assertEquals(15, node1.getType());
821:       assertFalse(node1.isInc());
822:       assertFalse(node1.isSetterDef());
823:       assertFalse(node1.isScript());
824:       assertFalse(node1.isNot());
825:       assertEquals(48, node1.getSourcePosition());
826:       assertFalse(node1.isCast());
827:       assertFalse(node1.isInstanceOf());
828:       assertFalse(node1.isAnd());
829:       assertFalse(node1.isWith());
830:       assertFalse(node1.isLabelName());
831:       assertFalse(node1.isExprResult());
832:       assertFalse(node1.isGetElem());
833:       assertFalse(node1.isComma());
834:       assertFalse(node1.isDec());
835:       assertFalse(node1.isTypeOf());
836:       assertFalse(node1.isNumber());
837:       assertFalse(node1.isAssign());
838:       assertFalse(node1.hasChildren());
839:       assertFalse(node1.isThis());
840:       assertFalse(node1.isReturn());
841:       assertFalse(node1.hasOneChild());
842:       assertFalse(node1.isObjectLit());
843:       assertFalse(node1.isGetProp());
844:       assertFalse(node1.isSwitch());
845:       assertFalse(node1.isWhile());
846:       assertFalse(node1.isName());
847:       assertFalse(node1.isBreak());
848:       assertFalse(node1.isCall());
849:       assertFalse(node1.isDelProp());
850:       assertFalse(node1.isOr());
851:       assertFalse(node1.isLabel());
852:       assertFalse(node1.isAssignAdd());
853:       assertFalse(node1.isNull());
854:       assertEquals(48, node1.getCharno());
855:       assertFalse(node1.isVar());
856:       assertFalse(node1.isEmpty());
857:       assertFalse(node1.isAdd());
858:       assertFalse(node1.isDo());
859:       assertFalse(node1.isNew());
860:       assertFalse(node1.equals((Object)node0));
861:       assertFalse(node1.equals((Object)node2));
862:       
863:       Node node3 = Node.newString(57, "com.google.javascript.rhino.Node$AncestorIterable$1", 50, 52);
864:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
865:       assertEquals(55, Node.INFERRED_FUNCTION);
866:       assertEquals(4095, Node.COLUMN_MASK);
867:       assertEquals(48, Node.DIRECTIVES);
868:       assertEquals(53, Node.INPUT_ID);
869:       assertEquals(8, Node.FLAG_NO_THROWS);
870:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
871:       assertEquals(43, Node.IS_CONSTANT_NAME);
872:       assertEquals(36, Node.QUOTED_PROP);
873:       assertEquals(40, Node.ORIGINALNAME_PROP);
874:       assertEquals(29, Node.JSDOC_INFO_PROP);
875:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
876:       assertEquals(39, Node.EMPTY_BLOCK);
877:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
878:       assertEquals(47, Node.IS_DISPATCHER);
879:       assertEquals(2, Node.POST_FLAG);
880:       assertEquals(30, Node.VAR_ARGS_NAME);
881:       assertEquals(1, Node.DECR_FLAG);
882:       assertEquals(49, Node.DIRECT_EVAL);
883:       assertEquals(15, Node.NO_SIDE_EFFECTS);
884:       assertEquals(57, Node.LAST_PROP);
885:       assertEquals(32, Node.INCRDECR_PROP);
886:       assertEquals(54, Node.SLASH_V);
887:       assertEquals(52, Node.LENGTH);
888:       assertEquals(56, Node.CHANGE_TIME);
889:       assertEquals(51, Node.STATIC_SOURCE_FILE);
890:       assertEquals(57, Node.REFLECTED_OBJECT);
891:       assertEquals(46, Node.IS_NAMESPACE);
892:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
893:       assertEquals(50, Node.FREE_CALL);
894:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
895:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
896:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
897:       assertEquals(37, Node.OPT_ARG_NAME);
898:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
899:       assertEquals(12, Node.COLUMN_BITS);
900:       assertFalse(node3.isDo());
901:       assertFalse(node3.isWhile());
902:       assertFalse(node3.hasMoreThanOneChild());
903:       assertFalse(node3.isContinue());
904:       assertFalse(node3.isAdd());
905:       assertFalse(node3.isOr());
906:       assertFalse(node3.isStringKey());
907:       assertFalse(node3.isLabelName());
908:       assertFalse(node3.isCast());
909:       assertFalse(node3.isSetterDef());
910:       assertFalse(node3.isLabel());
911:       assertFalse(node3.isAssignAdd());
912:       assertFalse(node3.isNew());
913:       assertEquals(0, node3.getChildCount());
914:       assertFalse(node3.isVar());
915:       assertFalse(node3.isWith());
916:       assertFalse(node3.isRegExp());
917:       assertFalse(node3.isCatch());
918:       assertFalse(node3.isInstanceOf());
919:       assertFalse(node3.isScript());
920:       assertFalse(node3.isParamList());
921:       assertFalse(node3.isIf());
922:       assertFalse(node3.isNumber());
923:       assertFalse(node3.isGetterDef());
924:       assertFalse(node3.hasOneChild());
925:       assertFalse(node3.isTry());
926:       assertEquals(204852, node3.getSourcePosition());
927:       assertFalse(node3.isHook());
928:       assertFalse(node3.isThis());
929:       assertFalse(node3.isBlock());
930:       assertFalse(node3.isFor());
931:       assertFalse(node3.isString());
932:       assertFalse(node3.isCase());
933:       assertFalse(node3.isInc());
934:       assertFalse(node3.isIn());
935:       assertFalse(node3.isNE());
936:       assertFalse(node3.isSwitch());
937:       assertFalse(node3.isEmpty());
938:       assertEquals(52, node3.getCharno());
939:       assertFalse(node3.isFalse());
940:       assertFalse(node3.isArrayLit());
941:       assertFalse(node3.isFunction());
942:       assertFalse(node3.isThrow());
943:       assertFalse(node3.isNot());
944:       assertFalse(node3.isDefaultCase());
945:       assertFalse(node3.isObjectLit());
946:       assertEquals(50, node3.getLineno());
947:       assertFalse(node3.isExprResult());
948:       assertFalse(node3.isVoid());
949:       assertFalse(node3.isAnd());
950:       assertFalse(node3.isDebugger());
951:       assertEquals(57, node3.getType());
952:       assertFalse(node3.isNull());
953:       assertFalse(node3.isTrue());
954:       assertFalse(node3.isAssign());
955:       assertFalse(node3.isDec());
956:       assertFalse(node3.isTypeOf());
957:       assertFalse(node3.isName());
958:       assertFalse(node3.isDelProp());
959:       assertFalse(node3.isBreak());
960:       assertFalse(node3.isGetProp());
961:       assertFalse(node3.isGetElem());
962:       assertFalse(node3.isCall());
963:       assertFalse(node3.isComma());
964:       assertFalse(node3.hasChildren());
965:       assertFalse(node3.isReturn());
966:       assertNotNull(node3);
967:       assertFalse(node3.equals((Object)node2));
968:       assertFalse(node3.equals((Object)node1));
969:       assertFalse(node3.equals((Object)node0));
970:       
971:       Node node4 = node3.removeFirstChild();
972:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
973:       assertEquals(55, Node.INFERRED_FUNCTION);
974:       assertEquals(4095, Node.COLUMN_MASK);
975:       assertEquals(48, Node.DIRECTIVES);
976:       assertEquals(53, Node.INPUT_ID);
977:       assertEquals(8, Node.FLAG_NO_THROWS);
978:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
979:       assertEquals(43, Node.IS_CONSTANT_NAME);
980:       assertEquals(36, Node.QUOTED_PROP);
981:       assertEquals(40, Node.ORIGINALNAME_PROP);
982:       assertEquals(29, Node.JSDOC_INFO_PROP);
983:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
984:       assertEquals(39, Node.EMPTY_BLOCK);
985:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
986:       assertEquals(47, Node.IS_DISPATCHER);
987:       assertEquals(2, Node.POST_FLAG);
988:       assertEquals(30, Node.VAR_ARGS_NAME);
989:       assertEquals(1, Node.DECR_FLAG);
990:       assertEquals(49, Node.DIRECT_EVAL);
991:       assertEquals(15, Node.NO_SIDE_EFFECTS);
992:       assertEquals(57, Node.LAST_PROP);
993:       assertEquals(32, Node.INCRDECR_PROP);
994:       assertEquals(54, Node.SLASH_V);
995:       assertEquals(52, Node.LENGTH);
996:       assertEquals(56, Node.CHANGE_TIME);
997:       assertEquals(51, Node.STATIC_SOURCE_FILE);
998:       assertEquals(57, Node.REFLECTED_OBJECT);
999:       assertEquals(46, Node.IS_NAMESPACE);
1000:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1001:       assertEquals(50, Node.FREE_CALL);
1002:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1003:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1004:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1005:       assertEquals(37, Node.OPT_ARG_NAME);
1006:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1007:       assertEquals(12, Node.COLUMN_BITS);
1008:       assertFalse(node3.isDo());
1009:       assertFalse(node3.isWhile());
1010:       assertFalse(node3.hasMoreThanOneChild());
1011:       assertFalse(node3.isContinue());
1012:       assertFalse(node3.isAdd());
1013:       assertFalse(node3.isOr());
1014:       assertFalse(node3.isStringKey());
1015:       assertFalse(node3.isLabelName());
1016:       assertFalse(node3.isCast());
1017:       assertFalse(node3.isSetterDef());
1018:       assertFalse(node3.isLabel());
1019:       assertFalse(node3.isAssignAdd());
1020:       assertFalse(node3.isNew());
1021:       assertEquals(0, node3.getChildCount());
1022:       assertFalse(node3.isVar());
1023:       assertFalse(node3.isWith());
1024:       assertFalse(node3.isRegExp());
1025:       assertFalse(node3.isCatch());
1026:       assertFalse(node3.isInstanceOf());
1027:       assertFalse(node3.isScript());
1028:       assertFalse(node3.isParamList());
1029:       assertFalse(node3.isIf());
1030:       assertFalse(node3.isNumber());
1031:       assertFalse(node3.isGetterDef());
1032:       assertFalse(node3.hasOneChild());
1033:       assertFalse(node3.isTry());
1034:       assertEquals(204852, node3.getSourcePosition());
1035:       assertFalse(node3.isHook());
1036:       assertFalse(node3.isThis());
1037:       assertFalse(node3.isBlock());
1038:       assertFalse(node3.isFor());
1039:       assertFalse(node3.isString());
1040:       assertFalse(node3.isCase());
1041:       assertFalse(node3.isInc());
1042:       assertFalse(node3.isIn());
1043:       assertFalse(node3.isNE());
1044:       assertFalse(node3.isSwitch());
1045:       assertFalse(node3.isEmpty());
1046:       assertEquals(52, node3.getCharno());
1047:       assertFalse(node3.isFalse());
1048:       assertFalse(node3.isArrayLit());
1049:       assertFalse(node3.isFunction());
1050:       assertFalse(node3.isThrow());
1051:       assertFalse(node3.isNot());
1052:       assertFalse(node3.isDefaultCase());
1053:       assertFalse(node3.isObjectLit());
1054:       assertEquals(50, node3.getLineno());
1055:       assertFalse(node3.isExprResult());
1056:       assertFalse(node3.isVoid());
1057:       assertFalse(node3.isAnd());
1058:       assertFalse(node3.isDebugger());
1059:       assertEquals(57, node3.getType());
1060:       assertFalse(node3.isNull());
1061:       assertFalse(node3.isTrue());
1062:       assertFalse(node3.isAssign());
1063:       assertFalse(node3.isDec());
1064:       assertFalse(node3.isTypeOf());
1065:       assertFalse(node3.isName());
1066:       assertFalse(node3.isDelProp());
1067:       assertFalse(node3.isBreak());
1068:       assertFalse(node3.isGetProp());
1069:       assertFalse(node3.isGetElem());
1070:       assertFalse(node3.isCall());
1071:       assertFalse(node3.isComma());
1072:       assertFalse(node3.hasChildren());
1073:       assertFalse(node3.isReturn());
1074:       assertNull(node4);
1075:       assertFalse(node3.equals((Object)node2));
1076:       assertFalse(node3.equals((Object)node1));
1077:       assertFalse(node3.equals((Object)node0));
1078:       
1079:       Node node5 = Node.newNumber((double) 1);
1080:       assertEquals(32, Node.INCRDECR_PROP);
1081:       assertEquals(37, Node.OPT_ARG_NAME);
1082:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1083:       assertEquals(12, Node.COLUMN_BITS);
1084:       assertEquals(46, Node.IS_NAMESPACE);
1085:       assertEquals(56, Node.CHANGE_TIME);
1086:       assertEquals(29, Node.JSDOC_INFO_PROP);
1087:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1088:       assertEquals(1, Node.DECR_FLAG);
1089:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1090:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1091:       assertEquals(53, Node.INPUT_ID);
1092:       assertEquals(57, Node.LAST_PROP);
1093:       assertEquals(54, Node.SLASH_V);
1094:       assertEquals(43, Node.IS_CONSTANT_NAME);
1095:       assertEquals(30, Node.VAR_ARGS_NAME);
1096:       assertEquals(47, Node.IS_DISPATCHER);
1097:       assertEquals(2, Node.POST_FLAG);
1098:       assertEquals(40, Node.ORIGINALNAME_PROP);
1099:       assertEquals(48, Node.DIRECTIVES);
1100:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1101:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1102:       assertEquals(50, Node.FREE_CALL);
1103:       assertEquals(36, Node.QUOTED_PROP);
1104:       assertEquals(55, Node.INFERRED_FUNCTION);
1105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1106:       assertEquals(8, Node.FLAG_NO_THROWS);
1107:       assertEquals(39, Node.EMPTY_BLOCK);
1108:       assertEquals(52, Node.LENGTH);
1109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1110:       assertEquals(57, Node.REFLECTED_OBJECT);
1111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1112:       assertEquals(49, Node.DIRECT_EVAL);
1113:       assertEquals(4095, Node.COLUMN_MASK);
1114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1115:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1116:       assertEquals(0, node5.getChildCount());
1117:       assertFalse(node5.isParamList());
1118:       assertFalse(node5.isNull());
1119:       assertFalse(node5.isSetterDef());
1120:       assertFalse(node5.isDebugger());
1121:       assertFalse(node5.isAdd());
1122:       assertFalse(node5.isVar());
1123:       assertFalse(node5.isArrayLit());
1124:       assertFalse(node5.isNew());
1125:       assertFalse(node5.isStringKey());
1126:       assertFalse(node5.isDefaultCase());
1127:       assertFalse(node5.isContinue());
1128:       assertFalse(node5.isFunction());
1129:       assertTrue(node5.isNumber());
1130:       assertFalse(node5.isLabel());
1131:       assertFalse(node5.isReturn());
1132:       assertFalse(node5.isDo());
1133:       assertFalse(node5.isAssignAdd());
1134:       assertFalse(node5.isString());
1135:       assertEquals((-1), node5.getSourcePosition());
1136:       assertFalse(node5.isEmpty());
1137:       assertFalse(node5.isOr());
1138:       assertFalse(node5.isVoid());
1139:       assertFalse(node5.isTrue());
1140:       assertFalse(node5.isName());
1141:       assertFalse(node5.isBreak());
1142:       assertFalse(node5.hasChildren());
1143:       assertFalse(node5.isDelProp());
1144:       assertFalse(node5.isWhile());
1145:       assertFalse(node5.isDec());
1146:       assertFalse(node5.isGetElem());
1147:       assertFalse(node5.isExprResult());
1148:       assertFalse(node5.isCall());
1149:       assertFalse(node5.isComma());
1150:       assertFalse(node5.isAssign());
1151:       assertFalse(node5.isTypeOf());
1152:       assertFalse(node5.isInstanceOf());
1153:       assertFalse(node5.isGetProp());
1154:       assertFalse(node5.isAnd());
1155:       assertFalse(node5.isScript());
1156:       assertFalse(node5.isObjectLit());
1157:       assertFalse(node5.isNot());
1158:       assertFalse(node5.isThrow());
1159:       assertFalse(node5.isLabelName());
1160:       assertFalse(node5.isSwitch());
1161:       assertFalse(node5.isCast());
1162:       assertFalse(node5.isFalse());
1163:       assertFalse(node5.isIn());
1164:       assertEquals((-1), node5.getLineno());
1165:       assertFalse(node5.isIf());
1166:       assertFalse(node5.isGetterDef());
1167:       assertFalse(node5.isNE());
1168:       assertFalse(node5.isCase());
1169:       assertFalse(node5.isInc());
1170:       assertEquals((-1), node5.getCharno());
1171:       assertFalse(node5.hasOneChild());
1172:       assertFalse(node5.isBlock());
1173:       assertFalse(node5.isHook());
1174:       assertFalse(node5.isTry());
1175:       assertEquals(39, node5.getType());
1176:       assertFalse(node5.isFor());
1177:       assertFalse(node5.isThis());
1178:       assertFalse(node5.isCatch());
1179:       assertFalse(node5.isRegExp());
1180:       assertFalse(node5.isWith());
1181:       assertFalse(node5.hasMoreThanOneChild());
1182:       assertNotSame(node5, node2);
1183:       assertNotSame(node5, node0);
1184:       assertNotNull(node5);
1185:       assertFalse(node5.equals((Object)node1));
1186:       assertFalse(node5.equals((Object)node2));
1187:       assertFalse(node5.equals((Object)node3));
1188:       assertFalse(node5.equals((Object)node0));
1189:       
1190:       boolean boolean1 = node2.isGetProp();
1191:       assertEquals(57, Node.LAST_PROP);
1192:       assertEquals(30, Node.VAR_ARGS_NAME);
1193:       assertEquals(54, Node.SLASH_V);
1194:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1195:       assertEquals(57, Node.REFLECTED_OBJECT);
1196:       assertEquals(49, Node.DIRECT_EVAL);
1197:       assertEquals(40, Node.ORIGINALNAME_PROP);
1198:       assertEquals(37, Node.OPT_ARG_NAME);
1199:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1200:       assertEquals(50, Node.FREE_CALL);
1201:       assertEquals(46, Node.IS_NAMESPACE);
1202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1203:       assertEquals(12, Node.COLUMN_BITS);
1204:       assertEquals(32, Node.INCRDECR_PROP);
1205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1206:       assertEquals(1, Node.DECR_FLAG);
1207:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1208:       assertEquals(43, Node.IS_CONSTANT_NAME);
1209:       assertEquals(36, Node.QUOTED_PROP);
1210:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1211:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1212:       assertEquals(4095, Node.COLUMN_MASK);
1213:       assertEquals(48, Node.DIRECTIVES);
1214:       assertEquals(2, Node.POST_FLAG);
1215:       assertEquals(56, Node.CHANGE_TIME);
1216:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1217:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1218:       assertEquals(8, Node.FLAG_NO_THROWS);
1219:       assertEquals(47, Node.IS_DISPATCHER);
1220:       assertEquals(55, Node.INFERRED_FUNCTION);
1221:       assertEquals(52, Node.LENGTH);
1222:       assertEquals(53, Node.INPUT_ID);
1223:       assertEquals(29, Node.JSDOC_INFO_PROP);
1224:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1225:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1226:       assertEquals(39, Node.EMPTY_BLOCK);
1227:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1228:       assertEquals(57, Node.LAST_PROP);
1229:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1230:       assertEquals(54, Node.SLASH_V);
1231:       assertEquals(30, Node.VAR_ARGS_NAME);
1232:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1233:       assertEquals(57, Node.REFLECTED_OBJECT);
1234:       assertEquals(46, Node.IS_NAMESPACE);
1235:       assertEquals(40, Node.ORIGINALNAME_PROP);
1236:       assertEquals(49, Node.DIRECT_EVAL);
1237:       assertEquals(37, Node.OPT_ARG_NAME);
1238:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1239:       assertEquals(50, Node.FREE_CALL);
1240:       assertEquals(12, Node.COLUMN_BITS);
1241:       assertEquals(32, Node.INCRDECR_PROP);
1242:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1243:       assertEquals(1, Node.DECR_FLAG);
1244:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1245:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1246:       assertEquals(43, Node.IS_CONSTANT_NAME);
1247:       assertEquals(36, Node.QUOTED_PROP);
1248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1249:       assertEquals(4095, Node.COLUMN_MASK);
1250:       assertEquals(48, Node.DIRECTIVES);
1251:       assertEquals(56, Node.CHANGE_TIME);
1252:       assertEquals(47, Node.IS_DISPATCHER);
1253:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1254:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1255:       assertEquals(8, Node.FLAG_NO_THROWS);
1256:       assertEquals(2, Node.POST_FLAG);
1257:       assertEquals(55, Node.INFERRED_FUNCTION);
1258:       assertEquals(52, Node.LENGTH);
1259:       assertEquals(29, Node.JSDOC_INFO_PROP);
1260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1261:       assertEquals(53, Node.INPUT_ID);
1262:       assertEquals(39, Node.EMPTY_BLOCK);
1263:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1264:       assertEquals(55, Node.INFERRED_FUNCTION);
1265:       assertEquals(4095, Node.COLUMN_MASK);
1266:       assertEquals(36, Node.QUOTED_PROP);
1267:       assertEquals(8, Node.FLAG_NO_THROWS);
1268:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1269:       assertEquals(53, Node.INPUT_ID);
1270:       assertEquals(39, Node.EMPTY_BLOCK);
1271:       assertEquals(40, Node.ORIGINALNAME_PROP);
1272:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1273:       assertEquals(50, Node.FREE_CALL);
1274:       assertEquals(47, Node.IS_DISPATCHER);
1275:       assertEquals(2, Node.POST_FLAG);
1276:       assertEquals(54, Node.SLASH_V);
1277:       assertEquals(43, Node.IS_CONSTANT_NAME);
1278:       assertEquals(1, Node.DECR_FLAG);
1279:       assertEquals(30, Node.VAR_ARGS_NAME);
1280:       assertEquals(46, Node.IS_NAMESPACE);
1281:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1282:       assertEquals(12, Node.COLUMN_BITS);
1283:       assertEquals(52, Node.LENGTH);
1284:       assertEquals(57, Node.LAST_PROP);
1285:       assertEquals(32, Node.INCRDECR_PROP);
1286:       assertEquals(29, Node.JSDOC_INFO_PROP);
1287:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1288:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1289:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1290:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1291:       assertEquals(57, Node.REFLECTED_OBJECT);
1292:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1293:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1294:       assertEquals(37, Node.OPT_ARG_NAME);
1295:       assertEquals(48, Node.DIRECTIVES);
1296:       assertEquals(56, Node.CHANGE_TIME);
1297:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1298:       assertEquals(49, Node.DIRECT_EVAL);
1299:       assertFalse(node0.isExprResult());
1300:       assertFalse(node0.isAnd());
1301:       assertFalse(node0.isAssign());
1302:       assertFalse(node0.isLabelName());
1303:       assertFalse(node0.isWith());
1304:       assertFalse(node0.isInstanceOf());
1305:       assertFalse(node0.isGetElem());
1306:       assertFalse(node0.isCast());
1307:       assertFalse(node0.isComma());
1308:       assertFalse(node0.isThis());
1309:       assertFalse(node0.isGetProp());
1310:       assertEquals((-1), node0.getSourcePosition());
1311:       assertFalse(node0.isDec());
1312:       assertFalse(node0.isTypeOf());
1313:       assertFalse(node0.isReturn());
1314:       assertFalse(node0.hasChildren());
1315:       assertFalse(node0.hasOneChild());
1316:       assertFalse(node0.isNot());
1317:       assertFalse(node0.isObjectLit());
1318:       assertFalse(node0.isScript());
1319:       assertFalse(node0.isInc());
1320:       assertEquals(39, node0.getType());
1321:       assertFalse(node0.isBlock());
1322:       assertFalse(node0.isHook());
1323:       assertFalse(node0.hasMoreThanOneChild());
1324:       assertFalse(node0.isContinue());
1325:       assertFalse(node0.isFalse());
1326:       assertEquals((-1), node0.getLineno());
1327:       assertFalse(node0.isSetterDef());
1328:       assertFalse(node0.isIf());
1329:       assertFalse(node0.isThrow());
1330:       assertFalse(node0.isNE());
1331:       assertFalse(node0.isIn());
1332:       assertFalse(node0.isFunction());
1333:       assertFalse(node0.isTrue());
1334:       assertFalse(node0.isDebugger());
1335:       assertFalse(node0.isTry());
1336:       assertFalse(node0.isVoid());
1337:       assertFalse(node0.isRegExp());
1338:       assertFalse(node0.isDefaultCase());
1339:       assertFalse(node0.isCatch());
1340:       assertFalse(node0.isArrayLit());
1341:       assertEquals(0, node0.getChildCount());
1342:       assertFalse(node0.isParamList());
1343:       assertFalse(node0.isGetterDef());
1344:       assertFalse(node0.isStringKey());
1345:       assertFalse(node0.isFor());
1346:       assertFalse(node0.isCase());
1347:       assertFalse(node0.isString());
1348:       assertTrue(node0.isNumber());
1349:       assertEquals((-1), node0.getCharno());
1350:       assertFalse(node0.isSwitch());
1351:       assertFalse(node0.isNew());
1352:       assertFalse(node0.isWhile());
1353:       assertFalse(node0.isVar());
1354:       assertFalse(node0.isCall());
1355:       assertFalse(node0.isName());
1356:       assertFalse(node0.isBreak());
1357:       assertFalse(node0.isOr());
1358:       assertFalse(node0.isDelProp());
1359:       assertFalse(node0.isLabel());
1360:       assertFalse(node0.isAssignAdd());
1361:       assertFalse(node0.isNull());
1362:       assertFalse(node0.isDo());
1363:       assertFalse(node0.isEmpty());
1364:       assertFalse(node0.isAdd());
1365:       assertFalse(node1.isDebugger());
1366:       assertFalse(node1.isDefaultCase());
1367:       assertFalse(node1.isVoid());
1368:       assertFalse(node1.isFunction());
1369:       assertFalse(node1.isRegExp());
1370:       assertFalse(node1.isTrue());
1371:       assertFalse(node1.isCatch());
1372:       assertFalse(node1.isArrayLit());
1373:       assertEquals(0, node1.getChildCount());
1374:       assertEquals(0, node1.getLineno());
1375:       assertFalse(node1.isParamList());
1376:       assertFalse(node1.isGetterDef());
1377:       assertFalse(node1.isFor());
1378:       assertFalse(node1.isStringKey());
1379:       assertFalse(node1.isTry());
1380:       assertFalse(node1.isString());
1381:       assertFalse(node1.isCase());
1382:       assertFalse(node1.isBlock());
1383:       assertFalse(node1.isHook());
1384:       assertFalse(node1.hasMoreThanOneChild());
1385:       assertFalse(node1.isContinue());
1386:       assertFalse(node1.isFalse());
1387:       assertFalse(node1.isNE());
1388:       assertFalse(node1.isIf());
1389:       assertFalse(node1.isThrow());
1390:       assertFalse(node1.isIn());
1391:       assertEquals(15, node1.getType());
1392:       assertFalse(node1.isInc());
1393:       assertFalse(node1.isSetterDef());
1394:       assertFalse(node1.isScript());
1395:       assertFalse(node1.isNot());
1396:       assertEquals(48, node1.getSourcePosition());
1397:       assertFalse(node1.isCast());
1398:       assertFalse(node1.isInstanceOf());
1399:       assertFalse(node1.isAnd());
1400:       assertFalse(node1.isWith());
1401:       assertFalse(node1.isLabelName());
1402:       assertFalse(node1.isExprResult());
1403:       assertFalse(node1.isGetElem());
1404:       assertFalse(node1.isComma());
1405:       assertFalse(node1.isDec());
1406:       assertFalse(node1.isTypeOf());
1407:       assertFalse(node1.isNumber());
1408:       assertFalse(node1.isAssign());
1409:       assertFalse(node1.hasChildren());
1410:       assertFalse(node1.isThis());
1411:       assertFalse(node1.isReturn());
1412:       assertFalse(node1.hasOneChild());
1413:       assertFalse(node1.isObjectLit());
1414:       assertFalse(node1.isGetProp());
1415:       assertFalse(node1.isSwitch());
1416:       assertFalse(node1.isWhile());
1417:       assertFalse(node1.isName());
1418:       assertFalse(node1.isBreak());
1419:       assertFalse(node1.isCall());
1420:       assertFalse(node1.isDelProp());
1421:       assertFalse(node1.isOr());
1422:       assertFalse(node1.isLabel());
1423:       assertFalse(node1.isAssignAdd());
1424:       assertFalse(node1.isNull());
1425:       assertEquals(48, node1.getCharno());
1426:       assertFalse(node1.isVar());
1427:       assertFalse(node1.isEmpty());
1428:       assertFalse(node1.isAdd());
1429:       assertFalse(node1.isDo());
1430:       assertFalse(node1.isNew());
1431:       assertFalse(node2.isCase());
1432:       assertEquals((-1), node2.getCharno());
1433:       assertTrue(node2.isNumber());
1434:       assertFalse(node2.isIn());
1435:       assertFalse(node2.isString());
1436:       assertFalse(node2.isInc());
1437:       assertFalse(node2.isEmpty());
1438:       assertFalse(node2.isFalse());
1439:       assertFalse(node2.isGetterDef());
1440:       assertFalse(node2.isThrow());
1441:       assertFalse(node2.isFunction());
1442:       assertFalse(node2.isSwitch());
1443:       assertFalse(node2.isArrayLit());
1444:       assertFalse(node2.isAnd());
1445:       assertFalse(node2.isNot());
1446:       assertFalse(node2.isObjectLit());
1447:       assertFalse(node2.isDefaultCase());
1448:       assertFalse(node2.isTrue());
1449:       assertFalse(node2.isGetProp());
1450:       assertFalse(node2.isDebugger());
1451:       assertFalse(node2.isGetElem());
1452:       assertFalse(node2.isName());
1453:       assertFalse(node2.isAssign());
1454:       assertFalse(node2.isDelProp());
1455:       assertFalse(node2.isDec());
1456:       assertFalse(node2.hasChildren());
1457:       assertFalse(node2.isNull());
1458:       assertFalse(node2.isComma());
1459:       assertFalse(node2.isTypeOf());
1460:       assertFalse(node2.isVoid());
1461:       assertFalse(node2.isBreak());
1462:       assertFalse(node2.isCall());
1463:       assertFalse(node2.isExprResult());
1464:       assertFalse(node2.isContinue());
1465:       assertEquals(39, node2.getType());
1466:       assertFalse(node2.hasMoreThanOneChild());
1467:       assertFalse(node2.isDo());
1468:       assertFalse(node2.isWhile());
1469:       assertFalse(node2.isReturn());
1470:       assertFalse(node2.isNew());
1471:       assertFalse(node2.isAssignAdd());
1472:       assertFalse(node2.isOr());
1473:       assertFalse(node2.isAdd());
1474:       assertFalse(node2.isStringKey());
1475:       assertFalse(node2.isLabelName());
1476:       assertEquals((-1), node2.getSourcePosition());
1477:       assertFalse(node2.isParamList());
1478:       assertFalse(node2.isVar());
1479:       assertFalse(node2.isLabel());
1480:       assertEquals(0, node2.getChildCount());
1481:       assertFalse(node2.isCast());
1482:       assertFalse(node2.isWith());
1483:       assertFalse(node2.isTry());
1484:       assertFalse(node2.hasOneChild());
1485:       assertFalse(node2.isSetterDef());
1486:       assertFalse(node2.isScript());
1487:       assertFalse(node2.isHook());
1488:       assertFalse(node2.isIf());
1489:       assertFalse(node2.isThis());
1490:       assertFalse(node2.isNE());
1491:       assertFalse(node2.isFor());
1492:       assertFalse(node2.isBlock());
1493:       assertEquals((-1), node2.getLineno());
1494:       assertFalse(node2.isRegExp());
1495:       assertFalse(node2.isInstanceOf());
1496:       assertFalse(node2.isCatch());
1497:       assertSame(node0, node2);
1498:       assertNotSame(node0, node5);
1499:       assertNotSame(node2, node5);
1500:       assertSame(node2, node0);
1501:       assertFalse(node0.equals((Object)node3));
1502:       assertFalse(node0.equals((Object)node1));
1503:       assertFalse(node0.equals((Object)node5));
1504:       assertFalse(node1.equals((Object)node0));
1505:       assertFalse(node1.equals((Object)node2));
1506:       assertFalse(node1.equals((Object)node3));
1507:       assertFalse(node1.equals((Object)node5));
1508:       assertFalse(node2.equals((Object)node1));
1509:       assertFalse(node2.equals((Object)node5));
1510:       assertFalse(node2.equals((Object)node3));
1511:       assertTrue(boolean1 == boolean0);
1512:       assertFalse(boolean1);
1513:       
1514:       Object object0 = node2.getProp(46);
1515:       assertEquals(57, Node.LAST_PROP);
1516:       assertEquals(30, Node.VAR_ARGS_NAME);
1517:       assertEquals(54, Node.SLASH_V);
1518:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1519:       assertEquals(57, Node.REFLECTED_OBJECT);
1520:       assertEquals(49, Node.DIRECT_EVAL);
1521:       assertEquals(40, Node.ORIGINALNAME_PROP);
1522:       assertEquals(37, Node.OPT_ARG_NAME);
1523:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1524:       assertEquals(50, Node.FREE_CALL);
1525:       assertEquals(46, Node.IS_NAMESPACE);
1526:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1527:       assertEquals(12, Node.COLUMN_BITS);
1528:       assertEquals(32, Node.INCRDECR_PROP);
1529:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1530:       assertEquals(1, Node.DECR_FLAG);
1531:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1532:       assertEquals(43, Node.IS_CONSTANT_NAME);
1533:       assertEquals(36, Node.QUOTED_PROP);
1534:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1535:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1536:       assertEquals(4095, Node.COLUMN_MASK);
1537:       assertEquals(48, Node.DIRECTIVES);
1538:       assertEquals(2, Node.POST_FLAG);
1539:       assertEquals(56, Node.CHANGE_TIME);
1540:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1541:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1542:       assertEquals(8, Node.FLAG_NO_THROWS);
1543:       assertEquals(47, Node.IS_DISPATCHER);
1544:       assertEquals(55, Node.INFERRED_FUNCTION);
1545:       assertEquals(52, Node.LENGTH);
1546:       assertEquals(53, Node.INPUT_ID);
1547:       assertEquals(29, Node.JSDOC_INFO_PROP);
1548:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1549:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1550:       assertEquals(39, Node.EMPTY_BLOCK);
1551:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1552:       assertEquals(57, Node.LAST_PROP);
1553:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1554:       assertEquals(54, Node.SLASH_V);
1555:       assertEquals(30, Node.VAR_ARGS_NAME);
1556:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1557:       assertEquals(57, Node.REFLECTED_OBJECT);
1558:       assertEquals(46, Node.IS_NAMESPACE);
1559:       assertEquals(40, Node.ORIGINALNAME_PROP);
1560:       assertEquals(49, Node.DIRECT_EVAL);
1561:       assertEquals(37, Node.OPT_ARG_NAME);
1562:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1563:       assertEquals(50, Node.FREE_CALL);
1564:       assertEquals(12, Node.COLUMN_BITS);
1565:       assertEquals(32, Node.INCRDECR_PROP);
1566:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1567:       assertEquals(1, Node.DECR_FLAG);
1568:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1569:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1570:       assertEquals(43, Node.IS_CONSTANT_NAME);
1571:       assertEquals(36, Node.QUOTED_PROP);
1572:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1573:       assertEquals(4095, Node.COLUMN_MASK);
1574:       assertEquals(48, Node.DIRECTIVES);
1575:       assertEquals(56, Node.CHANGE_TIME);
1576:       assertEquals(47, Node.IS_DISPATCHER);
1577:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1578:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1579:       assertEquals(8, Node.FLAG_NO_THROWS);
1580:       assertEquals(2, Node.POST_FLAG);
1581:       assertEquals(55, Node.INFERRED_FUNCTION);
1582:       assertEquals(52, Node.LENGTH);
1583:       assertEquals(29, Node.JSDOC_INFO_PROP);
1584:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1585:       assertEquals(53, Node.INPUT_ID);
1586:       assertEquals(39, Node.EMPTY_BLOCK);
1587:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1588:       assertEquals(55, Node.INFERRED_FUNCTION);
1589:       assertEquals(4095, Node.COLUMN_MASK);
1590:       assertEquals(36, Node.QUOTED_PROP);
1591:       assertEquals(8, Node.FLAG_NO_THROWS);
1592:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1593:       assertEquals(53, Node.INPUT_ID);
1594:       assertEquals(39, Node.EMPTY_BLOCK);
1595:       assertEquals(40, Node.ORIGINALNAME_PROP);
1596:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1597:       assertEquals(50, Node.FREE_CALL);
1598:       assertEquals(47, Node.IS_DISPATCHER);
1599:       assertEquals(2, Node.POST_FLAG);
1600:       assertEquals(54, Node.SLASH_V);
1601:       assertEquals(43, Node.IS_CONSTANT_NAME);
1602:       assertEquals(1, Node.DECR_FLAG);
1603:       assertEquals(30, Node.VAR_ARGS_NAME);
1604:       assertEquals(46, Node.IS_NAMESPACE);
1605:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1606:       assertEquals(12, Node.COLUMN_BITS);
1607:       assertEquals(52, Node.LENGTH);
1608:       assertEquals(57, Node.LAST_PROP);
1609:       assertEquals(32, Node.INCRDECR_PROP);
1610:       assertEquals(29, Node.JSDOC_INFO_PROP);
1611:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1612:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1613:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1614:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1615:       assertEquals(57, Node.REFLECTED_OBJECT);
1616:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1617:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1618:       assertEquals(37, Node.OPT_ARG_NAME);
1619:       assertEquals(48, Node.DIRECTIVES);
1620:       assertEquals(56, Node.CHANGE_TIME);
1621:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1622:       assertEquals(49, Node.DIRECT_EVAL);
1623:       assertFalse(node0.isExprResult());
1624:       assertFalse(node0.isAnd());
1625:       assertFalse(node0.isAssign());
1626:       assertFalse(node0.isLabelName());
1627:       assertFalse(node0.isWith());
1628:       assertFalse(node0.isInstanceOf());
1629:       assertFalse(node0.isGetElem());
1630:       assertFalse(node0.isCast());
1631:       assertFalse(node0.isComma());
1632:       assertFalse(node0.isThis());
1633:       assertFalse(node0.isGetProp());
1634:       assertEquals((-1), node0.getSourcePosition());
1635:       assertFalse(node0.isDec());
1636:       assertFalse(node0.isTypeOf());
1637:       assertFalse(node0.isReturn());
1638:       assertFalse(node0.hasChildren());
1639:       assertFalse(node0.hasOneChild());
1640:       assertFalse(node0.isNot());
1641:       assertFalse(node0.isObjectLit());
1642:       assertFalse(node0.isScript());
1643:       assertFalse(node0.isInc());
1644:       assertEquals(39, node0.getType());
1645:       assertFalse(node0.isBlock());
1646:       assertFalse(node0.isHook());
1647:       assertFalse(node0.hasMoreThanOneChild());
1648:       assertFalse(node0.isContinue());
1649:       assertFalse(node0.isFalse());
1650:       assertEquals((-1), node0.getLineno());
1651:       assertFalse(node0.isSetterDef());
1652:       assertFalse(node0.isIf());
1653:       assertFalse(node0.isThrow());
1654:       assertFalse(node0.isNE());
1655:       assertFalse(node0.isIn());
1656:       assertFalse(node0.isFunction());
1657:       assertFalse(node0.isTrue());
1658:       assertFalse(node0.isDebugger());
1659:       assertFalse(node0.isTry());
1660:       assertFalse(node0.isVoid());
1661:       assertFalse(node0.isRegExp());
1662:       assertFalse(node0.isDefaultCase());
1663:       assertFalse(node0.isCatch());
1664:       assertFalse(node0.isArrayLit());
1665:       assertEquals(0, node0.getChildCount());
1666:       assertFalse(node0.isParamList());
1667:       assertFalse(node0.isGetterDef());
1668:       assertFalse(node0.isStringKey());
1669:       assertFalse(node0.isFor());
1670:       assertFalse(node0.isCase());
1671:       assertFalse(node0.isString());
1672:       assertTrue(node0.isNumber());
1673:       assertEquals((-1), node0.getCharno());
1674:       assertFalse(node0.isSwitch());
1675:       assertFalse(node0.isNew());
1676:       assertFalse(node0.isWhile());
1677:       assertFalse(node0.isVar());
1678:       assertFalse(node0.isCall());
1679:       assertFalse(node0.isName());
1680:       assertFalse(node0.isBreak());
1681:       assertFalse(node0.isOr());
1682:       assertFalse(node0.isDelProp());
1683:       assertFalse(node0.isLabel());
1684:       assertFalse(node0.isAssignAdd());
1685:       assertFalse(node0.isNull());
1686:       assertFalse(node0.isDo());
1687:       assertFalse(node0.isEmpty());
1688:       assertFalse(node0.isAdd());
1689:       assertFalse(node1.isDebugger());
1690:       assertFalse(node1.isDefaultCase());
1691:       assertFalse(node1.isVoid());
1692:       assertFalse(node1.isFunction());
1693:       assertFalse(node1.isRegExp());
1694:       assertFalse(node1.isTrue());
1695:       assertFalse(node1.isCatch());
1696:       assertFalse(node1.isArrayLit());
1697:       assertEquals(0, node1.getChildCount());
1698:       assertEquals(0, node1.getLineno());
1699:       assertFalse(node1.isParamList());
1700:       assertFalse(node1.isGetterDef());
1701:       assertFalse(node1.isFor());
1702:       assertFalse(node1.isStringKey());
1703:       assertFalse(node1.isTry());
1704:       assertFalse(node1.isString());
1705:       assertFalse(node1.isCase());
1706:       assertFalse(node1.isBlock());
1707:       assertFalse(node1.isHook());
1708:       assertFalse(node1.hasMoreThanOneChild());
1709:       assertFalse(node1.isContinue());
1710:       assertFalse(node1.isFalse());
1711:       assertFalse(node1.isNE());
1712:       assertFalse(node1.isIf());
1713:       assertFalse(node1.isThrow());
1714:       assertFalse(node1.isIn());
1715:       assertEquals(15, node1.getType());
1716:       assertFalse(node1.isInc());
1717:       assertFalse(node1.isSetterDef());
1718:       assertFalse(node1.isScript());
1719:       assertFalse(node1.isNot());
1720:       assertEquals(48, node1.getSourcePosition());
1721:       assertFalse(node1.isCast());
1722:       assertFalse(node1.isInstanceOf());
1723:       assertFalse(node1.isAnd());
1724:       assertFalse(node1.isWith());
1725:       assertFalse(node1.isLabelName());
1726:       assertFalse(node1.isExprResult());
1727:       assertFalse(node1.isGetElem());
1728:       assertFalse(node1.isComma());
1729:       assertFalse(node1.isDec());
1730:       assertFalse(node1.isTypeOf());
1731:       assertFalse(node1.isNumber());
1732:       assertFalse(node1.isAssign());
1733:       assertFalse(node1.hasChildren());
1734:       assertFalse(node1.isThis());
1735:       assertFalse(node1.isReturn());
1736:       assertFalse(node1.hasOneChild());
1737:       assertFalse(node1.isObjectLit());
1738:       assertFalse(node1.isGetProp());
1739:       assertFalse(node1.isSwitch());
1740:       assertFalse(node1.isWhile());
1741:       assertFalse(node1.isName());
1742:       assertFalse(node1.isBreak());
1743:       assertFalse(node1.isCall());
1744:       assertFalse(node1.isDelProp());
1745:       assertFalse(node1.isOr());
1746:       assertFalse(node1.isLabel());
1747:       assertFalse(node1.isAssignAdd());
1748:       assertFalse(node1.isNull());
1749:       assertEquals(48, node1.getCharno());
1750:       assertFalse(node1.isVar());
1751:       assertFalse(node1.isEmpty());
1752:       assertFalse(node1.isAdd());
1753:       assertFalse(node1.isDo());
1754:       assertFalse(node1.isNew());
1755:       assertFalse(node2.isCase());
1756:       assertEquals((-1), node2.getCharno());
1757:       assertTrue(node2.isNumber());
1758:       assertFalse(node2.isIn());
1759:       assertFalse(node2.isString());
1760:       assertFalse(node2.isInc());
1761:       assertFalse(node2.isEmpty());
1762:       assertFalse(node2.isFalse());
1763:       assertFalse(node2.isGetterDef());
1764:       assertFalse(node2.isThrow());
1765:       assertFalse(node2.isFunction());
1766:       assertFalse(node2.isSwitch());
1767:       assertFalse(node2.isArrayLit());
1768:       assertFalse(node2.isAnd());
1769:       assertFalse(node2.isNot());
1770:       assertFalse(node2.isObjectLit());
1771:       assertFalse(node2.isDefaultCase());
1772:       assertFalse(node2.isTrue());
1773:       assertFalse(node2.isGetProp());
1774:       assertFalse(node2.isDebugger());
1775:       assertFalse(node2.isGetElem());
1776:       assertFalse(node2.isName());
1777:       assertFalse(node2.isAssign());
1778:       assertFalse(node2.isDelProp());
1779:       assertFalse(node2.isDec());
1780:       assertFalse(node2.hasChildren());
1781:       assertFalse(node2.isNull());
1782:       assertFalse(node2.isComma());
1783:       assertFalse(node2.isTypeOf());
1784:       assertFalse(node2.isVoid());
1785:       assertFalse(node2.isBreak());
1786:       assertFalse(node2.isCall());
1787:       assertFalse(node2.isExprResult());
1788:       assertFalse(node2.isContinue());
1789:       assertEquals(39, node2.getType());
1790:       assertFalse(node2.hasMoreThanOneChild());
1791:       assertFalse(node2.isDo());
1792:       assertFalse(node2.isWhile());
1793:       assertFalse(node2.isReturn());
1794:       assertFalse(node2.isNew());
1795:       assertFalse(node2.isAssignAdd());
1796:       assertFalse(node2.isOr());
1797:       assertFalse(node2.isAdd());
1798:       assertFalse(node2.isStringKey());
1799:       assertFalse(node2.isLabelName());
1800:       assertEquals((-1), node2.getSourcePosition());
1801:       assertFalse(node2.isParamList());
1802:       assertFalse(node2.isVar());
1803:       assertFalse(node2.isLabel());
1804:       assertEquals(0, node2.getChildCount());
1805:       assertFalse(node2.isCast());
1806:       assertFalse(node2.isWith());
1807:       assertFalse(node2.isTry());
1808:       assertFalse(node2.hasOneChild());
1809:       assertFalse(node2.isSetterDef());
1810:       assertFalse(node2.isScript());
1811:       assertFalse(node2.isHook());
1812:       assertFalse(node2.isIf());
1813:       assertFalse(node2.isThis());
1814:       assertFalse(node2.isNE());
1815:       assertFalse(node2.isFor());
1816:       assertFalse(node2.isBlock());
1817:       assertEquals((-1), node2.getLineno());
1818:       assertFalse(node2.isRegExp());
1819:       assertFalse(node2.isInstanceOf());
1820:       assertFalse(node2.isCatch());
1821:       assertSame(node0, node2);
1822:       assertNotSame(node0, node5);
1823:       assertNotSame(node2, node5);
1824:       assertSame(node2, node0);
1825:       assertNull(object0);
1826:       assertFalse(node0.equals((Object)node3));
1827:       assertFalse(node0.equals((Object)node1));
1828:       assertFalse(node0.equals((Object)node5));
1829:       assertFalse(node1.equals((Object)node0));
1830:       assertFalse(node1.equals((Object)node2));
1831:       assertFalse(node1.equals((Object)node3));
1832:       assertFalse(node1.equals((Object)node5));
1833:       assertFalse(node2.equals((Object)node1));
1834:       assertFalse(node2.equals((Object)node5));
1835:       assertFalse(node2.equals((Object)node3));
1836:       
1837:       // Undeclared exception!
1838:       try { 
1839:         node5.getChildBefore(node1);
1840:         fail("Expecting exception: NullPointerException");
1841:       
1842:       } catch(NullPointerException e) {
1843:          //
1844:          // no message in exception (getMessage() returned null)
1845:          //
1846:          verifyException("com.google.javascript.rhino.Node", e);
1847:       }
1848:   }
1849: }
RegularFileObject[/tmp/EvoSuite_143_1628157528337/com/google/javascript/rhino/Node_143_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:48 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_143_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_143_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_143_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:48.698 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isInc());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isInc());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertNotNull(iterable0);

boolean boolean0 = node0.isDec();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isInc());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(boolean0);

Node node1 = new Node(15, 0, 48);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertEquals(15, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertEquals(48, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = node0.clonePropsFrom(node1);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isInc());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertEquals(15, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertEquals(48, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertTrue(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isGetProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isContinue());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCast());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertSame(node0, node2);
assertSame(node2, node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

node1.removeProp(2128);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertEquals(15, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertEquals(48, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

Node node3 = Node.newString(57, "com.google.javascript.rhino.Node$AncestorIterable$1", 50, 52);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isCast());
assertFalse(node3.isSetterDef());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isVar());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isParamList());
assertFalse(node3.isIf());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertEquals(204852, node3.getSourcePosition());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isSwitch());
assertFalse(node3.isEmpty());
assertEquals(52, node3.getCharno());
assertFalse(node3.isFalse());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertFalse(node3.isNot());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isObjectLit());
assertEquals(50, node3.getLineno());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertEquals(57, node3.getType());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertNotNull(node3);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));

Node node4 = node3.removeFirstChild();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isCast());
assertFalse(node3.isSetterDef());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isVar());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isParamList());
assertFalse(node3.isIf());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertEquals(204852, node3.getSourcePosition());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isSwitch());
assertFalse(node3.isEmpty());
assertEquals(52, node3.getCharno());
assertFalse(node3.isFalse());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertFalse(node3.isNot());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isObjectLit());
assertEquals(50, node3.getLineno());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertEquals(57, node3.getType());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertNull(node4);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));

Node node5 = Node.newNumber((double) 1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(0, node5.getChildCount());
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isSetterDef());
assertFalse(node5.isDebugger());
assertFalse(node5.isAdd());
assertFalse(node5.isVar());
assertFalse(node5.isArrayLit());
assertFalse(node5.isNew());
assertFalse(node5.isStringKey());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isContinue());
assertFalse(node5.isFunction());
assertTrue(node5.isNumber());
assertFalse(node5.isLabel());
assertFalse(node5.isReturn());
assertFalse(node5.isDo());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isString());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isEmpty());
assertFalse(node5.isOr());
assertFalse(node5.isVoid());
assertFalse(node5.isTrue());
assertFalse(node5.isName());
assertFalse(node5.isBreak());
assertFalse(node5.hasChildren());
assertFalse(node5.isDelProp());
assertFalse(node5.isWhile());
assertFalse(node5.isDec());
assertFalse(node5.isGetElem());
assertFalse(node5.isExprResult());
assertFalse(node5.isCall());
assertFalse(node5.isComma());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isGetProp());
assertFalse(node5.isAnd());
assertFalse(node5.isScript());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isThrow());
assertFalse(node5.isLabelName());
assertFalse(node5.isSwitch());
assertFalse(node5.isCast());
assertFalse(node5.isFalse());
assertFalse(node5.isIn());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isIf());
assertFalse(node5.isGetterDef());
assertFalse(node5.isNE());
assertFalse(node5.isCase());
assertFalse(node5.isInc());
assertEquals((-1), node5.getCharno());
assertFalse(node5.hasOneChild());
assertFalse(node5.isBlock());
assertFalse(node5.isHook());
assertFalse(node5.isTry());
assertEquals(39, node5.getType());
assertFalse(node5.isFor());
assertFalse(node5.isThis());
assertFalse(node5.isCatch());
assertFalse(node5.isRegExp());
assertFalse(node5.isWith());
assertFalse(node5.hasMoreThanOneChild());
assertNotSame(node5, node2);
assertNotSame(node5, node0);
assertNotNull(node5);
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node0));

boolean boolean1 = node2.isGetProp();
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isInc());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertEquals(15, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertEquals(48, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertTrue(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isGetProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isContinue());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCast());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertSame(node0, node2);
assertNotSame(node0, node5);
assertNotSame(node2, node5);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

Object object0 = node2.getProp(46);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isInc());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertEquals(15, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertEquals(48, node1.getCharno());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertTrue(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isGetProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isContinue());
assertEquals(39, node2.getType());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCast());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertSame(node0, node2);
assertNotSame(node0, node5);
assertNotSame(node2, node5);
assertSame(node2, node0);
assertNull(object0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node3));

node5.getChildBefore(node1);

[MASTER] 09:58:51.740 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_166_1628157531598/com/google/javascript/rhino/Node_166_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_166_1628157531598/com/google/javascript/rhino/Node_166_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:51.740 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:51.740 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:51.740 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 163
[MASTER] 09:58:51.741 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_166_1628157531598/com/google/javascript/rhino/Node_166_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_166_tmp__ESTest extends Node_166_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertEquals(53, Node.INPUT_ID);
23:       assertEquals(43, Node.IS_CONSTANT_NAME);
24:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
25:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
26:       assertEquals(29, Node.JSDOC_INFO_PROP);
27:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
28:       assertEquals(36, Node.QUOTED_PROP);
29:       assertEquals(55, Node.INFERRED_FUNCTION);
30:       assertEquals(39, Node.EMPTY_BLOCK);
31:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
32:       assertEquals(46, Node.IS_NAMESPACE);
33:       assertEquals(30, Node.VAR_ARGS_NAME);
34:       assertEquals(40, Node.ORIGINALNAME_PROP);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(54, Node.SLASH_V);
38:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
39:       assertEquals(57, Node.REFLECTED_OBJECT);
40:       assertEquals(57, Node.LAST_PROP);
41:       assertEquals(1, Node.DECR_FLAG);
42:       assertEquals(50, Node.FREE_CALL);
43:       assertEquals(15, Node.NO_SIDE_EFFECTS);
44:       assertEquals(51, Node.STATIC_SOURCE_FILE);
45:       assertEquals(8, Node.FLAG_NO_THROWS);
46:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
47:       assertEquals(52, Node.LENGTH);
48:       assertEquals(48, Node.DIRECTIVES);
49:       assertEquals(37, Node.OPT_ARG_NAME);
50:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
51:       assertEquals(56, Node.CHANGE_TIME);
52:       assertEquals(12, Node.COLUMN_BITS);
53:       assertEquals(32, Node.INCRDECR_PROP);
54:       assertEquals(49, Node.DIRECT_EVAL);
55:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
56:       assertEquals(4095, Node.COLUMN_MASK);
57:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
58:       assertFalse(node0.isHook());
59:       assertFalse(node0.isInc());
60:       assertFalse(node0.isSwitch());
61:       assertFalse(node0.isString());
62:       assertEquals((-1), node0.getCharno());
63:       assertFalse(node0.isIn());
64:       assertFalse(node0.isAnd());
65:       assertFalse(node0.isThrow());
66:       assertFalse(node0.isFalse());
67:       assertFalse(node0.isExprResult());
68:       assertFalse(node0.isCast());
69:       assertFalse(node0.isDefaultCase());
70:       assertFalse(node0.isVoid());
71:       assertFalse(node0.isEmpty());
72:       assertFalse(node0.isTrue());
73:       assertFalse(node0.isDebugger());
74:       assertEquals((-1), node0.getSourcePosition());
75:       assertFalse(node0.isOr());
76:       assertFalse(node0.isNot());
77:       assertFalse(node0.isObjectLit());
78:       assertFalse(node0.isReturn());
79:       assertTrue(node0.isNumber());
80:       assertFalse(node0.isGetProp());
81:       assertFalse(node0.isDelProp());
82:       assertFalse(node0.isWhile());
83:       assertFalse(node0.isBreak());
84:       assertFalse(node0.hasChildren());
85:       assertFalse(node0.isGetElem());
86:       assertFalse(node0.isComma());
87:       assertFalse(node0.isDec());
88:       assertFalse(node0.isAssign());
89:       assertFalse(node0.isTypeOf());
90:       assertFalse(node0.isBlock());
91:       assertFalse(node0.isAdd());
92:       assertFalse(node0.isVar());
93:       assertFalse(node0.isCall());
94:       assertFalse(node0.isName());
95:       assertFalse(node0.isNew());
96:       assertFalse(node0.isStringKey());
97:       assertFalse(node0.isNull());
98:       assertFalse(node0.isLabel());
99:       assertFalse(node0.isAssignAdd());
100:       assertFalse(node0.isSetterDef());
101:       assertFalse(node0.isParamList());
102:       assertFalse(node0.isDo());
103:       assertFalse(node0.isFunction());
104:       assertFalse(node0.isContinue());
105:       assertEquals(0, node0.getChildCount());
106:       assertFalse(node0.isArrayLit());
107:       assertFalse(node0.hasOneChild());
108:       assertFalse(node0.isTry());
109:       assertFalse(node0.isLabelName());
110:       assertFalse(node0.isIf());
111:       assertFalse(node0.isScript());
112:       assertFalse(node0.isNE());
113:       assertFalse(node0.isGetterDef());
114:       assertEquals((-1), node0.getLineno());
115:       assertFalse(node0.isInstanceOf());
116:       assertFalse(node0.isCase());
117:       assertFalse(node0.isWith());
118:       assertEquals(39, node0.getType());
119:       assertFalse(node0.isFor());
120:       assertFalse(node0.isThis());
121:       assertFalse(node0.isCatch());
122:       assertFalse(node0.hasMoreThanOneChild());
123:       assertFalse(node0.isRegExp());
124:       assertNotNull(node0);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertEquals(53, Node.INPUT_ID);
128:       assertEquals(43, Node.IS_CONSTANT_NAME);
129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
130:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
131:       assertEquals(29, Node.JSDOC_INFO_PROP);
132:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
133:       assertEquals(36, Node.QUOTED_PROP);
134:       assertEquals(55, Node.INFERRED_FUNCTION);
135:       assertEquals(39, Node.EMPTY_BLOCK);
136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
137:       assertEquals(46, Node.IS_NAMESPACE);
138:       assertEquals(30, Node.VAR_ARGS_NAME);
139:       assertEquals(40, Node.ORIGINALNAME_PROP);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(54, Node.SLASH_V);
143:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
144:       assertEquals(57, Node.REFLECTED_OBJECT);
145:       assertEquals(57, Node.LAST_PROP);
146:       assertEquals(1, Node.DECR_FLAG);
147:       assertEquals(50, Node.FREE_CALL);
148:       assertEquals(15, Node.NO_SIDE_EFFECTS);
149:       assertEquals(51, Node.STATIC_SOURCE_FILE);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
152:       assertEquals(52, Node.LENGTH);
153:       assertEquals(48, Node.DIRECTIVES);
154:       assertEquals(37, Node.OPT_ARG_NAME);
155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
156:       assertEquals(56, Node.CHANGE_TIME);
157:       assertEquals(12, Node.COLUMN_BITS);
158:       assertEquals(32, Node.INCRDECR_PROP);
159:       assertEquals(49, Node.DIRECT_EVAL);
160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
161:       assertEquals(4095, Node.COLUMN_MASK);
162:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
163:       assertFalse(iterable0.contains(node0));
164:       assertFalse(node0.isHook());
165:       assertFalse(node0.isInc());
166:       assertFalse(node0.isSwitch());
167:       assertFalse(node0.isString());
168:       assertEquals((-1), node0.getCharno());
169:       assertFalse(node0.isIn());
170:       assertFalse(node0.isAnd());
171:       assertFalse(node0.isThrow());
172:       assertFalse(node0.isFalse());
173:       assertFalse(node0.isExprResult());
174:       assertFalse(node0.isCast());
175:       assertFalse(node0.isDefaultCase());
176:       assertFalse(node0.isVoid());
177:       assertFalse(node0.isEmpty());
178:       assertFalse(node0.isTrue());
179:       assertFalse(node0.isDebugger());
180:       assertEquals((-1), node0.getSourcePosition());
181:       assertFalse(node0.isOr());
182:       assertFalse(node0.isNot());
183:       assertFalse(node0.isObjectLit());
184:       assertFalse(node0.isReturn());
185:       assertTrue(node0.isNumber());
186:       assertFalse(node0.isGetProp());
187:       assertFalse(node0.isDelProp());
188:       assertFalse(node0.isWhile());
189:       assertFalse(node0.isBreak());
190:       assertFalse(node0.hasChildren());
191:       assertFalse(node0.isGetElem());
192:       assertFalse(node0.isComma());
193:       assertFalse(node0.isDec());
194:       assertFalse(node0.isAssign());
195:       assertFalse(node0.isTypeOf());
196:       assertFalse(node0.isBlock());
197:       assertFalse(node0.isAdd());
198:       assertFalse(node0.isVar());
199:       assertFalse(node0.isCall());
200:       assertFalse(node0.isName());
201:       assertFalse(node0.isNew());
202:       assertFalse(node0.isStringKey());
203:       assertFalse(node0.isNull());
204:       assertFalse(node0.isLabel());
205:       assertFalse(node0.isAssignAdd());
206:       assertFalse(node0.isSetterDef());
207:       assertFalse(node0.isParamList());
208:       assertFalse(node0.isDo());
209:       assertFalse(node0.isFunction());
210:       assertFalse(node0.isContinue());
211:       assertEquals(0, node0.getChildCount());
212:       assertFalse(node0.isArrayLit());
213:       assertFalse(node0.hasOneChild());
214:       assertFalse(node0.isTry());
215:       assertFalse(node0.isLabelName());
216:       assertFalse(node0.isIf());
217:       assertFalse(node0.isScript());
218:       assertFalse(node0.isNE());
219:       assertFalse(node0.isGetterDef());
220:       assertEquals((-1), node0.getLineno());
221:       assertFalse(node0.isInstanceOf());
222:       assertFalse(node0.isCase());
223:       assertFalse(node0.isWith());
224:       assertEquals(39, node0.getType());
225:       assertFalse(node0.isFor());
226:       assertFalse(node0.isThis());
227:       assertFalse(node0.isCatch());
228:       assertFalse(node0.hasMoreThanOneChild());
229:       assertFalse(node0.isRegExp());
230:       assertNotNull(iterable0);
231:       
232:       Node node1 = new Node(87855567, node0, node0, node0, node0);
233:       assertEquals(53, Node.INPUT_ID);
234:       assertEquals(43, Node.IS_CONSTANT_NAME);
235:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
236:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
237:       assertEquals(29, Node.JSDOC_INFO_PROP);
238:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
239:       assertEquals(36, Node.QUOTED_PROP);
240:       assertEquals(55, Node.INFERRED_FUNCTION);
241:       assertEquals(39, Node.EMPTY_BLOCK);
242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
243:       assertEquals(46, Node.IS_NAMESPACE);
244:       assertEquals(30, Node.VAR_ARGS_NAME);
245:       assertEquals(40, Node.ORIGINALNAME_PROP);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(2, Node.POST_FLAG);
248:       assertEquals(54, Node.SLASH_V);
249:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
250:       assertEquals(57, Node.REFLECTED_OBJECT);
251:       assertEquals(57, Node.LAST_PROP);
252:       assertEquals(1, Node.DECR_FLAG);
253:       assertEquals(50, Node.FREE_CALL);
254:       assertEquals(15, Node.NO_SIDE_EFFECTS);
255:       assertEquals(51, Node.STATIC_SOURCE_FILE);
256:       assertEquals(8, Node.FLAG_NO_THROWS);
257:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
258:       assertEquals(52, Node.LENGTH);
259:       assertEquals(48, Node.DIRECTIVES);
260:       assertEquals(37, Node.OPT_ARG_NAME);
261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
262:       assertEquals(56, Node.CHANGE_TIME);
263:       assertEquals(12, Node.COLUMN_BITS);
264:       assertEquals(32, Node.INCRDECR_PROP);
265:       assertEquals(49, Node.DIRECT_EVAL);
266:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
267:       assertEquals(4095, Node.COLUMN_MASK);
268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
269:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
270:       assertEquals(50, Node.FREE_CALL);
271:       assertEquals(40, Node.ORIGINALNAME_PROP);
272:       assertEquals(39, Node.EMPTY_BLOCK);
273:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
274:       assertEquals(52, Node.LENGTH);
275:       assertEquals(8, Node.FLAG_NO_THROWS);
276:       assertEquals(48, Node.DIRECTIVES);
277:       assertEquals(57, Node.REFLECTED_OBJECT);
278:       assertEquals(54, Node.SLASH_V);
279:       assertEquals(30, Node.VAR_ARGS_NAME);
280:       assertEquals(15, Node.NO_SIDE_EFFECTS);
281:       assertEquals(55, Node.INFERRED_FUNCTION);
282:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
283:       assertEquals(53, Node.INPUT_ID);
284:       assertEquals(2, Node.POST_FLAG);
285:       assertEquals(57, Node.LAST_PROP);
286:       assertEquals(47, Node.IS_DISPATCHER);
287:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
288:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
289:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
290:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
291:       assertEquals(29, Node.JSDOC_INFO_PROP);
292:       assertEquals(37, Node.OPT_ARG_NAME);
293:       assertEquals(43, Node.IS_CONSTANT_NAME);
294:       assertEquals(56, Node.CHANGE_TIME);
295:       assertEquals(51, Node.STATIC_SOURCE_FILE);
296:       assertEquals(36, Node.QUOTED_PROP);
297:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
298:       assertEquals(46, Node.IS_NAMESPACE);
299:       assertEquals(49, Node.DIRECT_EVAL);
300:       assertEquals(1, Node.DECR_FLAG);
301:       assertEquals(4095, Node.COLUMN_MASK);
302:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
303:       assertEquals(32, Node.INCRDECR_PROP);
304:       assertEquals(12, Node.COLUMN_BITS);
305:       assertFalse(node0.isHook());
306:       assertFalse(node0.isInc());
307:       assertFalse(node0.isSwitch());
308:       assertFalse(node0.isString());
309:       assertEquals((-1), node0.getCharno());
310:       assertFalse(node0.isIn());
311:       assertFalse(node0.isAnd());
312:       assertFalse(node0.isThrow());
313:       assertFalse(node0.isFalse());
314:       assertFalse(node0.isExprResult());
315:       assertFalse(node0.isCast());
316:       assertFalse(node0.isDefaultCase());
317:       assertFalse(node0.isVoid());
318:       assertFalse(node0.isEmpty());
319:       assertFalse(node0.isTrue());
320:       assertFalse(node0.isDebugger());
321:       assertEquals((-1), node0.getSourcePosition());
322:       assertFalse(node0.isOr());
323:       assertFalse(node0.isNot());
324:       assertFalse(node0.isObjectLit());
325:       assertFalse(node0.isReturn());
326:       assertTrue(node0.isNumber());
327:       assertFalse(node0.isGetProp());
328:       assertFalse(node0.isDelProp());
329:       assertFalse(node0.isWhile());
330:       assertFalse(node0.isBreak());
331:       assertFalse(node0.hasChildren());
332:       assertFalse(node0.isGetElem());
333:       assertFalse(node0.isComma());
334:       assertFalse(node0.isDec());
335:       assertFalse(node0.isAssign());
336:       assertFalse(node0.isTypeOf());
337:       assertFalse(node0.isBlock());
338:       assertFalse(node0.isAdd());
339:       assertFalse(node0.isVar());
340:       assertFalse(node0.isCall());
341:       assertFalse(node0.isName());
342:       assertFalse(node0.isNew());
343:       assertFalse(node0.isStringKey());
344:       assertFalse(node0.isNull());
345:       assertFalse(node0.isLabel());
346:       assertFalse(node0.isAssignAdd());
347:       assertFalse(node0.isSetterDef());
348:       assertFalse(node0.isParamList());
349:       assertFalse(node0.isDo());
350:       assertFalse(node0.isFunction());
351:       assertFalse(node0.isContinue());
352:       assertEquals(0, node0.getChildCount());
353:       assertFalse(node0.isArrayLit());
354:       assertFalse(node0.hasOneChild());
355:       assertFalse(node0.isTry());
356:       assertFalse(node0.isLabelName());
357:       assertFalse(node0.isIf());
358:       assertFalse(node0.isScript());
359:       assertFalse(node0.isNE());
360:       assertFalse(node0.isGetterDef());
361:       assertEquals((-1), node0.getLineno());
362:       assertFalse(node0.isInstanceOf());
363:       assertFalse(node0.isCase());
364:       assertFalse(node0.isWith());
365:       assertEquals(39, node0.getType());
366:       assertFalse(node0.isFor());
367:       assertFalse(node0.isThis());
368:       assertFalse(node0.isCatch());
369:       assertFalse(node0.hasMoreThanOneChild());
370:       assertFalse(node0.isRegExp());
371:       assertFalse(node1.isAssign());
372:       assertFalse(node1.isLabelName());
373:       assertFalse(node1.isGetElem());
374:       assertFalse(node1.isDec());
375:       assertEquals((-1), node1.getSourcePosition());
376:       assertFalse(node1.isCast());
377:       assertFalse(node1.isTypeOf());
378:       assertFalse(node1.isNumber());
379:       assertEquals((-1), node1.getLineno());
380:       assertFalse(node1.isOr());
381:       assertFalse(node1.isDo());
382:       assertFalse(node1.isContinue());
383:       assertFalse(node1.isAdd());
384:       assertFalse(node1.isNew());
385:       assertFalse(node1.isLabel());
386:       assertFalse(node1.isVar());
387:       assertFalse(node1.isAssignAdd());
388:       assertFalse(node1.isName());
389:       assertFalse(node1.isBreak());
390:       assertFalse(node1.isComma());
391:       assertFalse(node1.isCall());
392:       assertFalse(node1.isFalse());
393:       assertFalse(node1.isNull());
394:       assertEquals(87855567, node1.getType());
395:       assertFalse(node1.isAnd());
396:       assertFalse(node1.isNot());
397:       assertFalse(node1.isExprResult());
398:       assertFalse(node1.isObjectLit());
399:       assertFalse(node1.isString());
400:       assertFalse(node1.isReturn());
401:       assertFalse(node1.isGetProp());
402:       assertFalse(node1.isWhile());
403:       assertTrue(node1.hasOneChild());
404:       assertFalse(node1.isEmpty());
405:       assertFalse(node1.isDelProp());
406:       assertFalse(node1.isFor());
407:       assertFalse(node1.isGetterDef());
408:       assertTrue(node1.hasChildren());
409:       assertFalse(node1.isDebugger());
410:       assertFalse(node1.isArrayLit());
411:       assertFalse(node1.isNE());
412:       assertFalse(node1.isVoid());
413:       assertFalse(node1.isTrue());
414:       assertFalse(node1.isIf());
415:       assertFalse(node1.isInc());
416:       assertFalse(node1.isFunction());
417:       assertFalse(node1.isIn());
418:       assertFalse(node1.isThrow());
419:       assertFalse(node1.isDefaultCase());
420:       assertFalse(node1.isSetterDef());
421:       assertEquals((-1), node1.getCharno());
422:       assertFalse(node1.isSwitch());
423:       assertFalse(node1.isParamList());
424:       assertFalse(node1.isStringKey());
425:       assertFalse(node1.isWith());
426:       assertFalse(node1.isCase());
427:       assertFalse(node1.isCatch());
428:       assertFalse(node1.hasMoreThanOneChild());
429:       assertFalse(node1.isScript());
430:       assertFalse(node1.isRegExp());
431:       assertFalse(node1.isInstanceOf());
432:       assertFalse(node1.isTry());
433:       assertFalse(node1.isBlock());
434:       assertFalse(node1.isHook());
435:       assertEquals(1, node1.getChildCount());
436:       assertFalse(node1.isThis());
437:       assertNotNull(node1);
438:       assertFalse(node1.equals((Object)node0));
439:       
440:       Node node2 = new Node(2207, node1, node1, 4, 93);
441:       assertEquals(53, Node.INPUT_ID);
442:       assertEquals(43, Node.IS_CONSTANT_NAME);
443:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
444:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
445:       assertEquals(29, Node.JSDOC_INFO_PROP);
446:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
447:       assertEquals(36, Node.QUOTED_PROP);
448:       assertEquals(55, Node.INFERRED_FUNCTION);
449:       assertEquals(39, Node.EMPTY_BLOCK);
450:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
451:       assertEquals(46, Node.IS_NAMESPACE);
452:       assertEquals(30, Node.VAR_ARGS_NAME);
453:       assertEquals(40, Node.ORIGINALNAME_PROP);
454:       assertEquals(47, Node.IS_DISPATCHER);
455:       assertEquals(2, Node.POST_FLAG);
456:       assertEquals(54, Node.SLASH_V);
457:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(57, Node.LAST_PROP);
460:       assertEquals(1, Node.DECR_FLAG);
461:       assertEquals(50, Node.FREE_CALL);
462:       assertEquals(15, Node.NO_SIDE_EFFECTS);
463:       assertEquals(51, Node.STATIC_SOURCE_FILE);
464:       assertEquals(8, Node.FLAG_NO_THROWS);
465:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
466:       assertEquals(52, Node.LENGTH);
467:       assertEquals(48, Node.DIRECTIVES);
468:       assertEquals(37, Node.OPT_ARG_NAME);
469:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
470:       assertEquals(56, Node.CHANGE_TIME);
471:       assertEquals(12, Node.COLUMN_BITS);
472:       assertEquals(32, Node.INCRDECR_PROP);
473:       assertEquals(49, Node.DIRECT_EVAL);
474:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
475:       assertEquals(4095, Node.COLUMN_MASK);
476:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
477:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
478:       assertEquals(50, Node.FREE_CALL);
479:       assertEquals(40, Node.ORIGINALNAME_PROP);
480:       assertEquals(39, Node.EMPTY_BLOCK);
481:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
482:       assertEquals(52, Node.LENGTH);
483:       assertEquals(8, Node.FLAG_NO_THROWS);
484:       assertEquals(48, Node.DIRECTIVES);
485:       assertEquals(57, Node.REFLECTED_OBJECT);
486:       assertEquals(54, Node.SLASH_V);
487:       assertEquals(30, Node.VAR_ARGS_NAME);
488:       assertEquals(15, Node.NO_SIDE_EFFECTS);
489:       assertEquals(55, Node.INFERRED_FUNCTION);
490:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
491:       assertEquals(53, Node.INPUT_ID);
492:       assertEquals(2, Node.POST_FLAG);
493:       assertEquals(57, Node.LAST_PROP);
494:       assertEquals(47, Node.IS_DISPATCHER);
495:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
496:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
497:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
498:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
499:       assertEquals(29, Node.JSDOC_INFO_PROP);
500:       assertEquals(37, Node.OPT_ARG_NAME);
501:       assertEquals(43, Node.IS_CONSTANT_NAME);
502:       assertEquals(56, Node.CHANGE_TIME);
503:       assertEquals(51, Node.STATIC_SOURCE_FILE);
504:       assertEquals(36, Node.QUOTED_PROP);
505:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
506:       assertEquals(46, Node.IS_NAMESPACE);
507:       assertEquals(49, Node.DIRECT_EVAL);
508:       assertEquals(1, Node.DECR_FLAG);
509:       assertEquals(4095, Node.COLUMN_MASK);
510:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
511:       assertEquals(32, Node.INCRDECR_PROP);
512:       assertEquals(12, Node.COLUMN_BITS);
513:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
514:       assertEquals(43, Node.IS_CONSTANT_NAME);
515:       assertEquals(36, Node.QUOTED_PROP);
516:       assertEquals(55, Node.INFERRED_FUNCTION);
517:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
518:       assertEquals(39, Node.EMPTY_BLOCK);
519:       assertEquals(53, Node.INPUT_ID);
520:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
521:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
522:       assertEquals(29, Node.JSDOC_INFO_PROP);
523:       assertEquals(56, Node.CHANGE_TIME);
524:       assertEquals(8, Node.FLAG_NO_THROWS);
525:       assertEquals(57, Node.REFLECTED_OBJECT);
526:       assertEquals(4095, Node.COLUMN_MASK);
527:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
528:       assertEquals(48, Node.DIRECTIVES);
529:       assertEquals(49, Node.DIRECT_EVAL);
530:       assertEquals(37, Node.OPT_ARG_NAME);
531:       assertEquals(15, Node.NO_SIDE_EFFECTS);
532:       assertEquals(57, Node.LAST_PROP);
533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
534:       assertEquals(54, Node.SLASH_V);
535:       assertEquals(30, Node.VAR_ARGS_NAME);
536:       assertEquals(51, Node.STATIC_SOURCE_FILE);
537:       assertEquals(12, Node.COLUMN_BITS);
538:       assertEquals(32, Node.INCRDECR_PROP);
539:       assertEquals(52, Node.LENGTH);
540:       assertEquals(1, Node.DECR_FLAG);
541:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
542:       assertEquals(47, Node.IS_DISPATCHER);
543:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
544:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
545:       assertEquals(2, Node.POST_FLAG);
546:       assertEquals(50, Node.FREE_CALL);
547:       assertEquals(46, Node.IS_NAMESPACE);
548:       assertEquals(40, Node.ORIGINALNAME_PROP);
549:       assertFalse(node0.isHook());
550:       assertFalse(node0.isInc());
551:       assertFalse(node0.isSwitch());
552:       assertFalse(node0.isString());
553:       assertEquals((-1), node0.getCharno());
554:       assertFalse(node0.isIn());
555:       assertFalse(node0.isAnd());
556:       assertFalse(node0.isThrow());
557:       assertFalse(node0.isFalse());
558:       assertFalse(node0.isExprResult());
559:       assertFalse(node0.isCast());
560:       assertFalse(node0.isDefaultCase());
561:       assertFalse(node0.isVoid());
562:       assertFalse(node0.isEmpty());
563:       assertFalse(node0.isTrue());
564:       assertFalse(node0.isDebugger());
565:       assertEquals((-1), node0.getSourcePosition());
566:       assertFalse(node0.isOr());
567:       assertFalse(node0.isNot());
568:       assertFalse(node0.isObjectLit());
569:       assertFalse(node0.isReturn());
570:       assertTrue(node0.isNumber());
571:       assertFalse(node0.isGetProp());
572:       assertFalse(node0.isDelProp());
573:       assertFalse(node0.isWhile());
574:       assertFalse(node0.isBreak());
575:       assertFalse(node0.hasChildren());
576:       assertFalse(node0.isGetElem());
577:       assertFalse(node0.isComma());
578:       assertFalse(node0.isDec());
579:       assertFalse(node0.isAssign());
580:       assertFalse(node0.isTypeOf());
581:       assertFalse(node0.isBlock());
582:       assertFalse(node0.isAdd());
583:       assertFalse(node0.isVar());
584:       assertFalse(node0.isCall());
585:       assertFalse(node0.isName());
586:       assertFalse(node0.isNew());
587:       assertFalse(node0.isStringKey());
588:       assertFalse(node0.isNull());
589:       assertFalse(node0.isLabel());
590:       assertFalse(node0.isAssignAdd());
591:       assertFalse(node0.isSetterDef());
592:       assertFalse(node0.isParamList());
593:       assertFalse(node0.isDo());
594:       assertFalse(node0.isFunction());
595:       assertFalse(node0.isContinue());
596:       assertEquals(0, node0.getChildCount());
597:       assertFalse(node0.isArrayLit());
598:       assertFalse(node0.hasOneChild());
599:       assertFalse(node0.isTry());
600:       assertFalse(node0.isLabelName());
601:       assertFalse(node0.isIf());
602:       assertFalse(node0.isScript());
603:       assertFalse(node0.isNE());
604:       assertFalse(node0.isGetterDef());
605:       assertEquals((-1), node0.getLineno());
606:       assertFalse(node0.isInstanceOf());
607:       assertFalse(node0.isCase());
608:       assertFalse(node0.isWith());
609:       assertEquals(39, node0.getType());
610:       assertFalse(node0.isFor());
611:       assertFalse(node0.isThis());
612:       assertFalse(node0.isCatch());
613:       assertFalse(node0.hasMoreThanOneChild());
614:       assertFalse(node0.isRegExp());
615:       assertFalse(node1.isAssign());
616:       assertFalse(node1.isLabelName());
617:       assertFalse(node1.isGetElem());
618:       assertFalse(node1.isDec());
619:       assertEquals((-1), node1.getSourcePosition());
620:       assertFalse(node1.isCast());
621:       assertFalse(node1.isTypeOf());
622:       assertFalse(node1.isNumber());
623:       assertEquals((-1), node1.getLineno());
624:       assertFalse(node1.isOr());
625:       assertFalse(node1.isDo());
626:       assertFalse(node1.isContinue());
627:       assertFalse(node1.isAdd());
628:       assertFalse(node1.isNew());
629:       assertFalse(node1.isLabel());
630:       assertFalse(node1.isVar());
631:       assertFalse(node1.isAssignAdd());
632:       assertFalse(node1.isName());
633:       assertFalse(node1.isBreak());
634:       assertFalse(node1.isComma());
635:       assertFalse(node1.isCall());
636:       assertFalse(node1.isFalse());
637:       assertFalse(node1.isNull());
638:       assertEquals(87855567, node1.getType());
639:       assertFalse(node1.isAnd());
640:       assertFalse(node1.isNot());
641:       assertFalse(node1.isExprResult());
642:       assertFalse(node1.isObjectLit());
643:       assertFalse(node1.isString());
644:       assertFalse(node1.isReturn());
645:       assertFalse(node1.isGetProp());
646:       assertFalse(node1.isWhile());
647:       assertTrue(node1.hasOneChild());
648:       assertFalse(node1.isEmpty());
649:       assertFalse(node1.isDelProp());
650:       assertFalse(node1.isFor());
651:       assertFalse(node1.isGetterDef());
652:       assertTrue(node1.hasChildren());
653:       assertFalse(node1.isDebugger());
654:       assertFalse(node1.isArrayLit());
655:       assertFalse(node1.isNE());
656:       assertFalse(node1.isVoid());
657:       assertFalse(node1.isTrue());
658:       assertFalse(node1.isIf());
659:       assertFalse(node1.isInc());
660:       assertFalse(node1.isFunction());
661:       assertFalse(node1.isIn());
662:       assertFalse(node1.isThrow());
663:       assertFalse(node1.isDefaultCase());
664:       assertFalse(node1.isSetterDef());
665:       assertEquals((-1), node1.getCharno());
666:       assertFalse(node1.isSwitch());
667:       assertFalse(node1.isParamList());
668:       assertFalse(node1.isStringKey());
669:       assertFalse(node1.isWith());
670:       assertFalse(node1.isCase());
671:       assertFalse(node1.isCatch());
672:       assertFalse(node1.hasMoreThanOneChild());
673:       assertFalse(node1.isScript());
674:       assertFalse(node1.isRegExp());
675:       assertFalse(node1.isInstanceOf());
676:       assertFalse(node1.isTry());
677:       assertFalse(node1.isBlock());
678:       assertFalse(node1.isHook());
679:       assertEquals(1, node1.getChildCount());
680:       assertFalse(node1.isThis());
681:       assertFalse(node2.isWhile());
682:       assertFalse(node2.isBlock());
683:       assertFalse(node2.isVar());
684:       assertFalse(node2.isAdd());
685:       assertFalse(node2.isDo());
686:       assertFalse(node2.isNew());
687:       assertFalse(node2.isTypeOf());
688:       assertFalse(node2.isNull());
689:       assertFalse(node2.isDec());
690:       assertFalse(node2.isAssign());
691:       assertFalse(node2.isOr());
692:       assertFalse(node2.isReturn());
693:       assertFalse(node2.isCatch());
694:       assertFalse(node2.hasMoreThanOneChild());
695:       assertFalse(node2.isName());
696:       assertEquals(2207, node2.getType());
697:       assertFalse(node2.isExprResult());
698:       assertFalse(node2.isCall());
699:       assertFalse(node2.isGetElem());
700:       assertFalse(node2.isScript());
701:       assertFalse(node2.isRegExp());
702:       assertFalse(node2.isVoid());
703:       assertFalse(node2.isWith());
704:       assertFalse(node2.isDefaultCase());
705:       assertEquals(93, node2.getCharno());
706:       assertFalse(node2.isTrue());
707:       assertFalse(node2.isTry());
708:       assertFalse(node2.isEmpty());
709:       assertFalse(node2.isParamList());
710:       assertFalse(node2.isGetterDef());
711:       assertFalse(node2.isNumber());
712:       assertFalse(node2.isLabel());
713:       assertFalse(node2.isAssignAdd());
714:       assertFalse(node2.isStringKey());
715:       assertFalse(node2.isArrayLit());
716:       assertFalse(node2.isLabelName());
717:       assertFalse(node2.isString());
718:       assertFalse(node2.isSwitch());
719:       assertFalse(node2.isHook());
720:       assertEquals(16477, node2.getSourcePosition());
721:       assertFalse(node2.isIn());
722:       assertFalse(node2.isCase());
723:       assertFalse(node2.isInc());
724:       assertFalse(node2.isNE());
725:       assertFalse(node2.isComma());
726:       assertFalse(node2.isIf());
727:       assertFalse(node2.isDelProp());
728:       assertFalse(node2.isFor());
729:       assertEquals(1, node2.getChildCount());
730:       assertFalse(node2.isThis());
731:       assertTrue(node2.hasOneChild());
732:       assertFalse(node2.isInstanceOf());
733:       assertTrue(node2.hasChildren());
734:       assertFalse(node2.isBreak());
735:       assertFalse(node2.isFunction());
736:       assertFalse(node2.isNot());
737:       assertFalse(node2.isDebugger());
738:       assertFalse(node2.isObjectLit());
739:       assertFalse(node2.isGetProp());
740:       assertFalse(node2.isSetterDef());
741:       assertEquals(4, node2.getLineno());
742:       assertFalse(node2.isThrow());
743:       assertFalse(node2.isCast());
744:       assertFalse(node2.isAnd());
745:       assertFalse(node2.isContinue());
746:       assertFalse(node2.isFalse());
747:       assertNotNull(node2);
748:       assertFalse(node0.equals((Object)node1));
749:       assertFalse(node1.equals((Object)node0));
750:       assertFalse(node2.equals((Object)node0));
751:       assertFalse(node2.equals((Object)node1));
752:       
753:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
754:       assertEquals(53, Node.INPUT_ID);
755:       assertEquals(43, Node.IS_CONSTANT_NAME);
756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
757:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
758:       assertEquals(29, Node.JSDOC_INFO_PROP);
759:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
760:       assertEquals(36, Node.QUOTED_PROP);
761:       assertEquals(55, Node.INFERRED_FUNCTION);
762:       assertEquals(39, Node.EMPTY_BLOCK);
763:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
764:       assertEquals(46, Node.IS_NAMESPACE);
765:       assertEquals(30, Node.VAR_ARGS_NAME);
766:       assertEquals(40, Node.ORIGINALNAME_PROP);
767:       assertEquals(47, Node.IS_DISPATCHER);
768:       assertEquals(2, Node.POST_FLAG);
769:       assertEquals(54, Node.SLASH_V);
770:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
771:       assertEquals(57, Node.REFLECTED_OBJECT);
772:       assertEquals(57, Node.LAST_PROP);
773:       assertEquals(1, Node.DECR_FLAG);
774:       assertEquals(50, Node.FREE_CALL);
775:       assertEquals(15, Node.NO_SIDE_EFFECTS);
776:       assertEquals(51, Node.STATIC_SOURCE_FILE);
777:       assertEquals(8, Node.FLAG_NO_THROWS);
778:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
779:       assertEquals(52, Node.LENGTH);
780:       assertEquals(48, Node.DIRECTIVES);
781:       assertEquals(37, Node.OPT_ARG_NAME);
782:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
783:       assertEquals(56, Node.CHANGE_TIME);
784:       assertEquals(12, Node.COLUMN_BITS);
785:       assertEquals(32, Node.INCRDECR_PROP);
786:       assertEquals(49, Node.DIRECT_EVAL);
787:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
788:       assertEquals(4095, Node.COLUMN_MASK);
789:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
790:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
791:       assertEquals(50, Node.FREE_CALL);
792:       assertEquals(40, Node.ORIGINALNAME_PROP);
793:       assertEquals(39, Node.EMPTY_BLOCK);
794:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
795:       assertEquals(52, Node.LENGTH);
796:       assertEquals(8, Node.FLAG_NO_THROWS);
797:       assertEquals(48, Node.DIRECTIVES);
798:       assertEquals(57, Node.REFLECTED_OBJECT);
799:       assertEquals(54, Node.SLASH_V);
800:       assertEquals(30, Node.VAR_ARGS_NAME);
801:       assertEquals(15, Node.NO_SIDE_EFFECTS);
802:       assertEquals(55, Node.INFERRED_FUNCTION);
803:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
804:       assertEquals(53, Node.INPUT_ID);
805:       assertEquals(2, Node.POST_FLAG);
806:       assertEquals(57, Node.LAST_PROP);
807:       assertEquals(47, Node.IS_DISPATCHER);
808:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
809:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
810:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
811:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
812:       assertEquals(29, Node.JSDOC_INFO_PROP);
813:       assertEquals(37, Node.OPT_ARG_NAME);
814:       assertEquals(43, Node.IS_CONSTANT_NAME);
815:       assertEquals(56, Node.CHANGE_TIME);
816:       assertEquals(51, Node.STATIC_SOURCE_FILE);
817:       assertEquals(36, Node.QUOTED_PROP);
818:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
819:       assertEquals(46, Node.IS_NAMESPACE);
820:       assertEquals(49, Node.DIRECT_EVAL);
821:       assertEquals(1, Node.DECR_FLAG);
822:       assertEquals(4095, Node.COLUMN_MASK);
823:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
824:       assertEquals(32, Node.INCRDECR_PROP);
825:       assertEquals(12, Node.COLUMN_BITS);
826:       assertFalse(node0.isHook());
827:       assertFalse(node0.isInc());
828:       assertFalse(node0.isSwitch());
829:       assertFalse(node0.isString());
830:       assertEquals((-1), node0.getCharno());
831:       assertFalse(node0.isIn());
832:       assertFalse(node0.isAnd());
833:       assertFalse(node0.isThrow());
834:       assertFalse(node0.isFalse());
835:       assertFalse(node0.isExprResult());
836:       assertFalse(node0.isCast());
837:       assertFalse(node0.isDefaultCase());
838:       assertFalse(node0.isVoid());
839:       assertFalse(node0.isEmpty());
840:       assertFalse(node0.isTrue());
841:       assertFalse(node0.isDebugger());
842:       assertEquals((-1), node0.getSourcePosition());
843:       assertFalse(node0.isOr());
844:       assertFalse(node0.isNot());
845:       assertFalse(node0.isObjectLit());
846:       assertFalse(node0.isReturn());
847:       assertTrue(node0.isNumber());
848:       assertFalse(node0.isGetProp());
849:       assertFalse(node0.isDelProp());
850:       assertFalse(node0.isWhile());
851:       assertFalse(node0.isBreak());
852:       assertFalse(node0.hasChildren());
853:       assertFalse(node0.isGetElem());
854:       assertFalse(node0.isComma());
855:       assertFalse(node0.isDec());
856:       assertFalse(node0.isAssign());
857:       assertFalse(node0.isTypeOf());
858:       assertFalse(node0.isBlock());
859:       assertFalse(node0.isAdd());
860:       assertFalse(node0.isVar());
861:       assertFalse(node0.isCall());
862:       assertFalse(node0.isName());
863:       assertFalse(node0.isNew());
864:       assertFalse(node0.isStringKey());
865:       assertFalse(node0.isNull());
866:       assertFalse(node0.isLabel());
867:       assertFalse(node0.isAssignAdd());
868:       assertFalse(node0.isSetterDef());
869:       assertFalse(node0.isParamList());
870:       assertFalse(node0.isDo());
871:       assertFalse(node0.isFunction());
872:       assertFalse(node0.isContinue());
873:       assertEquals(0, node0.getChildCount());
874:       assertFalse(node0.isArrayLit());
875:       assertFalse(node0.hasOneChild());
876:       assertFalse(node0.isTry());
877:       assertFalse(node0.isLabelName());
878:       assertFalse(node0.isIf());
879:       assertFalse(node0.isScript());
880:       assertFalse(node0.isNE());
881:       assertFalse(node0.isGetterDef());
882:       assertEquals((-1), node0.getLineno());
883:       assertFalse(node0.isInstanceOf());
884:       assertFalse(node0.isCase());
885:       assertFalse(node0.isWith());
886:       assertEquals(39, node0.getType());
887:       assertFalse(node0.isFor());
888:       assertFalse(node0.isThis());
889:       assertFalse(node0.isCatch());
890:       assertFalse(node0.hasMoreThanOneChild());
891:       assertFalse(node0.isRegExp());
892:       assertFalse(node1.isAssign());
893:       assertFalse(node1.isLabelName());
894:       assertFalse(node1.isGetElem());
895:       assertFalse(node1.isDec());
896:       assertEquals((-1), node1.getSourcePosition());
897:       assertFalse(node1.isCast());
898:       assertFalse(node1.isTypeOf());
899:       assertFalse(node1.isNumber());
900:       assertEquals((-1), node1.getLineno());
901:       assertFalse(node1.isOr());
902:       assertFalse(node1.isDo());
903:       assertFalse(node1.isContinue());
904:       assertFalse(node1.isAdd());
905:       assertFalse(node1.isNew());
906:       assertFalse(node1.isLabel());
907:       assertFalse(node1.isVar());
908:       assertFalse(node1.isAssignAdd());
909:       assertFalse(node1.isName());
910:       assertFalse(node1.isBreak());
911:       assertFalse(node1.isComma());
912:       assertFalse(node1.isCall());
913:       assertFalse(node1.isFalse());
914:       assertFalse(node1.isNull());
915:       assertEquals(87855567, node1.getType());
916:       assertFalse(node1.isAnd());
917:       assertFalse(node1.isNot());
918:       assertFalse(node1.isExprResult());
919:       assertFalse(node1.isObjectLit());
920:       assertFalse(node1.isString());
921:       assertFalse(node1.isReturn());
922:       assertFalse(node1.isGetProp());
923:       assertFalse(node1.isWhile());
924:       assertTrue(node1.hasOneChild());
925:       assertFalse(node1.isEmpty());
926:       assertFalse(node1.isDelProp());
927:       assertFalse(node1.isFor());
928:       assertFalse(node1.isGetterDef());
929:       assertTrue(node1.hasChildren());
930:       assertFalse(node1.isDebugger());
931:       assertFalse(node1.isArrayLit());
932:       assertFalse(node1.isNE());
933:       assertFalse(node1.isVoid());
934:       assertFalse(node1.isTrue());
935:       assertFalse(node1.isIf());
936:       assertFalse(node1.isInc());
937:       assertFalse(node1.isFunction());
938:       assertFalse(node1.isIn());
939:       assertFalse(node1.isThrow());
940:       assertFalse(node1.isDefaultCase());
941:       assertFalse(node1.isSetterDef());
942:       assertEquals((-1), node1.getCharno());
943:       assertFalse(node1.isSwitch());
944:       assertFalse(node1.isParamList());
945:       assertFalse(node1.isStringKey());
946:       assertFalse(node1.isWith());
947:       assertFalse(node1.isCase());
948:       assertFalse(node1.isCatch());
949:       assertFalse(node1.hasMoreThanOneChild());
950:       assertFalse(node1.isScript());
951:       assertFalse(node1.isRegExp());
952:       assertFalse(node1.isInstanceOf());
953:       assertFalse(node1.isTry());
954:       assertFalse(node1.isBlock());
955:       assertFalse(node1.isHook());
956:       assertEquals(1, node1.getChildCount());
957:       assertFalse(node1.isThis());
958:       assertNotSame(node1, node2);
959:       assertNotNull(node_FileLevelJsDocBuilder0);
960:       assertFalse(node0.equals((Object)node1));
961:       assertFalse(node0.equals((Object)node2));
962:       assertFalse(node1.equals((Object)node2));
963:       assertFalse(node1.equals((Object)node0));
964:       
965:       boolean boolean0 = node0.wasEmptyNode();
966:       assertEquals(53, Node.INPUT_ID);
967:       assertEquals(43, Node.IS_CONSTANT_NAME);
968:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
969:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
970:       assertEquals(29, Node.JSDOC_INFO_PROP);
971:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
972:       assertEquals(36, Node.QUOTED_PROP);
973:       assertEquals(55, Node.INFERRED_FUNCTION);
974:       assertEquals(39, Node.EMPTY_BLOCK);
975:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
976:       assertEquals(46, Node.IS_NAMESPACE);
977:       assertEquals(30, Node.VAR_ARGS_NAME);
978:       assertEquals(40, Node.ORIGINALNAME_PROP);
979:       assertEquals(47, Node.IS_DISPATCHER);
980:       assertEquals(2, Node.POST_FLAG);
981:       assertEquals(54, Node.SLASH_V);
982:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
983:       assertEquals(57, Node.REFLECTED_OBJECT);
984:       assertEquals(57, Node.LAST_PROP);
985:       assertEquals(1, Node.DECR_FLAG);
986:       assertEquals(50, Node.FREE_CALL);
987:       assertEquals(15, Node.NO_SIDE_EFFECTS);
988:       assertEquals(51, Node.STATIC_SOURCE_FILE);
989:       assertEquals(8, Node.FLAG_NO_THROWS);
990:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
991:       assertEquals(52, Node.LENGTH);
992:       assertEquals(48, Node.DIRECTIVES);
993:       assertEquals(37, Node.OPT_ARG_NAME);
994:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
995:       assertEquals(56, Node.CHANGE_TIME);
996:       assertEquals(12, Node.COLUMN_BITS);
997:       assertEquals(32, Node.INCRDECR_PROP);
998:       assertEquals(49, Node.DIRECT_EVAL);
999:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1000:       assertEquals(4095, Node.COLUMN_MASK);
1001:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1002:       assertFalse(node0.isHook());
1003:       assertFalse(node0.isInc());
1004:       assertFalse(node0.isSwitch());
1005:       assertFalse(node0.isString());
1006:       assertEquals((-1), node0.getCharno());
1007:       assertFalse(node0.isIn());
1008:       assertFalse(node0.isAnd());
1009:       assertFalse(node0.isThrow());
1010:       assertFalse(node0.isFalse());
1011:       assertFalse(node0.isExprResult());
1012:       assertFalse(node0.isCast());
1013:       assertFalse(node0.isDefaultCase());
1014:       assertFalse(node0.isVoid());
1015:       assertFalse(node0.isEmpty());
1016:       assertFalse(node0.isTrue());
1017:       assertFalse(node0.isDebugger());
1018:       assertEquals((-1), node0.getSourcePosition());
1019:       assertFalse(node0.isOr());
1020:       assertFalse(node0.isNot());
1021:       assertFalse(node0.isObjectLit());
1022:       assertFalse(node0.isReturn());
1023:       assertTrue(node0.isNumber());
1024:       assertFalse(node0.isGetProp());
1025:       assertFalse(node0.isDelProp());
1026:       assertFalse(node0.isWhile());
1027:       assertFalse(node0.isBreak());
1028:       assertFalse(node0.hasChildren());
1029:       assertFalse(node0.isGetElem());
1030:       assertFalse(node0.isComma());
1031:       assertFalse(node0.isDec());
1032:       assertFalse(node0.isAssign());
1033:       assertFalse(node0.isTypeOf());
1034:       assertFalse(node0.isBlock());
1035:       assertFalse(node0.isAdd());
1036:       assertFalse(node0.isVar());
1037:       assertFalse(node0.isCall());
1038:       assertFalse(node0.isName());
1039:       assertFalse(node0.isNew());
1040:       assertFalse(node0.isStringKey());
1041:       assertFalse(node0.isNull());
1042:       assertFalse(node0.isLabel());
1043:       assertFalse(node0.isAssignAdd());
1044:       assertFalse(node0.isSetterDef());
1045:       assertFalse(node0.isParamList());
1046:       assertFalse(node0.isDo());
1047:       assertFalse(node0.isFunction());
1048:       assertFalse(node0.isContinue());
1049:       assertEquals(0, node0.getChildCount());
1050:       assertFalse(node0.isArrayLit());
1051:       assertFalse(node0.hasOneChild());
1052:       assertFalse(node0.isTry());
1053:       assertFalse(node0.isLabelName());
1054:       assertFalse(node0.isIf());
1055:       assertFalse(node0.isScript());
1056:       assertFalse(node0.isNE());
1057:       assertFalse(node0.isGetterDef());
1058:       assertEquals((-1), node0.getLineno());
1059:       assertFalse(node0.isInstanceOf());
1060:       assertFalse(node0.isCase());
1061:       assertFalse(node0.isWith());
1062:       assertEquals(39, node0.getType());
1063:       assertFalse(node0.isFor());
1064:       assertFalse(node0.isThis());
1065:       assertFalse(node0.isCatch());
1066:       assertFalse(node0.hasMoreThanOneChild());
1067:       assertFalse(node0.isRegExp());
1068:       assertFalse(node0.equals((Object)node1));
1069:       assertFalse(node0.equals((Object)node2));
1070:       assertFalse(boolean0);
1071:       
1072:       // Undeclared exception!
1073:       try { 
1074:         node2.setString("o*pBovQ>r~,");
1075:         fail("Expecting exception: IllegalStateException");
1076:       
1077:       } catch(IllegalStateException e) {
1078:          //
1079:          // 2207
1080:          //
1081:          verifyException("com.google.javascript.rhino.Token", e);
1082:       }
1083:   }
1084: }
RegularFileObject[/tmp/EvoSuite_166_1628157531598/com/google/javascript/rhino/Node_166_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_166_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_166_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_166_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:51.769 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertNotNull(iterable0);

Node node1 = new Node(87855567, node0, node0, node0, node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertEquals(87855567, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasChildren());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = new Node(2207, node1, node1, 4, 93);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertEquals(87855567, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasChildren());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isName());
assertEquals(2207, node2.getType());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isWith());
assertFalse(node2.isDefaultCase());
assertEquals(93, node2.getCharno());
assertFalse(node2.isTrue());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertEquals(16477, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isComma());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThis());
assertTrue(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertTrue(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isFunction());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertEquals(4, node2.getLineno());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertEquals(87855567, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasChildren());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertNotSame(node1, node2);
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));

boolean boolean0 = node0.wasEmptyNode();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(boolean0);

node2.setString("o*pBovQ>r~,");

[MASTER] 09:58:54.040 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_179_1628157533665/com/google/javascript/rhino/Node_179_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_179_1628157533665/com/google/javascript/rhino/Node_179_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:54.040 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:54.040 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:54.040 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 161
[MASTER] 09:58:54.042 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_179_1628157533665/com/google/javascript/rhino/Node_179_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:53 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_179_tmp__ESTest extends Node_179_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(1.0);
21:       assertEquals(56, Node.CHANGE_TIME);
22:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
23:       assertEquals(37, Node.OPT_ARG_NAME);
24:       assertEquals(29, Node.JSDOC_INFO_PROP);
25:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
26:       assertEquals(46, Node.IS_NAMESPACE);
27:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(36, Node.QUOTED_PROP);
30:       assertEquals(49, Node.DIRECT_EVAL);
31:       assertEquals(1, Node.DECR_FLAG);
32:       assertEquals(32, Node.INCRDECR_PROP);
33:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
34:       assertEquals(4095, Node.COLUMN_MASK);
35:       assertEquals(12, Node.COLUMN_BITS);
36:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
37:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
38:       assertEquals(50, Node.FREE_CALL);
39:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
40:       assertEquals(8, Node.FLAG_NO_THROWS);
41:       assertEquals(40, Node.ORIGINALNAME_PROP);
42:       assertEquals(48, Node.DIRECTIVES);
43:       assertEquals(39, Node.EMPTY_BLOCK);
44:       assertEquals(52, Node.LENGTH);
45:       assertEquals(54, Node.SLASH_V);
46:       assertEquals(57, Node.REFLECTED_OBJECT);
47:       assertEquals(30, Node.VAR_ARGS_NAME);
48:       assertEquals(43, Node.IS_CONSTANT_NAME);
49:       assertEquals(57, Node.LAST_PROP);
50:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
51:       assertEquals(55, Node.INFERRED_FUNCTION);
52:       assertEquals(53, Node.INPUT_ID);
53:       assertEquals(15, Node.NO_SIDE_EFFECTS);
54:       assertEquals(2, Node.POST_FLAG);
55:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
56:       assertEquals(47, Node.IS_DISPATCHER);
57:       assertFalse(node0.isBreak());
58:       assertFalse(node0.isComma());
59:       assertFalse(node0.isFalse());
60:       assertFalse(node0.isGetProp());
61:       assertFalse(node0.isObjectLit());
62:       assertFalse(node0.isAnd());
63:       assertEquals((-1), node0.getCharno());
64:       assertFalse(node0.isWith());
65:       assertFalse(node0.isNot());
66:       assertFalse(node0.isCase());
67:       assertFalse(node0.isExprResult());
68:       assertFalse(node0.isString());
69:       assertFalse(node0.isScript());
70:       assertFalse(node0.isInstanceOf());
71:       assertFalse(node0.isHook());
72:       assertFalse(node0.hasOneChild());
73:       assertTrue(node0.isNumber());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isDec());
76:       assertFalse(node0.isTypeOf());
77:       assertFalse(node0.hasChildren());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.isDelProp());
80:       assertFalse(node0.isLabelName());
81:       assertFalse(node0.isGetterDef());
82:       assertFalse(node0.isGetElem());
83:       assertFalse(node0.isEmpty());
84:       assertFalse(node0.isArrayLit());
85:       assertFalse(node0.isOr());
86:       assertFalse(node0.isTrue());
87:       assertFalse(node0.isDefaultCase());
88:       assertFalse(node0.isSwitch());
89:       assertFalse(node0.isDo());
90:       assertFalse(node0.isNew());
91:       assertFalse(node0.isAdd());
92:       assertEquals(0, node0.getChildCount());
93:       assertFalse(node0.isLabel());
94:       assertFalse(node0.isAssignAdd());
95:       assertFalse(node0.isVar());
96:       assertFalse(node0.isNull());
97:       assertFalse(node0.isCall());
98:       assertFalse(node0.isSetterDef());
99:       assertFalse(node0.isName());
100:       assertFalse(node0.isStringKey());
101:       assertFalse(node0.isParamList());
102:       assertFalse(node0.isVoid());
103:       assertFalse(node0.isRegExp());
104:       assertFalse(node0.isCatch());
105:       assertFalse(node0.hasMoreThanOneChild());
106:       assertFalse(node0.isTry());
107:       assertFalse(node0.isBlock());
108:       assertEquals(39, node0.getType());
109:       assertFalse(node0.isWhile());
110:       assertFalse(node0.isReturn());
111:       assertFalse(node0.isFor());
112:       assertEquals((-1), node0.getSourcePosition());
113:       assertFalse(node0.isIf());
114:       assertFalse(node0.isCast());
115:       assertFalse(node0.isIn());
116:       assertEquals((-1), node0.getLineno());
117:       assertFalse(node0.isDebugger());
118:       assertFalse(node0.isNE());
119:       assertFalse(node0.isFunction());
120:       assertFalse(node0.isContinue());
121:       assertFalse(node0.isInc());
122:       assertFalse(node0.isThrow());
123:       
124:       Iterable<Node> iterable0 = node0.children();
125:       assertEquals(56, Node.CHANGE_TIME);
126:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
127:       assertEquals(37, Node.OPT_ARG_NAME);
128:       assertEquals(29, Node.JSDOC_INFO_PROP);
129:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
130:       assertEquals(46, Node.IS_NAMESPACE);
131:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
132:       assertEquals(51, Node.STATIC_SOURCE_FILE);
133:       assertEquals(36, Node.QUOTED_PROP);
134:       assertEquals(49, Node.DIRECT_EVAL);
135:       assertEquals(1, Node.DECR_FLAG);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
138:       assertEquals(4095, Node.COLUMN_MASK);
139:       assertEquals(12, Node.COLUMN_BITS);
140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
142:       assertEquals(50, Node.FREE_CALL);
143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
144:       assertEquals(8, Node.FLAG_NO_THROWS);
145:       assertEquals(40, Node.ORIGINALNAME_PROP);
146:       assertEquals(48, Node.DIRECTIVES);
147:       assertEquals(39, Node.EMPTY_BLOCK);
148:       assertEquals(52, Node.LENGTH);
149:       assertEquals(54, Node.SLASH_V);
150:       assertEquals(57, Node.REFLECTED_OBJECT);
151:       assertEquals(30, Node.VAR_ARGS_NAME);
152:       assertEquals(43, Node.IS_CONSTANT_NAME);
153:       assertEquals(57, Node.LAST_PROP);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(55, Node.INFERRED_FUNCTION);
156:       assertEquals(53, Node.INPUT_ID);
157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
158:       assertEquals(2, Node.POST_FLAG);
159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
160:       assertEquals(47, Node.IS_DISPATCHER);
161:       assertFalse(iterable0.contains(node0));
162:       assertFalse(node0.isBreak());
163:       assertFalse(node0.isComma());
164:       assertFalse(node0.isFalse());
165:       assertFalse(node0.isGetProp());
166:       assertFalse(node0.isObjectLit());
167:       assertFalse(node0.isAnd());
168:       assertEquals((-1), node0.getCharno());
169:       assertFalse(node0.isWith());
170:       assertFalse(node0.isNot());
171:       assertFalse(node0.isCase());
172:       assertFalse(node0.isExprResult());
173:       assertFalse(node0.isString());
174:       assertFalse(node0.isScript());
175:       assertFalse(node0.isInstanceOf());
176:       assertFalse(node0.isHook());
177:       assertFalse(node0.hasOneChild());
178:       assertTrue(node0.isNumber());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isDec());
181:       assertFalse(node0.isTypeOf());
182:       assertFalse(node0.hasChildren());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.isDelProp());
185:       assertFalse(node0.isLabelName());
186:       assertFalse(node0.isGetterDef());
187:       assertFalse(node0.isGetElem());
188:       assertFalse(node0.isEmpty());
189:       assertFalse(node0.isArrayLit());
190:       assertFalse(node0.isOr());
191:       assertFalse(node0.isTrue());
192:       assertFalse(node0.isDefaultCase());
193:       assertFalse(node0.isSwitch());
194:       assertFalse(node0.isDo());
195:       assertFalse(node0.isNew());
196:       assertFalse(node0.isAdd());
197:       assertEquals(0, node0.getChildCount());
198:       assertFalse(node0.isLabel());
199:       assertFalse(node0.isAssignAdd());
200:       assertFalse(node0.isVar());
201:       assertFalse(node0.isNull());
202:       assertFalse(node0.isCall());
203:       assertFalse(node0.isSetterDef());
204:       assertFalse(node0.isName());
205:       assertFalse(node0.isStringKey());
206:       assertFalse(node0.isParamList());
207:       assertFalse(node0.isVoid());
208:       assertFalse(node0.isRegExp());
209:       assertFalse(node0.isCatch());
210:       assertFalse(node0.hasMoreThanOneChild());
211:       assertFalse(node0.isTry());
212:       assertFalse(node0.isBlock());
213:       assertEquals(39, node0.getType());
214:       assertFalse(node0.isWhile());
215:       assertFalse(node0.isReturn());
216:       assertFalse(node0.isFor());
217:       assertEquals((-1), node0.getSourcePosition());
218:       assertFalse(node0.isIf());
219:       assertFalse(node0.isCast());
220:       assertFalse(node0.isIn());
221:       assertEquals((-1), node0.getLineno());
222:       assertFalse(node0.isDebugger());
223:       assertFalse(node0.isNE());
224:       assertFalse(node0.isFunction());
225:       assertFalse(node0.isContinue());
226:       assertFalse(node0.isInc());
227:       assertFalse(node0.isThrow());
228:       
229:       node0.isDec();
230:       assertEquals(56, Node.CHANGE_TIME);
231:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
232:       assertEquals(37, Node.OPT_ARG_NAME);
233:       assertEquals(29, Node.JSDOC_INFO_PROP);
234:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
235:       assertEquals(46, Node.IS_NAMESPACE);
236:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
237:       assertEquals(51, Node.STATIC_SOURCE_FILE);
238:       assertEquals(36, Node.QUOTED_PROP);
239:       assertEquals(49, Node.DIRECT_EVAL);
240:       assertEquals(1, Node.DECR_FLAG);
241:       assertEquals(32, Node.INCRDECR_PROP);
242:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
243:       assertEquals(4095, Node.COLUMN_MASK);
244:       assertEquals(12, Node.COLUMN_BITS);
245:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
246:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
247:       assertEquals(50, Node.FREE_CALL);
248:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
249:       assertEquals(8, Node.FLAG_NO_THROWS);
250:       assertEquals(40, Node.ORIGINALNAME_PROP);
251:       assertEquals(48, Node.DIRECTIVES);
252:       assertEquals(39, Node.EMPTY_BLOCK);
253:       assertEquals(52, Node.LENGTH);
254:       assertEquals(54, Node.SLASH_V);
255:       assertEquals(57, Node.REFLECTED_OBJECT);
256:       assertEquals(30, Node.VAR_ARGS_NAME);
257:       assertEquals(43, Node.IS_CONSTANT_NAME);
258:       assertEquals(57, Node.LAST_PROP);
259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
260:       assertEquals(55, Node.INFERRED_FUNCTION);
261:       assertEquals(53, Node.INPUT_ID);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(2, Node.POST_FLAG);
264:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
265:       assertEquals(47, Node.IS_DISPATCHER);
266:       assertFalse(node0.isBreak());
267:       assertFalse(node0.isComma());
268:       assertFalse(node0.isFalse());
269:       assertFalse(node0.isGetProp());
270:       assertFalse(node0.isObjectLit());
271:       assertFalse(node0.isAnd());
272:       assertEquals((-1), node0.getCharno());
273:       assertFalse(node0.isWith());
274:       assertFalse(node0.isNot());
275:       assertFalse(node0.isCase());
276:       assertFalse(node0.isExprResult());
277:       assertFalse(node0.isString());
278:       assertFalse(node0.isScript());
279:       assertFalse(node0.isInstanceOf());
280:       assertFalse(node0.isHook());
281:       assertFalse(node0.hasOneChild());
282:       assertTrue(node0.isNumber());
283:       assertFalse(node0.isThis());
284:       assertFalse(node0.isDec());
285:       assertFalse(node0.isTypeOf());
286:       assertFalse(node0.hasChildren());
287:       assertFalse(node0.isAssign());
288:       assertFalse(node0.isDelProp());
289:       assertFalse(node0.isLabelName());
290:       assertFalse(node0.isGetterDef());
291:       assertFalse(node0.isGetElem());
292:       assertFalse(node0.isEmpty());
293:       assertFalse(node0.isArrayLit());
294:       assertFalse(node0.isOr());
295:       assertFalse(node0.isTrue());
296:       assertFalse(node0.isDefaultCase());
297:       assertFalse(node0.isSwitch());
298:       assertFalse(node0.isDo());
299:       assertFalse(node0.isNew());
300:       assertFalse(node0.isAdd());
301:       assertEquals(0, node0.getChildCount());
302:       assertFalse(node0.isLabel());
303:       assertFalse(node0.isAssignAdd());
304:       assertFalse(node0.isVar());
305:       assertFalse(node0.isNull());
306:       assertFalse(node0.isCall());
307:       assertFalse(node0.isSetterDef());
308:       assertFalse(node0.isName());
309:       assertFalse(node0.isStringKey());
310:       assertFalse(node0.isParamList());
311:       assertFalse(node0.isVoid());
312:       assertFalse(node0.isRegExp());
313:       assertFalse(node0.isCatch());
314:       assertFalse(node0.hasMoreThanOneChild());
315:       assertFalse(node0.isTry());
316:       assertFalse(node0.isBlock());
317:       assertEquals(39, node0.getType());
318:       assertFalse(node0.isWhile());
319:       assertFalse(node0.isReturn());
320:       assertFalse(node0.isFor());
321:       assertEquals((-1), node0.getSourcePosition());
322:       assertFalse(node0.isIf());
323:       assertFalse(node0.isCast());
324:       assertFalse(node0.isIn());
325:       assertEquals((-1), node0.getLineno());
326:       assertFalse(node0.isDebugger());
327:       assertFalse(node0.isNE());
328:       assertFalse(node0.isFunction());
329:       assertFalse(node0.isContinue());
330:       assertFalse(node0.isInc());
331:       assertFalse(node0.isThrow());
332:       
333:       Node node1 = new Node(15, 0, 48);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(39, Node.EMPTY_BLOCK);
336:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
337:       assertEquals(48, Node.DIRECTIVES);
338:       assertEquals(55, Node.INFERRED_FUNCTION);
339:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
340:       assertEquals(57, Node.REFLECTED_OBJECT);
341:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
342:       assertEquals(52, Node.LENGTH);
343:       assertEquals(50, Node.FREE_CALL);
344:       assertEquals(8, Node.FLAG_NO_THROWS);
345:       assertEquals(43, Node.IS_CONSTANT_NAME);
346:       assertEquals(15, Node.NO_SIDE_EFFECTS);
347:       assertEquals(54, Node.SLASH_V);
348:       assertEquals(53, Node.INPUT_ID);
349:       assertEquals(57, Node.LAST_PROP);
350:       assertEquals(40, Node.ORIGINALNAME_PROP);
351:       assertEquals(30, Node.VAR_ARGS_NAME);
352:       assertEquals(2, Node.POST_FLAG);
353:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
354:       assertEquals(37, Node.OPT_ARG_NAME);
355:       assertEquals(56, Node.CHANGE_TIME);
356:       assertEquals(47, Node.IS_DISPATCHER);
357:       assertEquals(32, Node.INCRDECR_PROP);
358:       assertEquals(51, Node.STATIC_SOURCE_FILE);
359:       assertEquals(46, Node.IS_NAMESPACE);
360:       assertEquals(29, Node.JSDOC_INFO_PROP);
361:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
362:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
363:       assertEquals(36, Node.QUOTED_PROP);
364:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
365:       assertEquals(49, Node.DIRECT_EVAL);
366:       assertEquals(1, Node.DECR_FLAG);
367:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
368:       assertEquals(4095, Node.COLUMN_MASK);
369:       assertEquals(12, Node.COLUMN_BITS);
370:       assertEquals(48, node1.getCharno());
371:       assertFalse(node1.isNE());
372:       assertFalse(node1.isIf());
373:       assertFalse(node1.isDelProp());
374:       assertFalse(node1.isEmpty());
375:       assertFalse(node1.isString());
376:       assertFalse(node1.isIn());
377:       assertFalse(node1.isGetterDef());
378:       assertFalse(node1.isDebugger());
379:       assertFalse(node1.isInc());
380:       assertFalse(node1.isFunction());
381:       assertFalse(node1.isSwitch());
382:       assertFalse(node1.isDefaultCase());
383:       assertFalse(node1.isArrayLit());
384:       assertFalse(node1.isThrow());
385:       assertFalse(node1.isFalse());
386:       assertEquals(0, node1.getChildCount());
387:       assertFalse(node1.isGetProp());
388:       assertFalse(node1.isNull());
389:       assertFalse(node1.isBreak());
390:       assertEquals(0, node1.getLineno());
391:       assertFalse(node1.isAnd());
392:       assertFalse(node1.isObjectLit());
393:       assertFalse(node1.isName());
394:       assertFalse(node1.isNot());
395:       assertFalse(node1.isExprResult());
396:       assertFalse(node1.isVoid());
397:       assertFalse(node1.isTrue());
398:       assertFalse(node1.isGetElem());
399:       assertFalse(node1.isCall());
400:       assertFalse(node1.isWhile());
401:       assertFalse(node1.hasChildren());
402:       assertFalse(node1.isReturn());
403:       assertFalse(node1.isAssign());
404:       assertFalse(node1.isTypeOf());
405:       assertFalse(node1.isComma());
406:       assertFalse(node1.isDec());
407:       assertFalse(node1.isAssignAdd());
408:       assertFalse(node1.isLabelName());
409:       assertFalse(node1.isNumber());
410:       assertFalse(node1.isOr());
411:       assertFalse(node1.isAdd());
412:       assertFalse(node1.isDo());
413:       assertFalse(node1.isNew());
414:       assertFalse(node1.isContinue());
415:       assertFalse(node1.isCast());
416:       assertFalse(node1.isVar());
417:       assertEquals(48, node1.getSourcePosition());
418:       assertFalse(node1.isLabel());
419:       assertFalse(node1.isThis());
420:       assertFalse(node1.isSetterDef());
421:       assertFalse(node1.isParamList());
422:       assertEquals(15, node1.getType());
423:       assertFalse(node1.isStringKey());
424:       assertFalse(node1.isBlock());
425:       assertFalse(node1.isScript());
426:       assertFalse(node1.isTry());
427:       assertFalse(node1.isCase());
428:       assertFalse(node1.hasOneChild());
429:       assertFalse(node1.hasMoreThanOneChild());
430:       assertFalse(node1.isFor());
431:       assertFalse(node1.isInstanceOf());
432:       assertFalse(node1.isCatch());
433:       assertFalse(node1.isWith());
434:       assertFalse(node1.isHook());
435:       assertFalse(node1.isRegExp());
436:       
437:       Node node2 = node0.clonePropsFrom(node1);
438:       assertEquals(56, Node.CHANGE_TIME);
439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
440:       assertEquals(37, Node.OPT_ARG_NAME);
441:       assertEquals(29, Node.JSDOC_INFO_PROP);
442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
443:       assertEquals(46, Node.IS_NAMESPACE);
444:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
445:       assertEquals(51, Node.STATIC_SOURCE_FILE);
446:       assertEquals(36, Node.QUOTED_PROP);
447:       assertEquals(49, Node.DIRECT_EVAL);
448:       assertEquals(1, Node.DECR_FLAG);
449:       assertEquals(32, Node.INCRDECR_PROP);
450:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
451:       assertEquals(4095, Node.COLUMN_MASK);
452:       assertEquals(12, Node.COLUMN_BITS);
453:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
454:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
455:       assertEquals(50, Node.FREE_CALL);
456:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
457:       assertEquals(8, Node.FLAG_NO_THROWS);
458:       assertEquals(40, Node.ORIGINALNAME_PROP);
459:       assertEquals(48, Node.DIRECTIVES);
460:       assertEquals(39, Node.EMPTY_BLOCK);
461:       assertEquals(52, Node.LENGTH);
462:       assertEquals(54, Node.SLASH_V);
463:       assertEquals(57, Node.REFLECTED_OBJECT);
464:       assertEquals(30, Node.VAR_ARGS_NAME);
465:       assertEquals(43, Node.IS_CONSTANT_NAME);
466:       assertEquals(57, Node.LAST_PROP);
467:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
468:       assertEquals(55, Node.INFERRED_FUNCTION);
469:       assertEquals(53, Node.INPUT_ID);
470:       assertEquals(15, Node.NO_SIDE_EFFECTS);
471:       assertEquals(2, Node.POST_FLAG);
472:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
473:       assertEquals(47, Node.IS_DISPATCHER);
474:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
475:       assertEquals(39, Node.EMPTY_BLOCK);
476:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
477:       assertEquals(48, Node.DIRECTIVES);
478:       assertEquals(55, Node.INFERRED_FUNCTION);
479:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
480:       assertEquals(57, Node.REFLECTED_OBJECT);
481:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
482:       assertEquals(52, Node.LENGTH);
483:       assertEquals(50, Node.FREE_CALL);
484:       assertEquals(8, Node.FLAG_NO_THROWS);
485:       assertEquals(43, Node.IS_CONSTANT_NAME);
486:       assertEquals(15, Node.NO_SIDE_EFFECTS);
487:       assertEquals(54, Node.SLASH_V);
488:       assertEquals(53, Node.INPUT_ID);
489:       assertEquals(57, Node.LAST_PROP);
490:       assertEquals(40, Node.ORIGINALNAME_PROP);
491:       assertEquals(30, Node.VAR_ARGS_NAME);
492:       assertEquals(2, Node.POST_FLAG);
493:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
494:       assertEquals(37, Node.OPT_ARG_NAME);
495:       assertEquals(56, Node.CHANGE_TIME);
496:       assertEquals(47, Node.IS_DISPATCHER);
497:       assertEquals(32, Node.INCRDECR_PROP);
498:       assertEquals(51, Node.STATIC_SOURCE_FILE);
499:       assertEquals(46, Node.IS_NAMESPACE);
500:       assertEquals(29, Node.JSDOC_INFO_PROP);
501:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
502:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
503:       assertEquals(36, Node.QUOTED_PROP);
504:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
505:       assertEquals(49, Node.DIRECT_EVAL);
506:       assertEquals(1, Node.DECR_FLAG);
507:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
508:       assertEquals(4095, Node.COLUMN_MASK);
509:       assertEquals(12, Node.COLUMN_BITS);
510:       assertEquals(39, Node.EMPTY_BLOCK);
511:       assertEquals(4095, Node.COLUMN_MASK);
512:       assertEquals(55, Node.INFERRED_FUNCTION);
513:       assertEquals(8, Node.FLAG_NO_THROWS);
514:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
515:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
516:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
517:       assertEquals(54, Node.SLASH_V);
518:       assertEquals(50, Node.FREE_CALL);
519:       assertEquals(40, Node.ORIGINALNAME_PROP);
520:       assertEquals(43, Node.IS_CONSTANT_NAME);
521:       assertEquals(37, Node.OPT_ARG_NAME);
522:       assertEquals(46, Node.IS_NAMESPACE);
523:       assertEquals(2, Node.POST_FLAG);
524:       assertEquals(51, Node.STATIC_SOURCE_FILE);
525:       assertEquals(29, Node.JSDOC_INFO_PROP);
526:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
527:       assertEquals(30, Node.VAR_ARGS_NAME);
528:       assertEquals(1, Node.DECR_FLAG);
529:       assertEquals(15, Node.NO_SIDE_EFFECTS);
530:       assertEquals(47, Node.IS_DISPATCHER);
531:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
532:       assertEquals(12, Node.COLUMN_BITS);
533:       assertEquals(32, Node.INCRDECR_PROP);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(53, Node.INPUT_ID);
536:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
537:       assertEquals(57, Node.REFLECTED_OBJECT);
538:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
539:       assertEquals(36, Node.QUOTED_PROP);
540:       assertEquals(52, Node.LENGTH);
541:       assertEquals(49, Node.DIRECT_EVAL);
542:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
543:       assertEquals(56, Node.CHANGE_TIME);
544:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
545:       assertEquals(48, Node.DIRECTIVES);
546:       assertFalse(node0.isBreak());
547:       assertFalse(node0.isComma());
548:       assertFalse(node0.isFalse());
549:       assertFalse(node0.isGetProp());
550:       assertFalse(node0.isObjectLit());
551:       assertFalse(node0.isAnd());
552:       assertEquals((-1), node0.getCharno());
553:       assertFalse(node0.isWith());
554:       assertFalse(node0.isNot());
555:       assertFalse(node0.isCase());
556:       assertFalse(node0.isExprResult());
557:       assertFalse(node0.isString());
558:       assertFalse(node0.isScript());
559:       assertFalse(node0.isInstanceOf());
560:       assertFalse(node0.isHook());
561:       assertFalse(node0.hasOneChild());
562:       assertTrue(node0.isNumber());
563:       assertFalse(node0.isThis());
564:       assertFalse(node0.isDec());
565:       assertFalse(node0.isTypeOf());
566:       assertFalse(node0.hasChildren());
567:       assertFalse(node0.isAssign());
568:       assertFalse(node0.isDelProp());
569:       assertFalse(node0.isLabelName());
570:       assertFalse(node0.isGetterDef());
571:       assertFalse(node0.isGetElem());
572:       assertFalse(node0.isEmpty());
573:       assertFalse(node0.isArrayLit());
574:       assertFalse(node0.isOr());
575:       assertFalse(node0.isTrue());
576:       assertFalse(node0.isDefaultCase());
577:       assertFalse(node0.isSwitch());
578:       assertFalse(node0.isDo());
579:       assertFalse(node0.isNew());
580:       assertFalse(node0.isAdd());
581:       assertEquals(0, node0.getChildCount());
582:       assertFalse(node0.isLabel());
583:       assertFalse(node0.isAssignAdd());
584:       assertFalse(node0.isVar());
585:       assertFalse(node0.isNull());
586:       assertFalse(node0.isCall());
587:       assertFalse(node0.isSetterDef());
588:       assertFalse(node0.isName());
589:       assertFalse(node0.isStringKey());
590:       assertFalse(node0.isParamList());
591:       assertFalse(node0.isVoid());
592:       assertFalse(node0.isRegExp());
593:       assertFalse(node0.isCatch());
594:       assertFalse(node0.hasMoreThanOneChild());
595:       assertFalse(node0.isTry());
596:       assertFalse(node0.isBlock());
597:       assertEquals(39, node0.getType());
598:       assertFalse(node0.isWhile());
599:       assertFalse(node0.isReturn());
600:       assertFalse(node0.isFor());
601:       assertEquals((-1), node0.getSourcePosition());
602:       assertFalse(node0.isIf());
603:       assertFalse(node0.isCast());
604:       assertFalse(node0.isIn());
605:       assertEquals((-1), node0.getLineno());
606:       assertFalse(node0.isDebugger());
607:       assertFalse(node0.isNE());
608:       assertFalse(node0.isFunction());
609:       assertFalse(node0.isContinue());
610:       assertFalse(node0.isInc());
611:       assertFalse(node0.isThrow());
612:       assertEquals(48, node1.getCharno());
613:       assertFalse(node1.isNE());
614:       assertFalse(node1.isIf());
615:       assertFalse(node1.isDelProp());
616:       assertFalse(node1.isEmpty());
617:       assertFalse(node1.isString());
618:       assertFalse(node1.isIn());
619:       assertFalse(node1.isGetterDef());
620:       assertFalse(node1.isDebugger());
621:       assertFalse(node1.isInc());
622:       assertFalse(node1.isFunction());
623:       assertFalse(node1.isSwitch());
624:       assertFalse(node1.isDefaultCase());
625:       assertFalse(node1.isArrayLit());
626:       assertFalse(node1.isThrow());
627:       assertFalse(node1.isFalse());
628:       assertEquals(0, node1.getChildCount());
629:       assertFalse(node1.isGetProp());
630:       assertFalse(node1.isNull());
631:       assertFalse(node1.isBreak());
632:       assertEquals(0, node1.getLineno());
633:       assertFalse(node1.isAnd());
634:       assertFalse(node1.isObjectLit());
635:       assertFalse(node1.isName());
636:       assertFalse(node1.isNot());
637:       assertFalse(node1.isExprResult());
638:       assertFalse(node1.isVoid());
639:       assertFalse(node1.isTrue());
640:       assertFalse(node1.isGetElem());
641:       assertFalse(node1.isCall());
642:       assertFalse(node1.isWhile());
643:       assertFalse(node1.hasChildren());
644:       assertFalse(node1.isReturn());
645:       assertFalse(node1.isAssign());
646:       assertFalse(node1.isTypeOf());
647:       assertFalse(node1.isComma());
648:       assertFalse(node1.isDec());
649:       assertFalse(node1.isAssignAdd());
650:       assertFalse(node1.isLabelName());
651:       assertFalse(node1.isNumber());
652:       assertFalse(node1.isOr());
653:       assertFalse(node1.isAdd());
654:       assertFalse(node1.isDo());
655:       assertFalse(node1.isNew());
656:       assertFalse(node1.isContinue());
657:       assertFalse(node1.isCast());
658:       assertFalse(node1.isVar());
659:       assertEquals(48, node1.getSourcePosition());
660:       assertFalse(node1.isLabel());
661:       assertFalse(node1.isThis());
662:       assertFalse(node1.isSetterDef());
663:       assertFalse(node1.isParamList());
664:       assertEquals(15, node1.getType());
665:       assertFalse(node1.isStringKey());
666:       assertFalse(node1.isBlock());
667:       assertFalse(node1.isScript());
668:       assertFalse(node1.isTry());
669:       assertFalse(node1.isCase());
670:       assertFalse(node1.hasOneChild());
671:       assertFalse(node1.hasMoreThanOneChild());
672:       assertFalse(node1.isFor());
673:       assertFalse(node1.isInstanceOf());
674:       assertFalse(node1.isCatch());
675:       assertFalse(node1.isWith());
676:       assertFalse(node1.isHook());
677:       assertFalse(node1.isRegExp());
678:       assertFalse(node2.isIn());
679:       assertFalse(node2.isString());
680:       assertFalse(node2.isGetterDef());
681:       assertFalse(node2.isFor());
682:       assertFalse(node2.isEmpty());
683:       assertFalse(node2.isInc());
684:       assertFalse(node2.isCase());
685:       assertTrue(node2.isNumber());
686:       assertFalse(node2.isDebugger());
687:       assertFalse(node2.isFunction());
688:       assertEquals((-1), node2.getCharno());
689:       assertFalse(node2.isFalse());
690:       assertFalse(node2.isSwitch());
691:       assertFalse(node2.isArrayLit());
692:       assertFalse(node2.isInstanceOf());
693:       assertFalse(node2.isCatch());
694:       assertFalse(node2.isThis());
695:       assertFalse(node2.isScript());
696:       assertFalse(node2.isThrow());
697:       assertFalse(node2.isSetterDef());
698:       assertFalse(node2.isTry());
699:       assertFalse(node2.isHook());
700:       assertFalse(node2.isBlock());
701:       assertFalse(node2.isRegExp());
702:       assertFalse(node2.isWith());
703:       assertFalse(node2.isIf());
704:       assertFalse(node2.isNE());
705:       assertEquals((-1), node2.getLineno());
706:       assertFalse(node2.isReturn());
707:       assertFalse(node2.isLabel());
708:       assertFalse(node2.isAssignAdd());
709:       assertFalse(node2.isContinue());
710:       assertFalse(node2.hasMoreThanOneChild());
711:       assertEquals((-1), node2.getSourcePosition());
712:       assertFalse(node2.isTypeOf());
713:       assertFalse(node2.isOr());
714:       assertFalse(node2.isDec());
715:       assertFalse(node2.isWhile());
716:       assertFalse(node2.hasChildren());
717:       assertEquals(39, node2.getType());
718:       assertFalse(node2.isNew());
719:       assertFalse(node2.hasOneChild());
720:       assertFalse(node2.isDo());
721:       assertFalse(node2.isCast());
722:       assertFalse(node2.isVar());
723:       assertFalse(node2.isStringKey());
724:       assertFalse(node2.isAnd());
725:       assertFalse(node2.isParamList());
726:       assertFalse(node2.isLabelName());
727:       assertFalse(node2.isObjectLit());
728:       assertEquals(0, node2.getChildCount());
729:       assertFalse(node2.isComma());
730:       assertFalse(node2.isNot());
731:       assertFalse(node2.isDefaultCase());
732:       assertFalse(node2.isGetProp());
733:       assertFalse(node2.isAdd());
734:       assertFalse(node2.isTrue());
735:       assertFalse(node2.isAssign());
736:       assertFalse(node2.isDelProp());
737:       assertFalse(node2.isBreak());
738:       assertFalse(node2.isGetElem());
739:       assertFalse(node2.isNull());
740:       assertFalse(node2.isExprResult());
741:       assertFalse(node2.isCall());
742:       assertFalse(node2.isName());
743:       assertFalse(node2.isVoid());
744:       
745:       node0.isFromExterns();
746:       assertEquals(56, Node.CHANGE_TIME);
747:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
748:       assertEquals(37, Node.OPT_ARG_NAME);
749:       assertEquals(29, Node.JSDOC_INFO_PROP);
750:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
751:       assertEquals(46, Node.IS_NAMESPACE);
752:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
753:       assertEquals(51, Node.STATIC_SOURCE_FILE);
754:       assertEquals(36, Node.QUOTED_PROP);
755:       assertEquals(49, Node.DIRECT_EVAL);
756:       assertEquals(1, Node.DECR_FLAG);
757:       assertEquals(32, Node.INCRDECR_PROP);
758:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
759:       assertEquals(4095, Node.COLUMN_MASK);
760:       assertEquals(12, Node.COLUMN_BITS);
761:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
762:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
763:       assertEquals(50, Node.FREE_CALL);
764:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
765:       assertEquals(8, Node.FLAG_NO_THROWS);
766:       assertEquals(40, Node.ORIGINALNAME_PROP);
767:       assertEquals(48, Node.DIRECTIVES);
768:       assertEquals(39, Node.EMPTY_BLOCK);
769:       assertEquals(52, Node.LENGTH);
770:       assertEquals(54, Node.SLASH_V);
771:       assertEquals(57, Node.REFLECTED_OBJECT);
772:       assertEquals(30, Node.VAR_ARGS_NAME);
773:       assertEquals(43, Node.IS_CONSTANT_NAME);
774:       assertEquals(57, Node.LAST_PROP);
775:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
776:       assertEquals(55, Node.INFERRED_FUNCTION);
777:       assertEquals(53, Node.INPUT_ID);
778:       assertEquals(15, Node.NO_SIDE_EFFECTS);
779:       assertEquals(2, Node.POST_FLAG);
780:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
781:       assertEquals(47, Node.IS_DISPATCHER);
782:       assertFalse(node0.isBreak());
783:       assertFalse(node0.isComma());
784:       assertFalse(node0.isFalse());
785:       assertFalse(node0.isGetProp());
786:       assertFalse(node0.isObjectLit());
787:       assertFalse(node0.isAnd());
788:       assertEquals((-1), node0.getCharno());
789:       assertFalse(node0.isWith());
790:       assertFalse(node0.isNot());
791:       assertFalse(node0.isCase());
792:       assertFalse(node0.isExprResult());
793:       assertFalse(node0.isString());
794:       assertFalse(node0.isScript());
795:       assertFalse(node0.isInstanceOf());
796:       assertFalse(node0.isHook());
797:       assertFalse(node0.hasOneChild());
798:       assertTrue(node0.isNumber());
799:       assertFalse(node0.isThis());
800:       assertFalse(node0.isDec());
801:       assertFalse(node0.isTypeOf());
802:       assertFalse(node0.hasChildren());
803:       assertFalse(node0.isAssign());
804:       assertFalse(node0.isDelProp());
805:       assertFalse(node0.isLabelName());
806:       assertFalse(node0.isGetterDef());
807:       assertFalse(node0.isGetElem());
808:       assertFalse(node0.isEmpty());
809:       assertFalse(node0.isArrayLit());
810:       assertFalse(node0.isOr());
811:       assertFalse(node0.isTrue());
812:       assertFalse(node0.isDefaultCase());
813:       assertFalse(node0.isSwitch());
814:       assertFalse(node0.isDo());
815:       assertFalse(node0.isNew());
816:       assertFalse(node0.isAdd());
817:       assertEquals(0, node0.getChildCount());
818:       assertFalse(node0.isLabel());
819:       assertFalse(node0.isAssignAdd());
820:       assertFalse(node0.isVar());
821:       assertFalse(node0.isNull());
822:       assertFalse(node0.isCall());
823:       assertFalse(node0.isSetterDef());
824:       assertFalse(node0.isName());
825:       assertFalse(node0.isStringKey());
826:       assertFalse(node0.isParamList());
827:       assertFalse(node0.isVoid());
828:       assertFalse(node0.isRegExp());
829:       assertFalse(node0.isCatch());
830:       assertFalse(node0.hasMoreThanOneChild());
831:       assertFalse(node0.isTry());
832:       assertFalse(node0.isBlock());
833:       assertEquals(39, node0.getType());
834:       assertFalse(node0.isWhile());
835:       assertFalse(node0.isReturn());
836:       assertFalse(node0.isFor());
837:       assertEquals((-1), node0.getSourcePosition());
838:       assertFalse(node0.isIf());
839:       assertFalse(node0.isCast());
840:       assertFalse(node0.isIn());
841:       assertEquals((-1), node0.getLineno());
842:       assertFalse(node0.isDebugger());
843:       assertFalse(node0.isNE());
844:       assertFalse(node0.isFunction());
845:       assertFalse(node0.isContinue());
846:       assertFalse(node0.isInc());
847:       assertFalse(node0.isThrow());
848:       
849:       node0.isBreak();
850:       assertEquals(56, Node.CHANGE_TIME);
851:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
852:       assertEquals(37, Node.OPT_ARG_NAME);
853:       assertEquals(29, Node.JSDOC_INFO_PROP);
854:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
855:       assertEquals(46, Node.IS_NAMESPACE);
856:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
857:       assertEquals(51, Node.STATIC_SOURCE_FILE);
858:       assertEquals(36, Node.QUOTED_PROP);
859:       assertEquals(49, Node.DIRECT_EVAL);
860:       assertEquals(1, Node.DECR_FLAG);
861:       assertEquals(32, Node.INCRDECR_PROP);
862:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
863:       assertEquals(4095, Node.COLUMN_MASK);
864:       assertEquals(12, Node.COLUMN_BITS);
865:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
866:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
867:       assertEquals(50, Node.FREE_CALL);
868:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
869:       assertEquals(8, Node.FLAG_NO_THROWS);
870:       assertEquals(40, Node.ORIGINALNAME_PROP);
871:       assertEquals(48, Node.DIRECTIVES);
872:       assertEquals(39, Node.EMPTY_BLOCK);
873:       assertEquals(52, Node.LENGTH);
874:       assertEquals(54, Node.SLASH_V);
875:       assertEquals(57, Node.REFLECTED_OBJECT);
876:       assertEquals(30, Node.VAR_ARGS_NAME);
877:       assertEquals(43, Node.IS_CONSTANT_NAME);
878:       assertEquals(57, Node.LAST_PROP);
879:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
880:       assertEquals(55, Node.INFERRED_FUNCTION);
881:       assertEquals(53, Node.INPUT_ID);
882:       assertEquals(15, Node.NO_SIDE_EFFECTS);
883:       assertEquals(2, Node.POST_FLAG);
884:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
885:       assertEquals(47, Node.IS_DISPATCHER);
886:       assertFalse(node0.isBreak());
887:       assertFalse(node0.isComma());
888:       assertFalse(node0.isFalse());
889:       assertFalse(node0.isGetProp());
890:       assertFalse(node0.isObjectLit());
891:       assertFalse(node0.isAnd());
892:       assertEquals((-1), node0.getCharno());
893:       assertFalse(node0.isWith());
894:       assertFalse(node0.isNot());
895:       assertFalse(node0.isCase());
896:       assertFalse(node0.isExprResult());
897:       assertFalse(node0.isString());
898:       assertFalse(node0.isScript());
899:       assertFalse(node0.isInstanceOf());
900:       assertFalse(node0.isHook());
901:       assertFalse(node0.hasOneChild());
902:       assertTrue(node0.isNumber());
903:       assertFalse(node0.isThis());
904:       assertFalse(node0.isDec());
905:       assertFalse(node0.isTypeOf());
906:       assertFalse(node0.hasChildren());
907:       assertFalse(node0.isAssign());
908:       assertFalse(node0.isDelProp());
909:       assertFalse(node0.isLabelName());
910:       assertFalse(node0.isGetterDef());
911:       assertFalse(node0.isGetElem());
912:       assertFalse(node0.isEmpty());
913:       assertFalse(node0.isArrayLit());
914:       assertFalse(node0.isOr());
915:       assertFalse(node0.isTrue());
916:       assertFalse(node0.isDefaultCase());
917:       assertFalse(node0.isSwitch());
918:       assertFalse(node0.isDo());
919:       assertFalse(node0.isNew());
920:       assertFalse(node0.isAdd());
921:       assertEquals(0, node0.getChildCount());
922:       assertFalse(node0.isLabel());
923:       assertFalse(node0.isAssignAdd());
924:       assertFalse(node0.isVar());
925:       assertFalse(node0.isNull());
926:       assertFalse(node0.isCall());
927:       assertFalse(node0.isSetterDef());
928:       assertFalse(node0.isName());
929:       assertFalse(node0.isStringKey());
930:       assertFalse(node0.isParamList());
931:       assertFalse(node0.isVoid());
932:       assertFalse(node0.isRegExp());
933:       assertFalse(node0.isCatch());
934:       assertFalse(node0.hasMoreThanOneChild());
935:       assertFalse(node0.isTry());
936:       assertFalse(node0.isBlock());
937:       assertEquals(39, node0.getType());
938:       assertFalse(node0.isWhile());
939:       assertFalse(node0.isReturn());
940:       assertFalse(node0.isFor());
941:       assertEquals((-1), node0.getSourcePosition());
942:       assertFalse(node0.isIf());
943:       assertFalse(node0.isCast());
944:       assertFalse(node0.isIn());
945:       assertEquals((-1), node0.getLineno());
946:       assertFalse(node0.isDebugger());
947:       assertFalse(node0.isNE());
948:       assertFalse(node0.isFunction());
949:       assertFalse(node0.isContinue());
950:       assertFalse(node0.isInc());
951:       assertFalse(node0.isThrow());
952:       
953:       Node node3 = node0.srcrefTree(node2);
954:       assertEquals(56, Node.CHANGE_TIME);
955:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
956:       assertEquals(37, Node.OPT_ARG_NAME);
957:       assertEquals(29, Node.JSDOC_INFO_PROP);
958:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
959:       assertEquals(46, Node.IS_NAMESPACE);
960:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
961:       assertEquals(51, Node.STATIC_SOURCE_FILE);
962:       assertEquals(36, Node.QUOTED_PROP);
963:       assertEquals(49, Node.DIRECT_EVAL);
964:       assertEquals(1, Node.DECR_FLAG);
965:       assertEquals(32, Node.INCRDECR_PROP);
966:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
967:       assertEquals(4095, Node.COLUMN_MASK);
968:       assertEquals(12, Node.COLUMN_BITS);
969:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
970:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
971:       assertEquals(50, Node.FREE_CALL);
972:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
973:       assertEquals(8, Node.FLAG_NO_THROWS);
974:       assertEquals(40, Node.ORIGINALNAME_PROP);
975:       assertEquals(48, Node.DIRECTIVES);
976:       assertEquals(39, Node.EMPTY_BLOCK);
977:       assertEquals(52, Node.LENGTH);
978:       assertEquals(54, Node.SLASH_V);
979:       assertEquals(57, Node.REFLECTED_OBJECT);
980:       assertEquals(30, Node.VAR_ARGS_NAME);
981:       assertEquals(43, Node.IS_CONSTANT_NAME);
982:       assertEquals(57, Node.LAST_PROP);
983:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
984:       assertEquals(55, Node.INFERRED_FUNCTION);
985:       assertEquals(53, Node.INPUT_ID);
986:       assertEquals(15, Node.NO_SIDE_EFFECTS);
987:       assertEquals(2, Node.POST_FLAG);
988:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
989:       assertEquals(47, Node.IS_DISPATCHER);
990:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
991:       assertEquals(39, Node.EMPTY_BLOCK);
992:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
993:       assertEquals(48, Node.DIRECTIVES);
994:       assertEquals(55, Node.INFERRED_FUNCTION);
995:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
996:       assertEquals(57, Node.REFLECTED_OBJECT);
997:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
998:       assertEquals(52, Node.LENGTH);
999:       assertEquals(50, Node.FREE_CALL);
1000:       assertEquals(8, Node.FLAG_NO_THROWS);
1001:       assertEquals(43, Node.IS_CONSTANT_NAME);
1002:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1003:       assertEquals(54, Node.SLASH_V);
1004:       assertEquals(53, Node.INPUT_ID);
1005:       assertEquals(57, Node.LAST_PROP);
1006:       assertEquals(40, Node.ORIGINALNAME_PROP);
1007:       assertEquals(30, Node.VAR_ARGS_NAME);
1008:       assertEquals(2, Node.POST_FLAG);
1009:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1010:       assertEquals(37, Node.OPT_ARG_NAME);
1011:       assertEquals(56, Node.CHANGE_TIME);
1012:       assertEquals(47, Node.IS_DISPATCHER);
1013:       assertEquals(32, Node.INCRDECR_PROP);
1014:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1015:       assertEquals(46, Node.IS_NAMESPACE);
1016:       assertEquals(29, Node.JSDOC_INFO_PROP);
1017:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1018:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1019:       assertEquals(36, Node.QUOTED_PROP);
1020:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1021:       assertEquals(49, Node.DIRECT_EVAL);
1022:       assertEquals(1, Node.DECR_FLAG);
1023:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1024:       assertEquals(4095, Node.COLUMN_MASK);
1025:       assertEquals(12, Node.COLUMN_BITS);
1026:       assertEquals(39, Node.EMPTY_BLOCK);
1027:       assertEquals(4095, Node.COLUMN_MASK);
1028:       assertEquals(55, Node.INFERRED_FUNCTION);
1029:       assertEquals(8, Node.FLAG_NO_THROWS);
1030:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1031:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1032:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1033:       assertEquals(54, Node.SLASH_V);
1034:       assertEquals(50, Node.FREE_CALL);
1035:       assertEquals(40, Node.ORIGINALNAME_PROP);
1036:       assertEquals(43, Node.IS_CONSTANT_NAME);
1037:       assertEquals(37, Node.OPT_ARG_NAME);
1038:       assertEquals(46, Node.IS_NAMESPACE);
1039:       assertEquals(2, Node.POST_FLAG);
1040:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1041:       assertEquals(29, Node.JSDOC_INFO_PROP);
1042:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1043:       assertEquals(30, Node.VAR_ARGS_NAME);
1044:       assertEquals(1, Node.DECR_FLAG);
1045:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1046:       assertEquals(47, Node.IS_DISPATCHER);
1047:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1048:       assertEquals(12, Node.COLUMN_BITS);
1049:       assertEquals(32, Node.INCRDECR_PROP);
1050:       assertEquals(57, Node.LAST_PROP);
1051:       assertEquals(53, Node.INPUT_ID);
1052:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1053:       assertEquals(57, Node.REFLECTED_OBJECT);
1054:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1055:       assertEquals(36, Node.QUOTED_PROP);
1056:       assertEquals(52, Node.LENGTH);
1057:       assertEquals(49, Node.DIRECT_EVAL);
1058:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1059:       assertEquals(56, Node.CHANGE_TIME);
1060:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1061:       assertEquals(48, Node.DIRECTIVES);
1062:       assertEquals(46, Node.IS_NAMESPACE);
1063:       assertEquals(2, Node.POST_FLAG);
1064:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1065:       assertEquals(29, Node.JSDOC_INFO_PROP);
1066:       assertEquals(30, Node.VAR_ARGS_NAME);
1067:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1068:       assertEquals(1, Node.DECR_FLAG);
1069:       assertEquals(47, Node.IS_DISPATCHER);
1070:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1071:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1072:       assertEquals(12, Node.COLUMN_BITS);
1073:       assertEquals(57, Node.LAST_PROP);
1074:       assertEquals(32, Node.INCRDECR_PROP);
1075:       assertEquals(54, Node.SLASH_V);
1076:       assertEquals(50, Node.FREE_CALL);
1077:       assertEquals(40, Node.ORIGINALNAME_PROP);
1078:       assertEquals(43, Node.IS_CONSTANT_NAME);
1079:       assertEquals(39, Node.EMPTY_BLOCK);
1080:       assertEquals(4095, Node.COLUMN_MASK);
1081:       assertEquals(55, Node.INFERRED_FUNCTION);
1082:       assertEquals(8, Node.FLAG_NO_THROWS);
1083:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1084:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1085:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1086:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1087:       assertEquals(53, Node.INPUT_ID);
1088:       assertEquals(57, Node.REFLECTED_OBJECT);
1089:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1090:       assertEquals(36, Node.QUOTED_PROP);
1091:       assertEquals(52, Node.LENGTH);
1092:       assertEquals(49, Node.DIRECT_EVAL);
1093:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1094:       assertEquals(37, Node.OPT_ARG_NAME);
1095:       assertEquals(56, Node.CHANGE_TIME);
1096:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1097:       assertEquals(48, Node.DIRECTIVES);
1098:       assertFalse(node0.isBreak());
1099:       assertFalse(node0.isComma());
1100:       assertFalse(node0.isFalse());
1101:       assertFalse(node0.isGetProp());
1102:       assertFalse(node0.isObjectLit());
1103:       assertFalse(node0.isAnd());
1104:       assertEquals((-1), node0.getCharno());
1105:       assertFalse(node0.isWith());
1106:       assertFalse(node0.isNot());
1107:       assertFalse(node0.isCase());
1108:       assertFalse(node0.isExprResult());
1109:       assertFalse(node0.isString());
1110:       assertFalse(node0.isScript());
1111:       assertFalse(node0.isInstanceOf());
1112:       assertFalse(node0.isHook());
1113:       assertFalse(node0.hasOneChild());
1114:       assertTrue(node0.isNumber());
1115:       assertFalse(node0.isThis());
1116:       assertFalse(node0.isDec());
1117:       assertFalse(node0.isTypeOf());
1118:       assertFalse(node0.hasChildren());
1119:       assertFalse(node0.isAssign());
1120:       assertFalse(node0.isDelProp());
1121:       assertFalse(node0.isLabelName());
1122:       assertFalse(node0.isGetterDef());
1123:       assertFalse(node0.isGetElem());
1124:       assertFalse(node0.isEmpty());
1125:       assertFalse(node0.isArrayLit());
1126:       assertFalse(node0.isOr());
1127:       assertFalse(node0.isTrue());
1128:       assertFalse(node0.isDefaultCase());
1129:       assertFalse(node0.isSwitch());
1130:       assertFalse(node0.isDo());
1131:       assertFalse(node0.isNew());
1132:       assertFalse(node0.isAdd());
1133:       assertEquals(0, node0.getChildCount());
1134:       assertFalse(node0.isLabel());
1135:       assertFalse(node0.isAssignAdd());
1136:       assertFalse(node0.isVar());
1137:       assertFalse(node0.isNull());
1138:       assertFalse(node0.isCall());
1139:       assertFalse(node0.isSetterDef());
1140:       assertFalse(node0.isName());
1141:       assertFalse(node0.isStringKey());
1142:       assertFalse(node0.isParamList());
1143:       assertFalse(node0.isVoid());
1144:       assertFalse(node0.isRegExp());
1145:       assertFalse(node0.isCatch());
1146:       assertFalse(node0.hasMoreThanOneChild());
1147:       assertFalse(node0.isTry());
1148:       assertFalse(node0.isBlock());
1149:       assertEquals(39, node0.getType());
1150:       assertFalse(node0.isWhile());
1151:       assertFalse(node0.isReturn());
1152:       assertFalse(node0.isFor());
1153:       assertEquals((-1), node0.getSourcePosition());
1154:       assertFalse(node0.isIf());
1155:       assertFalse(node0.isCast());
1156:       assertFalse(node0.isIn());
1157:       assertEquals((-1), node0.getLineno());
1158:       assertFalse(node0.isDebugger());
1159:       assertFalse(node0.isNE());
1160:       assertFalse(node0.isFunction());
1161:       assertFalse(node0.isContinue());
1162:       assertFalse(node0.isInc());
1163:       assertFalse(node0.isThrow());
1164:       assertEquals(48, node1.getCharno());
1165:       assertFalse(node1.isNE());
1166:       assertFalse(node1.isIf());
1167:       assertFalse(node1.isDelProp());
1168:       assertFalse(node1.isEmpty());
1169:       assertFalse(node1.isString());
1170:       assertFalse(node1.isIn());
1171:       assertFalse(node1.isGetterDef());
1172:       assertFalse(node1.isDebugger());
1173:       assertFalse(node1.isInc());
1174:       assertFalse(node1.isFunction());
1175:       assertFalse(node1.isSwitch());
1176:       assertFalse(node1.isDefaultCase());
1177:       assertFalse(node1.isArrayLit());
1178:       assertFalse(node1.isThrow());
1179:       assertFalse(node1.isFalse());
1180:       assertEquals(0, node1.getChildCount());
1181:       assertFalse(node1.isGetProp());
1182:       assertFalse(node1.isNull());
1183:       assertFalse(node1.isBreak());
1184:       assertEquals(0, node1.getLineno());
1185:       assertFalse(node1.isAnd());
1186:       assertFalse(node1.isObjectLit());
1187:       assertFalse(node1.isName());
1188:       assertFalse(node1.isNot());
1189:       assertFalse(node1.isExprResult());
1190:       assertFalse(node1.isVoid());
1191:       assertFalse(node1.isTrue());
1192:       assertFalse(node1.isGetElem());
1193:       assertFalse(node1.isCall());
1194:       assertFalse(node1.isWhile());
1195:       assertFalse(node1.hasChildren());
1196:       assertFalse(node1.isReturn());
1197:       assertFalse(node1.isAssign());
1198:       assertFalse(node1.isTypeOf());
1199:       assertFalse(node1.isComma());
1200:       assertFalse(node1.isDec());
1201:       assertFalse(node1.isAssignAdd());
1202:       assertFalse(node1.isLabelName());
1203:       assertFalse(node1.isNumber());
1204:       assertFalse(node1.isOr());
1205:       assertFalse(node1.isAdd());
1206:       assertFalse(node1.isDo());
1207:       assertFalse(node1.isNew());
1208:       assertFalse(node1.isContinue());
1209:       assertFalse(node1.isCast());
1210:       assertFalse(node1.isVar());
1211:       assertEquals(48, node1.getSourcePosition());
1212:       assertFalse(node1.isLabel());
1213:       assertFalse(node1.isThis());
1214:       assertFalse(node1.isSetterDef());
1215:       assertFalse(node1.isParamList());
1216:       assertEquals(15, node1.getType());
1217:       assertFalse(node1.isStringKey());
1218:       assertFalse(node1.isBlock());
1219:       assertFalse(node1.isScript());
1220:       assertFalse(node1.isTry());
1221:       assertFalse(node1.isCase());
1222:       assertFalse(node1.hasOneChild());
1223:       assertFalse(node1.hasMoreThanOneChild());
1224:       assertFalse(node1.isFor());
1225:       assertFalse(node1.isInstanceOf());
1226:       assertFalse(node1.isCatch());
1227:       assertFalse(node1.isWith());
1228:       assertFalse(node1.isHook());
1229:       assertFalse(node1.isRegExp());
1230:       assertFalse(node2.isIn());
1231:       assertFalse(node2.isString());
1232:       assertFalse(node2.isGetterDef());
1233:       assertFalse(node2.isFor());
1234:       assertFalse(node2.isEmpty());
1235:       assertFalse(node2.isInc());
1236:       assertFalse(node2.isCase());
1237:       assertTrue(node2.isNumber());
1238:       assertFalse(node2.isDebugger());
1239:       assertFalse(node2.isFunction());
1240:       assertEquals((-1), node2.getCharno());
1241:       assertFalse(node2.isFalse());
1242:       assertFalse(node2.isSwitch());
1243:       assertFalse(node2.isArrayLit());
1244:       assertFalse(node2.isInstanceOf());
1245:       assertFalse(node2.isCatch());
1246:       assertFalse(node2.isThis());
1247:       assertFalse(node2.isScript());
1248:       assertFalse(node2.isThrow());
1249:       assertFalse(node2.isSetterDef());
1250:       assertFalse(node2.isTry());
1251:       assertFalse(node2.isHook());
1252:       assertFalse(node2.isBlock());
1253:       assertFalse(node2.isRegExp());
1254:       assertFalse(node2.isWith());
1255:       assertFalse(node2.isIf());
1256:       assertFalse(node2.isNE());
1257:       assertEquals((-1), node2.getLineno());
1258:       assertFalse(node2.isReturn());
1259:       assertFalse(node2.isLabel());
1260:       assertFalse(node2.isAssignAdd());
1261:       assertFalse(node2.isContinue());
1262:       assertFalse(node2.hasMoreThanOneChild());
1263:       assertEquals((-1), node2.getSourcePosition());
1264:       assertFalse(node2.isTypeOf());
1265:       assertFalse(node2.isOr());
1266:       assertFalse(node2.isDec());
1267:       assertFalse(node2.isWhile());
1268:       assertFalse(node2.hasChildren());
1269:       assertEquals(39, node2.getType());
1270:       assertFalse(node2.isNew());
1271:       assertFalse(node2.hasOneChild());
1272:       assertFalse(node2.isDo());
1273:       assertFalse(node2.isCast());
1274:       assertFalse(node2.isVar());
1275:       assertFalse(node2.isStringKey());
1276:       assertFalse(node2.isAnd());
1277:       assertFalse(node2.isParamList());
1278:       assertFalse(node2.isLabelName());
1279:       assertFalse(node2.isObjectLit());
1280:       assertEquals(0, node2.getChildCount());
1281:       assertFalse(node2.isComma());
1282:       assertFalse(node2.isNot());
1283:       assertFalse(node2.isDefaultCase());
1284:       assertFalse(node2.isGetProp());
1285:       assertFalse(node2.isAdd());
1286:       assertFalse(node2.isTrue());
1287:       assertFalse(node2.isAssign());
1288:       assertFalse(node2.isDelProp());
1289:       assertFalse(node2.isBreak());
1290:       assertFalse(node2.isGetElem());
1291:       assertFalse(node2.isNull());
1292:       assertFalse(node2.isExprResult());
1293:       assertFalse(node2.isCall());
1294:       assertFalse(node2.isName());
1295:       assertFalse(node2.isVoid());
1296:       assertFalse(node3.isInstanceOf());
1297:       assertFalse(node3.isObjectLit());
1298:       assertFalse(node3.isThis());
1299:       assertFalse(node3.isComma());
1300:       assertFalse(node3.isNot());
1301:       assertFalse(node3.isScript());
1302:       assertFalse(node3.isThrow());
1303:       assertFalse(node3.isGetProp());
1304:       assertFalse(node3.isCast());
1305:       assertEquals((-1), node3.getCharno());
1306:       assertFalse(node3.isFalse());
1307:       assertFalse(node3.isAnd());
1308:       assertFalse(node3.isSwitch());
1309:       assertFalse(node3.isLabelName());
1310:       assertFalse(node3.isIn());
1311:       assertFalse(node3.isContinue());
1312:       assertFalse(node3.hasMoreThanOneChild());
1313:       assertFalse(node3.isGetterDef());
1314:       assertEquals(39, node3.getType());
1315:       assertFalse(node3.isFor());
1316:       assertFalse(node3.isInc());
1317:       assertFalse(node3.isCase());
1318:       assertFalse(node3.hasOneChild());
1319:       assertFalse(node3.isHook());
1320:       assertFalse(node3.isBlock());
1321:       assertFalse(node3.isRegExp());
1322:       assertFalse(node3.isWith());
1323:       assertFalse(node3.isIf());
1324:       assertFalse(node3.isNE());
1325:       assertEquals((-1), node3.getLineno());
1326:       assertFalse(node3.isCatch());
1327:       assertEquals(0, node3.getChildCount());
1328:       assertFalse(node3.isDefaultCase());
1329:       assertFalse(node3.isSetterDef());
1330:       assertFalse(node3.isTry());
1331:       assertFalse(node3.isVar());
1332:       assertFalse(node3.isDebugger());
1333:       assertFalse(node3.isFunction());
1334:       assertFalse(node3.isStringKey());
1335:       assertFalse(node3.isParamList());
1336:       assertFalse(node3.isArrayLit());
1337:       assertFalse(node3.isReturn());
1338:       assertFalse(node3.isAssignAdd());
1339:       assertEquals((-1), node3.getSourcePosition());
1340:       assertFalse(node3.isTypeOf());
1341:       assertFalse(node3.isLabel());
1342:       assertFalse(node3.isOr());
1343:       assertFalse(node3.isDec());
1344:       assertFalse(node3.isWhile());
1345:       assertFalse(node3.isString());
1346:       assertFalse(node3.hasChildren());
1347:       assertFalse(node3.isEmpty());
1348:       assertFalse(node3.isNew());
1349:       assertFalse(node3.isDo());
1350:       assertTrue(node3.isNumber());
1351:       assertFalse(node3.isAdd());
1352:       assertFalse(node3.isTrue());
1353:       assertFalse(node3.isAssign());
1354:       assertFalse(node3.isBreak());
1355:       assertFalse(node3.isDelProp());
1356:       assertFalse(node3.isNull());
1357:       assertFalse(node3.isExprResult());
1358:       assertFalse(node3.isVoid());
1359:       assertFalse(node3.isCall());
1360:       assertFalse(node3.isGetElem());
1361:       assertFalse(node3.isName());
1362:       
1363:       node0.isCatch();
1364:       assertEquals(56, Node.CHANGE_TIME);
1365:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1366:       assertEquals(37, Node.OPT_ARG_NAME);
1367:       assertEquals(29, Node.JSDOC_INFO_PROP);
1368:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1369:       assertEquals(46, Node.IS_NAMESPACE);
1370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1372:       assertEquals(36, Node.QUOTED_PROP);
1373:       assertEquals(49, Node.DIRECT_EVAL);
1374:       assertEquals(1, Node.DECR_FLAG);
1375:       assertEquals(32, Node.INCRDECR_PROP);
1376:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1377:       assertEquals(4095, Node.COLUMN_MASK);
1378:       assertEquals(12, Node.COLUMN_BITS);
1379:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1380:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1381:       assertEquals(50, Node.FREE_CALL);
1382:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1383:       assertEquals(8, Node.FLAG_NO_THROWS);
1384:       assertEquals(40, Node.ORIGINALNAME_PROP);
1385:       assertEquals(48, Node.DIRECTIVES);
1386:       assertEquals(39, Node.EMPTY_BLOCK);
1387:       assertEquals(52, Node.LENGTH);
1388:       assertEquals(54, Node.SLASH_V);
1389:       assertEquals(57, Node.REFLECTED_OBJECT);
1390:       assertEquals(30, Node.VAR_ARGS_NAME);
1391:       assertEquals(43, Node.IS_CONSTANT_NAME);
1392:       assertEquals(57, Node.LAST_PROP);
1393:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1394:       assertEquals(55, Node.INFERRED_FUNCTION);
1395:       assertEquals(53, Node.INPUT_ID);
1396:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1397:       assertEquals(2, Node.POST_FLAG);
1398:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1399:       assertEquals(47, Node.IS_DISPATCHER);
1400:       assertFalse(node0.isBreak());
1401:       assertFalse(node0.isComma());
1402:       assertFalse(node0.isFalse());
1403:       assertFalse(node0.isGetProp());
1404:       assertFalse(node0.isObjectLit());
1405:       assertFalse(node0.isAnd());
1406:       assertEquals((-1), node0.getCharno());
1407:       assertFalse(node0.isWith());
1408:       assertFalse(node0.isNot());
1409:       assertFalse(node0.isCase());
1410:       assertFalse(node0.isExprResult());
1411:       assertFalse(node0.isString());
1412:       assertFalse(node0.isScript());
1413:       assertFalse(node0.isInstanceOf());
1414:       assertFalse(node0.isHook());
1415:       assertFalse(node0.hasOneChild());
1416:       assertTrue(node0.isNumber());
1417:       assertFalse(node0.isThis());
1418:       assertFalse(node0.isDec());
1419:       assertFalse(node0.isTypeOf());
1420:       assertFalse(node0.hasChildren());
1421:       assertFalse(node0.isAssign());
1422:       assertFalse(node0.isDelProp());
1423:       assertFalse(node0.isLabelName());
1424:       assertFalse(node0.isGetterDef());
1425:       assertFalse(node0.isGetElem());
1426:       assertFalse(node0.isEmpty());
1427:       assertFalse(node0.isArrayLit());
1428:       assertFalse(node0.isOr());
1429:       assertFalse(node0.isTrue());
1430:       assertFalse(node0.isDefaultCase());
1431:       assertFalse(node0.isSwitch());
1432:       assertFalse(node0.isDo());
1433:       assertFalse(node0.isNew());
1434:       assertFalse(node0.isAdd());
1435:       assertEquals(0, node0.getChildCount());
1436:       assertFalse(node0.isLabel());
1437:       assertFalse(node0.isAssignAdd());
1438:       assertFalse(node0.isVar());
1439:       assertFalse(node0.isNull());
1440:       assertFalse(node0.isCall());
1441:       assertFalse(node0.isSetterDef());
1442:       assertFalse(node0.isName());
1443:       assertFalse(node0.isStringKey());
1444:       assertFalse(node0.isParamList());
1445:       assertFalse(node0.isVoid());
1446:       assertFalse(node0.isRegExp());
1447:       assertFalse(node0.isCatch());
1448:       assertFalse(node0.hasMoreThanOneChild());
1449:       assertFalse(node0.isTry());
1450:       assertFalse(node0.isBlock());
1451:       assertEquals(39, node0.getType());
1452:       assertFalse(node0.isWhile());
1453:       assertFalse(node0.isReturn());
1454:       assertFalse(node0.isFor());
1455:       assertEquals((-1), node0.getSourcePosition());
1456:       assertFalse(node0.isIf());
1457:       assertFalse(node0.isCast());
1458:       assertFalse(node0.isIn());
1459:       assertEquals((-1), node0.getLineno());
1460:       assertFalse(node0.isDebugger());
1461:       assertFalse(node0.isNE());
1462:       assertFalse(node0.isFunction());
1463:       assertFalse(node0.isContinue());
1464:       assertFalse(node0.isInc());
1465:       assertFalse(node0.isThrow());
1466:       
1467:       Node node4 = Node.newNumber(0.0, 52, 46);
1468:       assertEquals(54, Node.SLASH_V);
1469:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1470:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1471:       assertEquals(30, Node.VAR_ARGS_NAME);
1472:       assertEquals(52, Node.LENGTH);
1473:       assertEquals(40, Node.ORIGINALNAME_PROP);
1474:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1475:       assertEquals(57, Node.REFLECTED_OBJECT);
1476:       assertEquals(49, Node.DIRECT_EVAL);
1477:       assertEquals(46, Node.IS_NAMESPACE);
1478:       assertEquals(48, Node.DIRECTIVES);
1479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1480:       assertEquals(37, Node.OPT_ARG_NAME);
1481:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1482:       assertEquals(50, Node.FREE_CALL);
1483:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1484:       assertEquals(4095, Node.COLUMN_MASK);
1485:       assertEquals(12, Node.COLUMN_BITS);
1486:       assertEquals(1, Node.DECR_FLAG);
1487:       assertEquals(32, Node.INCRDECR_PROP);
1488:       assertEquals(36, Node.QUOTED_PROP);
1489:       assertEquals(53, Node.INPUT_ID);
1490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1491:       assertEquals(43, Node.IS_CONSTANT_NAME);
1492:       assertEquals(56, Node.CHANGE_TIME);
1493:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1494:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1495:       assertEquals(8, Node.FLAG_NO_THROWS);
1496:       assertEquals(39, Node.EMPTY_BLOCK);
1497:       assertEquals(2, Node.POST_FLAG);
1498:       assertEquals(47, Node.IS_DISPATCHER);
1499:       assertEquals(29, Node.JSDOC_INFO_PROP);
1500:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1501:       assertEquals(55, Node.INFERRED_FUNCTION);
1502:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1503:       assertEquals(57, Node.LAST_PROP);
1504:       assertFalse(node4.isVoid());
1505:       assertFalse(node4.isDebugger());
1506:       assertFalse(node4.isTrue());
1507:       assertFalse(node4.isFunction());
1508:       assertFalse(node4.isRegExp());
1509:       assertFalse(node4.isCatch());
1510:       assertFalse(node4.isIf());
1511:       assertFalse(node4.isArrayLit());
1512:       assertFalse(node4.isDelProp());
1513:       assertFalse(node4.isParamList());
1514:       assertFalse(node4.isGetterDef());
1515:       assertFalse(node4.isCase());
1516:       assertFalse(node4.isFor());
1517:       assertTrue(node4.isNumber());
1518:       assertFalse(node4.isTry());
1519:       assertFalse(node4.isInc());
1520:       assertFalse(node4.isBlock());
1521:       assertFalse(node4.isString());
1522:       assertFalse(node4.isContinue());
1523:       assertFalse(node4.isFalse());
1524:       assertEquals(46, node4.getCharno());
1525:       assertFalse(node4.isNE());
1526:       assertFalse(node4.isSetterDef());
1527:       assertFalse(node4.isIn());
1528:       assertFalse(node4.isThrow());
1529:       assertFalse(node4.isScript());
1530:       assertFalse(node4.isExprResult());
1531:       assertFalse(node4.isWith());
1532:       assertEquals(52, node4.getLineno());
1533:       assertFalse(node4.isNot());
1534:       assertFalse(node4.isAnd());
1535:       assertFalse(node4.isCast());
1536:       assertFalse(node4.isGetElem());
1537:       assertFalse(node4.isLabelName());
1538:       assertFalse(node4.isGetProp());
1539:       assertFalse(node4.isComma());
1540:       assertFalse(node4.isThis());
1541:       assertFalse(node4.isReturn());
1542:       assertFalse(node4.isDec());
1543:       assertFalse(node4.hasChildren());
1544:       assertFalse(node4.isInstanceOf());
1545:       assertFalse(node4.isAssign());
1546:       assertFalse(node4.hasMoreThanOneChild());
1547:       assertFalse(node4.isTypeOf());
1548:       assertFalse(node4.isObjectLit());
1549:       assertEquals(39, node4.getType());
1550:       assertFalse(node4.isHook());
1551:       assertFalse(node4.isWhile());
1552:       assertFalse(node4.hasOneChild());
1553:       assertFalse(node4.isNew());
1554:       assertFalse(node4.isAdd());
1555:       assertFalse(node4.isStringKey());
1556:       assertEquals(213038, node4.getSourcePosition());
1557:       assertFalse(node4.isCall());
1558:       assertFalse(node4.isBreak());
1559:       assertFalse(node4.isSwitch());
1560:       assertFalse(node4.isName());
1561:       assertFalse(node4.isLabel());
1562:       assertFalse(node4.isNull());
1563:       assertEquals(0, node4.getChildCount());
1564:       assertFalse(node4.isOr());
1565:       assertFalse(node4.isEmpty());
1566:       assertFalse(node4.isVar());
1567:       assertFalse(node4.isDefaultCase());
1568:       assertFalse(node4.isDo());
1569:       assertFalse(node4.isAssignAdd());
1570:       
1571:       node4.isQuotedString();
1572:       assertEquals(54, Node.SLASH_V);
1573:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1574:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1575:       assertEquals(30, Node.VAR_ARGS_NAME);
1576:       assertEquals(52, Node.LENGTH);
1577:       assertEquals(40, Node.ORIGINALNAME_PROP);
1578:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1579:       assertEquals(57, Node.REFLECTED_OBJECT);
1580:       assertEquals(49, Node.DIRECT_EVAL);
1581:       assertEquals(46, Node.IS_NAMESPACE);
1582:       assertEquals(48, Node.DIRECTIVES);
1583:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1584:       assertEquals(37, Node.OPT_ARG_NAME);
1585:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1586:       assertEquals(50, Node.FREE_CALL);
1587:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1588:       assertEquals(4095, Node.COLUMN_MASK);
1589:       assertEquals(12, Node.COLUMN_BITS);
1590:       assertEquals(1, Node.DECR_FLAG);
1591:       assertEquals(32, Node.INCRDECR_PROP);
1592:       assertEquals(36, Node.QUOTED_PROP);
1593:       assertEquals(53, Node.INPUT_ID);
1594:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1595:       assertEquals(43, Node.IS_CONSTANT_NAME);
1596:       assertEquals(56, Node.CHANGE_TIME);
1597:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1598:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1599:       assertEquals(8, Node.FLAG_NO_THROWS);
1600:       assertEquals(39, Node.EMPTY_BLOCK);
1601:       assertEquals(2, Node.POST_FLAG);
1602:       assertEquals(47, Node.IS_DISPATCHER);
1603:       assertEquals(29, Node.JSDOC_INFO_PROP);
1604:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1605:       assertEquals(55, Node.INFERRED_FUNCTION);
1606:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1607:       assertEquals(57, Node.LAST_PROP);
1608:       assertFalse(node4.isVoid());
1609:       assertFalse(node4.isDebugger());
1610:       assertFalse(node4.isTrue());
1611:       assertFalse(node4.isFunction());
1612:       assertFalse(node4.isRegExp());
1613:       assertFalse(node4.isCatch());
1614:       assertFalse(node4.isIf());
1615:       assertFalse(node4.isArrayLit());
1616:       assertFalse(node4.isDelProp());
1617:       assertFalse(node4.isParamList());
1618:       assertFalse(node4.isGetterDef());
1619:       assertFalse(node4.isCase());
1620:       assertFalse(node4.isFor());
1621:       assertTrue(node4.isNumber());
1622:       assertFalse(node4.isTry());
1623:       assertFalse(node4.isInc());
1624:       assertFalse(node4.isBlock());
1625:       assertFalse(node4.isString());
1626:       assertFalse(node4.isContinue());
1627:       assertFalse(node4.isFalse());
1628:       assertEquals(46, node4.getCharno());
1629:       assertFalse(node4.isNE());
1630:       assertFalse(node4.isSetterDef());
1631:       assertFalse(node4.isIn());
1632:       assertFalse(node4.isThrow());
1633:       assertFalse(node4.isScript());
1634:       assertFalse(node4.isExprResult());
1635:       assertFalse(node4.isWith());
1636:       assertEquals(52, node4.getLineno());
1637:       assertFalse(node4.isNot());
1638:       assertFalse(node4.isAnd());
1639:       assertFalse(node4.isCast());
1640:       assertFalse(node4.isGetElem());
1641:       assertFalse(node4.isLabelName());
1642:       assertFalse(node4.isGetProp());
1643:       assertFalse(node4.isComma());
1644:       assertFalse(node4.isThis());
1645:       assertFalse(node4.isReturn());
1646:       assertFalse(node4.isDec());
1647:       assertFalse(node4.hasChildren());
1648:       assertFalse(node4.isInstanceOf());
1649:       assertFalse(node4.isAssign());
1650:       assertFalse(node4.hasMoreThanOneChild());
1651:       assertFalse(node4.isTypeOf());
1652:       assertFalse(node4.isObjectLit());
1653:       assertEquals(39, node4.getType());
1654:       assertFalse(node4.isHook());
1655:       assertFalse(node4.isWhile());
1656:       assertFalse(node4.hasOneChild());
1657:       assertFalse(node4.isNew());
1658:       assertFalse(node4.isAdd());
1659:       assertFalse(node4.isStringKey());
1660:       assertEquals(213038, node4.getSourcePosition());
1661:       assertFalse(node4.isCall());
1662:       assertFalse(node4.isBreak());
1663:       assertFalse(node4.isSwitch());
1664:       assertFalse(node4.isName());
1665:       assertFalse(node4.isLabel());
1666:       assertFalse(node4.isNull());
1667:       assertEquals(0, node4.getChildCount());
1668:       assertFalse(node4.isOr());
1669:       assertFalse(node4.isEmpty());
1670:       assertFalse(node4.isVar());
1671:       assertFalse(node4.isDefaultCase());
1672:       assertFalse(node4.isDo());
1673:       assertFalse(node4.isAssignAdd());
1674:       
1675:       node0.getDirectives();
1676:       assertEquals(56, Node.CHANGE_TIME);
1677:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1678:       assertEquals(37, Node.OPT_ARG_NAME);
1679:       assertEquals(29, Node.JSDOC_INFO_PROP);
1680:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1681:       assertEquals(46, Node.IS_NAMESPACE);
1682:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1683:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1684:       assertEquals(36, Node.QUOTED_PROP);
1685:       assertEquals(49, Node.DIRECT_EVAL);
1686:       assertEquals(1, Node.DECR_FLAG);
1687:       assertEquals(32, Node.INCRDECR_PROP);
1688:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1689:       assertEquals(4095, Node.COLUMN_MASK);
1690:       assertEquals(12, Node.COLUMN_BITS);
1691:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1692:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1693:       assertEquals(50, Node.FREE_CALL);
1694:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1695:       assertEquals(8, Node.FLAG_NO_THROWS);
1696:       assertEquals(40, Node.ORIGINALNAME_PROP);
1697:       assertEquals(48, Node.DIRECTIVES);
1698:       assertEquals(39, Node.EMPTY_BLOCK);
1699:       assertEquals(52, Node.LENGTH);
1700:       assertEquals(54, Node.SLASH_V);
1701:       assertEquals(57, Node.REFLECTED_OBJECT);
1702:       assertEquals(30, Node.VAR_ARGS_NAME);
1703:       assertEquals(43, Node.IS_CONSTANT_NAME);
1704:       assertEquals(57, Node.LAST_PROP);
1705:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1706:       assertEquals(55, Node.INFERRED_FUNCTION);
1707:       assertEquals(53, Node.INPUT_ID);
1708:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1709:       assertEquals(2, Node.POST_FLAG);
1710:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1711:       assertEquals(47, Node.IS_DISPATCHER);
1712:       assertFalse(node0.isBreak());
1713:       assertFalse(node0.isComma());
1714:       assertFalse(node0.isFalse());
1715:       assertFalse(node0.isGetProp());
1716:       assertFalse(node0.isObjectLit());
1717:       assertFalse(node0.isAnd());
1718:       assertEquals((-1), node0.getCharno());
1719:       assertFalse(node0.isWith());
1720:       assertFalse(node0.isNot());
1721:       assertFalse(node0.isCase());
1722:       assertFalse(node0.isExprResult());
1723:       assertFalse(node0.isString());
1724:       assertFalse(node0.isScript());
1725:       assertFalse(node0.isInstanceOf());
1726:       assertFalse(node0.isHook());
1727:       assertFalse(node0.hasOneChild());
1728:       assertTrue(node0.isNumber());
1729:       assertFalse(node0.isThis());
1730:       assertFalse(node0.isDec());
1731:       assertFalse(node0.isTypeOf());
1732:       assertFalse(node0.hasChildren());
1733:       assertFalse(node0.isAssign());
1734:       assertFalse(node0.isDelProp());
1735:       assertFalse(node0.isLabelName());
1736:       assertFalse(node0.isGetterDef());
1737:       assertFalse(node0.isGetElem());
1738:       assertFalse(node0.isEmpty());
1739:       assertFalse(node0.isArrayLit());
1740:       assertFalse(node0.isOr());
1741:       assertFalse(node0.isTrue());
1742:       assertFalse(node0.isDefaultCase());
1743:       assertFalse(node0.isSwitch());
1744:       assertFalse(node0.isDo());
1745:       assertFalse(node0.isNew());
1746:       assertFalse(node0.isAdd());
1747:       assertEquals(0, node0.getChildCount());
1748:       assertFalse(node0.isLabel());
1749:       assertFalse(node0.isAssignAdd());
1750:       assertFalse(node0.isVar());
1751:       assertFalse(node0.isNull());
1752:       assertFalse(node0.isCall());
1753:       assertFalse(node0.isSetterDef());
1754:       assertFalse(node0.isName());
1755:       assertFalse(node0.isStringKey());
1756:       assertFalse(node0.isParamList());
1757:       assertFalse(node0.isVoid());
1758:       assertFalse(node0.isRegExp());
1759:       assertFalse(node0.isCatch());
1760:       assertFalse(node0.hasMoreThanOneChild());
1761:       assertFalse(node0.isTry());
1762:       assertFalse(node0.isBlock());
1763:       assertEquals(39, node0.getType());
1764:       assertFalse(node0.isWhile());
1765:       assertFalse(node0.isReturn());
1766:       assertFalse(node0.isFor());
1767:       assertEquals((-1), node0.getSourcePosition());
1768:       assertFalse(node0.isIf());
1769:       assertFalse(node0.isCast());
1770:       assertFalse(node0.isIn());
1771:       assertEquals((-1), node0.getLineno());
1772:       assertFalse(node0.isDebugger());
1773:       assertFalse(node0.isNE());
1774:       assertFalse(node0.isFunction());
1775:       assertFalse(node0.isContinue());
1776:       assertFalse(node0.isInc());
1777:       assertFalse(node0.isThrow());
1778:       
1779:       node4.getDouble();
1780:       assertEquals(54, Node.SLASH_V);
1781:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1782:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1783:       assertEquals(30, Node.VAR_ARGS_NAME);
1784:       assertEquals(52, Node.LENGTH);
1785:       assertEquals(40, Node.ORIGINALNAME_PROP);
1786:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1787:       assertEquals(57, Node.REFLECTED_OBJECT);
1788:       assertEquals(49, Node.DIRECT_EVAL);
1789:       assertEquals(46, Node.IS_NAMESPACE);
1790:       assertEquals(48, Node.DIRECTIVES);
1791:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1792:       assertEquals(37, Node.OPT_ARG_NAME);
1793:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1794:       assertEquals(50, Node.FREE_CALL);
1795:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1796:       assertEquals(4095, Node.COLUMN_MASK);
1797:       assertEquals(12, Node.COLUMN_BITS);
1798:       assertEquals(1, Node.DECR_FLAG);
1799:       assertEquals(32, Node.INCRDECR_PROP);
1800:       assertEquals(36, Node.QUOTED_PROP);
1801:       assertEquals(53, Node.INPUT_ID);
1802:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1803:       assertEquals(43, Node.IS_CONSTANT_NAME);
1804:       assertEquals(56, Node.CHANGE_TIME);
1805:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1806:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1807:       assertEquals(8, Node.FLAG_NO_THROWS);
1808:       assertEquals(39, Node.EMPTY_BLOCK);
1809:       assertEquals(2, Node.POST_FLAG);
1810:       assertEquals(47, Node.IS_DISPATCHER);
1811:       assertEquals(29, Node.JSDOC_INFO_PROP);
1812:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1813:       assertEquals(55, Node.INFERRED_FUNCTION);
1814:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1815:       assertEquals(57, Node.LAST_PROP);
1816:       assertFalse(node4.isVoid());
1817:       assertFalse(node4.isDebugger());
1818:       assertFalse(node4.isTrue());
1819:       assertFalse(node4.isFunction());
1820:       assertFalse(node4.isRegExp());
1821:       assertFalse(node4.isCatch());
1822:       assertFalse(node4.isIf());
1823:       assertFalse(node4.isArrayLit());
1824:       assertFalse(node4.isDelProp());
1825:       assertFalse(node4.isParamList());
1826:       assertFalse(node4.isGetterDef());
1827:       assertFalse(node4.isCase());
1828:       assertFalse(node4.isFor());
1829:       assertTrue(node4.isNumber());
1830:       assertFalse(node4.isTry());
1831:       assertFalse(node4.isInc());
1832:       assertFalse(node4.isBlock());
1833:       assertFalse(node4.isString());
1834:       assertFalse(node4.isContinue());
1835:       assertFalse(node4.isFalse());
1836:       assertEquals(46, node4.getCharno());
1837:       assertFalse(node4.isNE());
1838:       assertFalse(node4.isSetterDef());
1839:       assertFalse(node4.isIn());
1840:       assertFalse(node4.isThrow());
1841:       assertFalse(node4.isScript());
1842:       assertFalse(node4.isExprResult());
1843:       assertFalse(node4.isWith());
1844:       assertEquals(52, node4.getLineno());
1845:       assertFalse(node4.isNot());
1846:       assertFalse(node4.isAnd());
1847:       assertFalse(node4.isCast());
1848:       assertFalse(node4.isGetElem());
1849:       assertFalse(node4.isLabelName());
1850:       assertFalse(node4.isGetProp());
1851:       assertFalse(node4.isComma());
1852:       assertFalse(node4.isThis());
1853:       assertFalse(node4.isReturn());
1854:       assertFalse(node4.isDec());
1855:       assertFalse(node4.hasChildren());
1856:       assertFalse(node4.isInstanceOf());
1857:       assertFalse(node4.isAssign());
1858:       assertFalse(node4.hasMoreThanOneChild());
1859:       assertFalse(node4.isTypeOf());
1860:       assertFalse(node4.isObjectLit());
1861:       assertEquals(39, node4.getType());
1862:       assertFalse(node4.isHook());
1863:       assertFalse(node4.isWhile());
1864:       assertFalse(node4.hasOneChild());
1865:       assertFalse(node4.isNew());
1866:       assertFalse(node4.isAdd());
1867:       assertFalse(node4.isStringKey());
1868:       assertEquals(213038, node4.getSourcePosition());
1869:       assertFalse(node4.isCall());
1870:       assertFalse(node4.isBreak());
1871:       assertFalse(node4.isSwitch());
1872:       assertFalse(node4.isName());
1873:       assertFalse(node4.isLabel());
1874:       assertFalse(node4.isNull());
1875:       assertEquals(0, node4.getChildCount());
1876:       assertFalse(node4.isOr());
1877:       assertFalse(node4.isEmpty());
1878:       assertFalse(node4.isVar());
1879:       assertFalse(node4.isDefaultCase());
1880:       assertFalse(node4.isDo());
1881:       assertFalse(node4.isAssignAdd());
1882:       
1883:       node0.getParent();
1884:       assertEquals(56, Node.CHANGE_TIME);
1885:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1886:       assertEquals(37, Node.OPT_ARG_NAME);
1887:       assertEquals(29, Node.JSDOC_INFO_PROP);
1888:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1889:       assertEquals(46, Node.IS_NAMESPACE);
1890:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1891:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1892:       assertEquals(36, Node.QUOTED_PROP);
1893:       assertEquals(49, Node.DIRECT_EVAL);
1894:       assertEquals(1, Node.DECR_FLAG);
1895:       assertEquals(32, Node.INCRDECR_PROP);
1896:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1897:       assertEquals(4095, Node.COLUMN_MASK);
1898:       assertEquals(12, Node.COLUMN_BITS);
1899:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1900:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1901:       assertEquals(50, Node.FREE_CALL);
1902:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1903:       assertEquals(8, Node.FLAG_NO_THROWS);
1904:       assertEquals(40, Node.ORIGINALNAME_PROP);
1905:       assertEquals(48, Node.DIRECTIVES);
1906:       assertEquals(39, Node.EMPTY_BLOCK);
1907:       assertEquals(52, Node.LENGTH);
1908:       assertEquals(54, Node.SLASH_V);
1909:       assertEquals(57, Node.REFLECTED_OBJECT);
1910:       assertEquals(30, Node.VAR_ARGS_NAME);
1911:       assertEquals(43, Node.IS_CONSTANT_NAME);
1912:       assertEquals(57, Node.LAST_PROP);
1913:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1914:       assertEquals(55, Node.INFERRED_FUNCTION);
1915:       assertEquals(53, Node.INPUT_ID);
1916:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1917:       assertEquals(2, Node.POST_FLAG);
1918:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1919:       assertEquals(47, Node.IS_DISPATCHER);
1920:       assertFalse(node0.isBreak());
1921:       assertFalse(node0.isComma());
1922:       assertFalse(node0.isFalse());
1923:       assertFalse(node0.isGetProp());
1924:       assertFalse(node0.isObjectLit());
1925:       assertFalse(node0.isAnd());
1926:       assertEquals((-1), node0.getCharno());
1927:       assertFalse(node0.isWith());
1928:       assertFalse(node0.isNot());
1929:       assertFalse(node0.isCase());
1930:       assertFalse(node0.isExprResult());
1931:       assertFalse(node0.isString());
1932:       assertFalse(node0.isScript());
1933:       assertFalse(node0.isInstanceOf());
1934:       assertFalse(node0.isHook());
1935:       assertFalse(node0.hasOneChild());
1936:       assertTrue(node0.isNumber());
1937:       assertFalse(node0.isThis());
1938:       assertFalse(node0.isDec());
1939:       assertFalse(node0.isTypeOf());
1940:       assertFalse(node0.hasChildren());
1941:       assertFalse(node0.isAssign());
1942:       assertFalse(node0.isDelProp());
1943:       assertFalse(node0.isLabelName());
1944:       assertFalse(node0.isGetterDef());
1945:       assertFalse(node0.isGetElem());
1946:       assertFalse(node0.isEmpty());
1947:       assertFalse(node0.isArrayLit());
1948:       assertFalse(node0.isOr());
1949:       assertFalse(node0.isTrue());
1950:       assertFalse(node0.isDefaultCase());
1951:       assertFalse(node0.isSwitch());
1952:       assertFalse(node0.isDo());
1953:       assertFalse(node0.isNew());
1954:       assertFalse(node0.isAdd());
1955:       assertEquals(0, node0.getChildCount());
1956:       assertFalse(node0.isLabel());
1957:       assertFalse(node0.isAssignAdd());
1958:       assertFalse(node0.isVar());
1959:       assertFalse(node0.isNull());
1960:       assertFalse(node0.isCall());
1961:       assertFalse(node0.isSetterDef());
1962:       assertFalse(node0.isName());
1963:       assertFalse(node0.isStringKey());
1964:       assertFalse(node0.isParamList());
1965:       assertFalse(node0.isVoid());
1966:       assertFalse(node0.isRegExp());
1967:       assertFalse(node0.isCatch());
1968:       assertFalse(node0.hasMoreThanOneChild());
1969:       assertFalse(node0.isTry());
1970:       assertFalse(node0.isBlock());
1971:       assertEquals(39, node0.getType());
1972:       assertFalse(node0.isWhile());
1973:       assertFalse(node0.isReturn());
1974:       assertFalse(node0.isFor());
1975:       assertEquals((-1), node0.getSourcePosition());
1976:       assertFalse(node0.isIf());
1977:       assertFalse(node0.isCast());
1978:       assertFalse(node0.isIn());
1979:       assertEquals((-1), node0.getLineno());
1980:       assertFalse(node0.isDebugger());
1981:       assertFalse(node0.isNE());
1982:       assertFalse(node0.isFunction());
1983:       assertFalse(node0.isContinue());
1984:       assertFalse(node0.isInc());
1985:       assertFalse(node0.isThrow());
1986:       
1987:       node2.hasChild(node4);
1988:       assertEquals(56, Node.CHANGE_TIME);
1989:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1990:       assertEquals(37, Node.OPT_ARG_NAME);
1991:       assertEquals(29, Node.JSDOC_INFO_PROP);
1992:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1993:       assertEquals(46, Node.IS_NAMESPACE);
1994:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1995:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1996:       assertEquals(36, Node.QUOTED_PROP);
1997:       assertEquals(49, Node.DIRECT_EVAL);
1998:       assertEquals(1, Node.DECR_FLAG);
1999:       assertEquals(32, Node.INCRDECR_PROP);
2000:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2001:       assertEquals(4095, Node.COLUMN_MASK);
2002:       assertEquals(12, Node.COLUMN_BITS);
2003:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2004:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2005:       assertEquals(50, Node.FREE_CALL);
2006:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2007:       assertEquals(8, Node.FLAG_NO_THROWS);
2008:       assertEquals(40, Node.ORIGINALNAME_PROP);
2009:       assertEquals(48, Node.DIRECTIVES);
2010:       assertEquals(39, Node.EMPTY_BLOCK);
2011:       assertEquals(52, Node.LENGTH);
2012:       assertEquals(54, Node.SLASH_V);
2013:       assertEquals(57, Node.REFLECTED_OBJECT);
2014:       assertEquals(30, Node.VAR_ARGS_NAME);
2015:       assertEquals(43, Node.IS_CONSTANT_NAME);
2016:       assertEquals(57, Node.LAST_PROP);
2017:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2018:       assertEquals(55, Node.INFERRED_FUNCTION);
2019:       assertEquals(53, Node.INPUT_ID);
2020:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2021:       assertEquals(2, Node.POST_FLAG);
2022:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2023:       assertEquals(47, Node.IS_DISPATCHER);
2024:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2025:       assertEquals(39, Node.EMPTY_BLOCK);
2026:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2027:       assertEquals(48, Node.DIRECTIVES);
2028:       assertEquals(55, Node.INFERRED_FUNCTION);
2029:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2030:       assertEquals(57, Node.REFLECTED_OBJECT);
2031:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2032:       assertEquals(52, Node.LENGTH);
2033:       assertEquals(50, Node.FREE_CALL);
2034:       assertEquals(8, Node.FLAG_NO_THROWS);
2035:       assertEquals(43, Node.IS_CONSTANT_NAME);
2036:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2037:       assertEquals(54, Node.SLASH_V);
2038:       assertEquals(53, Node.INPUT_ID);
2039:       assertEquals(57, Node.LAST_PROP);
2040:       assertEquals(40, Node.ORIGINALNAME_PROP);
2041:       assertEquals(30, Node.VAR_ARGS_NAME);
2042:       assertEquals(2, Node.POST_FLAG);
2043:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2044:       assertEquals(37, Node.OPT_ARG_NAME);
2045:       assertEquals(56, Node.CHANGE_TIME);
2046:       assertEquals(47, Node.IS_DISPATCHER);
2047:       assertEquals(32, Node.INCRDECR_PROP);
2048:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2049:       assertEquals(46, Node.IS_NAMESPACE);
2050:       assertEquals(29, Node.JSDOC_INFO_PROP);
2051:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2052:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2053:       assertEquals(36, Node.QUOTED_PROP);
2054:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2055:       assertEquals(49, Node.DIRECT_EVAL);
2056:       assertEquals(1, Node.DECR_FLAG);
2057:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2058:       assertEquals(4095, Node.COLUMN_MASK);
2059:       assertEquals(12, Node.COLUMN_BITS);
2060:       assertEquals(39, Node.EMPTY_BLOCK);
2061:       assertEquals(4095, Node.COLUMN_MASK);
2062:       assertEquals(55, Node.INFERRED_FUNCTION);
2063:       assertEquals(8, Node.FLAG_NO_THROWS);
2064:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2065:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2066:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2067:       assertEquals(54, Node.SLASH_V);
2068:       assertEquals(50, Node.FREE_CALL);
2069:       assertEquals(40, Node.ORIGINALNAME_PROP);
2070:       assertEquals(43, Node.IS_CONSTANT_NAME);
2071:       assertEquals(37, Node.OPT_ARG_NAME);
2072:       assertEquals(46, Node.IS_NAMESPACE);
2073:       assertEquals(2, Node.POST_FLAG);
2074:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2075:       assertEquals(29, Node.JSDOC_INFO_PROP);
2076:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2077:       assertEquals(30, Node.VAR_ARGS_NAME);
2078:       assertEquals(1, Node.DECR_FLAG);
2079:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2080:       assertEquals(47, Node.IS_DISPATCHER);
2081:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2082:       assertEquals(12, Node.COLUMN_BITS);
2083:       assertEquals(32, Node.INCRDECR_PROP);
2084:       assertEquals(57, Node.LAST_PROP);
2085:       assertEquals(53, Node.INPUT_ID);
2086:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2087:       assertEquals(57, Node.REFLECTED_OBJECT);
2088:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2089:       assertEquals(36, Node.QUOTED_PROP);
2090:       assertEquals(52, Node.LENGTH);
2091:       assertEquals(49, Node.DIRECT_EVAL);
2092:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2093:       assertEquals(56, Node.CHANGE_TIME);
2094:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2095:       assertEquals(48, Node.DIRECTIVES);
2096:       assertEquals(54, Node.SLASH_V);
2097:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2098:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2099:       assertEquals(30, Node.VAR_ARGS_NAME);
2100:       assertEquals(52, Node.LENGTH);
2101:       assertEquals(40, Node.ORIGINALNAME_PROP);
2102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2103:       assertEquals(57, Node.REFLECTED_OBJECT);
2104:       assertEquals(49, Node.DIRECT_EVAL);
2105:       assertEquals(46, Node.IS_NAMESPACE);
2106:       assertEquals(48, Node.DIRECTIVES);
2107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2108:       assertEquals(37, Node.OPT_ARG_NAME);
2109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2110:       assertEquals(50, Node.FREE_CALL);
2111:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2112:       assertEquals(4095, Node.COLUMN_MASK);
2113:       assertEquals(12, Node.COLUMN_BITS);
2114:       assertEquals(1, Node.DECR_FLAG);
2115:       assertEquals(32, Node.INCRDECR_PROP);
2116:       assertEquals(36, Node.QUOTED_PROP);
2117:       assertEquals(53, Node.INPUT_ID);
2118:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2119:       assertEquals(43, Node.IS_CONSTANT_NAME);
2120:       assertEquals(56, Node.CHANGE_TIME);
2121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2123:       assertEquals(8, Node.FLAG_NO_THROWS);
2124:       assertEquals(39, Node.EMPTY_BLOCK);
2125:       assertEquals(2, Node.POST_FLAG);
2126:       assertEquals(47, Node.IS_DISPATCHER);
2127:       assertEquals(29, Node.JSDOC_INFO_PROP);
2128:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2129:       assertEquals(55, Node.INFERRED_FUNCTION);
2130:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2131:       assertEquals(57, Node.LAST_PROP);
2132:       assertFalse(node0.isBreak());
2133:       assertFalse(node0.isComma());
2134:       assertFalse(node0.isFalse());
2135:       assertFalse(node0.isGetProp());
2136:       assertFalse(node0.isObjectLit());
2137:       assertFalse(node0.isAnd());
2138:       assertEquals((-1), node0.getCharno());
2139:       assertFalse(node0.isWith());
2140:       assertFalse(node0.isNot());
2141:       assertFalse(node0.isCase());
2142:       assertFalse(node0.isExprResult());
2143:       assertFalse(node0.isString());
2144:       assertFalse(node0.isScript());
2145:       assertFalse(node0.isInstanceOf());
2146:       assertFalse(node0.isHook());
2147:       assertFalse(node0.hasOneChild());
2148:       assertTrue(node0.isNumber());
2149:       assertFalse(node0.isThis());
2150:       assertFalse(node0.isDec());
2151:       assertFalse(node0.isTypeOf());
2152:       assertFalse(node0.hasChildren());
2153:       assertFalse(node0.isAssign());
2154:       assertFalse(node0.isDelProp());
2155:       assertFalse(node0.isLabelName());
2156:       assertFalse(node0.isGetterDef());
2157:       assertFalse(node0.isGetElem());
2158:       assertFalse(node0.isEmpty());
2159:       assertFalse(node0.isArrayLit());
2160:       assertFalse(node0.isOr());
2161:       assertFalse(node0.isTrue());
2162:       assertFalse(node0.isDefaultCase());
2163:       assertFalse(node0.isSwitch());
2164:       assertFalse(node0.isDo());
2165:       assertFalse(node0.isNew());
2166:       assertFalse(node0.isAdd());
2167:       assertEquals(0, node0.getChildCount());
2168:       assertFalse(node0.isLabel());
2169:       assertFalse(node0.isAssignAdd());
2170:       assertFalse(node0.isVar());
2171:       assertFalse(node0.isNull());
2172:       assertFalse(node0.isCall());
2173:       assertFalse(node0.isSetterDef());
2174:       assertFalse(node0.isName());
2175:       assertFalse(node0.isStringKey());
2176:       assertFalse(node0.isParamList());
2177:       assertFalse(node0.isVoid());
2178:       assertFalse(node0.isRegExp());
2179:       assertFalse(node0.isCatch());
2180:       assertFalse(node0.hasMoreThanOneChild());
2181:       assertFalse(node0.isTry());
2182:       assertFalse(node0.isBlock());
2183:       assertEquals(39, node0.getType());
2184:       assertFalse(node0.isWhile());
2185:       assertFalse(node0.isReturn());
2186:       assertFalse(node0.isFor());
2187:       assertEquals((-1), node0.getSourcePosition());
2188:       assertFalse(node0.isIf());
2189:       assertFalse(node0.isCast());
2190:       assertFalse(node0.isIn());
2191:       assertEquals((-1), node0.getLineno());
2192:       assertFalse(node0.isDebugger());
2193:       assertFalse(node0.isNE());
2194:       assertFalse(node0.isFunction());
2195:       assertFalse(node0.isContinue());
2196:       assertFalse(node0.isInc());
2197:       assertFalse(node0.isThrow());
2198:       assertEquals(48, node1.getCharno());
2199:       assertFalse(node1.isNE());
2200:       assertFalse(node1.isIf());
2201:       assertFalse(node1.isDelProp());
2202:       assertFalse(node1.isEmpty());
2203:       assertFalse(node1.isString());
2204:       assertFalse(node1.isIn());
2205:       assertFalse(node1.isGetterDef());
2206:       assertFalse(node1.isDebugger());
2207:       assertFalse(node1.isInc());
2208:       assertFalse(node1.isFunction());
2209:       assertFalse(node1.isSwitch());
2210:       assertFalse(node1.isDefaultCase());
2211:       assertFalse(node1.isArrayLit());
2212:       assertFalse(node1.isThrow());
2213:       assertFalse(node1.isFalse());
2214:       assertEquals(0, node1.getChildCount());
2215:       assertFalse(node1.isGetProp());
2216:       assertFalse(node1.isNull());
2217:       assertFalse(node1.isBreak());
2218:       assertEquals(0, node1.getLineno());
2219:       assertFalse(node1.isAnd());
2220:       assertFalse(node1.isObjectLit());
2221:       assertFalse(node1.isName());
2222:       assertFalse(node1.isNot());
2223:       assertFalse(node1.isExprResult());
2224:       assertFalse(node1.isVoid());
2225:       assertFalse(node1.isTrue());
2226:       assertFalse(node1.isGetElem());
2227:       assertFalse(node1.isCall());
2228:       assertFalse(node1.isWhile());
2229:       assertFalse(node1.hasChildren());
2230:       assertFalse(node1.isReturn());
2231:       assertFalse(node1.isAssign());
2232:       assertFalse(node1.isTypeOf());
2233:       assertFalse(node1.isComma());
2234:       assertFalse(node1.isDec());
2235:       assertFalse(node1.isAssignAdd());
2236:       assertFalse(node1.isLabelName());
2237:       assertFalse(node1.isNumber());
2238:       assertFalse(node1.isOr());
2239:       assertFalse(node1.isAdd());
2240:       assertFalse(node1.isDo());
2241:       assertFalse(node1.isNew());
2242:       assertFalse(node1.isContinue());
2243:       assertFalse(node1.isCast());
2244:       assertFalse(node1.isVar());
2245:       assertEquals(48, node1.getSourcePosition());
2246:       assertFalse(node1.isLabel());
2247:       assertFalse(node1.isThis());
2248:       assertFalse(node1.isSetterDef());
2249:       assertFalse(node1.isParamList());
2250:       assertEquals(15, node1.getType());
2251:       assertFalse(node1.isStringKey());
2252:       assertFalse(node1.isBlock());
2253:       assertFalse(node1.isScript());
2254:       assertFalse(node1.isTry());
2255:       assertFalse(node1.isCase());
2256:       assertFalse(node1.hasOneChild());
2257:       assertFalse(node1.hasMoreThanOneChild());
2258:       assertFalse(node1.isFor());
2259:       assertFalse(node1.isInstanceOf());
2260:       assertFalse(node1.isCatch());
2261:       assertFalse(node1.isWith());
2262:       assertFalse(node1.isHook());
2263:       assertFalse(node1.isRegExp());
2264:       assertFalse(node2.isIn());
2265:       assertFalse(node2.isString());
2266:       assertFalse(node2.isGetterDef());
2267:       assertFalse(node2.isFor());
2268:       assertFalse(node2.isEmpty());
2269:       assertFalse(node2.isInc());
2270:       assertFalse(node2.isCase());
2271:       assertTrue(node2.isNumber());
2272:       assertFalse(node2.isDebugger());
2273:       assertFalse(node2.isFunction());
2274:       assertEquals((-1), node2.getCharno());
2275:       assertFalse(node2.isFalse());
2276:       assertFalse(node2.isSwitch());
2277:       assertFalse(node2.isArrayLit());
2278:       assertFalse(node2.isInstanceOf());
2279:       assertFalse(node2.isCatch());
2280:       assertFalse(node2.isThis());
2281:       assertFalse(node2.isScript());
2282:       assertFalse(node2.isThrow());
2283:       assertFalse(node2.isSetterDef());
2284:       assertFalse(node2.isTry());
2285:       assertFalse(node2.isHook());
2286:       assertFalse(node2.isBlock());
2287:       assertFalse(node2.isRegExp());
2288:       assertFalse(node2.isWith());
2289:       assertFalse(node2.isIf());
2290:       assertFalse(node2.isNE());
2291:       assertEquals((-1), node2.getLineno());
2292:       assertFalse(node2.isReturn());
2293:       assertFalse(node2.isLabel());
2294:       assertFalse(node2.isAssignAdd());
2295:       assertFalse(node2.isContinue());
2296:       assertFalse(node2.hasMoreThanOneChild());
2297:       assertEquals((-1), node2.getSourcePosition());
2298:       assertFalse(node2.isTypeOf());
2299:       assertFalse(node2.isOr());
2300:       assertFalse(node2.isDec());
2301:       assertFalse(node2.isWhile());
2302:       assertFalse(node2.hasChildren());
2303:       assertEquals(39, node2.getType());
2304:       assertFalse(node2.isNew());
2305:       assertFalse(node2.hasOneChild());
2306:       assertFalse(node2.isDo());
2307:       assertFalse(node2.isCast());
2308:       assertFalse(node2.isVar());
2309:       assertFalse(node2.isStringKey());
2310:       assertFalse(node2.isAnd());
2311:       assertFalse(node2.isParamList());
2312:       assertFalse(node2.isLabelName());
2313:       assertFalse(node2.isObjectLit());
2314:       assertEquals(0, node2.getChildCount());
2315:       assertFalse(node2.isComma());
2316:       assertFalse(node2.isNot());
2317:       assertFalse(node2.isDefaultCase());
2318:       assertFalse(node2.isGetProp());
2319:       assertFalse(node2.isAdd());
2320:       assertFalse(node2.isTrue());
2321:       assertFalse(node2.isAssign());
2322:       assertFalse(node2.isDelProp());
2323:       assertFalse(node2.isBreak());
2324:       assertFalse(node2.isGetElem());
2325:       assertFalse(node2.isNull());
2326:       assertFalse(node2.isExprResult());
2327:       assertFalse(node2.isCall());
2328:       assertFalse(node2.isName());
2329:       assertFalse(node2.isVoid());
2330:       assertFalse(node4.isVoid());
2331:       assertFalse(node4.isDebugger());
2332:       assertFalse(node4.isTrue());
2333:       assertFalse(node4.isFunction());
2334:       assertFalse(node4.isRegExp());
2335:       assertFalse(node4.isCatch());
2336:       assertFalse(node4.isIf());
2337:       assertFalse(node4.isArrayLit());
2338:       assertFalse(node4.isDelProp());
2339:       assertFalse(node4.isParamList());
2340:       assertFalse(node4.isGetterDef());
2341:       assertFalse(node4.isCase());
2342:       assertFalse(node4.isFor());
2343:       assertTrue(node4.isNumber());
2344:       assertFalse(node4.isTry());
2345:       assertFalse(node4.isInc());
2346:       assertFalse(node4.isBlock());
2347:       assertFalse(node4.isString());
2348:       assertFalse(node4.isContinue());
2349:       assertFalse(node4.isFalse());
2350:       assertEquals(46, node4.getCharno());
2351:       assertFalse(node4.isNE());
2352:       assertFalse(node4.isSetterDef());
2353:       assertFalse(node4.isIn());
2354:       assertFalse(node4.isThrow());
2355:       assertFalse(node4.isScript());
2356:       assertFalse(node4.isExprResult());
2357:       assertFalse(node4.isWith());
2358:       assertEquals(52, node4.getLineno());
2359:       assertFalse(node4.isNot());
2360:       assertFalse(node4.isAnd());
2361:       assertFalse(node4.isCast());
2362:       assertFalse(node4.isGetElem());
2363:       assertFalse(node4.isLabelName());
2364:       assertFalse(node4.isGetProp());
2365:       assertFalse(node4.isComma());
2366:       assertFalse(node4.isThis());
2367:       assertFalse(node4.isReturn());
2368:       assertFalse(node4.isDec());
2369:       assertFalse(node4.hasChildren());
2370:       assertFalse(node4.isInstanceOf());
2371:       assertFalse(node4.isAssign());
2372:       assertFalse(node4.hasMoreThanOneChild());
2373:       assertFalse(node4.isTypeOf());
2374:       assertFalse(node4.isObjectLit());
2375:       assertEquals(39, node4.getType());
2376:       assertFalse(node4.isHook());
2377:       assertFalse(node4.isWhile());
2378:       assertFalse(node4.hasOneChild());
2379:       assertFalse(node4.isNew());
2380:       assertFalse(node4.isAdd());
2381:       assertFalse(node4.isStringKey());
2382:       assertEquals(213038, node4.getSourcePosition());
2383:       assertFalse(node4.isCall());
2384:       assertFalse(node4.isBreak());
2385:       assertFalse(node4.isSwitch());
2386:       assertFalse(node4.isName());
2387:       assertFalse(node4.isLabel());
2388:       assertFalse(node4.isNull());
2389:       assertEquals(0, node4.getChildCount());
2390:       assertFalse(node4.isOr());
2391:       assertFalse(node4.isEmpty());
2392:       assertFalse(node4.isVar());
2393:       assertFalse(node4.isDefaultCase());
2394:       assertFalse(node4.isDo());
2395:       assertFalse(node4.isAssignAdd());
2396:       
2397:       node0.isNumber();
2398:       assertEquals(56, Node.CHANGE_TIME);
2399:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2400:       assertEquals(37, Node.OPT_ARG_NAME);
2401:       assertEquals(29, Node.JSDOC_INFO_PROP);
2402:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2403:       assertEquals(46, Node.IS_NAMESPACE);
2404:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2405:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2406:       assertEquals(36, Node.QUOTED_PROP);
2407:       assertEquals(49, Node.DIRECT_EVAL);
2408:       assertEquals(1, Node.DECR_FLAG);
2409:       assertEquals(32, Node.INCRDECR_PROP);
2410:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2411:       assertEquals(4095, Node.COLUMN_MASK);
2412:       assertEquals(12, Node.COLUMN_BITS);
2413:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2414:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2415:       assertEquals(50, Node.FREE_CALL);
2416:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2417:       assertEquals(8, Node.FLAG_NO_THROWS);
2418:       assertEquals(40, Node.ORIGINALNAME_PROP);
2419:       assertEquals(48, Node.DIRECTIVES);
2420:       assertEquals(39, Node.EMPTY_BLOCK);
2421:       assertEquals(52, Node.LENGTH);
2422:       assertEquals(54, Node.SLASH_V);
2423:       assertEquals(57, Node.REFLECTED_OBJECT);
2424:       assertEquals(30, Node.VAR_ARGS_NAME);
2425:       assertEquals(43, Node.IS_CONSTANT_NAME);
2426:       assertEquals(57, Node.LAST_PROP);
2427:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2428:       assertEquals(55, Node.INFERRED_FUNCTION);
2429:       assertEquals(53, Node.INPUT_ID);
2430:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2431:       assertEquals(2, Node.POST_FLAG);
2432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2433:       assertEquals(47, Node.IS_DISPATCHER);
2434:       assertFalse(node0.isBreak());
2435:       assertFalse(node0.isComma());
2436:       assertFalse(node0.isFalse());
2437:       assertFalse(node0.isGetProp());
2438:       assertFalse(node0.isObjectLit());
2439:       assertFalse(node0.isAnd());
2440:       assertEquals((-1), node0.getCharno());
2441:       assertFalse(node0.isWith());
2442:       assertFalse(node0.isNot());
2443:       assertFalse(node0.isCase());
2444:       assertFalse(node0.isExprResult());
2445:       assertFalse(node0.isString());
2446:       assertFalse(node0.isScript());
2447:       assertFalse(node0.isInstanceOf());
2448:       assertFalse(node0.isHook());
2449:       assertFalse(node0.hasOneChild());
2450:       assertTrue(node0.isNumber());
2451:       assertFalse(node0.isThis());
2452:       assertFalse(node0.isDec());
2453:       assertFalse(node0.isTypeOf());
2454:       assertFalse(node0.hasChildren());
2455:       assertFalse(node0.isAssign());
2456:       assertFalse(node0.isDelProp());
2457:       assertFalse(node0.isLabelName());
2458:       assertFalse(node0.isGetterDef());
2459:       assertFalse(node0.isGetElem());
2460:       assertFalse(node0.isEmpty());
2461:       
2462:       node0.isGetElem();
2463:       assertEquals(56, Node.CHANGE_TIME);
2464:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2465:       assertEquals(37, Node.OPT_ARG_NAME);
2466:       assertEquals(29, Node.JSDOC_INFO_PROP);
2467:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2468:       assertEquals(46, Node.IS_NAMESPACE);
2469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2470:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2471:       assertEquals(36, Node.QUOTED_PROP);
2472:       assertEquals(49, Node.DIRECT_EVAL);
2473:       assertEquals(1, Node.DECR_FLAG);
2474:       assertEquals(32, Node.INCRDECR_PROP);
2475:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2476:       assertEquals(4095, Node.COLUMN_MASK);
2477:       assertEquals(12, Node.COLUMN_BITS);
2478:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2479:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2480:       assertEquals(50, Node.FREE_CALL);
2481:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2482:       assertEquals(8, Node.FLAG_NO_THROWS);
2483:       assertEquals(40, Node.ORIGINALNAME_PROP);
2484:       assertEquals(48, Node.DIRECTIVES);
2485:       assertEquals(39, Node.EMPTY_BLOCK);
2486:       assertEquals(52, Node.LENGTH);
2487:       assertEquals(54, Node.SLASH_V);
2488:       assertEquals(57, Node.REFLECTED_OBJECT);
2489:       assertEquals(30, Node.VAR_ARGS_NAME);
2490:       assertEquals(43, Node.IS_CONSTANT_NAME);
2491:       assertEquals(57, Node.LAST_PROP);
2492:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2493:       assertEquals(55, Node.INFERRED_FUNCTION);
2494:       assertEquals(53, Node.INPUT_ID);
2495:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2496:       assertEquals(2, Node.POST_FLAG);
2497:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2498:       assertEquals(47, Node.IS_DISPATCHER);
2499:       
2500:       node1.toString();
2501:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2502:       assertEquals(39, Node.EMPTY_BLOCK);
2503:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2504:       assertEquals(48, Node.DIRECTIVES);
2505:       assertEquals(55, Node.INFERRED_FUNCTION);
2506:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2507:       assertEquals(57, Node.REFLECTED_OBJECT);
2508:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2509:       assertEquals(52, Node.LENGTH);
2510:       assertEquals(50, Node.FREE_CALL);
2511:       assertEquals(8, Node.FLAG_NO_THROWS);
2512:       assertEquals(43, Node.IS_CONSTANT_NAME);
2513:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2514:       assertEquals(54, Node.SLASH_V);
2515:       assertEquals(53, Node.INPUT_ID);
2516:       assertEquals(57, Node.LAST_PROP);
2517:       assertEquals(40, Node.ORIGINALNAME_PROP);
2518:       assertEquals(30, Node.VAR_ARGS_NAME);
2519:       assertEquals(2, Node.POST_FLAG);
2520:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2521:       assertEquals(37, Node.OPT_ARG_NAME);
2522:       assertEquals(56, Node.CHANGE_TIME);
2523:       assertEquals(47, Node.IS_DISPATCHER);
2524:       assertEquals(32, Node.INCRDECR_PROP);
2525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2526:       assertEquals(46, Node.IS_NAMESPACE);
2527:       assertEquals(29, Node.JSDOC_INFO_PROP);
2528:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2529:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2530:       assertEquals(36, Node.QUOTED_PROP);
2531:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2532:       assertEquals(49, Node.DIRECT_EVAL);
2533:       assertEquals(1, Node.DECR_FLAG);
2534:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2535:       assertEquals(4095, Node.COLUMN_MASK);
2536:       assertEquals(12, Node.COLUMN_BITS);
2537:   }
2538: }
RegularFileObject[/tmp/EvoSuite_179_1628157533665/com/google/javascript/rhino/Node_179_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_179_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_179_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_179_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:54.246 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());

Iterable<Node> iterable0 = node0.children();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());

node0.isDec();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());

Node node1 = new Node(15, 0, 48);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(15, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());

Node node2 = node0.clonePropsFrom(node1);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals(48, node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(15, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertTrue(node2.isNumber());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertEquals(39, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isAnd());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isObjectLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isNull());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVoid());

node0.isFromExterns();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());

node0.isBreak();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());

Node node3 = node0.srcrefTree(node2);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals(48, node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(15, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertTrue(node2.isNumber());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertEquals(39, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isAnd());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isObjectLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isNull());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isObjectLit());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isScript());
assertFalse(node3.isThrow());
assertFalse(node3.isGetProp());
assertFalse(node3.isCast());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isFalse());
assertFalse(node3.isAnd());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());
assertFalse(node3.isIn());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isGetterDef());
assertEquals(39, node3.getType());
assertFalse(node3.isFor());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTry());
assertFalse(node3.isVar());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isTypeOf());
assertFalse(node3.isLabel());
assertFalse(node3.isOr());
assertFalse(node3.isDec());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.hasChildren());
assertFalse(node3.isEmpty());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertTrue(node3.isNumber());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isAssign());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isNull());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());

node0.isCatch();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());

Node node4 = Node.newNumber(0.0, 52, 46);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node4.isVoid());
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertFalse(node4.isIf());
assertFalse(node4.isArrayLit());
assertFalse(node4.isDelProp());
assertFalse(node4.isParamList());
assertFalse(node4.isGetterDef());
assertFalse(node4.isCase());
assertFalse(node4.isFor());
assertTrue(node4.isNumber());
assertFalse(node4.isTry());
assertFalse(node4.isInc());
assertFalse(node4.isBlock());
assertFalse(node4.isString());
assertFalse(node4.isContinue());
assertFalse(node4.isFalse());
assertEquals(46, node4.getCharno());
assertFalse(node4.isNE());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isThrow());
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertFalse(node4.isWith());
assertEquals(52, node4.getLineno());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isCast());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isReturn());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAssign());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isTypeOf());
assertFalse(node4.isObjectLit());
assertEquals(39, node4.getType());
assertFalse(node4.isHook());
assertFalse(node4.isWhile());
assertFalse(node4.hasOneChild());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isStringKey());
assertEquals(213038, node4.getSourcePosition());
assertFalse(node4.isCall());
assertFalse(node4.isBreak());
assertFalse(node4.isSwitch());
assertFalse(node4.isName());
assertFalse(node4.isLabel());
assertFalse(node4.isNull());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertFalse(node4.isVar());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());

node4.isQuotedString();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node4.isVoid());
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertFalse(node4.isIf());
assertFalse(node4.isArrayLit());
assertFalse(node4.isDelProp());
assertFalse(node4.isParamList());
assertFalse(node4.isGetterDef());
assertFalse(node4.isCase());
assertFalse(node4.isFor());
assertTrue(node4.isNumber());
assertFalse(node4.isTry());
assertFalse(node4.isInc());
assertFalse(node4.isBlock());
assertFalse(node4.isString());
assertFalse(node4.isContinue());
assertFalse(node4.isFalse());
assertEquals(46, node4.getCharno());
assertFalse(node4.isNE());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isThrow());
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertFalse(node4.isWith());
assertEquals(52, node4.getLineno());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isCast());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isReturn());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAssign());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isTypeOf());
assertFalse(node4.isObjectLit());
assertEquals(39, node4.getType());
assertFalse(node4.isHook());
assertFalse(node4.isWhile());
assertFalse(node4.hasOneChild());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isStringKey());
assertEquals(213038, node4.getSourcePosition());
assertFalse(node4.isCall());
assertFalse(node4.isBreak());
assertFalse(node4.isSwitch());
assertFalse(node4.isName());
assertFalse(node4.isLabel());
assertFalse(node4.isNull());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertFalse(node4.isVar());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());

node0.getDirectives();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());

node4.getDouble();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node4.isVoid());
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertFalse(node4.isIf());
assertFalse(node4.isArrayLit());
assertFalse(node4.isDelProp());
assertFalse(node4.isParamList());
assertFalse(node4.isGetterDef());
assertFalse(node4.isCase());
assertFalse(node4.isFor());
assertTrue(node4.isNumber());
assertFalse(node4.isTry());
assertFalse(node4.isInc());
assertFalse(node4.isBlock());
assertFalse(node4.isString());
assertFalse(node4.isContinue());
assertFalse(node4.isFalse());
assertEquals(46, node4.getCharno());
assertFalse(node4.isNE());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isThrow());
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertFalse(node4.isWith());
assertEquals(52, node4.getLineno());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isCast());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isReturn());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAssign());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isTypeOf());
assertFalse(node4.isObjectLit());
assertEquals(39, node4.getType());
assertFalse(node4.isHook());
assertFalse(node4.isWhile());
assertFalse(node4.hasOneChild());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isStringKey());
assertEquals(213038, node4.getSourcePosition());
assertFalse(node4.isCall());
assertFalse(node4.isBreak());
assertFalse(node4.isSwitch());
assertFalse(node4.isName());
assertFalse(node4.isLabel());
assertFalse(node4.isNull());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertFalse(node4.isVar());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());

node0.getParent();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());

node2.hasChild(node4);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals(48, node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertEquals(0, node1.getLineno());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isNot());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(15, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertTrue(node2.isNumber());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertEquals(39, node2.getType());
assertFalse(node2.isNew());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isAnd());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isObjectLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isGetElem());
assertFalse(node2.isNull());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node4.isVoid());
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertFalse(node4.isIf());
assertFalse(node4.isArrayLit());
assertFalse(node4.isDelProp());
assertFalse(node4.isParamList());
assertFalse(node4.isGetterDef());
assertFalse(node4.isCase());
assertFalse(node4.isFor());
assertTrue(node4.isNumber());
assertFalse(node4.isTry());
assertFalse(node4.isInc());
assertFalse(node4.isBlock());
assertFalse(node4.isString());
assertFalse(node4.isContinue());
assertFalse(node4.isFalse());
assertEquals(46, node4.getCharno());
assertFalse(node4.isNE());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isThrow());
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertFalse(node4.isWith());
assertEquals(52, node4.getLineno());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isCast());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isReturn());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAssign());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isTypeOf());
assertFalse(node4.isObjectLit());
assertEquals(39, node4.getType());
assertFalse(node4.isHook());
assertFalse(node4.isWhile());
assertFalse(node4.hasOneChild());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isStringKey());
assertEquals(213038, node4.getSourcePosition());
assertFalse(node4.isCall());
assertFalse(node4.isBreak());
assertFalse(node4.isSwitch());
assertFalse(node4.isName());
assertFalse(node4.isLabel());
assertFalse(node4.isNull());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertFalse(node4.isVar());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());

node0.isNumber();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isThis());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());

node0.isGetElem();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

node1.toString();
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);


[MASTER] 09:58:55.851 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_185_1628157535457/com/google/javascript/rhino/Node_185_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_185_1628157535457/com/google/javascript/rhino/Node_185_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:55.851 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:55.851 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:55.852 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1117
[MASTER] 09:58:55.853 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_185_1628157535457/com/google/javascript/rhino/Node_185_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:55 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_185_tmp__ESTest extends Node_185_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(2158.781507950104, 37, 120);
22:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
23:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
24:       assertEquals(29, Node.JSDOC_INFO_PROP);
25:       assertEquals(53, Node.INPUT_ID);
26:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
27:       assertEquals(37, Node.OPT_ARG_NAME);
28:       assertEquals(36, Node.QUOTED_PROP);
29:       assertEquals(43, Node.IS_CONSTANT_NAME);
30:       assertEquals(56, Node.CHANGE_TIME);
31:       assertEquals(46, Node.IS_NAMESPACE);
32:       assertEquals(51, Node.STATIC_SOURCE_FILE);
33:       assertEquals(4095, Node.COLUMN_MASK);
34:       assertEquals(1, Node.DECR_FLAG);
35:       assertEquals(49, Node.DIRECT_EVAL);
36:       assertEquals(32, Node.INCRDECR_PROP);
37:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
38:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
39:       assertEquals(12, Node.COLUMN_BITS);
40:       assertEquals(50, Node.FREE_CALL);
41:       assertEquals(52, Node.LENGTH);
42:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
43:       assertEquals(40, Node.ORIGINALNAME_PROP);
44:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
45:       assertEquals(8, Node.FLAG_NO_THROWS);
46:       assertEquals(48, Node.DIRECTIVES);
47:       assertEquals(57, Node.REFLECTED_OBJECT);
48:       assertEquals(54, Node.SLASH_V);
49:       assertEquals(55, Node.INFERRED_FUNCTION);
50:       assertEquals(15, Node.NO_SIDE_EFFECTS);
51:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
52:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
53:       assertEquals(39, Node.EMPTY_BLOCK);
54:       assertEquals(57, Node.LAST_PROP);
55:       assertEquals(2, Node.POST_FLAG);
56:       assertEquals(30, Node.VAR_ARGS_NAME);
57:       assertEquals(47, Node.IS_DISPATCHER);
58:       assertFalse(node0.isCall());
59:       assertFalse(node0.isName());
60:       assertEquals(37, node0.getLineno());
61:       assertFalse(node0.isNull());
62:       assertFalse(node0.isStringKey());
63:       assertFalse(node0.isParamList());
64:       assertEquals(39, node0.getType());
65:       assertFalse(node0.isRegExp());
66:       assertFalse(node0.isCatch());
67:       assertFalse(node0.hasMoreThanOneChild());
68:       assertFalse(node0.isBlock());
69:       assertFalse(node0.isTry());
70:       assertFalse(node0.isDec());
71:       assertFalse(node0.hasChildren());
72:       assertFalse(node0.isReturn());
73:       assertFalse(node0.isWhile());
74:       assertEquals(120, node0.getCharno());
75:       assertFalse(node0.isCast());
76:       assertFalse(node0.isDebugger());
77:       assertFalse(node0.isIf());
78:       assertFalse(node0.isNE());
79:       assertFalse(node0.isContinue());
80:       assertFalse(node0.isIn());
81:       assertFalse(node0.isInc());
82:       assertFalse(node0.isFunction());
83:       assertFalse(node0.isSetterDef());
84:       assertEquals(151672, node0.getSourcePosition());
85:       assertFalse(node0.isThrow());
86:       assertFalse(node0.isFalse());
87:       assertFalse(node0.isBreak());
88:       assertFalse(node0.isSwitch());
89:       assertFalse(node0.isAnd());
90:       assertFalse(node0.isObjectLit());
91:       assertFalse(node0.isNot());
92:       assertFalse(node0.isCase());
93:       assertFalse(node0.isWith());
94:       assertFalse(node0.isScript());
95:       assertFalse(node0.isInstanceOf());
96:       assertFalse(node0.isString());
97:       assertFalse(node0.isGetProp());
98:       assertFalse(node0.isThis());
99:       assertFalse(node0.isComma());
100:       assertTrue(node0.isNumber());
101:       assertFalse(node0.isHook());
102:       assertFalse(node0.isFor());
103:       assertFalse(node0.isGetElem());
104:       assertFalse(node0.isAssign());
105:       assertFalse(node0.isLabelName());
106:       assertFalse(node0.isArrayLit());
107:       assertFalse(node0.hasOneChild());
108:       assertFalse(node0.isGetterDef());
109:       assertFalse(node0.isTypeOf());
110:       assertFalse(node0.isEmpty());
111:       assertFalse(node0.isVoid());
112:       assertFalse(node0.isExprResult());
113:       assertFalse(node0.isTrue());
114:       assertFalse(node0.isOr());
115:       assertFalse(node0.isDelProp());
116:       assertFalse(node0.isDo());
117:       assertEquals(0, node0.getChildCount());
118:       assertFalse(node0.isAdd());
119:       assertFalse(node0.isLabel());
120:       assertFalse(node0.isNew());
121:       assertFalse(node0.isDefaultCase());
122:       assertFalse(node0.isAssignAdd());
123:       assertFalse(node0.isVar());
124:       assertNotNull(node0);
125:       
126:       boolean boolean0 = node0.isOptionalArg();
127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
128:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
129:       assertEquals(29, Node.JSDOC_INFO_PROP);
130:       assertEquals(53, Node.INPUT_ID);
131:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
132:       assertEquals(37, Node.OPT_ARG_NAME);
133:       assertEquals(36, Node.QUOTED_PROP);
134:       assertEquals(43, Node.IS_CONSTANT_NAME);
135:       assertEquals(56, Node.CHANGE_TIME);
136:       assertEquals(46, Node.IS_NAMESPACE);
137:       assertEquals(51, Node.STATIC_SOURCE_FILE);
138:       assertEquals(4095, Node.COLUMN_MASK);
139:       assertEquals(1, Node.DECR_FLAG);
140:       assertEquals(49, Node.DIRECT_EVAL);
141:       assertEquals(32, Node.INCRDECR_PROP);
142:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
143:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
144:       assertEquals(12, Node.COLUMN_BITS);
145:       assertEquals(50, Node.FREE_CALL);
146:       assertEquals(52, Node.LENGTH);
147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
148:       assertEquals(40, Node.ORIGINALNAME_PROP);
149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(48, Node.DIRECTIVES);
152:       assertEquals(57, Node.REFLECTED_OBJECT);
153:       assertEquals(54, Node.SLASH_V);
154:       assertEquals(55, Node.INFERRED_FUNCTION);
155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
157:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
158:       assertEquals(39, Node.EMPTY_BLOCK);
159:       assertEquals(57, Node.LAST_PROP);
160:       assertEquals(2, Node.POST_FLAG);
161:       assertEquals(30, Node.VAR_ARGS_NAME);
162:       assertEquals(47, Node.IS_DISPATCHER);
163:       assertFalse(node0.isCall());
164:       assertFalse(node0.isName());
165:       assertEquals(37, node0.getLineno());
166:       assertFalse(node0.isNull());
167:       assertFalse(node0.isStringKey());
168:       assertFalse(node0.isParamList());
169:       assertEquals(39, node0.getType());
170:       assertFalse(node0.isRegExp());
171:       assertFalse(node0.isCatch());
172:       assertFalse(node0.hasMoreThanOneChild());
173:       assertFalse(node0.isBlock());
174:       assertFalse(node0.isTry());
175:       assertFalse(node0.isDec());
176:       assertFalse(node0.hasChildren());
177:       assertFalse(node0.isReturn());
178:       assertFalse(node0.isWhile());
179:       assertEquals(120, node0.getCharno());
180:       assertFalse(node0.isCast());
181:       assertFalse(node0.isDebugger());
182:       assertFalse(node0.isIf());
183:       assertFalse(node0.isNE());
184:       assertFalse(node0.isContinue());
185:       assertFalse(node0.isIn());
186:       assertFalse(node0.isInc());
187:       assertFalse(node0.isFunction());
188:       assertFalse(node0.isSetterDef());
189:       assertEquals(151672, node0.getSourcePosition());
190:       assertFalse(node0.isThrow());
191:       assertFalse(node0.isFalse());
192:       assertFalse(node0.isBreak());
193:       assertFalse(node0.isSwitch());
194:       assertFalse(node0.isAnd());
195:       assertFalse(node0.isObjectLit());
196:       assertFalse(node0.isNot());
197:       assertFalse(node0.isCase());
198:       assertFalse(node0.isWith());
199:       assertFalse(node0.isScript());
200:       assertFalse(node0.isInstanceOf());
201:       assertFalse(node0.isString());
202:       assertFalse(node0.isGetProp());
203:       assertFalse(node0.isThis());
204:       assertFalse(node0.isComma());
205:       assertTrue(node0.isNumber());
206:       assertFalse(node0.isHook());
207:       assertFalse(node0.isFor());
208:       assertFalse(node0.isGetElem());
209:       assertFalse(node0.isAssign());
210:       assertFalse(node0.isLabelName());
211:       assertFalse(node0.isArrayLit());
212:       assertFalse(node0.hasOneChild());
213:       assertFalse(node0.isGetterDef());
214:       assertFalse(node0.isTypeOf());
215:       assertFalse(node0.isEmpty());
216:       assertFalse(node0.isVoid());
217:       assertFalse(node0.isExprResult());
218:       assertFalse(node0.isTrue());
219:       assertFalse(node0.isOr());
220:       assertFalse(node0.isDelProp());
221:       assertFalse(node0.isDo());
222:       assertEquals(0, node0.getChildCount());
223:       assertFalse(node0.isAdd());
224:       assertFalse(node0.isLabel());
225:       assertFalse(node0.isNew());
226:       assertFalse(node0.isDefaultCase());
227:       assertFalse(node0.isAssignAdd());
228:       assertFalse(node0.isVar());
229:       assertFalse(boolean0);
230:       
231:       boolean boolean1 = node0.isUnscopedQualifiedName();
232:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
233:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
234:       assertEquals(29, Node.JSDOC_INFO_PROP);
235:       assertEquals(53, Node.INPUT_ID);
236:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
237:       assertEquals(37, Node.OPT_ARG_NAME);
238:       assertEquals(36, Node.QUOTED_PROP);
239:       assertEquals(43, Node.IS_CONSTANT_NAME);
240:       assertEquals(56, Node.CHANGE_TIME);
241:       assertEquals(46, Node.IS_NAMESPACE);
242:       assertEquals(51, Node.STATIC_SOURCE_FILE);
243:       assertEquals(4095, Node.COLUMN_MASK);
244:       assertEquals(1, Node.DECR_FLAG);
245:       assertEquals(49, Node.DIRECT_EVAL);
246:       assertEquals(32, Node.INCRDECR_PROP);
247:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
248:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
249:       assertEquals(12, Node.COLUMN_BITS);
250:       assertEquals(50, Node.FREE_CALL);
251:       assertEquals(52, Node.LENGTH);
252:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
253:       assertEquals(40, Node.ORIGINALNAME_PROP);
254:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
255:       assertEquals(8, Node.FLAG_NO_THROWS);
256:       assertEquals(48, Node.DIRECTIVES);
257:       assertEquals(57, Node.REFLECTED_OBJECT);
258:       assertEquals(54, Node.SLASH_V);
259:       assertEquals(55, Node.INFERRED_FUNCTION);
260:       assertEquals(15, Node.NO_SIDE_EFFECTS);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
263:       assertEquals(39, Node.EMPTY_BLOCK);
264:       assertEquals(57, Node.LAST_PROP);
265:       assertEquals(2, Node.POST_FLAG);
266:       assertEquals(30, Node.VAR_ARGS_NAME);
267:       assertEquals(47, Node.IS_DISPATCHER);
268:       assertFalse(node0.isCall());
269:       assertFalse(node0.isName());
270:       assertEquals(37, node0.getLineno());
271:       assertFalse(node0.isNull());
272:       assertFalse(node0.isStringKey());
273:       assertFalse(node0.isParamList());
274:       assertEquals(39, node0.getType());
275:       assertFalse(node0.isRegExp());
276:       assertFalse(node0.isCatch());
277:       assertFalse(node0.hasMoreThanOneChild());
278:       assertFalse(node0.isBlock());
279:       assertFalse(node0.isTry());
280:       assertFalse(node0.isDec());
281:       assertFalse(node0.hasChildren());
282:       assertFalse(node0.isReturn());
283:       assertFalse(node0.isWhile());
284:       assertEquals(120, node0.getCharno());
285:       assertFalse(node0.isCast());
286:       assertFalse(node0.isDebugger());
287:       assertFalse(node0.isIf());
288:       assertFalse(node0.isNE());
289:       assertFalse(node0.isContinue());
290:       assertFalse(node0.isIn());
291:       assertFalse(node0.isInc());
292:       assertFalse(node0.isFunction());
293:       assertFalse(node0.isSetterDef());
294:       assertEquals(151672, node0.getSourcePosition());
295:       assertFalse(node0.isThrow());
296:       assertFalse(node0.isFalse());
297:       assertFalse(node0.isBreak());
298:       assertFalse(node0.isSwitch());
299:       assertFalse(node0.isAnd());
300:       assertFalse(node0.isObjectLit());
301:       assertFalse(node0.isNot());
302:       assertFalse(node0.isCase());
303:       assertFalse(node0.isWith());
304:       assertFalse(node0.isScript());
305:       assertFalse(node0.isInstanceOf());
306:       assertFalse(node0.isString());
307:       assertFalse(node0.isGetProp());
308:       assertFalse(node0.isThis());
309:       assertFalse(node0.isComma());
310:       assertTrue(node0.isNumber());
311:       assertFalse(node0.isHook());
312:       assertFalse(node0.isFor());
313:       assertFalse(node0.isGetElem());
314:       assertFalse(node0.isAssign());
315:       assertFalse(node0.isLabelName());
316:       assertFalse(node0.isArrayLit());
317:       assertFalse(node0.hasOneChild());
318:       assertFalse(node0.isGetterDef());
319:       assertFalse(node0.isTypeOf());
320:       assertFalse(node0.isEmpty());
321:       assertFalse(node0.isVoid());
322:       assertFalse(node0.isExprResult());
323:       assertFalse(node0.isTrue());
324:       assertFalse(node0.isOr());
325:       assertFalse(node0.isDelProp());
326:       assertFalse(node0.isDo());
327:       assertEquals(0, node0.getChildCount());
328:       assertFalse(node0.isAdd());
329:       assertFalse(node0.isLabel());
330:       assertFalse(node0.isNew());
331:       assertFalse(node0.isDefaultCase());
332:       assertFalse(node0.isAssignAdd());
333:       assertFalse(node0.isVar());
334:       assertTrue(boolean1 == boolean0);
335:       assertFalse(boolean1);
336:       
337:       Node node1 = Node.newNumber((double) 12, 16, (-1560));
338:       assertEquals(40, Node.ORIGINALNAME_PROP);
339:       assertEquals(50, Node.FREE_CALL);
340:       assertEquals(57, Node.REFLECTED_OBJECT);
341:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
342:       assertEquals(48, Node.DIRECTIVES);
343:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
344:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
345:       assertEquals(4095, Node.COLUMN_MASK);
346:       assertEquals(1, Node.DECR_FLAG);
347:       assertEquals(51, Node.STATIC_SOURCE_FILE);
348:       assertEquals(12, Node.COLUMN_BITS);
349:       assertEquals(32, Node.INCRDECR_PROP);
350:       assertEquals(46, Node.IS_NAMESPACE);
351:       assertEquals(43, Node.IS_CONSTANT_NAME);
352:       assertEquals(54, Node.SLASH_V);
353:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
354:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
355:       assertEquals(29, Node.JSDOC_INFO_PROP);
356:       assertEquals(56, Node.CHANGE_TIME);
357:       assertEquals(47, Node.IS_DISPATCHER);
358:       assertEquals(2, Node.POST_FLAG);
359:       assertEquals(37, Node.OPT_ARG_NAME);
360:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
361:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
362:       assertEquals(49, Node.DIRECT_EVAL);
363:       assertEquals(30, Node.VAR_ARGS_NAME);
364:       assertEquals(57, Node.LAST_PROP);
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(53, Node.INPUT_ID);
367:       assertEquals(39, Node.EMPTY_BLOCK);
368:       assertEquals(36, Node.QUOTED_PROP);
369:       assertEquals(15, Node.NO_SIDE_EFFECTS);
370:       assertEquals(55, Node.INFERRED_FUNCTION);
371:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
372:       assertEquals(52, Node.LENGTH);
373:       assertEquals(8, Node.FLAG_NO_THROWS);
374:       assertFalse(node1.isEmpty());
375:       assertFalse(node1.isFor());
376:       assertFalse(node1.isNE());
377:       assertFalse(node1.isArrayLit());
378:       assertFalse(node1.isIf());
379:       assertFalse(node1.isDelProp());
380:       assertFalse(node1.isRegExp());
381:       assertFalse(node1.isFunction());
382:       assertFalse(node1.isString());
383:       assertFalse(node1.isCase());
384:       assertFalse(node1.isSwitch());
385:       assertFalse(node1.isTry());
386:       assertTrue(node1.isNumber());
387:       assertFalse(node1.isDebugger());
388:       assertEquals((-1), node1.getCharno());
389:       assertFalse(node1.isGetterDef());
390:       assertFalse(node1.isStringKey());
391:       assertFalse(node1.isBreak());
392:       assertFalse(node1.isNull());
393:       assertFalse(node1.isCall());
394:       assertFalse(node1.isVar());
395:       assertFalse(node1.isParamList());
396:       assertFalse(node1.isName());
397:       assertFalse(node1.isComma());
398:       assertEquals(0, node1.getChildCount());
399:       assertFalse(node1.isDo());
400:       assertFalse(node1.isDefaultCase());
401:       assertFalse(node1.isVoid());
402:       assertFalse(node1.isOr());
403:       assertFalse(node1.isAdd());
404:       assertFalse(node1.isNew());
405:       assertFalse(node1.isTrue());
406:       assertFalse(node1.isAssign());
407:       assertFalse(node1.isLabelName());
408:       assertFalse(node1.hasChildren());
409:       assertFalse(node1.isGetElem());
410:       assertFalse(node1.hasOneChild());
411:       assertFalse(node1.isLabel());
412:       assertFalse(node1.isAssignAdd());
413:       assertEquals((-1), node1.getLineno());
414:       assertFalse(node1.isExprResult());
415:       assertFalse(node1.isReturn());
416:       assertFalse(node1.isCast());
417:       assertFalse(node1.hasMoreThanOneChild());
418:       assertFalse(node1.isDec());
419:       assertFalse(node1.isContinue());
420:       assertFalse(node1.isWith());
421:       assertFalse(node1.isTypeOf());
422:       assertFalse(node1.isNot());
423:       assertEquals(39, node1.getType());
424:       assertFalse(node1.isWhile());
425:       assertFalse(node1.isAnd());
426:       assertFalse(node1.isGetProp());
427:       assertFalse(node1.isScript());
428:       assertEquals((-1), node1.getSourcePosition());
429:       assertFalse(node1.isObjectLit());
430:       assertFalse(node1.isThrow());
431:       assertFalse(node1.isThis());
432:       assertFalse(node1.isBlock());
433:       assertFalse(node1.isHook());
434:       assertFalse(node1.isInstanceOf());
435:       assertFalse(node1.isCatch());
436:       assertFalse(node1.isFalse());
437:       assertFalse(node1.isInc());
438:       assertFalse(node1.isSetterDef());
439:       assertFalse(node1.isIn());
440:       assertNotSame(node1, node0);
441:       assertNotNull(node1);
442:       assertFalse(node1.equals((Object)node0));
443:       
444:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
445:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
446:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
447:       assertEquals(29, Node.JSDOC_INFO_PROP);
448:       assertEquals(53, Node.INPUT_ID);
449:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
450:       assertEquals(37, Node.OPT_ARG_NAME);
451:       assertEquals(36, Node.QUOTED_PROP);
452:       assertEquals(43, Node.IS_CONSTANT_NAME);
453:       assertEquals(56, Node.CHANGE_TIME);
454:       assertEquals(46, Node.IS_NAMESPACE);
455:       assertEquals(51, Node.STATIC_SOURCE_FILE);
456:       assertEquals(4095, Node.COLUMN_MASK);
457:       assertEquals(1, Node.DECR_FLAG);
458:       assertEquals(49, Node.DIRECT_EVAL);
459:       assertEquals(32, Node.INCRDECR_PROP);
460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
461:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
462:       assertEquals(12, Node.COLUMN_BITS);
463:       assertEquals(50, Node.FREE_CALL);
464:       assertEquals(52, Node.LENGTH);
465:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
466:       assertEquals(40, Node.ORIGINALNAME_PROP);
467:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
468:       assertEquals(8, Node.FLAG_NO_THROWS);
469:       assertEquals(48, Node.DIRECTIVES);
470:       assertEquals(57, Node.REFLECTED_OBJECT);
471:       assertEquals(54, Node.SLASH_V);
472:       assertEquals(55, Node.INFERRED_FUNCTION);
473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
474:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
475:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
476:       assertEquals(39, Node.EMPTY_BLOCK);
477:       assertEquals(57, Node.LAST_PROP);
478:       assertEquals(2, Node.POST_FLAG);
479:       assertEquals(30, Node.VAR_ARGS_NAME);
480:       assertEquals(47, Node.IS_DISPATCHER);
481:       assertEquals(40, Node.ORIGINALNAME_PROP);
482:       assertEquals(50, Node.FREE_CALL);
483:       assertEquals(57, Node.REFLECTED_OBJECT);
484:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
485:       assertEquals(48, Node.DIRECTIVES);
486:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
487:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
488:       assertEquals(4095, Node.COLUMN_MASK);
489:       assertEquals(1, Node.DECR_FLAG);
490:       assertEquals(51, Node.STATIC_SOURCE_FILE);
491:       assertEquals(12, Node.COLUMN_BITS);
492:       assertEquals(32, Node.INCRDECR_PROP);
493:       assertEquals(46, Node.IS_NAMESPACE);
494:       assertEquals(43, Node.IS_CONSTANT_NAME);
495:       assertEquals(54, Node.SLASH_V);
496:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
497:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
498:       assertEquals(29, Node.JSDOC_INFO_PROP);
499:       assertEquals(56, Node.CHANGE_TIME);
500:       assertEquals(47, Node.IS_DISPATCHER);
501:       assertEquals(2, Node.POST_FLAG);
502:       assertEquals(37, Node.OPT_ARG_NAME);
503:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
504:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
505:       assertEquals(49, Node.DIRECT_EVAL);
506:       assertEquals(30, Node.VAR_ARGS_NAME);
507:       assertEquals(57, Node.LAST_PROP);
508:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
509:       assertEquals(53, Node.INPUT_ID);
510:       assertEquals(39, Node.EMPTY_BLOCK);
511:       assertEquals(36, Node.QUOTED_PROP);
512:       assertEquals(15, Node.NO_SIDE_EFFECTS);
513:       assertEquals(55, Node.INFERRED_FUNCTION);
514:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
515:       assertEquals(52, Node.LENGTH);
516:       assertEquals(8, Node.FLAG_NO_THROWS);
517:       assertFalse(node0.isCall());
518:       assertFalse(node0.isName());
519:       assertEquals(37, node0.getLineno());
520:       assertFalse(node0.isNull());
521:       assertFalse(node0.isStringKey());
522:       assertFalse(node0.isParamList());
523:       assertEquals(39, node0.getType());
524:       assertFalse(node0.isRegExp());
525:       assertFalse(node0.isCatch());
526:       assertFalse(node0.hasMoreThanOneChild());
527:       assertFalse(node0.isBlock());
528:       assertFalse(node0.isTry());
529:       assertFalse(node0.isDec());
530:       assertFalse(node0.hasChildren());
531:       assertFalse(node0.isReturn());
532:       assertFalse(node0.isWhile());
533:       assertEquals(120, node0.getCharno());
534:       assertFalse(node0.isCast());
535:       assertFalse(node0.isDebugger());
536:       assertFalse(node0.isIf());
537:       assertFalse(node0.isNE());
538:       assertFalse(node0.isContinue());
539:       assertFalse(node0.isIn());
540:       assertFalse(node0.isInc());
541:       assertFalse(node0.isFunction());
542:       assertFalse(node0.isSetterDef());
543:       assertEquals(151672, node0.getSourcePosition());
544:       assertFalse(node0.isThrow());
545:       assertFalse(node0.isFalse());
546:       assertFalse(node0.isBreak());
547:       assertFalse(node0.isSwitch());
548:       assertFalse(node0.isAnd());
549:       assertFalse(node0.isObjectLit());
550:       assertFalse(node0.isNot());
551:       assertFalse(node0.isCase());
552:       assertFalse(node0.isWith());
553:       assertFalse(node0.isScript());
554:       assertFalse(node0.isInstanceOf());
555:       assertFalse(node0.isString());
556:       assertFalse(node0.isGetProp());
557:       assertFalse(node0.isThis());
558:       assertFalse(node0.isComma());
559:       assertTrue(node0.isNumber());
560:       assertFalse(node0.isHook());
561:       assertFalse(node0.isFor());
562:       assertFalse(node0.isGetElem());
563:       assertFalse(node0.isAssign());
564:       assertFalse(node0.isLabelName());
565:       assertFalse(node0.isArrayLit());
566:       assertFalse(node0.hasOneChild());
567:       assertFalse(node0.isGetterDef());
568:       assertFalse(node0.isTypeOf());
569:       assertFalse(node0.isEmpty());
570:       assertFalse(node0.isVoid());
571:       assertFalse(node0.isExprResult());
572:       assertFalse(node0.isTrue());
573:       assertFalse(node0.isOr());
574:       assertFalse(node0.isDelProp());
575:       assertFalse(node0.isDo());
576:       assertEquals(0, node0.getChildCount());
577:       assertFalse(node0.isAdd());
578:       assertFalse(node0.isLabel());
579:       assertFalse(node0.isNew());
580:       assertFalse(node0.isDefaultCase());
581:       assertFalse(node0.isAssignAdd());
582:       assertFalse(node0.isVar());
583:       assertFalse(node1.isEmpty());
584:       assertFalse(node1.isFor());
585:       assertFalse(node1.isNE());
586:       assertFalse(node1.isArrayLit());
587:       assertFalse(node1.isIf());
588:       assertFalse(node1.isDelProp());
589:       assertFalse(node1.isRegExp());
590:       assertFalse(node1.isFunction());
591:       assertFalse(node1.isString());
592:       assertFalse(node1.isCase());
593:       assertFalse(node1.isSwitch());
594:       assertFalse(node1.isTry());
595:       assertTrue(node1.isNumber());
596:       assertFalse(node1.isDebugger());
597:       assertEquals((-1), node1.getCharno());
598:       assertFalse(node1.isGetterDef());
599:       assertFalse(node1.isStringKey());
600:       assertFalse(node1.isBreak());
601:       assertFalse(node1.isNull());
602:       assertFalse(node1.isCall());
603:       assertFalse(node1.isVar());
604:       assertFalse(node1.isParamList());
605:       assertFalse(node1.isName());
606:       assertFalse(node1.isComma());
607:       assertEquals(0, node1.getChildCount());
608:       assertFalse(node1.isDo());
609:       assertFalse(node1.isDefaultCase());
610:       assertFalse(node1.isVoid());
611:       assertFalse(node1.isOr());
612:       assertFalse(node1.isAdd());
613:       assertFalse(node1.isNew());
614:       assertFalse(node1.isTrue());
615:       assertFalse(node1.isAssign());
616:       assertFalse(node1.isLabelName());
617:       assertFalse(node1.hasChildren());
618:       assertFalse(node1.isGetElem());
619:       assertFalse(node1.hasOneChild());
620:       assertFalse(node1.isLabel());
621:       assertFalse(node1.isAssignAdd());
622:       assertEquals((-1), node1.getLineno());
623:       assertFalse(node1.isExprResult());
624:       assertFalse(node1.isReturn());
625:       assertFalse(node1.isCast());
626:       assertFalse(node1.hasMoreThanOneChild());
627:       assertFalse(node1.isDec());
628:       assertFalse(node1.isContinue());
629:       assertFalse(node1.isWith());
630:       assertFalse(node1.isTypeOf());
631:       assertFalse(node1.isNot());
632:       assertEquals(39, node1.getType());
633:       assertFalse(node1.isWhile());
634:       assertFalse(node1.isAnd());
635:       assertFalse(node1.isGetProp());
636:       assertFalse(node1.isScript());
637:       assertEquals((-1), node1.getSourcePosition());
638:       assertFalse(node1.isObjectLit());
639:       assertFalse(node1.isThrow());
640:       assertFalse(node1.isThis());
641:       assertFalse(node1.isBlock());
642:       assertFalse(node1.isHook());
643:       assertFalse(node1.isInstanceOf());
644:       assertFalse(node1.isCatch());
645:       assertFalse(node1.isFalse());
646:       assertFalse(node1.isInc());
647:       assertFalse(node1.isSetterDef());
648:       assertFalse(node1.isIn());
649:       assertNotSame(node0, node1);
650:       assertNotSame(node1, node0);
651:       assertNotNull(node_NodeMismatch0);
652:       assertFalse(node0.equals((Object)node1));
653:       assertFalse(node1.equals((Object)node0));
654:       
655:       int int0 = node0.getIndexOfChild(node1);
656:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
657:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
658:       assertEquals(29, Node.JSDOC_INFO_PROP);
659:       assertEquals(53, Node.INPUT_ID);
660:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
661:       assertEquals(37, Node.OPT_ARG_NAME);
662:       assertEquals(36, Node.QUOTED_PROP);
663:       assertEquals(43, Node.IS_CONSTANT_NAME);
664:       assertEquals(56, Node.CHANGE_TIME);
665:       assertEquals(46, Node.IS_NAMESPACE);
666:       assertEquals(51, Node.STATIC_SOURCE_FILE);
667:       assertEquals(4095, Node.COLUMN_MASK);
668:       assertEquals(1, Node.DECR_FLAG);
669:       assertEquals(49, Node.DIRECT_EVAL);
670:       assertEquals(32, Node.INCRDECR_PROP);
671:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
672:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
673:       assertEquals(12, Node.COLUMN_BITS);
674:       assertEquals(50, Node.FREE_CALL);
675:       assertEquals(52, Node.LENGTH);
676:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
677:       assertEquals(40, Node.ORIGINALNAME_PROP);
678:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
679:       assertEquals(8, Node.FLAG_NO_THROWS);
680:       assertEquals(48, Node.DIRECTIVES);
681:       assertEquals(57, Node.REFLECTED_OBJECT);
682:       assertEquals(54, Node.SLASH_V);
683:       assertEquals(55, Node.INFERRED_FUNCTION);
684:       assertEquals(15, Node.NO_SIDE_EFFECTS);
685:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
687:       assertEquals(39, Node.EMPTY_BLOCK);
688:       assertEquals(57, Node.LAST_PROP);
689:       assertEquals(2, Node.POST_FLAG);
690:       assertEquals(30, Node.VAR_ARGS_NAME);
691:       assertEquals(47, Node.IS_DISPATCHER);
692:       assertEquals(40, Node.ORIGINALNAME_PROP);
693:       assertEquals(50, Node.FREE_CALL);
694:       assertEquals(57, Node.REFLECTED_OBJECT);
695:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
696:       assertEquals(48, Node.DIRECTIVES);
697:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
698:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
699:       assertEquals(4095, Node.COLUMN_MASK);
700:       assertEquals(1, Node.DECR_FLAG);
701:       assertEquals(51, Node.STATIC_SOURCE_FILE);
702:       assertEquals(12, Node.COLUMN_BITS);
703:       assertEquals(32, Node.INCRDECR_PROP);
704:       assertEquals(46, Node.IS_NAMESPACE);
705:       assertEquals(43, Node.IS_CONSTANT_NAME);
706:       assertEquals(54, Node.SLASH_V);
707:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
708:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
709:       assertEquals(29, Node.JSDOC_INFO_PROP);
710:       assertEquals(56, Node.CHANGE_TIME);
711:       assertEquals(47, Node.IS_DISPATCHER);
712:       assertEquals(2, Node.POST_FLAG);
713:       assertEquals(37, Node.OPT_ARG_NAME);
714:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
715:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
716:       assertEquals(49, Node.DIRECT_EVAL);
717:       assertEquals(30, Node.VAR_ARGS_NAME);
718:       assertEquals(57, Node.LAST_PROP);
719:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
720:       assertEquals(53, Node.INPUT_ID);
721:       assertEquals(39, Node.EMPTY_BLOCK);
722:       assertEquals(36, Node.QUOTED_PROP);
723:       assertEquals(15, Node.NO_SIDE_EFFECTS);
724:       assertEquals(55, Node.INFERRED_FUNCTION);
725:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
726:       assertEquals(52, Node.LENGTH);
727:       assertEquals(8, Node.FLAG_NO_THROWS);
728:       assertFalse(node0.isCall());
729:       assertFalse(node0.isName());
730:       assertEquals(37, node0.getLineno());
731:       assertFalse(node0.isNull());
732:       assertFalse(node0.isStringKey());
733:       assertFalse(node0.isParamList());
734:       assertEquals(39, node0.getType());
735:       assertFalse(node0.isRegExp());
736:       assertFalse(node0.isCatch());
737:       assertFalse(node0.hasMoreThanOneChild());
738:       assertFalse(node0.isBlock());
739:       assertFalse(node0.isTry());
740:       assertFalse(node0.isDec());
741:       assertFalse(node0.hasChildren());
742:       assertFalse(node0.isReturn());
743:       assertFalse(node0.isWhile());
744:       assertEquals(120, node0.getCharno());
745:       assertFalse(node0.isCast());
746:       assertFalse(node0.isDebugger());
747:       assertFalse(node0.isIf());
748:       assertFalse(node0.isNE());
749:       assertFalse(node0.isContinue());
750:       assertFalse(node0.isIn());
751:       assertFalse(node0.isInc());
752:       assertFalse(node0.isFunction());
753:       assertFalse(node0.isSetterDef());
754:       assertEquals(151672, node0.getSourcePosition());
755:       assertFalse(node0.isThrow());
756:       assertFalse(node0.isFalse());
757:       assertFalse(node0.isBreak());
758:       assertFalse(node0.isSwitch());
759:       assertFalse(node0.isAnd());
760:       assertFalse(node0.isObjectLit());
761:       assertFalse(node0.isNot());
762:       assertFalse(node0.isCase());
763:       assertFalse(node0.isWith());
764:       assertFalse(node0.isScript());
765:       assertFalse(node0.isInstanceOf());
766:       assertFalse(node0.isString());
767:       assertFalse(node0.isGetProp());
768:       assertFalse(node0.isThis());
769:       assertFalse(node0.isComma());
770:       assertTrue(node0.isNumber());
771:       assertFalse(node0.isHook());
772:       assertFalse(node0.isFor());
773:       assertFalse(node0.isGetElem());
774:       assertFalse(node0.isAssign());
775:       assertFalse(node0.isLabelName());
776:       assertFalse(node0.isArrayLit());
777:       assertFalse(node0.hasOneChild());
778:       assertFalse(node0.isGetterDef());
779:       assertFalse(node0.isTypeOf());
780:       assertFalse(node0.isEmpty());
781:       assertFalse(node0.isVoid());
782:       assertFalse(node0.isExprResult());
783:       assertFalse(node0.isTrue());
784:       assertFalse(node0.isOr());
785:       assertFalse(node0.isDelProp());
786:       assertFalse(node0.isDo());
787:       assertEquals(0, node0.getChildCount());
788:       assertFalse(node0.isAdd());
789:       assertFalse(node0.isLabel());
790:       assertFalse(node0.isNew());
791:       assertFalse(node0.isDefaultCase());
792:       assertFalse(node0.isAssignAdd());
793:       assertFalse(node0.isVar());
794:       assertFalse(node1.isEmpty());
795:       assertFalse(node1.isFor());
796:       assertFalse(node1.isNE());
797:       assertFalse(node1.isArrayLit());
798:       assertFalse(node1.isIf());
799:       assertFalse(node1.isDelProp());
800:       assertFalse(node1.isRegExp());
801:       assertFalse(node1.isFunction());
802:       assertFalse(node1.isString());
803:       assertFalse(node1.isCase());
804:       assertFalse(node1.isSwitch());
805:       assertFalse(node1.isTry());
806:       assertTrue(node1.isNumber());
807:       assertFalse(node1.isDebugger());
808:       assertEquals((-1), node1.getCharno());
809:       assertFalse(node1.isGetterDef());
810:       assertFalse(node1.isStringKey());
811:       assertFalse(node1.isBreak());
812:       assertFalse(node1.isNull());
813:       assertFalse(node1.isCall());
814:       assertFalse(node1.isVar());
815:       assertFalse(node1.isParamList());
816:       assertFalse(node1.isName());
817:       assertFalse(node1.isComma());
818:       assertEquals(0, node1.getChildCount());
819:       assertFalse(node1.isDo());
820:       assertFalse(node1.isDefaultCase());
821:       assertFalse(node1.isVoid());
822:       assertFalse(node1.isOr());
823:       assertFalse(node1.isAdd());
824:       assertFalse(node1.isNew());
825:       assertFalse(node1.isTrue());
826:       assertFalse(node1.isAssign());
827:       assertFalse(node1.isLabelName());
828:       assertFalse(node1.hasChildren());
829:       assertFalse(node1.isGetElem());
830:       assertFalse(node1.hasOneChild());
831:       assertFalse(node1.isLabel());
832:       assertFalse(node1.isAssignAdd());
833:       assertEquals((-1), node1.getLineno());
834:       assertFalse(node1.isExprResult());
835:       assertFalse(node1.isReturn());
836:       assertFalse(node1.isCast());
837:       assertFalse(node1.hasMoreThanOneChild());
838:       assertFalse(node1.isDec());
839:       assertFalse(node1.isContinue());
840:       assertFalse(node1.isWith());
841:       assertFalse(node1.isTypeOf());
842:       assertFalse(node1.isNot());
843:       assertEquals(39, node1.getType());
844:       assertFalse(node1.isWhile());
845:       assertFalse(node1.isAnd());
846:       assertFalse(node1.isGetProp());
847:       assertFalse(node1.isScript());
848:       assertEquals((-1), node1.getSourcePosition());
849:       assertFalse(node1.isObjectLit());
850:       assertFalse(node1.isThrow());
851:       assertFalse(node1.isThis());
852:       assertFalse(node1.isBlock());
853:       assertFalse(node1.isHook());
854:       assertFalse(node1.isInstanceOf());
855:       assertFalse(node1.isCatch());
856:       assertFalse(node1.isFalse());
857:       assertFalse(node1.isInc());
858:       assertFalse(node1.isSetterDef());
859:       assertFalse(node1.isIn());
860:       assertNotSame(node0, node1);
861:       assertNotSame(node1, node0);
862:       assertFalse(node0.equals((Object)node1));
863:       assertFalse(node1.equals((Object)node0));
864:       assertEquals((-1), int0);
865:       
866:       Node node2 = node0.cloneTree();
867:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
868:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
869:       assertEquals(29, Node.JSDOC_INFO_PROP);
870:       assertEquals(53, Node.INPUT_ID);
871:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
872:       assertEquals(37, Node.OPT_ARG_NAME);
873:       assertEquals(36, Node.QUOTED_PROP);
874:       assertEquals(43, Node.IS_CONSTANT_NAME);
875:       assertEquals(56, Node.CHANGE_TIME);
876:       assertEquals(46, Node.IS_NAMESPACE);
877:       assertEquals(51, Node.STATIC_SOURCE_FILE);
878:       assertEquals(4095, Node.COLUMN_MASK);
879:       assertEquals(1, Node.DECR_FLAG);
880:       assertEquals(49, Node.DIRECT_EVAL);
881:       assertEquals(32, Node.INCRDECR_PROP);
882:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
883:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
884:       assertEquals(12, Node.COLUMN_BITS);
885:       assertEquals(50, Node.FREE_CALL);
886:       assertEquals(52, Node.LENGTH);
887:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
888:       assertEquals(40, Node.ORIGINALNAME_PROP);
889:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
890:       assertEquals(8, Node.FLAG_NO_THROWS);
891:       assertEquals(48, Node.DIRECTIVES);
892:       assertEquals(57, Node.REFLECTED_OBJECT);
893:       assertEquals(54, Node.SLASH_V);
894:       assertEquals(55, Node.INFERRED_FUNCTION);
895:       assertEquals(15, Node.NO_SIDE_EFFECTS);
896:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
897:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
898:       assertEquals(39, Node.EMPTY_BLOCK);
899:       assertEquals(57, Node.LAST_PROP);
900:       assertEquals(2, Node.POST_FLAG);
901:       assertEquals(30, Node.VAR_ARGS_NAME);
902:       assertEquals(47, Node.IS_DISPATCHER);
903:       assertEquals(15, Node.NO_SIDE_EFFECTS);
904:       assertEquals(57, Node.LAST_PROP);
905:       assertEquals(30, Node.VAR_ARGS_NAME);
906:       assertEquals(49, Node.DIRECT_EVAL);
907:       assertEquals(52, Node.LENGTH);
908:       assertEquals(12, Node.COLUMN_BITS);
909:       assertEquals(32, Node.INCRDECR_PROP);
910:       assertEquals(1, Node.DECR_FLAG);
911:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
912:       assertEquals(56, Node.CHANGE_TIME);
913:       assertEquals(39, Node.EMPTY_BLOCK);
914:       assertEquals(37, Node.OPT_ARG_NAME);
915:       assertEquals(8, Node.FLAG_NO_THROWS);
916:       assertEquals(48, Node.DIRECTIVES);
917:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
918:       assertEquals(29, Node.JSDOC_INFO_PROP);
919:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
920:       assertEquals(57, Node.REFLECTED_OBJECT);
921:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
922:       assertEquals(43, Node.IS_CONSTANT_NAME);
923:       assertEquals(36, Node.QUOTED_PROP);
924:       assertEquals(53, Node.INPUT_ID);
925:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
926:       assertEquals(55, Node.INFERRED_FUNCTION);
927:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
928:       assertEquals(4095, Node.COLUMN_MASK);
929:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
930:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
931:       assertEquals(47, Node.IS_DISPATCHER);
932:       assertEquals(2, Node.POST_FLAG);
933:       assertEquals(50, Node.FREE_CALL);
934:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
935:       assertEquals(40, Node.ORIGINALNAME_PROP);
936:       assertEquals(51, Node.STATIC_SOURCE_FILE);
937:       assertEquals(46, Node.IS_NAMESPACE);
938:       assertEquals(54, Node.SLASH_V);
939:       assertFalse(node0.isCall());
940:       assertFalse(node0.isName());
941:       assertEquals(37, node0.getLineno());
942:       assertFalse(node0.isNull());
943:       assertFalse(node0.isStringKey());
944:       assertFalse(node0.isParamList());
945:       assertEquals(39, node0.getType());
946:       assertFalse(node0.isRegExp());
947:       assertFalse(node0.isCatch());
948:       assertFalse(node0.hasMoreThanOneChild());
949:       assertFalse(node0.isBlock());
950:       assertFalse(node0.isTry());
951:       assertFalse(node0.isDec());
952:       assertFalse(node0.hasChildren());
953:       assertFalse(node0.isReturn());
954:       assertFalse(node0.isWhile());
955:       assertEquals(120, node0.getCharno());
956:       assertFalse(node0.isCast());
957:       assertFalse(node0.isDebugger());
958:       assertFalse(node0.isIf());
959:       assertFalse(node0.isNE());
960:       assertFalse(node0.isContinue());
961:       assertFalse(node0.isIn());
962:       assertFalse(node0.isInc());
963:       assertFalse(node0.isFunction());
964:       assertFalse(node0.isSetterDef());
965:       assertEquals(151672, node0.getSourcePosition());
966:       assertFalse(node0.isThrow());
967:       assertFalse(node0.isFalse());
968:       assertFalse(node0.isBreak());
969:       assertFalse(node0.isSwitch());
970:       assertFalse(node0.isAnd());
971:       assertFalse(node0.isObjectLit());
972:       assertFalse(node0.isNot());
973:       assertFalse(node0.isCase());
974:       assertFalse(node0.isWith());
975:       assertFalse(node0.isScript());
976:       assertFalse(node0.isInstanceOf());
977:       assertFalse(node0.isString());
978:       assertFalse(node0.isGetProp());
979:       assertFalse(node0.isThis());
980:       assertFalse(node0.isComma());
981:       assertTrue(node0.isNumber());
982:       assertFalse(node0.isHook());
983:       assertFalse(node0.isFor());
984:       assertFalse(node0.isGetElem());
985:       assertFalse(node0.isAssign());
986:       assertFalse(node0.isLabelName());
987:       assertFalse(node0.isArrayLit());
988:       assertFalse(node0.hasOneChild());
989:       assertFalse(node0.isGetterDef());
990:       assertFalse(node0.isTypeOf());
991:       assertFalse(node0.isEmpty());
992:       assertFalse(node0.isVoid());
993:       assertFalse(node0.isExprResult());
994:       assertFalse(node0.isTrue());
995:       assertFalse(node0.isOr());
996:       assertFalse(node0.isDelProp());
997:       assertFalse(node0.isDo());
998:       assertEquals(0, node0.getChildCount());
999:       assertFalse(node0.isAdd());
1000:       assertFalse(node0.isLabel());
1001:       assertFalse(node0.isNew());
1002:       assertFalse(node0.isDefaultCase());
1003:       assertFalse(node0.isAssignAdd());
1004:       assertFalse(node0.isVar());
1005:       assertFalse(node2.isFunction());
1006:       assertFalse(node2.isTrue());
1007:       assertFalse(node2.isVoid());
1008:       assertFalse(node2.isRegExp());
1009:       assertFalse(node2.isDebugger());
1010:       assertFalse(node2.isTry());
1011:       assertFalse(node2.isFor());
1012:       assertFalse(node2.isDefaultCase());
1013:       assertFalse(node2.isSetterDef());
1014:       assertFalse(node2.isNull());
1015:       assertFalse(node2.isNE());
1016:       assertFalse(node2.isEmpty());
1017:       assertFalse(node2.isIn());
1018:       assertFalse(node2.isCatch());
1019:       assertFalse(node2.isCall());
1020:       assertFalse(node2.isName());
1021:       assertFalse(node2.isDelProp());
1022:       assertFalse(node2.isIf());
1023:       assertFalse(node2.isSwitch());
1024:       assertFalse(node2.isNew());
1025:       assertFalse(node2.isBlock());
1026:       assertFalse(node2.isAdd());
1027:       assertFalse(node2.hasMoreThanOneChild());
1028:       assertFalse(node2.isVar());
1029:       assertFalse(node2.isHook());
1030:       assertEquals(39, node2.getType());
1031:       assertFalse(node2.isCase());
1032:       assertFalse(node2.isDo());
1033:       assertFalse(node2.isAssignAdd());
1034:       assertFalse(node2.isParamList());
1035:       assertFalse(node2.isLabel());
1036:       assertEquals(0, node2.getChildCount());
1037:       assertFalse(node2.isGetterDef());
1038:       assertFalse(node2.isArrayLit());
1039:       assertFalse(node2.isLabelName());
1040:       assertFalse(node2.isStringKey());
1041:       assertFalse(node2.isScript());
1042:       assertFalse(node2.isExprResult());
1043:       assertFalse(node2.isWith());
1044:       assertFalse(node2.isNot());
1045:       assertEquals(120, node2.getCharno());
1046:       assertFalse(node2.hasOneChild());
1047:       assertFalse(node2.isComma());
1048:       assertFalse(node2.isThis());
1049:       assertFalse(node2.isTypeOf());
1050:       assertFalse(node2.isDec());
1051:       assertFalse(node2.isBreak());
1052:       assertFalse(node2.hasChildren());
1053:       assertFalse(node2.isAssign());
1054:       assertFalse(node2.isOr());
1055:       assertFalse(node2.isInstanceOf());
1056:       assertFalse(node2.isGetElem());
1057:       assertFalse(node2.isInc());
1058:       assertFalse(node2.isString());
1059:       assertFalse(node2.isContinue());
1060:       assertFalse(node2.isThrow());
1061:       assertFalse(node2.isWhile());
1062:       assertFalse(node2.isReturn());
1063:       assertTrue(node2.isNumber());
1064:       assertEquals(151672, node2.getSourcePosition());
1065:       assertFalse(node2.isGetProp());
1066:       assertEquals(37, node2.getLineno());
1067:       assertFalse(node2.isFalse());
1068:       assertFalse(node2.isCast());
1069:       assertFalse(node2.isObjectLit());
1070:       assertFalse(node2.isAnd());
1071:       assertNotSame(node0, node2);
1072:       assertNotSame(node0, node1);
1073:       assertNotSame(node2, node1);
1074:       assertNotSame(node2, node0);
1075:       assertNotNull(node2);
1076:       assertFalse(node0.equals((Object)node1));
1077:       assertFalse(node2.equals((Object)node1));
1078:       assertFalse(node2.equals((Object)node0));
1079:       
1080:       Iterable<Node> iterable0 = node1.children();
1081:       assertEquals(40, Node.ORIGINALNAME_PROP);
1082:       assertEquals(50, Node.FREE_CALL);
1083:       assertEquals(57, Node.REFLECTED_OBJECT);
1084:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1085:       assertEquals(48, Node.DIRECTIVES);
1086:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1087:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1088:       assertEquals(4095, Node.COLUMN_MASK);
1089:       assertEquals(1, Node.DECR_FLAG);
1090:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1091:       assertEquals(12, Node.COLUMN_BITS);
1092:       assertEquals(32, Node.INCRDECR_PROP);
1093:       assertEquals(46, Node.IS_NAMESPACE);
1094:       assertEquals(43, Node.IS_CONSTANT_NAME);
1095:       assertEquals(54, Node.SLASH_V);
1096:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1097:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1098:       assertEquals(29, Node.JSDOC_INFO_PROP);
1099:       assertEquals(56, Node.CHANGE_TIME);
1100:       assertEquals(47, Node.IS_DISPATCHER);
1101:       assertEquals(2, Node.POST_FLAG);
1102:       assertEquals(37, Node.OPT_ARG_NAME);
1103:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1104:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1105:       assertEquals(49, Node.DIRECT_EVAL);
1106:       assertEquals(30, Node.VAR_ARGS_NAME);
1107:       assertEquals(57, Node.LAST_PROP);
1108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1109:       assertEquals(53, Node.INPUT_ID);
1110:       assertEquals(39, Node.EMPTY_BLOCK);
1111:       assertEquals(36, Node.QUOTED_PROP);
1112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1113:       assertEquals(55, Node.INFERRED_FUNCTION);
1114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1115:       assertEquals(52, Node.LENGTH);
1116:       assertEquals(8, Node.FLAG_NO_THROWS);
1117:       assertFalse(iterable0.contains(node1));
1118:       assertFalse(node1.isEmpty());
1119:       assertFalse(node1.isFor());
1120:       assertFalse(node1.isNE());
1121:       assertFalse(node1.isArrayLit());
1122:       assertFalse(node1.isIf());
1123:       assertFalse(node1.isDelProp());
1124:       assertFalse(node1.isRegExp());
1125:       assertFalse(node1.isFunction());
1126:       assertFalse(node1.isString());
1127:       assertFalse(node1.isCase());
1128:       assertFalse(node1.isSwitch());
1129:       assertFalse(node1.isTry());
1130:       assertTrue(node1.isNumber());
1131:       assertFalse(node1.isDebugger());
1132:       assertEquals((-1), node1.getCharno());
1133:       assertFalse(node1.isGetterDef());
1134:       assertFalse(node1.isStringKey());
1135:       assertFalse(node1.isBreak());
1136:       assertFalse(node1.isNull());
1137:       assertFalse(node1.isCall());
1138:       assertFalse(node1.isVar());
1139:       assertFalse(node1.isParamList());
1140:       assertFalse(node1.isName());
1141:       assertFalse(node1.isComma());
1142:       assertEquals(0, node1.getChildCount());
1143:       assertFalse(node1.isDo());
1144:       assertFalse(node1.isDefaultCase());
1145:       assertFalse(node1.isVoid());
1146:       assertFalse(node1.isOr());
1147:       assertFalse(node1.isAdd());
1148:       assertFalse(node1.isNew());
1149:       assertFalse(node1.isTrue());
1150:       assertFalse(node1.isAssign());
1151:       assertFalse(node1.isLabelName());
1152:       assertFalse(node1.hasChildren());
1153:       assertFalse(node1.isGetElem());
1154:       assertFalse(node1.hasOneChild());
1155:       assertFalse(node1.isLabel());
1156:       assertFalse(node1.isAssignAdd());
1157:       assertEquals((-1), node1.getLineno());
1158:       assertFalse(node1.isExprResult());
1159:       assertFalse(node1.isReturn());
1160:       assertFalse(node1.isCast());
1161:       assertFalse(node1.hasMoreThanOneChild());
1162:       assertFalse(node1.isDec());
1163:       assertFalse(node1.isContinue());
1164:       assertFalse(node1.isWith());
1165:       assertFalse(node1.isTypeOf());
1166:       assertFalse(node1.isNot());
1167:       assertEquals(39, node1.getType());
1168:       assertFalse(node1.isWhile());
1169:       assertFalse(node1.isAnd());
1170:       assertFalse(node1.isGetProp());
1171:       assertFalse(node1.isScript());
1172:       assertEquals((-1), node1.getSourcePosition());
1173:       assertFalse(node1.isObjectLit());
1174:       assertFalse(node1.isThrow());
1175:       assertFalse(node1.isThis());
1176:       assertFalse(node1.isBlock());
1177:       assertFalse(node1.isHook());
1178:       assertFalse(node1.isInstanceOf());
1179:       assertFalse(node1.isCatch());
1180:       assertFalse(node1.isFalse());
1181:       assertFalse(node1.isInc());
1182:       assertFalse(node1.isSetterDef());
1183:       assertFalse(node1.isIn());
1184:       assertNotSame(node1, node2);
1185:       assertNotSame(node1, node0);
1186:       assertNotNull(iterable0);
1187:       assertFalse(node1.equals((Object)node2));
1188:       assertFalse(node1.equals((Object)node0));
1189:       
1190:       boolean boolean2 = node1.isVar();
1191:       assertEquals(40, Node.ORIGINALNAME_PROP);
1192:       assertEquals(50, Node.FREE_CALL);
1193:       assertEquals(57, Node.REFLECTED_OBJECT);
1194:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1195:       assertEquals(48, Node.DIRECTIVES);
1196:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1197:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1198:       assertEquals(4095, Node.COLUMN_MASK);
1199:       assertEquals(1, Node.DECR_FLAG);
1200:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1201:       assertEquals(12, Node.COLUMN_BITS);
1202:       assertEquals(32, Node.INCRDECR_PROP);
1203:       assertEquals(46, Node.IS_NAMESPACE);
1204:       assertEquals(43, Node.IS_CONSTANT_NAME);
1205:       assertEquals(54, Node.SLASH_V);
1206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1207:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1208:       assertEquals(29, Node.JSDOC_INFO_PROP);
1209:       assertEquals(56, Node.CHANGE_TIME);
1210:       assertEquals(47, Node.IS_DISPATCHER);
1211:       assertEquals(2, Node.POST_FLAG);
1212:       assertEquals(37, Node.OPT_ARG_NAME);
1213:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1214:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1215:       assertEquals(49, Node.DIRECT_EVAL);
1216:       assertEquals(30, Node.VAR_ARGS_NAME);
1217:       assertEquals(57, Node.LAST_PROP);
1218:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1219:       assertEquals(53, Node.INPUT_ID);
1220:       assertEquals(39, Node.EMPTY_BLOCK);
1221:       assertEquals(36, Node.QUOTED_PROP);
1222:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1223:       assertEquals(55, Node.INFERRED_FUNCTION);
1224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1225:       assertEquals(52, Node.LENGTH);
1226:       assertEquals(8, Node.FLAG_NO_THROWS);
1227:       assertFalse(node1.isEmpty());
1228:       assertFalse(node1.isFor());
1229:       assertFalse(node1.isNE());
1230:       assertFalse(node1.isArrayLit());
1231:       assertFalse(node1.isIf());
1232:       assertFalse(node1.isDelProp());
1233:       assertFalse(node1.isRegExp());
1234:       assertFalse(node1.isFunction());
1235:       assertFalse(node1.isString());
1236:       assertFalse(node1.isCase());
1237:       assertFalse(node1.isSwitch());
1238:       assertFalse(node1.isTry());
1239:       assertTrue(node1.isNumber());
1240:       assertFalse(node1.isDebugger());
1241:       assertEquals((-1), node1.getCharno());
1242:       assertFalse(node1.isGetterDef());
1243:       assertFalse(node1.isStringKey());
1244:       assertFalse(node1.isBreak());
1245:       assertFalse(node1.isNull());
1246:       assertFalse(node1.isCall());
1247:       assertFalse(node1.isVar());
1248:       assertFalse(node1.isParamList());
1249:       assertFalse(node1.isName());
1250:       assertFalse(node1.isComma());
1251:       assertEquals(0, node1.getChildCount());
1252:       assertFalse(node1.isDo());
1253:       assertFalse(node1.isDefaultCase());
1254:       assertFalse(node1.isVoid());
1255:       assertFalse(node1.isOr());
1256:       assertFalse(node1.isAdd());
1257:       assertFalse(node1.isNew());
1258:       assertFalse(node1.isTrue());
1259:       assertFalse(node1.isAssign());
1260:       assertFalse(node1.isLabelName());
1261:       assertFalse(node1.hasChildren());
1262:       assertFalse(node1.isGetElem());
1263:       assertFalse(node1.hasOneChild());
1264:       assertFalse(node1.isLabel());
1265:       assertFalse(node1.isAssignAdd());
1266:       assertEquals((-1), node1.getLineno());
1267:       assertFalse(node1.isExprResult());
1268:       assertFalse(node1.isReturn());
1269:       assertFalse(node1.isCast());
1270:       assertFalse(node1.hasMoreThanOneChild());
1271:       assertFalse(node1.isDec());
1272:       assertFalse(node1.isContinue());
1273:       assertFalse(node1.isWith());
1274:       assertFalse(node1.isTypeOf());
1275:       assertFalse(node1.isNot());
1276:       assertEquals(39, node1.getType());
1277:       assertFalse(node1.isWhile());
1278:       assertFalse(node1.isAnd());
1279:       assertFalse(node1.isGetProp());
1280:       assertFalse(node1.isScript());
1281:       assertEquals((-1), node1.getSourcePosition());
1282:       assertFalse(node1.isObjectLit());
1283:       assertFalse(node1.isThrow());
1284:       assertFalse(node1.isThis());
1285:       assertFalse(node1.isBlock());
1286:       assertFalse(node1.isHook());
1287:       assertFalse(node1.isInstanceOf());
1288:       assertFalse(node1.isCatch());
1289:       assertFalse(node1.isFalse());
1290:       assertFalse(node1.isInc());
1291:       assertFalse(node1.isSetterDef());
1292:       assertFalse(node1.isIn());
1293:       assertNotSame(node1, node2);
1294:       assertNotSame(node1, node0);
1295:       assertFalse(node1.equals((Object)node2));
1296:       assertFalse(node1.equals((Object)node0));
1297:       assertTrue(boolean2 == boolean0);
1298:       assertTrue(boolean2 == boolean1);
1299:       assertFalse(boolean2);
1300:       
1301:       boolean boolean3 = node0.isAdd();
1302:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1304:       assertEquals(29, Node.JSDOC_INFO_PROP);
1305:       assertEquals(53, Node.INPUT_ID);
1306:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1307:       assertEquals(37, Node.OPT_ARG_NAME);
1308:       assertEquals(36, Node.QUOTED_PROP);
1309:       assertEquals(43, Node.IS_CONSTANT_NAME);
1310:       assertEquals(56, Node.CHANGE_TIME);
1311:       assertEquals(46, Node.IS_NAMESPACE);
1312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1313:       assertEquals(4095, Node.COLUMN_MASK);
1314:       assertEquals(1, Node.DECR_FLAG);
1315:       assertEquals(49, Node.DIRECT_EVAL);
1316:       assertEquals(32, Node.INCRDECR_PROP);
1317:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1318:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1319:       assertEquals(12, Node.COLUMN_BITS);
1320:       assertEquals(50, Node.FREE_CALL);
1321:       assertEquals(52, Node.LENGTH);
1322:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1323:       assertEquals(40, Node.ORIGINALNAME_PROP);
1324:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1325:       assertEquals(8, Node.FLAG_NO_THROWS);
1326:       assertEquals(48, Node.DIRECTIVES);
1327:       assertEquals(57, Node.REFLECTED_OBJECT);
1328:       assertEquals(54, Node.SLASH_V);
1329:       assertEquals(55, Node.INFERRED_FUNCTION);
1330:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1331:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1332:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1333:       assertEquals(39, Node.EMPTY_BLOCK);
1334:       assertEquals(57, Node.LAST_PROP);
1335:       assertEquals(2, Node.POST_FLAG);
1336:       assertEquals(30, Node.VAR_ARGS_NAME);
1337:       assertEquals(47, Node.IS_DISPATCHER);
1338:       assertFalse(node0.isCall());
1339:       assertFalse(node0.isName());
1340:       assertEquals(37, node0.getLineno());
1341:       assertFalse(node0.isNull());
1342:       assertFalse(node0.isStringKey());
1343:       assertFalse(node0.isParamList());
1344:       assertEquals(39, node0.getType());
1345:       assertFalse(node0.isRegExp());
1346:       assertFalse(node0.isCatch());
1347:       assertFalse(node0.hasMoreThanOneChild());
1348:       assertFalse(node0.isBlock());
1349:       assertFalse(node0.isTry());
1350:       assertFalse(node0.isDec());
1351:       assertFalse(node0.hasChildren());
1352:       assertFalse(node0.isReturn());
1353:       assertFalse(node0.isWhile());
1354:       assertEquals(120, node0.getCharno());
1355:       assertFalse(node0.isCast());
1356:       assertFalse(node0.isDebugger());
1357:       assertFalse(node0.isIf());
1358:       assertFalse(node0.isNE());
1359:       assertFalse(node0.isContinue());
1360:       assertFalse(node0.isIn());
1361:       assertFalse(node0.isInc());
1362:       assertFalse(node0.isFunction());
1363:       assertFalse(node0.isSetterDef());
1364:       assertEquals(151672, node0.getSourcePosition());
1365:       assertFalse(node0.isThrow());
1366:       assertFalse(node0.isFalse());
1367:       assertFalse(node0.isBreak());
1368:       assertFalse(node0.isSwitch());
1369:       assertFalse(node0.isAnd());
1370:       assertFalse(node0.isObjectLit());
1371:       assertFalse(node0.isNot());
1372:       assertFalse(node0.isCase());
1373:       assertFalse(node0.isWith());
1374:       assertFalse(node0.isScript());
1375:       assertFalse(node0.isInstanceOf());
1376:       assertFalse(node0.isString());
1377:       assertFalse(node0.isGetProp());
1378:       assertFalse(node0.isThis());
1379:       assertFalse(node0.isComma());
1380:       assertTrue(node0.isNumber());
1381:       assertFalse(node0.isHook());
1382:       assertFalse(node0.isFor());
1383:       assertFalse(node0.isGetElem());
1384:       assertFalse(node0.isAssign());
1385:       assertFalse(node0.isLabelName());
1386:       assertFalse(node0.isArrayLit());
1387:       assertFalse(node0.hasOneChild());
1388:       assertFalse(node0.isGetterDef());
1389:       assertFalse(node0.isTypeOf());
1390:       assertFalse(node0.isEmpty());
1391:       assertFalse(node0.isVoid());
1392:       assertFalse(node0.isExprResult());
1393:       assertFalse(node0.isTrue());
1394:       assertFalse(node0.isOr());
1395:       assertFalse(node0.isDelProp());
1396:       assertFalse(node0.isDo());
1397:       assertEquals(0, node0.getChildCount());
1398:       assertFalse(node0.isAdd());
1399:       assertFalse(node0.isLabel());
1400:       assertFalse(node0.isNew());
1401:       assertFalse(node0.isDefaultCase());
1402:       assertFalse(node0.isAssignAdd());
1403:       assertFalse(node0.isVar());
1404:       assertNotSame(node0, node2);
1405:       assertNotSame(node0, node1);
1406:       assertFalse(node0.equals((Object)node2));
1407:       assertFalse(node0.equals((Object)node1));
1408:       assertTrue(boolean3 == boolean0);
1409:       assertTrue(boolean3 == boolean1);
1410:       assertTrue(boolean3 == boolean2);
1411:       assertFalse(boolean3);
1412:       
1413:       Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
1414:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1415:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1416:       assertEquals(29, Node.JSDOC_INFO_PROP);
1417:       assertEquals(53, Node.INPUT_ID);
1418:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1419:       assertEquals(37, Node.OPT_ARG_NAME);
1420:       assertEquals(36, Node.QUOTED_PROP);
1421:       assertEquals(43, Node.IS_CONSTANT_NAME);
1422:       assertEquals(56, Node.CHANGE_TIME);
1423:       assertEquals(46, Node.IS_NAMESPACE);
1424:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1425:       assertEquals(4095, Node.COLUMN_MASK);
1426:       assertEquals(1, Node.DECR_FLAG);
1427:       assertEquals(49, Node.DIRECT_EVAL);
1428:       assertEquals(32, Node.INCRDECR_PROP);
1429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1430:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1431:       assertEquals(12, Node.COLUMN_BITS);
1432:       assertEquals(50, Node.FREE_CALL);
1433:       assertEquals(52, Node.LENGTH);
1434:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1435:       assertEquals(40, Node.ORIGINALNAME_PROP);
1436:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1437:       assertEquals(8, Node.FLAG_NO_THROWS);
1438:       assertEquals(48, Node.DIRECTIVES);
1439:       assertEquals(57, Node.REFLECTED_OBJECT);
1440:       assertEquals(54, Node.SLASH_V);
1441:       assertEquals(55, Node.INFERRED_FUNCTION);
1442:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1443:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1444:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1445:       assertEquals(39, Node.EMPTY_BLOCK);
1446:       assertEquals(57, Node.LAST_PROP);
1447:       assertEquals(2, Node.POST_FLAG);
1448:       assertEquals(30, Node.VAR_ARGS_NAME);
1449:       assertEquals(47, Node.IS_DISPATCHER);
1450:       assertEquals(40, Node.ORIGINALNAME_PROP);
1451:       assertEquals(50, Node.FREE_CALL);
1452:       assertEquals(57, Node.REFLECTED_OBJECT);
1453:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1454:       assertEquals(48, Node.DIRECTIVES);
1455:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1456:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1457:       assertEquals(4095, Node.COLUMN_MASK);
1458:       assertEquals(1, Node.DECR_FLAG);
1459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1460:       assertEquals(12, Node.COLUMN_BITS);
1461:       assertEquals(32, Node.INCRDECR_PROP);
1462:       assertEquals(46, Node.IS_NAMESPACE);
1463:       assertEquals(43, Node.IS_CONSTANT_NAME);
1464:       assertEquals(54, Node.SLASH_V);
1465:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1466:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1467:       assertEquals(29, Node.JSDOC_INFO_PROP);
1468:       assertEquals(56, Node.CHANGE_TIME);
1469:       assertEquals(47, Node.IS_DISPATCHER);
1470:       assertEquals(2, Node.POST_FLAG);
1471:       assertEquals(37, Node.OPT_ARG_NAME);
1472:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1473:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1474:       assertEquals(49, Node.DIRECT_EVAL);
1475:       assertEquals(30, Node.VAR_ARGS_NAME);
1476:       assertEquals(57, Node.LAST_PROP);
1477:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1478:       assertEquals(53, Node.INPUT_ID);
1479:       assertEquals(39, Node.EMPTY_BLOCK);
1480:       assertEquals(36, Node.QUOTED_PROP);
1481:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1482:       assertEquals(55, Node.INFERRED_FUNCTION);
1483:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1484:       assertEquals(52, Node.LENGTH);
1485:       assertEquals(8, Node.FLAG_NO_THROWS);
1486:       assertEquals(1, Node.DECR_FLAG);
1487:       assertEquals(12, Node.COLUMN_BITS);
1488:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1489:       assertEquals(30, Node.VAR_ARGS_NAME);
1490:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1491:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1492:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1493:       assertEquals(57, Node.LAST_PROP);
1494:       assertEquals(32, Node.INCRDECR_PROP);
1495:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1496:       assertEquals(40, Node.ORIGINALNAME_PROP);
1497:       assertEquals(47, Node.IS_DISPATCHER);
1498:       assertEquals(2, Node.POST_FLAG);
1499:       assertEquals(50, Node.FREE_CALL);
1500:       assertEquals(54, Node.SLASH_V);
1501:       assertEquals(46, Node.IS_NAMESPACE);
1502:       assertEquals(43, Node.IS_CONSTANT_NAME);
1503:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1504:       assertEquals(55, Node.INFERRED_FUNCTION);
1505:       assertEquals(36, Node.QUOTED_PROP);
1506:       assertEquals(4095, Node.COLUMN_MASK);
1507:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1508:       assertEquals(39, Node.EMPTY_BLOCK);
1509:       assertEquals(53, Node.INPUT_ID);
1510:       assertEquals(29, Node.JSDOC_INFO_PROP);
1511:       assertEquals(57, Node.REFLECTED_OBJECT);
1512:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1514:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1515:       assertEquals(52, Node.LENGTH);
1516:       assertEquals(8, Node.FLAG_NO_THROWS);
1517:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1518:       assertEquals(48, Node.DIRECTIVES);
1519:       assertEquals(37, Node.OPT_ARG_NAME);
1520:       assertEquals(56, Node.CHANGE_TIME);
1521:       assertEquals(49, Node.DIRECT_EVAL);
1522:       assertFalse(node0.isCall());
1523:       assertFalse(node0.isName());
1524:       assertEquals(37, node0.getLineno());
1525:       assertFalse(node0.isNull());
1526:       assertFalse(node0.isStringKey());
1527:       assertFalse(node0.isParamList());
1528:       assertEquals(39, node0.getType());
1529:       assertFalse(node0.isRegExp());
1530:       assertFalse(node0.isCatch());
1531:       assertFalse(node0.hasMoreThanOneChild());
1532:       assertFalse(node0.isBlock());
1533:       assertFalse(node0.isTry());
1534:       assertFalse(node0.isDec());
1535:       assertFalse(node0.hasChildren());
1536:       assertFalse(node0.isReturn());
1537:       assertFalse(node0.isWhile());
1538:       assertEquals(120, node0.getCharno());
1539:       assertFalse(node0.isCast());
1540:       assertFalse(node0.isDebugger());
1541:       assertFalse(node0.isIf());
1542:       assertFalse(node0.isNE());
1543:       assertFalse(node0.isContinue());
1544:       assertFalse(node0.isIn());
1545:       assertFalse(node0.isInc());
1546:       assertFalse(node0.isFunction());
1547:       assertFalse(node0.isSetterDef());
1548:       assertEquals(151672, node0.getSourcePosition());
1549:       assertFalse(node0.isThrow());
1550:       assertFalse(node0.isFalse());
1551:       assertFalse(node0.isBreak());
1552:       assertFalse(node0.isSwitch());
1553:       assertFalse(node0.isAnd());
1554:       assertFalse(node0.isObjectLit());
1555:       assertFalse(node0.isNot());
1556:       assertFalse(node0.isCase());
1557:       assertFalse(node0.isWith());
1558:       assertFalse(node0.isScript());
1559:       assertFalse(node0.isInstanceOf());
1560:       assertFalse(node0.isString());
1561:       assertFalse(node0.isGetProp());
1562:       assertFalse(node0.isThis());
1563:       assertFalse(node0.isComma());
1564:       assertTrue(node0.isNumber());
1565:       assertFalse(node0.isHook());
1566:       assertFalse(node0.isFor());
1567:       assertFalse(node0.isGetElem());
1568:       assertFalse(node0.isAssign());
1569:       assertFalse(node0.isLabelName());
1570:       assertFalse(node0.isArrayLit());
1571:       assertFalse(node0.hasOneChild());
1572:       assertFalse(node0.isGetterDef());
1573:       assertFalse(node0.isTypeOf());
1574:       assertFalse(node0.isEmpty());
1575:       assertFalse(node0.isVoid());
1576:       assertFalse(node0.isExprResult());
1577:       assertFalse(node0.isTrue());
1578:       assertFalse(node0.isOr());
1579:       assertFalse(node0.isDelProp());
1580:       assertFalse(node0.isDo());
1581:       assertEquals(0, node0.getChildCount());
1582:       assertFalse(node0.isAdd());
1583:       assertFalse(node0.isLabel());
1584:       assertFalse(node0.isNew());
1585:       assertFalse(node0.isDefaultCase());
1586:       assertFalse(node0.isAssignAdd());
1587:       assertFalse(node0.isVar());
1588:       assertFalse(node1.isEmpty());
1589:       assertFalse(node1.isFor());
1590:       assertFalse(node1.isNE());
1591:       assertFalse(node1.isArrayLit());
1592:       assertFalse(node1.isIf());
1593:       assertFalse(node1.isDelProp());
1594:       assertFalse(node1.isRegExp());
1595:       assertFalse(node1.isFunction());
1596:       assertFalse(node1.isString());
1597:       assertFalse(node1.isCase());
1598:       assertFalse(node1.isSwitch());
1599:       assertFalse(node1.isTry());
1600:       assertTrue(node1.isNumber());
1601:       assertFalse(node1.isDebugger());
1602:       assertFalse(node1.isGetterDef());
1603:       assertFalse(node1.isStringKey());
1604:       assertFalse(node1.isBreak());
1605:       assertFalse(node1.isNull());
1606:       assertFalse(node1.isCall());
1607:       assertFalse(node1.isVar());
1608:       assertFalse(node1.isParamList());
1609:       assertFalse(node1.isName());
1610:       assertFalse(node1.isComma());
1611:       assertEquals(0, node1.getChildCount());
1612:       assertFalse(node1.isDo());
1613:       assertFalse(node1.isDefaultCase());
1614:       assertFalse(node1.isVoid());
1615:       assertFalse(node1.isOr());
1616:       assertFalse(node1.isAdd());
1617:       assertFalse(node1.isNew());
1618:       assertFalse(node1.isTrue());
1619:       assertFalse(node1.isAssign());
1620:       assertFalse(node1.isLabelName());
1621:       assertFalse(node1.hasChildren());
1622:       assertFalse(node1.isGetElem());
1623:       assertEquals(120, node1.getCharno());
1624:       assertFalse(node1.hasOneChild());
1625:       assertFalse(node1.isLabel());
1626:       assertFalse(node1.isAssignAdd());
1627:       assertFalse(node1.isExprResult());
1628:       assertFalse(node1.isReturn());
1629:       assertFalse(node1.isCast());
1630:       assertFalse(node1.hasMoreThanOneChild());
1631:       assertFalse(node1.isDec());
1632:       assertFalse(node1.isContinue());
1633:       assertFalse(node1.isWith());
1634:       assertFalse(node1.isTypeOf());
1635:       assertFalse(node1.isNot());
1636:       assertEquals(39, node1.getType());
1637:       assertFalse(node1.isWhile());
1638:       assertFalse(node1.isAnd());
1639:       assertFalse(node1.isGetProp());
1640:       assertFalse(node1.isScript());
1641:       assertFalse(node1.isObjectLit());
1642:       assertEquals(151672, node1.getSourcePosition());
1643:       assertFalse(node1.isThrow());
1644:       assertFalse(node1.isThis());
1645:       assertFalse(node1.isBlock());
1646:       assertFalse(node1.isHook());
1647:       assertFalse(node1.isInstanceOf());
1648:       assertFalse(node1.isCatch());
1649:       assertEquals(37, node1.getLineno());
1650:       assertFalse(node1.isFalse());
1651:       assertFalse(node1.isInc());
1652:       assertFalse(node1.isSetterDef());
1653:       assertFalse(node1.isIn());
1654:       assertFalse(node3.isCatch());
1655:       assertFalse(node3.isRegExp());
1656:       assertFalse(node3.isFunction());
1657:       assertFalse(node3.isDebugger());
1658:       assertEquals(0, node3.getChildCount());
1659:       assertFalse(node3.isTry());
1660:       assertFalse(node3.isDefaultCase());
1661:       assertFalse(node3.isSetterDef());
1662:       assertFalse(node3.isStringKey());
1663:       assertFalse(node3.isVar());
1664:       assertEquals(37, node3.getLineno());
1665:       assertFalse(node3.isGetterDef());
1666:       assertFalse(node3.isParamList());
1667:       assertFalse(node3.isArrayLit());
1668:       assertFalse(node3.isWhile());
1669:       assertFalse(node3.isString());
1670:       assertFalse(node3.isOr());
1671:       assertFalse(node3.isAdd());
1672:       assertFalse(node3.isNew());
1673:       assertFalse(node3.isLabel());
1674:       assertFalse(node3.isReturn());
1675:       assertFalse(node3.isAssignAdd());
1676:       assertFalse(node3.isDo());
1677:       assertTrue(node3.isNumber());
1678:       assertFalse(node3.isEmpty());
1679:       assertFalse(node3.isName());
1680:       assertFalse(node3.isGetElem());
1681:       assertFalse(node3.isCall());
1682:       assertFalse(node3.isTypeOf());
1683:       assertFalse(node3.isNull());
1684:       assertFalse(node3.hasChildren());
1685:       assertFalse(node3.isComma());
1686:       assertFalse(node3.isAssign());
1687:       assertFalse(node3.isDec());
1688:       assertFalse(node3.isExprResult());
1689:       assertFalse(node3.isTrue());
1690:       assertFalse(node3.isBreak());
1691:       assertFalse(node3.isVoid());
1692:       assertFalse(node3.isDelProp());
1693:       assertFalse(node3.isWith());
1694:       assertFalse(node3.isAnd());
1695:       assertFalse(node3.isObjectLit());
1696:       assertFalse(node3.isNot());
1697:       assertFalse(node3.isGetProp());
1698:       assertFalse(node3.isScript());
1699:       assertEquals(120, node3.getCharno());
1700:       assertFalse(node3.hasOneChild());
1701:       assertFalse(node3.isLabelName());
1702:       assertFalse(node3.isFalse());
1703:       assertFalse(node3.isCast());
1704:       assertFalse(node3.isThrow());
1705:       assertEquals(151672, node3.getSourcePosition());
1706:       assertFalse(node3.isSwitch());
1707:       assertFalse(node3.isCase());
1708:       assertEquals(39, node3.getType());
1709:       assertFalse(node3.isContinue());
1710:       assertFalse(node3.isIn());
1711:       assertFalse(node3.hasMoreThanOneChild());
1712:       assertFalse(node3.isBlock());
1713:       assertFalse(node3.isInc());
1714:       assertFalse(node3.isFor());
1715:       assertFalse(node3.isThis());
1716:       assertFalse(node3.isHook());
1717:       assertFalse(node3.isInstanceOf());
1718:       assertFalse(node3.isNE());
1719:       assertFalse(node3.isIf());
1720:       assertNotSame(node0, node3);
1721:       assertNotSame(node0, node2);
1722:       assertNotSame(node0, node1);
1723:       assertSame(node1, node3);
1724:       assertNotSame(node1, node2);
1725:       assertNotSame(node1, node0);
1726:       assertSame(node3, node1);
1727:       assertNotSame(node3, node0);
1728:       assertNotSame(node3, node2);
1729:       assertNotNull(node3);
1730:       assertFalse(node0.equals((Object)node2));
1731:       assertFalse(node0.equals((Object)node1));
1732:       assertFalse(node1.equals((Object)node2));
1733:       assertFalse(node1.equals((Object)node0));
1734:       assertFalse(node3.equals((Object)node0));
1735:       assertFalse(node3.equals((Object)node2));
1736:       
1737:       int int1 = node3.getIntProp((-388));
1738:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1739:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1740:       assertEquals(29, Node.JSDOC_INFO_PROP);
1741:       assertEquals(53, Node.INPUT_ID);
1742:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1743:       assertEquals(37, Node.OPT_ARG_NAME);
1744:       assertEquals(36, Node.QUOTED_PROP);
1745:       assertEquals(43, Node.IS_CONSTANT_NAME);
1746:       assertEquals(56, Node.CHANGE_TIME);
1747:       assertEquals(46, Node.IS_NAMESPACE);
1748:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1749:       assertEquals(4095, Node.COLUMN_MASK);
1750:       assertEquals(1, Node.DECR_FLAG);
1751:       assertEquals(49, Node.DIRECT_EVAL);
1752:       assertEquals(32, Node.INCRDECR_PROP);
1753:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1754:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1755:       assertEquals(12, Node.COLUMN_BITS);
1756:       assertEquals(50, Node.FREE_CALL);
1757:       assertEquals(52, Node.LENGTH);
1758:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1759:       assertEquals(40, Node.ORIGINALNAME_PROP);
1760:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1761:       assertEquals(8, Node.FLAG_NO_THROWS);
1762:       assertEquals(48, Node.DIRECTIVES);
1763:       assertEquals(57, Node.REFLECTED_OBJECT);
1764:       assertEquals(54, Node.SLASH_V);
1765:       assertEquals(55, Node.INFERRED_FUNCTION);
1766:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1767:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1768:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1769:       assertEquals(39, Node.EMPTY_BLOCK);
1770:       assertEquals(57, Node.LAST_PROP);
1771:       assertEquals(2, Node.POST_FLAG);
1772:       assertEquals(30, Node.VAR_ARGS_NAME);
1773:       assertEquals(47, Node.IS_DISPATCHER);
1774:       assertEquals(40, Node.ORIGINALNAME_PROP);
1775:       assertEquals(50, Node.FREE_CALL);
1776:       assertEquals(57, Node.REFLECTED_OBJECT);
1777:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1778:       assertEquals(48, Node.DIRECTIVES);
1779:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1780:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1781:       assertEquals(4095, Node.COLUMN_MASK);
1782:       assertEquals(1, Node.DECR_FLAG);
1783:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1784:       assertEquals(12, Node.COLUMN_BITS);
1785:       assertEquals(32, Node.INCRDECR_PROP);
1786:       assertEquals(46, Node.IS_NAMESPACE);
1787:       assertEquals(43, Node.IS_CONSTANT_NAME);
1788:       assertEquals(54, Node.SLASH_V);
1789:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1790:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1791:       assertEquals(29, Node.JSDOC_INFO_PROP);
1792:       assertEquals(56, Node.CHANGE_TIME);
1793:       assertEquals(47, Node.IS_DISPATCHER);
1794:       assertEquals(2, Node.POST_FLAG);
1795:       assertEquals(37, Node.OPT_ARG_NAME);
1796:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1797:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1798:       assertEquals(49, Node.DIRECT_EVAL);
1799:       assertEquals(30, Node.VAR_ARGS_NAME);
1800:       assertEquals(57, Node.LAST_PROP);
1801:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1802:       assertEquals(53, Node.INPUT_ID);
1803:       assertEquals(39, Node.EMPTY_BLOCK);
1804:       assertEquals(36, Node.QUOTED_PROP);
1805:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1806:       assertEquals(55, Node.INFERRED_FUNCTION);
1807:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1808:       assertEquals(52, Node.LENGTH);
1809:       assertEquals(8, Node.FLAG_NO_THROWS);
1810:       assertEquals(1, Node.DECR_FLAG);
1811:       assertEquals(12, Node.COLUMN_BITS);
1812:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1813:       assertEquals(30, Node.VAR_ARGS_NAME);
1814:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1815:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1816:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1817:       assertEquals(57, Node.LAST_PROP);
1818:       assertEquals(32, Node.INCRDECR_PROP);
1819:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1820:       assertEquals(40, Node.ORIGINALNAME_PROP);
1821:       assertEquals(47, Node.IS_DISPATCHER);
1822:       assertEquals(2, Node.POST_FLAG);
1823:       assertEquals(50, Node.FREE_CALL);
1824:       assertEquals(54, Node.SLASH_V);
1825:       assertEquals(46, Node.IS_NAMESPACE);
1826:       assertEquals(43, Node.IS_CONSTANT_NAME);
1827:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1828:       assertEquals(55, Node.INFERRED_FUNCTION);
1829:       assertEquals(36, Node.QUOTED_PROP);
1830:       assertEquals(4095, Node.COLUMN_MASK);
1831:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1832:       assertEquals(39, Node.EMPTY_BLOCK);
1833:       assertEquals(53, Node.INPUT_ID);
1834:       assertEquals(29, Node.JSDOC_INFO_PROP);
1835:       assertEquals(57, Node.REFLECTED_OBJECT);
1836:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1837:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1838:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1839:       assertEquals(52, Node.LENGTH);
1840:       assertEquals(8, Node.FLAG_NO_THROWS);
1841:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1842:       assertEquals(48, Node.DIRECTIVES);
1843:       assertEquals(37, Node.OPT_ARG_NAME);
1844:       assertEquals(56, Node.CHANGE_TIME);
1845:       assertEquals(49, Node.DIRECT_EVAL);
1846:       assertFalse(node0.isCall());
1847:       assertFalse(node0.isName());
1848:       assertEquals(37, node0.getLineno());
1849:       assertFalse(node0.isNull());
1850:       assertFalse(node0.isStringKey());
1851:       assertFalse(node0.isParamList());
1852:       assertEquals(39, node0.getType());
1853:       assertFalse(node0.isRegExp());
1854:       assertFalse(node0.isCatch());
1855:       assertFalse(node0.hasMoreThanOneChild());
1856:       assertFalse(node0.isBlock());
1857:       assertFalse(node0.isTry());
1858:       assertFalse(node0.isDec());
1859:       assertFalse(node0.hasChildren());
1860:       assertFalse(node0.isReturn());
1861:       assertFalse(node0.isWhile());
1862:       assertEquals(120, node0.getCharno());
1863:       assertFalse(node0.isCast());
1864:       assertFalse(node0.isDebugger());
1865:       assertFalse(node0.isIf());
1866:       assertFalse(node0.isNE());
1867:       assertFalse(node0.isContinue());
1868:       assertFalse(node0.isIn());
1869:       assertFalse(node0.isInc());
1870:       assertFalse(node0.isFunction());
1871:       assertFalse(node0.isSetterDef());
1872:       assertEquals(151672, node0.getSourcePosition());
1873:       assertFalse(node0.isThrow());
1874:       assertFalse(node0.isFalse());
1875:       assertFalse(node0.isBreak());
1876:       assertFalse(node0.isSwitch());
1877:       assertFalse(node0.isAnd());
1878:       assertFalse(node0.isObjectLit());
1879:       assertFalse(node0.isNot());
1880:       assertFalse(node0.isCase());
1881:       assertFalse(node0.isWith());
1882:       assertFalse(node0.isScript());
1883:       assertFalse(node0.isInstanceOf());
1884:       assertFalse(node0.isString());
1885:       assertFalse(node0.isGetProp());
1886:       assertFalse(node0.isThis());
1887:       assertFalse(node0.isComma());
1888:       assertTrue(node0.isNumber());
1889:       assertFalse(node0.isHook());
1890:       assertFalse(node0.isFor());
1891:       assertFalse(node0.isGetElem());
1892:       assertFalse(node0.isAssign());
1893:       assertFalse(node0.isLabelName());
1894:       assertFalse(node0.isArrayLit());
1895:       assertFalse(node0.hasOneChild());
1896:       assertFalse(node0.isGetterDef());
1897:       assertFalse(node0.isTypeOf());
1898:       assertFalse(node0.isEmpty());
1899:       assertFalse(node0.isVoid());
1900:       assertFalse(node0.isExprResult());
1901:       assertFalse(node0.isTrue());
1902:       assertFalse(node0.isOr());
1903:       assertFalse(node0.isDelProp());
1904:       assertFalse(node0.isDo());
1905:       assertEquals(0, node0.getChildCount());
1906:       assertFalse(node0.isAdd());
1907:       assertFalse(node0.isLabel());
1908:       assertFalse(node0.isNew());
1909:       assertFalse(node0.isDefaultCase());
1910:       assertFalse(node0.isAssignAdd());
1911:       assertFalse(node0.isVar());
1912:       assertFalse(node1.isEmpty());
1913:       assertFalse(node1.isFor());
1914:       assertFalse(node1.isNE());
1915:       assertFalse(node1.isArrayLit());
1916:       assertFalse(node1.isIf());
1917:       assertFalse(node1.isDelProp());
1918:       assertFalse(node1.isRegExp());
1919:       assertFalse(node1.isFunction());
1920:       assertFalse(node1.isString());
1921:       assertFalse(node1.isCase());
1922:       assertFalse(node1.isSwitch());
1923:       assertFalse(node1.isTry());
1924:       assertTrue(node1.isNumber());
1925:       assertFalse(node1.isDebugger());
1926:       assertFalse(node1.isGetterDef());
1927:       assertFalse(node1.isStringKey());
1928:       assertFalse(node1.isBreak());
1929:       assertFalse(node1.isNull());
1930:       assertFalse(node1.isCall());
1931:       assertFalse(node1.isVar());
1932:       assertFalse(node1.isParamList());
1933:       assertFalse(node1.isName());
1934:       assertFalse(node1.isComma());
1935:       assertEquals(0, node1.getChildCount());
1936:       assertFalse(node1.isDo());
1937:       assertFalse(node1.isDefaultCase());
1938:       assertFalse(node1.isVoid());
1939:       assertFalse(node1.isOr());
1940:       assertFalse(node1.isAdd());
1941:       assertFalse(node1.isNew());
1942:       assertFalse(node1.isTrue());
1943:       assertFalse(node1.isAssign());
1944:       assertFalse(node1.isLabelName());
1945:       assertFalse(node1.hasChildren());
1946:       assertFalse(node1.isGetElem());
1947:       assertEquals(120, node1.getCharno());
1948:       assertFalse(node1.hasOneChild());
1949:       assertFalse(node1.isLabel());
1950:       assertFalse(node1.isAssignAdd());
1951:       assertFalse(node1.isExprResult());
1952:       assertFalse(node1.isReturn());
1953:       assertFalse(node1.isCast());
1954:       assertFalse(node1.hasMoreThanOneChild());
1955:       assertFalse(node1.isDec());
1956:       assertFalse(node1.isContinue());
1957:       assertFalse(node1.isWith());
1958:       assertFalse(node1.isTypeOf());
1959:       assertFalse(node1.isNot());
1960:       assertEquals(39, node1.getType());
1961:       assertFalse(node1.isWhile());
1962:       assertFalse(node1.isAnd());
1963:       assertFalse(node1.isGetProp());
1964:       assertFalse(node1.isScript());
1965:       assertFalse(node1.isObjectLit());
1966:       assertEquals(151672, node1.getSourcePosition());
1967:       assertFalse(node1.isThrow());
1968:       assertFalse(node1.isThis());
1969:       assertFalse(node1.isBlock());
1970:       assertFalse(node1.isHook());
1971:       assertFalse(node1.isInstanceOf());
1972:       assertFalse(node1.isCatch());
1973:       assertEquals(37, node1.getLineno());
1974:       assertFalse(node1.isFalse());
1975:       assertFalse(node1.isInc());
1976:       assertFalse(node1.isSetterDef());
1977:       assertFalse(node1.isIn());
1978:       assertFalse(node3.isCatch());
1979:       assertFalse(node3.isRegExp());
1980:       assertFalse(node3.isFunction());
1981:       assertFalse(node3.isDebugger());
1982:       assertEquals(0, node3.getChildCount());
1983:       assertFalse(node3.isTry());
1984:       assertFalse(node3.isDefaultCase());
1985:       assertFalse(node3.isSetterDef());
1986:       assertFalse(node3.isStringKey());
1987:       assertFalse(node3.isVar());
1988:       assertEquals(37, node3.getLineno());
1989:       assertFalse(node3.isGetterDef());
1990:       assertFalse(node3.isParamList());
1991:       assertFalse(node3.isArrayLit());
1992:       assertFalse(node3.isWhile());
1993:       assertFalse(node3.isString());
1994:       assertFalse(node3.isOr());
1995:       assertFalse(node3.isAdd());
1996:       assertFalse(node3.isNew());
1997:       assertFalse(node3.isLabel());
1998:       assertFalse(node3.isReturn());
1999:       assertFalse(node3.isAssignAdd());
2000:       assertFalse(node3.isDo());
2001:       assertTrue(node3.isNumber());
2002:       assertFalse(node3.isEmpty());
2003:       assertFalse(node3.isName());
2004:       assertFalse(node3.isGetElem());
2005:       assertFalse(node3.isCall());
2006:       assertFalse(node3.isTypeOf());
2007:       assertFalse(node3.isNull());
2008:       assertFalse(node3.hasChildren());
2009:       assertFalse(node3.isComma());
2010:       assertFalse(node3.isAssign());
2011:       assertFalse(node3.isDec());
2012:       assertFalse(node3.isExprResult());
2013:       assertFalse(node3.isTrue());
2014:       assertFalse(node3.isBreak());
2015:       assertFalse(node3.isVoid());
2016:       assertFalse(node3.isDelProp());
2017:       assertFalse(node3.isWith());
2018:       assertFalse(node3.isAnd());
2019:       assertFalse(node3.isObjectLit());
2020:       assertFalse(node3.isNot());
2021:       assertFalse(node3.isGetProp());
2022:       assertFalse(node3.isScript());
2023:       assertEquals(120, node3.getCharno());
2024:       assertFalse(node3.hasOneChild());
2025:       assertFalse(node3.isLabelName());
2026:       assertFalse(node3.isFalse());
2027:       assertFalse(node3.isCast());
2028:       assertFalse(node3.isThrow());
2029:       assertEquals(151672, node3.getSourcePosition());
2030:       assertFalse(node3.isSwitch());
2031:       assertFalse(node3.isCase());
2032:       assertEquals(39, node3.getType());
2033:       assertFalse(node3.isContinue());
2034:       assertFalse(node3.isIn());
2035:       assertFalse(node3.hasMoreThanOneChild());
2036:       assertFalse(node3.isBlock());
2037:       assertFalse(node3.isInc());
2038:       assertFalse(node3.isFor());
2039:       assertFalse(node3.isThis());
2040:       assertFalse(node3.isHook());
2041:       assertFalse(node3.isInstanceOf());
2042:       assertFalse(node3.isNE());
2043:       assertFalse(node3.isIf());
2044:       assertNotSame(node0, node3);
2045:       assertNotSame(node0, node2);
2046:       assertNotSame(node0, node1);
2047:       assertSame(node1, node3);
2048:       assertNotSame(node1, node2);
2049:       assertNotSame(node1, node0);
2050:       assertSame(node3, node1);
2051:       assertNotSame(node3, node0);
2052:       assertNotSame(node3, node2);
2053:       assertFalse(node0.equals((Object)node3));
2054:       assertFalse(node0.equals((Object)node2));
2055:       assertFalse(node0.equals((Object)node1));
2056:       assertFalse(node1.equals((Object)node2));
2057:       assertFalse(node1.equals((Object)node0));
2058:       assertFalse(node3.equals((Object)node0));
2059:       assertFalse(node3.equals((Object)node2));
2060:       assertFalse(int1 == int0);
2061:       assertEquals(0, int1);
2062:       
2063:       Node node4 = Node.newNumber(193.08432538156);
2064:       assertEquals(53, Node.INPUT_ID);
2065:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2066:       assertEquals(43, Node.IS_CONSTANT_NAME);
2067:       assertEquals(29, Node.JSDOC_INFO_PROP);
2068:       assertEquals(36, Node.QUOTED_PROP);
2069:       assertEquals(55, Node.INFERRED_FUNCTION);
2070:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2071:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2072:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2073:       assertEquals(46, Node.IS_NAMESPACE);
2074:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2075:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2076:       assertEquals(30, Node.VAR_ARGS_NAME);
2077:       assertEquals(47, Node.IS_DISPATCHER);
2078:       assertEquals(2, Node.POST_FLAG);
2079:       assertEquals(40, Node.ORIGINALNAME_PROP);
2080:       assertEquals(52, Node.LENGTH);
2081:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2082:       assertEquals(54, Node.SLASH_V);
2083:       assertEquals(57, Node.REFLECTED_OBJECT);
2084:       assertEquals(57, Node.LAST_PROP);
2085:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2086:       assertEquals(50, Node.FREE_CALL);
2087:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2088:       assertEquals(1, Node.DECR_FLAG);
2089:       assertEquals(8, Node.FLAG_NO_THROWS);
2090:       assertEquals(39, Node.EMPTY_BLOCK);
2091:       assertEquals(32, Node.INCRDECR_PROP);
2092:       assertEquals(48, Node.DIRECTIVES);
2093:       assertEquals(37, Node.OPT_ARG_NAME);
2094:       assertEquals(12, Node.COLUMN_BITS);
2095:       assertEquals(56, Node.CHANGE_TIME);
2096:       assertEquals(49, Node.DIRECT_EVAL);
2097:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2098:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2099:       assertEquals(4095, Node.COLUMN_MASK);
2100:       assertFalse(node4.isAdd());
2101:       assertFalse(node4.isVar());
2102:       assertFalse(node4.isCall());
2103:       assertFalse(node4.isBlock());
2104:       assertFalse(node4.isNew());
2105:       assertFalse(node4.isStringKey());
2106:       assertFalse(node4.isName());
2107:       assertFalse(node4.isNull());
2108:       assertFalse(node4.isSetterDef());
2109:       assertEquals(0, node4.getChildCount());
2110:       assertFalse(node4.isLabel());
2111:       assertFalse(node4.isParamList());
2112:       assertFalse(node4.isDo());
2113:       assertFalse(node4.isAssignAdd());
2114:       assertFalse(node4.isDefaultCase());
2115:       assertFalse(node4.isContinue());
2116:       assertFalse(node4.isFunction());
2117:       assertFalse(node4.isCast());
2118:       assertFalse(node4.isVoid());
2119:       assertEquals((-1), node4.getSourcePosition());
2120:       assertFalse(node4.isEmpty());
2121:       assertFalse(node4.isTrue());
2122:       assertFalse(node4.isDebugger());
2123:       assertFalse(node4.isObjectLit());
2124:       assertFalse(node4.isOr());
2125:       assertFalse(node4.isNot());
2126:       assertTrue(node4.isNumber());
2127:       assertFalse(node4.isReturn());
2128:       assertFalse(node4.isGetProp());
2129:       assertFalse(node4.isBreak());
2130:       assertFalse(node4.hasChildren());
2131:       assertFalse(node4.isDelProp());
2132:       assertFalse(node4.isWhile());
2133:       assertFalse(node4.isDec());
2134:       assertFalse(node4.isExprResult());
2135:       assertFalse(node4.isGetElem());
2136:       assertFalse(node4.isComma());
2137:       assertFalse(node4.isAssign());
2138:       assertFalse(node4.isTypeOf());
2139:       assertFalse(node4.isHook());
2140:       assertFalse(node4.isThrow());
2141:       assertFalse(node4.isSwitch());
2142:       assertFalse(node4.isString());
2143:       assertFalse(node4.isInc());
2144:       assertEquals((-1), node4.getCharno());
2145:       assertFalse(node4.isIn());
2146:       assertFalse(node4.isAnd());
2147:       assertFalse(node4.isFalse());
2148:       assertFalse(node4.hasOneChild());
2149:       assertFalse(node4.isArrayLit());
2150:       assertFalse(node4.isTry());
2151:       assertFalse(node4.isLabelName());
2152:       assertFalse(node4.isIf());
2153:       assertFalse(node4.isGetterDef());
2154:       assertFalse(node4.isScript());
2155:       assertFalse(node4.isNE());
2156:       assertEquals((-1), node4.getLineno());
2157:       assertFalse(node4.isInstanceOf());
2158:       assertFalse(node4.isCase());
2159:       assertEquals(39, node4.getType());
2160:       assertFalse(node4.isFor());
2161:       assertFalse(node4.isThis());
2162:       assertFalse(node4.isCatch());
2163:       assertFalse(node4.isRegExp());
2164:       assertFalse(node4.hasMoreThanOneChild());
2165:       assertFalse(node4.isWith());
2166:       assertNotSame(node4, node1);
2167:       assertNotSame(node4, node2);
2168:       assertNotSame(node4, node0);
2169:       assertNotSame(node4, node3);
2170:       assertNotNull(node4);
2171:       assertFalse(node4.equals((Object)node1));
2172:       assertFalse(node4.equals((Object)node2));
2173:       assertFalse(node4.equals((Object)node0));
2174:       assertFalse(node4.equals((Object)node3));
2175:       
2176:       node4.addChildToBack(node0);
2177:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2178:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2179:       assertEquals(29, Node.JSDOC_INFO_PROP);
2180:       assertEquals(53, Node.INPUT_ID);
2181:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2182:       assertEquals(37, Node.OPT_ARG_NAME);
2183:       assertEquals(36, Node.QUOTED_PROP);
2184:       assertEquals(43, Node.IS_CONSTANT_NAME);
2185:       assertEquals(56, Node.CHANGE_TIME);
2186:       assertEquals(46, Node.IS_NAMESPACE);
2187:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2188:       assertEquals(4095, Node.COLUMN_MASK);
2189:       assertEquals(1, Node.DECR_FLAG);
2190:       assertEquals(49, Node.DIRECT_EVAL);
2191:       assertEquals(32, Node.INCRDECR_PROP);
2192:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2193:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2194:       assertEquals(12, Node.COLUMN_BITS);
2195:       assertEquals(50, Node.FREE_CALL);
2196:       assertEquals(52, Node.LENGTH);
2197:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2198:       assertEquals(40, Node.ORIGINALNAME_PROP);
2199:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2200:       assertEquals(8, Node.FLAG_NO_THROWS);
2201:       assertEquals(48, Node.DIRECTIVES);
2202:       assertEquals(57, Node.REFLECTED_OBJECT);
2203:       assertEquals(54, Node.SLASH_V);
2204:       assertEquals(55, Node.INFERRED_FUNCTION);
2205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2206:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2208:       assertEquals(39, Node.EMPTY_BLOCK);
2209:       assertEquals(57, Node.LAST_PROP);
2210:       assertEquals(2, Node.POST_FLAG);
2211:       assertEquals(30, Node.VAR_ARGS_NAME);
2212:       assertEquals(47, Node.IS_DISPATCHER);
2213:       assertEquals(53, Node.INPUT_ID);
2214:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2215:       assertEquals(43, Node.IS_CONSTANT_NAME);
2216:       assertEquals(29, Node.JSDOC_INFO_PROP);
2217:       assertEquals(36, Node.QUOTED_PROP);
2218:       assertEquals(55, Node.INFERRED_FUNCTION);
2219:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2221:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2222:       assertEquals(46, Node.IS_NAMESPACE);
2223:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2224:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2225:       assertEquals(30, Node.VAR_ARGS_NAME);
2226:       assertEquals(47, Node.IS_DISPATCHER);
2227:       assertEquals(2, Node.POST_FLAG);
2228:       assertEquals(40, Node.ORIGINALNAME_PROP);
2229:       assertEquals(52, Node.LENGTH);
2230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2231:       assertEquals(54, Node.SLASH_V);
2232:       assertEquals(57, Node.REFLECTED_OBJECT);
2233:       assertEquals(57, Node.LAST_PROP);
2234:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2235:       assertEquals(50, Node.FREE_CALL);
2236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2237:       assertEquals(1, Node.DECR_FLAG);
2238:       assertEquals(8, Node.FLAG_NO_THROWS);
2239:       assertEquals(39, Node.EMPTY_BLOCK);
2240:       assertEquals(32, Node.INCRDECR_PROP);
2241:       assertEquals(48, Node.DIRECTIVES);
2242:       assertEquals(37, Node.OPT_ARG_NAME);
2243:       assertEquals(12, Node.COLUMN_BITS);
2244:       assertEquals(56, Node.CHANGE_TIME);
2245:       assertEquals(49, Node.DIRECT_EVAL);
2246:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2247:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2248:       assertEquals(4095, Node.COLUMN_MASK);
2249:       assertFalse(node0.isCall());
2250:       assertFalse(node0.isName());
2251:       assertEquals(37, node0.getLineno());
2252:       assertFalse(node0.isNull());
2253:       assertFalse(node0.isStringKey());
2254:       assertFalse(node0.isParamList());
2255:       assertEquals(39, node0.getType());
2256:       assertFalse(node0.isRegExp());
2257:       assertFalse(node0.isCatch());
2258:       assertFalse(node0.hasMoreThanOneChild());
2259:       assertFalse(node0.isBlock());
2260:       assertFalse(node0.isTry());
2261:       assertFalse(node0.isDec());
2262:       assertFalse(node0.hasChildren());
2263:       assertFalse(node0.isReturn());
2264:       assertFalse(node0.isWhile());
2265:       assertEquals(120, node0.getCharno());
2266:       assertFalse(node0.isCast());
2267:       assertFalse(node0.isDebugger());
2268:       assertFalse(node0.isIf());
2269:       assertFalse(node0.isNE());
2270:       assertFalse(node0.isContinue());
2271:       assertFalse(node0.isIn());
2272:       assertFalse(node0.isInc());
2273:       assertFalse(node0.isFunction());
2274:       assertFalse(node0.isSetterDef());
2275:       assertEquals(151672, node0.getSourcePosition());
2276:       assertFalse(node0.isThrow());
2277:       assertFalse(node0.isFalse());
2278:       assertFalse(node0.isBreak());
2279:       assertFalse(node0.isSwitch());
2280:       assertFalse(node0.isAnd());
2281:       assertFalse(node0.isObjectLit());
2282:       assertFalse(node0.isNot());
2283:       assertFalse(node0.isCase());
2284:       assertFalse(node0.isWith());
2285:       assertFalse(node0.isScript());
2286:       assertFalse(node0.isInstanceOf());
2287:       assertFalse(node0.isString());
2288:       assertFalse(node0.isGetProp());
2289:       assertFalse(node0.isThis());
2290:       assertFalse(node0.isComma());
2291:       assertTrue(node0.isNumber());
2292:       assertFalse(node0.isHook());
2293:       assertFalse(node0.isFor());
2294:       assertFalse(node0.isGetElem());
2295:       assertFalse(node0.isAssign());
2296:       assertFalse(node0.isLabelName());
2297:       assertFalse(node0.isArrayLit());
2298:       assertFalse(node0.hasOneChild());
2299:       assertFalse(node0.isGetterDef());
2300:       assertFalse(node0.isTypeOf());
2301:       assertFalse(node0.isEmpty());
2302:       assertFalse(node0.isVoid());
2303:       assertFalse(node0.isExprResult());
2304:       assertFalse(node0.isTrue());
2305:       assertFalse(node0.isOr());
2306:       assertFalse(node0.isDelProp());
2307:       assertFalse(node0.isDo());
2308:       assertEquals(0, node0.getChildCount());
2309:       assertFalse(node0.isAdd());
2310:       assertFalse(node0.isLabel());
2311:       assertFalse(node0.isNew());
2312:       assertFalse(node0.isDefaultCase());
2313:       assertFalse(node0.isAssignAdd());
2314:       assertFalse(node0.isVar());
2315:       assertFalse(node4.isAdd());
2316:       assertFalse(node4.isVar());
2317:       assertFalse(node4.isCall());
2318:       assertFalse(node4.isBlock());
2319:       assertFalse(node4.isNew());
2320:       assertFalse(node4.isStringKey());
2321:       assertFalse(node4.isName());
2322:       assertFalse(node4.isNull());
2323:       assertFalse(node4.isSetterDef());
2324:       assertFalse(node4.isLabel());
2325:       assertFalse(node4.isParamList());
2326:       assertFalse(node4.isDo());
2327:       assertFalse(node4.isAssignAdd());
2328:       assertFalse(node4.isDefaultCase());
2329:       assertFalse(node4.isContinue());
2330:       assertFalse(node4.isFunction());
2331:       assertFalse(node4.isCast());
2332:       assertFalse(node4.isVoid());
2333:       assertEquals((-1), node4.getSourcePosition());
2334:       assertFalse(node4.isEmpty());
2335:       assertFalse(node4.isTrue());
2336:       assertFalse(node4.isDebugger());
2337:       assertFalse(node4.isObjectLit());
2338:       assertFalse(node4.isOr());
2339:       assertFalse(node4.isNot());
2340:       assertTrue(node4.isNumber());
2341:       assertFalse(node4.isReturn());
2342:       assertFalse(node4.isGetProp());
2343:       assertFalse(node4.isBreak());
2344:       assertFalse(node4.isDelProp());
2345:       assertFalse(node4.isWhile());
2346:       assertFalse(node4.isDec());
2347:       assertFalse(node4.isExprResult());
2348:       assertFalse(node4.isGetElem());
2349:       assertTrue(node4.hasOneChild());
2350:       assertFalse(node4.isComma());
2351:       assertFalse(node4.isAssign());
2352:       assertFalse(node4.isTypeOf());
2353:       assertFalse(node4.isHook());
2354:       assertFalse(node4.isThrow());
2355:       assertFalse(node4.isSwitch());
2356:       assertFalse(node4.isString());
2357:       assertFalse(node4.isInc());
2358:       assertEquals((-1), node4.getCharno());
2359:       assertFalse(node4.isIn());
2360:       assertFalse(node4.isAnd());
2361:       assertFalse(node4.isFalse());
2362:       assertFalse(node4.isArrayLit());
2363:       assertFalse(node4.isTry());
2364:       assertFalse(node4.isLabelName());
2365:       assertFalse(node4.isIf());
2366:       assertFalse(node4.isGetterDef());
2367:       assertFalse(node4.isScript());
2368:       assertFalse(node4.isNE());
2369:       assertEquals((-1), node4.getLineno());
2370:       assertEquals(1, node4.getChildCount());
2371:       assertFalse(node4.isInstanceOf());
2372:       assertTrue(node4.hasChildren());
2373:       assertFalse(node4.isCase());
2374:       assertEquals(39, node4.getType());
2375:       assertFalse(node4.isFor());
2376:       assertFalse(node4.isThis());
2377:       assertFalse(node4.isCatch());
2378:       assertFalse(node4.isRegExp());
2379:       assertFalse(node4.hasMoreThanOneChild());
2380:       assertFalse(node4.isWith());
2381:       assertNotSame(node0, node4);
2382:       assertNotSame(node0, node3);
2383:       assertNotSame(node0, node2);
2384:       assertNotSame(node0, node1);
2385:       assertNotSame(node4, node1);
2386:       assertNotSame(node4, node2);
2387:       assertNotSame(node4, node0);
2388:       assertNotSame(node4, node3);
2389:       assertFalse(node0.equals((Object)node4));
2390:       assertFalse(node0.equals((Object)node3));
2391:       assertFalse(node0.equals((Object)node2));
2392:       assertFalse(node0.equals((Object)node1));
2393:       assertFalse(node4.equals((Object)node1));
2394:       assertFalse(node4.equals((Object)node2));
2395:       assertFalse(node4.equals((Object)node0));
2396:       assertFalse(node4.equals((Object)node3));
2397:       
2398:       String string0 = node4.toString();
2399:       assertEquals(53, Node.INPUT_ID);
2400:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2401:       assertEquals(43, Node.IS_CONSTANT_NAME);
2402:       assertEquals(29, Node.JSDOC_INFO_PROP);
2403:       assertEquals(36, Node.QUOTED_PROP);
2404:       assertEquals(55, Node.INFERRED_FUNCTION);
2405:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2406:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2407:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2408:       assertEquals(46, Node.IS_NAMESPACE);
2409:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2410:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2411:       assertEquals(30, Node.VAR_ARGS_NAME);
2412:       assertEquals(47, Node.IS_DISPATCHER);
2413:       assertEquals(2, Node.POST_FLAG);
2414:       assertEquals(40, Node.ORIGINALNAME_PROP);
2415:       assertEquals(52, Node.LENGTH);
2416:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2417:       assertEquals(54, Node.SLASH_V);
2418:       assertEquals(57, Node.REFLECTED_OBJECT);
2419:       assertEquals(57, Node.LAST_PROP);
2420:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2421:       assertEquals(50, Node.FREE_CALL);
2422:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2423:       assertEquals(1, Node.DECR_FLAG);
2424:       assertEquals(8, Node.FLAG_NO_THROWS);
2425:       assertEquals(39, Node.EMPTY_BLOCK);
2426:       assertEquals(32, Node.INCRDECR_PROP);
2427:       assertEquals(48, Node.DIRECTIVES);
2428:       assertEquals(37, Node.OPT_ARG_NAME);
2429:       assertEquals(12, Node.COLUMN_BITS);
2430:       assertEquals(56, Node.CHANGE_TIME);
2431:       assertEquals(49, Node.DIRECT_EVAL);
2432:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2434:       assertEquals(4095, Node.COLUMN_MASK);
2435:       assertFalse(node4.isAdd());
2436:       assertFalse(node4.isVar());
2437:       assertFalse(node4.isCall());
2438:       assertFalse(node4.isBlock());
2439:       assertFalse(node4.isNew());
2440:       assertFalse(node4.isStringKey());
2441:       assertFalse(node4.isName());
2442:       assertFalse(node4.isNull());
2443:       assertFalse(node4.isSetterDef());
2444:       assertFalse(node4.isLabel());
2445:       assertFalse(node4.isParamList());
2446:       assertFalse(node4.isDo());
2447:       assertFalse(node4.isAssignAdd());
2448:       assertFalse(node4.isDefaultCase());
2449:       assertFalse(node4.isContinue());
2450:       assertFalse(node4.isFunction());
2451:       assertFalse(node4.isCast());
2452:       assertFalse(node4.isVoid());
2453:       assertEquals((-1), node4.getSourcePosition());
2454:       assertFalse(node4.isEmpty());
2455:       assertFalse(node4.isTrue());
2456:       assertFalse(node4.isDebugger());
2457:       assertFalse(node4.isObjectLit());
2458:       assertFalse(node4.isOr());
2459:       assertFalse(node4.isNot());
2460:       assertTrue(node4.isNumber());
2461:       assertFalse(node4.isReturn());
2462:       assertFalse(node4.isGetProp());
2463:       assertFalse(node4.isBreak());
2464:       assertFalse(node4.isDelProp());
2465:       assertFalse(node4.isWhile());
2466:       assertFalse(node4.isDec());
2467:       assertFalse(node4.isExprResult());
2468:       assertFalse(node4.isGetElem());
2469:       assertTrue(node4.hasOneChild());
2470:       assertFalse(node4.isComma());
2471:       assertFalse(node4.isAssign());
2472:       assertFalse(node4.isTypeOf());
2473:       assertFalse(node4.isHook());
2474:       assertFalse(node4.isThrow());
2475:       assertFalse(node4.isSwitch());
2476:       assertFalse(node4.isString());
2477:       assertFalse(node4.isInc());
2478:       assertEquals((-1), node4.getCharno());
2479:       assertFalse(node4.isIn());
2480:       assertFalse(node4.isAnd());
2481:       assertFalse(node4.isFalse());
2482:       assertFalse(node4.isArrayLit());
2483:       assertFalse(node4.isTry());
2484:       assertFalse(node4.isLabelName());
2485:       assertFalse(node4.isIf());
2486:       assertFalse(node4.isGetterDef());
2487:       assertFalse(node4.isScript());
2488:       assertFalse(node4.isNE());
2489:       assertEquals((-1), node4.getLineno());
2490:       assertEquals(1, node4.getChildCount());
2491:       assertFalse(node4.isInstanceOf());
2492:       assertTrue(node4.hasChildren());
2493:       assertFalse(node4.isCase());
2494:       assertEquals(39, node4.getType());
2495:       assertFalse(node4.isFor());
2496:       assertFalse(node4.isThis());
2497:       assertFalse(node4.isCatch());
2498:       assertFalse(node4.isRegExp());
2499:       assertFalse(node4.hasMoreThanOneChild());
2500:       assertFalse(node4.isWith());
2501:       assertNotSame(node4, node1);
2502:       assertNotSame(node4, node2);
2503:       assertNotSame(node4, node0);
2504:       assertNotSame(node4, node3);
2505:       assertNotNull(string0);
2506:       assertFalse(node4.equals((Object)node1));
2507:       assertFalse(node4.equals((Object)node2));
2508:       assertFalse(node4.equals((Object)node0));
2509:       assertFalse(node4.equals((Object)node3));
2510:       assertEquals("NUMBER 193.08432538156", string0);
2511:       
2512:       // Undeclared exception!
2513:       try { 
2514:         node4.getChildBefore(node2);
2515:         fail("Expecting exception: RuntimeException");
2516:       
2517:       } catch(RuntimeException e) {
2518:          //
2519:          // node is not a child
2520:          //
2521:          verifyException("com.google.javascript.rhino.Node", e);
2522:       }
2523:   }
2524: }
RegularFileObject[/tmp/EvoSuite_185_1628157535457/com/google/javascript/rhino/Node_185_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:55 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_185_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_185_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_185_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:58:56.021 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(2158.781507950104, 37, 120);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(120, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(151672, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertNotNull(node0);

boolean boolean0 = node0.isOptionalArg();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(120, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(151672, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(boolean0);

boolean boolean1 = node0.isUnscopedQualifiedName();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(120, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(151672, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

Node node1 = Node.newNumber((double) 12, 16, (-1560));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(120, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(151672, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

int int0 = node0.getIndexOfChild(node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(120, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(151672, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals((-1), int0);

Node node2 = node0.cloneTree();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(120, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(151672, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertEquals(39, node2.getType());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertEquals(120, node2.getCharno());
assertFalse(node2.hasOneChild());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetElem());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isThrow());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertTrue(node2.isNumber());
assertEquals(151672, node2.getSourcePosition());
assertFalse(node2.isGetProp());
assertEquals(37, node2.getLineno());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));

Iterable<Node> iterable0 = node1.children();
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(iterable0.contains(node1));
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));

boolean boolean2 = node1.isVar();
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);

boolean boolean3 = node0.isAdd();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(120, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(151672, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);

Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(120, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(151672, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertEquals(120, node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertEquals(151672, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isTry());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertEquals(37, node3.getLineno());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertTrue(node3.isNumber());
assertFalse(node3.isEmpty());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertEquals(120, node3.getCharno());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabelName());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertEquals(151672, node3.getSourcePosition());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertEquals(39, node3.getType());
assertFalse(node3.isContinue());
assertFalse(node3.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertSame(node3, node1);
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertNotNull(node3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));

int int1 = node3.getIntProp((-388));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(120, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(151672, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertEquals(120, node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertEquals(151672, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(37, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isTry());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertEquals(37, node3.getLineno());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertTrue(node3.isNumber());
assertFalse(node3.isEmpty());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isBreak());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertEquals(120, node3.getCharno());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabelName());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertEquals(151672, node3.getSourcePosition());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertEquals(39, node3.getType());
assertFalse(node3.isContinue());
assertFalse(node3.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertSame(node3, node1);
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(int1 == int0);
assertEquals(0, int1);

Node node4 = Node.newNumber(193.08432538156);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node4.isAdd());
assertFalse(node4.isVar());
assertFalse(node4.isCall());
assertFalse(node4.isBlock());
assertFalse(node4.isNew());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isNull());
assertFalse(node4.isSetterDef());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertFalse(node4.isParamList());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isVoid());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isEmpty());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isObjectLit());
assertFalse(node4.isOr());
assertFalse(node4.isNot());
assertTrue(node4.isNumber());
assertFalse(node4.isReturn());
assertFalse(node4.isGetProp());
assertFalse(node4.isBreak());
assertFalse(node4.hasChildren());
assertFalse(node4.isDelProp());
assertFalse(node4.isWhile());
assertFalse(node4.isDec());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertFalse(node4.isComma());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isHook());
assertFalse(node4.isThrow());
assertFalse(node4.isSwitch());
assertFalse(node4.isString());
assertFalse(node4.isInc());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isIn());
assertFalse(node4.isAnd());
assertFalse(node4.isFalse());
assertFalse(node4.hasOneChild());
assertFalse(node4.isArrayLit());
assertFalse(node4.isTry());
assertFalse(node4.isLabelName());
assertFalse(node4.isIf());
assertFalse(node4.isGetterDef());
assertFalse(node4.isScript());
assertFalse(node4.isNE());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCase());
assertEquals(39, node4.getType());
assertFalse(node4.isFor());
assertFalse(node4.isThis());
assertFalse(node4.isCatch());
assertFalse(node4.isRegExp());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isWith());
assertNotSame(node4, node1);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertNotSame(node4, node3);
assertNotNull(node4);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));

node4.addChildToBack(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(37, node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(39, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(120, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertEquals(151672, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node4.isAdd());
assertFalse(node4.isVar());
assertFalse(node4.isCall());
assertFalse(node4.isBlock());
assertFalse(node4.isNew());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isNull());
assertFalse(node4.isSetterDef());
assertFalse(node4.isLabel());
assertFalse(node4.isParamList());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isVoid());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isEmpty());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isObjectLit());
assertFalse(node4.isOr());
assertFalse(node4.isNot());
assertTrue(node4.isNumber());
assertFalse(node4.isReturn());
assertFalse(node4.isGetProp());
assertFalse(node4.isBreak());
assertFalse(node4.isDelProp());
assertFalse(node4.isWhile());
assertFalse(node4.isDec());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertTrue(node4.hasOneChild());
assertFalse(node4.isComma());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isHook());
assertFalse(node4.isThrow());
assertFalse(node4.isSwitch());
assertFalse(node4.isString());
assertFalse(node4.isInc());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isIn());
assertFalse(node4.isAnd());
assertFalse(node4.isFalse());
assertFalse(node4.isArrayLit());
assertFalse(node4.isTry());
assertFalse(node4.isLabelName());
assertFalse(node4.isIf());
assertFalse(node4.isGetterDef());
assertFalse(node4.isScript());
assertFalse(node4.isNE());
assertEquals((-1), node4.getLineno());
assertEquals(1, node4.getChildCount());
assertFalse(node4.isInstanceOf());
assertTrue(node4.hasChildren());
assertFalse(node4.isCase());
assertEquals(39, node4.getType());
assertFalse(node4.isFor());
assertFalse(node4.isThis());
assertFalse(node4.isCatch());
assertFalse(node4.isRegExp());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isWith());
assertNotSame(node0, node4);
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node4, node1);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertNotSame(node4, node3);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));

String string0 = node4.toString();
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node4.isAdd());
assertFalse(node4.isVar());
assertFalse(node4.isCall());
assertFalse(node4.isBlock());
assertFalse(node4.isNew());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isNull());
assertFalse(node4.isSetterDef());
assertFalse(node4.isLabel());
assertFalse(node4.isParamList());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isVoid());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isEmpty());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isObjectLit());
assertFalse(node4.isOr());
assertFalse(node4.isNot());
assertTrue(node4.isNumber());
assertFalse(node4.isReturn());
assertFalse(node4.isGetProp());
assertFalse(node4.isBreak());
assertFalse(node4.isDelProp());
assertFalse(node4.isWhile());
assertFalse(node4.isDec());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertTrue(node4.hasOneChild());
assertFalse(node4.isComma());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isHook());
assertFalse(node4.isThrow());
assertFalse(node4.isSwitch());
assertFalse(node4.isString());
assertFalse(node4.isInc());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isIn());
assertFalse(node4.isAnd());
assertFalse(node4.isFalse());
assertFalse(node4.isArrayLit());
assertFalse(node4.isTry());
assertFalse(node4.isLabelName());
assertFalse(node4.isIf());
assertFalse(node4.isGetterDef());
assertFalse(node4.isScript());
assertFalse(node4.isNE());
assertEquals((-1), node4.getLineno());
assertEquals(1, node4.getChildCount());
assertFalse(node4.isInstanceOf());
assertTrue(node4.hasChildren());
assertFalse(node4.isCase());
assertEquals(39, node4.getType());
assertFalse(node4.isFor());
assertFalse(node4.isThis());
assertFalse(node4.isCatch());
assertFalse(node4.isRegExp());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isWith());
assertNotSame(node4, node1);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertNotSame(node4, node3);
assertNotNull(string0);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertEquals("NUMBER 193.08432538156", string0);

node4.getChildBefore(node2);

[MASTER] 09:59:06.424 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_235_1628157546378/com/google/javascript/rhino/Node_235_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_235_1628157546378/com/google/javascript/rhino/Node_235_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:06.424 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:06.424 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:06.425 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 590
[MASTER] 09:59:06.425 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_235_1628157546378/com/google/javascript/rhino/Node_235_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:06 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_235_tmp__ESTest extends Node_235_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
24:       assertFalse(boolean0);
25:       
26:       Node node0 = Node.newNumber(949.2, 9, 9);
27:       assertEquals(52, Node.LENGTH);
28:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
29:       assertEquals(54, Node.SLASH_V);
30:       assertEquals(57, Node.REFLECTED_OBJECT);
31:       assertEquals(30, Node.VAR_ARGS_NAME);
32:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
33:       assertEquals(15, Node.NO_SIDE_EFFECTS);
34:       assertEquals(57, Node.LAST_PROP);
35:       assertEquals(32, Node.INCRDECR_PROP);
36:       assertEquals(1, Node.DECR_FLAG);
37:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
38:       assertEquals(46, Node.IS_NAMESPACE);
39:       assertEquals(51, Node.STATIC_SOURCE_FILE);
40:       assertEquals(47, Node.IS_DISPATCHER);
41:       assertEquals(2, Node.POST_FLAG);
42:       assertEquals(50, Node.FREE_CALL);
43:       assertEquals(40, Node.ORIGINALNAME_PROP);
44:       assertEquals(43, Node.IS_CONSTANT_NAME);
45:       assertEquals(53, Node.INPUT_ID);
46:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
47:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
48:       assertEquals(36, Node.QUOTED_PROP);
49:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
50:       assertEquals(55, Node.INFERRED_FUNCTION);
51:       assertEquals(29, Node.JSDOC_INFO_PROP);
52:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
53:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
54:       assertEquals(39, Node.EMPTY_BLOCK);
55:       assertEquals(12, Node.COLUMN_BITS);
56:       assertEquals(4095, Node.COLUMN_MASK);
57:       assertEquals(8, Node.FLAG_NO_THROWS);
58:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
59:       assertEquals(56, Node.CHANGE_TIME);
60:       assertEquals(37, Node.OPT_ARG_NAME);
61:       assertEquals(48, Node.DIRECTIVES);
62:       assertEquals(49, Node.DIRECT_EVAL);
63:       assertFalse(node0.isTry());
64:       assertFalse(node0.isFunction());
65:       assertFalse(node0.isRegExp());
66:       assertFalse(node0.isTrue());
67:       assertEquals(9, node0.getLineno());
68:       assertFalse(node0.isDebugger());
69:       assertFalse(node0.isEmpty());
70:       assertFalse(node0.isFor());
71:       assertFalse(node0.isGetterDef());
72:       assertFalse(node0.isDefaultCase());
73:       assertFalse(node0.isParamList());
74:       assertEquals(0, node0.getChildCount());
75:       assertFalse(node0.isStringKey());
76:       assertFalse(node0.isSwitch());
77:       assertFalse(node0.isArrayLit());
78:       assertFalse(node0.isBlock());
79:       assertFalse(node0.isHook());
80:       assertEquals(39, node0.getType());
81:       assertFalse(node0.isThrow());
82:       assertFalse(node0.isInc());
83:       assertFalse(node0.isSetterDef());
84:       assertEquals(36873, node0.getSourcePosition());
85:       assertFalse(node0.isCase());
86:       assertFalse(node0.isInstanceOf());
87:       assertFalse(node0.isIn());
88:       assertFalse(node0.isThis());
89:       assertFalse(node0.isNE());
90:       assertFalse(node0.hasMoreThanOneChild());
91:       assertFalse(node0.isWith());
92:       assertFalse(node0.isIf());
93:       assertFalse(node0.isCatch());
94:       assertFalse(node0.isNot());
95:       assertFalse(node0.isScript());
96:       assertFalse(node0.hasOneChild());
97:       assertFalse(node0.isAssignAdd());
98:       assertFalse(node0.isObjectLit());
99:       assertFalse(node0.isLabel());
100:       assertFalse(node0.isLabelName());
101:       assertFalse(node0.isFalse());
102:       assertFalse(node0.isAnd());
103:       assertFalse(node0.isContinue());
104:       assertFalse(node0.isCast());
105:       assertEquals(9, node0.getCharno());
106:       assertFalse(node0.isAdd());
107:       assertFalse(node0.isVar());
108:       assertFalse(node0.isDo());
109:       assertFalse(node0.isWhile());
110:       assertFalse(node0.isString());
111:       assertFalse(node0.isGetProp());
112:       assertFalse(node0.isNew());
113:       assertFalse(node0.isOr());
114:       assertFalse(node0.isReturn());
115:       assertTrue(node0.isNumber());
116:       assertFalse(node0.isComma());
117:       assertFalse(node0.isTypeOf());
118:       assertFalse(node0.isNull());
119:       assertFalse(node0.isDec());
120:       assertFalse(node0.hasChildren());
121:       assertFalse(node0.isAssign());
122:       assertFalse(node0.isName());
123:       assertFalse(node0.isDelProp());
124:       assertFalse(node0.isExprResult());
125:       assertFalse(node0.isVoid());
126:       assertFalse(node0.isCall());
127:       assertFalse(node0.isGetElem());
128:       assertFalse(node0.isBreak());
129:       assertNotNull(node0);
130:       
131:       boolean boolean1 = node0.isVarArgs();
132:       assertEquals(52, Node.LENGTH);
133:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
134:       assertEquals(54, Node.SLASH_V);
135:       assertEquals(57, Node.REFLECTED_OBJECT);
136:       assertEquals(30, Node.VAR_ARGS_NAME);
137:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
139:       assertEquals(57, Node.LAST_PROP);
140:       assertEquals(32, Node.INCRDECR_PROP);
141:       assertEquals(1, Node.DECR_FLAG);
142:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
143:       assertEquals(46, Node.IS_NAMESPACE);
144:       assertEquals(51, Node.STATIC_SOURCE_FILE);
145:       assertEquals(47, Node.IS_DISPATCHER);
146:       assertEquals(2, Node.POST_FLAG);
147:       assertEquals(50, Node.FREE_CALL);
148:       assertEquals(40, Node.ORIGINALNAME_PROP);
149:       assertEquals(43, Node.IS_CONSTANT_NAME);
150:       assertEquals(53, Node.INPUT_ID);
151:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
152:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
153:       assertEquals(36, Node.QUOTED_PROP);
154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
155:       assertEquals(55, Node.INFERRED_FUNCTION);
156:       assertEquals(29, Node.JSDOC_INFO_PROP);
157:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
158:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
159:       assertEquals(39, Node.EMPTY_BLOCK);
160:       assertEquals(12, Node.COLUMN_BITS);
161:       assertEquals(4095, Node.COLUMN_MASK);
162:       assertEquals(8, Node.FLAG_NO_THROWS);
163:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
164:       assertEquals(56, Node.CHANGE_TIME);
165:       assertEquals(37, Node.OPT_ARG_NAME);
166:       assertEquals(48, Node.DIRECTIVES);
167:       assertEquals(49, Node.DIRECT_EVAL);
168:       assertFalse(node0.isTry());
169:       assertFalse(node0.isFunction());
170:       assertFalse(node0.isRegExp());
171:       assertFalse(node0.isTrue());
172:       assertEquals(9, node0.getLineno());
173:       assertFalse(node0.isDebugger());
174:       assertFalse(node0.isEmpty());
175:       assertFalse(node0.isFor());
176:       assertFalse(node0.isGetterDef());
177:       assertFalse(node0.isDefaultCase());
178:       assertFalse(node0.isParamList());
179:       assertEquals(0, node0.getChildCount());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isSwitch());
182:       assertFalse(node0.isArrayLit());
183:       assertFalse(node0.isBlock());
184:       assertFalse(node0.isHook());
185:       assertEquals(39, node0.getType());
186:       assertFalse(node0.isThrow());
187:       assertFalse(node0.isInc());
188:       assertFalse(node0.isSetterDef());
189:       assertEquals(36873, node0.getSourcePosition());
190:       assertFalse(node0.isCase());
191:       assertFalse(node0.isInstanceOf());
192:       assertFalse(node0.isIn());
193:       assertFalse(node0.isThis());
194:       assertFalse(node0.isNE());
195:       assertFalse(node0.hasMoreThanOneChild());
196:       assertFalse(node0.isWith());
197:       assertFalse(node0.isIf());
198:       assertFalse(node0.isCatch());
199:       assertFalse(node0.isNot());
200:       assertFalse(node0.isScript());
201:       assertFalse(node0.hasOneChild());
202:       assertFalse(node0.isAssignAdd());
203:       assertFalse(node0.isObjectLit());
204:       assertFalse(node0.isLabel());
205:       assertFalse(node0.isLabelName());
206:       assertFalse(node0.isFalse());
207:       assertFalse(node0.isAnd());
208:       assertFalse(node0.isContinue());
209:       assertFalse(node0.isCast());
210:       assertEquals(9, node0.getCharno());
211:       assertFalse(node0.isAdd());
212:       assertFalse(node0.isVar());
213:       assertFalse(node0.isDo());
214:       assertFalse(node0.isWhile());
215:       assertFalse(node0.isString());
216:       assertFalse(node0.isGetProp());
217:       assertFalse(node0.isNew());
218:       assertFalse(node0.isOr());
219:       assertFalse(node0.isReturn());
220:       assertTrue(node0.isNumber());
221:       assertFalse(node0.isComma());
222:       assertFalse(node0.isTypeOf());
223:       assertFalse(node0.isNull());
224:       assertFalse(node0.isDec());
225:       assertFalse(node0.hasChildren());
226:       assertFalse(node0.isAssign());
227:       assertFalse(node0.isName());
228:       assertFalse(node0.isDelProp());
229:       assertFalse(node0.isExprResult());
230:       assertFalse(node0.isVoid());
231:       assertFalse(node0.isCall());
232:       assertFalse(node0.isGetElem());
233:       assertFalse(node0.isBreak());
234:       assertTrue(boolean1 == boolean0);
235:       assertFalse(boolean1);
236:       
237:       node0.removeProp(9);
238:       assertEquals(52, Node.LENGTH);
239:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
240:       assertEquals(54, Node.SLASH_V);
241:       assertEquals(57, Node.REFLECTED_OBJECT);
242:       assertEquals(30, Node.VAR_ARGS_NAME);
243:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
244:       assertEquals(15, Node.NO_SIDE_EFFECTS);
245:       assertEquals(57, Node.LAST_PROP);
246:       assertEquals(32, Node.INCRDECR_PROP);
247:       assertEquals(1, Node.DECR_FLAG);
248:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
249:       assertEquals(46, Node.IS_NAMESPACE);
250:       assertEquals(51, Node.STATIC_SOURCE_FILE);
251:       assertEquals(47, Node.IS_DISPATCHER);
252:       assertEquals(2, Node.POST_FLAG);
253:       assertEquals(50, Node.FREE_CALL);
254:       assertEquals(40, Node.ORIGINALNAME_PROP);
255:       assertEquals(43, Node.IS_CONSTANT_NAME);
256:       assertEquals(53, Node.INPUT_ID);
257:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
258:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
259:       assertEquals(36, Node.QUOTED_PROP);
260:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
261:       assertEquals(55, Node.INFERRED_FUNCTION);
262:       assertEquals(29, Node.JSDOC_INFO_PROP);
263:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
265:       assertEquals(39, Node.EMPTY_BLOCK);
266:       assertEquals(12, Node.COLUMN_BITS);
267:       assertEquals(4095, Node.COLUMN_MASK);
268:       assertEquals(8, Node.FLAG_NO_THROWS);
269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
270:       assertEquals(56, Node.CHANGE_TIME);
271:       assertEquals(37, Node.OPT_ARG_NAME);
272:       assertEquals(48, Node.DIRECTIVES);
273:       assertEquals(49, Node.DIRECT_EVAL);
274:       assertFalse(node0.isTry());
275:       assertFalse(node0.isFunction());
276:       assertFalse(node0.isRegExp());
277:       assertFalse(node0.isTrue());
278:       assertEquals(9, node0.getLineno());
279:       assertFalse(node0.isDebugger());
280:       assertFalse(node0.isEmpty());
281:       assertFalse(node0.isFor());
282:       assertFalse(node0.isGetterDef());
283:       assertFalse(node0.isDefaultCase());
284:       assertFalse(node0.isParamList());
285:       assertEquals(0, node0.getChildCount());
286:       assertFalse(node0.isStringKey());
287:       assertFalse(node0.isSwitch());
288:       assertFalse(node0.isArrayLit());
289:       assertFalse(node0.isBlock());
290:       assertFalse(node0.isHook());
291:       assertEquals(39, node0.getType());
292:       assertFalse(node0.isThrow());
293:       assertFalse(node0.isInc());
294:       assertFalse(node0.isSetterDef());
295:       assertEquals(36873, node0.getSourcePosition());
296:       assertFalse(node0.isCase());
297:       assertFalse(node0.isInstanceOf());
298:       assertFalse(node0.isIn());
299:       assertFalse(node0.isThis());
300:       assertFalse(node0.isNE());
301:       assertFalse(node0.hasMoreThanOneChild());
302:       assertFalse(node0.isWith());
303:       assertFalse(node0.isIf());
304:       assertFalse(node0.isCatch());
305:       assertFalse(node0.isNot());
306:       assertFalse(node0.isScript());
307:       assertFalse(node0.hasOneChild());
308:       assertFalse(node0.isAssignAdd());
309:       assertFalse(node0.isObjectLit());
310:       assertFalse(node0.isLabel());
311:       assertFalse(node0.isLabelName());
312:       assertFalse(node0.isFalse());
313:       assertFalse(node0.isAnd());
314:       assertFalse(node0.isContinue());
315:       assertFalse(node0.isCast());
316:       assertEquals(9, node0.getCharno());
317:       assertFalse(node0.isAdd());
318:       assertFalse(node0.isVar());
319:       assertFalse(node0.isDo());
320:       assertFalse(node0.isWhile());
321:       assertFalse(node0.isString());
322:       assertFalse(node0.isGetProp());
323:       assertFalse(node0.isNew());
324:       assertFalse(node0.isOr());
325:       assertFalse(node0.isReturn());
326:       assertTrue(node0.isNumber());
327:       assertFalse(node0.isComma());
328:       assertFalse(node0.isTypeOf());
329:       assertFalse(node0.isNull());
330:       assertFalse(node0.isDec());
331:       assertFalse(node0.hasChildren());
332:       assertFalse(node0.isAssign());
333:       assertFalse(node0.isName());
334:       assertFalse(node0.isDelProp());
335:       assertFalse(node0.isExprResult());
336:       assertFalse(node0.isVoid());
337:       assertFalse(node0.isCall());
338:       assertFalse(node0.isGetElem());
339:       assertFalse(node0.isBreak());
340:       
341:       int int0 = node0.getLength();
342:       assertEquals(52, Node.LENGTH);
343:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
344:       assertEquals(54, Node.SLASH_V);
345:       assertEquals(57, Node.REFLECTED_OBJECT);
346:       assertEquals(30, Node.VAR_ARGS_NAME);
347:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
348:       assertEquals(15, Node.NO_SIDE_EFFECTS);
349:       assertEquals(57, Node.LAST_PROP);
350:       assertEquals(32, Node.INCRDECR_PROP);
351:       assertEquals(1, Node.DECR_FLAG);
352:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
353:       assertEquals(46, Node.IS_NAMESPACE);
354:       assertEquals(51, Node.STATIC_SOURCE_FILE);
355:       assertEquals(47, Node.IS_DISPATCHER);
356:       assertEquals(2, Node.POST_FLAG);
357:       assertEquals(50, Node.FREE_CALL);
358:       assertEquals(40, Node.ORIGINALNAME_PROP);
359:       assertEquals(43, Node.IS_CONSTANT_NAME);
360:       assertEquals(53, Node.INPUT_ID);
361:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
362:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
363:       assertEquals(36, Node.QUOTED_PROP);
364:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
365:       assertEquals(55, Node.INFERRED_FUNCTION);
366:       assertEquals(29, Node.JSDOC_INFO_PROP);
367:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
368:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
369:       assertEquals(39, Node.EMPTY_BLOCK);
370:       assertEquals(12, Node.COLUMN_BITS);
371:       assertEquals(4095, Node.COLUMN_MASK);
372:       assertEquals(8, Node.FLAG_NO_THROWS);
373:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
374:       assertEquals(56, Node.CHANGE_TIME);
375:       assertEquals(37, Node.OPT_ARG_NAME);
376:       assertEquals(48, Node.DIRECTIVES);
377:       assertEquals(49, Node.DIRECT_EVAL);
378:       assertFalse(node0.isTry());
379:       assertFalse(node0.isFunction());
380:       assertFalse(node0.isRegExp());
381:       assertFalse(node0.isTrue());
382:       assertEquals(9, node0.getLineno());
383:       assertFalse(node0.isDebugger());
384:       assertFalse(node0.isEmpty());
385:       assertFalse(node0.isFor());
386:       assertFalse(node0.isGetterDef());
387:       assertFalse(node0.isDefaultCase());
388:       assertFalse(node0.isParamList());
389:       assertEquals(0, node0.getChildCount());
390:       assertFalse(node0.isStringKey());
391:       assertFalse(node0.isSwitch());
392:       assertFalse(node0.isArrayLit());
393:       assertFalse(node0.isBlock());
394:       assertFalse(node0.isHook());
395:       assertEquals(39, node0.getType());
396:       assertFalse(node0.isThrow());
397:       assertFalse(node0.isInc());
398:       assertFalse(node0.isSetterDef());
399:       assertEquals(36873, node0.getSourcePosition());
400:       assertFalse(node0.isCase());
401:       assertFalse(node0.isInstanceOf());
402:       assertFalse(node0.isIn());
403:       assertFalse(node0.isThis());
404:       assertFalse(node0.isNE());
405:       assertFalse(node0.hasMoreThanOneChild());
406:       assertFalse(node0.isWith());
407:       assertFalse(node0.isIf());
408:       assertFalse(node0.isCatch());
409:       assertFalse(node0.isNot());
410:       assertFalse(node0.isScript());
411:       assertFalse(node0.hasOneChild());
412:       assertFalse(node0.isAssignAdd());
413:       assertFalse(node0.isObjectLit());
414:       assertFalse(node0.isLabel());
415:       assertFalse(node0.isLabelName());
416:       assertFalse(node0.isFalse());
417:       assertFalse(node0.isAnd());
418:       assertFalse(node0.isContinue());
419:       assertFalse(node0.isCast());
420:       assertEquals(9, node0.getCharno());
421:       assertFalse(node0.isAdd());
422:       assertFalse(node0.isVar());
423:       assertFalse(node0.isDo());
424:       assertFalse(node0.isWhile());
425:       assertFalse(node0.isString());
426:       assertFalse(node0.isGetProp());
427:       assertFalse(node0.isNew());
428:       assertFalse(node0.isOr());
429:       assertFalse(node0.isReturn());
430:       assertTrue(node0.isNumber());
431:       assertFalse(node0.isComma());
432:       assertFalse(node0.isTypeOf());
433:       assertFalse(node0.isNull());
434:       assertFalse(node0.isDec());
435:       assertFalse(node0.hasChildren());
436:       assertFalse(node0.isAssign());
437:       assertFalse(node0.isName());
438:       assertFalse(node0.isDelProp());
439:       assertFalse(node0.isExprResult());
440:       assertFalse(node0.isVoid());
441:       assertFalse(node0.isCall());
442:       assertFalse(node0.isGetElem());
443:       assertFalse(node0.isBreak());
444:       assertEquals(0, int0);
445:       
446:       boolean boolean2 = node0.isTrue();
447:       assertEquals(52, Node.LENGTH);
448:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
449:       assertEquals(54, Node.SLASH_V);
450:       assertEquals(57, Node.REFLECTED_OBJECT);
451:       assertEquals(30, Node.VAR_ARGS_NAME);
452:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
453:       assertEquals(15, Node.NO_SIDE_EFFECTS);
454:       assertEquals(57, Node.LAST_PROP);
455:       assertEquals(32, Node.INCRDECR_PROP);
456:       assertEquals(1, Node.DECR_FLAG);
457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
458:       assertEquals(46, Node.IS_NAMESPACE);
459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
460:       assertEquals(47, Node.IS_DISPATCHER);
461:       assertEquals(2, Node.POST_FLAG);
462:       assertEquals(50, Node.FREE_CALL);
463:       assertEquals(40, Node.ORIGINALNAME_PROP);
464:       assertEquals(43, Node.IS_CONSTANT_NAME);
465:       assertEquals(53, Node.INPUT_ID);
466:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
467:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
468:       assertEquals(36, Node.QUOTED_PROP);
469:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
470:       assertEquals(55, Node.INFERRED_FUNCTION);
471:       assertEquals(29, Node.JSDOC_INFO_PROP);
472:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
473:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
474:       assertEquals(39, Node.EMPTY_BLOCK);
475:       assertEquals(12, Node.COLUMN_BITS);
476:       assertEquals(4095, Node.COLUMN_MASK);
477:       assertEquals(8, Node.FLAG_NO_THROWS);
478:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
479:       assertEquals(56, Node.CHANGE_TIME);
480:       assertEquals(37, Node.OPT_ARG_NAME);
481:       assertEquals(48, Node.DIRECTIVES);
482:       assertEquals(49, Node.DIRECT_EVAL);
483:       assertFalse(node0.isTry());
484:       assertFalse(node0.isFunction());
485:       assertFalse(node0.isRegExp());
486:       assertFalse(node0.isTrue());
487:       assertEquals(9, node0.getLineno());
488:       assertFalse(node0.isDebugger());
489:       assertFalse(node0.isEmpty());
490:       assertFalse(node0.isFor());
491:       assertFalse(node0.isGetterDef());
492:       assertFalse(node0.isDefaultCase());
493:       assertFalse(node0.isParamList());
494:       assertEquals(0, node0.getChildCount());
495:       assertFalse(node0.isStringKey());
496:       assertFalse(node0.isSwitch());
497:       assertFalse(node0.isArrayLit());
498:       assertFalse(node0.isBlock());
499:       assertFalse(node0.isHook());
500:       assertEquals(39, node0.getType());
501:       assertFalse(node0.isThrow());
502:       assertFalse(node0.isInc());
503:       assertFalse(node0.isSetterDef());
504:       assertEquals(36873, node0.getSourcePosition());
505:       assertFalse(node0.isCase());
506:       assertFalse(node0.isInstanceOf());
507:       assertFalse(node0.isIn());
508:       assertFalse(node0.isThis());
509:       assertFalse(node0.isNE());
510:       assertFalse(node0.hasMoreThanOneChild());
511:       assertFalse(node0.isWith());
512:       assertFalse(node0.isIf());
513:       assertFalse(node0.isCatch());
514:       assertFalse(node0.isNot());
515:       assertFalse(node0.isScript());
516:       assertFalse(node0.hasOneChild());
517:       assertFalse(node0.isAssignAdd());
518:       assertFalse(node0.isObjectLit());
519:       assertFalse(node0.isLabel());
520:       assertFalse(node0.isLabelName());
521:       assertFalse(node0.isFalse());
522:       assertFalse(node0.isAnd());
523:       assertFalse(node0.isContinue());
524:       assertFalse(node0.isCast());
525:       assertEquals(9, node0.getCharno());
526:       assertFalse(node0.isAdd());
527:       assertFalse(node0.isVar());
528:       assertFalse(node0.isDo());
529:       assertFalse(node0.isWhile());
530:       assertFalse(node0.isString());
531:       assertFalse(node0.isGetProp());
532:       assertFalse(node0.isNew());
533:       assertFalse(node0.isOr());
534:       assertFalse(node0.isReturn());
535:       assertTrue(node0.isNumber());
536:       assertFalse(node0.isComma());
537:       assertFalse(node0.isTypeOf());
538:       assertFalse(node0.isNull());
539:       assertFalse(node0.isDec());
540:       assertFalse(node0.hasChildren());
541:       assertFalse(node0.isAssign());
542:       assertFalse(node0.isName());
543:       assertFalse(node0.isDelProp());
544:       assertFalse(node0.isExprResult());
545:       assertFalse(node0.isVoid());
546:       assertFalse(node0.isCall());
547:       assertFalse(node0.isGetElem());
548:       assertFalse(node0.isBreak());
549:       assertTrue(boolean2 == boolean1);
550:       assertTrue(boolean2 == boolean0);
551:       assertFalse(boolean2);
552:       
553:       Iterable<Node> iterable0 = node0.children();
554:       assertEquals(52, Node.LENGTH);
555:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
556:       assertEquals(54, Node.SLASH_V);
557:       assertEquals(57, Node.REFLECTED_OBJECT);
558:       assertEquals(30, Node.VAR_ARGS_NAME);
559:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
560:       assertEquals(15, Node.NO_SIDE_EFFECTS);
561:       assertEquals(57, Node.LAST_PROP);
562:       assertEquals(32, Node.INCRDECR_PROP);
563:       assertEquals(1, Node.DECR_FLAG);
564:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
565:       assertEquals(46, Node.IS_NAMESPACE);
566:       assertEquals(51, Node.STATIC_SOURCE_FILE);
567:       assertEquals(47, Node.IS_DISPATCHER);
568:       assertEquals(2, Node.POST_FLAG);
569:       assertEquals(50, Node.FREE_CALL);
570:       assertEquals(40, Node.ORIGINALNAME_PROP);
571:       assertEquals(43, Node.IS_CONSTANT_NAME);
572:       assertEquals(53, Node.INPUT_ID);
573:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
574:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
575:       assertEquals(36, Node.QUOTED_PROP);
576:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
577:       assertEquals(55, Node.INFERRED_FUNCTION);
578:       assertEquals(29, Node.JSDOC_INFO_PROP);
579:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
580:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
581:       assertEquals(39, Node.EMPTY_BLOCK);
582:       assertEquals(12, Node.COLUMN_BITS);
583:       assertEquals(4095, Node.COLUMN_MASK);
584:       assertEquals(8, Node.FLAG_NO_THROWS);
585:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
586:       assertEquals(56, Node.CHANGE_TIME);
587:       assertEquals(37, Node.OPT_ARG_NAME);
588:       assertEquals(48, Node.DIRECTIVES);
589:       assertEquals(49, Node.DIRECT_EVAL);
590:       assertFalse(iterable0.contains(node0));
591:       assertFalse(node0.isTry());
592:       assertFalse(node0.isFunction());
593:       assertFalse(node0.isRegExp());
594:       assertFalse(node0.isTrue());
595:       assertEquals(9, node0.getLineno());
596:       assertFalse(node0.isDebugger());
597:       assertFalse(node0.isEmpty());
598:       assertFalse(node0.isFor());
599:       assertFalse(node0.isGetterDef());
600:       assertFalse(node0.isDefaultCase());
601:       assertFalse(node0.isParamList());
602:       assertEquals(0, node0.getChildCount());
603:       assertFalse(node0.isStringKey());
604:       assertFalse(node0.isSwitch());
605:       assertFalse(node0.isArrayLit());
606:       assertFalse(node0.isBlock());
607:       assertFalse(node0.isHook());
608:       assertEquals(39, node0.getType());
609:       assertFalse(node0.isThrow());
610:       assertFalse(node0.isInc());
611:       assertFalse(node0.isSetterDef());
612:       assertEquals(36873, node0.getSourcePosition());
613:       assertFalse(node0.isCase());
614:       assertFalse(node0.isInstanceOf());
615:       assertFalse(node0.isIn());
616:       assertFalse(node0.isThis());
617:       assertFalse(node0.isNE());
618:       assertFalse(node0.hasMoreThanOneChild());
619:       assertFalse(node0.isWith());
620:       assertFalse(node0.isIf());
621:       assertFalse(node0.isCatch());
622:       assertFalse(node0.isNot());
623:       assertFalse(node0.isScript());
624:       assertFalse(node0.hasOneChild());
625:       assertFalse(node0.isAssignAdd());
626:       assertFalse(node0.isObjectLit());
627:       assertFalse(node0.isLabel());
628:       assertFalse(node0.isLabelName());
629:       assertFalse(node0.isFalse());
630:       assertFalse(node0.isAnd());
631:       assertFalse(node0.isContinue());
632:       assertFalse(node0.isCast());
633:       assertEquals(9, node0.getCharno());
634:       assertFalse(node0.isAdd());
635:       assertFalse(node0.isVar());
636:       assertFalse(node0.isDo());
637:       assertFalse(node0.isWhile());
638:       assertFalse(node0.isString());
639:       assertFalse(node0.isGetProp());
640:       assertFalse(node0.isNew());
641:       assertFalse(node0.isOr());
642:       assertFalse(node0.isReturn());
643:       assertTrue(node0.isNumber());
644:       assertFalse(node0.isComma());
645:       assertFalse(node0.isTypeOf());
646:       assertFalse(node0.isNull());
647:       assertFalse(node0.isDec());
648:       assertFalse(node0.hasChildren());
649:       assertFalse(node0.isAssign());
650:       assertFalse(node0.isName());
651:       assertFalse(node0.isDelProp());
652:       assertFalse(node0.isExprResult());
653:       assertFalse(node0.isVoid());
654:       assertFalse(node0.isCall());
655:       assertFalse(node0.isGetElem());
656:       assertFalse(node0.isBreak());
657:       assertNotNull(iterable0);
658:       
659:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
660:       assertNotNull(fileSystemHandling0);
661:       
662:       boolean boolean3 = node0.isHook();
663:       assertEquals(52, Node.LENGTH);
664:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
665:       assertEquals(54, Node.SLASH_V);
666:       assertEquals(57, Node.REFLECTED_OBJECT);
667:       assertEquals(30, Node.VAR_ARGS_NAME);
668:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
669:       assertEquals(15, Node.NO_SIDE_EFFECTS);
670:       assertEquals(57, Node.LAST_PROP);
671:       assertEquals(32, Node.INCRDECR_PROP);
672:       assertEquals(1, Node.DECR_FLAG);
673:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
674:       assertEquals(46, Node.IS_NAMESPACE);
675:       assertEquals(51, Node.STATIC_SOURCE_FILE);
676:       assertEquals(47, Node.IS_DISPATCHER);
677:       assertEquals(2, Node.POST_FLAG);
678:       assertEquals(50, Node.FREE_CALL);
679:       assertEquals(40, Node.ORIGINALNAME_PROP);
680:       assertEquals(43, Node.IS_CONSTANT_NAME);
681:       assertEquals(53, Node.INPUT_ID);
682:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
683:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
684:       assertEquals(36, Node.QUOTED_PROP);
685:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
686:       assertEquals(55, Node.INFERRED_FUNCTION);
687:       assertEquals(29, Node.JSDOC_INFO_PROP);
688:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
689:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
690:       assertEquals(39, Node.EMPTY_BLOCK);
691:       assertEquals(12, Node.COLUMN_BITS);
692:       assertEquals(4095, Node.COLUMN_MASK);
693:       assertEquals(8, Node.FLAG_NO_THROWS);
694:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
695:       assertEquals(56, Node.CHANGE_TIME);
696:       assertEquals(37, Node.OPT_ARG_NAME);
697:       assertEquals(48, Node.DIRECTIVES);
698:       assertEquals(49, Node.DIRECT_EVAL);
699:       assertFalse(node0.isTry());
700:       assertFalse(node0.isFunction());
701:       assertFalse(node0.isRegExp());
702:       assertFalse(node0.isTrue());
703:       assertEquals(9, node0.getLineno());
704:       assertFalse(node0.isDebugger());
705:       assertFalse(node0.isEmpty());
706:       assertFalse(node0.isFor());
707:       assertFalse(node0.isGetterDef());
708:       assertFalse(node0.isDefaultCase());
709:       assertFalse(node0.isParamList());
710:       assertEquals(0, node0.getChildCount());
711:       assertFalse(node0.isStringKey());
712:       assertFalse(node0.isSwitch());
713:       assertFalse(node0.isArrayLit());
714:       assertFalse(node0.isBlock());
715:       assertFalse(node0.isHook());
716:       assertEquals(39, node0.getType());
717:       assertFalse(node0.isThrow());
718:       assertFalse(node0.isInc());
719:       assertFalse(node0.isSetterDef());
720:       assertEquals(36873, node0.getSourcePosition());
721:       assertFalse(node0.isCase());
722:       assertFalse(node0.isInstanceOf());
723:       assertFalse(node0.isIn());
724:       assertFalse(node0.isThis());
725:       assertFalse(node0.isNE());
726:       assertFalse(node0.hasMoreThanOneChild());
727:       assertFalse(node0.isWith());
728:       assertFalse(node0.isIf());
729:       assertFalse(node0.isCatch());
730:       assertFalse(node0.isNot());
731:       assertFalse(node0.isScript());
732:       assertFalse(node0.hasOneChild());
733:       assertFalse(node0.isAssignAdd());
734:       assertFalse(node0.isObjectLit());
735:       assertFalse(node0.isLabel());
736:       assertFalse(node0.isLabelName());
737:       assertFalse(node0.isFalse());
738:       assertFalse(node0.isAnd());
739:       assertFalse(node0.isContinue());
740:       assertFalse(node0.isCast());
741:       assertEquals(9, node0.getCharno());
742:       assertFalse(node0.isAdd());
743:       assertFalse(node0.isVar());
744:       assertFalse(node0.isDo());
745:       assertFalse(node0.isWhile());
746:       assertFalse(node0.isString());
747:       assertFalse(node0.isGetProp());
748:       assertFalse(node0.isNew());
749:       assertFalse(node0.isOr());
750:       assertFalse(node0.isReturn());
751:       assertTrue(node0.isNumber());
752:       assertFalse(node0.isComma());
753:       assertFalse(node0.isTypeOf());
754:       assertFalse(node0.isNull());
755:       assertFalse(node0.isDec());
756:       assertFalse(node0.hasChildren());
757:       assertFalse(node0.isAssign());
758:       assertFalse(node0.isName());
759:       assertFalse(node0.isDelProp());
760:       assertFalse(node0.isExprResult());
761:       assertFalse(node0.isVoid());
762:       assertFalse(node0.isCall());
763:       assertFalse(node0.isGetElem());
764:       assertFalse(node0.isBreak());
765:       assertTrue(boolean3 == boolean0);
766:       assertTrue(boolean3 == boolean1);
767:       assertTrue(boolean3 == boolean2);
768:       assertFalse(boolean3);
769:       
770:       // Undeclared exception!
771:       try { 
772:         node0.getChildAtIndex(9);
773:         fail("Expecting exception: NullPointerException");
774:       
775:       } catch(NullPointerException e) {
776:          //
777:          // no message in exception (getMessage() returned null)
778:          //
779:          verifyException("com.google.javascript.rhino.Node", e);
780:       }
781:   }
782: }
RegularFileObject[/tmp/EvoSuite_235_1628157546378/com/google/javascript/rhino/Node_235_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:06 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_235_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_235_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_235_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:59:06.437 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean0);

Node node0 = Node.newNumber(949.2, 9, 9);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(9, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(36873, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(9, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertNotNull(node0);

boolean boolean1 = node0.isVarArgs();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(9, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(36873, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(9, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

node0.removeProp(9);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(9, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(36873, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(9, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());

int int0 = node0.getLength();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(9, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(36873, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(9, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals(0, int0);

boolean boolean2 = node0.isTrue();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(9, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(36873, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(9, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

Iterable<Node> iterable0 = node0.children();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(9, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(36873, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(9, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertNotNull(iterable0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

boolean boolean3 = node0.isHook();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(9, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(36873, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(9, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);

node0.getChildAtIndex(9);

[MASTER] 09:59:07.331 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_240_1628157547119/com/google/javascript/rhino/Node_240_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_240_1628157547119/com/google/javascript/rhino/Node_240_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:07.331 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:07.331 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:07.331 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 278
[MASTER] 09:59:07.332 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_240_1628157547119/com/google/javascript/rhino/Node_240_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.common.collect.ImmutableList;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import com.google.javascript.rhino.jstype.StaticSourceFile;
16: import com.google.javascript.rhino.jstype.TemplateType;
17: import java.util.ArrayDeque;
18: import java.util.HashSet;
19: import java.util.List;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.evosuite.runtime.testdata.EvoSuiteFile;
23: import org.evosuite.runtime.testdata.FileSystemHandling;
24: import org.junit.runner.RunWith;
25: 
26: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
27: public class Node_240_tmp__ESTest extends Node_240_tmp__ESTest_scaffolding {
28: 
29:   @Test(timeout = 4000)
30:   public void test0()  throws Throwable  {
31:       Node node0 = Node.newNumber(1.0);
32:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
33:       assertEquals(8, Node.FLAG_NO_THROWS);
34:       assertEquals(39, Node.EMPTY_BLOCK);
35:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
36:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
37:       assertEquals(50, Node.FREE_CALL);
38:       assertEquals(55, Node.INFERRED_FUNCTION);
39:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
40:       assertEquals(57, Node.LAST_PROP);
41:       assertEquals(54, Node.SLASH_V);
42:       assertEquals(43, Node.IS_CONSTANT_NAME);
43:       assertEquals(30, Node.VAR_ARGS_NAME);
44:       assertEquals(40, Node.ORIGINALNAME_PROP);
45:       assertEquals(46, Node.IS_NAMESPACE);
46:       assertEquals(2, Node.POST_FLAG);
47:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
48:       assertEquals(56, Node.CHANGE_TIME);
49:       assertEquals(47, Node.IS_DISPATCHER);
50:       assertEquals(51, Node.STATIC_SOURCE_FILE);
51:       assertEquals(12, Node.COLUMN_BITS);
52:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
53:       assertEquals(29, Node.JSDOC_INFO_PROP);
54:       assertEquals(32, Node.INCRDECR_PROP);
55:       assertEquals(53, Node.INPUT_ID);
56:       assertEquals(15, Node.NO_SIDE_EFFECTS);
57:       assertEquals(1, Node.DECR_FLAG);
58:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
59:       assertEquals(52, Node.LENGTH);
60:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
61:       assertEquals(36, Node.QUOTED_PROP);
62:       assertEquals(4095, Node.COLUMN_MASK);
63:       assertEquals(57, Node.REFLECTED_OBJECT);
64:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
65:       assertEquals(49, Node.DIRECT_EVAL);
66:       assertEquals(48, Node.DIRECTIVES);
67:       assertEquals(37, Node.OPT_ARG_NAME);
68:       assertFalse(node0.isIf());
69:       assertFalse(node0.isGetterDef());
70:       assertFalse(node0.isNE());
71:       assertFalse(node0.isFor());
72:       assertFalse(node0.isString());
73:       assertFalse(node0.isIn());
74:       assertTrue(node0.isNumber());
75:       assertFalse(node0.isEmpty());
76:       assertFalse(node0.isCase());
77:       assertFalse(node0.isInc());
78:       assertFalse(node0.isDebugger());
79:       assertEquals((-1), node0.getCharno());
80:       assertFalse(node0.isDefaultCase());
81:       assertFalse(node0.isFunction());
82:       assertFalse(node0.isSwitch());
83:       assertFalse(node0.isFalse());
84:       assertFalse(node0.isArrayLit());
85:       assertFalse(node0.isParamList());
86:       assertFalse(node0.isThis());
87:       assertFalse(node0.isThrow());
88:       assertFalse(node0.isScript());
89:       assertFalse(node0.isSetterDef());
90:       assertFalse(node0.isTry());
91:       assertFalse(node0.isRegExp());
92:       assertEquals(39, node0.getType());
93:       assertFalse(node0.isBlock());
94:       assertFalse(node0.isHook());
95:       assertFalse(node0.isCatch());
96:       assertFalse(node0.isWith());
97:       assertFalse(node0.hasMoreThanOneChild());
98:       assertEquals((-1), node0.getLineno());
99:       assertFalse(node0.isInstanceOf());
100:       assertFalse(node0.isOr());
101:       assertFalse(node0.isTypeOf());
102:       assertFalse(node0.isAssignAdd());
103:       assertFalse(node0.hasChildren());
104:       assertEquals((-1), node0.getSourcePosition());
105:       assertFalse(node0.isDec());
106:       assertFalse(node0.isLabel());
107:       assertFalse(node0.isReturn());
108:       assertFalse(node0.isDo());
109:       assertFalse(node0.hasOneChild());
110:       assertFalse(node0.isNew());
111:       assertFalse(node0.isVar());
112:       assertFalse(node0.isAnd());
113:       assertFalse(node0.isContinue());
114:       assertFalse(node0.isCast());
115:       assertFalse(node0.isStringKey());
116:       assertFalse(node0.isLabelName());
117:       assertFalse(node0.isComma());
118:       assertEquals(0, node0.getChildCount());
119:       assertFalse(node0.isNull());
120:       assertFalse(node0.isObjectLit());
121:       assertFalse(node0.isNot());
122:       assertFalse(node0.isAdd());
123:       assertFalse(node0.isGetProp());
124:       assertFalse(node0.isExprResult());
125:       assertFalse(node0.isVoid());
126:       assertFalse(node0.isTrue());
127:       assertFalse(node0.isWhile());
128:       assertFalse(node0.isCall());
129:       assertFalse(node0.isAssign());
130:       assertFalse(node0.isName());
131:       assertFalse(node0.isBreak());
132:       assertFalse(node0.isDelProp());
133:       assertFalse(node0.isGetElem());
134:       assertNotNull(node0);
135:       
136:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
138:       assertEquals(8, Node.FLAG_NO_THROWS);
139:       assertEquals(39, Node.EMPTY_BLOCK);
140:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
141:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
142:       assertEquals(50, Node.FREE_CALL);
143:       assertEquals(55, Node.INFERRED_FUNCTION);
144:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
145:       assertEquals(57, Node.LAST_PROP);
146:       assertEquals(54, Node.SLASH_V);
147:       assertEquals(43, Node.IS_CONSTANT_NAME);
148:       assertEquals(30, Node.VAR_ARGS_NAME);
149:       assertEquals(40, Node.ORIGINALNAME_PROP);
150:       assertEquals(46, Node.IS_NAMESPACE);
151:       assertEquals(2, Node.POST_FLAG);
152:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
153:       assertEquals(56, Node.CHANGE_TIME);
154:       assertEquals(47, Node.IS_DISPATCHER);
155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
156:       assertEquals(12, Node.COLUMN_BITS);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(29, Node.JSDOC_INFO_PROP);
159:       assertEquals(32, Node.INCRDECR_PROP);
160:       assertEquals(53, Node.INPUT_ID);
161:       assertEquals(15, Node.NO_SIDE_EFFECTS);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
164:       assertEquals(52, Node.LENGTH);
165:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
166:       assertEquals(36, Node.QUOTED_PROP);
167:       assertEquals(4095, Node.COLUMN_MASK);
168:       assertEquals(57, Node.REFLECTED_OBJECT);
169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
170:       assertEquals(49, Node.DIRECT_EVAL);
171:       assertEquals(48, Node.DIRECTIVES);
172:       assertEquals(37, Node.OPT_ARG_NAME);
173:       assertFalse(node0.isIf());
174:       assertFalse(node0.isGetterDef());
175:       assertFalse(node0.isNE());
176:       assertFalse(node0.isFor());
177:       assertFalse(node0.isString());
178:       assertFalse(node0.isIn());
179:       assertTrue(node0.isNumber());
180:       assertFalse(node0.isEmpty());
181:       assertFalse(node0.isCase());
182:       assertFalse(node0.isInc());
183:       assertFalse(node0.isDebugger());
184:       assertEquals((-1), node0.getCharno());
185:       assertFalse(node0.isDefaultCase());
186:       assertFalse(node0.isFunction());
187:       assertFalse(node0.isSwitch());
188:       assertFalse(node0.isFalse());
189:       assertFalse(node0.isArrayLit());
190:       assertFalse(node0.isParamList());
191:       assertFalse(node0.isThis());
192:       assertFalse(node0.isThrow());
193:       assertFalse(node0.isScript());
194:       assertFalse(node0.isSetterDef());
195:       assertFalse(node0.isTry());
196:       assertFalse(node0.isRegExp());
197:       assertEquals(39, node0.getType());
198:       assertFalse(node0.isBlock());
199:       assertFalse(node0.isHook());
200:       assertFalse(node0.isCatch());
201:       assertFalse(node0.isWith());
202:       assertFalse(node0.hasMoreThanOneChild());
203:       assertEquals((-1), node0.getLineno());
204:       assertFalse(node0.isInstanceOf());
205:       assertFalse(node0.isOr());
206:       assertFalse(node0.isTypeOf());
207:       assertFalse(node0.isAssignAdd());
208:       assertFalse(node0.hasChildren());
209:       assertEquals((-1), node0.getSourcePosition());
210:       assertFalse(node0.isDec());
211:       assertFalse(node0.isLabel());
212:       assertFalse(node0.isReturn());
213:       assertFalse(node0.isDo());
214:       assertFalse(node0.hasOneChild());
215:       assertFalse(node0.isNew());
216:       assertFalse(node0.isVar());
217:       assertFalse(node0.isAnd());
218:       assertFalse(node0.isContinue());
219:       assertFalse(node0.isCast());
220:       assertFalse(node0.isStringKey());
221:       assertFalse(node0.isLabelName());
222:       assertFalse(node0.isComma());
223:       assertEquals(0, node0.getChildCount());
224:       assertFalse(node0.isNull());
225:       assertFalse(node0.isObjectLit());
226:       assertFalse(node0.isNot());
227:       assertFalse(node0.isAdd());
228:       assertFalse(node0.isGetProp());
229:       assertFalse(node0.isExprResult());
230:       assertFalse(node0.isVoid());
231:       assertFalse(node0.isTrue());
232:       assertFalse(node0.isWhile());
233:       assertFalse(node0.isCall());
234:       assertFalse(node0.isAssign());
235:       assertFalse(node0.isName());
236:       assertFalse(node0.isBreak());
237:       assertFalse(node0.isDelProp());
238:       assertFalse(node0.isGetElem());
239:       assertNull(staticSourceFile0);
240:       
241:       Iterable<Node> iterable0 = node0.children();
242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
243:       assertEquals(8, Node.FLAG_NO_THROWS);
244:       assertEquals(39, Node.EMPTY_BLOCK);
245:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
246:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
247:       assertEquals(50, Node.FREE_CALL);
248:       assertEquals(55, Node.INFERRED_FUNCTION);
249:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
250:       assertEquals(57, Node.LAST_PROP);
251:       assertEquals(54, Node.SLASH_V);
252:       assertEquals(43, Node.IS_CONSTANT_NAME);
253:       assertEquals(30, Node.VAR_ARGS_NAME);
254:       assertEquals(40, Node.ORIGINALNAME_PROP);
255:       assertEquals(46, Node.IS_NAMESPACE);
256:       assertEquals(2, Node.POST_FLAG);
257:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(47, Node.IS_DISPATCHER);
260:       assertEquals(51, Node.STATIC_SOURCE_FILE);
261:       assertEquals(12, Node.COLUMN_BITS);
262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
263:       assertEquals(29, Node.JSDOC_INFO_PROP);
264:       assertEquals(32, Node.INCRDECR_PROP);
265:       assertEquals(53, Node.INPUT_ID);
266:       assertEquals(15, Node.NO_SIDE_EFFECTS);
267:       assertEquals(1, Node.DECR_FLAG);
268:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
269:       assertEquals(52, Node.LENGTH);
270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
271:       assertEquals(36, Node.QUOTED_PROP);
272:       assertEquals(4095, Node.COLUMN_MASK);
273:       assertEquals(57, Node.REFLECTED_OBJECT);
274:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
275:       assertEquals(49, Node.DIRECT_EVAL);
276:       assertEquals(48, Node.DIRECTIVES);
277:       assertEquals(37, Node.OPT_ARG_NAME);
278:       assertFalse(iterable0.contains(node0));
279:       assertFalse(node0.isIf());
280:       assertFalse(node0.isGetterDef());
281:       assertFalse(node0.isNE());
282:       assertFalse(node0.isFor());
283:       assertFalse(node0.isString());
284:       assertFalse(node0.isIn());
285:       assertTrue(node0.isNumber());
286:       assertFalse(node0.isEmpty());
287:       assertFalse(node0.isCase());
288:       assertFalse(node0.isInc());
289:       assertFalse(node0.isDebugger());
290:       assertEquals((-1), node0.getCharno());
291:       assertFalse(node0.isDefaultCase());
292:       assertFalse(node0.isFunction());
293:       assertFalse(node0.isSwitch());
294:       assertFalse(node0.isFalse());
295:       assertFalse(node0.isArrayLit());
296:       assertFalse(node0.isParamList());
297:       assertFalse(node0.isThis());
298:       assertFalse(node0.isThrow());
299:       assertFalse(node0.isScript());
300:       assertFalse(node0.isSetterDef());
301:       assertFalse(node0.isTry());
302:       assertFalse(node0.isRegExp());
303:       assertEquals(39, node0.getType());
304:       assertFalse(node0.isBlock());
305:       assertFalse(node0.isHook());
306:       assertFalse(node0.isCatch());
307:       assertFalse(node0.isWith());
308:       assertFalse(node0.hasMoreThanOneChild());
309:       assertEquals((-1), node0.getLineno());
310:       assertFalse(node0.isInstanceOf());
311:       assertFalse(node0.isOr());
312:       assertFalse(node0.isTypeOf());
313:       assertFalse(node0.isAssignAdd());
314:       assertFalse(node0.hasChildren());
315:       assertEquals((-1), node0.getSourcePosition());
316:       assertFalse(node0.isDec());
317:       assertFalse(node0.isLabel());
318:       assertFalse(node0.isReturn());
319:       assertFalse(node0.isDo());
320:       assertFalse(node0.hasOneChild());
321:       assertFalse(node0.isNew());
322:       assertFalse(node0.isVar());
323:       assertFalse(node0.isAnd());
324:       assertFalse(node0.isContinue());
325:       assertFalse(node0.isCast());
326:       assertFalse(node0.isStringKey());
327:       assertFalse(node0.isLabelName());
328:       assertFalse(node0.isComma());
329:       assertEquals(0, node0.getChildCount());
330:       assertFalse(node0.isNull());
331:       assertFalse(node0.isObjectLit());
332:       assertFalse(node0.isNot());
333:       assertFalse(node0.isAdd());
334:       assertFalse(node0.isGetProp());
335:       assertFalse(node0.isExprResult());
336:       assertFalse(node0.isVoid());
337:       assertFalse(node0.isTrue());
338:       assertFalse(node0.isWhile());
339:       assertFalse(node0.isCall());
340:       assertFalse(node0.isAssign());
341:       assertFalse(node0.isName());
342:       assertFalse(node0.isBreak());
343:       assertFalse(node0.isDelProp());
344:       assertFalse(node0.isGetElem());
345:       assertNotNull(iterable0);
346:       
347:       boolean boolean0 = node0.isTry();
348:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
349:       assertEquals(8, Node.FLAG_NO_THROWS);
350:       assertEquals(39, Node.EMPTY_BLOCK);
351:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
352:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
353:       assertEquals(50, Node.FREE_CALL);
354:       assertEquals(55, Node.INFERRED_FUNCTION);
355:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
356:       assertEquals(57, Node.LAST_PROP);
357:       assertEquals(54, Node.SLASH_V);
358:       assertEquals(43, Node.IS_CONSTANT_NAME);
359:       assertEquals(30, Node.VAR_ARGS_NAME);
360:       assertEquals(40, Node.ORIGINALNAME_PROP);
361:       assertEquals(46, Node.IS_NAMESPACE);
362:       assertEquals(2, Node.POST_FLAG);
363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
364:       assertEquals(56, Node.CHANGE_TIME);
365:       assertEquals(47, Node.IS_DISPATCHER);
366:       assertEquals(51, Node.STATIC_SOURCE_FILE);
367:       assertEquals(12, Node.COLUMN_BITS);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(29, Node.JSDOC_INFO_PROP);
370:       assertEquals(32, Node.INCRDECR_PROP);
371:       assertEquals(53, Node.INPUT_ID);
372:       assertEquals(15, Node.NO_SIDE_EFFECTS);
373:       assertEquals(1, Node.DECR_FLAG);
374:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
375:       assertEquals(52, Node.LENGTH);
376:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
377:       assertEquals(36, Node.QUOTED_PROP);
378:       assertEquals(4095, Node.COLUMN_MASK);
379:       assertEquals(57, Node.REFLECTED_OBJECT);
380:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
381:       assertEquals(49, Node.DIRECT_EVAL);
382:       assertEquals(48, Node.DIRECTIVES);
383:       assertEquals(37, Node.OPT_ARG_NAME);
384:       assertFalse(node0.isIf());
385:       assertFalse(node0.isGetterDef());
386:       assertFalse(node0.isNE());
387:       assertFalse(node0.isFor());
388:       assertFalse(node0.isString());
389:       assertFalse(node0.isIn());
390:       assertTrue(node0.isNumber());
391:       assertFalse(node0.isEmpty());
392:       assertFalse(node0.isCase());
393:       assertFalse(node0.isInc());
394:       assertFalse(node0.isDebugger());
395:       assertEquals((-1), node0.getCharno());
396:       assertFalse(node0.isDefaultCase());
397:       assertFalse(node0.isFunction());
398:       assertFalse(node0.isSwitch());
399:       assertFalse(node0.isFalse());
400:       assertFalse(node0.isArrayLit());
401:       assertFalse(node0.isParamList());
402:       assertFalse(node0.isThis());
403:       assertFalse(node0.isThrow());
404:       assertFalse(node0.isScript());
405:       assertFalse(node0.isSetterDef());
406:       assertFalse(node0.isTry());
407:       assertFalse(node0.isRegExp());
408:       assertEquals(39, node0.getType());
409:       assertFalse(node0.isBlock());
410:       assertFalse(node0.isHook());
411:       assertFalse(node0.isCatch());
412:       assertFalse(node0.isWith());
413:       assertFalse(node0.hasMoreThanOneChild());
414:       assertEquals((-1), node0.getLineno());
415:       assertFalse(node0.isInstanceOf());
416:       assertFalse(node0.isOr());
417:       assertFalse(node0.isTypeOf());
418:       assertFalse(node0.isAssignAdd());
419:       assertFalse(node0.hasChildren());
420:       assertEquals((-1), node0.getSourcePosition());
421:       assertFalse(node0.isDec());
422:       assertFalse(node0.isLabel());
423:       assertFalse(node0.isReturn());
424:       assertFalse(node0.isDo());
425:       assertFalse(node0.hasOneChild());
426:       assertFalse(node0.isNew());
427:       assertFalse(node0.isVar());
428:       assertFalse(node0.isAnd());
429:       assertFalse(node0.isContinue());
430:       assertFalse(node0.isCast());
431:       assertFalse(node0.isStringKey());
432:       assertFalse(node0.isLabelName());
433:       assertFalse(node0.isComma());
434:       assertEquals(0, node0.getChildCount());
435:       assertFalse(node0.isNull());
436:       assertFalse(node0.isObjectLit());
437:       assertFalse(node0.isNot());
438:       assertFalse(node0.isAdd());
439:       assertFalse(node0.isGetProp());
440:       assertFalse(node0.isExprResult());
441:       assertFalse(node0.isVoid());
442:       assertFalse(node0.isTrue());
443:       assertFalse(node0.isWhile());
444:       assertFalse(node0.isCall());
445:       assertFalse(node0.isAssign());
446:       assertFalse(node0.isName());
447:       assertFalse(node0.isBreak());
448:       assertFalse(node0.isDelProp());
449:       assertFalse(node0.isGetElem());
450:       assertFalse(boolean0);
451:       
452:       boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Function");
453:       assertTrue(boolean1 == boolean0);
454:       assertFalse(boolean1);
455:       
456:       Node node1 = new Node(52, 3326, (-1582));
457:       assertEquals(40, Node.ORIGINALNAME_PROP);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
460:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
461:       assertEquals(52, Node.LENGTH);
462:       assertEquals(8, Node.FLAG_NO_THROWS);
463:       assertEquals(50, Node.FREE_CALL);
464:       assertEquals(48, Node.DIRECTIVES);
465:       assertEquals(54, Node.SLASH_V);
466:       assertEquals(49, Node.DIRECT_EVAL);
467:       assertEquals(1, Node.DECR_FLAG);
468:       assertEquals(12, Node.COLUMN_BITS);
469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
470:       assertEquals(4095, Node.COLUMN_MASK);
471:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
472:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
473:       assertEquals(32, Node.INCRDECR_PROP);
474:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
475:       assertEquals(29, Node.JSDOC_INFO_PROP);
476:       assertEquals(47, Node.IS_DISPATCHER);
477:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
478:       assertEquals(2, Node.POST_FLAG);
479:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
480:       assertEquals(37, Node.OPT_ARG_NAME);
481:       assertEquals(46, Node.IS_NAMESPACE);
482:       assertEquals(56, Node.CHANGE_TIME);
483:       assertEquals(43, Node.IS_CONSTANT_NAME);
484:       assertEquals(55, Node.INFERRED_FUNCTION);
485:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
486:       assertEquals(36, Node.QUOTED_PROP);
487:       assertEquals(30, Node.VAR_ARGS_NAME);
488:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
489:       assertEquals(39, Node.EMPTY_BLOCK);
490:       assertEquals(53, Node.INPUT_ID);
491:       assertEquals(15, Node.NO_SIDE_EFFECTS);
492:       assertEquals(57, Node.LAST_PROP);
493:       assertFalse(node1.isEmpty());
494:       assertFalse(node1.isFor());
495:       assertFalse(node1.isIf());
496:       assertFalse(node1.isNE());
497:       assertFalse(node1.isGetterDef());
498:       assertFalse(node1.isArrayLit());
499:       assertFalse(node1.isVoid());
500:       assertFalse(node1.isDelProp());
501:       assertFalse(node1.isString());
502:       assertFalse(node1.isCatch());
503:       assertFalse(node1.isRegExp());
504:       assertFalse(node1.isDebugger());
505:       assertEquals((-1), node1.getCharno());
506:       assertFalse(node1.isTry());
507:       assertFalse(node1.isCase());
508:       assertFalse(node1.isFalse());
509:       assertFalse(node1.isThrow());
510:       assertFalse(node1.isThis());
511:       assertEquals(52, node1.getType());
512:       assertFalse(node1.isHook());
513:       assertFalse(node1.isContinue());
514:       assertFalse(node1.isFunction());
515:       assertFalse(node1.isIn());
516:       assertFalse(node1.isInc());
517:       assertFalse(node1.isSetterDef());
518:       assertFalse(node1.isAssign());
519:       assertFalse(node1.isLabelName());
520:       assertFalse(node1.isGetElem());
521:       assertFalse(node1.isTypeOf());
522:       assertFalse(node1.isNumber());
523:       assertFalse(node1.hasChildren());
524:       assertEquals((-1), node1.getSourcePosition());
525:       assertFalse(node1.isDec());
526:       assertFalse(node1.isCast());
527:       assertFalse(node1.isExprResult());
528:       assertEquals((-1), node1.getLineno());
529:       assertFalse(node1.isNot());
530:       assertFalse(node1.isWith());
531:       assertFalse(node1.isAnd());
532:       assertFalse(node1.isWhile());
533:       assertFalse(node1.hasMoreThanOneChild());
534:       assertFalse(node1.isObjectLit());
535:       assertFalse(node1.isReturn());
536:       assertFalse(node1.isBlock());
537:       assertFalse(node1.isScript());
538:       assertFalse(node1.isGetProp());
539:       assertFalse(node1.hasOneChild());
540:       assertFalse(node1.isName());
541:       assertFalse(node1.isStringKey());
542:       assertFalse(node1.isVar());
543:       assertFalse(node1.isNull());
544:       assertFalse(node1.isComma());
545:       assertFalse(node1.isParamList());
546:       assertFalse(node1.isSwitch());
547:       assertFalse(node1.isCall());
548:       assertFalse(node1.isBreak());
549:       assertFalse(node1.isDo());
550:       assertTrue(node1.isInstanceOf());
551:       assertFalse(node1.isDefaultCase());
552:       assertFalse(node1.isTrue());
553:       assertEquals(0, node1.getChildCount());
554:       assertFalse(node1.isOr());
555:       assertFalse(node1.isAdd());
556:       assertFalse(node1.isLabel());
557:       assertFalse(node1.isAssignAdd());
558:       assertFalse(node1.isNew());
559:       assertNotNull(node1);
560:       assertFalse(node1.equals((Object)node0));
561:       
562:       boolean boolean2 = node1.isSwitch();
563:       assertEquals(40, Node.ORIGINALNAME_PROP);
564:       assertEquals(57, Node.REFLECTED_OBJECT);
565:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
566:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
567:       assertEquals(52, Node.LENGTH);
568:       assertEquals(8, Node.FLAG_NO_THROWS);
569:       assertEquals(50, Node.FREE_CALL);
570:       assertEquals(48, Node.DIRECTIVES);
571:       assertEquals(54, Node.SLASH_V);
572:       assertEquals(49, Node.DIRECT_EVAL);
573:       assertEquals(1, Node.DECR_FLAG);
574:       assertEquals(12, Node.COLUMN_BITS);
575:       assertEquals(51, Node.STATIC_SOURCE_FILE);
576:       assertEquals(4095, Node.COLUMN_MASK);
577:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
578:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
579:       assertEquals(32, Node.INCRDECR_PROP);
580:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
581:       assertEquals(29, Node.JSDOC_INFO_PROP);
582:       assertEquals(47, Node.IS_DISPATCHER);
583:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
584:       assertEquals(2, Node.POST_FLAG);
585:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
586:       assertEquals(37, Node.OPT_ARG_NAME);
587:       assertEquals(46, Node.IS_NAMESPACE);
588:       assertEquals(56, Node.CHANGE_TIME);
589:       assertEquals(43, Node.IS_CONSTANT_NAME);
590:       assertEquals(55, Node.INFERRED_FUNCTION);
591:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
592:       assertEquals(36, Node.QUOTED_PROP);
593:       assertEquals(30, Node.VAR_ARGS_NAME);
594:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
595:       assertEquals(39, Node.EMPTY_BLOCK);
596:       assertEquals(53, Node.INPUT_ID);
597:       assertEquals(15, Node.NO_SIDE_EFFECTS);
598:       assertEquals(57, Node.LAST_PROP);
599:       assertFalse(node1.isEmpty());
600:       assertFalse(node1.isFor());
601:       assertFalse(node1.isIf());
602:       assertFalse(node1.isNE());
603:       assertFalse(node1.isGetterDef());
604:       assertFalse(node1.isArrayLit());
605:       assertFalse(node1.isVoid());
606:       assertFalse(node1.isDelProp());
607:       assertFalse(node1.isString());
608:       assertFalse(node1.isCatch());
609:       assertFalse(node1.isRegExp());
610:       assertFalse(node1.isDebugger());
611:       assertEquals((-1), node1.getCharno());
612:       assertFalse(node1.isTry());
613:       assertFalse(node1.isCase());
614:       assertFalse(node1.isFalse());
615:       assertFalse(node1.isThrow());
616:       assertFalse(node1.isThis());
617:       assertEquals(52, node1.getType());
618:       assertFalse(node1.isHook());
619:       assertFalse(node1.isContinue());
620:       assertFalse(node1.isFunction());
621:       assertFalse(node1.isIn());
622:       assertFalse(node1.isInc());
623:       assertFalse(node1.isSetterDef());
624:       assertFalse(node1.isAssign());
625:       assertFalse(node1.isLabelName());
626:       assertFalse(node1.isGetElem());
627:       assertFalse(node1.isTypeOf());
628:       assertFalse(node1.isNumber());
629:       assertFalse(node1.hasChildren());
630:       assertEquals((-1), node1.getSourcePosition());
631:       assertFalse(node1.isDec());
632:       assertFalse(node1.isCast());
633:       assertFalse(node1.isExprResult());
634:       assertEquals((-1), node1.getLineno());
635:       assertFalse(node1.isNot());
636:       assertFalse(node1.isWith());
637:       assertFalse(node1.isAnd());
638:       assertFalse(node1.isWhile());
639:       assertFalse(node1.hasMoreThanOneChild());
640:       assertFalse(node1.isObjectLit());
641:       assertFalse(node1.isReturn());
642:       assertFalse(node1.isBlock());
643:       assertFalse(node1.isScript());
644:       assertFalse(node1.isGetProp());
645:       assertFalse(node1.hasOneChild());
646:       assertFalse(node1.isName());
647:       assertFalse(node1.isStringKey());
648:       assertFalse(node1.isVar());
649:       assertFalse(node1.isNull());
650:       assertFalse(node1.isComma());
651:       assertFalse(node1.isParamList());
652:       assertFalse(node1.isSwitch());
653:       assertFalse(node1.isCall());
654:       assertFalse(node1.isBreak());
655:       assertFalse(node1.isDo());
656:       assertTrue(node1.isInstanceOf());
657:       assertFalse(node1.isDefaultCase());
658:       assertFalse(node1.isTrue());
659:       assertEquals(0, node1.getChildCount());
660:       assertFalse(node1.isOr());
661:       assertFalse(node1.isAdd());
662:       assertFalse(node1.isLabel());
663:       assertFalse(node1.isAssignAdd());
664:       assertFalse(node1.isNew());
665:       assertFalse(node1.equals((Object)node0));
666:       assertTrue(boolean2 == boolean1);
667:       assertTrue(boolean2 == boolean0);
668:       assertFalse(boolean2);
669:       
670:       Node node2 = new Node(882, node1, node1, node1, node0, 53, (-2003));
671:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
672:       assertEquals(8, Node.FLAG_NO_THROWS);
673:       assertEquals(39, Node.EMPTY_BLOCK);
674:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
675:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
676:       assertEquals(50, Node.FREE_CALL);
677:       assertEquals(55, Node.INFERRED_FUNCTION);
678:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
679:       assertEquals(57, Node.LAST_PROP);
680:       assertEquals(54, Node.SLASH_V);
681:       assertEquals(43, Node.IS_CONSTANT_NAME);
682:       assertEquals(30, Node.VAR_ARGS_NAME);
683:       assertEquals(40, Node.ORIGINALNAME_PROP);
684:       assertEquals(46, Node.IS_NAMESPACE);
685:       assertEquals(2, Node.POST_FLAG);
686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
687:       assertEquals(56, Node.CHANGE_TIME);
688:       assertEquals(47, Node.IS_DISPATCHER);
689:       assertEquals(51, Node.STATIC_SOURCE_FILE);
690:       assertEquals(12, Node.COLUMN_BITS);
691:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
692:       assertEquals(29, Node.JSDOC_INFO_PROP);
693:       assertEquals(32, Node.INCRDECR_PROP);
694:       assertEquals(53, Node.INPUT_ID);
695:       assertEquals(15, Node.NO_SIDE_EFFECTS);
696:       assertEquals(1, Node.DECR_FLAG);
697:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
698:       assertEquals(52, Node.LENGTH);
699:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
700:       assertEquals(36, Node.QUOTED_PROP);
701:       assertEquals(4095, Node.COLUMN_MASK);
702:       assertEquals(57, Node.REFLECTED_OBJECT);
703:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
704:       assertEquals(49, Node.DIRECT_EVAL);
705:       assertEquals(48, Node.DIRECTIVES);
706:       assertEquals(37, Node.OPT_ARG_NAME);
707:       assertEquals(40, Node.ORIGINALNAME_PROP);
708:       assertEquals(57, Node.REFLECTED_OBJECT);
709:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
710:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
711:       assertEquals(52, Node.LENGTH);
712:       assertEquals(8, Node.FLAG_NO_THROWS);
713:       assertEquals(50, Node.FREE_CALL);
714:       assertEquals(48, Node.DIRECTIVES);
715:       assertEquals(54, Node.SLASH_V);
716:       assertEquals(49, Node.DIRECT_EVAL);
717:       assertEquals(1, Node.DECR_FLAG);
718:       assertEquals(12, Node.COLUMN_BITS);
719:       assertEquals(51, Node.STATIC_SOURCE_FILE);
720:       assertEquals(4095, Node.COLUMN_MASK);
721:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
722:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
723:       assertEquals(32, Node.INCRDECR_PROP);
724:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
725:       assertEquals(29, Node.JSDOC_INFO_PROP);
726:       assertEquals(47, Node.IS_DISPATCHER);
727:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
728:       assertEquals(2, Node.POST_FLAG);
729:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
730:       assertEquals(37, Node.OPT_ARG_NAME);
731:       assertEquals(46, Node.IS_NAMESPACE);
732:       assertEquals(56, Node.CHANGE_TIME);
733:       assertEquals(43, Node.IS_CONSTANT_NAME);
734:       assertEquals(55, Node.INFERRED_FUNCTION);
735:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
736:       assertEquals(36, Node.QUOTED_PROP);
737:       assertEquals(30, Node.VAR_ARGS_NAME);
738:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
739:       assertEquals(39, Node.EMPTY_BLOCK);
740:       assertEquals(53, Node.INPUT_ID);
741:       assertEquals(15, Node.NO_SIDE_EFFECTS);
742:       assertEquals(57, Node.LAST_PROP);
743:       assertEquals(29, Node.JSDOC_INFO_PROP);
744:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
745:       assertEquals(47, Node.IS_DISPATCHER);
746:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
747:       assertEquals(37, Node.OPT_ARG_NAME);
748:       assertEquals(56, Node.CHANGE_TIME);
749:       assertEquals(46, Node.IS_NAMESPACE);
750:       assertEquals(53, Node.INPUT_ID);
751:       assertEquals(51, Node.STATIC_SOURCE_FILE);
752:       assertEquals(36, Node.QUOTED_PROP);
753:       assertEquals(30, Node.VAR_ARGS_NAME);
754:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
755:       assertEquals(15, Node.NO_SIDE_EFFECTS);
756:       assertEquals(43, Node.IS_CONSTANT_NAME);
757:       assertEquals(57, Node.LAST_PROP);
758:       assertEquals(2, Node.POST_FLAG);
759:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
760:       assertEquals(50, Node.FREE_CALL);
761:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
762:       assertEquals(40, Node.ORIGINALNAME_PROP);
763:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
764:       assertEquals(48, Node.DIRECTIVES);
765:       assertEquals(54, Node.SLASH_V);
766:       assertEquals(39, Node.EMPTY_BLOCK);
767:       assertEquals(57, Node.REFLECTED_OBJECT);
768:       assertEquals(55, Node.INFERRED_FUNCTION);
769:       assertEquals(52, Node.LENGTH);
770:       assertEquals(8, Node.FLAG_NO_THROWS);
771:       assertEquals(49, Node.DIRECT_EVAL);
772:       assertEquals(1, Node.DECR_FLAG);
773:       assertEquals(12, Node.COLUMN_BITS);
774:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
775:       assertEquals(32, Node.INCRDECR_PROP);
776:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
777:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
778:       assertEquals(4095, Node.COLUMN_MASK);
779:       assertFalse(node0.isIf());
780:       assertFalse(node0.isGetterDef());
781:       assertFalse(node0.isNE());
782:       assertFalse(node0.isFor());
783:       assertFalse(node0.isString());
784:       assertFalse(node0.isIn());
785:       assertTrue(node0.isNumber());
786:       assertFalse(node0.isEmpty());
787:       assertFalse(node0.isCase());
788:       assertFalse(node0.isInc());
789:       assertFalse(node0.isDebugger());
790:       assertEquals((-1), node0.getCharno());
791:       assertFalse(node0.isDefaultCase());
792:       assertFalse(node0.isFunction());
793:       assertFalse(node0.isSwitch());
794:       assertFalse(node0.isFalse());
795:       assertFalse(node0.isArrayLit());
796:       assertFalse(node0.isParamList());
797:       assertFalse(node0.isThis());
798:       assertFalse(node0.isThrow());
799:       assertFalse(node0.isScript());
800:       assertFalse(node0.isSetterDef());
801:       assertFalse(node0.isTry());
802:       assertFalse(node0.isRegExp());
803:       assertEquals(39, node0.getType());
804:       assertFalse(node0.isBlock());
805:       assertFalse(node0.isHook());
806:       assertFalse(node0.isCatch());
807:       assertFalse(node0.isWith());
808:       assertFalse(node0.hasMoreThanOneChild());
809:       assertEquals((-1), node0.getLineno());
810:       assertFalse(node0.isInstanceOf());
811:       assertFalse(node0.isOr());
812:       assertFalse(node0.isTypeOf());
813:       assertFalse(node0.isAssignAdd());
814:       assertFalse(node0.hasChildren());
815:       assertEquals((-1), node0.getSourcePosition());
816:       assertFalse(node0.isDec());
817:       assertFalse(node0.isLabel());
818:       assertFalse(node0.isReturn());
819:       assertFalse(node0.isDo());
820:       assertFalse(node0.hasOneChild());
821:       assertFalse(node0.isNew());
822:       assertFalse(node0.isVar());
823:       assertFalse(node0.isAnd());
824:       assertFalse(node0.isContinue());
825:       assertFalse(node0.isCast());
826:       assertFalse(node0.isStringKey());
827:       assertFalse(node0.isLabelName());
828:       assertFalse(node0.isComma());
829:       assertEquals(0, node0.getChildCount());
830:       assertFalse(node0.isNull());
831:       assertFalse(node0.isObjectLit());
832:       assertFalse(node0.isNot());
833:       assertFalse(node0.isAdd());
834:       assertFalse(node0.isGetProp());
835:       assertFalse(node0.isExprResult());
836:       assertFalse(node0.isVoid());
837:       assertFalse(node0.isTrue());
838:       assertFalse(node0.isWhile());
839:       assertFalse(node0.isCall());
840:       assertFalse(node0.isAssign());
841:       assertFalse(node0.isName());
842:       assertFalse(node0.isBreak());
843:       assertFalse(node0.isDelProp());
844:       assertFalse(node0.isGetElem());
845:       assertFalse(node1.isEmpty());
846:       assertFalse(node1.isFor());
847:       assertFalse(node1.isIf());
848:       assertFalse(node1.isNE());
849:       assertFalse(node1.isGetterDef());
850:       assertFalse(node1.isArrayLit());
851:       assertFalse(node1.isVoid());
852:       assertFalse(node1.isDelProp());
853:       assertFalse(node1.isString());
854:       assertFalse(node1.isCatch());
855:       assertFalse(node1.isRegExp());
856:       assertFalse(node1.isDebugger());
857:       assertEquals((-1), node1.getCharno());
858:       assertFalse(node1.isTry());
859:       assertFalse(node1.isCase());
860:       assertFalse(node1.isFalse());
861:       assertFalse(node1.isThrow());
862:       assertFalse(node1.isThis());
863:       assertEquals(52, node1.getType());
864:       assertFalse(node1.isHook());
865:       assertFalse(node1.isContinue());
866:       assertFalse(node1.isFunction());
867:       assertFalse(node1.isIn());
868:       assertFalse(node1.isInc());
869:       assertFalse(node1.isSetterDef());
870:       assertFalse(node1.isAssign());
871:       assertFalse(node1.isLabelName());
872:       assertFalse(node1.isGetElem());
873:       assertFalse(node1.isTypeOf());
874:       assertFalse(node1.isNumber());
875:       assertFalse(node1.hasChildren());
876:       assertEquals((-1), node1.getSourcePosition());
877:       assertFalse(node1.isDec());
878:       assertFalse(node1.isCast());
879:       assertFalse(node1.isExprResult());
880:       assertEquals((-1), node1.getLineno());
881:       assertFalse(node1.isNot());
882:       assertFalse(node1.isWith());
883:       assertFalse(node1.isAnd());
884:       assertFalse(node1.isWhile());
885:       assertFalse(node1.hasMoreThanOneChild());
886:       assertFalse(node1.isObjectLit());
887:       assertFalse(node1.isReturn());
888:       assertFalse(node1.isBlock());
889:       assertFalse(node1.isScript());
890:       assertFalse(node1.isGetProp());
891:       assertFalse(node1.hasOneChild());
892:       assertFalse(node1.isName());
893:       assertFalse(node1.isStringKey());
894:       assertFalse(node1.isVar());
895:       assertFalse(node1.isNull());
896:       assertFalse(node1.isComma());
897:       assertFalse(node1.isParamList());
898:       assertFalse(node1.isSwitch());
899:       assertFalse(node1.isCall());
900:       assertFalse(node1.isBreak());
901:       assertFalse(node1.isDo());
902:       assertTrue(node1.isInstanceOf());
903:       assertFalse(node1.isDefaultCase());
904:       assertFalse(node1.isTrue());
905:       assertEquals(0, node1.getChildCount());
906:       assertFalse(node1.isOr());
907:       assertFalse(node1.isAdd());
908:       assertFalse(node1.isLabel());
909:       assertFalse(node1.isAssignAdd());
910:       assertFalse(node1.isNew());
911:       assertFalse(node2.isBreak());
912:       assertFalse(node2.isThrow());
913:       assertFalse(node2.isGetProp());
914:       assertFalse(node2.isObjectLit());
915:       assertEquals((-1), node2.getCharno());
916:       assertFalse(node2.isNot());
917:       assertFalse(node2.isAnd());
918:       assertFalse(node2.isInc());
919:       assertFalse(node2.isSwitch());
920:       assertEquals(2, node2.getChildCount());
921:       assertFalse(node2.isCast());
922:       assertFalse(node2.isFalse());
923:       assertFalse(node2.isDelProp());
924:       assertFalse(node2.isEmpty());
925:       assertFalse(node2.isGetElem());
926:       assertFalse(node2.isDebugger());
927:       assertFalse(node2.isTrue());
928:       assertEquals((-1), node2.getSourcePosition());
929:       assertFalse(node2.isOr());
930:       assertFalse(node2.isWhile());
931:       assertFalse(node2.isString());
932:       assertFalse(node2.isExprResult());
933:       assertFalse(node2.isVoid());
934:       assertTrue(node2.hasMoreThanOneChild());
935:       assertFalse(node2.isReturn());
936:       assertFalse(node2.isTypeOf());
937:       assertFalse(node2.isComma());
938:       assertFalse(node2.isAssign());
939:       assertFalse(node2.isDec());
940:       assertFalse(node2.isNull());
941:       assertEquals(882, node2.getType());
942:       assertFalse(node2.isStringKey());
943:       assertFalse(node2.isCall());
944:       assertFalse(node2.isParamList());
945:       assertFalse(node2.isSetterDef());
946:       assertFalse(node2.isName());
947:       assertFalse(node2.isAdd());
948:       assertFalse(node2.isDefaultCase());
949:       assertFalse(node2.isNew());
950:       assertFalse(node2.isDo());
951:       assertFalse(node2.isAssignAdd());
952:       assertFalse(node2.isVar());
953:       assertFalse(node2.isContinue());
954:       assertFalse(node2.isFunction());
955:       assertFalse(node2.isLabel());
956:       assertFalse(node2.isGetterDef());
957:       assertFalse(node2.isIf());
958:       assertFalse(node2.isNumber());
959:       assertFalse(node2.isFor());
960:       assertFalse(node2.isNE());
961:       assertFalse(node2.isArrayLit());
962:       assertFalse(node2.hasOneChild());
963:       assertFalse(node2.isLabelName());
964:       assertFalse(node2.isIn());
965:       assertFalse(node2.isWith());
966:       assertFalse(node2.isScript());
967:       assertFalse(node2.isTry());
968:       assertFalse(node2.isCase());
969:       assertEquals((-1), node2.getLineno());
970:       assertFalse(node2.isHook());
971:       assertFalse(node2.isBlock());
972:       assertFalse(node2.isInstanceOf());
973:       assertTrue(node2.hasChildren());
974:       assertFalse(node2.isCatch());
975:       assertFalse(node2.isThis());
976:       assertFalse(node2.isRegExp());
977:       assertNotNull(node2);
978:       assertFalse(node0.equals((Object)node1));
979:       assertFalse(node1.equals((Object)node0));
980:       assertFalse(node2.equals((Object)node0));
981:       assertFalse(node2.equals((Object)node1));
982:       
983:       HashSet<TemplateType> hashSet0 = new HashSet<TemplateType>();
984:       assertTrue(hashSet0.isEmpty());
985:       assertEquals(0, hashSet0.size());
986:       assertNotNull(hashSet0);
987:       
988:       ArrayDeque<TemplateType> arrayDeque0 = new ArrayDeque<TemplateType>(hashSet0);
989:       assertTrue(hashSet0.isEmpty());
990:       assertEquals(0, hashSet0.size());
991:       assertTrue(arrayDeque0.isEmpty());
992:       assertEquals(0, arrayDeque0.size());
993:       assertNotNull(arrayDeque0);
994:       
995:       HashSet<TemplateType> hashSet1 = new HashSet<TemplateType>();
996:       assertTrue(hashSet1.isEmpty());
997:       assertEquals(0, hashSet1.size());
998:       assertNotNull(hashSet1);
999:       assertTrue(hashSet1.equals((Object)hashSet0));
1000:       
1001:       ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet1);
1002:       assertTrue(hashSet1.isEmpty());
1003:       assertEquals(0, hashSet1.size());
1004:       assertEquals(0, immutableList0.size());
1005:       assertNotSame(hashSet1, hashSet0);
1006:       assertNotNull(immutableList0);
1007:       assertTrue(hashSet1.equals((Object)hashSet0));
1008:       
1009:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
1010:       assertNotNull(simpleErrorReporter0);
1011:       
1012:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
1013:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1014:       assertNotNull(jSTypeRegistry0);
1015:       
1016:       Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
1017:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1018:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1019:       assertEquals(39, Node.EMPTY_BLOCK);
1020:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1021:       assertEquals(50, Node.FREE_CALL);
1022:       assertEquals(8, Node.FLAG_NO_THROWS);
1023:       assertEquals(4095, Node.COLUMN_MASK);
1024:       assertEquals(40, Node.ORIGINALNAME_PROP);
1025:       assertEquals(57, Node.REFLECTED_OBJECT);
1026:       assertEquals(48, Node.DIRECTIVES);
1027:       assertEquals(43, Node.IS_CONSTANT_NAME);
1028:       assertEquals(54, Node.SLASH_V);
1029:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1030:       assertEquals(12, Node.COLUMN_BITS);
1031:       assertEquals(1, Node.DECR_FLAG);
1032:       assertEquals(32, Node.INCRDECR_PROP);
1033:       assertEquals(2, Node.POST_FLAG);
1034:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1035:       assertEquals(56, Node.CHANGE_TIME);
1036:       assertEquals(37, Node.OPT_ARG_NAME);
1037:       assertEquals(47, Node.IS_DISPATCHER);
1038:       assertEquals(29, Node.JSDOC_INFO_PROP);
1039:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1040:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1041:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1042:       assertEquals(46, Node.IS_NAMESPACE);
1043:       assertEquals(49, Node.DIRECT_EVAL);
1044:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1045:       assertEquals(36, Node.QUOTED_PROP);
1046:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1047:       assertEquals(53, Node.INPUT_ID);
1048:       assertEquals(30, Node.VAR_ARGS_NAME);
1049:       assertEquals(52, Node.LENGTH);
1050:       assertEquals(55, Node.INFERRED_FUNCTION);
1051:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1052:       assertEquals(57, Node.LAST_PROP);
1053:       assertTrue(hashSet1.isEmpty());
1054:       assertEquals(0, hashSet1.size());
1055:       assertEquals(0, immutableList0.size());
1056:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1057:       assertFalse(node3.isNE());
1058:       assertFalse(node3.isIn());
1059:       assertFalse(node3.isGetterDef());
1060:       assertFalse(node3.isDelProp());
1061:       assertFalse(node3.isIf());
1062:       assertFalse(node3.isArrayLit());
1063:       assertFalse(node3.isVoid());
1064:       assertFalse(node3.isDebugger());
1065:       assertEquals((-1), node3.getCharno());
1066:       assertFalse(node3.isSwitch());
1067:       assertFalse(node3.isString());
1068:       assertFalse(node3.isRegExp());
1069:       assertFalse(node3.isHook());
1070:       assertFalse(node3.isFor());
1071:       assertFalse(node3.isCase());
1072:       assertFalse(node3.isTry());
1073:       assertFalse(node3.isComma());
1074:       assertEquals(83, node3.getType());
1075:       assertFalse(node3.isNull());
1076:       assertEquals(0, node3.getChildCount());
1077:       assertFalse(node3.isCall());
1078:       assertFalse(node3.isStringKey());
1079:       assertFalse(node3.isBreak());
1080:       assertFalse(node3.isName());
1081:       assertFalse(node3.isTrue());
1082:       assertFalse(node3.isAdd());
1083:       assertFalse(node3.isEmpty());
1084:       assertFalse(node3.isVar());
1085:       assertFalse(node3.isDefaultCase());
1086:       assertFalse(node3.isAssignAdd());
1087:       assertFalse(node3.isNew());
1088:       assertFalse(node3.isDo());
1089:       assertFalse(node3.isReturn());
1090:       assertFalse(node3.hasChildren());
1091:       assertFalse(node3.isLabel());
1092:       assertEquals((-1), node3.getSourcePosition());
1093:       assertFalse(node3.isDec());
1094:       assertFalse(node3.isTypeOf());
1095:       assertFalse(node3.isNumber());
1096:       assertFalse(node3.isAssign());
1097:       assertFalse(node3.isOr());
1098:       assertFalse(node3.isContinue());
1099:       assertFalse(node3.hasMoreThanOneChild());
1100:       assertFalse(node3.isGetElem());
1101:       assertFalse(node3.isCast());
1102:       assertEquals((-1), node3.getLineno());
1103:       assertFalse(node3.isLabelName());
1104:       assertFalse(node3.isExprResult());
1105:       assertFalse(node3.isBlock());
1106:       assertFalse(node3.isScript());
1107:       assertFalse(node3.isWith());
1108:       assertFalse(node3.isNot());
1109:       assertFalse(node3.isObjectLit());
1110:       assertFalse(node3.isWhile());
1111:       assertFalse(node3.hasOneChild());
1112:       assertFalse(node3.isThis());
1113:       assertFalse(node3.isSetterDef());
1114:       assertFalse(node3.isGetProp());
1115:       assertFalse(node3.isFalse());
1116:       assertTrue(node3.isParamList());
1117:       assertFalse(node3.isAnd());
1118:       assertFalse(node3.isInstanceOf());
1119:       assertFalse(node3.isCatch());
1120:       assertFalse(node3.isInc());
1121:       assertFalse(node3.isFunction());
1122:       assertFalse(node3.isThrow());
1123:       assertNotSame(hashSet1, hashSet0);
1124:       assertNotSame(node3, node2);
1125:       assertNotSame(node3, node1);
1126:       assertNotNull(node3);
1127:       assertTrue(hashSet1.equals((Object)hashSet0));
1128:       assertFalse(node3.equals((Object)node0));
1129:       assertFalse(node3.equals((Object)node2));
1130:       assertFalse(node3.equals((Object)node1));
1131:       
1132:       boolean boolean3 = node2.isCall();
1133:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1134:       assertEquals(8, Node.FLAG_NO_THROWS);
1135:       assertEquals(39, Node.EMPTY_BLOCK);
1136:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1137:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1138:       assertEquals(50, Node.FREE_CALL);
1139:       assertEquals(55, Node.INFERRED_FUNCTION);
1140:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1141:       assertEquals(57, Node.LAST_PROP);
1142:       assertEquals(54, Node.SLASH_V);
1143:       assertEquals(43, Node.IS_CONSTANT_NAME);
1144:       assertEquals(30, Node.VAR_ARGS_NAME);
1145:       assertEquals(40, Node.ORIGINALNAME_PROP);
1146:       assertEquals(46, Node.IS_NAMESPACE);
1147:       assertEquals(2, Node.POST_FLAG);
1148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1149:       assertEquals(56, Node.CHANGE_TIME);
1150:       assertEquals(47, Node.IS_DISPATCHER);
1151:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1152:       assertEquals(12, Node.COLUMN_BITS);
1153:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1154:       assertEquals(29, Node.JSDOC_INFO_PROP);
1155:       assertEquals(32, Node.INCRDECR_PROP);
1156:       assertEquals(53, Node.INPUT_ID);
1157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1158:       assertEquals(1, Node.DECR_FLAG);
1159:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1160:       assertEquals(52, Node.LENGTH);
1161:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1162:       assertEquals(36, Node.QUOTED_PROP);
1163:       assertEquals(4095, Node.COLUMN_MASK);
1164:       assertEquals(57, Node.REFLECTED_OBJECT);
1165:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1166:       assertEquals(49, Node.DIRECT_EVAL);
1167:       assertEquals(48, Node.DIRECTIVES);
1168:       assertEquals(37, Node.OPT_ARG_NAME);
1169:       assertEquals(40, Node.ORIGINALNAME_PROP);
1170:       assertEquals(57, Node.REFLECTED_OBJECT);
1171:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1172:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1173:       assertEquals(52, Node.LENGTH);
1174:       assertEquals(8, Node.FLAG_NO_THROWS);
1175:       assertEquals(50, Node.FREE_CALL);
1176:       assertEquals(48, Node.DIRECTIVES);
1177:       assertEquals(54, Node.SLASH_V);
1178:       assertEquals(49, Node.DIRECT_EVAL);
1179:       assertEquals(1, Node.DECR_FLAG);
1180:       assertEquals(12, Node.COLUMN_BITS);
1181:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1182:       assertEquals(4095, Node.COLUMN_MASK);
1183:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1184:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1185:       assertEquals(32, Node.INCRDECR_PROP);
1186:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1187:       assertEquals(29, Node.JSDOC_INFO_PROP);
1188:       assertEquals(47, Node.IS_DISPATCHER);
1189:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1190:       assertEquals(2, Node.POST_FLAG);
1191:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1192:       assertEquals(37, Node.OPT_ARG_NAME);
1193:       assertEquals(46, Node.IS_NAMESPACE);
1194:       assertEquals(56, Node.CHANGE_TIME);
1195:       assertEquals(43, Node.IS_CONSTANT_NAME);
1196:       assertEquals(55, Node.INFERRED_FUNCTION);
1197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1198:       assertEquals(36, Node.QUOTED_PROP);
1199:       assertEquals(30, Node.VAR_ARGS_NAME);
1200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1201:       assertEquals(39, Node.EMPTY_BLOCK);
1202:       assertEquals(53, Node.INPUT_ID);
1203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1204:       assertEquals(57, Node.LAST_PROP);
1205:       assertEquals(29, Node.JSDOC_INFO_PROP);
1206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1207:       assertEquals(47, Node.IS_DISPATCHER);
1208:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1209:       assertEquals(37, Node.OPT_ARG_NAME);
1210:       assertEquals(56, Node.CHANGE_TIME);
1211:       assertEquals(46, Node.IS_NAMESPACE);
1212:       assertEquals(53, Node.INPUT_ID);
1213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1214:       assertEquals(36, Node.QUOTED_PROP);
1215:       assertEquals(30, Node.VAR_ARGS_NAME);
1216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1217:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1218:       assertEquals(43, Node.IS_CONSTANT_NAME);
1219:       assertEquals(57, Node.LAST_PROP);
1220:       assertEquals(2, Node.POST_FLAG);
1221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1222:       assertEquals(50, Node.FREE_CALL);
1223:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1224:       assertEquals(40, Node.ORIGINALNAME_PROP);
1225:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1226:       assertEquals(48, Node.DIRECTIVES);
1227:       assertEquals(54, Node.SLASH_V);
1228:       assertEquals(39, Node.EMPTY_BLOCK);
1229:       assertEquals(57, Node.REFLECTED_OBJECT);
1230:       assertEquals(55, Node.INFERRED_FUNCTION);
1231:       assertEquals(52, Node.LENGTH);
1232:       assertEquals(8, Node.FLAG_NO_THROWS);
1233:       assertEquals(49, Node.DIRECT_EVAL);
1234:       assertEquals(1, Node.DECR_FLAG);
1235:       assertEquals(12, Node.COLUMN_BITS);
1236:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1237:       assertEquals(32, Node.INCRDECR_PROP);
1238:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1239:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1240:       assertEquals(4095, Node.COLUMN_MASK);
1241:       assertFalse(node0.isIf());
1242:       assertFalse(node0.isGetterDef());
1243:       assertFalse(node0.isNE());
1244:       assertFalse(node0.isFor());
1245:       assertFalse(node0.isString());
1246:       assertFalse(node0.isIn());
1247:       assertTrue(node0.isNumber());
1248:       assertFalse(node0.isEmpty());
1249:       assertFalse(node0.isCase());
1250:       assertFalse(node0.isInc());
1251:       assertFalse(node0.isDebugger());
1252:       assertEquals((-1), node0.getCharno());
1253:       assertFalse(node0.isDefaultCase());
1254:       assertFalse(node0.isFunction());
1255:       assertFalse(node0.isSwitch());
1256:       assertFalse(node0.isFalse());
1257:       assertFalse(node0.isArrayLit());
1258:       assertFalse(node0.isParamList());
1259:       assertFalse(node0.isThis());
1260:       assertFalse(node0.isThrow());
1261:       assertFalse(node0.isScript());
1262:       assertFalse(node0.isSetterDef());
1263:       assertFalse(node0.isTry());
1264:       assertFalse(node0.isRegExp());
1265:       assertEquals(39, node0.getType());
1266:       assertFalse(node0.isBlock());
1267:       assertFalse(node0.isHook());
1268:       assertFalse(node0.isCatch());
1269:       assertFalse(node0.isWith());
1270:       assertFalse(node0.hasMoreThanOneChild());
1271:       assertEquals((-1), node0.getLineno());
1272:       assertFalse(node0.isInstanceOf());
1273:       assertFalse(node0.isOr());
1274:       assertFalse(node0.isTypeOf());
1275:       assertFalse(node0.isAssignAdd());
1276:       assertFalse(node0.hasChildren());
1277:       assertEquals((-1), node0.getSourcePosition());
1278:       assertFalse(node0.isDec());
1279:       assertFalse(node0.isLabel());
1280:       assertFalse(node0.isReturn());
1281:       assertFalse(node0.isDo());
1282:       assertFalse(node0.hasOneChild());
1283:       assertFalse(node0.isNew());
1284:       assertFalse(node0.isVar());
1285:       assertFalse(node0.isAnd());
1286:       assertFalse(node0.isContinue());
1287:       assertFalse(node0.isCast());
1288:       assertFalse(node0.isStringKey());
1289:       assertFalse(node0.isLabelName());
1290:       assertFalse(node0.isComma());
1291:       assertEquals(0, node0.getChildCount());
1292:       assertFalse(node0.isNull());
1293:       assertFalse(node0.isObjectLit());
1294:       assertFalse(node0.isNot());
1295:       assertFalse(node0.isAdd());
1296:       assertFalse(node0.isGetProp());
1297:       assertFalse(node0.isExprResult());
1298:       assertFalse(node0.isVoid());
1299:       assertFalse(node0.isTrue());
1300:       assertFalse(node0.isWhile());
1301:       assertFalse(node0.isCall());
1302:       assertFalse(node0.isAssign());
1303:       assertFalse(node0.isName());
1304:       assertFalse(node0.isBreak());
1305:       assertFalse(node0.isDelProp());
1306:       assertFalse(node0.isGetElem());
1307:       assertFalse(node1.isEmpty());
1308:       assertFalse(node1.isFor());
1309:       assertFalse(node1.isIf());
1310:       assertFalse(node1.isNE());
1311:       assertFalse(node1.isGetterDef());
1312:       assertFalse(node1.isArrayLit());
1313:       assertFalse(node1.isVoid());
1314:       assertFalse(node1.isDelProp());
1315:       assertFalse(node1.isString());
1316:       assertFalse(node1.isCatch());
1317:       assertFalse(node1.isRegExp());
1318:       assertFalse(node1.isDebugger());
1319:       assertEquals((-1), node1.getCharno());
1320:       assertFalse(node1.isTry());
1321:       assertFalse(node1.isCase());
1322:       assertFalse(node1.isFalse());
1323:       assertFalse(node1.isThrow());
1324:       assertFalse(node1.isThis());
1325:       assertEquals(52, node1.getType());
1326:       assertFalse(node1.isHook());
1327:       assertFalse(node1.isContinue());
1328:       assertFalse(node1.isFunction());
1329:       assertFalse(node1.isIn());
1330:       assertFalse(node1.isInc());
1331:       assertFalse(node1.isSetterDef());
1332:       assertFalse(node1.isAssign());
1333:       assertFalse(node1.isLabelName());
1334:       assertFalse(node1.isGetElem());
1335:       assertFalse(node1.isTypeOf());
1336:       assertFalse(node1.isNumber());
1337:       assertFalse(node1.hasChildren());
1338:       assertEquals((-1), node1.getSourcePosition());
1339:       assertFalse(node1.isDec());
1340:       assertFalse(node1.isCast());
1341:       assertFalse(node1.isExprResult());
1342:       assertEquals((-1), node1.getLineno());
1343:       assertFalse(node1.isNot());
1344:       assertFalse(node1.isWith());
1345:       assertFalse(node1.isAnd());
1346:       assertFalse(node1.isWhile());
1347:       assertFalse(node1.hasMoreThanOneChild());
1348:       assertFalse(node1.isObjectLit());
1349:       assertFalse(node1.isReturn());
1350:       assertFalse(node1.isBlock());
1351:       assertFalse(node1.isScript());
1352:       assertFalse(node1.isGetProp());
1353:       assertFalse(node1.hasOneChild());
1354:       assertFalse(node1.isName());
1355:       assertFalse(node1.isStringKey());
1356:       assertFalse(node1.isVar());
1357:       assertFalse(node1.isNull());
1358:       assertFalse(node1.isComma());
1359:       assertFalse(node1.isParamList());
1360:       assertFalse(node1.isSwitch());
1361:       assertFalse(node1.isCall());
1362:       assertFalse(node1.isBreak());
1363:       assertFalse(node1.isDo());
1364:       assertTrue(node1.isInstanceOf());
1365:       assertFalse(node1.isDefaultCase());
1366:       assertFalse(node1.isTrue());
1367:       assertEquals(0, node1.getChildCount());
1368:       assertFalse(node1.isOr());
1369:       assertFalse(node1.isAdd());
1370:       assertFalse(node1.isLabel());
1371:       assertFalse(node1.isAssignAdd());
1372:       assertFalse(node1.isNew());
1373:       assertFalse(node2.isBreak());
1374:       assertFalse(node2.isThrow());
1375:       assertFalse(node2.isGetProp());
1376:       assertFalse(node2.isObjectLit());
1377:       assertEquals((-1), node2.getCharno());
1378:       assertFalse(node2.isNot());
1379:       assertFalse(node2.isAnd());
1380:       assertFalse(node2.isInc());
1381:       assertFalse(node2.isSwitch());
1382:       assertEquals(2, node2.getChildCount());
1383:       assertFalse(node2.isCast());
1384:       assertFalse(node2.isFalse());
1385:       assertFalse(node2.isDelProp());
1386:       assertFalse(node2.isEmpty());
1387:       assertFalse(node2.isGetElem());
1388:       assertFalse(node2.isDebugger());
1389:       assertFalse(node2.isTrue());
1390:       assertEquals((-1), node2.getSourcePosition());
1391:       assertFalse(node2.isOr());
1392:       assertFalse(node2.isWhile());
1393:       assertFalse(node2.isString());
1394:       assertFalse(node2.isExprResult());
1395:       assertFalse(node2.isVoid());
1396:       assertTrue(node2.hasMoreThanOneChild());
1397:       assertFalse(node2.isReturn());
1398:       assertFalse(node2.isTypeOf());
1399:       assertFalse(node2.isComma());
1400:       assertFalse(node2.isAssign());
1401:       assertFalse(node2.isDec());
1402:       assertFalse(node2.isNull());
1403:       assertEquals(882, node2.getType());
1404:       assertFalse(node2.isStringKey());
1405:       assertFalse(node2.isCall());
1406:       assertFalse(node2.isParamList());
1407:       assertFalse(node2.isSetterDef());
1408:       assertFalse(node2.isName());
1409:       assertFalse(node2.isAdd());
1410:       assertFalse(node2.isDefaultCase());
1411:       assertFalse(node2.isNew());
1412:       assertFalse(node2.isDo());
1413:       assertFalse(node2.isAssignAdd());
1414:       assertFalse(node2.isVar());
1415:       assertFalse(node2.isContinue());
1416:       assertFalse(node2.isFunction());
1417:       assertFalse(node2.isLabel());
1418:       assertFalse(node2.isGetterDef());
1419:       assertFalse(node2.isIf());
1420:       assertFalse(node2.isNumber());
1421:       assertFalse(node2.isFor());
1422:       assertFalse(node2.isNE());
1423:       assertFalse(node2.isArrayLit());
1424:       assertFalse(node2.hasOneChild());
1425:       assertFalse(node2.isLabelName());
1426:       assertFalse(node2.isIn());
1427:       assertFalse(node2.isWith());
1428:       assertFalse(node2.isScript());
1429:       assertFalse(node2.isTry());
1430:       assertFalse(node2.isCase());
1431:       assertEquals((-1), node2.getLineno());
1432:       assertFalse(node2.isHook());
1433:       assertFalse(node2.isBlock());
1434:       assertFalse(node2.isInstanceOf());
1435:       assertTrue(node2.hasChildren());
1436:       assertFalse(node2.isCatch());
1437:       assertFalse(node2.isThis());
1438:       assertFalse(node2.isRegExp());
1439:       assertNotSame(node1, node2);
1440:       assertNotSame(node1, node3);
1441:       assertNotSame(node2, node1);
1442:       assertNotSame(node2, node3);
1443:       assertFalse(node0.equals((Object)node2));
1444:       assertFalse(node0.equals((Object)node3));
1445:       assertFalse(node0.equals((Object)node1));
1446:       assertFalse(node1.equals((Object)node2));
1447:       assertFalse(node1.equals((Object)node3));
1448:       assertFalse(node1.equals((Object)node0));
1449:       assertFalse(node2.equals((Object)node0));
1450:       assertFalse(node2.equals((Object)node1));
1451:       assertFalse(node2.equals((Object)node3));
1452:       assertTrue(boolean3 == boolean1);
1453:       assertTrue(boolean3 == boolean2);
1454:       assertTrue(boolean3 == boolean0);
1455:       assertFalse(boolean3);
1456:       
1457:       boolean boolean4 = node2.isParamList();
1458:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1459:       assertEquals(8, Node.FLAG_NO_THROWS);
1460:       assertEquals(39, Node.EMPTY_BLOCK);
1461:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1462:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1463:       assertEquals(50, Node.FREE_CALL);
1464:       assertEquals(55, Node.INFERRED_FUNCTION);
1465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1466:       assertEquals(57, Node.LAST_PROP);
1467:       assertEquals(54, Node.SLASH_V);
1468:       assertEquals(43, Node.IS_CONSTANT_NAME);
1469:       assertEquals(30, Node.VAR_ARGS_NAME);
1470:       assertEquals(40, Node.ORIGINALNAME_PROP);
1471:       assertEquals(46, Node.IS_NAMESPACE);
1472:       assertEquals(2, Node.POST_FLAG);
1473:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1474:       assertEquals(56, Node.CHANGE_TIME);
1475:       assertEquals(47, Node.IS_DISPATCHER);
1476:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1477:       assertEquals(12, Node.COLUMN_BITS);
1478:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1479:       assertEquals(29, Node.JSDOC_INFO_PROP);
1480:       assertEquals(32, Node.INCRDECR_PROP);
1481:       assertEquals(53, Node.INPUT_ID);
1482:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1483:       assertEquals(1, Node.DECR_FLAG);
1484:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1485:       assertEquals(52, Node.LENGTH);
1486:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1487:       assertEquals(36, Node.QUOTED_PROP);
1488:       assertEquals(4095, Node.COLUMN_MASK);
1489:       assertEquals(57, Node.REFLECTED_OBJECT);
1490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1491:       assertEquals(49, Node.DIRECT_EVAL);
1492:       assertEquals(48, Node.DIRECTIVES);
1493:       assertEquals(37, Node.OPT_ARG_NAME);
1494:       assertEquals(40, Node.ORIGINALNAME_PROP);
1495:       assertEquals(57, Node.REFLECTED_OBJECT);
1496:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1497:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1498:       assertEquals(52, Node.LENGTH);
1499:       assertEquals(8, Node.FLAG_NO_THROWS);
1500:       assertEquals(50, Node.FREE_CALL);
1501:       assertEquals(48, Node.DIRECTIVES);
1502:       assertEquals(54, Node.SLASH_V);
1503:       assertEquals(49, Node.DIRECT_EVAL);
1504:       assertEquals(1, Node.DECR_FLAG);
1505:       assertEquals(12, Node.COLUMN_BITS);
1506:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1507:       assertEquals(4095, Node.COLUMN_MASK);
1508:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1509:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1510:       assertEquals(32, Node.INCRDECR_PROP);
1511:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1512:       assertEquals(29, Node.JSDOC_INFO_PROP);
1513:       assertEquals(47, Node.IS_DISPATCHER);
1514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1515:       assertEquals(2, Node.POST_FLAG);
1516:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1517:       assertEquals(37, Node.OPT_ARG_NAME);
1518:       assertEquals(46, Node.IS_NAMESPACE);
1519:       assertEquals(56, Node.CHANGE_TIME);
1520:       assertEquals(43, Node.IS_CONSTANT_NAME);
1521:       assertEquals(55, Node.INFERRED_FUNCTION);
1522:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1523:       assertEquals(36, Node.QUOTED_PROP);
1524:       assertEquals(30, Node.VAR_ARGS_NAME);
1525:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1526:       assertEquals(39, Node.EMPTY_BLOCK);
1527:       assertEquals(53, Node.INPUT_ID);
1528:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1529:       assertEquals(57, Node.LAST_PROP);
1530:       assertEquals(29, Node.JSDOC_INFO_PROP);
1531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1532:       assertEquals(47, Node.IS_DISPATCHER);
1533:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1534:       assertEquals(37, Node.OPT_ARG_NAME);
1535:       assertEquals(56, Node.CHANGE_TIME);
1536:       assertEquals(46, Node.IS_NAMESPACE);
1537:       assertEquals(53, Node.INPUT_ID);
1538:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1539:       assertEquals(36, Node.QUOTED_PROP);
1540:       assertEquals(30, Node.VAR_ARGS_NAME);
1541:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1542:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1543:       assertEquals(43, Node.IS_CONSTANT_NAME);
1544:       assertEquals(57, Node.LAST_PROP);
1545:       assertEquals(2, Node.POST_FLAG);
1546:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1547:       assertEquals(50, Node.FREE_CALL);
1548:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1549:       assertEquals(40, Node.ORIGINALNAME_PROP);
1550:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1551:       assertEquals(48, Node.DIRECTIVES);
1552:       assertEquals(54, Node.SLASH_V);
1553:       assertEquals(39, Node.EMPTY_BLOCK);
1554:       assertEquals(57, Node.REFLECTED_OBJECT);
1555:       assertEquals(55, Node.INFERRED_FUNCTION);
1556:       assertEquals(52, Node.LENGTH);
1557:       assertEquals(8, Node.FLAG_NO_THROWS);
1558:       assertEquals(49, Node.DIRECT_EVAL);
1559:       assertEquals(1, Node.DECR_FLAG);
1560:       assertEquals(12, Node.COLUMN_BITS);
1561:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1562:       assertEquals(32, Node.INCRDECR_PROP);
1563:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1564:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1565:       assertEquals(4095, Node.COLUMN_MASK);
1566:       assertFalse(node0.isIf());
1567:       assertFalse(node0.isGetterDef());
1568:       assertFalse(node0.isNE());
1569:       assertFalse(node0.isFor());
1570:       assertFalse(node0.isString());
1571:       assertFalse(node0.isIn());
1572:       assertTrue(node0.isNumber());
1573:       assertFalse(node0.isEmpty());
1574:       assertFalse(node0.isCase());
1575:       assertFalse(node0.isInc());
1576:       assertFalse(node0.isDebugger());
1577:       assertEquals((-1), node0.getCharno());
1578:       assertFalse(node0.isDefaultCase());
1579:       assertFalse(node0.isFunction());
1580:       assertFalse(node0.isSwitch());
1581:       assertFalse(node0.isFalse());
1582:       assertFalse(node0.isArrayLit());
1583:       assertFalse(node0.isParamList());
1584:       assertFalse(node0.isThis());
1585:       assertFalse(node0.isThrow());
1586:       assertFalse(node0.isScript());
1587:       assertFalse(node0.isSetterDef());
1588:       assertFalse(node0.isTry());
1589:       assertFalse(node0.isRegExp());
1590:       assertEquals(39, node0.getType());
1591:       assertFalse(node0.isBlock());
1592:       assertFalse(node0.isHook());
1593:       assertFalse(node0.isCatch());
1594:       assertFalse(node0.isWith());
1595:       assertFalse(node0.hasMoreThanOneChild());
1596:       assertEquals((-1), node0.getLineno());
1597:       assertFalse(node0.isInstanceOf());
1598:       assertFalse(node0.isOr());
1599:       assertFalse(node0.isTypeOf());
1600:       assertFalse(node0.isAssignAdd());
1601:       assertFalse(node0.hasChildren());
1602:       assertEquals((-1), node0.getSourcePosition());
1603:       assertFalse(node0.isDec());
1604:       assertFalse(node0.isLabel());
1605:       assertFalse(node0.isReturn());
1606:       assertFalse(node0.isDo());
1607:       assertFalse(node0.hasOneChild());
1608:       assertFalse(node0.isNew());
1609:       assertFalse(node0.isVar());
1610:       assertFalse(node0.isAnd());
1611:       assertFalse(node0.isContinue());
1612:       assertFalse(node0.isCast());
1613:       assertFalse(node0.isStringKey());
1614:       assertFalse(node0.isLabelName());
1615:       assertFalse(node0.isComma());
1616:       assertEquals(0, node0.getChildCount());
1617:       assertFalse(node0.isNull());
1618:       assertFalse(node0.isObjectLit());
1619:       assertFalse(node0.isNot());
1620:       assertFalse(node0.isAdd());
1621:       assertFalse(node0.isGetProp());
1622:       assertFalse(node0.isExprResult());
1623:       assertFalse(node0.isVoid());
1624:       assertFalse(node0.isTrue());
1625:       assertFalse(node0.isWhile());
1626:       assertFalse(node0.isCall());
1627:       assertFalse(node0.isAssign());
1628:       assertFalse(node0.isName());
1629:       assertFalse(node0.isBreak());
1630:       assertFalse(node0.isDelProp());
1631:       assertFalse(node0.isGetElem());
1632:       assertFalse(node1.isEmpty());
1633:       assertFalse(node1.isFor());
1634:       assertFalse(node1.isIf());
1635:       assertFalse(node1.isNE());
1636:       assertFalse(node1.isGetterDef());
1637:       assertFalse(node1.isArrayLit());
1638:       assertFalse(node1.isVoid());
1639:       assertFalse(node1.isDelProp());
1640:       assertFalse(node1.isString());
1641:       assertFalse(node1.isCatch());
1642:       assertFalse(node1.isRegExp());
1643:       assertFalse(node1.isDebugger());
1644:       assertEquals((-1), node1.getCharno());
1645:       assertFalse(node1.isTry());
1646:       assertFalse(node1.isCase());
1647:       assertFalse(node1.isFalse());
1648:       assertFalse(node1.isThrow());
1649:       assertFalse(node1.isThis());
1650:       assertEquals(52, node1.getType());
1651:       assertFalse(node1.isHook());
1652:       assertFalse(node1.isContinue());
1653:       assertFalse(node1.isFunction());
1654:       assertFalse(node1.isIn());
1655:       assertFalse(node1.isInc());
1656:       assertFalse(node1.isSetterDef());
1657:       assertFalse(node1.isAssign());
1658:       assertFalse(node1.isLabelName());
1659:       assertFalse(node1.isGetElem());
1660:       assertFalse(node1.isTypeOf());
1661:       assertFalse(node1.isNumber());
1662:       assertFalse(node1.hasChildren());
1663:       assertEquals((-1), node1.getSourcePosition());
1664:       assertFalse(node1.isDec());
1665:       assertFalse(node1.isCast());
1666:       assertFalse(node1.isExprResult());
1667:       assertEquals((-1), node1.getLineno());
1668:       assertFalse(node1.isNot());
1669:       assertFalse(node1.isWith());
1670:       assertFalse(node1.isAnd());
1671:       assertFalse(node1.isWhile());
1672:       assertFalse(node1.hasMoreThanOneChild());
1673:       assertFalse(node1.isObjectLit());
1674:       assertFalse(node1.isReturn());
1675:       assertFalse(node1.isBlock());
1676:       assertFalse(node1.isScript());
1677:       assertFalse(node1.isGetProp());
1678:       assertFalse(node1.hasOneChild());
1679:       assertFalse(node1.isName());
1680:       assertFalse(node1.isStringKey());
1681:       assertFalse(node1.isVar());
1682:       assertFalse(node1.isNull());
1683:       assertFalse(node1.isComma());
1684:       assertFalse(node1.isParamList());
1685:       assertFalse(node1.isSwitch());
1686:       assertFalse(node1.isCall());
1687:       assertFalse(node1.isBreak());
1688:       assertFalse(node1.isDo());
1689:       assertTrue(node1.isInstanceOf());
1690:       assertFalse(node1.isDefaultCase());
1691:       assertFalse(node1.isTrue());
1692:       assertEquals(0, node1.getChildCount());
1693:       assertFalse(node1.isOr());
1694:       assertFalse(node1.isAdd());
1695:       assertFalse(node1.isLabel());
1696:       assertFalse(node1.isAssignAdd());
1697:       assertFalse(node1.isNew());
1698:       assertFalse(node2.isBreak());
1699:       assertFalse(node2.isThrow());
1700:       assertFalse(node2.isGetProp());
1701:       assertFalse(node2.isObjectLit());
1702:       assertEquals((-1), node2.getCharno());
1703:       assertFalse(node2.isNot());
1704:       assertFalse(node2.isAnd());
1705:       assertFalse(node2.isInc());
1706:       assertFalse(node2.isSwitch());
1707:       assertEquals(2, node2.getChildCount());
1708:       assertFalse(node2.isCast());
1709:       assertFalse(node2.isFalse());
1710:       assertFalse(node2.isDelProp());
1711:       assertFalse(node2.isEmpty());
1712:       assertFalse(node2.isGetElem());
1713:       assertFalse(node2.isDebugger());
1714:       assertFalse(node2.isTrue());
1715:       assertEquals((-1), node2.getSourcePosition());
1716:       assertFalse(node2.isOr());
1717:       assertFalse(node2.isWhile());
1718:       assertFalse(node2.isString());
1719:       assertFalse(node2.isExprResult());
1720:       assertFalse(node2.isVoid());
1721:       assertTrue(node2.hasMoreThanOneChild());
1722:       assertFalse(node2.isReturn());
1723:       assertFalse(node2.isTypeOf());
1724:       assertFalse(node2.isComma());
1725:       assertFalse(node2.isAssign());
1726:       assertFalse(node2.isDec());
1727:       assertFalse(node2.isNull());
1728:       assertEquals(882, node2.getType());
1729:       assertFalse(node2.isStringKey());
1730:       assertFalse(node2.isCall());
1731:       assertFalse(node2.isParamList());
1732:       assertFalse(node2.isSetterDef());
1733:       assertFalse(node2.isName());
1734:       assertFalse(node2.isAdd());
1735:       assertFalse(node2.isDefaultCase());
1736:       assertFalse(node2.isNew());
1737:       assertFalse(node2.isDo());
1738:       assertFalse(node2.isAssignAdd());
1739:       assertFalse(node2.isVar());
1740:       assertFalse(node2.isContinue());
1741:       assertFalse(node2.isFunction());
1742:       assertFalse(node2.isLabel());
1743:       assertFalse(node2.isGetterDef());
1744:       assertFalse(node2.isIf());
1745:       assertFalse(node2.isNumber());
1746:       assertFalse(node2.isFor());
1747:       assertFalse(node2.isNE());
1748:       assertFalse(node2.isArrayLit());
1749:       assertFalse(node2.hasOneChild());
1750:       assertFalse(node2.isLabelName());
1751:       assertFalse(node2.isIn());
1752:       assertFalse(node2.isWith());
1753:       assertFalse(node2.isScript());
1754:       assertFalse(node2.isTry());
1755:       assertFalse(node2.isCase());
1756:       assertEquals((-1), node2.getLineno());
1757:       assertFalse(node2.isHook());
1758:       assertFalse(node2.isBlock());
1759:       assertFalse(node2.isInstanceOf());
1760:       assertTrue(node2.hasChildren());
1761:       assertFalse(node2.isCatch());
1762:       assertFalse(node2.isThis());
1763:       assertFalse(node2.isRegExp());
1764:       assertNotSame(node1, node2);
1765:       assertNotSame(node1, node3);
1766:       assertNotSame(node2, node1);
1767:       assertNotSame(node2, node3);
1768:       assertTrue(boolean4 == boolean1);
1769:       assertTrue(boolean4 == boolean2);
1770:       assertTrue(boolean4 == boolean0);
1771:       assertTrue(boolean4 == boolean3);
1772:       assertFalse(node0.equals((Object)node2));
1773:       assertFalse(node0.equals((Object)node3));
1774:       assertFalse(node0.equals((Object)node1));
1775:       assertFalse(node1.equals((Object)node2));
1776:       assertFalse(node1.equals((Object)node3));
1777:       assertFalse(node1.equals((Object)node0));
1778:       assertFalse(node2.equals((Object)node0));
1779:       assertFalse(node2.equals((Object)node1));
1780:       assertFalse(node2.equals((Object)node3));
1781:       assertFalse(boolean4);
1782:   }
1783: }
RegularFileObject[/tmp/EvoSuite_240_1628157547119/com/google/javascript/rhino/Node_240_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:07 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_240_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_240_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_240_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.javascript.rhino.jstype.EnumType",
337:       "com.google.javascript.rhino.jstype.EnumElementType",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.common.collect.AbstractMultimap$Values",
341:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
342:       "com.google.common.collect.AbstractMapBasedMultimap$1",
343:       "com.google.common.collect.Multimaps$Entries",
344:       "com.google.common.collect.AbstractMultimap$Entries",
345:       "com.google.common.collect.AbstractMapBasedMultimap$2",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.jstype.TemplatizedType",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.javascript.rhino.jstype.JSType$2",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
364:       "com.google.common.collect.SingletonImmutableSet",
365:       "com.google.common.collect.ImmutableList$1",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 09:59:07.434 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertNotNull(node0);

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertNull(staticSourceFile0);

Iterable<Node> iterable0 = node0.children();
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertNotNull(iterable0);

boolean boolean0 = node0.isTry();
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(boolean0);

boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Function");
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

Node node1 = new Node(52, 3326, (-1582));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isString());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertEquals(52, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertTrue(node1.isInstanceOf());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

boolean boolean2 = node1.isSwitch();
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isString());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertEquals(52, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertTrue(node1.isInstanceOf());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

Node node2 = new Node(882, node1, node1, node1, node0, 53, (-2003));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isString());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertEquals(52, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertTrue(node1.isInstanceOf());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertEquals(882, node2.getType());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

HashSet<TemplateType> hashSet0 = new HashSet<TemplateType>();
assertTrue(hashSet0.isEmpty());
assertEquals(0, hashSet0.size());
assertNotNull(hashSet0);

ArrayDeque<TemplateType> arrayDeque0 = new ArrayDeque<TemplateType>(hashSet0);
assertTrue(hashSet0.isEmpty());
assertEquals(0, hashSet0.size());
assertTrue(arrayDeque0.isEmpty());
assertEquals(0, arrayDeque0.size());
assertNotNull(arrayDeque0);

HashSet<TemplateType> hashSet1 = new HashSet<TemplateType>();
assertTrue(hashSet1.isEmpty());
assertEquals(0, hashSet1.size());
assertNotNull(hashSet1);
assertTrue(hashSet1.equals((Object)hashSet0));

ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) hashSet1);
assertTrue(hashSet1.isEmpty());
assertEquals(0, hashSet1.size());
assertEquals(0, immutableList0.size());
assertNotSame(hashSet1, hashSet0);
assertNotNull(immutableList0);
assertTrue(hashSet1.equals((Object)hashSet0));

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertTrue(hashSet1.isEmpty());
assertEquals(0, hashSet1.size());
assertEquals(0, immutableList0.size());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVoid());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isString());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertFalse(node3.isTry());
assertFalse(node3.isComma());
assertEquals(83, node3.getType());
assertFalse(node3.isNull());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCall());
assertFalse(node3.isStringKey());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isTrue());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isVar());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isReturn());
assertFalse(node3.hasChildren());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.isAssign());
assertFalse(node3.isOr());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isExprResult());
assertFalse(node3.isBlock());
assertFalse(node3.isScript());
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isWhile());
assertFalse(node3.hasOneChild());
assertFalse(node3.isThis());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertTrue(node3.isParamList());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isInc());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertNotSame(hashSet1, hashSet0);
assertNotSame(node3, node2);
assertNotSame(node3, node1);
assertNotNull(node3);
assertTrue(hashSet1.equals((Object)hashSet0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));

boolean boolean3 = node2.isCall();
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isString());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertEquals(52, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertTrue(node1.isInstanceOf());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertEquals(882, node2.getType());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertNotSame(node1, node2);
assertNotSame(node1, node3);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3);

boolean boolean4 = node2.isParamList();
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isString());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertEquals(52, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDo());
assertTrue(node1.isInstanceOf());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertEquals(882, node2.getType());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertNotSame(node1, node2);
assertNotSame(node1, node3);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(boolean4);


[MASTER] 09:59:09.625 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_345_1628157549625
[MASTER] 09:59:09.625 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 09:59:10.161 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:10.595 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:10.884 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:11.121 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:11.403 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:12.327 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:12.544 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:12.743 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:12.924 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:13.108 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:13.303 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:13.486 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:13.664 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:13.839 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:14.103 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/3
* Done!

* Computation finished
