* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 15976
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 801119781
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:40:57.487 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:47:31.368 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 606s and 427 generations, 207727 statements, best individual has fitness: 3118.0
* Minimizing test suite
[MASTER] 17:52:38.360 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 795
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 612
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 468
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 4536
* Number of covered goals: 1961
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 714
* Number of covered goals: 569
* Generated 679 tests with total length 9745
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:53:53.123 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6775666666666667% of time used, but only 39/679 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 11%
[MASTER] 17:54:13.220 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 17:54:24.810 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 17:54:28.832 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_43_1629222868633/com/google/javascript/rhino/Node_43_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_43_1629222868633/com/google/javascript/rhino/Node_43_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:28.832 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:28.832 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:28.836 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 230
[MASTER] 17:54:28.838 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_43_1629222868633/com/google/javascript/rhino/Node_43_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:28 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_43_tmp__ESTest extends Node_43_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertNotNull(node0);
23:       assertFalse(node0.isBreak());
24:       assertFalse(node0.isComma());
25:       assertFalse(node0.isThis());
26:       assertFalse(node0.isThrow());
27:       assertFalse(node0.isInstanceOf());
28:       assertFalse(node0.isHook());
29:       assertFalse(node0.isFalse());
30:       assertFalse(node0.isWith());
31:       assertFalse(node0.isSwitch());
32:       assertFalse(node0.isNot());
33:       assertFalse(node0.isAnd());
34:       assertEquals((-1), node0.getCharno());
35:       assertFalse(node0.hasOneChild());
36:       assertTrue(node0.isNumber());
37:       assertFalse(node0.isObjectLit());
38:       assertFalse(node0.isGetProp());
39:       assertFalse(node0.isCase());
40:       assertFalse(node0.isString());
41:       assertFalse(node0.isScript());
42:       assertEquals((-1), node0.getSourcePosition());
43:       assertFalse(node0.isIf());
44:       assertFalse(node0.isFor());
45:       assertFalse(node0.isNE());
46:       assertFalse(node0.hasMoreThanOneChild());
47:       assertEquals((-1), node0.getLineno());
48:       assertFalse(node0.isContinue());
49:       assertFalse(node0.isCast());
50:       assertFalse(node0.isFunction());
51:       assertFalse(node0.isIn());
52:       assertFalse(node0.isSetterDef());
53:       assertFalse(node0.isInc());
54:       assertFalse(node0.isName());
55:       assertFalse(node0.isStringKey());
56:       assertFalse(node0.isParamList());
57:       assertFalse(node0.isNull());
58:       assertFalse(node0.isVar());
59:       assertEquals(0, node0.getChildCount());
60:       assertFalse(node0.isCatch());
61:       assertFalse(node0.isCall());
62:       assertFalse(node0.isRegExp());
63:       assertFalse(node0.isBlock());
64:       assertEquals(39, node0.getType());
65:       assertFalse(node0.isDebugger());
66:       assertFalse(node0.isWhile());
67:       assertFalse(node0.isTry());
68:       assertFalse(node0.isDec());
69:       assertFalse(node0.hasChildren());
70:       assertFalse(node0.isAssign());
71:       assertFalse(node0.isTypeOf());
72:       assertFalse(node0.isDelProp());
73:       assertFalse(node0.isGetterDef());
74:       assertFalse(node0.isLabelName());
75:       assertFalse(node0.isLabel());
76:       assertFalse(node0.isAssignAdd());
77:       assertFalse(node0.isReturn());
78:       assertFalse(node0.isArrayLit());
79:       assertFalse(node0.isGetElem());
80:       assertFalse(node0.isExprResult());
81:       assertFalse(node0.isDefaultCase());
82:       assertFalse(node0.isVoid());
83:       assertFalse(node0.isDo());
84:       assertFalse(node0.isTrue());
85:       assertFalse(node0.isOr());
86:       assertFalse(node0.isNew());
87:       assertFalse(node0.isAdd());
88:       assertFalse(node0.isEmpty());
89:       assertEquals(32, Node.INCRDECR_PROP);
90:       assertEquals(51, Node.STATIC_SOURCE_FILE);
91:       assertEquals(37, Node.OPT_ARG_NAME);
92:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
93:       assertEquals(15, Node.NO_SIDE_EFFECTS);
94:       assertEquals(57, Node.LAST_PROP);
95:       assertEquals(47, Node.IS_DISPATCHER);
96:       assertEquals(2, Node.POST_FLAG);
97:       assertEquals(30, Node.VAR_ARGS_NAME);
98:       assertEquals(1, Node.DECR_FLAG);
99:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
100:       assertEquals(12, Node.COLUMN_BITS);
101:       assertEquals(52, Node.LENGTH);
102:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
103:       assertEquals(53, Node.INPUT_ID);
104:       assertEquals(29, Node.JSDOC_INFO_PROP);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(36, Node.QUOTED_PROP);
107:       assertEquals(49, Node.DIRECT_EVAL);
108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
109:       assertEquals(56, Node.CHANGE_TIME);
110:       assertEquals(57, Node.REFLECTED_OBJECT);
111:       assertEquals(48, Node.DIRECTIVES);
112:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
113:       assertEquals(8, Node.FLAG_NO_THROWS);
114:       assertEquals(39, Node.EMPTY_BLOCK);
115:       assertEquals(4095, Node.COLUMN_MASK);
116:       assertEquals(55, Node.INFERRED_FUNCTION);
117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
118:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
119:       assertEquals(40, Node.ORIGINALNAME_PROP);
120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
121:       assertEquals(50, Node.FREE_CALL);
122:       assertEquals(43, Node.IS_CONSTANT_NAME);
123:       assertEquals(46, Node.IS_NAMESPACE);
124:       assertEquals(54, Node.SLASH_V);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertNotNull(iterable0);
128:       assertFalse(node0.isBreak());
129:       assertFalse(node0.isComma());
130:       assertFalse(node0.isThis());
131:       assertFalse(node0.isThrow());
132:       assertFalse(node0.isInstanceOf());
133:       assertFalse(node0.isHook());
134:       assertFalse(node0.isFalse());
135:       assertFalse(node0.isWith());
136:       assertFalse(node0.isSwitch());
137:       assertFalse(node0.isNot());
138:       assertFalse(node0.isAnd());
139:       assertEquals((-1), node0.getCharno());
140:       assertFalse(node0.hasOneChild());
141:       assertTrue(node0.isNumber());
142:       assertFalse(node0.isObjectLit());
143:       assertFalse(node0.isGetProp());
144:       assertFalse(node0.isCase());
145:       assertFalse(node0.isString());
146:       assertFalse(node0.isScript());
147:       assertEquals((-1), node0.getSourcePosition());
148:       assertFalse(node0.isIf());
149:       assertFalse(node0.isFor());
150:       assertFalse(node0.isNE());
151:       assertFalse(node0.hasMoreThanOneChild());
152:       assertEquals((-1), node0.getLineno());
153:       assertFalse(node0.isContinue());
154:       assertFalse(node0.isCast());
155:       assertFalse(node0.isFunction());
156:       assertFalse(node0.isIn());
157:       assertFalse(node0.isSetterDef());
158:       assertFalse(node0.isInc());
159:       assertFalse(node0.isName());
160:       assertFalse(node0.isStringKey());
161:       assertFalse(node0.isParamList());
162:       assertFalse(node0.isNull());
163:       assertFalse(node0.isVar());
164:       assertEquals(0, node0.getChildCount());
165:       assertFalse(node0.isCatch());
166:       assertFalse(node0.isCall());
167:       assertFalse(node0.isRegExp());
168:       assertFalse(node0.isBlock());
169:       assertEquals(39, node0.getType());
170:       assertFalse(node0.isDebugger());
171:       assertFalse(node0.isWhile());
172:       assertFalse(node0.isTry());
173:       assertFalse(node0.isDec());
174:       assertFalse(node0.hasChildren());
175:       assertFalse(node0.isAssign());
176:       assertFalse(node0.isTypeOf());
177:       assertFalse(node0.isDelProp());
178:       assertFalse(node0.isGetterDef());
179:       assertFalse(node0.isLabelName());
180:       assertFalse(node0.isLabel());
181:       assertFalse(node0.isAssignAdd());
182:       assertFalse(node0.isReturn());
183:       assertFalse(node0.isArrayLit());
184:       assertFalse(node0.isGetElem());
185:       assertFalse(node0.isExprResult());
186:       assertFalse(node0.isDefaultCase());
187:       assertFalse(node0.isVoid());
188:       assertFalse(node0.isDo());
189:       assertFalse(node0.isTrue());
190:       assertFalse(node0.isOr());
191:       assertFalse(node0.isNew());
192:       assertFalse(node0.isAdd());
193:       assertFalse(node0.isEmpty());
194:       assertEquals(32, Node.INCRDECR_PROP);
195:       assertEquals(51, Node.STATIC_SOURCE_FILE);
196:       assertEquals(37, Node.OPT_ARG_NAME);
197:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
198:       assertEquals(15, Node.NO_SIDE_EFFECTS);
199:       assertEquals(57, Node.LAST_PROP);
200:       assertEquals(47, Node.IS_DISPATCHER);
201:       assertEquals(2, Node.POST_FLAG);
202:       assertEquals(30, Node.VAR_ARGS_NAME);
203:       assertEquals(1, Node.DECR_FLAG);
204:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
205:       assertEquals(12, Node.COLUMN_BITS);
206:       assertEquals(52, Node.LENGTH);
207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
208:       assertEquals(53, Node.INPUT_ID);
209:       assertEquals(29, Node.JSDOC_INFO_PROP);
210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
211:       assertEquals(36, Node.QUOTED_PROP);
212:       assertEquals(49, Node.DIRECT_EVAL);
213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
214:       assertEquals(56, Node.CHANGE_TIME);
215:       assertEquals(57, Node.REFLECTED_OBJECT);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(39, Node.EMPTY_BLOCK);
220:       assertEquals(4095, Node.COLUMN_MASK);
221:       assertEquals(55, Node.INFERRED_FUNCTION);
222:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
223:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
224:       assertEquals(40, Node.ORIGINALNAME_PROP);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(50, Node.FREE_CALL);
227:       assertEquals(43, Node.IS_CONSTANT_NAME);
228:       assertEquals(46, Node.IS_NAMESPACE);
229:       assertEquals(54, Node.SLASH_V);
230:       assertFalse(iterable0.contains(node0));
231:       
232:       boolean boolean0 = node0.isDec();
233:       assertFalse(node0.isBreak());
234:       assertFalse(node0.isComma());
235:       assertFalse(node0.isThis());
236:       assertFalse(node0.isThrow());
237:       assertFalse(node0.isInstanceOf());
238:       assertFalse(node0.isHook());
239:       assertFalse(node0.isFalse());
240:       assertFalse(node0.isWith());
241:       assertFalse(node0.isSwitch());
242:       assertFalse(node0.isNot());
243:       assertFalse(node0.isAnd());
244:       assertEquals((-1), node0.getCharno());
245:       assertFalse(node0.hasOneChild());
246:       assertTrue(node0.isNumber());
247:       assertFalse(node0.isObjectLit());
248:       assertFalse(node0.isGetProp());
249:       assertFalse(node0.isCase());
250:       assertFalse(node0.isString());
251:       assertFalse(node0.isScript());
252:       assertEquals((-1), node0.getSourcePosition());
253:       assertFalse(node0.isIf());
254:       assertFalse(node0.isFor());
255:       assertFalse(node0.isNE());
256:       assertFalse(node0.hasMoreThanOneChild());
257:       assertEquals((-1), node0.getLineno());
258:       assertFalse(node0.isContinue());
259:       assertFalse(node0.isCast());
260:       assertFalse(node0.isFunction());
261:       assertFalse(node0.isIn());
262:       assertFalse(node0.isSetterDef());
263:       assertFalse(node0.isInc());
264:       assertFalse(node0.isName());
265:       assertFalse(node0.isStringKey());
266:       assertFalse(node0.isParamList());
267:       assertFalse(node0.isNull());
268:       assertFalse(node0.isVar());
269:       assertEquals(0, node0.getChildCount());
270:       assertFalse(node0.isCatch());
271:       assertFalse(node0.isCall());
272:       assertFalse(node0.isRegExp());
273:       assertFalse(node0.isBlock());
274:       assertEquals(39, node0.getType());
275:       assertFalse(node0.isDebugger());
276:       assertFalse(node0.isWhile());
277:       assertFalse(node0.isTry());
278:       assertFalse(node0.isDec());
279:       assertFalse(node0.hasChildren());
280:       assertFalse(node0.isAssign());
281:       assertFalse(node0.isTypeOf());
282:       assertFalse(node0.isDelProp());
283:       assertFalse(node0.isGetterDef());
284:       assertFalse(node0.isLabelName());
285:       assertFalse(node0.isLabel());
286:       assertFalse(node0.isAssignAdd());
287:       assertFalse(node0.isReturn());
288:       assertFalse(node0.isArrayLit());
289:       assertFalse(node0.isGetElem());
290:       assertFalse(node0.isExprResult());
291:       assertFalse(node0.isDefaultCase());
292:       assertFalse(node0.isVoid());
293:       assertFalse(node0.isDo());
294:       assertFalse(node0.isTrue());
295:       assertFalse(node0.isOr());
296:       assertFalse(node0.isNew());
297:       assertFalse(node0.isAdd());
298:       assertFalse(node0.isEmpty());
299:       assertEquals(32, Node.INCRDECR_PROP);
300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
301:       assertEquals(37, Node.OPT_ARG_NAME);
302:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
303:       assertEquals(15, Node.NO_SIDE_EFFECTS);
304:       assertEquals(57, Node.LAST_PROP);
305:       assertEquals(47, Node.IS_DISPATCHER);
306:       assertEquals(2, Node.POST_FLAG);
307:       assertEquals(30, Node.VAR_ARGS_NAME);
308:       assertEquals(1, Node.DECR_FLAG);
309:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
310:       assertEquals(12, Node.COLUMN_BITS);
311:       assertEquals(52, Node.LENGTH);
312:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
313:       assertEquals(53, Node.INPUT_ID);
314:       assertEquals(29, Node.JSDOC_INFO_PROP);
315:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
316:       assertEquals(36, Node.QUOTED_PROP);
317:       assertEquals(49, Node.DIRECT_EVAL);
318:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
319:       assertEquals(56, Node.CHANGE_TIME);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(48, Node.DIRECTIVES);
322:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
323:       assertEquals(8, Node.FLAG_NO_THROWS);
324:       assertEquals(39, Node.EMPTY_BLOCK);
325:       assertEquals(4095, Node.COLUMN_MASK);
326:       assertEquals(55, Node.INFERRED_FUNCTION);
327:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
328:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
329:       assertEquals(40, Node.ORIGINALNAME_PROP);
330:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
331:       assertEquals(50, Node.FREE_CALL);
332:       assertEquals(43, Node.IS_CONSTANT_NAME);
333:       assertEquals(46, Node.IS_NAMESPACE);
334:       assertEquals(54, Node.SLASH_V);
335:       assertFalse(boolean0);
336:       
337:       Node node1 = new Node(15, 0, 48);
338:       assertNotNull(node1);
339:       assertFalse(node1.isNot());
340:       assertEquals(48, node1.getSourcePosition());
341:       assertFalse(node1.hasOneChild());
342:       assertFalse(node1.isObjectLit());
343:       assertFalse(node1.isGetProp());
344:       assertFalse(node1.isScript());
345:       assertFalse(node1.isComma());
346:       assertFalse(node1.isThis());
347:       assertFalse(node1.isDec());
348:       assertFalse(node1.isTypeOf());
349:       assertFalse(node1.isAssign());
350:       assertFalse(node1.isReturn());
351:       assertFalse(node1.isOr());
352:       assertFalse(node1.hasChildren());
353:       assertFalse(node1.hasMoreThanOneChild());
354:       assertFalse(node1.isWith());
355:       assertFalse(node1.isInstanceOf());
356:       assertFalse(node1.isBreak());
357:       assertFalse(node1.isExprResult());
358:       assertFalse(node1.isGetElem());
359:       assertFalse(node1.isSwitch());
360:       assertFalse(node1.isHook());
361:       assertFalse(node1.isBlock());
362:       assertFalse(node1.isVar());
363:       assertFalse(node1.isDo());
364:       assertFalse(node1.isCase());
365:       assertFalse(node1.isNew());
366:       assertFalse(node1.isAdd());
367:       assertEquals(48, node1.getCharno());
368:       assertFalse(node1.isParamList());
369:       assertFalse(node1.isNumber());
370:       assertFalse(node1.isGetterDef());
371:       assertFalse(node1.isAssignAdd());
372:       assertFalse(node1.isLabel());
373:       assertFalse(node1.isStringKey());
374:       assertFalse(node1.isArrayLit());
375:       assertEquals(0, node1.getChildCount());
376:       assertFalse(node1.isLabelName());
377:       assertFalse(node1.isDebugger());
378:       assertFalse(node1.isDefaultCase());
379:       assertFalse(node1.isVoid());
380:       assertFalse(node1.isTry());
381:       assertFalse(node1.isRegExp());
382:       assertFalse(node1.isFunction());
383:       assertFalse(node1.isTrue());
384:       assertEquals(15, node1.getType());
385:       assertFalse(node1.isEmpty());
386:       assertFalse(node1.isNE());
387:       assertFalse(node1.isIf());
388:       assertFalse(node1.isDelProp());
389:       assertFalse(node1.isNull());
390:       assertFalse(node1.isFor());
391:       assertFalse(node1.isCatch());
392:       assertFalse(node1.isName());
393:       assertFalse(node1.isCall());
394:       assertFalse(node1.isWhile());
395:       assertFalse(node1.isIn());
396:       assertFalse(node1.isString());
397:       assertFalse(node1.isInc());
398:       assertFalse(node1.isSetterDef());
399:       assertFalse(node1.isThrow());
400:       assertFalse(node1.isCast());
401:       assertFalse(node1.isContinue());
402:       assertFalse(node1.isAnd());
403:       assertFalse(node1.isFalse());
404:       assertEquals(0, node1.getLineno());
405:       assertEquals(57, Node.REFLECTED_OBJECT);
406:       assertEquals(52, Node.LENGTH);
407:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
408:       assertEquals(40, Node.ORIGINALNAME_PROP);
409:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
410:       assertEquals(8, Node.FLAG_NO_THROWS);
411:       assertEquals(48, Node.DIRECTIVES);
412:       assertEquals(49, Node.DIRECT_EVAL);
413:       assertEquals(50, Node.FREE_CALL);
414:       assertEquals(54, Node.SLASH_V);
415:       assertEquals(55, Node.INFERRED_FUNCTION);
416:       assertEquals(39, Node.EMPTY_BLOCK);
417:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
418:       assertEquals(15, Node.NO_SIDE_EFFECTS);
419:       assertEquals(47, Node.IS_DISPATCHER);
420:       assertEquals(57, Node.LAST_PROP);
421:       assertEquals(2, Node.POST_FLAG);
422:       assertEquals(30, Node.VAR_ARGS_NAME);
423:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
425:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
426:       assertEquals(53, Node.INPUT_ID);
427:       assertEquals(29, Node.JSDOC_INFO_PROP);
428:       assertEquals(43, Node.IS_CONSTANT_NAME);
429:       assertEquals(56, Node.CHANGE_TIME);
430:       assertEquals(36, Node.QUOTED_PROP);
431:       assertEquals(37, Node.OPT_ARG_NAME);
432:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
433:       assertEquals(46, Node.IS_NAMESPACE);
434:       assertEquals(51, Node.STATIC_SOURCE_FILE);
435:       assertEquals(4095, Node.COLUMN_MASK);
436:       assertEquals(32, Node.INCRDECR_PROP);
437:       assertEquals(1, Node.DECR_FLAG);
438:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
440:       assertEquals(12, Node.COLUMN_BITS);
441:       assertFalse(node1.equals((Object)node0));
442:       
443:       Node node2 = node0.clonePropsFrom(node1);
444:       assertSame(node0, node2);
445:       assertSame(node2, node0);
446:       assertNotNull(node2);
447:       assertFalse(node0.isBreak());
448:       assertFalse(node0.isComma());
449:       assertFalse(node0.isThis());
450:       assertFalse(node0.isThrow());
451:       assertFalse(node0.isInstanceOf());
452:       assertFalse(node0.isHook());
453:       assertFalse(node0.isFalse());
454:       assertFalse(node0.isWith());
455:       assertFalse(node0.isSwitch());
456:       assertFalse(node0.isNot());
457:       assertFalse(node0.isAnd());
458:       assertEquals((-1), node0.getCharno());
459:       assertFalse(node0.hasOneChild());
460:       assertTrue(node0.isNumber());
461:       assertFalse(node0.isObjectLit());
462:       assertFalse(node0.isGetProp());
463:       assertFalse(node0.isCase());
464:       assertFalse(node0.isString());
465:       assertFalse(node0.isScript());
466:       assertEquals((-1), node0.getSourcePosition());
467:       assertFalse(node0.isIf());
468:       assertFalse(node0.isFor());
469:       assertFalse(node0.isNE());
470:       assertFalse(node0.hasMoreThanOneChild());
471:       assertEquals((-1), node0.getLineno());
472:       assertFalse(node0.isContinue());
473:       assertFalse(node0.isCast());
474:       assertFalse(node0.isFunction());
475:       assertFalse(node0.isIn());
476:       assertFalse(node0.isSetterDef());
477:       assertFalse(node0.isInc());
478:       assertFalse(node0.isName());
479:       assertFalse(node0.isStringKey());
480:       assertFalse(node0.isParamList());
481:       assertFalse(node0.isNull());
482:       assertFalse(node0.isVar());
483:       assertEquals(0, node0.getChildCount());
484:       assertFalse(node0.isCatch());
485:       assertFalse(node0.isCall());
486:       assertFalse(node0.isRegExp());
487:       assertFalse(node0.isBlock());
488:       assertEquals(39, node0.getType());
489:       assertFalse(node0.isDebugger());
490:       assertFalse(node0.isWhile());
491:       assertFalse(node0.isTry());
492:       assertFalse(node0.isDec());
493:       assertFalse(node0.hasChildren());
494:       assertFalse(node0.isAssign());
495:       assertFalse(node0.isTypeOf());
496:       assertFalse(node0.isDelProp());
497:       assertFalse(node0.isGetterDef());
498:       assertFalse(node0.isLabelName());
499:       assertFalse(node0.isLabel());
500:       assertFalse(node0.isAssignAdd());
501:       assertFalse(node0.isReturn());
502:       assertFalse(node0.isArrayLit());
503:       assertFalse(node0.isGetElem());
504:       assertFalse(node0.isExprResult());
505:       assertFalse(node0.isDefaultCase());
506:       assertFalse(node0.isVoid());
507:       assertFalse(node0.isDo());
508:       assertFalse(node0.isTrue());
509:       assertFalse(node0.isOr());
510:       assertFalse(node0.isNew());
511:       assertFalse(node0.isAdd());
512:       assertFalse(node0.isEmpty());
513:       assertFalse(node1.isNot());
514:       assertEquals(48, node1.getSourcePosition());
515:       assertFalse(node1.hasOneChild());
516:       assertFalse(node1.isObjectLit());
517:       assertFalse(node1.isGetProp());
518:       assertFalse(node1.isScript());
519:       assertFalse(node1.isComma());
520:       assertFalse(node1.isThis());
521:       assertFalse(node1.isDec());
522:       assertFalse(node1.isTypeOf());
523:       assertFalse(node1.isAssign());
524:       assertFalse(node1.isReturn());
525:       assertFalse(node1.isOr());
526:       assertFalse(node1.hasChildren());
527:       assertFalse(node1.hasMoreThanOneChild());
528:       assertFalse(node1.isWith());
529:       assertFalse(node1.isInstanceOf());
530:       assertFalse(node1.isBreak());
531:       assertFalse(node1.isExprResult());
532:       assertFalse(node1.isGetElem());
533:       assertFalse(node1.isSwitch());
534:       assertFalse(node1.isHook());
535:       assertFalse(node1.isBlock());
536:       assertFalse(node1.isVar());
537:       assertFalse(node1.isDo());
538:       assertFalse(node1.isCase());
539:       assertFalse(node1.isNew());
540:       assertFalse(node1.isAdd());
541:       assertEquals(48, node1.getCharno());
542:       assertFalse(node1.isParamList());
543:       assertFalse(node1.isNumber());
544:       assertFalse(node1.isGetterDef());
545:       assertFalse(node1.isAssignAdd());
546:       assertFalse(node1.isLabel());
547:       assertFalse(node1.isStringKey());
548:       assertFalse(node1.isArrayLit());
549:       assertEquals(0, node1.getChildCount());
550:       assertFalse(node1.isLabelName());
551:       assertFalse(node1.isDebugger());
552:       assertFalse(node1.isDefaultCase());
553:       assertFalse(node1.isVoid());
554:       assertFalse(node1.isTry());
555:       assertFalse(node1.isRegExp());
556:       assertFalse(node1.isFunction());
557:       assertFalse(node1.isTrue());
558:       assertEquals(15, node1.getType());
559:       assertFalse(node1.isEmpty());
560:       assertFalse(node1.isNE());
561:       assertFalse(node1.isIf());
562:       assertFalse(node1.isDelProp());
563:       assertFalse(node1.isNull());
564:       assertFalse(node1.isFor());
565:       assertFalse(node1.isCatch());
566:       assertFalse(node1.isName());
567:       assertFalse(node1.isCall());
568:       assertFalse(node1.isWhile());
569:       assertFalse(node1.isIn());
570:       assertFalse(node1.isString());
571:       assertFalse(node1.isInc());
572:       assertFalse(node1.isSetterDef());
573:       assertFalse(node1.isThrow());
574:       assertFalse(node1.isCast());
575:       assertFalse(node1.isContinue());
576:       assertFalse(node1.isAnd());
577:       assertFalse(node1.isFalse());
578:       assertEquals(0, node1.getLineno());
579:       assertEquals(0, node2.getChildCount());
580:       assertFalse(node2.isParamList());
581:       assertFalse(node2.isNull());
582:       assertFalse(node2.isSetterDef());
583:       assertFalse(node2.isDebugger());
584:       assertFalse(node2.isBlock());
585:       assertFalse(node2.isTrue());
586:       assertFalse(node2.isVoid());
587:       assertFalse(node2.isName());
588:       assertFalse(node2.isTry());
589:       assertFalse(node2.isDelProp());
590:       assertFalse(node2.isWhile());
591:       assertEquals(39, node2.getType());
592:       assertFalse(node2.isFor());
593:       assertFalse(node2.isCall());
594:       assertFalse(node2.isCatch());
595:       assertFalse(node2.isRegExp());
596:       assertFalse(node2.hasMoreThanOneChild());
597:       assertFalse(node2.isIn());
598:       assertEquals((-1), node2.getLineno());
599:       assertTrue(node2.isNumber());
600:       assertFalse(node2.isReturn());
601:       assertFalse(node2.isIf());
602:       assertFalse(node2.isString());
603:       assertEquals((-1), node2.getSourcePosition());
604:       assertFalse(node2.isNE());
605:       assertFalse(node2.isInc());
606:       assertFalse(node2.isThrow());
607:       assertFalse(node2.isContinue());
608:       assertFalse(node2.isCast());
609:       assertFalse(node2.isFunction());
610:       assertFalse(node2.isFalse());
611:       assertFalse(node2.isInstanceOf());
612:       assertFalse(node2.isGetProp());
613:       assertFalse(node2.isAnd());
614:       assertFalse(node2.isScript());
615:       assertFalse(node2.isObjectLit());
616:       assertFalse(node2.isNot());
617:       assertFalse(node2.hasOneChild());
618:       assertFalse(node2.isHook());
619:       assertFalse(node2.isBreak());
620:       assertFalse(node2.hasChildren());
621:       assertFalse(node2.isDec());
622:       assertFalse(node2.isThis());
623:       assertFalse(node2.isGetElem());
624:       assertFalse(node2.isExprResult());
625:       assertFalse(node2.isComma());
626:       assertFalse(node2.isAssign());
627:       assertFalse(node2.isTypeOf());
628:       assertFalse(node2.isWith());
629:       assertFalse(node2.isLabel());
630:       assertFalse(node2.isDo());
631:       assertFalse(node2.isAssignAdd());
632:       assertFalse(node2.isGetterDef());
633:       assertFalse(node2.isCase());
634:       assertFalse(node2.isEmpty());
635:       assertEquals((-1), node2.getCharno());
636:       assertFalse(node2.isOr());
637:       assertFalse(node2.isAdd());
638:       assertFalse(node2.isArrayLit());
639:       assertFalse(node2.isVar());
640:       assertFalse(node2.isStringKey());
641:       assertFalse(node2.isNew());
642:       assertFalse(node2.isLabelName());
643:       assertFalse(node2.isSwitch());
644:       assertFalse(node2.isDefaultCase());
645:       assertEquals(32, Node.INCRDECR_PROP);
646:       assertEquals(51, Node.STATIC_SOURCE_FILE);
647:       assertEquals(37, Node.OPT_ARG_NAME);
648:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
649:       assertEquals(15, Node.NO_SIDE_EFFECTS);
650:       assertEquals(57, Node.LAST_PROP);
651:       assertEquals(47, Node.IS_DISPATCHER);
652:       assertEquals(2, Node.POST_FLAG);
653:       assertEquals(30, Node.VAR_ARGS_NAME);
654:       assertEquals(1, Node.DECR_FLAG);
655:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
656:       assertEquals(12, Node.COLUMN_BITS);
657:       assertEquals(52, Node.LENGTH);
658:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
659:       assertEquals(53, Node.INPUT_ID);
660:       assertEquals(29, Node.JSDOC_INFO_PROP);
661:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
662:       assertEquals(36, Node.QUOTED_PROP);
663:       assertEquals(49, Node.DIRECT_EVAL);
664:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
665:       assertEquals(56, Node.CHANGE_TIME);
666:       assertEquals(57, Node.REFLECTED_OBJECT);
667:       assertEquals(48, Node.DIRECTIVES);
668:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
669:       assertEquals(8, Node.FLAG_NO_THROWS);
670:       assertEquals(39, Node.EMPTY_BLOCK);
671:       assertEquals(4095, Node.COLUMN_MASK);
672:       assertEquals(55, Node.INFERRED_FUNCTION);
673:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
674:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
675:       assertEquals(40, Node.ORIGINALNAME_PROP);
676:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
677:       assertEquals(50, Node.FREE_CALL);
678:       assertEquals(43, Node.IS_CONSTANT_NAME);
679:       assertEquals(46, Node.IS_NAMESPACE);
680:       assertEquals(54, Node.SLASH_V);
681:       assertEquals(57, Node.REFLECTED_OBJECT);
682:       assertEquals(52, Node.LENGTH);
683:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
684:       assertEquals(40, Node.ORIGINALNAME_PROP);
685:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
686:       assertEquals(8, Node.FLAG_NO_THROWS);
687:       assertEquals(48, Node.DIRECTIVES);
688:       assertEquals(49, Node.DIRECT_EVAL);
689:       assertEquals(50, Node.FREE_CALL);
690:       assertEquals(54, Node.SLASH_V);
691:       assertEquals(55, Node.INFERRED_FUNCTION);
692:       assertEquals(39, Node.EMPTY_BLOCK);
693:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
694:       assertEquals(15, Node.NO_SIDE_EFFECTS);
695:       assertEquals(47, Node.IS_DISPATCHER);
696:       assertEquals(57, Node.LAST_PROP);
697:       assertEquals(2, Node.POST_FLAG);
698:       assertEquals(30, Node.VAR_ARGS_NAME);
699:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
700:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
701:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
702:       assertEquals(53, Node.INPUT_ID);
703:       assertEquals(29, Node.JSDOC_INFO_PROP);
704:       assertEquals(43, Node.IS_CONSTANT_NAME);
705:       assertEquals(56, Node.CHANGE_TIME);
706:       assertEquals(36, Node.QUOTED_PROP);
707:       assertEquals(37, Node.OPT_ARG_NAME);
708:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
709:       assertEquals(46, Node.IS_NAMESPACE);
710:       assertEquals(51, Node.STATIC_SOURCE_FILE);
711:       assertEquals(4095, Node.COLUMN_MASK);
712:       assertEquals(32, Node.INCRDECR_PROP);
713:       assertEquals(1, Node.DECR_FLAG);
714:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
715:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
716:       assertEquals(12, Node.COLUMN_BITS);
717:       assertEquals(30, Node.VAR_ARGS_NAME);
718:       assertEquals(49, Node.DIRECT_EVAL);
719:       assertEquals(15, Node.NO_SIDE_EFFECTS);
720:       assertEquals(51, Node.STATIC_SOURCE_FILE);
721:       assertEquals(46, Node.IS_NAMESPACE);
722:       assertEquals(54, Node.SLASH_V);
723:       assertEquals(57, Node.REFLECTED_OBJECT);
724:       assertEquals(37, Node.OPT_ARG_NAME);
725:       assertEquals(56, Node.CHANGE_TIME);
726:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
727:       assertEquals(29, Node.JSDOC_INFO_PROP);
728:       assertEquals(47, Node.IS_DISPATCHER);
729:       assertEquals(40, Node.ORIGINALNAME_PROP);
730:       assertEquals(2, Node.POST_FLAG);
731:       assertEquals(8, Node.FLAG_NO_THROWS);
732:       assertEquals(52, Node.LENGTH);
733:       assertEquals(53, Node.INPUT_ID);
734:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
735:       assertEquals(39, Node.EMPTY_BLOCK);
736:       assertEquals(57, Node.LAST_PROP);
737:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
738:       assertEquals(55, Node.INFERRED_FUNCTION);
739:       assertEquals(36, Node.QUOTED_PROP);
740:       assertEquals(4095, Node.COLUMN_MASK);
741:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
742:       assertEquals(43, Node.IS_CONSTANT_NAME);
743:       assertEquals(48, Node.DIRECTIVES);
744:       assertEquals(50, Node.FREE_CALL);
745:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
746:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
747:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
748:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
749:       assertEquals(12, Node.COLUMN_BITS);
750:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
751:       assertEquals(1, Node.DECR_FLAG);
752:       assertEquals(32, Node.INCRDECR_PROP);
753:       assertFalse(node0.equals((Object)node1));
754:       assertFalse(node1.equals((Object)node0));
755:       assertFalse(node2.equals((Object)node1));
756:       
757:       boolean boolean1 = node0.isFromExterns();
758:       assertSame(node0, node2);
759:       assertFalse(node0.isBreak());
760:       assertFalse(node0.isComma());
761:       assertFalse(node0.isThis());
762:       assertFalse(node0.isThrow());
763:       assertFalse(node0.isInstanceOf());
764:       assertFalse(node0.isHook());
765:       assertFalse(node0.isFalse());
766:       assertFalse(node0.isWith());
767:       assertFalse(node0.isSwitch());
768:       assertFalse(node0.isNot());
769:       assertFalse(node0.isAnd());
770:       assertEquals((-1), node0.getCharno());
771:       assertFalse(node0.hasOneChild());
772:       assertTrue(node0.isNumber());
773:       assertFalse(node0.isObjectLit());
774:       assertFalse(node0.isGetProp());
775:       assertFalse(node0.isCase());
776:       assertFalse(node0.isString());
777:       assertFalse(node0.isScript());
778:       assertEquals((-1), node0.getSourcePosition());
779:       assertFalse(node0.isIf());
780:       assertFalse(node0.isFor());
781:       assertFalse(node0.isNE());
782:       assertFalse(node0.hasMoreThanOneChild());
783:       assertEquals((-1), node0.getLineno());
784:       assertFalse(node0.isContinue());
785:       assertFalse(node0.isCast());
786:       assertFalse(node0.isFunction());
787:       assertFalse(node0.isIn());
788:       assertFalse(node0.isSetterDef());
789:       assertFalse(node0.isInc());
790:       assertFalse(node0.isName());
791:       assertFalse(node0.isStringKey());
792:       assertFalse(node0.isParamList());
793:       assertFalse(node0.isNull());
794:       assertFalse(node0.isVar());
795:       assertEquals(0, node0.getChildCount());
796:       assertFalse(node0.isCatch());
797:       assertFalse(node0.isCall());
798:       assertFalse(node0.isRegExp());
799:       assertFalse(node0.isBlock());
800:       assertEquals(39, node0.getType());
801:       assertFalse(node0.isDebugger());
802:       assertFalse(node0.isWhile());
803:       assertFalse(node0.isTry());
804:       assertFalse(node0.isDec());
805:       assertFalse(node0.hasChildren());
806:       assertFalse(node0.isAssign());
807:       assertFalse(node0.isTypeOf());
808:       assertFalse(node0.isDelProp());
809:       assertFalse(node0.isGetterDef());
810:       assertFalse(node0.isLabelName());
811:       assertFalse(node0.isLabel());
812:       assertFalse(node0.isAssignAdd());
813:       assertFalse(node0.isReturn());
814:       assertFalse(node0.isArrayLit());
815:       assertFalse(node0.isGetElem());
816:       assertFalse(node0.isExprResult());
817:       assertFalse(node0.isDefaultCase());
818:       assertFalse(node0.isVoid());
819:       assertFalse(node0.isDo());
820:       assertFalse(node0.isTrue());
821:       assertFalse(node0.isOr());
822:       assertFalse(node0.isNew());
823:       assertFalse(node0.isAdd());
824:       assertFalse(node0.isEmpty());
825:       assertEquals(32, Node.INCRDECR_PROP);
826:       assertEquals(51, Node.STATIC_SOURCE_FILE);
827:       assertEquals(37, Node.OPT_ARG_NAME);
828:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
829:       assertEquals(15, Node.NO_SIDE_EFFECTS);
830:       assertEquals(57, Node.LAST_PROP);
831:       assertEquals(47, Node.IS_DISPATCHER);
832:       assertEquals(2, Node.POST_FLAG);
833:       assertEquals(30, Node.VAR_ARGS_NAME);
834:       assertEquals(1, Node.DECR_FLAG);
835:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
836:       assertEquals(12, Node.COLUMN_BITS);
837:       assertEquals(52, Node.LENGTH);
838:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
839:       assertEquals(53, Node.INPUT_ID);
840:       assertEquals(29, Node.JSDOC_INFO_PROP);
841:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
842:       assertEquals(36, Node.QUOTED_PROP);
843:       assertEquals(49, Node.DIRECT_EVAL);
844:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
845:       assertEquals(56, Node.CHANGE_TIME);
846:       assertEquals(57, Node.REFLECTED_OBJECT);
847:       assertEquals(48, Node.DIRECTIVES);
848:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
849:       assertEquals(8, Node.FLAG_NO_THROWS);
850:       assertEquals(39, Node.EMPTY_BLOCK);
851:       assertEquals(4095, Node.COLUMN_MASK);
852:       assertEquals(55, Node.INFERRED_FUNCTION);
853:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
854:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
855:       assertEquals(40, Node.ORIGINALNAME_PROP);
856:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
857:       assertEquals(50, Node.FREE_CALL);
858:       assertEquals(43, Node.IS_CONSTANT_NAME);
859:       assertEquals(46, Node.IS_NAMESPACE);
860:       assertEquals(54, Node.SLASH_V);
861:       assertFalse(node0.equals((Object)node1));
862:       assertTrue(boolean1 == boolean0);
863:       assertFalse(boolean1);
864:       
865:       boolean boolean2 = node0.isBreak();
866:       assertSame(node0, node2);
867:       assertFalse(node0.isBreak());
868:       assertFalse(node0.isComma());
869:       assertFalse(node0.isThis());
870:       assertFalse(node0.isThrow());
871:       assertFalse(node0.isInstanceOf());
872:       assertFalse(node0.isHook());
873:       assertFalse(node0.isFalse());
874:       assertFalse(node0.isWith());
875:       assertFalse(node0.isSwitch());
876:       assertFalse(node0.isNot());
877:       assertFalse(node0.isAnd());
878:       assertEquals((-1), node0.getCharno());
879:       assertFalse(node0.hasOneChild());
880:       assertTrue(node0.isNumber());
881:       assertFalse(node0.isObjectLit());
882:       assertFalse(node0.isGetProp());
883:       assertFalse(node0.isCase());
884:       assertFalse(node0.isString());
885:       assertFalse(node0.isScript());
886:       assertEquals((-1), node0.getSourcePosition());
887:       assertFalse(node0.isIf());
888:       assertFalse(node0.isFor());
889:       assertFalse(node0.isNE());
890:       assertFalse(node0.hasMoreThanOneChild());
891:       assertEquals((-1), node0.getLineno());
892:       assertFalse(node0.isContinue());
893:       assertFalse(node0.isCast());
894:       assertFalse(node0.isFunction());
895:       assertFalse(node0.isIn());
896:       assertFalse(node0.isSetterDef());
897:       assertFalse(node0.isInc());
898:       assertFalse(node0.isName());
899:       assertFalse(node0.isStringKey());
900:       assertFalse(node0.isParamList());
901:       assertFalse(node0.isNull());
902:       assertFalse(node0.isVar());
903:       assertEquals(0, node0.getChildCount());
904:       assertFalse(node0.isCatch());
905:       assertFalse(node0.isCall());
906:       assertFalse(node0.isRegExp());
907:       assertFalse(node0.isBlock());
908:       assertEquals(39, node0.getType());
909:       assertFalse(node0.isDebugger());
910:       assertFalse(node0.isWhile());
911:       assertFalse(node0.isTry());
912:       assertFalse(node0.isDec());
913:       assertFalse(node0.hasChildren());
914:       assertFalse(node0.isAssign());
915:       assertFalse(node0.isTypeOf());
916:       assertFalse(node0.isDelProp());
917:       assertFalse(node0.isGetterDef());
918:       assertFalse(node0.isLabelName());
919:       assertFalse(node0.isLabel());
920:       assertFalse(node0.isAssignAdd());
921:       assertFalse(node0.isReturn());
922:       assertFalse(node0.isArrayLit());
923:       assertFalse(node0.isGetElem());
924:       assertFalse(node0.isExprResult());
925:       assertFalse(node0.isDefaultCase());
926:       assertFalse(node0.isVoid());
927:       assertFalse(node0.isDo());
928:       assertFalse(node0.isTrue());
929:       assertFalse(node0.isOr());
930:       assertFalse(node0.isNew());
931:       assertFalse(node0.isAdd());
932:       assertFalse(node0.isEmpty());
933:       assertEquals(32, Node.INCRDECR_PROP);
934:       assertEquals(51, Node.STATIC_SOURCE_FILE);
935:       assertEquals(37, Node.OPT_ARG_NAME);
936:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
937:       assertEquals(15, Node.NO_SIDE_EFFECTS);
938:       assertEquals(57, Node.LAST_PROP);
939:       assertEquals(47, Node.IS_DISPATCHER);
940:       assertEquals(2, Node.POST_FLAG);
941:       assertEquals(30, Node.VAR_ARGS_NAME);
942:       assertEquals(1, Node.DECR_FLAG);
943:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
944:       assertEquals(12, Node.COLUMN_BITS);
945:       assertEquals(52, Node.LENGTH);
946:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
947:       assertEquals(53, Node.INPUT_ID);
948:       assertEquals(29, Node.JSDOC_INFO_PROP);
949:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
950:       assertEquals(36, Node.QUOTED_PROP);
951:       assertEquals(49, Node.DIRECT_EVAL);
952:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
953:       assertEquals(56, Node.CHANGE_TIME);
954:       assertEquals(57, Node.REFLECTED_OBJECT);
955:       assertEquals(48, Node.DIRECTIVES);
956:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
957:       assertEquals(8, Node.FLAG_NO_THROWS);
958:       assertEquals(39, Node.EMPTY_BLOCK);
959:       assertEquals(4095, Node.COLUMN_MASK);
960:       assertEquals(55, Node.INFERRED_FUNCTION);
961:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
962:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
963:       assertEquals(40, Node.ORIGINALNAME_PROP);
964:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
965:       assertEquals(50, Node.FREE_CALL);
966:       assertEquals(43, Node.IS_CONSTANT_NAME);
967:       assertEquals(46, Node.IS_NAMESPACE);
968:       assertEquals(54, Node.SLASH_V);
969:       assertFalse(node0.equals((Object)node1));
970:       assertTrue(boolean2 == boolean1);
971:       assertTrue(boolean2 == boolean0);
972:       assertFalse(boolean2);
973:       
974:       boolean boolean3 = node0.isCatch();
975:       assertSame(node0, node2);
976:       assertFalse(node0.isBreak());
977:       assertFalse(node0.isComma());
978:       assertFalse(node0.isThis());
979:       assertFalse(node0.isThrow());
980:       assertFalse(node0.isInstanceOf());
981:       assertFalse(node0.isHook());
982:       assertFalse(node0.isFalse());
983:       assertFalse(node0.isWith());
984:       assertFalse(node0.isSwitch());
985:       assertFalse(node0.isNot());
986:       assertFalse(node0.isAnd());
987:       assertEquals((-1), node0.getCharno());
988:       assertFalse(node0.hasOneChild());
989:       assertTrue(node0.isNumber());
990:       assertFalse(node0.isObjectLit());
991:       assertFalse(node0.isGetProp());
992:       assertFalse(node0.isCase());
993:       assertFalse(node0.isString());
994:       assertFalse(node0.isScript());
995:       assertEquals((-1), node0.getSourcePosition());
996:       assertFalse(node0.isIf());
997:       assertFalse(node0.isFor());
998:       assertFalse(node0.isNE());
999:       assertFalse(node0.hasMoreThanOneChild());
1000:       assertEquals((-1), node0.getLineno());
1001:       assertFalse(node0.isContinue());
1002:       assertFalse(node0.isCast());
1003:       assertFalse(node0.isFunction());
1004:       assertFalse(node0.isIn());
1005:       assertFalse(node0.isSetterDef());
1006:       assertFalse(node0.isInc());
1007:       assertFalse(node0.isName());
1008:       assertFalse(node0.isStringKey());
1009:       assertFalse(node0.isParamList());
1010:       assertFalse(node0.isNull());
1011:       assertFalse(node0.isVar());
1012:       assertEquals(0, node0.getChildCount());
1013:       assertFalse(node0.isCatch());
1014:       assertFalse(node0.isCall());
1015:       assertFalse(node0.isRegExp());
1016:       assertFalse(node0.isBlock());
1017:       assertEquals(39, node0.getType());
1018:       assertFalse(node0.isDebugger());
1019:       assertFalse(node0.isWhile());
1020:       assertFalse(node0.isTry());
1021:       assertFalse(node0.isDec());
1022:       assertFalse(node0.hasChildren());
1023:       assertFalse(node0.isAssign());
1024:       assertFalse(node0.isTypeOf());
1025:       assertFalse(node0.isDelProp());
1026:       assertFalse(node0.isGetterDef());
1027:       assertFalse(node0.isLabelName());
1028:       assertFalse(node0.isLabel());
1029:       assertFalse(node0.isAssignAdd());
1030:       assertFalse(node0.isReturn());
1031:       assertFalse(node0.isArrayLit());
1032:       assertFalse(node0.isGetElem());
1033:       assertFalse(node0.isExprResult());
1034:       assertFalse(node0.isDefaultCase());
1035:       assertFalse(node0.isVoid());
1036:       assertFalse(node0.isDo());
1037:       assertFalse(node0.isTrue());
1038:       assertFalse(node0.isOr());
1039:       assertFalse(node0.isNew());
1040:       assertFalse(node0.isAdd());
1041:       assertFalse(node0.isEmpty());
1042:       assertEquals(32, Node.INCRDECR_PROP);
1043:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1044:       assertEquals(37, Node.OPT_ARG_NAME);
1045:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1046:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1047:       assertEquals(57, Node.LAST_PROP);
1048:       assertEquals(47, Node.IS_DISPATCHER);
1049:       assertEquals(2, Node.POST_FLAG);
1050:       assertEquals(30, Node.VAR_ARGS_NAME);
1051:       assertEquals(1, Node.DECR_FLAG);
1052:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1053:       assertEquals(12, Node.COLUMN_BITS);
1054:       assertEquals(52, Node.LENGTH);
1055:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1056:       assertEquals(53, Node.INPUT_ID);
1057:       assertEquals(29, Node.JSDOC_INFO_PROP);
1058:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1059:       assertEquals(36, Node.QUOTED_PROP);
1060:       assertEquals(49, Node.DIRECT_EVAL);
1061:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1062:       assertEquals(56, Node.CHANGE_TIME);
1063:       assertEquals(57, Node.REFLECTED_OBJECT);
1064:       assertEquals(48, Node.DIRECTIVES);
1065:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1066:       assertEquals(8, Node.FLAG_NO_THROWS);
1067:       assertEquals(39, Node.EMPTY_BLOCK);
1068:       assertEquals(4095, Node.COLUMN_MASK);
1069:       assertEquals(55, Node.INFERRED_FUNCTION);
1070:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1071:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1072:       assertEquals(40, Node.ORIGINALNAME_PROP);
1073:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1074:       assertEquals(50, Node.FREE_CALL);
1075:       assertEquals(43, Node.IS_CONSTANT_NAME);
1076:       assertEquals(46, Node.IS_NAMESPACE);
1077:       assertEquals(54, Node.SLASH_V);
1078:       assertFalse(node0.equals((Object)node1));
1079:       assertTrue(boolean3 == boolean1);
1080:       assertTrue(boolean3 == boolean2);
1081:       assertTrue(boolean3 == boolean0);
1082:       assertFalse(boolean3);
1083:       
1084:       Node node3 = Node.newNumber(0.0, 52, 46);
1085:       assertNotSame(node3, node0);
1086:       assertNotSame(node3, node2);
1087:       assertNotNull(node3);
1088:       assertFalse(node3.isFor());
1089:       assertFalse(node3.isEmpty());
1090:       assertFalse(node3.isArrayLit());
1091:       assertFalse(node3.isIf());
1092:       assertFalse(node3.isDelProp());
1093:       assertFalse(node3.isTry());
1094:       assertFalse(node3.isRegExp());
1095:       assertFalse(node3.isFunction());
1096:       assertFalse(node3.isCase());
1097:       assertFalse(node3.isString());
1098:       assertFalse(node3.isSwitch());
1099:       assertTrue(node3.isNumber());
1100:       assertFalse(node3.isParamList());
1101:       assertFalse(node3.isDebugger());
1102:       assertFalse(node3.isGetterDef());
1103:       assertFalse(node3.isStringKey());
1104:       assertFalse(node3.isName());
1105:       assertFalse(node3.isCall());
1106:       assertFalse(node3.isVar());
1107:       assertFalse(node3.isBreak());
1108:       assertFalse(node3.isComma());
1109:       assertEquals(0, node3.getChildCount());
1110:       assertEquals(213038, node3.getSourcePosition());
1111:       assertFalse(node3.isDefaultCase());
1112:       assertFalse(node3.isVoid());
1113:       assertFalse(node3.isDo());
1114:       assertFalse(node3.isAdd());
1115:       assertFalse(node3.isNew());
1116:       assertFalse(node3.isTrue());
1117:       assertFalse(node3.isNull());
1118:       assertFalse(node3.isOr());
1119:       assertFalse(node3.isGetElem());
1120:       assertFalse(node3.isCast());
1121:       assertFalse(node3.hasOneChild());
1122:       assertFalse(node3.isLabelName());
1123:       assertEquals(46, node3.getCharno());
1124:       assertFalse(node3.isLabel());
1125:       assertFalse(node3.isAssignAdd());
1126:       assertFalse(node3.isExprResult());
1127:       assertFalse(node3.isReturn());
1128:       assertFalse(node3.isDec());
1129:       assertFalse(node3.isTypeOf());
1130:       assertFalse(node3.hasMoreThanOneChild());
1131:       assertFalse(node3.hasChildren());
1132:       assertFalse(node3.isAssign());
1133:       assertEquals(39, node3.getType());
1134:       assertFalse(node3.isContinue());
1135:       assertFalse(node3.isAnd());
1136:       assertFalse(node3.isWhile());
1137:       assertFalse(node3.isGetProp());
1138:       assertFalse(node3.isScript());
1139:       assertEquals(52, node3.getLineno());
1140:       assertFalse(node3.isObjectLit());
1141:       assertFalse(node3.isNot());
1142:       assertFalse(node3.isFalse());
1143:       assertFalse(node3.isThrow());
1144:       assertFalse(node3.isBlock());
1145:       assertFalse(node3.isThis());
1146:       assertFalse(node3.isInstanceOf());
1147:       assertFalse(node3.isHook());
1148:       assertFalse(node3.isWith());
1149:       assertFalse(node3.isCatch());
1150:       assertFalse(node3.isSetterDef());
1151:       assertFalse(node3.isInc());
1152:       assertFalse(node3.isNE());
1153:       assertFalse(node3.isIn());
1154:       assertEquals(8, Node.FLAG_NO_THROWS);
1155:       assertEquals(39, Node.EMPTY_BLOCK);
1156:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1157:       assertEquals(50, Node.FREE_CALL);
1158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1159:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1160:       assertEquals(55, Node.INFERRED_FUNCTION);
1161:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1163:       assertEquals(53, Node.INPUT_ID);
1164:       assertEquals(52, Node.LENGTH);
1165:       assertEquals(57, Node.REFLECTED_OBJECT);
1166:       assertEquals(36, Node.QUOTED_PROP);
1167:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1168:       assertEquals(4095, Node.COLUMN_MASK);
1169:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1170:       assertEquals(49, Node.DIRECT_EVAL);
1171:       assertEquals(48, Node.DIRECTIVES);
1172:       assertEquals(37, Node.OPT_ARG_NAME);
1173:       assertEquals(56, Node.CHANGE_TIME);
1174:       assertEquals(46, Node.IS_NAMESPACE);
1175:       assertEquals(47, Node.IS_DISPATCHER);
1176:       assertEquals(2, Node.POST_FLAG);
1177:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1178:       assertEquals(29, Node.JSDOC_INFO_PROP);
1179:       assertEquals(12, Node.COLUMN_BITS);
1180:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1181:       assertEquals(32, Node.INCRDECR_PROP);
1182:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1183:       assertEquals(57, Node.LAST_PROP);
1184:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1185:       assertEquals(1, Node.DECR_FLAG);
1186:       assertEquals(54, Node.SLASH_V);
1187:       assertEquals(43, Node.IS_CONSTANT_NAME);
1188:       assertEquals(30, Node.VAR_ARGS_NAME);
1189:       assertEquals(40, Node.ORIGINALNAME_PROP);
1190:       assertFalse(node3.equals((Object)node0));
1191:       assertFalse(node3.equals((Object)node1));
1192:       assertFalse(node3.equals((Object)node2));
1193:       
1194:       try { 
1195:         node3.getString();
1196:         fail("Expecting exception: UnsupportedOperationException");
1197:       
1198:       } catch(UnsupportedOperationException e) {
1199:          //
1200:          // NUMBER 0.0 52 is not a string node
1201:          //
1202:          verifyException("com.google.javascript.rhino.Node", e);
1203:       }
1204:   }
1205: }
RegularFileObject[/tmp/EvoSuite_43_1629222868633/com/google/javascript/rhino/Node_43_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:28 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_43_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_43_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_43_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
332:       "com.google.common.collect.Sets",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.jstype.TemplatizedType",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.Platform",
347:       "com.google.common.collect.Iterators$12",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.javascript.rhino.JSTypeExpression",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 17:54:28.932 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertNotNull(node0);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isDec();
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean0);

Node node1 = new Node(15, 0, 48);
assertNotNull(node1);
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(48, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabelName());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertEquals(15, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(0, node1.getLineno());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node1.equals((Object)node0));

Node node2 = node0.clonePropsFrom(node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertNotNull(node2);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node1.isNot());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(48, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabelName());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertEquals(15, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(0, node1.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isTry());
assertFalse(node2.isDelProp());
assertFalse(node2.isWhile());
assertEquals(39, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertTrue(node2.isNumber());
assertFalse(node2.isReturn());
assertFalse(node2.isIf());
assertFalse(node2.isString());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isScript());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isThis());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWith());
assertFalse(node2.isLabel());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean1 = node0.isFromExterns();
assertSame(node0, node2);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

boolean boolean2 = node0.isBreak();
assertSame(node0, node2);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

boolean boolean3 = node0.isCatch();
assertSame(node0, node2);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isSwitch());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3);

Node node3 = Node.newNumber(0.0, 52, 46);
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertNotNull(node3);
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isSwitch());
assertTrue(node3.isNumber());
assertFalse(node3.isParamList());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isVar());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertEquals(0, node3.getChildCount());
assertEquals(213038, node3.getSourcePosition());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabelName());
assertEquals(46, node3.getCharno());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isExprResult());
assertFalse(node3.isReturn());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.hasChildren());
assertFalse(node3.isAssign());
assertEquals(39, node3.getType());
assertFalse(node3.isContinue());
assertFalse(node3.isAnd());
assertFalse(node3.isWhile());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertEquals(52, node3.getLineno());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));

node3.getString();

[MASTER] 17:54:29.924 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_50_1629222869727/com/google/javascript/rhino/Node_50_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_50_1629222869727/com/google/javascript/rhino/Node_50_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:29.924 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:29.924 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:29.925 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 230
[MASTER] 17:54:29.926 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_50_1629222869727/com/google/javascript/rhino/Node_50_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:29 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_50_tmp__ESTest extends Node_50_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertNotNull(node0);
23:       assertFalse(node0.isNE());
24:       assertFalse(node0.isIf());
25:       assertFalse(node0.isGetterDef());
26:       assertFalse(node0.isDelProp());
27:       assertFalse(node0.isEmpty());
28:       assertTrue(node0.isNumber());
29:       assertFalse(node0.isFor());
30:       assertFalse(node0.isSwitch());
31:       assertFalse(node0.isDebugger());
32:       assertFalse(node0.isFunction());
33:       assertFalse(node0.isTry());
34:       assertFalse(node0.isString());
35:       assertFalse(node0.isCase());
36:       assertFalse(node0.isArrayLit());
37:       assertEquals((-1), node0.getCharno());
38:       assertFalse(node0.isParamList());
39:       assertFalse(node0.isComma());
40:       assertFalse(node0.isGetProp());
41:       assertFalse(node0.isBreak());
42:       assertFalse(node0.isCall());
43:       assertFalse(node0.isVar());
44:       assertEquals(0, node0.getChildCount());
45:       assertFalse(node0.isVoid());
46:       assertFalse(node0.isDefaultCase());
47:       assertFalse(node0.isDo());
48:       assertFalse(node0.isNew());
49:       assertFalse(node0.isExprResult());
50:       assertFalse(node0.isAdd());
51:       assertFalse(node0.isName());
52:       assertFalse(node0.isOr());
53:       assertFalse(node0.isNull());
54:       assertFalse(node0.isTrue());
55:       assertEquals((-1), node0.getSourcePosition());
56:       assertFalse(node0.isDec());
57:       assertFalse(node0.isTypeOf());
58:       assertFalse(node0.isLabelName());
59:       assertEquals((-1), node0.getLineno());
60:       assertFalse(node0.isGetElem());
61:       assertFalse(node0.hasMoreThanOneChild());
62:       assertFalse(node0.isCast());
63:       assertFalse(node0.hasOneChild());
64:       assertFalse(node0.isContinue());
65:       assertEquals(39, node0.getType());
66:       assertFalse(node0.isAssign());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.isWhile());
70:       assertFalse(node0.hasChildren());
71:       assertFalse(node0.isReturn());
72:       assertFalse(node0.isScript());
73:       assertFalse(node0.isAnd());
74:       assertFalse(node0.isObjectLit());
75:       assertFalse(node0.isNot());
76:       assertFalse(node0.isStringKey());
77:       assertFalse(node0.isSetterDef());
78:       assertFalse(node0.isCatch());
79:       assertFalse(node0.isInstanceOf());
80:       assertFalse(node0.isFalse());
81:       assertFalse(node0.isThrow());
82:       assertFalse(node0.isBlock());
83:       assertFalse(node0.isHook());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isRegExp());
86:       assertFalse(node0.isWith());
87:       assertFalse(node0.isInc());
88:       assertFalse(node0.isIn());
89:       assertEquals(4095, Node.COLUMN_MASK);
90:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
91:       assertEquals(36, Node.QUOTED_PROP);
92:       assertEquals(8, Node.FLAG_NO_THROWS);
93:       assertEquals(50, Node.FREE_CALL);
94:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
95:       assertEquals(55, Node.INFERRED_FUNCTION);
96:       assertEquals(39, Node.EMPTY_BLOCK);
97:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
98:       assertEquals(53, Node.INPUT_ID);
99:       assertEquals(57, Node.REFLECTED_OBJECT);
100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
101:       assertEquals(52, Node.LENGTH);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
104:       assertEquals(56, Node.CHANGE_TIME);
105:       assertEquals(49, Node.DIRECT_EVAL);
106:       assertEquals(48, Node.DIRECTIVES);
107:       assertEquals(37, Node.OPT_ARG_NAME);
108:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
109:       assertEquals(51, Node.STATIC_SOURCE_FILE);
110:       assertEquals(32, Node.INCRDECR_PROP);
111:       assertEquals(12, Node.COLUMN_BITS);
112:       assertEquals(46, Node.IS_NAMESPACE);
113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
114:       assertEquals(57, Node.LAST_PROP);
115:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
117:       assertEquals(1, Node.DECR_FLAG);
118:       assertEquals(29, Node.JSDOC_INFO_PROP);
119:       assertEquals(54, Node.SLASH_V);
120:       assertEquals(43, Node.IS_CONSTANT_NAME);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(2, Node.POST_FLAG);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertNotNull(iterable0);
128:       assertFalse(node0.isNE());
129:       assertFalse(node0.isIf());
130:       assertFalse(node0.isGetterDef());
131:       assertFalse(node0.isDelProp());
132:       assertFalse(node0.isEmpty());
133:       assertTrue(node0.isNumber());
134:       assertFalse(node0.isFor());
135:       assertFalse(node0.isSwitch());
136:       assertFalse(node0.isDebugger());
137:       assertFalse(node0.isFunction());
138:       assertFalse(node0.isTry());
139:       assertFalse(node0.isString());
140:       assertFalse(node0.isCase());
141:       assertFalse(node0.isArrayLit());
142:       assertEquals((-1), node0.getCharno());
143:       assertFalse(node0.isParamList());
144:       assertFalse(node0.isComma());
145:       assertFalse(node0.isGetProp());
146:       assertFalse(node0.isBreak());
147:       assertFalse(node0.isCall());
148:       assertFalse(node0.isVar());
149:       assertEquals(0, node0.getChildCount());
150:       assertFalse(node0.isVoid());
151:       assertFalse(node0.isDefaultCase());
152:       assertFalse(node0.isDo());
153:       assertFalse(node0.isNew());
154:       assertFalse(node0.isExprResult());
155:       assertFalse(node0.isAdd());
156:       assertFalse(node0.isName());
157:       assertFalse(node0.isOr());
158:       assertFalse(node0.isNull());
159:       assertFalse(node0.isTrue());
160:       assertEquals((-1), node0.getSourcePosition());
161:       assertFalse(node0.isDec());
162:       assertFalse(node0.isTypeOf());
163:       assertFalse(node0.isLabelName());
164:       assertEquals((-1), node0.getLineno());
165:       assertFalse(node0.isGetElem());
166:       assertFalse(node0.hasMoreThanOneChild());
167:       assertFalse(node0.isCast());
168:       assertFalse(node0.hasOneChild());
169:       assertFalse(node0.isContinue());
170:       assertEquals(39, node0.getType());
171:       assertFalse(node0.isAssign());
172:       assertFalse(node0.isLabel());
173:       assertFalse(node0.isAssignAdd());
174:       assertFalse(node0.isWhile());
175:       assertFalse(node0.hasChildren());
176:       assertFalse(node0.isReturn());
177:       assertFalse(node0.isScript());
178:       assertFalse(node0.isAnd());
179:       assertFalse(node0.isObjectLit());
180:       assertFalse(node0.isNot());
181:       assertFalse(node0.isStringKey());
182:       assertFalse(node0.isSetterDef());
183:       assertFalse(node0.isCatch());
184:       assertFalse(node0.isInstanceOf());
185:       assertFalse(node0.isFalse());
186:       assertFalse(node0.isThrow());
187:       assertFalse(node0.isBlock());
188:       assertFalse(node0.isHook());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isRegExp());
191:       assertFalse(node0.isWith());
192:       assertFalse(node0.isInc());
193:       assertFalse(node0.isIn());
194:       assertEquals(4095, Node.COLUMN_MASK);
195:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
196:       assertEquals(36, Node.QUOTED_PROP);
197:       assertEquals(8, Node.FLAG_NO_THROWS);
198:       assertEquals(50, Node.FREE_CALL);
199:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
200:       assertEquals(55, Node.INFERRED_FUNCTION);
201:       assertEquals(39, Node.EMPTY_BLOCK);
202:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
203:       assertEquals(53, Node.INPUT_ID);
204:       assertEquals(57, Node.REFLECTED_OBJECT);
205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
206:       assertEquals(52, Node.LENGTH);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
209:       assertEquals(56, Node.CHANGE_TIME);
210:       assertEquals(49, Node.DIRECT_EVAL);
211:       assertEquals(48, Node.DIRECTIVES);
212:       assertEquals(37, Node.OPT_ARG_NAME);
213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
214:       assertEquals(51, Node.STATIC_SOURCE_FILE);
215:       assertEquals(32, Node.INCRDECR_PROP);
216:       assertEquals(12, Node.COLUMN_BITS);
217:       assertEquals(46, Node.IS_NAMESPACE);
218:       assertEquals(15, Node.NO_SIDE_EFFECTS);
219:       assertEquals(57, Node.LAST_PROP);
220:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
221:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
222:       assertEquals(1, Node.DECR_FLAG);
223:       assertEquals(29, Node.JSDOC_INFO_PROP);
224:       assertEquals(54, Node.SLASH_V);
225:       assertEquals(43, Node.IS_CONSTANT_NAME);
226:       assertEquals(47, Node.IS_DISPATCHER);
227:       assertEquals(30, Node.VAR_ARGS_NAME);
228:       assertEquals(2, Node.POST_FLAG);
229:       assertEquals(40, Node.ORIGINALNAME_PROP);
230:       assertFalse(iterable0.contains(node0));
231:       
232:       boolean boolean0 = node0.isDec();
233:       assertFalse(node0.isNE());
234:       assertFalse(node0.isIf());
235:       assertFalse(node0.isGetterDef());
236:       assertFalse(node0.isDelProp());
237:       assertFalse(node0.isEmpty());
238:       assertTrue(node0.isNumber());
239:       assertFalse(node0.isFor());
240:       assertFalse(node0.isSwitch());
241:       assertFalse(node0.isDebugger());
242:       assertFalse(node0.isFunction());
243:       assertFalse(node0.isTry());
244:       assertFalse(node0.isString());
245:       assertFalse(node0.isCase());
246:       assertFalse(node0.isArrayLit());
247:       assertEquals((-1), node0.getCharno());
248:       assertFalse(node0.isParamList());
249:       assertFalse(node0.isComma());
250:       assertFalse(node0.isGetProp());
251:       assertFalse(node0.isBreak());
252:       assertFalse(node0.isCall());
253:       assertFalse(node0.isVar());
254:       assertEquals(0, node0.getChildCount());
255:       assertFalse(node0.isVoid());
256:       assertFalse(node0.isDefaultCase());
257:       assertFalse(node0.isDo());
258:       assertFalse(node0.isNew());
259:       assertFalse(node0.isExprResult());
260:       assertFalse(node0.isAdd());
261:       assertFalse(node0.isName());
262:       assertFalse(node0.isOr());
263:       assertFalse(node0.isNull());
264:       assertFalse(node0.isTrue());
265:       assertEquals((-1), node0.getSourcePosition());
266:       assertFalse(node0.isDec());
267:       assertFalse(node0.isTypeOf());
268:       assertFalse(node0.isLabelName());
269:       assertEquals((-1), node0.getLineno());
270:       assertFalse(node0.isGetElem());
271:       assertFalse(node0.hasMoreThanOneChild());
272:       assertFalse(node0.isCast());
273:       assertFalse(node0.hasOneChild());
274:       assertFalse(node0.isContinue());
275:       assertEquals(39, node0.getType());
276:       assertFalse(node0.isAssign());
277:       assertFalse(node0.isLabel());
278:       assertFalse(node0.isAssignAdd());
279:       assertFalse(node0.isWhile());
280:       assertFalse(node0.hasChildren());
281:       assertFalse(node0.isReturn());
282:       assertFalse(node0.isScript());
283:       assertFalse(node0.isAnd());
284:       assertFalse(node0.isObjectLit());
285:       assertFalse(node0.isNot());
286:       assertFalse(node0.isStringKey());
287:       assertFalse(node0.isSetterDef());
288:       assertFalse(node0.isCatch());
289:       assertFalse(node0.isInstanceOf());
290:       assertFalse(node0.isFalse());
291:       assertFalse(node0.isThrow());
292:       assertFalse(node0.isBlock());
293:       assertFalse(node0.isHook());
294:       assertFalse(node0.isThis());
295:       assertFalse(node0.isRegExp());
296:       assertFalse(node0.isWith());
297:       assertFalse(node0.isInc());
298:       assertFalse(node0.isIn());
299:       assertEquals(4095, Node.COLUMN_MASK);
300:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
301:       assertEquals(36, Node.QUOTED_PROP);
302:       assertEquals(8, Node.FLAG_NO_THROWS);
303:       assertEquals(50, Node.FREE_CALL);
304:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
305:       assertEquals(55, Node.INFERRED_FUNCTION);
306:       assertEquals(39, Node.EMPTY_BLOCK);
307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
308:       assertEquals(53, Node.INPUT_ID);
309:       assertEquals(57, Node.REFLECTED_OBJECT);
310:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
311:       assertEquals(52, Node.LENGTH);
312:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
314:       assertEquals(56, Node.CHANGE_TIME);
315:       assertEquals(49, Node.DIRECT_EVAL);
316:       assertEquals(48, Node.DIRECTIVES);
317:       assertEquals(37, Node.OPT_ARG_NAME);
318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
319:       assertEquals(51, Node.STATIC_SOURCE_FILE);
320:       assertEquals(32, Node.INCRDECR_PROP);
321:       assertEquals(12, Node.COLUMN_BITS);
322:       assertEquals(46, Node.IS_NAMESPACE);
323:       assertEquals(15, Node.NO_SIDE_EFFECTS);
324:       assertEquals(57, Node.LAST_PROP);
325:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
326:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
327:       assertEquals(1, Node.DECR_FLAG);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(54, Node.SLASH_V);
330:       assertEquals(43, Node.IS_CONSTANT_NAME);
331:       assertEquals(47, Node.IS_DISPATCHER);
332:       assertEquals(30, Node.VAR_ARGS_NAME);
333:       assertEquals(2, Node.POST_FLAG);
334:       assertEquals(40, Node.ORIGINALNAME_PROP);
335:       assertFalse(boolean0);
336:       
337:       Node node1 = new Node(46, node0, node0);
338:       assertNotNull(node1);
339:       assertFalse(node0.isNE());
340:       assertFalse(node0.isIf());
341:       assertFalse(node0.isGetterDef());
342:       assertFalse(node0.isDelProp());
343:       assertFalse(node0.isEmpty());
344:       assertTrue(node0.isNumber());
345:       assertFalse(node0.isFor());
346:       assertFalse(node0.isSwitch());
347:       assertFalse(node0.isDebugger());
348:       assertFalse(node0.isFunction());
349:       assertFalse(node0.isTry());
350:       assertFalse(node0.isString());
351:       assertFalse(node0.isCase());
352:       assertFalse(node0.isArrayLit());
353:       assertEquals((-1), node0.getCharno());
354:       assertFalse(node0.isParamList());
355:       assertFalse(node0.isComma());
356:       assertFalse(node0.isGetProp());
357:       assertFalse(node0.isBreak());
358:       assertFalse(node0.isCall());
359:       assertFalse(node0.isVar());
360:       assertEquals(0, node0.getChildCount());
361:       assertFalse(node0.isVoid());
362:       assertFalse(node0.isDefaultCase());
363:       assertFalse(node0.isDo());
364:       assertFalse(node0.isNew());
365:       assertFalse(node0.isExprResult());
366:       assertFalse(node0.isAdd());
367:       assertFalse(node0.isName());
368:       assertFalse(node0.isOr());
369:       assertFalse(node0.isNull());
370:       assertFalse(node0.isTrue());
371:       assertEquals((-1), node0.getSourcePosition());
372:       assertFalse(node0.isDec());
373:       assertFalse(node0.isTypeOf());
374:       assertFalse(node0.isLabelName());
375:       assertEquals((-1), node0.getLineno());
376:       assertFalse(node0.isGetElem());
377:       assertFalse(node0.hasMoreThanOneChild());
378:       assertFalse(node0.isCast());
379:       assertFalse(node0.hasOneChild());
380:       assertFalse(node0.isContinue());
381:       assertEquals(39, node0.getType());
382:       assertFalse(node0.isAssign());
383:       assertFalse(node0.isLabel());
384:       assertFalse(node0.isAssignAdd());
385:       assertFalse(node0.isWhile());
386:       assertFalse(node0.hasChildren());
387:       assertFalse(node0.isReturn());
388:       assertFalse(node0.isScript());
389:       assertFalse(node0.isAnd());
390:       assertFalse(node0.isObjectLit());
391:       assertFalse(node0.isNot());
392:       assertFalse(node0.isStringKey());
393:       assertFalse(node0.isSetterDef());
394:       assertFalse(node0.isCatch());
395:       assertFalse(node0.isInstanceOf());
396:       assertFalse(node0.isFalse());
397:       assertFalse(node0.isThrow());
398:       assertFalse(node0.isBlock());
399:       assertFalse(node0.isHook());
400:       assertFalse(node0.isThis());
401:       assertFalse(node0.isRegExp());
402:       assertFalse(node0.isWith());
403:       assertFalse(node0.isInc());
404:       assertFalse(node0.isIn());
405:       assertFalse(node1.isSetterDef());
406:       assertFalse(node1.isParamList());
407:       assertFalse(node1.isNull());
408:       assertFalse(node1.isStringKey());
409:       assertFalse(node1.isCatch());
410:       assertFalse(node1.isCall());
411:       assertFalse(node1.isVoid());
412:       assertFalse(node1.isName());
413:       assertFalse(node1.isBlock());
414:       assertFalse(node1.isDebugger());
415:       assertFalse(node1.isRegExp());
416:       assertTrue(node1.hasOneChild());
417:       assertFalse(node1.isFor());
418:       assertFalse(node1.isWhile());
419:       assertFalse(node1.isTry());
420:       assertFalse(node1.isNE());
421:       assertTrue(node1.hasChildren());
422:       assertFalse(node1.isIn());
423:       assertEquals((-1), node1.getSourcePosition());
424:       assertEquals(1, node1.getChildCount());
425:       assertFalse(node1.hasMoreThanOneChild());
426:       assertFalse(node1.isContinue());
427:       assertFalse(node1.isCast());
428:       assertFalse(node1.isIf());
429:       assertEquals((-1), node1.getLineno());
430:       assertFalse(node1.isInc());
431:       assertFalse(node1.isFunction());
432:       assertFalse(node1.isThrow());
433:       assertFalse(node1.isGetProp());
434:       assertFalse(node1.isThis());
435:       assertFalse(node1.isInstanceOf());
436:       assertFalse(node1.isComma());
437:       assertFalse(node1.isObjectLit());
438:       assertFalse(node1.isFalse());
439:       assertFalse(node1.isAnd());
440:       assertFalse(node1.isBreak());
441:       assertEquals((-1), node1.getCharno());
442:       assertFalse(node1.isExprResult());
443:       assertFalse(node1.isScript());
444:       assertFalse(node1.isHook());
445:       assertFalse(node1.isString());
446:       assertFalse(node1.isWith());
447:       assertFalse(node1.isNot());
448:       assertFalse(node1.isCase());
449:       assertFalse(node1.isLabel());
450:       assertFalse(node1.isAssignAdd());
451:       assertFalse(node1.isReturn());
452:       assertFalse(node1.isDec());
453:       assertFalse(node1.isNumber());
454:       assertFalse(node1.isOr());
455:       assertFalse(node1.isAssign());
456:       assertFalse(node1.isTypeOf());
457:       assertFalse(node1.isGetterDef());
458:       assertFalse(node1.isGetElem());
459:       assertFalse(node1.isArrayLit());
460:       assertFalse(node1.isSwitch());
461:       assertFalse(node1.isDelProp());
462:       assertFalse(node1.isLabelName());
463:       assertFalse(node1.isNew());
464:       assertFalse(node1.isTrue());
465:       assertFalse(node1.isAdd());
466:       assertFalse(node1.isEmpty());
467:       assertFalse(node1.isVar());
468:       assertFalse(node1.isDefaultCase());
469:       assertEquals(46, node1.getType());
470:       assertFalse(node1.isDo());
471:       assertEquals(4095, Node.COLUMN_MASK);
472:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
473:       assertEquals(36, Node.QUOTED_PROP);
474:       assertEquals(8, Node.FLAG_NO_THROWS);
475:       assertEquals(50, Node.FREE_CALL);
476:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
477:       assertEquals(55, Node.INFERRED_FUNCTION);
478:       assertEquals(39, Node.EMPTY_BLOCK);
479:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
480:       assertEquals(53, Node.INPUT_ID);
481:       assertEquals(57, Node.REFLECTED_OBJECT);
482:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
483:       assertEquals(52, Node.LENGTH);
484:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
485:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
486:       assertEquals(56, Node.CHANGE_TIME);
487:       assertEquals(49, Node.DIRECT_EVAL);
488:       assertEquals(48, Node.DIRECTIVES);
489:       assertEquals(37, Node.OPT_ARG_NAME);
490:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
491:       assertEquals(51, Node.STATIC_SOURCE_FILE);
492:       assertEquals(32, Node.INCRDECR_PROP);
493:       assertEquals(12, Node.COLUMN_BITS);
494:       assertEquals(46, Node.IS_NAMESPACE);
495:       assertEquals(15, Node.NO_SIDE_EFFECTS);
496:       assertEquals(57, Node.LAST_PROP);
497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
498:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
499:       assertEquals(1, Node.DECR_FLAG);
500:       assertEquals(29, Node.JSDOC_INFO_PROP);
501:       assertEquals(54, Node.SLASH_V);
502:       assertEquals(43, Node.IS_CONSTANT_NAME);
503:       assertEquals(47, Node.IS_DISPATCHER);
504:       assertEquals(30, Node.VAR_ARGS_NAME);
505:       assertEquals(2, Node.POST_FLAG);
506:       assertEquals(40, Node.ORIGINALNAME_PROP);
507:       assertEquals(12, Node.COLUMN_BITS);
508:       assertEquals(46, Node.IS_NAMESPACE);
509:       assertEquals(32, Node.INCRDECR_PROP);
510:       assertEquals(15, Node.NO_SIDE_EFFECTS);
511:       assertEquals(57, Node.LAST_PROP);
512:       assertEquals(49, Node.DIRECT_EVAL);
513:       assertEquals(1, Node.DECR_FLAG);
514:       assertEquals(37, Node.OPT_ARG_NAME);
515:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
516:       assertEquals(47, Node.IS_DISPATCHER);
517:       assertEquals(2, Node.POST_FLAG);
518:       assertEquals(30, Node.VAR_ARGS_NAME);
519:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
520:       assertEquals(57, Node.REFLECTED_OBJECT);
521:       assertEquals(29, Node.JSDOC_INFO_PROP);
522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
523:       assertEquals(8, Node.FLAG_NO_THROWS);
524:       assertEquals(39, Node.EMPTY_BLOCK);
525:       assertEquals(56, Node.CHANGE_TIME);
526:       assertEquals(53, Node.INPUT_ID);
527:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
528:       assertEquals(52, Node.LENGTH);
529:       assertEquals(36, Node.QUOTED_PROP);
530:       assertEquals(4095, Node.COLUMN_MASK);
531:       assertEquals(55, Node.INFERRED_FUNCTION);
532:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
533:       assertEquals(48, Node.DIRECTIVES);
534:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
535:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
536:       assertEquals(40, Node.ORIGINALNAME_PROP);
537:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
538:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
539:       assertEquals(43, Node.IS_CONSTANT_NAME);
540:       assertEquals(54, Node.SLASH_V);
541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
542:       assertEquals(50, Node.FREE_CALL);
543:       assertFalse(node1.equals((Object)node0));
544:       
545:       Node node2 = node0.clonePropsFrom(node1);
546:       assertSame(node0, node2);
547:       assertSame(node2, node0);
548:       assertNotNull(node2);
549:       assertFalse(node0.isNE());
550:       assertFalse(node0.isIf());
551:       assertFalse(node0.isGetterDef());
552:       assertFalse(node0.isDelProp());
553:       assertFalse(node0.isEmpty());
554:       assertTrue(node0.isNumber());
555:       assertFalse(node0.isFor());
556:       assertFalse(node0.isSwitch());
557:       assertFalse(node0.isDebugger());
558:       assertFalse(node0.isFunction());
559:       assertFalse(node0.isTry());
560:       assertFalse(node0.isString());
561:       assertFalse(node0.isCase());
562:       assertFalse(node0.isArrayLit());
563:       assertEquals((-1), node0.getCharno());
564:       assertFalse(node0.isParamList());
565:       assertFalse(node0.isComma());
566:       assertFalse(node0.isGetProp());
567:       assertFalse(node0.isBreak());
568:       assertFalse(node0.isCall());
569:       assertFalse(node0.isVar());
570:       assertEquals(0, node0.getChildCount());
571:       assertFalse(node0.isVoid());
572:       assertFalse(node0.isDefaultCase());
573:       assertFalse(node0.isDo());
574:       assertFalse(node0.isNew());
575:       assertFalse(node0.isExprResult());
576:       assertFalse(node0.isAdd());
577:       assertFalse(node0.isName());
578:       assertFalse(node0.isOr());
579:       assertFalse(node0.isNull());
580:       assertFalse(node0.isTrue());
581:       assertEquals((-1), node0.getSourcePosition());
582:       assertFalse(node0.isDec());
583:       assertFalse(node0.isTypeOf());
584:       assertFalse(node0.isLabelName());
585:       assertEquals((-1), node0.getLineno());
586:       assertFalse(node0.isGetElem());
587:       assertFalse(node0.hasMoreThanOneChild());
588:       assertFalse(node0.isCast());
589:       assertFalse(node0.hasOneChild());
590:       assertFalse(node0.isContinue());
591:       assertEquals(39, node0.getType());
592:       assertFalse(node0.isAssign());
593:       assertFalse(node0.isLabel());
594:       assertFalse(node0.isAssignAdd());
595:       assertFalse(node0.isWhile());
596:       assertFalse(node0.hasChildren());
597:       assertFalse(node0.isReturn());
598:       assertFalse(node0.isScript());
599:       assertFalse(node0.isAnd());
600:       assertFalse(node0.isObjectLit());
601:       assertFalse(node0.isNot());
602:       assertFalse(node0.isStringKey());
603:       assertFalse(node0.isSetterDef());
604:       assertFalse(node0.isCatch());
605:       assertFalse(node0.isInstanceOf());
606:       assertFalse(node0.isFalse());
607:       assertFalse(node0.isThrow());
608:       assertFalse(node0.isBlock());
609:       assertFalse(node0.isHook());
610:       assertFalse(node0.isThis());
611:       assertFalse(node0.isRegExp());
612:       assertFalse(node0.isWith());
613:       assertFalse(node0.isInc());
614:       assertFalse(node0.isIn());
615:       assertFalse(node1.isSetterDef());
616:       assertFalse(node1.isParamList());
617:       assertFalse(node1.isNull());
618:       assertFalse(node1.isStringKey());
619:       assertFalse(node1.isCatch());
620:       assertFalse(node1.isCall());
621:       assertFalse(node1.isVoid());
622:       assertFalse(node1.isName());
623:       assertFalse(node1.isBlock());
624:       assertFalse(node1.isDebugger());
625:       assertFalse(node1.isRegExp());
626:       assertTrue(node1.hasOneChild());
627:       assertFalse(node1.isFor());
628:       assertFalse(node1.isWhile());
629:       assertFalse(node1.isTry());
630:       assertFalse(node1.isNE());
631:       assertTrue(node1.hasChildren());
632:       assertFalse(node1.isIn());
633:       assertEquals((-1), node1.getSourcePosition());
634:       assertEquals(1, node1.getChildCount());
635:       assertFalse(node1.hasMoreThanOneChild());
636:       assertFalse(node1.isContinue());
637:       assertFalse(node1.isCast());
638:       assertFalse(node1.isIf());
639:       assertEquals((-1), node1.getLineno());
640:       assertFalse(node1.isInc());
641:       assertFalse(node1.isFunction());
642:       assertFalse(node1.isThrow());
643:       assertFalse(node1.isGetProp());
644:       assertFalse(node1.isThis());
645:       assertFalse(node1.isInstanceOf());
646:       assertFalse(node1.isComma());
647:       assertFalse(node1.isObjectLit());
648:       assertFalse(node1.isFalse());
649:       assertFalse(node1.isAnd());
650:       assertFalse(node1.isBreak());
651:       assertEquals((-1), node1.getCharno());
652:       assertFalse(node1.isExprResult());
653:       assertFalse(node1.isScript());
654:       assertFalse(node1.isHook());
655:       assertFalse(node1.isString());
656:       assertFalse(node1.isWith());
657:       assertFalse(node1.isNot());
658:       assertFalse(node1.isCase());
659:       assertFalse(node1.isLabel());
660:       assertFalse(node1.isAssignAdd());
661:       assertFalse(node1.isReturn());
662:       assertFalse(node1.isDec());
663:       assertFalse(node1.isNumber());
664:       assertFalse(node1.isOr());
665:       assertFalse(node1.isAssign());
666:       assertFalse(node1.isTypeOf());
667:       assertFalse(node1.isGetterDef());
668:       assertFalse(node1.isGetElem());
669:       assertFalse(node1.isArrayLit());
670:       assertFalse(node1.isSwitch());
671:       assertFalse(node1.isDelProp());
672:       assertFalse(node1.isLabelName());
673:       assertFalse(node1.isNew());
674:       assertFalse(node1.isTrue());
675:       assertFalse(node1.isAdd());
676:       assertFalse(node1.isEmpty());
677:       assertFalse(node1.isVar());
678:       assertFalse(node1.isDefaultCase());
679:       assertEquals(46, node1.getType());
680:       assertFalse(node1.isDo());
681:       assertFalse(node2.isTry());
682:       assertFalse(node2.isTrue());
683:       assertFalse(node2.isDebugger());
684:       assertFalse(node2.isFunction());
685:       assertFalse(node2.isFor());
686:       assertFalse(node2.isDelProp());
687:       assertFalse(node2.isRegExp());
688:       assertFalse(node2.isIf());
689:       assertFalse(node2.isCatch());
690:       assertFalse(node2.isVoid());
691:       assertFalse(node2.isArrayLit());
692:       assertTrue(node2.isNumber());
693:       assertFalse(node2.isParamList());
694:       assertFalse(node2.isString());
695:       assertFalse(node2.isGetterDef());
696:       assertFalse(node2.isCase());
697:       assertEquals((-1), node2.getCharno());
698:       assertFalse(node2.isStringKey());
699:       assertFalse(node2.isVar());
700:       assertFalse(node2.isName());
701:       assertFalse(node2.isSwitch());
702:       assertFalse(node2.isCall());
703:       assertFalse(node2.isBreak());
704:       assertEquals(0, node2.getChildCount());
705:       assertFalse(node2.isOr());
706:       assertFalse(node2.isAssignAdd());
707:       assertFalse(node2.isNull());
708:       assertFalse(node2.isLabel());
709:       assertFalse(node2.isDo());
710:       assertFalse(node2.isEmpty());
711:       assertFalse(node2.isDefaultCase());
712:       assertFalse(node2.isAdd());
713:       assertFalse(node2.isNew());
714:       assertFalse(node2.hasOneChild());
715:       assertFalse(node2.isAssign());
716:       assertFalse(node2.isDec());
717:       assertFalse(node2.isLabelName());
718:       assertFalse(node2.isTypeOf());
719:       assertFalse(node2.isWith());
720:       assertFalse(node2.isExprResult());
721:       assertFalse(node2.isCast());
722:       assertFalse(node2.isGetElem());
723:       assertFalse(node2.isReturn());
724:       assertFalse(node2.isInstanceOf());
725:       assertFalse(node2.hasMoreThanOneChild());
726:       assertFalse(node2.isObjectLit());
727:       assertFalse(node2.isAnd());
728:       assertFalse(node2.isThis());
729:       assertFalse(node2.isComma());
730:       assertEquals((-1), node2.getSourcePosition());
731:       assertEquals(39, node2.getType());
732:       assertFalse(node2.hasChildren());
733:       assertFalse(node2.isWhile());
734:       assertFalse(node2.isNot());
735:       assertFalse(node2.isScript());
736:       assertFalse(node2.isGetProp());
737:       assertFalse(node2.isThrow());
738:       assertFalse(node2.isBlock());
739:       assertFalse(node2.isHook());
740:       assertFalse(node2.isFalse());
741:       assertFalse(node2.isContinue());
742:       assertEquals((-1), node2.getLineno());
743:       assertFalse(node2.isIn());
744:       assertFalse(node2.isNE());
745:       assertFalse(node2.isInc());
746:       assertFalse(node2.isSetterDef());
747:       assertEquals(4095, Node.COLUMN_MASK);
748:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
749:       assertEquals(36, Node.QUOTED_PROP);
750:       assertEquals(8, Node.FLAG_NO_THROWS);
751:       assertEquals(50, Node.FREE_CALL);
752:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
753:       assertEquals(55, Node.INFERRED_FUNCTION);
754:       assertEquals(39, Node.EMPTY_BLOCK);
755:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
756:       assertEquals(53, Node.INPUT_ID);
757:       assertEquals(57, Node.REFLECTED_OBJECT);
758:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
759:       assertEquals(52, Node.LENGTH);
760:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
761:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
762:       assertEquals(56, Node.CHANGE_TIME);
763:       assertEquals(49, Node.DIRECT_EVAL);
764:       assertEquals(48, Node.DIRECTIVES);
765:       assertEquals(37, Node.OPT_ARG_NAME);
766:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
767:       assertEquals(51, Node.STATIC_SOURCE_FILE);
768:       assertEquals(32, Node.INCRDECR_PROP);
769:       assertEquals(12, Node.COLUMN_BITS);
770:       assertEquals(46, Node.IS_NAMESPACE);
771:       assertEquals(15, Node.NO_SIDE_EFFECTS);
772:       assertEquals(57, Node.LAST_PROP);
773:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
774:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
775:       assertEquals(1, Node.DECR_FLAG);
776:       assertEquals(29, Node.JSDOC_INFO_PROP);
777:       assertEquals(54, Node.SLASH_V);
778:       assertEquals(43, Node.IS_CONSTANT_NAME);
779:       assertEquals(47, Node.IS_DISPATCHER);
780:       assertEquals(30, Node.VAR_ARGS_NAME);
781:       assertEquals(2, Node.POST_FLAG);
782:       assertEquals(40, Node.ORIGINALNAME_PROP);
783:       assertEquals(12, Node.COLUMN_BITS);
784:       assertEquals(46, Node.IS_NAMESPACE);
785:       assertEquals(32, Node.INCRDECR_PROP);
786:       assertEquals(15, Node.NO_SIDE_EFFECTS);
787:       assertEquals(57, Node.LAST_PROP);
788:       assertEquals(49, Node.DIRECT_EVAL);
789:       assertEquals(1, Node.DECR_FLAG);
790:       assertEquals(37, Node.OPT_ARG_NAME);
791:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
792:       assertEquals(47, Node.IS_DISPATCHER);
793:       assertEquals(2, Node.POST_FLAG);
794:       assertEquals(30, Node.VAR_ARGS_NAME);
795:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
796:       assertEquals(57, Node.REFLECTED_OBJECT);
797:       assertEquals(29, Node.JSDOC_INFO_PROP);
798:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
799:       assertEquals(8, Node.FLAG_NO_THROWS);
800:       assertEquals(39, Node.EMPTY_BLOCK);
801:       assertEquals(56, Node.CHANGE_TIME);
802:       assertEquals(53, Node.INPUT_ID);
803:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
804:       assertEquals(52, Node.LENGTH);
805:       assertEquals(36, Node.QUOTED_PROP);
806:       assertEquals(4095, Node.COLUMN_MASK);
807:       assertEquals(55, Node.INFERRED_FUNCTION);
808:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
809:       assertEquals(48, Node.DIRECTIVES);
810:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
811:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
812:       assertEquals(40, Node.ORIGINALNAME_PROP);
813:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
814:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
815:       assertEquals(43, Node.IS_CONSTANT_NAME);
816:       assertEquals(54, Node.SLASH_V);
817:       assertEquals(51, Node.STATIC_SOURCE_FILE);
818:       assertEquals(50, Node.FREE_CALL);
819:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
820:       assertEquals(50, Node.FREE_CALL);
821:       assertEquals(40, Node.ORIGINALNAME_PROP);
822:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
823:       assertEquals(39, Node.EMPTY_BLOCK);
824:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
825:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
826:       assertEquals(49, Node.DIRECT_EVAL);
827:       assertEquals(57, Node.LAST_PROP);
828:       assertEquals(4095, Node.COLUMN_MASK);
829:       assertEquals(55, Node.INFERRED_FUNCTION);
830:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
831:       assertEquals(15, Node.NO_SIDE_EFFECTS);
832:       assertEquals(53, Node.INPUT_ID);
833:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
834:       assertEquals(48, Node.DIRECTIVES);
835:       assertEquals(52, Node.LENGTH);
836:       assertEquals(8, Node.FLAG_NO_THROWS);
837:       assertEquals(56, Node.CHANGE_TIME);
838:       assertEquals(36, Node.QUOTED_PROP);
839:       assertEquals(57, Node.REFLECTED_OBJECT);
840:       assertEquals(29, Node.JSDOC_INFO_PROP);
841:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
842:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
843:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
844:       assertEquals(37, Node.OPT_ARG_NAME);
845:       assertEquals(32, Node.INCRDECR_PROP);
846:       assertEquals(2, Node.POST_FLAG);
847:       assertEquals(12, Node.COLUMN_BITS);
848:       assertEquals(47, Node.IS_DISPATCHER);
849:       assertEquals(30, Node.VAR_ARGS_NAME);
850:       assertEquals(1, Node.DECR_FLAG);
851:       assertEquals(43, Node.IS_CONSTANT_NAME);
852:       assertEquals(51, Node.STATIC_SOURCE_FILE);
853:       assertEquals(46, Node.IS_NAMESPACE);
854:       assertEquals(54, Node.SLASH_V);
855:       assertFalse(node0.equals((Object)node1));
856:       assertFalse(node1.equals((Object)node0));
857:       assertFalse(node2.equals((Object)node1));
858:       
859:       boolean boolean1 = node0.isFromExterns();
860:       assertSame(node0, node2);
861:       assertFalse(node0.isNE());
862:       assertFalse(node0.isIf());
863:       assertFalse(node0.isGetterDef());
864:       assertFalse(node0.isDelProp());
865:       assertFalse(node0.isEmpty());
866:       assertTrue(node0.isNumber());
867:       assertFalse(node0.isFor());
868:       assertFalse(node0.isSwitch());
869:       assertFalse(node0.isDebugger());
870:       assertFalse(node0.isFunction());
871:       assertFalse(node0.isTry());
872:       assertFalse(node0.isString());
873:       assertFalse(node0.isCase());
874:       assertFalse(node0.isArrayLit());
875:       assertEquals((-1), node0.getCharno());
876:       assertFalse(node0.isParamList());
877:       assertFalse(node0.isComma());
878:       assertFalse(node0.isGetProp());
879:       assertFalse(node0.isBreak());
880:       assertFalse(node0.isCall());
881:       assertFalse(node0.isVar());
882:       assertEquals(0, node0.getChildCount());
883:       assertFalse(node0.isVoid());
884:       assertFalse(node0.isDefaultCase());
885:       assertFalse(node0.isDo());
886:       assertFalse(node0.isNew());
887:       assertFalse(node0.isExprResult());
888:       assertFalse(node0.isAdd());
889:       assertFalse(node0.isName());
890:       assertFalse(node0.isOr());
891:       assertFalse(node0.isNull());
892:       assertFalse(node0.isTrue());
893:       assertEquals((-1), node0.getSourcePosition());
894:       assertFalse(node0.isDec());
895:       assertFalse(node0.isTypeOf());
896:       assertFalse(node0.isLabelName());
897:       assertEquals((-1), node0.getLineno());
898:       assertFalse(node0.isGetElem());
899:       assertFalse(node0.hasMoreThanOneChild());
900:       assertFalse(node0.isCast());
901:       assertFalse(node0.hasOneChild());
902:       assertFalse(node0.isContinue());
903:       assertEquals(39, node0.getType());
904:       assertFalse(node0.isAssign());
905:       assertFalse(node0.isLabel());
906:       assertFalse(node0.isAssignAdd());
907:       assertFalse(node0.isWhile());
908:       assertFalse(node0.hasChildren());
909:       assertFalse(node0.isReturn());
910:       assertFalse(node0.isScript());
911:       assertFalse(node0.isAnd());
912:       assertFalse(node0.isObjectLit());
913:       assertFalse(node0.isNot());
914:       assertFalse(node0.isStringKey());
915:       assertFalse(node0.isSetterDef());
916:       assertFalse(node0.isCatch());
917:       assertFalse(node0.isInstanceOf());
918:       assertFalse(node0.isFalse());
919:       assertFalse(node0.isThrow());
920:       assertFalse(node0.isBlock());
921:       assertFalse(node0.isHook());
922:       assertFalse(node0.isThis());
923:       assertFalse(node0.isRegExp());
924:       assertFalse(node0.isWith());
925:       assertFalse(node0.isInc());
926:       assertFalse(node0.isIn());
927:       assertEquals(4095, Node.COLUMN_MASK);
928:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
929:       assertEquals(36, Node.QUOTED_PROP);
930:       assertEquals(8, Node.FLAG_NO_THROWS);
931:       assertEquals(50, Node.FREE_CALL);
932:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
933:       assertEquals(55, Node.INFERRED_FUNCTION);
934:       assertEquals(39, Node.EMPTY_BLOCK);
935:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
936:       assertEquals(53, Node.INPUT_ID);
937:       assertEquals(57, Node.REFLECTED_OBJECT);
938:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
939:       assertEquals(52, Node.LENGTH);
940:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
941:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
942:       assertEquals(56, Node.CHANGE_TIME);
943:       assertEquals(49, Node.DIRECT_EVAL);
944:       assertEquals(48, Node.DIRECTIVES);
945:       assertEquals(37, Node.OPT_ARG_NAME);
946:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
947:       assertEquals(51, Node.STATIC_SOURCE_FILE);
948:       assertEquals(32, Node.INCRDECR_PROP);
949:       assertEquals(12, Node.COLUMN_BITS);
950:       assertEquals(46, Node.IS_NAMESPACE);
951:       assertEquals(15, Node.NO_SIDE_EFFECTS);
952:       assertEquals(57, Node.LAST_PROP);
953:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
954:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
955:       assertEquals(1, Node.DECR_FLAG);
956:       assertEquals(29, Node.JSDOC_INFO_PROP);
957:       assertEquals(54, Node.SLASH_V);
958:       assertEquals(43, Node.IS_CONSTANT_NAME);
959:       assertEquals(47, Node.IS_DISPATCHER);
960:       assertEquals(30, Node.VAR_ARGS_NAME);
961:       assertEquals(2, Node.POST_FLAG);
962:       assertEquals(40, Node.ORIGINALNAME_PROP);
963:       assertFalse(node0.equals((Object)node1));
964:       assertTrue(boolean1 == boolean0);
965:       assertFalse(boolean1);
966:       
967:       boolean boolean2 = node0.isBreak();
968:       assertSame(node0, node2);
969:       assertFalse(node0.isNE());
970:       assertFalse(node0.isIf());
971:       assertFalse(node0.isGetterDef());
972:       assertFalse(node0.isDelProp());
973:       assertFalse(node0.isEmpty());
974:       assertTrue(node0.isNumber());
975:       assertFalse(node0.isFor());
976:       assertFalse(node0.isSwitch());
977:       assertFalse(node0.isDebugger());
978:       assertFalse(node0.isFunction());
979:       assertFalse(node0.isTry());
980:       assertFalse(node0.isString());
981:       assertFalse(node0.isCase());
982:       assertFalse(node0.isArrayLit());
983:       assertEquals((-1), node0.getCharno());
984:       assertFalse(node0.isParamList());
985:       assertFalse(node0.isComma());
986:       assertFalse(node0.isGetProp());
987:       assertFalse(node0.isBreak());
988:       assertFalse(node0.isCall());
989:       assertFalse(node0.isVar());
990:       assertEquals(0, node0.getChildCount());
991:       assertFalse(node0.isVoid());
992:       assertFalse(node0.isDefaultCase());
993:       assertFalse(node0.isDo());
994:       assertFalse(node0.isNew());
995:       assertFalse(node0.isExprResult());
996:       assertFalse(node0.isAdd());
997:       assertFalse(node0.isName());
998:       assertFalse(node0.isOr());
999:       assertFalse(node0.isNull());
1000:       assertFalse(node0.isTrue());
1001:       assertEquals((-1), node0.getSourcePosition());
1002:       assertFalse(node0.isDec());
1003:       assertFalse(node0.isTypeOf());
1004:       assertFalse(node0.isLabelName());
1005:       assertEquals((-1), node0.getLineno());
1006:       assertFalse(node0.isGetElem());
1007:       assertFalse(node0.hasMoreThanOneChild());
1008:       assertFalse(node0.isCast());
1009:       assertFalse(node0.hasOneChild());
1010:       assertFalse(node0.isContinue());
1011:       assertEquals(39, node0.getType());
1012:       assertFalse(node0.isAssign());
1013:       assertFalse(node0.isLabel());
1014:       assertFalse(node0.isAssignAdd());
1015:       assertFalse(node0.isWhile());
1016:       assertFalse(node0.hasChildren());
1017:       assertFalse(node0.isReturn());
1018:       assertFalse(node0.isScript());
1019:       assertFalse(node0.isAnd());
1020:       assertFalse(node0.isObjectLit());
1021:       assertFalse(node0.isNot());
1022:       assertFalse(node0.isStringKey());
1023:       assertFalse(node0.isSetterDef());
1024:       assertFalse(node0.isCatch());
1025:       assertFalse(node0.isInstanceOf());
1026:       assertFalse(node0.isFalse());
1027:       assertFalse(node0.isThrow());
1028:       assertFalse(node0.isBlock());
1029:       assertFalse(node0.isHook());
1030:       assertFalse(node0.isThis());
1031:       assertFalse(node0.isRegExp());
1032:       assertFalse(node0.isWith());
1033:       assertFalse(node0.isInc());
1034:       assertFalse(node0.isIn());
1035:       assertEquals(4095, Node.COLUMN_MASK);
1036:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1037:       assertEquals(36, Node.QUOTED_PROP);
1038:       assertEquals(8, Node.FLAG_NO_THROWS);
1039:       assertEquals(50, Node.FREE_CALL);
1040:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1041:       assertEquals(55, Node.INFERRED_FUNCTION);
1042:       assertEquals(39, Node.EMPTY_BLOCK);
1043:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1044:       assertEquals(53, Node.INPUT_ID);
1045:       assertEquals(57, Node.REFLECTED_OBJECT);
1046:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1047:       assertEquals(52, Node.LENGTH);
1048:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1049:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1050:       assertEquals(56, Node.CHANGE_TIME);
1051:       assertEquals(49, Node.DIRECT_EVAL);
1052:       assertEquals(48, Node.DIRECTIVES);
1053:       assertEquals(37, Node.OPT_ARG_NAME);
1054:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1055:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1056:       assertEquals(32, Node.INCRDECR_PROP);
1057:       assertEquals(12, Node.COLUMN_BITS);
1058:       assertEquals(46, Node.IS_NAMESPACE);
1059:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1060:       assertEquals(57, Node.LAST_PROP);
1061:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1062:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1063:       assertEquals(1, Node.DECR_FLAG);
1064:       assertEquals(29, Node.JSDOC_INFO_PROP);
1065:       assertEquals(54, Node.SLASH_V);
1066:       assertEquals(43, Node.IS_CONSTANT_NAME);
1067:       assertEquals(47, Node.IS_DISPATCHER);
1068:       assertEquals(30, Node.VAR_ARGS_NAME);
1069:       assertEquals(2, Node.POST_FLAG);
1070:       assertEquals(40, Node.ORIGINALNAME_PROP);
1071:       assertFalse(node0.equals((Object)node1));
1072:       assertTrue(boolean2 == boolean0);
1073:       assertTrue(boolean2 == boolean1);
1074:       assertFalse(boolean2);
1075:       
1076:       boolean boolean3 = node0.isCatch();
1077:       assertSame(node0, node2);
1078:       assertFalse(node0.isNE());
1079:       assertFalse(node0.isIf());
1080:       assertFalse(node0.isGetterDef());
1081:       assertFalse(node0.isDelProp());
1082:       assertFalse(node0.isEmpty());
1083:       assertTrue(node0.isNumber());
1084:       assertFalse(node0.isFor());
1085:       assertFalse(node0.isSwitch());
1086:       assertFalse(node0.isDebugger());
1087:       assertFalse(node0.isFunction());
1088:       assertFalse(node0.isTry());
1089:       assertFalse(node0.isString());
1090:       assertFalse(node0.isCase());
1091:       assertFalse(node0.isArrayLit());
1092:       assertEquals((-1), node0.getCharno());
1093:       assertFalse(node0.isParamList());
1094:       assertFalse(node0.isComma());
1095:       assertFalse(node0.isGetProp());
1096:       assertFalse(node0.isBreak());
1097:       assertFalse(node0.isCall());
1098:       assertFalse(node0.isVar());
1099:       assertEquals(0, node0.getChildCount());
1100:       assertFalse(node0.isVoid());
1101:       assertFalse(node0.isDefaultCase());
1102:       assertFalse(node0.isDo());
1103:       assertFalse(node0.isNew());
1104:       assertFalse(node0.isExprResult());
1105:       assertFalse(node0.isAdd());
1106:       assertFalse(node0.isName());
1107:       assertFalse(node0.isOr());
1108:       assertFalse(node0.isNull());
1109:       assertFalse(node0.isTrue());
1110:       assertEquals((-1), node0.getSourcePosition());
1111:       assertFalse(node0.isDec());
1112:       assertFalse(node0.isTypeOf());
1113:       assertFalse(node0.isLabelName());
1114:       assertEquals((-1), node0.getLineno());
1115:       assertFalse(node0.isGetElem());
1116:       assertFalse(node0.hasMoreThanOneChild());
1117:       assertFalse(node0.isCast());
1118:       assertFalse(node0.hasOneChild());
1119:       assertFalse(node0.isContinue());
1120:       assertEquals(39, node0.getType());
1121:       assertFalse(node0.isAssign());
1122:       assertFalse(node0.isLabel());
1123:       assertFalse(node0.isAssignAdd());
1124:       assertFalse(node0.isWhile());
1125:       assertFalse(node0.hasChildren());
1126:       assertFalse(node0.isReturn());
1127:       assertFalse(node0.isScript());
1128:       assertFalse(node0.isAnd());
1129:       assertFalse(node0.isObjectLit());
1130:       assertFalse(node0.isNot());
1131:       assertFalse(node0.isStringKey());
1132:       assertFalse(node0.isSetterDef());
1133:       assertFalse(node0.isCatch());
1134:       assertFalse(node0.isInstanceOf());
1135:       assertFalse(node0.isFalse());
1136:       assertFalse(node0.isThrow());
1137:       assertFalse(node0.isBlock());
1138:       assertFalse(node0.isHook());
1139:       assertFalse(node0.isThis());
1140:       assertFalse(node0.isRegExp());
1141:       assertFalse(node0.isWith());
1142:       assertFalse(node0.isInc());
1143:       assertFalse(node0.isIn());
1144:       assertEquals(4095, Node.COLUMN_MASK);
1145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1146:       assertEquals(36, Node.QUOTED_PROP);
1147:       assertEquals(8, Node.FLAG_NO_THROWS);
1148:       assertEquals(50, Node.FREE_CALL);
1149:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1150:       assertEquals(55, Node.INFERRED_FUNCTION);
1151:       assertEquals(39, Node.EMPTY_BLOCK);
1152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1153:       assertEquals(53, Node.INPUT_ID);
1154:       assertEquals(57, Node.REFLECTED_OBJECT);
1155:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1156:       assertEquals(52, Node.LENGTH);
1157:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1159:       assertEquals(56, Node.CHANGE_TIME);
1160:       assertEquals(49, Node.DIRECT_EVAL);
1161:       assertEquals(48, Node.DIRECTIVES);
1162:       assertEquals(37, Node.OPT_ARG_NAME);
1163:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1164:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1165:       assertEquals(32, Node.INCRDECR_PROP);
1166:       assertEquals(12, Node.COLUMN_BITS);
1167:       assertEquals(46, Node.IS_NAMESPACE);
1168:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1169:       assertEquals(57, Node.LAST_PROP);
1170:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1171:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1172:       assertEquals(1, Node.DECR_FLAG);
1173:       assertEquals(29, Node.JSDOC_INFO_PROP);
1174:       assertEquals(54, Node.SLASH_V);
1175:       assertEquals(43, Node.IS_CONSTANT_NAME);
1176:       assertEquals(47, Node.IS_DISPATCHER);
1177:       assertEquals(30, Node.VAR_ARGS_NAME);
1178:       assertEquals(2, Node.POST_FLAG);
1179:       assertEquals(40, Node.ORIGINALNAME_PROP);
1180:       assertFalse(node0.equals((Object)node1));
1181:       assertTrue(boolean3 == boolean0);
1182:       assertTrue(boolean3 == boolean2);
1183:       assertTrue(boolean3 == boolean1);
1184:       assertFalse(boolean3);
1185:       
1186:       Node node3 = null;
1187:       try {
1188:         node3 = new Node(36, node0, node2, node2, 32, 1);
1189:         fail("Expecting exception: IllegalArgumentException");
1190:       
1191:       } catch(IllegalArgumentException e) {
1192:          //
1193:          // no message in exception (getMessage() returned null)
1194:          //
1195:          verifyException("com.google.common.base.Preconditions", e);
1196:       }
1197:   }
1198: }
RegularFileObject[/tmp/EvoSuite_50_1629222869727/com/google/javascript/rhino/Node_50_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:29 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_50_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_50_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_50_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
332:       "com.google.common.collect.Sets",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.jstype.TemplatizedType",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.Platform",
347:       "com.google.common.collect.Iterators$12",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.javascript.rhino.JSTypeExpression",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 17:54:29.961 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertNotNull(node0);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isDec();
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(boolean0);

Node node1 = new Node(46, node0, node0);
assertNotNull(node1);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isString());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(46, node1.getType());
assertFalse(node1.isDo());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(node1.equals((Object)node0));

Node node2 = node0.clonePropsFrom(node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertNotNull(node2);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isString());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertEquals(46, node1.getType());
assertFalse(node1.isDo());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isDelProp());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isCatch());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertTrue(node2.isNumber());
assertFalse(node2.isParamList());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isSwitch());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNull());
assertFalse(node2.isLabel());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isReturn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertEquals((-1), node2.getSourcePosition());
assertEquals(39, node2.getType());
assertFalse(node2.hasChildren());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean1 = node0.isFromExterns();
assertSame(node0, node2);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

boolean boolean2 = node0.isBreak();
assertSame(node0, node2);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);

boolean boolean3 = node0.isCatch();
assertSame(node0, node2);
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isContinue());
assertEquals(39, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);

Node node3 = new Node(36, node0, node2, node2, 32, 1);

[MASTER] 17:54:41.710 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_106_1629222881584/com/google/javascript/rhino/Node_106_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_106_1629222881584/com/google/javascript/rhino/Node_106_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:41.710 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:41.710 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:41.710 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 230
[MASTER] 17:54:41.711 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_106_1629222881584/com/google/javascript/rhino/Node_106_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_106_tmp__ESTest extends Node_106_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertNotNull(node0);
23:       assertEquals(0, node0.getChildCount());
24:       assertFalse(node0.isParamList());
25:       assertFalse(node0.isNull());
26:       assertFalse(node0.isDefaultCase());
27:       assertFalse(node0.isSetterDef());
28:       assertFalse(node0.isTry());
29:       assertFalse(node0.isName());
30:       assertFalse(node0.isBlock());
31:       assertFalse(node0.isTrue());
32:       assertFalse(node0.isFor());
33:       assertFalse(node0.isIf());
34:       assertFalse(node0.isVoid());
35:       assertFalse(node0.isRegExp());
36:       assertFalse(node0.isDelProp());
37:       assertFalse(node0.isCatch());
38:       assertFalse(node0.isCall());
39:       assertFalse(node0.hasMoreThanOneChild());
40:       assertFalse(node0.isOr());
41:       assertEquals(39, node0.getType());
42:       assertFalse(node0.isLabel());
43:       assertFalse(node0.isAssignAdd());
44:       assertFalse(node0.isGetterDef());
45:       assertFalse(node0.isDo());
46:       assertFalse(node0.isCase());
47:       assertFalse(node0.isNew());
48:       assertFalse(node0.isAdd());
49:       assertFalse(node0.isEmpty());
50:       assertFalse(node0.isArrayLit());
51:       assertFalse(node0.isStringKey());
52:       assertEquals((-1), node0.getCharno());
53:       assertFalse(node0.isVar());
54:       assertFalse(node0.isSwitch());
55:       assertFalse(node0.isLabelName());
56:       assertFalse(node0.isInstanceOf());
57:       assertFalse(node0.isObjectLit());
58:       assertFalse(node0.isAnd());
59:       assertFalse(node0.isThis());
60:       assertFalse(node0.isNot());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isScript());
63:       assertFalse(node0.hasOneChild());
64:       assertFalse(node0.isHook());
65:       assertFalse(node0.isDec());
66:       assertFalse(node0.isTypeOf());
67:       assertFalse(node0.isBreak());
68:       assertFalse(node0.hasChildren());
69:       assertFalse(node0.isComma());
70:       assertFalse(node0.isWith());
71:       assertFalse(node0.isAssign());
72:       assertFalse(node0.isGetElem());
73:       assertFalse(node0.isExprResult());
74:       assertFalse(node0.isIn());
75:       assertEquals((-1), node0.getLineno());
76:       assertTrue(node0.isNumber());
77:       assertFalse(node0.isWhile());
78:       assertFalse(node0.isReturn());
79:       assertFalse(node0.isNE());
80:       assertEquals((-1), node0.getSourcePosition());
81:       assertFalse(node0.isInc());
82:       assertFalse(node0.isString());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isThrow());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isFalse());
87:       assertFalse(node0.isContinue());
88:       assertFalse(node0.isCast());
89:       assertEquals(15, Node.NO_SIDE_EFFECTS);
90:       assertEquals(57, Node.LAST_PROP);
91:       assertEquals(49, Node.DIRECT_EVAL);
92:       assertEquals(30, Node.VAR_ARGS_NAME);
93:       assertEquals(1, Node.DECR_FLAG);
94:       assertEquals(46, Node.IS_NAMESPACE);
95:       assertEquals(52, Node.LENGTH);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(54, Node.SLASH_V);
98:       assertEquals(57, Node.REFLECTED_OBJECT);
99:       assertEquals(56, Node.CHANGE_TIME);
100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
101:       assertEquals(47, Node.IS_DISPATCHER);
102:       assertEquals(2, Node.POST_FLAG);
103:       assertEquals(40, Node.ORIGINALNAME_PROP);
104:       assertEquals(8, Node.FLAG_NO_THROWS);
105:       assertEquals(39, Node.EMPTY_BLOCK);
106:       assertEquals(29, Node.JSDOC_INFO_PROP);
107:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
108:       assertEquals(36, Node.QUOTED_PROP);
109:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
110:       assertEquals(4095, Node.COLUMN_MASK);
111:       assertEquals(53, Node.INPUT_ID);
112:       assertEquals(55, Node.INFERRED_FUNCTION);
113:       assertEquals(48, Node.DIRECTIVES);
114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
115:       assertEquals(43, Node.IS_CONSTANT_NAME);
116:       assertEquals(50, Node.FREE_CALL);
117:       assertEquals(37, Node.OPT_ARG_NAME);
118:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
119:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
122:       assertEquals(32, Node.INCRDECR_PROP);
123:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
124:       assertEquals(12, Node.COLUMN_BITS);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertNotNull(iterable0);
128:       assertEquals(0, node0.getChildCount());
129:       assertFalse(node0.isParamList());
130:       assertFalse(node0.isNull());
131:       assertFalse(node0.isDefaultCase());
132:       assertFalse(node0.isSetterDef());
133:       assertFalse(node0.isTry());
134:       assertFalse(node0.isName());
135:       assertFalse(node0.isBlock());
136:       assertFalse(node0.isTrue());
137:       assertFalse(node0.isFor());
138:       assertFalse(node0.isIf());
139:       assertFalse(node0.isVoid());
140:       assertFalse(node0.isRegExp());
141:       assertFalse(node0.isDelProp());
142:       assertFalse(node0.isCatch());
143:       assertFalse(node0.isCall());
144:       assertFalse(node0.hasMoreThanOneChild());
145:       assertFalse(node0.isOr());
146:       assertEquals(39, node0.getType());
147:       assertFalse(node0.isLabel());
148:       assertFalse(node0.isAssignAdd());
149:       assertFalse(node0.isGetterDef());
150:       assertFalse(node0.isDo());
151:       assertFalse(node0.isCase());
152:       assertFalse(node0.isNew());
153:       assertFalse(node0.isAdd());
154:       assertFalse(node0.isEmpty());
155:       assertFalse(node0.isArrayLit());
156:       assertFalse(node0.isStringKey());
157:       assertEquals((-1), node0.getCharno());
158:       assertFalse(node0.isVar());
159:       assertFalse(node0.isSwitch());
160:       assertFalse(node0.isLabelName());
161:       assertFalse(node0.isInstanceOf());
162:       assertFalse(node0.isObjectLit());
163:       assertFalse(node0.isAnd());
164:       assertFalse(node0.isThis());
165:       assertFalse(node0.isNot());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.isScript());
168:       assertFalse(node0.hasOneChild());
169:       assertFalse(node0.isHook());
170:       assertFalse(node0.isDec());
171:       assertFalse(node0.isTypeOf());
172:       assertFalse(node0.isBreak());
173:       assertFalse(node0.hasChildren());
174:       assertFalse(node0.isComma());
175:       assertFalse(node0.isWith());
176:       assertFalse(node0.isAssign());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.isExprResult());
179:       assertFalse(node0.isIn());
180:       assertEquals((-1), node0.getLineno());
181:       assertTrue(node0.isNumber());
182:       assertFalse(node0.isWhile());
183:       assertFalse(node0.isReturn());
184:       assertFalse(node0.isNE());
185:       assertEquals((-1), node0.getSourcePosition());
186:       assertFalse(node0.isInc());
187:       assertFalse(node0.isString());
188:       assertFalse(node0.isDebugger());
189:       assertFalse(node0.isThrow());
190:       assertFalse(node0.isFunction());
191:       assertFalse(node0.isFalse());
192:       assertFalse(node0.isContinue());
193:       assertFalse(node0.isCast());
194:       assertEquals(15, Node.NO_SIDE_EFFECTS);
195:       assertEquals(57, Node.LAST_PROP);
196:       assertEquals(49, Node.DIRECT_EVAL);
197:       assertEquals(30, Node.VAR_ARGS_NAME);
198:       assertEquals(1, Node.DECR_FLAG);
199:       assertEquals(46, Node.IS_NAMESPACE);
200:       assertEquals(52, Node.LENGTH);
201:       assertEquals(51, Node.STATIC_SOURCE_FILE);
202:       assertEquals(54, Node.SLASH_V);
203:       assertEquals(57, Node.REFLECTED_OBJECT);
204:       assertEquals(56, Node.CHANGE_TIME);
205:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
206:       assertEquals(47, Node.IS_DISPATCHER);
207:       assertEquals(2, Node.POST_FLAG);
208:       assertEquals(40, Node.ORIGINALNAME_PROP);
209:       assertEquals(8, Node.FLAG_NO_THROWS);
210:       assertEquals(39, Node.EMPTY_BLOCK);
211:       assertEquals(29, Node.JSDOC_INFO_PROP);
212:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
213:       assertEquals(36, Node.QUOTED_PROP);
214:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
215:       assertEquals(4095, Node.COLUMN_MASK);
216:       assertEquals(53, Node.INPUT_ID);
217:       assertEquals(55, Node.INFERRED_FUNCTION);
218:       assertEquals(48, Node.DIRECTIVES);
219:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
220:       assertEquals(43, Node.IS_CONSTANT_NAME);
221:       assertEquals(50, Node.FREE_CALL);
222:       assertEquals(37, Node.OPT_ARG_NAME);
223:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
224:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
225:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
226:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
227:       assertEquals(32, Node.INCRDECR_PROP);
228:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
229:       assertEquals(12, Node.COLUMN_BITS);
230:       assertFalse(iterable0.contains(node0));
231:       
232:       boolean boolean0 = node0.isDec();
233:       assertEquals(0, node0.getChildCount());
234:       assertFalse(node0.isParamList());
235:       assertFalse(node0.isNull());
236:       assertFalse(node0.isDefaultCase());
237:       assertFalse(node0.isSetterDef());
238:       assertFalse(node0.isTry());
239:       assertFalse(node0.isName());
240:       assertFalse(node0.isBlock());
241:       assertFalse(node0.isTrue());
242:       assertFalse(node0.isFor());
243:       assertFalse(node0.isIf());
244:       assertFalse(node0.isVoid());
245:       assertFalse(node0.isRegExp());
246:       assertFalse(node0.isDelProp());
247:       assertFalse(node0.isCatch());
248:       assertFalse(node0.isCall());
249:       assertFalse(node0.hasMoreThanOneChild());
250:       assertFalse(node0.isOr());
251:       assertEquals(39, node0.getType());
252:       assertFalse(node0.isLabel());
253:       assertFalse(node0.isAssignAdd());
254:       assertFalse(node0.isGetterDef());
255:       assertFalse(node0.isDo());
256:       assertFalse(node0.isCase());
257:       assertFalse(node0.isNew());
258:       assertFalse(node0.isAdd());
259:       assertFalse(node0.isEmpty());
260:       assertFalse(node0.isArrayLit());
261:       assertFalse(node0.isStringKey());
262:       assertEquals((-1), node0.getCharno());
263:       assertFalse(node0.isVar());
264:       assertFalse(node0.isSwitch());
265:       assertFalse(node0.isLabelName());
266:       assertFalse(node0.isInstanceOf());
267:       assertFalse(node0.isObjectLit());
268:       assertFalse(node0.isAnd());
269:       assertFalse(node0.isThis());
270:       assertFalse(node0.isNot());
271:       assertFalse(node0.isGetProp());
272:       assertFalse(node0.isScript());
273:       assertFalse(node0.hasOneChild());
274:       assertFalse(node0.isHook());
275:       assertFalse(node0.isDec());
276:       assertFalse(node0.isTypeOf());
277:       assertFalse(node0.isBreak());
278:       assertFalse(node0.hasChildren());
279:       assertFalse(node0.isComma());
280:       assertFalse(node0.isWith());
281:       assertFalse(node0.isAssign());
282:       assertFalse(node0.isGetElem());
283:       assertFalse(node0.isExprResult());
284:       assertFalse(node0.isIn());
285:       assertEquals((-1), node0.getLineno());
286:       assertTrue(node0.isNumber());
287:       assertFalse(node0.isWhile());
288:       assertFalse(node0.isReturn());
289:       assertFalse(node0.isNE());
290:       assertEquals((-1), node0.getSourcePosition());
291:       assertFalse(node0.isInc());
292:       assertFalse(node0.isString());
293:       assertFalse(node0.isDebugger());
294:       assertFalse(node0.isThrow());
295:       assertFalse(node0.isFunction());
296:       assertFalse(node0.isFalse());
297:       assertFalse(node0.isContinue());
298:       assertFalse(node0.isCast());
299:       assertEquals(15, Node.NO_SIDE_EFFECTS);
300:       assertEquals(57, Node.LAST_PROP);
301:       assertEquals(49, Node.DIRECT_EVAL);
302:       assertEquals(30, Node.VAR_ARGS_NAME);
303:       assertEquals(1, Node.DECR_FLAG);
304:       assertEquals(46, Node.IS_NAMESPACE);
305:       assertEquals(52, Node.LENGTH);
306:       assertEquals(51, Node.STATIC_SOURCE_FILE);
307:       assertEquals(54, Node.SLASH_V);
308:       assertEquals(57, Node.REFLECTED_OBJECT);
309:       assertEquals(56, Node.CHANGE_TIME);
310:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
311:       assertEquals(47, Node.IS_DISPATCHER);
312:       assertEquals(2, Node.POST_FLAG);
313:       assertEquals(40, Node.ORIGINALNAME_PROP);
314:       assertEquals(8, Node.FLAG_NO_THROWS);
315:       assertEquals(39, Node.EMPTY_BLOCK);
316:       assertEquals(29, Node.JSDOC_INFO_PROP);
317:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
318:       assertEquals(36, Node.QUOTED_PROP);
319:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
320:       assertEquals(4095, Node.COLUMN_MASK);
321:       assertEquals(53, Node.INPUT_ID);
322:       assertEquals(55, Node.INFERRED_FUNCTION);
323:       assertEquals(48, Node.DIRECTIVES);
324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
325:       assertEquals(43, Node.IS_CONSTANT_NAME);
326:       assertEquals(50, Node.FREE_CALL);
327:       assertEquals(37, Node.OPT_ARG_NAME);
328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
329:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
330:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
331:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
332:       assertEquals(32, Node.INCRDECR_PROP);
333:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
334:       assertEquals(12, Node.COLUMN_BITS);
335:       assertFalse(boolean0);
336:       
337:       Node node1 = new Node(15, 0, 48);
338:       assertNotNull(node1);
339:       assertFalse(node1.isScript());
340:       assertFalse(node1.isExprResult());
341:       assertFalse(node1.hasOneChild());
342:       assertFalse(node1.isCast());
343:       assertFalse(node1.isInstanceOf());
344:       assertFalse(node1.isWith());
345:       assertFalse(node1.isAssign());
346:       assertEquals(48, node1.getSourcePosition());
347:       assertFalse(node1.hasChildren());
348:       assertFalse(node1.isComma());
349:       assertFalse(node1.isDec());
350:       assertFalse(node1.isThis());
351:       assertFalse(node1.isNumber());
352:       assertFalse(node1.isLabelName());
353:       assertFalse(node1.isGetProp());
354:       assertFalse(node1.isObjectLit());
355:       assertFalse(node1.isAnd());
356:       assertFalse(node1.isNot());
357:       assertFalse(node1.isSwitch());
358:       assertFalse(node1.isWhile());
359:       assertFalse(node1.isString());
360:       assertFalse(node1.isDo());
361:       assertFalse(node1.isAdd());
362:       assertFalse(node1.isNew());
363:       assertFalse(node1.isVar());
364:       assertFalse(node1.isCall());
365:       assertFalse(node1.isLabel());
366:       assertFalse(node1.isReturn());
367:       assertFalse(node1.isNull());
368:       assertFalse(node1.isTypeOf());
369:       assertEquals(48, node1.getCharno());
370:       assertFalse(node1.isEmpty());
371:       assertFalse(node1.isAssignAdd());
372:       assertFalse(node1.isName());
373:       assertFalse(node1.isDelProp());
374:       assertFalse(node1.isGetElem());
375:       assertFalse(node1.isBreak());
376:       assertFalse(node1.isOr());
377:       assertFalse(node1.isTrue());
378:       assertFalse(node1.isRegExp());
379:       assertFalse(node1.isFunction());
380:       assertFalse(node1.isDefaultCase());
381:       assertFalse(node1.isTry());
382:       assertFalse(node1.isVoid());
383:       assertFalse(node1.isArrayLit());
384:       assertFalse(node1.isCatch());
385:       assertFalse(node1.isFor());
386:       assertEquals(0, node1.getChildCount());
387:       assertFalse(node1.isParamList());
388:       assertEquals(0, node1.getLineno());
389:       assertFalse(node1.isStringKey());
390:       assertFalse(node1.isGetterDef());
391:       assertFalse(node1.isDebugger());
392:       assertFalse(node1.isInc());
393:       assertFalse(node1.isCase());
394:       assertFalse(node1.hasMoreThanOneChild());
395:       assertFalse(node1.isHook());
396:       assertFalse(node1.isContinue());
397:       assertFalse(node1.isThrow());
398:       assertFalse(node1.isBlock());
399:       assertFalse(node1.isFalse());
400:       assertFalse(node1.isNE());
401:       assertFalse(node1.isSetterDef());
402:       assertFalse(node1.isIf());
403:       assertEquals(15, node1.getType());
404:       assertFalse(node1.isIn());
405:       assertEquals(57, Node.REFLECTED_OBJECT);
406:       assertEquals(52, Node.LENGTH);
407:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
408:       assertEquals(50, Node.FREE_CALL);
409:       assertEquals(54, Node.SLASH_V);
410:       assertEquals(15, Node.NO_SIDE_EFFECTS);
411:       assertEquals(57, Node.LAST_PROP);
412:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
413:       assertEquals(8, Node.FLAG_NO_THROWS);
414:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
415:       assertEquals(1, Node.DECR_FLAG);
416:       assertEquals(39, Node.EMPTY_BLOCK);
417:       assertEquals(12, Node.COLUMN_BITS);
418:       assertEquals(32, Node.INCRDECR_PROP);
419:       assertEquals(55, Node.INFERRED_FUNCTION);
420:       assertEquals(4095, Node.COLUMN_MASK);
421:       assertEquals(56, Node.CHANGE_TIME);
422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
424:       assertEquals(48, Node.DIRECTIVES);
425:       assertEquals(49, Node.DIRECT_EVAL);
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
428:       assertEquals(36, Node.QUOTED_PROP);
429:       assertEquals(47, Node.IS_DISPATCHER);
430:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
431:       assertEquals(29, Node.JSDOC_INFO_PROP);
432:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
433:       assertEquals(53, Node.INPUT_ID);
434:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
435:       assertEquals(46, Node.IS_NAMESPACE);
436:       assertEquals(30, Node.VAR_ARGS_NAME);
437:       assertEquals(51, Node.STATIC_SOURCE_FILE);
438:       assertEquals(43, Node.IS_CONSTANT_NAME);
439:       assertEquals(2, Node.POST_FLAG);
440:       assertEquals(40, Node.ORIGINALNAME_PROP);
441:       assertFalse(node1.equals((Object)node0));
442:       
443:       boolean boolean1 = node0.isString();
444:       assertEquals(0, node0.getChildCount());
445:       assertFalse(node0.isParamList());
446:       assertFalse(node0.isNull());
447:       assertFalse(node0.isDefaultCase());
448:       assertFalse(node0.isSetterDef());
449:       assertFalse(node0.isTry());
450:       assertFalse(node0.isName());
451:       assertFalse(node0.isBlock());
452:       assertFalse(node0.isTrue());
453:       assertFalse(node0.isFor());
454:       assertFalse(node0.isIf());
455:       assertFalse(node0.isVoid());
456:       assertFalse(node0.isRegExp());
457:       assertFalse(node0.isDelProp());
458:       assertFalse(node0.isCatch());
459:       assertFalse(node0.isCall());
460:       assertFalse(node0.hasMoreThanOneChild());
461:       assertFalse(node0.isOr());
462:       assertEquals(39, node0.getType());
463:       assertFalse(node0.isLabel());
464:       assertFalse(node0.isAssignAdd());
465:       assertFalse(node0.isGetterDef());
466:       assertFalse(node0.isDo());
467:       assertFalse(node0.isCase());
468:       assertFalse(node0.isNew());
469:       assertFalse(node0.isAdd());
470:       assertFalse(node0.isEmpty());
471:       assertFalse(node0.isArrayLit());
472:       assertFalse(node0.isStringKey());
473:       assertEquals((-1), node0.getCharno());
474:       assertFalse(node0.isVar());
475:       assertFalse(node0.isSwitch());
476:       assertFalse(node0.isLabelName());
477:       assertFalse(node0.isInstanceOf());
478:       assertFalse(node0.isObjectLit());
479:       assertFalse(node0.isAnd());
480:       assertFalse(node0.isThis());
481:       assertFalse(node0.isNot());
482:       assertFalse(node0.isGetProp());
483:       assertFalse(node0.isScript());
484:       assertFalse(node0.hasOneChild());
485:       assertFalse(node0.isHook());
486:       assertFalse(node0.isDec());
487:       assertFalse(node0.isTypeOf());
488:       assertFalse(node0.isBreak());
489:       assertFalse(node0.hasChildren());
490:       assertFalse(node0.isComma());
491:       assertFalse(node0.isWith());
492:       assertFalse(node0.isAssign());
493:       assertFalse(node0.isGetElem());
494:       assertFalse(node0.isExprResult());
495:       assertFalse(node0.isIn());
496:       assertEquals((-1), node0.getLineno());
497:       assertTrue(node0.isNumber());
498:       assertFalse(node0.isWhile());
499:       assertFalse(node0.isReturn());
500:       assertFalse(node0.isNE());
501:       assertEquals((-1), node0.getSourcePosition());
502:       assertFalse(node0.isInc());
503:       assertFalse(node0.isString());
504:       assertFalse(node0.isDebugger());
505:       assertFalse(node0.isThrow());
506:       assertFalse(node0.isFunction());
507:       assertFalse(node0.isFalse());
508:       assertFalse(node0.isContinue());
509:       assertFalse(node0.isCast());
510:       assertEquals(15, Node.NO_SIDE_EFFECTS);
511:       assertEquals(57, Node.LAST_PROP);
512:       assertEquals(49, Node.DIRECT_EVAL);
513:       assertEquals(30, Node.VAR_ARGS_NAME);
514:       assertEquals(1, Node.DECR_FLAG);
515:       assertEquals(46, Node.IS_NAMESPACE);
516:       assertEquals(52, Node.LENGTH);
517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
518:       assertEquals(54, Node.SLASH_V);
519:       assertEquals(57, Node.REFLECTED_OBJECT);
520:       assertEquals(56, Node.CHANGE_TIME);
521:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
522:       assertEquals(47, Node.IS_DISPATCHER);
523:       assertEquals(2, Node.POST_FLAG);
524:       assertEquals(40, Node.ORIGINALNAME_PROP);
525:       assertEquals(8, Node.FLAG_NO_THROWS);
526:       assertEquals(39, Node.EMPTY_BLOCK);
527:       assertEquals(29, Node.JSDOC_INFO_PROP);
528:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
529:       assertEquals(36, Node.QUOTED_PROP);
530:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
531:       assertEquals(4095, Node.COLUMN_MASK);
532:       assertEquals(53, Node.INPUT_ID);
533:       assertEquals(55, Node.INFERRED_FUNCTION);
534:       assertEquals(48, Node.DIRECTIVES);
535:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
536:       assertEquals(43, Node.IS_CONSTANT_NAME);
537:       assertEquals(50, Node.FREE_CALL);
538:       assertEquals(37, Node.OPT_ARG_NAME);
539:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
540:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
541:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
542:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
543:       assertEquals(32, Node.INCRDECR_PROP);
544:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
545:       assertEquals(12, Node.COLUMN_BITS);
546:       assertFalse(node0.equals((Object)node1));
547:       assertTrue(boolean1 == boolean0);
548:       assertFalse(boolean1);
549:       
550:       boolean boolean2 = node0.isBreak();
551:       assertEquals(0, node0.getChildCount());
552:       assertFalse(node0.isParamList());
553:       assertFalse(node0.isNull());
554:       assertFalse(node0.isDefaultCase());
555:       assertFalse(node0.isSetterDef());
556:       assertFalse(node0.isTry());
557:       assertFalse(node0.isName());
558:       assertFalse(node0.isBlock());
559:       assertFalse(node0.isTrue());
560:       assertFalse(node0.isFor());
561:       assertFalse(node0.isIf());
562:       assertFalse(node0.isVoid());
563:       assertFalse(node0.isRegExp());
564:       assertFalse(node0.isDelProp());
565:       assertFalse(node0.isCatch());
566:       assertFalse(node0.isCall());
567:       assertFalse(node0.hasMoreThanOneChild());
568:       assertFalse(node0.isOr());
569:       assertEquals(39, node0.getType());
570:       assertFalse(node0.isLabel());
571:       assertFalse(node0.isAssignAdd());
572:       assertFalse(node0.isGetterDef());
573:       assertFalse(node0.isDo());
574:       assertFalse(node0.isCase());
575:       assertFalse(node0.isNew());
576:       assertFalse(node0.isAdd());
577:       assertFalse(node0.isEmpty());
578:       assertFalse(node0.isArrayLit());
579:       assertFalse(node0.isStringKey());
580:       assertEquals((-1), node0.getCharno());
581:       assertFalse(node0.isVar());
582:       assertFalse(node0.isSwitch());
583:       assertFalse(node0.isLabelName());
584:       assertFalse(node0.isInstanceOf());
585:       assertFalse(node0.isObjectLit());
586:       assertFalse(node0.isAnd());
587:       assertFalse(node0.isThis());
588:       assertFalse(node0.isNot());
589:       assertFalse(node0.isGetProp());
590:       assertFalse(node0.isScript());
591:       assertFalse(node0.hasOneChild());
592:       assertFalse(node0.isHook());
593:       assertFalse(node0.isDec());
594:       assertFalse(node0.isTypeOf());
595:       assertFalse(node0.isBreak());
596:       assertFalse(node0.hasChildren());
597:       assertFalse(node0.isComma());
598:       assertFalse(node0.isWith());
599:       assertFalse(node0.isAssign());
600:       assertFalse(node0.isGetElem());
601:       assertFalse(node0.isExprResult());
602:       assertFalse(node0.isIn());
603:       assertEquals((-1), node0.getLineno());
604:       assertTrue(node0.isNumber());
605:       assertFalse(node0.isWhile());
606:       assertFalse(node0.isReturn());
607:       assertFalse(node0.isNE());
608:       assertEquals((-1), node0.getSourcePosition());
609:       assertFalse(node0.isInc());
610:       assertFalse(node0.isString());
611:       assertFalse(node0.isDebugger());
612:       assertFalse(node0.isThrow());
613:       assertFalse(node0.isFunction());
614:       assertFalse(node0.isFalse());
615:       assertFalse(node0.isContinue());
616:       assertFalse(node0.isCast());
617:       assertEquals(15, Node.NO_SIDE_EFFECTS);
618:       assertEquals(57, Node.LAST_PROP);
619:       assertEquals(49, Node.DIRECT_EVAL);
620:       assertEquals(30, Node.VAR_ARGS_NAME);
621:       assertEquals(1, Node.DECR_FLAG);
622:       assertEquals(46, Node.IS_NAMESPACE);
623:       assertEquals(52, Node.LENGTH);
624:       assertEquals(51, Node.STATIC_SOURCE_FILE);
625:       assertEquals(54, Node.SLASH_V);
626:       assertEquals(57, Node.REFLECTED_OBJECT);
627:       assertEquals(56, Node.CHANGE_TIME);
628:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
629:       assertEquals(47, Node.IS_DISPATCHER);
630:       assertEquals(2, Node.POST_FLAG);
631:       assertEquals(40, Node.ORIGINALNAME_PROP);
632:       assertEquals(8, Node.FLAG_NO_THROWS);
633:       assertEquals(39, Node.EMPTY_BLOCK);
634:       assertEquals(29, Node.JSDOC_INFO_PROP);
635:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
636:       assertEquals(36, Node.QUOTED_PROP);
637:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
638:       assertEquals(4095, Node.COLUMN_MASK);
639:       assertEquals(53, Node.INPUT_ID);
640:       assertEquals(55, Node.INFERRED_FUNCTION);
641:       assertEquals(48, Node.DIRECTIVES);
642:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
643:       assertEquals(43, Node.IS_CONSTANT_NAME);
644:       assertEquals(50, Node.FREE_CALL);
645:       assertEquals(37, Node.OPT_ARG_NAME);
646:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
647:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
648:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
649:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
650:       assertEquals(32, Node.INCRDECR_PROP);
651:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
652:       assertEquals(12, Node.COLUMN_BITS);
653:       assertFalse(node0.equals((Object)node1));
654:       assertTrue(boolean2 == boolean0);
655:       assertTrue(boolean2 == boolean1);
656:       assertFalse(boolean2);
657:       
658:       boolean boolean3 = node0.isCatch();
659:       assertEquals(0, node0.getChildCount());
660:       assertFalse(node0.isParamList());
661:       assertFalse(node0.isNull());
662:       assertFalse(node0.isDefaultCase());
663:       assertFalse(node0.isSetterDef());
664:       assertFalse(node0.isTry());
665:       assertFalse(node0.isName());
666:       assertFalse(node0.isBlock());
667:       assertFalse(node0.isTrue());
668:       assertFalse(node0.isFor());
669:       assertFalse(node0.isIf());
670:       assertFalse(node0.isVoid());
671:       assertFalse(node0.isRegExp());
672:       assertFalse(node0.isDelProp());
673:       assertFalse(node0.isCatch());
674:       assertFalse(node0.isCall());
675:       assertFalse(node0.hasMoreThanOneChild());
676:       assertFalse(node0.isOr());
677:       assertEquals(39, node0.getType());
678:       assertFalse(node0.isLabel());
679:       assertFalse(node0.isAssignAdd());
680:       assertFalse(node0.isGetterDef());
681:       assertFalse(node0.isDo());
682:       assertFalse(node0.isCase());
683:       assertFalse(node0.isNew());
684:       assertFalse(node0.isAdd());
685:       assertFalse(node0.isEmpty());
686:       assertFalse(node0.isArrayLit());
687:       assertFalse(node0.isStringKey());
688:       assertEquals((-1), node0.getCharno());
689:       assertFalse(node0.isVar());
690:       assertFalse(node0.isSwitch());
691:       assertFalse(node0.isLabelName());
692:       assertFalse(node0.isInstanceOf());
693:       assertFalse(node0.isObjectLit());
694:       assertFalse(node0.isAnd());
695:       assertFalse(node0.isThis());
696:       assertFalse(node0.isNot());
697:       assertFalse(node0.isGetProp());
698:       assertFalse(node0.isScript());
699:       assertFalse(node0.hasOneChild());
700:       assertFalse(node0.isHook());
701:       assertFalse(node0.isDec());
702:       assertFalse(node0.isTypeOf());
703:       assertFalse(node0.isBreak());
704:       assertFalse(node0.hasChildren());
705:       assertFalse(node0.isComma());
706:       assertFalse(node0.isWith());
707:       assertFalse(node0.isAssign());
708:       assertFalse(node0.isGetElem());
709:       assertFalse(node0.isExprResult());
710:       assertFalse(node0.isIn());
711:       assertEquals((-1), node0.getLineno());
712:       assertTrue(node0.isNumber());
713:       assertFalse(node0.isWhile());
714:       assertFalse(node0.isReturn());
715:       assertFalse(node0.isNE());
716:       assertEquals((-1), node0.getSourcePosition());
717:       assertFalse(node0.isInc());
718:       assertFalse(node0.isString());
719:       assertFalse(node0.isDebugger());
720:       assertFalse(node0.isThrow());
721:       assertFalse(node0.isFunction());
722:       assertFalse(node0.isFalse());
723:       assertFalse(node0.isContinue());
724:       assertFalse(node0.isCast());
725:       assertEquals(15, Node.NO_SIDE_EFFECTS);
726:       assertEquals(57, Node.LAST_PROP);
727:       assertEquals(49, Node.DIRECT_EVAL);
728:       assertEquals(30, Node.VAR_ARGS_NAME);
729:       assertEquals(1, Node.DECR_FLAG);
730:       assertEquals(46, Node.IS_NAMESPACE);
731:       assertEquals(52, Node.LENGTH);
732:       assertEquals(51, Node.STATIC_SOURCE_FILE);
733:       assertEquals(54, Node.SLASH_V);
734:       assertEquals(57, Node.REFLECTED_OBJECT);
735:       assertEquals(56, Node.CHANGE_TIME);
736:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
737:       assertEquals(47, Node.IS_DISPATCHER);
738:       assertEquals(2, Node.POST_FLAG);
739:       assertEquals(40, Node.ORIGINALNAME_PROP);
740:       assertEquals(8, Node.FLAG_NO_THROWS);
741:       assertEquals(39, Node.EMPTY_BLOCK);
742:       assertEquals(29, Node.JSDOC_INFO_PROP);
743:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
744:       assertEquals(36, Node.QUOTED_PROP);
745:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
746:       assertEquals(4095, Node.COLUMN_MASK);
747:       assertEquals(53, Node.INPUT_ID);
748:       assertEquals(55, Node.INFERRED_FUNCTION);
749:       assertEquals(48, Node.DIRECTIVES);
750:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
751:       assertEquals(43, Node.IS_CONSTANT_NAME);
752:       assertEquals(50, Node.FREE_CALL);
753:       assertEquals(37, Node.OPT_ARG_NAME);
754:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
755:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
756:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
757:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
758:       assertEquals(32, Node.INCRDECR_PROP);
759:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
760:       assertEquals(12, Node.COLUMN_BITS);
761:       assertFalse(node0.equals((Object)node1));
762:       assertTrue(boolean3 == boolean2);
763:       assertTrue(boolean3 == boolean1);
764:       assertTrue(boolean3 == boolean0);
765:       assertFalse(boolean3);
766:       
767:       Node node2 = Node.newNumber(0.0, 52, 46);
768:       assertNotSame(node2, node0);
769:       assertNotNull(node2);
770:       assertFalse(node2.isAdd());
771:       assertFalse(node2.isVar());
772:       assertFalse(node2.isBlock());
773:       assertFalse(node2.isCall());
774:       assertFalse(node2.isWhile());
775:       assertEquals(39, node2.getType());
776:       assertFalse(node2.isSetterDef());
777:       assertFalse(node2.isNew());
778:       assertFalse(node2.isDo());
779:       assertFalse(node2.isCatch());
780:       assertFalse(node2.isReturn());
781:       assertFalse(node2.hasMoreThanOneChild());
782:       assertFalse(node2.isOr());
783:       assertFalse(node2.isTypeOf());
784:       assertFalse(node2.isNull());
785:       assertFalse(node2.isTrue());
786:       assertFalse(node2.isGetElem());
787:       assertFalse(node2.isVoid());
788:       assertFalse(node2.isName());
789:       assertFalse(node2.isCast());
790:       assertFalse(node2.isDebugger());
791:       assertFalse(node2.isAssign());
792:       assertFalse(node2.isFunction());
793:       assertFalse(node2.hasChildren());
794:       assertFalse(node2.isDec());
795:       assertTrue(node2.isNumber());
796:       assertFalse(node2.isContinue());
797:       assertEquals(46, node2.getCharno());
798:       assertFalse(node2.isNot());
799:       assertFalse(node2.isObjectLit());
800:       assertFalse(node2.isAnd());
801:       assertFalse(node2.isHook());
802:       assertFalse(node2.isFalse());
803:       assertFalse(node2.isString());
804:       assertFalse(node2.isInc());
805:       assertFalse(node2.isThis());
806:       assertFalse(node2.isThrow());
807:       assertFalse(node2.isGetProp());
808:       assertFalse(node2.isCase());
809:       assertFalse(node2.isIn());
810:       assertFalse(node2.isInstanceOf());
811:       assertFalse(node2.isComma());
812:       assertFalse(node2.isWith());
813:       assertFalse(node2.isIf());
814:       assertFalse(node2.isBreak());
815:       assertFalse(node2.isNE());
816:       assertEquals(213038, node2.getSourcePosition());
817:       assertFalse(node2.isExprResult());
818:       assertFalse(node2.isDelProp());
819:       assertFalse(node2.hasOneChild());
820:       assertFalse(node2.isArrayLit());
821:       assertEquals(52, node2.getLineno());
822:       assertFalse(node2.isRegExp());
823:       assertFalse(node2.isDefaultCase());
824:       assertFalse(node2.isFor());
825:       assertFalse(node2.isScript());
826:       assertFalse(node2.isEmpty());
827:       assertFalse(node2.isTry());
828:       assertFalse(node2.isAssignAdd());
829:       assertEquals(0, node2.getChildCount());
830:       assertFalse(node2.isLabel());
831:       assertFalse(node2.isGetterDef());
832:       assertFalse(node2.isParamList());
833:       assertFalse(node2.isStringKey());
834:       assertFalse(node2.isLabelName());
835:       assertFalse(node2.isSwitch());
836:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
837:       assertEquals(56, Node.CHANGE_TIME);
838:       assertEquals(47, Node.IS_DISPATCHER);
839:       assertEquals(29, Node.JSDOC_INFO_PROP);
840:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
841:       assertEquals(37, Node.OPT_ARG_NAME);
842:       assertEquals(46, Node.IS_NAMESPACE);
843:       assertEquals(53, Node.INPUT_ID);
844:       assertEquals(51, Node.STATIC_SOURCE_FILE);
845:       assertEquals(36, Node.QUOTED_PROP);
846:       assertEquals(30, Node.VAR_ARGS_NAME);
847:       assertEquals(15, Node.NO_SIDE_EFFECTS);
848:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
849:       assertEquals(43, Node.IS_CONSTANT_NAME);
850:       assertEquals(57, Node.LAST_PROP);
851:       assertEquals(2, Node.POST_FLAG);
852:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
853:       assertEquals(40, Node.ORIGINALNAME_PROP);
854:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
855:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
856:       assertEquals(39, Node.EMPTY_BLOCK);
857:       assertEquals(48, Node.DIRECTIVES);
858:       assertEquals(52, Node.LENGTH);
859:       assertEquals(57, Node.REFLECTED_OBJECT);
860:       assertEquals(54, Node.SLASH_V);
861:       assertEquals(55, Node.INFERRED_FUNCTION);
862:       assertEquals(8, Node.FLAG_NO_THROWS);
863:       assertEquals(50, Node.FREE_CALL);
864:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
865:       assertEquals(1, Node.DECR_FLAG);
866:       assertEquals(49, Node.DIRECT_EVAL);
867:       assertEquals(32, Node.INCRDECR_PROP);
868:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
869:       assertEquals(12, Node.COLUMN_BITS);
870:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
871:       assertEquals(4095, Node.COLUMN_MASK);
872:       assertFalse(node2.equals((Object)node0));
873:       assertFalse(node2.equals((Object)node1));
874:       
875:       try { 
876:         node2.getString();
877:         fail("Expecting exception: UnsupportedOperationException");
878:       
879:       } catch(UnsupportedOperationException e) {
880:          //
881:          // NUMBER 0.0 52 is not a string node
882:          //
883:          verifyException("com.google.javascript.rhino.Node", e);
884:       }
885:   }
886: }
RegularFileObject[/tmp/EvoSuite_106_1629222881584/com/google/javascript/rhino/Node_106_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_106_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_106_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_106_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
332:       "com.google.common.collect.Sets",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.jstype.TemplatizedType",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.Platform",
347:       "com.google.common.collect.Iterators$12",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.javascript.rhino.JSTypeExpression",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 17:54:41.840 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertNotNull(node0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isDec();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(boolean0);

Node node1 = new Node(15, 0, 48);
assertNotNull(node1);
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isAssign());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertEquals(48, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertEquals(0, node1.getLineno());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertEquals(15, node1.getType());
assertFalse(node1.isIn());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.equals((Object)node0));

boolean boolean1 = node0.isString();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

boolean boolean2 = node0.isBreak();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);

boolean boolean3 = node0.isCatch();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDelProp());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3);

Node node2 = Node.newNumber(0.0, 52, 46);
assertNotSame(node2, node0);
assertNotNull(node2);
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isWhile());
assertEquals(39, node2.getType());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isCatch());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isGetElem());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isFunction());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertTrue(node2.isNumber());
assertFalse(node2.isContinue());
assertEquals(46, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isIf());
assertFalse(node2.isBreak());
assertFalse(node2.isNE());
assertEquals(213038, node2.getSourcePosition());
assertFalse(node2.isExprResult());
assertFalse(node2.isDelProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertEquals(52, node2.getLineno());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFor());
assertFalse(node2.isScript());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

node2.getString();

[MASTER] 17:54:56.605 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_147_1629222896054/com/google/javascript/rhino/Node_147_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_147_1629222896054/com/google/javascript/rhino/Node_147_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:56.606 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:56.606 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:56.607 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 230
[MASTER] 17:54:56.609 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_147_1629222896054/com/google/javascript/rhino/Node_147_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:56 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.Set;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_147_tmp__ESTest extends Node_147_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(25.14468128968887);
22:       assertNotNull(node0);
23:       assertFalse(node0.isExprResult());
24:       assertFalse(node0.isScript());
25:       assertFalse(node0.isCast());
26:       assertFalse(node0.isWith());
27:       assertFalse(node0.isAssign());
28:       assertFalse(node0.hasChildren());
29:       assertFalse(node0.hasOneChild());
30:       assertFalse(node0.isOr());
31:       assertFalse(node0.isComma());
32:       assertEquals((-1), node0.getLineno());
33:       assertFalse(node0.isThis());
34:       assertFalse(node0.isReturn());
35:       assertFalse(node0.isTypeOf());
36:       assertFalse(node0.isInstanceOf());
37:       assertFalse(node0.isDec());
38:       assertFalse(node0.hasMoreThanOneChild());
39:       assertFalse(node0.isGetElem());
40:       assertFalse(node0.isBreak());
41:       assertFalse(node0.isInc());
42:       assertFalse(node0.isString());
43:       assertFalse(node0.isFalse());
44:       assertFalse(node0.isThrow());
45:       assertFalse(node0.isWhile());
46:       assertTrue(node0.isNumber());
47:       assertFalse(node0.isGetProp());
48:       assertEquals((-1), node0.getSourcePosition());
49:       assertFalse(node0.isContinue());
50:       assertFalse(node0.isObjectLit());
51:       assertFalse(node0.isNot());
52:       assertFalse(node0.isAnd());
53:       assertFalse(node0.isVoid());
54:       assertFalse(node0.isTry());
55:       assertFalse(node0.isTrue());
56:       assertFalse(node0.isDebugger());
57:       assertFalse(node0.isRegExp());
58:       assertFalse(node0.isFunction());
59:       assertFalse(node0.isFor());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isDefaultCase());
62:       assertFalse(node0.isSetterDef());
63:       assertFalse(node0.isCatch());
64:       assertFalse(node0.isIn());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isCall());
67:       assertFalse(node0.isNull());
68:       assertFalse(node0.isNE());
69:       assertFalse(node0.isDelProp());
70:       assertFalse(node0.isIf());
71:       assertFalse(node0.isBlock());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.isNew());
74:       assertFalse(node0.isHook());
75:       assertEquals((-1), node0.getCharno());
76:       assertFalse(node0.isCase());
77:       assertFalse(node0.isDo());
78:       assertEquals(39, node0.getType());
79:       assertFalse(node0.isVar());
80:       assertFalse(node0.isAssignAdd());
81:       assertFalse(node0.isLabel());
82:       assertEquals(0, node0.getChildCount());
83:       assertFalse(node0.isGetterDef());
84:       assertFalse(node0.isStringKey());
85:       assertFalse(node0.isLabelName());
86:       assertFalse(node0.isArrayLit());
87:       assertFalse(node0.isParamList());
88:       assertFalse(node0.isSwitch());
89:       assertEquals(40, Node.ORIGINALNAME_PROP);
90:       assertEquals(57, Node.REFLECTED_OBJECT);
91:       assertEquals(54, Node.SLASH_V);
92:       assertEquals(15, Node.NO_SIDE_EFFECTS);
93:       assertEquals(39, Node.EMPTY_BLOCK);
94:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
95:       assertEquals(50, Node.FREE_CALL);
96:       assertEquals(52, Node.LENGTH);
97:       assertEquals(8, Node.FLAG_NO_THROWS);
98:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
99:       assertEquals(55, Node.INFERRED_FUNCTION);
100:       assertEquals(57, Node.LAST_PROP);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(43, Node.IS_CONSTANT_NAME);
103:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
104:       assertEquals(47, Node.IS_DISPATCHER);
105:       assertEquals(30, Node.VAR_ARGS_NAME);
106:       assertEquals(2, Node.POST_FLAG);
107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
108:       assertEquals(29, Node.JSDOC_INFO_PROP);
109:       assertEquals(56, Node.CHANGE_TIME);
110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
111:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
112:       assertEquals(53, Node.INPUT_ID);
113:       assertEquals(51, Node.STATIC_SOURCE_FILE);
114:       assertEquals(36, Node.QUOTED_PROP);
115:       assertEquals(1, Node.DECR_FLAG);
116:       assertEquals(12, Node.COLUMN_BITS);
117:       assertEquals(32, Node.INCRDECR_PROP);
118:       assertEquals(49, Node.DIRECT_EVAL);
119:       assertEquals(37, Node.OPT_ARG_NAME);
120:       assertEquals(48, Node.DIRECTIVES);
121:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
122:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
123:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
124:       assertEquals(4095, Node.COLUMN_MASK);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertNotNull(iterable0);
128:       assertFalse(node0.isExprResult());
129:       assertFalse(node0.isScript());
130:       assertFalse(node0.isCast());
131:       assertFalse(node0.isWith());
132:       assertFalse(node0.isAssign());
133:       assertFalse(node0.hasChildren());
134:       assertFalse(node0.hasOneChild());
135:       assertFalse(node0.isOr());
136:       assertFalse(node0.isComma());
137:       assertEquals((-1), node0.getLineno());
138:       assertFalse(node0.isThis());
139:       assertFalse(node0.isReturn());
140:       assertFalse(node0.isTypeOf());
141:       assertFalse(node0.isInstanceOf());
142:       assertFalse(node0.isDec());
143:       assertFalse(node0.hasMoreThanOneChild());
144:       assertFalse(node0.isGetElem());
145:       assertFalse(node0.isBreak());
146:       assertFalse(node0.isInc());
147:       assertFalse(node0.isString());
148:       assertFalse(node0.isFalse());
149:       assertFalse(node0.isThrow());
150:       assertFalse(node0.isWhile());
151:       assertTrue(node0.isNumber());
152:       assertFalse(node0.isGetProp());
153:       assertEquals((-1), node0.getSourcePosition());
154:       assertFalse(node0.isContinue());
155:       assertFalse(node0.isObjectLit());
156:       assertFalse(node0.isNot());
157:       assertFalse(node0.isAnd());
158:       assertFalse(node0.isVoid());
159:       assertFalse(node0.isTry());
160:       assertFalse(node0.isTrue());
161:       assertFalse(node0.isDebugger());
162:       assertFalse(node0.isRegExp());
163:       assertFalse(node0.isFunction());
164:       assertFalse(node0.isFor());
165:       assertFalse(node0.isEmpty());
166:       assertFalse(node0.isDefaultCase());
167:       assertFalse(node0.isSetterDef());
168:       assertFalse(node0.isCatch());
169:       assertFalse(node0.isIn());
170:       assertFalse(node0.isName());
171:       assertFalse(node0.isCall());
172:       assertFalse(node0.isNull());
173:       assertFalse(node0.isNE());
174:       assertFalse(node0.isDelProp());
175:       assertFalse(node0.isIf());
176:       assertFalse(node0.isBlock());
177:       assertFalse(node0.isAdd());
178:       assertFalse(node0.isNew());
179:       assertFalse(node0.isHook());
180:       assertEquals((-1), node0.getCharno());
181:       assertFalse(node0.isCase());
182:       assertFalse(node0.isDo());
183:       assertEquals(39, node0.getType());
184:       assertFalse(node0.isVar());
185:       assertFalse(node0.isAssignAdd());
186:       assertFalse(node0.isLabel());
187:       assertEquals(0, node0.getChildCount());
188:       assertFalse(node0.isGetterDef());
189:       assertFalse(node0.isStringKey());
190:       assertFalse(node0.isLabelName());
191:       assertFalse(node0.isArrayLit());
192:       assertFalse(node0.isParamList());
193:       assertFalse(node0.isSwitch());
194:       assertEquals(40, Node.ORIGINALNAME_PROP);
195:       assertEquals(57, Node.REFLECTED_OBJECT);
196:       assertEquals(54, Node.SLASH_V);
197:       assertEquals(15, Node.NO_SIDE_EFFECTS);
198:       assertEquals(39, Node.EMPTY_BLOCK);
199:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
200:       assertEquals(50, Node.FREE_CALL);
201:       assertEquals(52, Node.LENGTH);
202:       assertEquals(8, Node.FLAG_NO_THROWS);
203:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
204:       assertEquals(55, Node.INFERRED_FUNCTION);
205:       assertEquals(57, Node.LAST_PROP);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(43, Node.IS_CONSTANT_NAME);
208:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
209:       assertEquals(47, Node.IS_DISPATCHER);
210:       assertEquals(30, Node.VAR_ARGS_NAME);
211:       assertEquals(2, Node.POST_FLAG);
212:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
213:       assertEquals(29, Node.JSDOC_INFO_PROP);
214:       assertEquals(56, Node.CHANGE_TIME);
215:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
216:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
217:       assertEquals(53, Node.INPUT_ID);
218:       assertEquals(51, Node.STATIC_SOURCE_FILE);
219:       assertEquals(36, Node.QUOTED_PROP);
220:       assertEquals(1, Node.DECR_FLAG);
221:       assertEquals(12, Node.COLUMN_BITS);
222:       assertEquals(32, Node.INCRDECR_PROP);
223:       assertEquals(49, Node.DIRECT_EVAL);
224:       assertEquals(37, Node.OPT_ARG_NAME);
225:       assertEquals(48, Node.DIRECTIVES);
226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
227:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
228:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
229:       assertEquals(4095, Node.COLUMN_MASK);
230:       assertFalse(iterable0.contains(node0));
231:       
232:       boolean boolean0 = node0.isDec();
233:       assertFalse(node0.isExprResult());
234:       assertFalse(node0.isScript());
235:       assertFalse(node0.isCast());
236:       assertFalse(node0.isWith());
237:       assertFalse(node0.isAssign());
238:       assertFalse(node0.hasChildren());
239:       assertFalse(node0.hasOneChild());
240:       assertFalse(node0.isOr());
241:       assertFalse(node0.isComma());
242:       assertEquals((-1), node0.getLineno());
243:       assertFalse(node0.isThis());
244:       assertFalse(node0.isReturn());
245:       assertFalse(node0.isTypeOf());
246:       assertFalse(node0.isInstanceOf());
247:       assertFalse(node0.isDec());
248:       assertFalse(node0.hasMoreThanOneChild());
249:       assertFalse(node0.isGetElem());
250:       assertFalse(node0.isBreak());
251:       assertFalse(node0.isInc());
252:       assertFalse(node0.isString());
253:       assertFalse(node0.isFalse());
254:       assertFalse(node0.isThrow());
255:       assertFalse(node0.isWhile());
256:       assertTrue(node0.isNumber());
257:       assertFalse(node0.isGetProp());
258:       assertEquals((-1), node0.getSourcePosition());
259:       assertFalse(node0.isContinue());
260:       assertFalse(node0.isObjectLit());
261:       assertFalse(node0.isNot());
262:       assertFalse(node0.isAnd());
263:       assertFalse(node0.isVoid());
264:       assertFalse(node0.isTry());
265:       assertFalse(node0.isTrue());
266:       assertFalse(node0.isDebugger());
267:       assertFalse(node0.isRegExp());
268:       assertFalse(node0.isFunction());
269:       assertFalse(node0.isFor());
270:       assertFalse(node0.isEmpty());
271:       assertFalse(node0.isDefaultCase());
272:       assertFalse(node0.isSetterDef());
273:       assertFalse(node0.isCatch());
274:       assertFalse(node0.isIn());
275:       assertFalse(node0.isName());
276:       assertFalse(node0.isCall());
277:       assertFalse(node0.isNull());
278:       assertFalse(node0.isNE());
279:       assertFalse(node0.isDelProp());
280:       assertFalse(node0.isIf());
281:       assertFalse(node0.isBlock());
282:       assertFalse(node0.isAdd());
283:       assertFalse(node0.isNew());
284:       assertFalse(node0.isHook());
285:       assertEquals((-1), node0.getCharno());
286:       assertFalse(node0.isCase());
287:       assertFalse(node0.isDo());
288:       assertEquals(39, node0.getType());
289:       assertFalse(node0.isVar());
290:       assertFalse(node0.isAssignAdd());
291:       assertFalse(node0.isLabel());
292:       assertEquals(0, node0.getChildCount());
293:       assertFalse(node0.isGetterDef());
294:       assertFalse(node0.isStringKey());
295:       assertFalse(node0.isLabelName());
296:       assertFalse(node0.isArrayLit());
297:       assertFalse(node0.isParamList());
298:       assertFalse(node0.isSwitch());
299:       assertEquals(40, Node.ORIGINALNAME_PROP);
300:       assertEquals(57, Node.REFLECTED_OBJECT);
301:       assertEquals(54, Node.SLASH_V);
302:       assertEquals(15, Node.NO_SIDE_EFFECTS);
303:       assertEquals(39, Node.EMPTY_BLOCK);
304:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
305:       assertEquals(50, Node.FREE_CALL);
306:       assertEquals(52, Node.LENGTH);
307:       assertEquals(8, Node.FLAG_NO_THROWS);
308:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
309:       assertEquals(55, Node.INFERRED_FUNCTION);
310:       assertEquals(57, Node.LAST_PROP);
311:       assertEquals(46, Node.IS_NAMESPACE);
312:       assertEquals(43, Node.IS_CONSTANT_NAME);
313:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
314:       assertEquals(47, Node.IS_DISPATCHER);
315:       assertEquals(30, Node.VAR_ARGS_NAME);
316:       assertEquals(2, Node.POST_FLAG);
317:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
318:       assertEquals(29, Node.JSDOC_INFO_PROP);
319:       assertEquals(56, Node.CHANGE_TIME);
320:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
321:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
322:       assertEquals(53, Node.INPUT_ID);
323:       assertEquals(51, Node.STATIC_SOURCE_FILE);
324:       assertEquals(36, Node.QUOTED_PROP);
325:       assertEquals(1, Node.DECR_FLAG);
326:       assertEquals(12, Node.COLUMN_BITS);
327:       assertEquals(32, Node.INCRDECR_PROP);
328:       assertEquals(49, Node.DIRECT_EVAL);
329:       assertEquals(37, Node.OPT_ARG_NAME);
330:       assertEquals(48, Node.DIRECTIVES);
331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
332:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
333:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
334:       assertEquals(4095, Node.COLUMN_MASK);
335:       assertFalse(boolean0);
336:       
337:       Node node1 = new Node(15, 0, 48);
338:       assertNotNull(node1);
339:       assertFalse(node1.isExprResult());
340:       assertFalse(node1.isScript());
341:       assertFalse(node1.hasOneChild());
342:       assertFalse(node1.isObjectLit());
343:       assertFalse(node1.isAnd());
344:       assertFalse(node1.isNot());
345:       assertFalse(node1.isComma());
346:       assertFalse(node1.isThis());
347:       assertFalse(node1.isTypeOf());
348:       assertFalse(node1.isNumber());
349:       assertFalse(node1.isGetProp());
350:       assertFalse(node1.isGetElem());
351:       assertFalse(node1.isBreak());
352:       assertFalse(node1.hasMoreThanOneChild());
353:       assertFalse(node1.isInstanceOf());
354:       assertFalse(node1.isWhile());
355:       assertFalse(node1.isWith());
356:       assertFalse(node1.isReturn());
357:       assertFalse(node1.isAssign());
358:       assertFalse(node1.isHook());
359:       assertFalse(node1.isDec());
360:       assertFalse(node1.hasChildren());
361:       assertFalse(node1.isInc());
362:       assertFalse(node1.isString());
363:       assertFalse(node1.isIn());
364:       assertFalse(node1.isSetterDef());
365:       assertEquals(15, node1.getType());
366:       assertEquals(0, node1.getLineno());
367:       assertFalse(node1.isCast());
368:       assertFalse(node1.isFalse());
369:       assertFalse(node1.isThrow());
370:       assertFalse(node1.isContinue());
371:       assertEquals(48, node1.getSourcePosition());
372:       assertFalse(node1.isFunction());
373:       assertFalse(node1.isTrue());
374:       assertFalse(node1.isVoid());
375:       assertFalse(node1.isRegExp());
376:       assertFalse(node1.isDefaultCase());
377:       assertFalse(node1.isTry());
378:       assertFalse(node1.isArrayLit());
379:       assertFalse(node1.isGetterDef());
380:       assertFalse(node1.isDebugger());
381:       assertFalse(node1.isNull());
382:       assertFalse(node1.isNE());
383:       assertFalse(node1.isIf());
384:       assertFalse(node1.isName());
385:       assertFalse(node1.isDelProp());
386:       assertFalse(node1.isCatch());
387:       assertFalse(node1.isCall());
388:       assertFalse(node1.isFor());
389:       assertFalse(node1.isBlock());
390:       assertFalse(node1.isSwitch());
391:       assertFalse(node1.isAdd());
392:       assertFalse(node1.isDo());
393:       assertFalse(node1.isNew());
394:       assertFalse(node1.isCase());
395:       assertFalse(node1.isStringKey());
396:       assertFalse(node1.isOr());
397:       assertFalse(node1.isParamList());
398:       assertEquals(48, node1.getCharno());
399:       assertFalse(node1.isAssignAdd());
400:       assertFalse(node1.isLabelName());
401:       assertFalse(node1.isEmpty());
402:       assertFalse(node1.isVar());
403:       assertEquals(0, node1.getChildCount());
404:       assertFalse(node1.isLabel());
405:       assertEquals(57, Node.REFLECTED_OBJECT);
406:       assertEquals(52, Node.LENGTH);
407:       assertEquals(50, Node.FREE_CALL);
408:       assertEquals(54, Node.SLASH_V);
409:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
411:       assertEquals(48, Node.DIRECTIVES);
412:       assertEquals(49, Node.DIRECT_EVAL);
413:       assertEquals(40, Node.ORIGINALNAME_PROP);
414:       assertEquals(55, Node.INFERRED_FUNCTION);
415:       assertEquals(30, Node.VAR_ARGS_NAME);
416:       assertEquals(36, Node.QUOTED_PROP);
417:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
418:       assertEquals(8, Node.FLAG_NO_THROWS);
419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
420:       assertEquals(57, Node.LAST_PROP);
421:       assertEquals(53, Node.INPUT_ID);
422:       assertEquals(29, Node.JSDOC_INFO_PROP);
423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
424:       assertEquals(39, Node.EMPTY_BLOCK);
425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
427:       assertEquals(47, Node.IS_DISPATCHER);
428:       assertEquals(43, Node.IS_CONSTANT_NAME);
429:       assertEquals(56, Node.CHANGE_TIME);
430:       assertEquals(2, Node.POST_FLAG);
431:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
432:       assertEquals(37, Node.OPT_ARG_NAME);
433:       assertEquals(51, Node.STATIC_SOURCE_FILE);
434:       assertEquals(12, Node.COLUMN_BITS);
435:       assertEquals(46, Node.IS_NAMESPACE);
436:       assertEquals(32, Node.INCRDECR_PROP);
437:       assertEquals(4095, Node.COLUMN_MASK);
438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
439:       assertEquals(1, Node.DECR_FLAG);
440:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
441:       assertFalse(node1.equals((Object)node0));
442:       
443:       boolean boolean1 = node0.isFromExterns();
444:       assertFalse(node0.isExprResult());
445:       assertFalse(node0.isScript());
446:       assertFalse(node0.isCast());
447:       assertFalse(node0.isWith());
448:       assertFalse(node0.isAssign());
449:       assertFalse(node0.hasChildren());
450:       assertFalse(node0.hasOneChild());
451:       assertFalse(node0.isOr());
452:       assertFalse(node0.isComma());
453:       assertEquals((-1), node0.getLineno());
454:       assertFalse(node0.isThis());
455:       assertFalse(node0.isReturn());
456:       assertFalse(node0.isTypeOf());
457:       assertFalse(node0.isInstanceOf());
458:       assertFalse(node0.isDec());
459:       assertFalse(node0.hasMoreThanOneChild());
460:       assertFalse(node0.isGetElem());
461:       assertFalse(node0.isBreak());
462:       assertFalse(node0.isInc());
463:       assertFalse(node0.isString());
464:       assertFalse(node0.isFalse());
465:       assertFalse(node0.isThrow());
466:       assertFalse(node0.isWhile());
467:       assertTrue(node0.isNumber());
468:       assertFalse(node0.isGetProp());
469:       assertEquals((-1), node0.getSourcePosition());
470:       assertFalse(node0.isContinue());
471:       assertFalse(node0.isObjectLit());
472:       assertFalse(node0.isNot());
473:       assertFalse(node0.isAnd());
474:       assertFalse(node0.isVoid());
475:       assertFalse(node0.isTry());
476:       assertFalse(node0.isTrue());
477:       assertFalse(node0.isDebugger());
478:       assertFalse(node0.isRegExp());
479:       assertFalse(node0.isFunction());
480:       assertFalse(node0.isFor());
481:       assertFalse(node0.isEmpty());
482:       assertFalse(node0.isDefaultCase());
483:       assertFalse(node0.isSetterDef());
484:       assertFalse(node0.isCatch());
485:       assertFalse(node0.isIn());
486:       assertFalse(node0.isName());
487:       assertFalse(node0.isCall());
488:       assertFalse(node0.isNull());
489:       assertFalse(node0.isNE());
490:       assertFalse(node0.isDelProp());
491:       assertFalse(node0.isIf());
492:       assertFalse(node0.isBlock());
493:       assertFalse(node0.isAdd());
494:       assertFalse(node0.isNew());
495:       assertFalse(node0.isHook());
496:       assertEquals((-1), node0.getCharno());
497:       assertFalse(node0.isCase());
498:       assertFalse(node0.isDo());
499:       assertEquals(39, node0.getType());
500:       assertFalse(node0.isVar());
501:       assertFalse(node0.isAssignAdd());
502:       assertFalse(node0.isLabel());
503:       assertEquals(0, node0.getChildCount());
504:       assertFalse(node0.isGetterDef());
505:       assertFalse(node0.isStringKey());
506:       assertFalse(node0.isLabelName());
507:       assertFalse(node0.isArrayLit());
508:       assertFalse(node0.isParamList());
509:       assertFalse(node0.isSwitch());
510:       assertEquals(40, Node.ORIGINALNAME_PROP);
511:       assertEquals(57, Node.REFLECTED_OBJECT);
512:       assertEquals(54, Node.SLASH_V);
513:       assertEquals(15, Node.NO_SIDE_EFFECTS);
514:       assertEquals(39, Node.EMPTY_BLOCK);
515:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
516:       assertEquals(50, Node.FREE_CALL);
517:       assertEquals(52, Node.LENGTH);
518:       assertEquals(8, Node.FLAG_NO_THROWS);
519:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
520:       assertEquals(55, Node.INFERRED_FUNCTION);
521:       assertEquals(57, Node.LAST_PROP);
522:       assertEquals(46, Node.IS_NAMESPACE);
523:       assertEquals(43, Node.IS_CONSTANT_NAME);
524:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
525:       assertEquals(47, Node.IS_DISPATCHER);
526:       assertEquals(30, Node.VAR_ARGS_NAME);
527:       assertEquals(2, Node.POST_FLAG);
528:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
529:       assertEquals(29, Node.JSDOC_INFO_PROP);
530:       assertEquals(56, Node.CHANGE_TIME);
531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
532:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
533:       assertEquals(53, Node.INPUT_ID);
534:       assertEquals(51, Node.STATIC_SOURCE_FILE);
535:       assertEquals(36, Node.QUOTED_PROP);
536:       assertEquals(1, Node.DECR_FLAG);
537:       assertEquals(12, Node.COLUMN_BITS);
538:       assertEquals(32, Node.INCRDECR_PROP);
539:       assertEquals(49, Node.DIRECT_EVAL);
540:       assertEquals(37, Node.OPT_ARG_NAME);
541:       assertEquals(48, Node.DIRECTIVES);
542:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
543:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
544:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
545:       assertEquals(4095, Node.COLUMN_MASK);
546:       assertFalse(node0.equals((Object)node1));
547:       assertTrue(boolean1 == boolean0);
548:       assertFalse(boolean1);
549:       
550:       boolean boolean2 = node0.isBreak();
551:       assertFalse(node0.isExprResult());
552:       assertFalse(node0.isScript());
553:       assertFalse(node0.isCast());
554:       assertFalse(node0.isWith());
555:       assertFalse(node0.isAssign());
556:       assertFalse(node0.hasChildren());
557:       assertFalse(node0.hasOneChild());
558:       assertFalse(node0.isOr());
559:       assertFalse(node0.isComma());
560:       assertEquals((-1), node0.getLineno());
561:       assertFalse(node0.isThis());
562:       assertFalse(node0.isReturn());
563:       assertFalse(node0.isTypeOf());
564:       assertFalse(node0.isInstanceOf());
565:       assertFalse(node0.isDec());
566:       assertFalse(node0.hasMoreThanOneChild());
567:       assertFalse(node0.isGetElem());
568:       assertFalse(node0.isBreak());
569:       assertFalse(node0.isInc());
570:       assertFalse(node0.isString());
571:       assertFalse(node0.isFalse());
572:       assertFalse(node0.isThrow());
573:       assertFalse(node0.isWhile());
574:       assertTrue(node0.isNumber());
575:       assertFalse(node0.isGetProp());
576:       assertEquals((-1), node0.getSourcePosition());
577:       assertFalse(node0.isContinue());
578:       assertFalse(node0.isObjectLit());
579:       assertFalse(node0.isNot());
580:       assertFalse(node0.isAnd());
581:       assertFalse(node0.isVoid());
582:       assertFalse(node0.isTry());
583:       assertFalse(node0.isTrue());
584:       assertFalse(node0.isDebugger());
585:       assertFalse(node0.isRegExp());
586:       assertFalse(node0.isFunction());
587:       assertFalse(node0.isFor());
588:       assertFalse(node0.isEmpty());
589:       assertFalse(node0.isDefaultCase());
590:       assertFalse(node0.isSetterDef());
591:       assertFalse(node0.isCatch());
592:       assertFalse(node0.isIn());
593:       assertFalse(node0.isName());
594:       assertFalse(node0.isCall());
595:       assertFalse(node0.isNull());
596:       assertFalse(node0.isNE());
597:       assertFalse(node0.isDelProp());
598:       assertFalse(node0.isIf());
599:       assertFalse(node0.isBlock());
600:       assertFalse(node0.isAdd());
601:       assertFalse(node0.isNew());
602:       assertFalse(node0.isHook());
603:       assertEquals((-1), node0.getCharno());
604:       assertFalse(node0.isCase());
605:       assertFalse(node0.isDo());
606:       assertEquals(39, node0.getType());
607:       assertFalse(node0.isVar());
608:       assertFalse(node0.isAssignAdd());
609:       assertFalse(node0.isLabel());
610:       assertEquals(0, node0.getChildCount());
611:       assertFalse(node0.isGetterDef());
612:       assertFalse(node0.isStringKey());
613:       assertFalse(node0.isLabelName());
614:       assertFalse(node0.isArrayLit());
615:       assertFalse(node0.isParamList());
616:       assertFalse(node0.isSwitch());
617:       assertEquals(40, Node.ORIGINALNAME_PROP);
618:       assertEquals(57, Node.REFLECTED_OBJECT);
619:       assertEquals(54, Node.SLASH_V);
620:       assertEquals(15, Node.NO_SIDE_EFFECTS);
621:       assertEquals(39, Node.EMPTY_BLOCK);
622:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
623:       assertEquals(50, Node.FREE_CALL);
624:       assertEquals(52, Node.LENGTH);
625:       assertEquals(8, Node.FLAG_NO_THROWS);
626:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
627:       assertEquals(55, Node.INFERRED_FUNCTION);
628:       assertEquals(57, Node.LAST_PROP);
629:       assertEquals(46, Node.IS_NAMESPACE);
630:       assertEquals(43, Node.IS_CONSTANT_NAME);
631:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
632:       assertEquals(47, Node.IS_DISPATCHER);
633:       assertEquals(30, Node.VAR_ARGS_NAME);
634:       assertEquals(2, Node.POST_FLAG);
635:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
636:       assertEquals(29, Node.JSDOC_INFO_PROP);
637:       assertEquals(56, Node.CHANGE_TIME);
638:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
639:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(51, Node.STATIC_SOURCE_FILE);
642:       assertEquals(36, Node.QUOTED_PROP);
643:       assertEquals(1, Node.DECR_FLAG);
644:       assertEquals(12, Node.COLUMN_BITS);
645:       assertEquals(32, Node.INCRDECR_PROP);
646:       assertEquals(49, Node.DIRECT_EVAL);
647:       assertEquals(37, Node.OPT_ARG_NAME);
648:       assertEquals(48, Node.DIRECTIVES);
649:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
650:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
651:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
652:       assertEquals(4095, Node.COLUMN_MASK);
653:       assertFalse(node0.equals((Object)node1));
654:       assertTrue(boolean2 == boolean0);
655:       assertTrue(boolean2 == boolean1);
656:       assertFalse(boolean2);
657:       
658:       boolean boolean3 = node0.isCatch();
659:       assertFalse(node0.isExprResult());
660:       assertFalse(node0.isScript());
661:       assertFalse(node0.isCast());
662:       assertFalse(node0.isWith());
663:       assertFalse(node0.isAssign());
664:       assertFalse(node0.hasChildren());
665:       assertFalse(node0.hasOneChild());
666:       assertFalse(node0.isOr());
667:       assertFalse(node0.isComma());
668:       assertEquals((-1), node0.getLineno());
669:       assertFalse(node0.isThis());
670:       assertFalse(node0.isReturn());
671:       assertFalse(node0.isTypeOf());
672:       assertFalse(node0.isInstanceOf());
673:       assertFalse(node0.isDec());
674:       assertFalse(node0.hasMoreThanOneChild());
675:       assertFalse(node0.isGetElem());
676:       assertFalse(node0.isBreak());
677:       assertFalse(node0.isInc());
678:       assertFalse(node0.isString());
679:       assertFalse(node0.isFalse());
680:       assertFalse(node0.isThrow());
681:       assertFalse(node0.isWhile());
682:       assertTrue(node0.isNumber());
683:       assertFalse(node0.isGetProp());
684:       assertEquals((-1), node0.getSourcePosition());
685:       assertFalse(node0.isContinue());
686:       assertFalse(node0.isObjectLit());
687:       assertFalse(node0.isNot());
688:       assertFalse(node0.isAnd());
689:       assertFalse(node0.isVoid());
690:       assertFalse(node0.isTry());
691:       assertFalse(node0.isTrue());
692:       assertFalse(node0.isDebugger());
693:       assertFalse(node0.isRegExp());
694:       assertFalse(node0.isFunction());
695:       assertFalse(node0.isFor());
696:       assertFalse(node0.isEmpty());
697:       assertFalse(node0.isDefaultCase());
698:       assertFalse(node0.isSetterDef());
699:       assertFalse(node0.isCatch());
700:       assertFalse(node0.isIn());
701:       assertFalse(node0.isName());
702:       assertFalse(node0.isCall());
703:       assertFalse(node0.isNull());
704:       assertFalse(node0.isNE());
705:       assertFalse(node0.isDelProp());
706:       assertFalse(node0.isIf());
707:       assertFalse(node0.isBlock());
708:       assertFalse(node0.isAdd());
709:       assertFalse(node0.isNew());
710:       assertFalse(node0.isHook());
711:       assertEquals((-1), node0.getCharno());
712:       assertFalse(node0.isCase());
713:       assertFalse(node0.isDo());
714:       assertEquals(39, node0.getType());
715:       assertFalse(node0.isVar());
716:       assertFalse(node0.isAssignAdd());
717:       assertFalse(node0.isLabel());
718:       assertEquals(0, node0.getChildCount());
719:       assertFalse(node0.isGetterDef());
720:       assertFalse(node0.isStringKey());
721:       assertFalse(node0.isLabelName());
722:       assertFalse(node0.isArrayLit());
723:       assertFalse(node0.isParamList());
724:       assertFalse(node0.isSwitch());
725:       assertEquals(40, Node.ORIGINALNAME_PROP);
726:       assertEquals(57, Node.REFLECTED_OBJECT);
727:       assertEquals(54, Node.SLASH_V);
728:       assertEquals(15, Node.NO_SIDE_EFFECTS);
729:       assertEquals(39, Node.EMPTY_BLOCK);
730:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
731:       assertEquals(50, Node.FREE_CALL);
732:       assertEquals(52, Node.LENGTH);
733:       assertEquals(8, Node.FLAG_NO_THROWS);
734:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
735:       assertEquals(55, Node.INFERRED_FUNCTION);
736:       assertEquals(57, Node.LAST_PROP);
737:       assertEquals(46, Node.IS_NAMESPACE);
738:       assertEquals(43, Node.IS_CONSTANT_NAME);
739:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
740:       assertEquals(47, Node.IS_DISPATCHER);
741:       assertEquals(30, Node.VAR_ARGS_NAME);
742:       assertEquals(2, Node.POST_FLAG);
743:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
744:       assertEquals(29, Node.JSDOC_INFO_PROP);
745:       assertEquals(56, Node.CHANGE_TIME);
746:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
747:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
748:       assertEquals(53, Node.INPUT_ID);
749:       assertEquals(51, Node.STATIC_SOURCE_FILE);
750:       assertEquals(36, Node.QUOTED_PROP);
751:       assertEquals(1, Node.DECR_FLAG);
752:       assertEquals(12, Node.COLUMN_BITS);
753:       assertEquals(32, Node.INCRDECR_PROP);
754:       assertEquals(49, Node.DIRECT_EVAL);
755:       assertEquals(37, Node.OPT_ARG_NAME);
756:       assertEquals(48, Node.DIRECTIVES);
757:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
758:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
759:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
760:       assertEquals(4095, Node.COLUMN_MASK);
761:       assertFalse(node0.equals((Object)node1));
762:       assertTrue(boolean3 == boolean0);
763:       assertTrue(boolean3 == boolean1);
764:       assertTrue(boolean3 == boolean2);
765:       assertFalse(boolean3);
766:       
767:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
768:       assertNotNull(node_NodeMismatch0);
769:       assertFalse(node0.isExprResult());
770:       assertFalse(node0.isScript());
771:       assertFalse(node0.isCast());
772:       assertFalse(node0.isWith());
773:       assertFalse(node0.isAssign());
774:       assertFalse(node0.hasChildren());
775:       assertFalse(node0.hasOneChild());
776:       assertFalse(node0.isOr());
777:       assertFalse(node0.isComma());
778:       assertEquals((-1), node0.getLineno());
779:       assertFalse(node0.isThis());
780:       assertFalse(node0.isReturn());
781:       assertFalse(node0.isTypeOf());
782:       assertFalse(node0.isInstanceOf());
783:       assertFalse(node0.isDec());
784:       assertFalse(node0.hasMoreThanOneChild());
785:       assertFalse(node0.isGetElem());
786:       assertFalse(node0.isBreak());
787:       assertFalse(node0.isInc());
788:       assertFalse(node0.isString());
789:       assertFalse(node0.isFalse());
790:       assertFalse(node0.isThrow());
791:       assertFalse(node0.isWhile());
792:       assertTrue(node0.isNumber());
793:       assertFalse(node0.isGetProp());
794:       assertEquals((-1), node0.getSourcePosition());
795:       assertFalse(node0.isContinue());
796:       assertFalse(node0.isObjectLit());
797:       assertFalse(node0.isNot());
798:       assertFalse(node0.isAnd());
799:       assertFalse(node0.isVoid());
800:       assertFalse(node0.isTry());
801:       assertFalse(node0.isTrue());
802:       assertFalse(node0.isDebugger());
803:       assertFalse(node0.isRegExp());
804:       assertFalse(node0.isFunction());
805:       assertFalse(node0.isFor());
806:       assertFalse(node0.isEmpty());
807:       assertFalse(node0.isDefaultCase());
808:       assertFalse(node0.isSetterDef());
809:       assertFalse(node0.isCatch());
810:       assertFalse(node0.isIn());
811:       assertFalse(node0.isName());
812:       assertFalse(node0.isCall());
813:       assertFalse(node0.isNull());
814:       assertFalse(node0.isNE());
815:       assertFalse(node0.isDelProp());
816:       assertFalse(node0.isIf());
817:       assertFalse(node0.isBlock());
818:       assertFalse(node0.isAdd());
819:       assertFalse(node0.isNew());
820:       assertFalse(node0.isHook());
821:       assertEquals((-1), node0.getCharno());
822:       assertFalse(node0.isCase());
823:       assertFalse(node0.isDo());
824:       assertEquals(39, node0.getType());
825:       assertFalse(node0.isVar());
826:       assertFalse(node0.isAssignAdd());
827:       assertFalse(node0.isLabel());
828:       assertEquals(0, node0.getChildCount());
829:       assertFalse(node0.isGetterDef());
830:       assertFalse(node0.isStringKey());
831:       assertFalse(node0.isLabelName());
832:       assertFalse(node0.isArrayLit());
833:       assertFalse(node0.isParamList());
834:       assertFalse(node0.isSwitch());
835:       assertFalse(node1.isExprResult());
836:       assertFalse(node1.isScript());
837:       assertFalse(node1.hasOneChild());
838:       assertFalse(node1.isObjectLit());
839:       assertFalse(node1.isAnd());
840:       assertFalse(node1.isNot());
841:       assertFalse(node1.isComma());
842:       assertFalse(node1.isThis());
843:       assertFalse(node1.isTypeOf());
844:       assertFalse(node1.isNumber());
845:       assertFalse(node1.isGetProp());
846:       assertFalse(node1.isGetElem());
847:       assertFalse(node1.isBreak());
848:       assertFalse(node1.hasMoreThanOneChild());
849:       assertFalse(node1.isInstanceOf());
850:       assertFalse(node1.isWhile());
851:       assertFalse(node1.isWith());
852:       assertFalse(node1.isReturn());
853:       assertFalse(node1.isAssign());
854:       assertFalse(node1.isHook());
855:       assertFalse(node1.isDec());
856:       assertFalse(node1.hasChildren());
857:       assertFalse(node1.isInc());
858:       assertFalse(node1.isString());
859:       assertFalse(node1.isIn());
860:       assertFalse(node1.isSetterDef());
861:       assertEquals(15, node1.getType());
862:       assertEquals(0, node1.getLineno());
863:       assertFalse(node1.isCast());
864:       assertFalse(node1.isFalse());
865:       assertFalse(node1.isThrow());
866:       assertFalse(node1.isContinue());
867:       assertEquals(48, node1.getSourcePosition());
868:       assertFalse(node1.isFunction());
869:       assertFalse(node1.isTrue());
870:       assertFalse(node1.isVoid());
871:       assertFalse(node1.isRegExp());
872:       assertFalse(node1.isDefaultCase());
873:       assertFalse(node1.isTry());
874:       assertFalse(node1.isArrayLit());
875:       assertFalse(node1.isGetterDef());
876:       assertFalse(node1.isDebugger());
877:       assertFalse(node1.isNull());
878:       assertFalse(node1.isNE());
879:       assertFalse(node1.isIf());
880:       assertFalse(node1.isName());
881:       assertFalse(node1.isDelProp());
882:       assertFalse(node1.isCatch());
883:       assertFalse(node1.isCall());
884:       assertFalse(node1.isFor());
885:       assertFalse(node1.isBlock());
886:       assertFalse(node1.isSwitch());
887:       assertFalse(node1.isAdd());
888:       assertFalse(node1.isDo());
889:       assertFalse(node1.isNew());
890:       assertFalse(node1.isCase());
891:       assertFalse(node1.isStringKey());
892:       assertFalse(node1.isOr());
893:       assertFalse(node1.isParamList());
894:       assertEquals(48, node1.getCharno());
895:       assertFalse(node1.isAssignAdd());
896:       assertFalse(node1.isLabelName());
897:       assertFalse(node1.isEmpty());
898:       assertFalse(node1.isVar());
899:       assertEquals(0, node1.getChildCount());
900:       assertFalse(node1.isLabel());
901:       assertEquals(40, Node.ORIGINALNAME_PROP);
902:       assertEquals(57, Node.REFLECTED_OBJECT);
903:       assertEquals(54, Node.SLASH_V);
904:       assertEquals(15, Node.NO_SIDE_EFFECTS);
905:       assertEquals(39, Node.EMPTY_BLOCK);
906:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
907:       assertEquals(50, Node.FREE_CALL);
908:       assertEquals(52, Node.LENGTH);
909:       assertEquals(8, Node.FLAG_NO_THROWS);
910:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
911:       assertEquals(55, Node.INFERRED_FUNCTION);
912:       assertEquals(57, Node.LAST_PROP);
913:       assertEquals(46, Node.IS_NAMESPACE);
914:       assertEquals(43, Node.IS_CONSTANT_NAME);
915:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
916:       assertEquals(47, Node.IS_DISPATCHER);
917:       assertEquals(30, Node.VAR_ARGS_NAME);
918:       assertEquals(2, Node.POST_FLAG);
919:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
920:       assertEquals(29, Node.JSDOC_INFO_PROP);
921:       assertEquals(56, Node.CHANGE_TIME);
922:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
923:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
924:       assertEquals(53, Node.INPUT_ID);
925:       assertEquals(51, Node.STATIC_SOURCE_FILE);
926:       assertEquals(36, Node.QUOTED_PROP);
927:       assertEquals(1, Node.DECR_FLAG);
928:       assertEquals(12, Node.COLUMN_BITS);
929:       assertEquals(32, Node.INCRDECR_PROP);
930:       assertEquals(49, Node.DIRECT_EVAL);
931:       assertEquals(37, Node.OPT_ARG_NAME);
932:       assertEquals(48, Node.DIRECTIVES);
933:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
934:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
935:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
936:       assertEquals(4095, Node.COLUMN_MASK);
937:       assertEquals(57, Node.REFLECTED_OBJECT);
938:       assertEquals(52, Node.LENGTH);
939:       assertEquals(50, Node.FREE_CALL);
940:       assertEquals(54, Node.SLASH_V);
941:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
942:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
943:       assertEquals(48, Node.DIRECTIVES);
944:       assertEquals(49, Node.DIRECT_EVAL);
945:       assertEquals(40, Node.ORIGINALNAME_PROP);
946:       assertEquals(55, Node.INFERRED_FUNCTION);
947:       assertEquals(30, Node.VAR_ARGS_NAME);
948:       assertEquals(36, Node.QUOTED_PROP);
949:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
950:       assertEquals(8, Node.FLAG_NO_THROWS);
951:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
952:       assertEquals(57, Node.LAST_PROP);
953:       assertEquals(53, Node.INPUT_ID);
954:       assertEquals(29, Node.JSDOC_INFO_PROP);
955:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
956:       assertEquals(39, Node.EMPTY_BLOCK);
957:       assertEquals(15, Node.NO_SIDE_EFFECTS);
958:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
959:       assertEquals(47, Node.IS_DISPATCHER);
960:       assertEquals(43, Node.IS_CONSTANT_NAME);
961:       assertEquals(56, Node.CHANGE_TIME);
962:       assertEquals(2, Node.POST_FLAG);
963:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
964:       assertEquals(37, Node.OPT_ARG_NAME);
965:       assertEquals(51, Node.STATIC_SOURCE_FILE);
966:       assertEquals(12, Node.COLUMN_BITS);
967:       assertEquals(46, Node.IS_NAMESPACE);
968:       assertEquals(32, Node.INCRDECR_PROP);
969:       assertEquals(4095, Node.COLUMN_MASK);
970:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
971:       assertEquals(1, Node.DECR_FLAG);
972:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
973:       assertFalse(node0.equals((Object)node1));
974:       assertFalse(node1.equals((Object)node0));
975:       
976:       Object object0 = node0.getProp(1);
977:       assertNull(object0);
978:       assertFalse(node0.isExprResult());
979:       assertFalse(node0.isScript());
980:       assertFalse(node0.isCast());
981:       assertFalse(node0.isWith());
982:       assertFalse(node0.isAssign());
983:       assertFalse(node0.hasChildren());
984:       assertFalse(node0.hasOneChild());
985:       assertFalse(node0.isOr());
986:       assertFalse(node0.isComma());
987:       assertEquals((-1), node0.getLineno());
988:       assertFalse(node0.isThis());
989:       assertFalse(node0.isReturn());
990:       assertFalse(node0.isTypeOf());
991:       assertFalse(node0.isInstanceOf());
992:       assertFalse(node0.isDec());
993:       assertFalse(node0.hasMoreThanOneChild());
994:       assertFalse(node0.isGetElem());
995:       assertFalse(node0.isBreak());
996:       assertFalse(node0.isInc());
997:       assertFalse(node0.isString());
998:       assertFalse(node0.isFalse());
999:       assertFalse(node0.isThrow());
1000:       assertFalse(node0.isWhile());
1001:       assertTrue(node0.isNumber());
1002:       assertFalse(node0.isGetProp());
1003:       assertEquals((-1), node0.getSourcePosition());
1004:       assertFalse(node0.isContinue());
1005:       assertFalse(node0.isObjectLit());
1006:       assertFalse(node0.isNot());
1007:       assertFalse(node0.isAnd());
1008:       assertFalse(node0.isVoid());
1009:       assertFalse(node0.isTry());
1010:       assertFalse(node0.isTrue());
1011:       assertFalse(node0.isDebugger());
1012:       assertFalse(node0.isRegExp());
1013:       assertFalse(node0.isFunction());
1014:       assertFalse(node0.isFor());
1015:       assertFalse(node0.isEmpty());
1016:       assertFalse(node0.isDefaultCase());
1017:       assertFalse(node0.isSetterDef());
1018:       assertFalse(node0.isCatch());
1019:       assertFalse(node0.isIn());
1020:       assertFalse(node0.isName());
1021:       assertFalse(node0.isCall());
1022:       assertFalse(node0.isNull());
1023:       assertFalse(node0.isNE());
1024:       assertFalse(node0.isDelProp());
1025:       assertFalse(node0.isIf());
1026:       assertFalse(node0.isBlock());
1027:       assertFalse(node0.isAdd());
1028:       assertFalse(node0.isNew());
1029:       assertFalse(node0.isHook());
1030:       assertEquals((-1), node0.getCharno());
1031:       assertFalse(node0.isCase());
1032:       assertFalse(node0.isDo());
1033:       assertEquals(39, node0.getType());
1034:       assertFalse(node0.isVar());
1035:       assertFalse(node0.isAssignAdd());
1036:       assertFalse(node0.isLabel());
1037:       assertEquals(0, node0.getChildCount());
1038:       assertFalse(node0.isGetterDef());
1039:       assertFalse(node0.isStringKey());
1040:       assertFalse(node0.isLabelName());
1041:       assertFalse(node0.isArrayLit());
1042:       assertFalse(node0.isParamList());
1043:       assertFalse(node0.isSwitch());
1044:       assertEquals(40, Node.ORIGINALNAME_PROP);
1045:       assertEquals(57, Node.REFLECTED_OBJECT);
1046:       assertEquals(54, Node.SLASH_V);
1047:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1048:       assertEquals(39, Node.EMPTY_BLOCK);
1049:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1050:       assertEquals(50, Node.FREE_CALL);
1051:       assertEquals(52, Node.LENGTH);
1052:       assertEquals(8, Node.FLAG_NO_THROWS);
1053:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1054:       assertEquals(55, Node.INFERRED_FUNCTION);
1055:       assertEquals(57, Node.LAST_PROP);
1056:       assertEquals(46, Node.IS_NAMESPACE);
1057:       assertEquals(43, Node.IS_CONSTANT_NAME);
1058:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1059:       assertEquals(47, Node.IS_DISPATCHER);
1060:       assertEquals(30, Node.VAR_ARGS_NAME);
1061:       assertEquals(2, Node.POST_FLAG);
1062:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1063:       assertEquals(29, Node.JSDOC_INFO_PROP);
1064:       assertEquals(56, Node.CHANGE_TIME);
1065:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1066:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1067:       assertEquals(53, Node.INPUT_ID);
1068:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1069:       assertEquals(36, Node.QUOTED_PROP);
1070:       assertEquals(1, Node.DECR_FLAG);
1071:       assertEquals(12, Node.COLUMN_BITS);
1072:       assertEquals(32, Node.INCRDECR_PROP);
1073:       assertEquals(49, Node.DIRECT_EVAL);
1074:       assertEquals(37, Node.OPT_ARG_NAME);
1075:       assertEquals(48, Node.DIRECTIVES);
1076:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1077:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1078:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1079:       assertEquals(4095, Node.COLUMN_MASK);
1080:       assertFalse(node0.equals((Object)node1));
1081:       
1082:       boolean boolean4 = node_NodeMismatch0.equals((Object) null);
1083:       assertFalse(node0.isExprResult());
1084:       assertFalse(node0.isScript());
1085:       assertFalse(node0.isCast());
1086:       assertFalse(node0.isWith());
1087:       assertFalse(node0.isAssign());
1088:       assertFalse(node0.hasChildren());
1089:       assertFalse(node0.hasOneChild());
1090:       assertFalse(node0.isOr());
1091:       assertFalse(node0.isComma());
1092:       assertEquals((-1), node0.getLineno());
1093:       assertFalse(node0.isThis());
1094:       assertFalse(node0.isReturn());
1095:       assertFalse(node0.isTypeOf());
1096:       assertFalse(node0.isInstanceOf());
1097:       assertFalse(node0.isDec());
1098:       assertFalse(node0.hasMoreThanOneChild());
1099:       assertFalse(node0.isGetElem());
1100:       assertFalse(node0.isBreak());
1101:       assertFalse(node0.isInc());
1102:       assertFalse(node0.isString());
1103:       assertFalse(node0.isFalse());
1104:       assertFalse(node0.isThrow());
1105:       assertFalse(node0.isWhile());
1106:       assertTrue(node0.isNumber());
1107:       assertFalse(node0.isGetProp());
1108:       assertEquals((-1), node0.getSourcePosition());
1109:       assertFalse(node0.isContinue());
1110:       assertFalse(node0.isObjectLit());
1111:       assertFalse(node0.isNot());
1112:       assertFalse(node0.isAnd());
1113:       assertFalse(node0.isVoid());
1114:       assertFalse(node0.isTry());
1115:       assertFalse(node0.isTrue());
1116:       assertFalse(node0.isDebugger());
1117:       assertFalse(node0.isRegExp());
1118:       assertFalse(node0.isFunction());
1119:       assertFalse(node0.isFor());
1120:       assertFalse(node0.isEmpty());
1121:       assertFalse(node0.isDefaultCase());
1122:       assertFalse(node0.isSetterDef());
1123:       assertFalse(node0.isCatch());
1124:       assertFalse(node0.isIn());
1125:       assertFalse(node0.isName());
1126:       assertFalse(node0.isCall());
1127:       assertFalse(node0.isNull());
1128:       assertFalse(node0.isNE());
1129:       assertFalse(node0.isDelProp());
1130:       assertFalse(node0.isIf());
1131:       assertFalse(node0.isBlock());
1132:       assertFalse(node0.isAdd());
1133:       assertFalse(node0.isNew());
1134:       assertFalse(node0.isHook());
1135:       assertEquals((-1), node0.getCharno());
1136:       assertFalse(node0.isCase());
1137:       assertFalse(node0.isDo());
1138:       assertEquals(39, node0.getType());
1139:       assertFalse(node0.isVar());
1140:       assertFalse(node0.isAssignAdd());
1141:       assertFalse(node0.isLabel());
1142:       assertEquals(0, node0.getChildCount());
1143:       assertFalse(node0.isGetterDef());
1144:       assertFalse(node0.isStringKey());
1145:       assertFalse(node0.isLabelName());
1146:       assertFalse(node0.isArrayLit());
1147:       assertFalse(node0.isParamList());
1148:       assertFalse(node0.isSwitch());
1149:       assertFalse(node1.isExprResult());
1150:       assertFalse(node1.isScript());
1151:       assertFalse(node1.hasOneChild());
1152:       assertFalse(node1.isObjectLit());
1153:       assertFalse(node1.isAnd());
1154:       assertFalse(node1.isNot());
1155:       assertFalse(node1.isComma());
1156:       assertFalse(node1.isThis());
1157:       assertFalse(node1.isTypeOf());
1158:       assertFalse(node1.isNumber());
1159:       assertFalse(node1.isGetProp());
1160:       assertFalse(node1.isGetElem());
1161:       assertFalse(node1.isBreak());
1162:       assertFalse(node1.hasMoreThanOneChild());
1163:       assertFalse(node1.isInstanceOf());
1164:       assertFalse(node1.isWhile());
1165:       assertFalse(node1.isWith());
1166:       assertFalse(node1.isReturn());
1167:       assertFalse(node1.isAssign());
1168:       assertFalse(node1.isHook());
1169:       assertFalse(node1.isDec());
1170:       assertFalse(node1.hasChildren());
1171:       assertFalse(node1.isInc());
1172:       assertFalse(node1.isString());
1173:       assertFalse(node1.isIn());
1174:       assertFalse(node1.isSetterDef());
1175:       assertEquals(15, node1.getType());
1176:       assertEquals(0, node1.getLineno());
1177:       assertFalse(node1.isCast());
1178:       assertFalse(node1.isFalse());
1179:       assertFalse(node1.isThrow());
1180:       assertFalse(node1.isContinue());
1181:       assertEquals(48, node1.getSourcePosition());
1182:       assertFalse(node1.isFunction());
1183:       assertFalse(node1.isTrue());
1184:       assertFalse(node1.isVoid());
1185:       assertFalse(node1.isRegExp());
1186:       assertFalse(node1.isDefaultCase());
1187:       assertFalse(node1.isTry());
1188:       assertFalse(node1.isArrayLit());
1189:       assertFalse(node1.isGetterDef());
1190:       assertFalse(node1.isDebugger());
1191:       assertFalse(node1.isNull());
1192:       assertFalse(node1.isNE());
1193:       assertFalse(node1.isIf());
1194:       assertFalse(node1.isName());
1195:       assertFalse(node1.isDelProp());
1196:       assertFalse(node1.isCatch());
1197:       assertFalse(node1.isCall());
1198:       assertFalse(node1.isFor());
1199:       assertFalse(node1.isBlock());
1200:       assertFalse(node1.isSwitch());
1201:       assertFalse(node1.isAdd());
1202:       assertFalse(node1.isDo());
1203:       assertFalse(node1.isNew());
1204:       assertFalse(node1.isCase());
1205:       assertFalse(node1.isStringKey());
1206:       assertFalse(node1.isOr());
1207:       assertFalse(node1.isParamList());
1208:       assertEquals(48, node1.getCharno());
1209:       assertFalse(node1.isAssignAdd());
1210:       assertFalse(node1.isLabelName());
1211:       assertFalse(node1.isEmpty());
1212:       assertFalse(node1.isVar());
1213:       assertEquals(0, node1.getChildCount());
1214:       assertFalse(node1.isLabel());
1215:       assertEquals(40, Node.ORIGINALNAME_PROP);
1216:       assertEquals(57, Node.REFLECTED_OBJECT);
1217:       assertEquals(54, Node.SLASH_V);
1218:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1219:       assertEquals(39, Node.EMPTY_BLOCK);
1220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1221:       assertEquals(50, Node.FREE_CALL);
1222:       assertEquals(52, Node.LENGTH);
1223:       assertEquals(8, Node.FLAG_NO_THROWS);
1224:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1225:       assertEquals(55, Node.INFERRED_FUNCTION);
1226:       assertEquals(57, Node.LAST_PROP);
1227:       assertEquals(46, Node.IS_NAMESPACE);
1228:       assertEquals(43, Node.IS_CONSTANT_NAME);
1229:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1230:       assertEquals(47, Node.IS_DISPATCHER);
1231:       assertEquals(30, Node.VAR_ARGS_NAME);
1232:       assertEquals(2, Node.POST_FLAG);
1233:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1234:       assertEquals(29, Node.JSDOC_INFO_PROP);
1235:       assertEquals(56, Node.CHANGE_TIME);
1236:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1237:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1238:       assertEquals(53, Node.INPUT_ID);
1239:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1240:       assertEquals(36, Node.QUOTED_PROP);
1241:       assertEquals(1, Node.DECR_FLAG);
1242:       assertEquals(12, Node.COLUMN_BITS);
1243:       assertEquals(32, Node.INCRDECR_PROP);
1244:       assertEquals(49, Node.DIRECT_EVAL);
1245:       assertEquals(37, Node.OPT_ARG_NAME);
1246:       assertEquals(48, Node.DIRECTIVES);
1247:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1249:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1250:       assertEquals(4095, Node.COLUMN_MASK);
1251:       assertEquals(57, Node.REFLECTED_OBJECT);
1252:       assertEquals(52, Node.LENGTH);
1253:       assertEquals(50, Node.FREE_CALL);
1254:       assertEquals(54, Node.SLASH_V);
1255:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1256:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1257:       assertEquals(48, Node.DIRECTIVES);
1258:       assertEquals(49, Node.DIRECT_EVAL);
1259:       assertEquals(40, Node.ORIGINALNAME_PROP);
1260:       assertEquals(55, Node.INFERRED_FUNCTION);
1261:       assertEquals(30, Node.VAR_ARGS_NAME);
1262:       assertEquals(36, Node.QUOTED_PROP);
1263:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1264:       assertEquals(8, Node.FLAG_NO_THROWS);
1265:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1266:       assertEquals(57, Node.LAST_PROP);
1267:       assertEquals(53, Node.INPUT_ID);
1268:       assertEquals(29, Node.JSDOC_INFO_PROP);
1269:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1270:       assertEquals(39, Node.EMPTY_BLOCK);
1271:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1272:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1273:       assertEquals(47, Node.IS_DISPATCHER);
1274:       assertEquals(43, Node.IS_CONSTANT_NAME);
1275:       assertEquals(56, Node.CHANGE_TIME);
1276:       assertEquals(2, Node.POST_FLAG);
1277:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1278:       assertEquals(37, Node.OPT_ARG_NAME);
1279:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1280:       assertEquals(12, Node.COLUMN_BITS);
1281:       assertEquals(46, Node.IS_NAMESPACE);
1282:       assertEquals(32, Node.INCRDECR_PROP);
1283:       assertEquals(4095, Node.COLUMN_MASK);
1284:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1285:       assertEquals(1, Node.DECR_FLAG);
1286:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1287:       assertFalse(node0.equals((Object)node1));
1288:       assertFalse(node1.equals((Object)node0));
1289:       assertTrue(boolean4 == boolean0);
1290:       assertTrue(boolean4 == boolean2);
1291:       assertTrue(boolean4 == boolean1);
1292:       assertTrue(boolean4 == boolean3);
1293:       assertFalse(boolean4);
1294:       
1295:       Node node2 = Node.newString(57, "");
1296:       assertNotNull(node2);
1297:       assertFalse(node2.isInc());
1298:       assertFalse(node2.isCase());
1299:       assertEquals((-1), node2.getCharno());
1300:       assertFalse(node2.isSwitch());
1301:       assertFalse(node2.isIn());
1302:       assertFalse(node2.isString());
1303:       assertFalse(node2.isGetterDef());
1304:       assertEquals(57, node2.getType());
1305:       assertFalse(node2.isThrow());
1306:       assertFalse(node2.isArrayLit());
1307:       assertFalse(node2.isFalse());
1308:       assertFalse(node2.isFunction());
1309:       assertFalse(node2.isRegExp());
1310:       assertFalse(node2.isScript());
1311:       assertFalse(node2.isTry());
1312:       assertFalse(node2.hasOneChild());
1313:       assertFalse(node2.isIf());
1314:       assertFalse(node2.isThis());
1315:       assertFalse(node2.isFor());
1316:       assertFalse(node2.isNE());
1317:       assertFalse(node2.isInstanceOf());
1318:       assertFalse(node2.isHook());
1319:       assertEquals((-1), node2.getLineno());
1320:       assertFalse(node2.isCatch());
1321:       assertFalse(node2.hasMoreThanOneChild());
1322:       assertFalse(node2.isWith());
1323:       assertFalse(node2.isDo());
1324:       assertFalse(node2.isNew());
1325:       assertFalse(node2.isBlock());
1326:       assertFalse(node2.isWhile());
1327:       assertFalse(node2.isOr());
1328:       assertFalse(node2.isAdd());
1329:       assertFalse(node2.isNumber());
1330:       assertFalse(node2.isSetterDef());
1331:       assertEquals((-1), node2.getSourcePosition());
1332:       assertFalse(node2.isStringKey());
1333:       assertFalse(node2.isLabelName());
1334:       assertFalse(node2.isParamList());
1335:       assertFalse(node2.isAssignAdd());
1336:       assertEquals(0, node2.getChildCount());
1337:       assertFalse(node2.isVar());
1338:       assertFalse(node2.isLabel());
1339:       assertFalse(node2.isCast());
1340:       assertFalse(node2.isContinue());
1341:       assertFalse(node2.isDefaultCase());
1342:       assertFalse(node2.isDebugger());
1343:       assertFalse(node2.isTrue());
1344:       assertFalse(node2.isVoid());
1345:       assertFalse(node2.isAnd());
1346:       assertFalse(node2.isGetProp());
1347:       assertFalse(node2.isObjectLit());
1348:       assertFalse(node2.isNot());
1349:       assertFalse(node2.isEmpty());
1350:       assertFalse(node2.isDec());
1351:       assertFalse(node2.isNull());
1352:       assertFalse(node2.isTypeOf());
1353:       assertFalse(node2.isDelProp());
1354:       assertFalse(node2.isComma());
1355:       assertFalse(node2.isAssign());
1356:       assertFalse(node2.isBreak());
1357:       assertFalse(node2.hasChildren());
1358:       assertFalse(node2.isName());
1359:       assertFalse(node2.isReturn());
1360:       assertFalse(node2.isGetElem());
1361:       assertFalse(node2.isCall());
1362:       assertFalse(node2.isExprResult());
1363:       assertEquals(53, Node.INPUT_ID);
1364:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1365:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1366:       assertEquals(36, Node.QUOTED_PROP);
1367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1368:       assertEquals(37, Node.OPT_ARG_NAME);
1369:       assertEquals(43, Node.IS_CONSTANT_NAME);
1370:       assertEquals(56, Node.CHANGE_TIME);
1371:       assertEquals(32, Node.INCRDECR_PROP);
1372:       assertEquals(46, Node.IS_NAMESPACE);
1373:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1374:       assertEquals(12, Node.COLUMN_BITS);
1375:       assertEquals(4095, Node.COLUMN_MASK);
1376:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1377:       assertEquals(1, Node.DECR_FLAG);
1378:       assertEquals(57, Node.REFLECTED_OBJECT);
1379:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1380:       assertEquals(40, Node.ORIGINALNAME_PROP);
1381:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1382:       assertEquals(52, Node.LENGTH);
1383:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1384:       assertEquals(49, Node.DIRECT_EVAL);
1385:       assertEquals(50, Node.FREE_CALL);
1386:       assertEquals(48, Node.DIRECTIVES);
1387:       assertEquals(54, Node.SLASH_V);
1388:       assertEquals(8, Node.FLAG_NO_THROWS);
1389:       assertEquals(39, Node.EMPTY_BLOCK);
1390:       assertEquals(55, Node.INFERRED_FUNCTION);
1391:       assertEquals(2, Node.POST_FLAG);
1392:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1393:       assertEquals(29, Node.JSDOC_INFO_PROP);
1394:       assertEquals(30, Node.VAR_ARGS_NAME);
1395:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1396:       assertEquals(47, Node.IS_DISPATCHER);
1397:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1398:       assertEquals(57, Node.LAST_PROP);
1399:       assertFalse(node2.equals((Object)node0));
1400:       assertFalse(node2.equals((Object)node1));
1401:       
1402:       boolean boolean5 = node2.isVoid();
1403:       assertFalse(node2.isInc());
1404:       assertFalse(node2.isCase());
1405:       assertEquals((-1), node2.getCharno());
1406:       assertFalse(node2.isSwitch());
1407:       assertFalse(node2.isIn());
1408:       assertFalse(node2.isString());
1409:       assertFalse(node2.isGetterDef());
1410:       assertEquals(57, node2.getType());
1411:       assertFalse(node2.isThrow());
1412:       assertFalse(node2.isArrayLit());
1413:       assertFalse(node2.isFalse());
1414:       assertFalse(node2.isFunction());
1415:       assertFalse(node2.isRegExp());
1416:       assertFalse(node2.isScript());
1417:       assertFalse(node2.isTry());
1418:       assertFalse(node2.hasOneChild());
1419:       assertFalse(node2.isIf());
1420:       assertFalse(node2.isThis());
1421:       assertFalse(node2.isFor());
1422:       assertFalse(node2.isNE());
1423:       assertFalse(node2.isInstanceOf());
1424:       assertFalse(node2.isHook());
1425:       assertEquals((-1), node2.getLineno());
1426:       assertFalse(node2.isCatch());
1427:       assertFalse(node2.hasMoreThanOneChild());
1428:       assertFalse(node2.isWith());
1429:       assertFalse(node2.isDo());
1430:       assertFalse(node2.isNew());
1431:       assertFalse(node2.isBlock());
1432:       assertFalse(node2.isWhile());
1433:       assertFalse(node2.isOr());
1434:       assertFalse(node2.isAdd());
1435:       assertFalse(node2.isNumber());
1436:       assertFalse(node2.isSetterDef());
1437:       assertEquals((-1), node2.getSourcePosition());
1438:       assertFalse(node2.isStringKey());
1439:       assertFalse(node2.isLabelName());
1440:       assertFalse(node2.isParamList());
1441:       assertFalse(node2.isAssignAdd());
1442:       assertEquals(0, node2.getChildCount());
1443:       assertFalse(node2.isVar());
1444:       assertFalse(node2.isLabel());
1445:       assertFalse(node2.isCast());
1446:       assertFalse(node2.isContinue());
1447:       assertFalse(node2.isDefaultCase());
1448:       assertFalse(node2.isDebugger());
1449:       assertFalse(node2.isTrue());
1450:       assertFalse(node2.isVoid());
1451:       assertFalse(node2.isAnd());
1452:       assertFalse(node2.isGetProp());
1453:       assertFalse(node2.isObjectLit());
1454:       assertFalse(node2.isNot());
1455:       assertFalse(node2.isEmpty());
1456:       assertFalse(node2.isDec());
1457:       assertFalse(node2.isNull());
1458:       assertFalse(node2.isTypeOf());
1459:       assertFalse(node2.isDelProp());
1460:       assertFalse(node2.isComma());
1461:       assertFalse(node2.isAssign());
1462:       assertFalse(node2.isBreak());
1463:       assertFalse(node2.hasChildren());
1464:       assertFalse(node2.isName());
1465:       assertFalse(node2.isReturn());
1466:       assertFalse(node2.isGetElem());
1467:       assertFalse(node2.isCall());
1468:       assertFalse(node2.isExprResult());
1469:       assertEquals(53, Node.INPUT_ID);
1470:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1472:       assertEquals(36, Node.QUOTED_PROP);
1473:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1474:       assertEquals(37, Node.OPT_ARG_NAME);
1475:       assertEquals(43, Node.IS_CONSTANT_NAME);
1476:       assertEquals(56, Node.CHANGE_TIME);
1477:       assertEquals(32, Node.INCRDECR_PROP);
1478:       assertEquals(46, Node.IS_NAMESPACE);
1479:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1480:       assertEquals(12, Node.COLUMN_BITS);
1481:       assertEquals(4095, Node.COLUMN_MASK);
1482:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1483:       assertEquals(1, Node.DECR_FLAG);
1484:       assertEquals(57, Node.REFLECTED_OBJECT);
1485:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1486:       assertEquals(40, Node.ORIGINALNAME_PROP);
1487:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1488:       assertEquals(52, Node.LENGTH);
1489:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1490:       assertEquals(49, Node.DIRECT_EVAL);
1491:       assertEquals(50, Node.FREE_CALL);
1492:       assertEquals(48, Node.DIRECTIVES);
1493:       assertEquals(54, Node.SLASH_V);
1494:       assertEquals(8, Node.FLAG_NO_THROWS);
1495:       assertEquals(39, Node.EMPTY_BLOCK);
1496:       assertEquals(55, Node.INFERRED_FUNCTION);
1497:       assertEquals(2, Node.POST_FLAG);
1498:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1499:       assertEquals(29, Node.JSDOC_INFO_PROP);
1500:       assertEquals(30, Node.VAR_ARGS_NAME);
1501:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1502:       assertEquals(47, Node.IS_DISPATCHER);
1503:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1504:       assertEquals(57, Node.LAST_PROP);
1505:       assertFalse(node2.equals((Object)node0));
1506:       assertFalse(node2.equals((Object)node1));
1507:       assertTrue(boolean5 == boolean1);
1508:       assertTrue(boolean5 == boolean3);
1509:       assertTrue(boolean5 == boolean2);
1510:       assertTrue(boolean5 == boolean4);
1511:       assertTrue(boolean5 == boolean0);
1512:       assertFalse(boolean5);
1513:       
1514:       int int0 = Node.MAX_COLUMN_NUMBER;
1515:       assertEquals(4095, int0);
1516:       
1517:       Node node3 = Node.newNumber((-3125.49931957272), (-3301), 1);
1518:       assertNotSame(node3, node0);
1519:       assertNotNull(node3);
1520:       assertFalse(node3.isCase());
1521:       assertFalse(node3.isSwitch());
1522:       assertFalse(node3.isFalse());
1523:       assertFalse(node3.isThrow());
1524:       assertFalse(node3.isEmpty());
1525:       assertFalse(node3.isBreak());
1526:       assertFalse(node3.isNE());
1527:       assertFalse(node3.isDelProp());
1528:       assertFalse(node3.isIf());
1529:       assertFalse(node3.isTrue());
1530:       assertFalse(node3.isInc());
1531:       assertFalse(node3.isIn());
1532:       assertFalse(node3.isDefaultCase());
1533:       assertFalse(node3.isThis());
1534:       assertFalse(node3.isInstanceOf());
1535:       assertFalse(node3.isRegExp());
1536:       assertEquals(0, node3.getChildCount());
1537:       assertFalse(node3.isCatch());
1538:       assertFalse(node3.isWith());
1539:       assertFalse(node3.isStringKey());
1540:       assertFalse(node3.isFor());
1541:       assertFalse(node3.isLabelName());
1542:       assertFalse(node3.isArrayLit());
1543:       assertFalse(node3.hasOneChild());
1544:       assertFalse(node3.isHook());
1545:       assertFalse(node3.isParamList());
1546:       assertFalse(node3.isTry());
1547:       assertEquals((-1), node3.getCharno());
1548:       assertFalse(node3.isScript());
1549:       assertFalse(node3.isGetterDef());
1550:       assertFalse(node3.isDo());
1551:       assertEquals(39, node3.getType());
1552:       assertFalse(node3.isWhile());
1553:       assertFalse(node3.isAssignAdd());
1554:       assertFalse(node3.isBlock());
1555:       assertEquals((-1), node3.getLineno());
1556:       assertFalse(node3.isReturn());
1557:       assertFalse(node3.isLabel());
1558:       assertFalse(node3.isDec());
1559:       assertFalse(node3.isTypeOf());
1560:       assertFalse(node3.hasMoreThanOneChild());
1561:       assertFalse(node3.isContinue());
1562:       assertFalse(node3.isName());
1563:       assertFalse(node3.isGetElem());
1564:       assertFalse(node3.isCall());
1565:       assertFalse(node3.isNull());
1566:       assertFalse(node3.isVar());
1567:       assertFalse(node3.isNew());
1568:       assertFalse(node3.isOr());
1569:       assertFalse(node3.isAdd());
1570:       assertFalse(node3.isSetterDef());
1571:       assertFalse(node3.isObjectLit());
1572:       assertFalse(node3.isNot());
1573:       assertFalse(node3.isAnd());
1574:       assertFalse(node3.isVoid());
1575:       assertFalse(node3.isComma());
1576:       assertFalse(node3.isExprResult());
1577:       assertFalse(node3.isCast());
1578:       assertFalse(node3.isFunction());
1579:       assertFalse(node3.isAssign());
1580:       assertFalse(node3.hasChildren());
1581:       assertTrue(node3.isNumber());
1582:       assertFalse(node3.isDebugger());
1583:       assertFalse(node3.isGetProp());
1584:       assertEquals((-1), node3.getSourcePosition());
1585:       assertFalse(node3.isString());
1586:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1587:       assertEquals(36, Node.QUOTED_PROP);
1588:       assertEquals(53, Node.INPUT_ID);
1589:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1590:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1591:       assertEquals(55, Node.INFERRED_FUNCTION);
1592:       assertEquals(29, Node.JSDOC_INFO_PROP);
1593:       assertEquals(2, Node.POST_FLAG);
1594:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1595:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1596:       assertEquals(47, Node.IS_DISPATCHER);
1597:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1598:       assertEquals(50, Node.FREE_CALL);
1599:       assertEquals(40, Node.ORIGINALNAME_PROP);
1600:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1601:       assertEquals(46, Node.IS_NAMESPACE);
1602:       assertEquals(43, Node.IS_CONSTANT_NAME);
1603:       assertEquals(54, Node.SLASH_V);
1604:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1605:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1606:       assertEquals(30, Node.VAR_ARGS_NAME);
1607:       assertEquals(52, Node.LENGTH);
1608:       assertEquals(1, Node.DECR_FLAG);
1609:       assertEquals(12, Node.COLUMN_BITS);
1610:       assertEquals(32, Node.INCRDECR_PROP);
1611:       assertEquals(57, Node.LAST_PROP);
1612:       assertEquals(37, Node.OPT_ARG_NAME);
1613:       assertEquals(48, Node.DIRECTIVES);
1614:       assertEquals(39, Node.EMPTY_BLOCK);
1615:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1616:       assertEquals(4095, Node.COLUMN_MASK);
1617:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1618:       assertEquals(8, Node.FLAG_NO_THROWS);
1619:       assertEquals(57, Node.REFLECTED_OBJECT);
1620:       assertEquals(56, Node.CHANGE_TIME);
1621:       assertEquals(49, Node.DIRECT_EVAL);
1622:       assertFalse(node3.equals((Object)node1));
1623:       assertFalse(node3.equals((Object)node0));
1624:       assertFalse(node3.equals((Object)node2));
1625:       
1626:       boolean boolean6 = node3.isReturn();
1627:       assertNotSame(node3, node0);
1628:       assertFalse(node3.isCase());
1629:       assertFalse(node3.isSwitch());
1630:       assertFalse(node3.isFalse());
1631:       assertFalse(node3.isThrow());
1632:       assertFalse(node3.isEmpty());
1633:       assertFalse(node3.isBreak());
1634:       assertFalse(node3.isNE());
1635:       assertFalse(node3.isDelProp());
1636:       assertFalse(node3.isIf());
1637:       assertFalse(node3.isTrue());
1638:       assertFalse(node3.isInc());
1639:       assertFalse(node3.isIn());
1640:       assertFalse(node3.isDefaultCase());
1641:       assertFalse(node3.isThis());
1642:       assertFalse(node3.isInstanceOf());
1643:       assertFalse(node3.isRegExp());
1644:       assertEquals(0, node3.getChildCount());
1645:       assertFalse(node3.isCatch());
1646:       assertFalse(node3.isWith());
1647:       assertFalse(node3.isStringKey());
1648:       assertFalse(node3.isFor());
1649:       assertFalse(node3.isLabelName());
1650:       assertFalse(node3.isArrayLit());
1651:       assertFalse(node3.hasOneChild());
1652:       assertFalse(node3.isHook());
1653:       assertFalse(node3.isParamList());
1654:       assertFalse(node3.isTry());
1655:       assertEquals((-1), node3.getCharno());
1656:       assertFalse(node3.isScript());
1657:       assertFalse(node3.isGetterDef());
1658:       assertFalse(node3.isDo());
1659:       assertEquals(39, node3.getType());
1660:       assertFalse(node3.isWhile());
1661:       assertFalse(node3.isAssignAdd());
1662:       assertFalse(node3.isBlock());
1663:       assertEquals((-1), node3.getLineno());
1664:       assertFalse(node3.isReturn());
1665:       assertFalse(node3.isLabel());
1666:       assertFalse(node3.isDec());
1667:       assertFalse(node3.isTypeOf());
1668:       assertFalse(node3.hasMoreThanOneChild());
1669:       assertFalse(node3.isContinue());
1670:       assertFalse(node3.isName());
1671:       assertFalse(node3.isGetElem());
1672:       assertFalse(node3.isCall());
1673:       assertFalse(node3.isNull());
1674:       assertFalse(node3.isVar());
1675:       assertFalse(node3.isNew());
1676:       assertFalse(node3.isOr());
1677:       assertFalse(node3.isAdd());
1678:       assertFalse(node3.isSetterDef());
1679:       assertFalse(node3.isObjectLit());
1680:       assertFalse(node3.isNot());
1681:       assertFalse(node3.isAnd());
1682:       assertFalse(node3.isVoid());
1683:       assertFalse(node3.isComma());
1684:       assertFalse(node3.isExprResult());
1685:       assertFalse(node3.isCast());
1686:       assertFalse(node3.isFunction());
1687:       assertFalse(node3.isAssign());
1688:       assertFalse(node3.hasChildren());
1689:       assertTrue(node3.isNumber());
1690:       assertFalse(node3.isDebugger());
1691:       assertFalse(node3.isGetProp());
1692:       assertEquals((-1), node3.getSourcePosition());
1693:       assertFalse(node3.isString());
1694:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1695:       assertEquals(36, Node.QUOTED_PROP);
1696:       assertEquals(53, Node.INPUT_ID);
1697:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1698:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1699:       assertEquals(55, Node.INFERRED_FUNCTION);
1700:       assertEquals(29, Node.JSDOC_INFO_PROP);
1701:       assertEquals(2, Node.POST_FLAG);
1702:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1703:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1704:       assertEquals(47, Node.IS_DISPATCHER);
1705:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1706:       assertEquals(50, Node.FREE_CALL);
1707:       assertEquals(40, Node.ORIGINALNAME_PROP);
1708:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1709:       assertEquals(46, Node.IS_NAMESPACE);
1710:       assertEquals(43, Node.IS_CONSTANT_NAME);
1711:       assertEquals(54, Node.SLASH_V);
1712:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1713:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1714:       assertEquals(30, Node.VAR_ARGS_NAME);
1715:       assertEquals(52, Node.LENGTH);
1716:       assertEquals(1, Node.DECR_FLAG);
1717:       assertEquals(12, Node.COLUMN_BITS);
1718:       assertEquals(32, Node.INCRDECR_PROP);
1719:       assertEquals(57, Node.LAST_PROP);
1720:       assertEquals(37, Node.OPT_ARG_NAME);
1721:       assertEquals(48, Node.DIRECTIVES);
1722:       assertEquals(39, Node.EMPTY_BLOCK);
1723:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1724:       assertEquals(4095, Node.COLUMN_MASK);
1725:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1726:       assertEquals(8, Node.FLAG_NO_THROWS);
1727:       assertEquals(57, Node.REFLECTED_OBJECT);
1728:       assertEquals(56, Node.CHANGE_TIME);
1729:       assertEquals(49, Node.DIRECT_EVAL);
1730:       assertFalse(node3.equals((Object)node1));
1731:       assertFalse(node3.equals((Object)node0));
1732:       assertFalse(node3.equals((Object)node2));
1733:       assertTrue(boolean6 == boolean3);
1734:       assertTrue(boolean6 == boolean0);
1735:       assertTrue(boolean6 == boolean1);
1736:       assertTrue(boolean6 == boolean2);
1737:       assertTrue(boolean6 == boolean4);
1738:       assertTrue(boolean6 == boolean5);
1739:       assertFalse(boolean6);
1740:       
1741:       boolean boolean7 = node0.isInstanceOf();
1742:       assertNotSame(node0, node3);
1743:       assertFalse(node0.isExprResult());
1744:       assertFalse(node0.isScript());
1745:       assertFalse(node0.isCast());
1746:       assertFalse(node0.isWith());
1747:       assertFalse(node0.isAssign());
1748:       assertFalse(node0.hasChildren());
1749:       assertFalse(node0.hasOneChild());
1750:       assertFalse(node0.isOr());
1751:       assertFalse(node0.isComma());
1752:       assertEquals((-1), node0.getLineno());
1753:       assertFalse(node0.isThis());
1754:       assertFalse(node0.isReturn());
1755:       assertFalse(node0.isTypeOf());
1756:       assertFalse(node0.isInstanceOf());
1757:       assertFalse(node0.isDec());
1758:       assertFalse(node0.hasMoreThanOneChild());
1759:       assertFalse(node0.isGetElem());
1760:       assertFalse(node0.isBreak());
1761:       assertFalse(node0.isInc());
1762:       assertFalse(node0.isString());
1763:       assertFalse(node0.isFalse());
1764:       assertFalse(node0.isThrow());
1765:       assertFalse(node0.isWhile());
1766:       assertTrue(node0.isNumber());
1767:       assertFalse(node0.isGetProp());
1768:       assertEquals((-1), node0.getSourcePosition());
1769:       assertFalse(node0.isContinue());
1770:       assertFalse(node0.isObjectLit());
1771:       assertFalse(node0.isNot());
1772:       assertFalse(node0.isAnd());
1773:       assertFalse(node0.isVoid());
1774:       assertFalse(node0.isTry());
1775:       assertFalse(node0.isTrue());
1776:       assertFalse(node0.isDebugger());
1777:       assertFalse(node0.isRegExp());
1778:       assertFalse(node0.isFunction());
1779:       assertFalse(node0.isFor());
1780:       assertFalse(node0.isEmpty());
1781:       assertFalse(node0.isDefaultCase());
1782:       assertFalse(node0.isSetterDef());
1783:       assertFalse(node0.isCatch());
1784:       assertFalse(node0.isIn());
1785:       assertFalse(node0.isName());
1786:       assertFalse(node0.isCall());
1787:       assertFalse(node0.isNull());
1788:       assertFalse(node0.isNE());
1789:       assertFalse(node0.isDelProp());
1790:       assertFalse(node0.isIf());
1791:       assertFalse(node0.isBlock());
1792:       assertFalse(node0.isAdd());
1793:       assertFalse(node0.isNew());
1794:       assertFalse(node0.isHook());
1795:       assertEquals((-1), node0.getCharno());
1796:       assertFalse(node0.isCase());
1797:       assertFalse(node0.isDo());
1798:       assertEquals(39, node0.getType());
1799:       assertFalse(node0.isVar());
1800:       assertFalse(node0.isAssignAdd());
1801:       assertFalse(node0.isLabel());
1802:       assertEquals(0, node0.getChildCount());
1803:       assertFalse(node0.isGetterDef());
1804:       assertFalse(node0.isStringKey());
1805:       assertFalse(node0.isLabelName());
1806:       assertFalse(node0.isArrayLit());
1807:       assertFalse(node0.isParamList());
1808:       assertFalse(node0.isSwitch());
1809:       assertEquals(40, Node.ORIGINALNAME_PROP);
1810:       assertEquals(57, Node.REFLECTED_OBJECT);
1811:       assertEquals(54, Node.SLASH_V);
1812:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1813:       assertEquals(39, Node.EMPTY_BLOCK);
1814:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1815:       assertEquals(50, Node.FREE_CALL);
1816:       assertEquals(52, Node.LENGTH);
1817:       assertEquals(8, Node.FLAG_NO_THROWS);
1818:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1819:       assertEquals(55, Node.INFERRED_FUNCTION);
1820:       assertEquals(57, Node.LAST_PROP);
1821:       assertEquals(46, Node.IS_NAMESPACE);
1822:       assertEquals(43, Node.IS_CONSTANT_NAME);
1823:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1824:       assertEquals(47, Node.IS_DISPATCHER);
1825:       assertEquals(30, Node.VAR_ARGS_NAME);
1826:       assertEquals(2, Node.POST_FLAG);
1827:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1828:       assertEquals(29, Node.JSDOC_INFO_PROP);
1829:       assertEquals(56, Node.CHANGE_TIME);
1830:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1831:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1832:       assertEquals(53, Node.INPUT_ID);
1833:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1834:       assertEquals(36, Node.QUOTED_PROP);
1835:       assertEquals(1, Node.DECR_FLAG);
1836:       assertEquals(12, Node.COLUMN_BITS);
1837:       assertEquals(32, Node.INCRDECR_PROP);
1838:       assertEquals(49, Node.DIRECT_EVAL);
1839:       assertEquals(37, Node.OPT_ARG_NAME);
1840:       assertEquals(48, Node.DIRECTIVES);
1841:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1842:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1843:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1844:       assertEquals(4095, Node.COLUMN_MASK);
1845:       assertFalse(node0.equals((Object)node1));
1846:       assertFalse(node0.equals((Object)node3));
1847:       assertFalse(node0.equals((Object)node2));
1848:       assertTrue(boolean7 == boolean1);
1849:       assertTrue(boolean7 == boolean6);
1850:       assertTrue(boolean7 == boolean4);
1851:       assertTrue(boolean7 == boolean3);
1852:       assertTrue(boolean7 == boolean5);
1853:       assertTrue(boolean7 == boolean0);
1854:       assertTrue(boolean7 == boolean2);
1855:       assertFalse(boolean7);
1856:       
1857:       Set<String> set0 = node1.getDirectives();
1858:       assertNull(set0);
1859:       assertFalse(node1.isExprResult());
1860:       assertFalse(node1.isScript());
1861:       assertFalse(node1.hasOneChild());
1862:       assertFalse(node1.isObjectLit());
1863:       assertFalse(node1.isAnd());
1864:       assertFalse(node1.isNot());
1865:       assertFalse(node1.isComma());
1866:       assertFalse(node1.isThis());
1867:       assertFalse(node1.isTypeOf());
1868:       assertFalse(node1.isNumber());
1869:       assertFalse(node1.isGetProp());
1870:       assertFalse(node1.isGetElem());
1871:       assertFalse(node1.isBreak());
1872:       assertFalse(node1.hasMoreThanOneChild());
1873:       assertFalse(node1.isInstanceOf());
1874:       assertFalse(node1.isWhile());
1875:       assertFalse(node1.isWith());
1876:       assertFalse(node1.isReturn());
1877:       assertFalse(node1.isAssign());
1878:       assertFalse(node1.isHook());
1879:       assertFalse(node1.isDec());
1880:       assertFalse(node1.hasChildren());
1881:       assertFalse(node1.isInc());
1882:       assertFalse(node1.isString());
1883:       assertFalse(node1.isIn());
1884:       assertFalse(node1.isSetterDef());
1885:       assertEquals(15, node1.getType());
1886:       assertEquals(0, node1.getLineno());
1887:       assertFalse(node1.isCast());
1888:       assertFalse(node1.isFalse());
1889:       assertFalse(node1.isThrow());
1890:       assertFalse(node1.isContinue());
1891:       assertEquals(48, node1.getSourcePosition());
1892:       assertFalse(node1.isFunction());
1893:       assertFalse(node1.isTrue());
1894:       assertFalse(node1.isVoid());
1895:       assertFalse(node1.isRegExp());
1896:       assertFalse(node1.isDefaultCase());
1897:       assertFalse(node1.isTry());
1898:       assertFalse(node1.isArrayLit());
1899:       assertFalse(node1.isGetterDef());
1900:       assertFalse(node1.isDebugger());
1901:       assertFalse(node1.isNull());
1902:       assertFalse(node1.isNE());
1903:       assertFalse(node1.isIf());
1904:       assertFalse(node1.isName());
1905:       assertFalse(node1.isDelProp());
1906:       assertFalse(node1.isCatch());
1907:       assertFalse(node1.isCall());
1908:       assertFalse(node1.isFor());
1909:       assertFalse(node1.isBlock());
1910:       assertFalse(node1.isSwitch());
1911:       assertFalse(node1.isAdd());
1912:       assertFalse(node1.isDo());
1913:       assertFalse(node1.isNew());
1914:       assertFalse(node1.isCase());
1915:       assertFalse(node1.isStringKey());
1916:       assertFalse(node1.isOr());
1917:       assertFalse(node1.isParamList());
1918:       assertEquals(48, node1.getCharno());
1919:       assertFalse(node1.isAssignAdd());
1920:       assertFalse(node1.isLabelName());
1921:       assertFalse(node1.isEmpty());
1922:       assertFalse(node1.isVar());
1923:       assertEquals(0, node1.getChildCount());
1924:       assertFalse(node1.isLabel());
1925:       assertEquals(57, Node.REFLECTED_OBJECT);
1926:       assertEquals(52, Node.LENGTH);
1927:       assertEquals(50, Node.FREE_CALL);
1928:       assertEquals(54, Node.SLASH_V);
1929:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1930:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1931:       assertEquals(48, Node.DIRECTIVES);
1932:       assertEquals(49, Node.DIRECT_EVAL);
1933:       assertEquals(40, Node.ORIGINALNAME_PROP);
1934:       assertEquals(55, Node.INFERRED_FUNCTION);
1935:       assertEquals(30, Node.VAR_ARGS_NAME);
1936:       assertEquals(36, Node.QUOTED_PROP);
1937:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1938:       assertEquals(8, Node.FLAG_NO_THROWS);
1939:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1940:       assertEquals(57, Node.LAST_PROP);
1941:       assertEquals(53, Node.INPUT_ID);
1942:       assertEquals(29, Node.JSDOC_INFO_PROP);
1943:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1944:       assertEquals(39, Node.EMPTY_BLOCK);
1945:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1946:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1947:       assertEquals(47, Node.IS_DISPATCHER);
1948:       assertEquals(43, Node.IS_CONSTANT_NAME);
1949:       assertEquals(56, Node.CHANGE_TIME);
1950:       assertEquals(2, Node.POST_FLAG);
1951:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1952:       assertEquals(37, Node.OPT_ARG_NAME);
1953:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1954:       assertEquals(12, Node.COLUMN_BITS);
1955:       assertEquals(46, Node.IS_NAMESPACE);
1956:       assertEquals(32, Node.INCRDECR_PROP);
1957:       assertEquals(4095, Node.COLUMN_MASK);
1958:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1959:       assertEquals(1, Node.DECR_FLAG);
1960:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1961:       assertFalse(node1.equals((Object)node2));
1962:       assertFalse(node1.equals((Object)node3));
1963:       assertFalse(node1.equals((Object)node0));
1964:       
1965:       boolean boolean8 = node3.mayMutateArguments();
1966:       assertNotSame(node3, node0);
1967:       assertFalse(node3.isCase());
1968:       assertFalse(node3.isSwitch());
1969:       assertFalse(node3.isFalse());
1970:       assertFalse(node3.isThrow());
1971:       assertFalse(node3.isEmpty());
1972:       assertFalse(node3.isBreak());
1973:       assertFalse(node3.isNE());
1974:       assertFalse(node3.isDelProp());
1975:       assertFalse(node3.isIf());
1976:       assertFalse(node3.isTrue());
1977:       assertFalse(node3.isInc());
1978:       assertFalse(node3.isIn());
1979:       assertFalse(node3.isDefaultCase());
1980:       assertFalse(node3.isThis());
1981:       assertFalse(node3.isInstanceOf());
1982:       assertFalse(node3.isRegExp());
1983:       assertEquals(0, node3.getChildCount());
1984:       assertFalse(node3.isCatch());
1985:       assertFalse(node3.isWith());
1986:       assertFalse(node3.isStringKey());
1987:       assertFalse(node3.isFor());
1988:       assertFalse(node3.isLabelName());
1989:       assertFalse(node3.isArrayLit());
1990:       assertFalse(node3.hasOneChild());
1991:       assertFalse(node3.isHook());
1992:       assertFalse(node3.isParamList());
1993:       assertFalse(node3.isTry());
1994:       assertEquals((-1), node3.getCharno());
1995:       assertFalse(node3.isScript());
1996:       assertFalse(node3.isGetterDef());
1997:       assertFalse(node3.isDo());
1998:       assertEquals(39, node3.getType());
1999:       assertFalse(node3.isWhile());
2000:       assertFalse(node3.isAssignAdd());
2001:       assertFalse(node3.isBlock());
2002:       assertEquals((-1), node3.getLineno());
2003:       assertFalse(node3.isReturn());
2004:       assertFalse(node3.isLabel());
2005:       assertFalse(node3.isDec());
2006:       assertFalse(node3.isTypeOf());
2007:       assertFalse(node3.hasMoreThanOneChild());
2008:       assertFalse(node3.isContinue());
2009:       assertFalse(node3.isName());
2010:       assertFalse(node3.isGetElem());
2011:       assertFalse(node3.isCall());
2012:       assertFalse(node3.isNull());
2013:       assertFalse(node3.isVar());
2014:       assertFalse(node3.isNew());
2015:       assertFalse(node3.isOr());
2016:       assertFalse(node3.isAdd());
2017:       assertFalse(node3.isSetterDef());
2018:       assertFalse(node3.isObjectLit());
2019:       assertFalse(node3.isNot());
2020:       assertFalse(node3.isAnd());
2021:       assertFalse(node3.isVoid());
2022:       assertFalse(node3.isComma());
2023:       assertFalse(node3.isExprResult());
2024:       assertFalse(node3.isCast());
2025:       assertFalse(node3.isFunction());
2026:       assertFalse(node3.isAssign());
2027:       assertFalse(node3.hasChildren());
2028:       assertTrue(node3.isNumber());
2029:       assertFalse(node3.isDebugger());
2030:       assertFalse(node3.isGetProp());
2031:       assertEquals((-1), node3.getSourcePosition());
2032:       assertFalse(node3.isString());
2033:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2034:       assertEquals(36, Node.QUOTED_PROP);
2035:       assertEquals(53, Node.INPUT_ID);
2036:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2037:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2038:       assertEquals(55, Node.INFERRED_FUNCTION);
2039:       assertEquals(29, Node.JSDOC_INFO_PROP);
2040:       assertEquals(2, Node.POST_FLAG);
2041:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2042:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2043:       assertEquals(47, Node.IS_DISPATCHER);
2044:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2045:       assertEquals(50, Node.FREE_CALL);
2046:       assertEquals(40, Node.ORIGINALNAME_PROP);
2047:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2048:       assertEquals(46, Node.IS_NAMESPACE);
2049:       assertEquals(43, Node.IS_CONSTANT_NAME);
2050:       assertEquals(54, Node.SLASH_V);
2051:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2052:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2053:       assertEquals(30, Node.VAR_ARGS_NAME);
2054:       assertEquals(52, Node.LENGTH);
2055:       assertEquals(1, Node.DECR_FLAG);
2056:       assertEquals(12, Node.COLUMN_BITS);
2057:       assertEquals(32, Node.INCRDECR_PROP);
2058:       assertEquals(57, Node.LAST_PROP);
2059:       assertEquals(37, Node.OPT_ARG_NAME);
2060:       assertEquals(48, Node.DIRECTIVES);
2061:       assertEquals(39, Node.EMPTY_BLOCK);
2062:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2063:       assertEquals(4095, Node.COLUMN_MASK);
2064:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2065:       assertEquals(8, Node.FLAG_NO_THROWS);
2066:       assertEquals(57, Node.REFLECTED_OBJECT);
2067:       assertEquals(56, Node.CHANGE_TIME);
2068:       assertEquals(49, Node.DIRECT_EVAL);
2069:       assertFalse(boolean8 == boolean4);
2070:       assertFalse(boolean8 == boolean7);
2071:       assertFalse(boolean8 == boolean5);
2072:       assertFalse(boolean8 == boolean3);
2073:       assertFalse(boolean8 == boolean6);
2074:       assertFalse(boolean8 == boolean2);
2075:       assertFalse(boolean8 == boolean0);
2076:       assertFalse(boolean8 == boolean1);
2077:       assertFalse(node3.equals((Object)node1));
2078:       assertFalse(node3.equals((Object)node0));
2079:       assertFalse(node3.equals((Object)node2));
2080:       assertTrue(boolean8);
2081:   }
2082: }
RegularFileObject[/tmp/EvoSuite_147_1629222896054/com/google/javascript/rhino/Node_147_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:56 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_147_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_147_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_147_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
332:       "com.google.common.collect.Sets",
333:       "com.google.common.base.Objects",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.jstype.EnumType",
336:       "com.google.javascript.rhino.jstype.EnumElementType",
337:       "com.google.javascript.rhino.InputId",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.jstype.TemplatizedType",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.Platform",
347:       "com.google.common.collect.Iterators$12",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.javascript.rhino.JSTypeExpression",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 17:54:56.880 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(25.14468128968887);
assertNotNull(node0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isDec();
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(boolean0);

Node node1 = new Node(15, 0, 48);
assertNotNull(node1);
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertEquals(15, node1.getType());
assertEquals(0, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertEquals(48, node1.getCharno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.equals((Object)node0));

boolean boolean1 = node0.isFromExterns();
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

boolean boolean2 = node0.isBreak();
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);

boolean boolean3 = node0.isCatch();
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertEquals(15, node1.getType());
assertEquals(0, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertEquals(48, node1.getCharno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

Object object0 = node0.getProp(1);
assertNull(object0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));

boolean boolean4 = node_NodeMismatch0.equals((Object) null);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertEquals(15, node1.getType());
assertEquals(0, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertEquals(48, node1.getCharno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4);

Node node2 = Node.newString(57, "");
assertNotNull(node2);
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertEquals(57, node2.getType());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNumber());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isAssignAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isEmpty());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isName());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean5 = node2.isVoid();
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertEquals(57, node2.getType());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNumber());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isAssignAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isEmpty());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isName());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertFalse(boolean5);

int int0 = Node.MAX_COLUMN_NUMBER;
assertEquals(4095, int0);

Node node3 = Node.newNumber((-3125.49931957272), (-3301), 1);
assertNotSame(node3, node0);
assertNotNull(node3);
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isEmpty());
assertFalse(node3.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isParamList());
assertFalse(node3.isTry());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isScript());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDo());
assertEquals(39, node3.getType());
assertFalse(node3.isWhile());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isComma());
assertFalse(node3.isExprResult());
assertFalse(node3.isCast());
assertFalse(node3.isFunction());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertTrue(node3.isNumber());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isString());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));

boolean boolean6 = node3.isReturn();
assertNotSame(node3, node0);
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isEmpty());
assertFalse(node3.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isParamList());
assertFalse(node3.isTry());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isScript());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDo());
assertEquals(39, node3.getType());
assertFalse(node3.isWhile());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isComma());
assertFalse(node3.isExprResult());
assertFalse(node3.isCast());
assertFalse(node3.isFunction());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertTrue(node3.isNumber());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isString());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean5);
assertFalse(boolean6);

boolean boolean7 = node0.isInstanceOf();
assertNotSame(node0, node3);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDec());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean2);
assertFalse(boolean7);

Set<String> set0 = node1.getDirectives();
assertNull(set0);
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertEquals(15, node1.getType());
assertEquals(0, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertEquals(48, node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertEquals(48, node1.getCharno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));

boolean boolean8 = node3.mayMutateArguments();
assertNotSame(node3, node0);
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isEmpty());
assertFalse(node3.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isParamList());
assertFalse(node3.isTry());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isScript());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDo());
assertEquals(39, node3.getType());
assertFalse(node3.isWhile());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isComma());
assertFalse(node3.isExprResult());
assertFalse(node3.isCast());
assertFalse(node3.isFunction());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertTrue(node3.isNumber());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isString());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(boolean8 == boolean4);
assertFalse(boolean8 == boolean7);
assertFalse(boolean8 == boolean5);
assertFalse(boolean8 == boolean3);
assertFalse(boolean8 == boolean6);
assertFalse(boolean8 == boolean2);
assertFalse(boolean8 == boolean0);
assertFalse(boolean8 == boolean1);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean8);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/3
* Done!

* Computation finished
