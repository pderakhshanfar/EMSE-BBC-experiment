* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 2067
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3262926708
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:49:00.798 [logback-3] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:49:03.710 [logback-3] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:49:04.051 [logback-3] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 17:49:06.584 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1919: com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;:566 - ReplaceComparisonOperator <= -> ==
[MASTER] 17:49:06.601 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;
[MASTER] 17:51:01.331 [logback-3] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 605s and 299 generations, 171292 statements, best individual has fitness: 3034.0
* Minimizing test suite
[MASTER] 18:00:21.935 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 791
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 600
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 530
* Number of covered goals: 460
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 4536
* Number of covered goals: 2082
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 714
* Number of covered goals: 557
* Generated 618 tests with total length 10692
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:01:23.559 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6686333333333333% of time used, but only 20/618 tests minimized), falling back to using all assertions
[MASTER] 18:01:43.533 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
[MASTER] 18:01:53.139 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 9 seconds more than allowed.
[MASTER] 18:02:05.534 [logback-3] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_59_1629223325049/com/google/javascript/rhino/Node_59_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_59_1629223325049/com/google/javascript/rhino/Node_59_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:05.534 [logback-3] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:05.534 [logback-3] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:05.539 [logback-3] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 547
[MASTER] 18:02:05.542 [logback-3] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_59_1629223325049/com/google/javascript/rhino/Node_59_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:05 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_59_tmp__ESTest extends Node_59_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(155, "");
21:       assertNotNull(node0);
22:       assertFalse(node0.isReturn());
23:       assertEquals((-1), node0.getLineno());
24:       assertFalse(node0.isOr());
25:       assertFalse(node0.hasMoreThanOneChild());
26:       assertFalse(node0.isAssignAdd());
27:       assertFalse(node0.isWhile());
28:       assertFalse(node0.isAssign());
29:       assertFalse(node0.isDo());
30:       assertFalse(node0.isTypeOf());
31:       assertFalse(node0.isContinue());
32:       assertFalse(node0.isDec());
33:       assertFalse(node0.isBlock());
34:       assertFalse(node0.isLabel());
35:       assertFalse(node0.hasChildren());
36:       assertFalse(node0.isAdd());
37:       assertEquals(155, node0.getType());
38:       assertFalse(node0.isCall());
39:       assertFalse(node0.isExprResult());
40:       assertFalse(node0.isGetElem());
41:       assertFalse(node0.isNew());
42:       assertFalse(node0.isName());
43:       assertFalse(node0.isNull());
44:       assertEquals(0, node0.getChildCount());
45:       assertFalse(node0.isInstanceOf());
46:       assertFalse(node0.isCatch());
47:       assertFalse(node0.isRegExp());
48:       assertFalse(node0.isDefaultCase());
49:       assertFalse(node0.isWith());
50:       assertFalse(node0.isThis());
51:       assertFalse(node0.isVar());
52:       assertFalse(node0.isHook());
53:       assertFalse(node0.isTry());
54:       assertFalse(node0.isScript());
55:       assertFalse(node0.isArrayLit());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isGetterDef());
58:       assertFalse(node0.isLabelName());
59:       assertFalse(node0.isStringKey());
60:       assertFalse(node0.isNumber());
61:       assertFalse(node0.isSwitch());
62:       assertTrue(node0.isCast());
63:       assertFalse(node0.isParamList());
64:       assertEquals((-1), node0.getCharno());
65:       assertFalse(node0.isIn());
66:       assertFalse(node0.isCase());
67:       assertFalse(node0.isFor());
68:       assertFalse(node0.isInc());
69:       assertFalse(node0.isVoid());
70:       assertFalse(node0.isEmpty());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isIf());
73:       assertFalse(node0.isTrue());
74:       assertFalse(node0.isNE());
75:       assertFalse(node0.isSetterDef());
76:       assertFalse(node0.isGetProp());
77:       assertFalse(node0.isBreak());
78:       assertFalse(node0.isFalse());
79:       assertFalse(node0.isComma());
80:       assertFalse(node0.isFunction());
81:       assertFalse(node0.isThrow());
82:       assertFalse(node0.isString());
83:       assertFalse(node0.isNot());
84:       assertFalse(node0.isAnd());
85:       assertFalse(node0.isObjectLit());
86:       assertEquals((-1), node0.getSourcePosition());
87:       assertFalse(node0.isDebugger());
88:       assertEquals(51, Node.STATIC_SOURCE_FILE);
89:       assertEquals(12, Node.COLUMN_BITS);
90:       assertEquals(32, Node.INCRDECR_PROP);
91:       assertEquals(46, Node.IS_NAMESPACE);
92:       assertEquals(30, Node.VAR_ARGS_NAME);
93:       assertEquals(56, Node.CHANGE_TIME);
94:       assertEquals(2, Node.POST_FLAG);
95:       assertEquals(49, Node.DIRECT_EVAL);
96:       assertEquals(37, Node.OPT_ARG_NAME);
97:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
98:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
99:       assertEquals(50, Node.FREE_CALL);
100:       assertEquals(54, Node.SLASH_V);
101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
102:       assertEquals(1, Node.DECR_FLAG);
103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
104:       assertEquals(55, Node.INFERRED_FUNCTION);
105:       assertEquals(4095, Node.COLUMN_MASK);
106:       assertEquals(43, Node.IS_CONSTANT_NAME);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
109:       assertEquals(48, Node.DIRECTIVES);
110:       assertEquals(40, Node.ORIGINALNAME_PROP);
111:       assertEquals(57, Node.REFLECTED_OBJECT);
112:       assertEquals(52, Node.LENGTH);
113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
114:       assertEquals(36, Node.QUOTED_PROP);
115:       assertEquals(47, Node.IS_DISPATCHER);
116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
117:       assertEquals(8, Node.FLAG_NO_THROWS);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(57, Node.LAST_PROP);
120:       assertEquals(53, Node.INPUT_ID);
121:       assertEquals(29, Node.JSDOC_INFO_PROP);
122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
123:       assertEquals(39, Node.EMPTY_BLOCK);
124:       
125:       boolean boolean0 = node0.getBooleanProp(155);
126:       assertFalse(node0.isReturn());
127:       assertEquals((-1), node0.getLineno());
128:       assertFalse(node0.isOr());
129:       assertFalse(node0.hasMoreThanOneChild());
130:       assertFalse(node0.isAssignAdd());
131:       assertFalse(node0.isWhile());
132:       assertFalse(node0.isAssign());
133:       assertFalse(node0.isDo());
134:       assertFalse(node0.isTypeOf());
135:       assertFalse(node0.isContinue());
136:       assertFalse(node0.isDec());
137:       assertFalse(node0.isBlock());
138:       assertFalse(node0.isLabel());
139:       assertFalse(node0.hasChildren());
140:       assertFalse(node0.isAdd());
141:       assertEquals(155, node0.getType());
142:       assertFalse(node0.isCall());
143:       assertFalse(node0.isExprResult());
144:       assertFalse(node0.isGetElem());
145:       assertFalse(node0.isNew());
146:       assertFalse(node0.isName());
147:       assertFalse(node0.isNull());
148:       assertEquals(0, node0.getChildCount());
149:       assertFalse(node0.isInstanceOf());
150:       assertFalse(node0.isCatch());
151:       assertFalse(node0.isRegExp());
152:       assertFalse(node0.isDefaultCase());
153:       assertFalse(node0.isWith());
154:       assertFalse(node0.isThis());
155:       assertFalse(node0.isVar());
156:       assertFalse(node0.isHook());
157:       assertFalse(node0.isTry());
158:       assertFalse(node0.isScript());
159:       assertFalse(node0.isArrayLit());
160:       assertFalse(node0.hasOneChild());
161:       assertFalse(node0.isGetterDef());
162:       assertFalse(node0.isLabelName());
163:       assertFalse(node0.isStringKey());
164:       assertFalse(node0.isNumber());
165:       assertFalse(node0.isSwitch());
166:       assertTrue(node0.isCast());
167:       assertFalse(node0.isParamList());
168:       assertEquals((-1), node0.getCharno());
169:       assertFalse(node0.isIn());
170:       assertFalse(node0.isCase());
171:       assertFalse(node0.isFor());
172:       assertFalse(node0.isInc());
173:       assertFalse(node0.isVoid());
174:       assertFalse(node0.isEmpty());
175:       assertFalse(node0.isDelProp());
176:       assertFalse(node0.isIf());
177:       assertFalse(node0.isTrue());
178:       assertFalse(node0.isNE());
179:       assertFalse(node0.isSetterDef());
180:       assertFalse(node0.isGetProp());
181:       assertFalse(node0.isBreak());
182:       assertFalse(node0.isFalse());
183:       assertFalse(node0.isComma());
184:       assertFalse(node0.isFunction());
185:       assertFalse(node0.isThrow());
186:       assertFalse(node0.isString());
187:       assertFalse(node0.isNot());
188:       assertFalse(node0.isAnd());
189:       assertFalse(node0.isObjectLit());
190:       assertEquals((-1), node0.getSourcePosition());
191:       assertFalse(node0.isDebugger());
192:       assertEquals(51, Node.STATIC_SOURCE_FILE);
193:       assertEquals(12, Node.COLUMN_BITS);
194:       assertEquals(32, Node.INCRDECR_PROP);
195:       assertEquals(46, Node.IS_NAMESPACE);
196:       assertEquals(30, Node.VAR_ARGS_NAME);
197:       assertEquals(56, Node.CHANGE_TIME);
198:       assertEquals(2, Node.POST_FLAG);
199:       assertEquals(49, Node.DIRECT_EVAL);
200:       assertEquals(37, Node.OPT_ARG_NAME);
201:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
202:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
203:       assertEquals(50, Node.FREE_CALL);
204:       assertEquals(54, Node.SLASH_V);
205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
206:       assertEquals(1, Node.DECR_FLAG);
207:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
208:       assertEquals(55, Node.INFERRED_FUNCTION);
209:       assertEquals(4095, Node.COLUMN_MASK);
210:       assertEquals(43, Node.IS_CONSTANT_NAME);
211:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
213:       assertEquals(48, Node.DIRECTIVES);
214:       assertEquals(40, Node.ORIGINALNAME_PROP);
215:       assertEquals(57, Node.REFLECTED_OBJECT);
216:       assertEquals(52, Node.LENGTH);
217:       assertEquals(15, Node.NO_SIDE_EFFECTS);
218:       assertEquals(36, Node.QUOTED_PROP);
219:       assertEquals(47, Node.IS_DISPATCHER);
220:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
221:       assertEquals(8, Node.FLAG_NO_THROWS);
222:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
223:       assertEquals(57, Node.LAST_PROP);
224:       assertEquals(53, Node.INPUT_ID);
225:       assertEquals(29, Node.JSDOC_INFO_PROP);
226:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
227:       assertEquals(39, Node.EMPTY_BLOCK);
228:       assertFalse(boolean0);
229:       
230:       boolean boolean1 = node0.isThrow();
231:       assertFalse(node0.isReturn());
232:       assertEquals((-1), node0.getLineno());
233:       assertFalse(node0.isOr());
234:       assertFalse(node0.hasMoreThanOneChild());
235:       assertFalse(node0.isAssignAdd());
236:       assertFalse(node0.isWhile());
237:       assertFalse(node0.isAssign());
238:       assertFalse(node0.isDo());
239:       assertFalse(node0.isTypeOf());
240:       assertFalse(node0.isContinue());
241:       assertFalse(node0.isDec());
242:       assertFalse(node0.isBlock());
243:       assertFalse(node0.isLabel());
244:       assertFalse(node0.hasChildren());
245:       assertFalse(node0.isAdd());
246:       assertEquals(155, node0.getType());
247:       assertFalse(node0.isCall());
248:       assertFalse(node0.isExprResult());
249:       assertFalse(node0.isGetElem());
250:       assertFalse(node0.isNew());
251:       assertFalse(node0.isName());
252:       assertFalse(node0.isNull());
253:       assertEquals(0, node0.getChildCount());
254:       assertFalse(node0.isInstanceOf());
255:       assertFalse(node0.isCatch());
256:       assertFalse(node0.isRegExp());
257:       assertFalse(node0.isDefaultCase());
258:       assertFalse(node0.isWith());
259:       assertFalse(node0.isThis());
260:       assertFalse(node0.isVar());
261:       assertFalse(node0.isHook());
262:       assertFalse(node0.isTry());
263:       assertFalse(node0.isScript());
264:       assertFalse(node0.isArrayLit());
265:       assertFalse(node0.hasOneChild());
266:       assertFalse(node0.isGetterDef());
267:       assertFalse(node0.isLabelName());
268:       assertFalse(node0.isStringKey());
269:       assertFalse(node0.isNumber());
270:       assertFalse(node0.isSwitch());
271:       assertTrue(node0.isCast());
272:       assertFalse(node0.isParamList());
273:       assertEquals((-1), node0.getCharno());
274:       assertFalse(node0.isIn());
275:       assertFalse(node0.isCase());
276:       assertFalse(node0.isFor());
277:       assertFalse(node0.isInc());
278:       assertFalse(node0.isVoid());
279:       assertFalse(node0.isEmpty());
280:       assertFalse(node0.isDelProp());
281:       assertFalse(node0.isIf());
282:       assertFalse(node0.isTrue());
283:       assertFalse(node0.isNE());
284:       assertFalse(node0.isSetterDef());
285:       assertFalse(node0.isGetProp());
286:       assertFalse(node0.isBreak());
287:       assertFalse(node0.isFalse());
288:       assertFalse(node0.isComma());
289:       assertFalse(node0.isFunction());
290:       assertFalse(node0.isThrow());
291:       assertFalse(node0.isString());
292:       assertFalse(node0.isNot());
293:       assertFalse(node0.isAnd());
294:       assertFalse(node0.isObjectLit());
295:       assertEquals((-1), node0.getSourcePosition());
296:       assertFalse(node0.isDebugger());
297:       assertEquals(51, Node.STATIC_SOURCE_FILE);
298:       assertEquals(12, Node.COLUMN_BITS);
299:       assertEquals(32, Node.INCRDECR_PROP);
300:       assertEquals(46, Node.IS_NAMESPACE);
301:       assertEquals(30, Node.VAR_ARGS_NAME);
302:       assertEquals(56, Node.CHANGE_TIME);
303:       assertEquals(2, Node.POST_FLAG);
304:       assertEquals(49, Node.DIRECT_EVAL);
305:       assertEquals(37, Node.OPT_ARG_NAME);
306:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
307:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
308:       assertEquals(50, Node.FREE_CALL);
309:       assertEquals(54, Node.SLASH_V);
310:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
311:       assertEquals(1, Node.DECR_FLAG);
312:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
313:       assertEquals(55, Node.INFERRED_FUNCTION);
314:       assertEquals(4095, Node.COLUMN_MASK);
315:       assertEquals(43, Node.IS_CONSTANT_NAME);
316:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
317:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
318:       assertEquals(48, Node.DIRECTIVES);
319:       assertEquals(40, Node.ORIGINALNAME_PROP);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(52, Node.LENGTH);
322:       assertEquals(15, Node.NO_SIDE_EFFECTS);
323:       assertEquals(36, Node.QUOTED_PROP);
324:       assertEquals(47, Node.IS_DISPATCHER);
325:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
326:       assertEquals(8, Node.FLAG_NO_THROWS);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(57, Node.LAST_PROP);
329:       assertEquals(53, Node.INPUT_ID);
330:       assertEquals(29, Node.JSDOC_INFO_PROP);
331:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
332:       assertEquals(39, Node.EMPTY_BLOCK);
333:       assertFalse(boolean1);
334:       assertTrue(boolean1 == boolean0);
335:       
336:       boolean boolean2 = node0.isBreak();
337:       assertFalse(node0.isReturn());
338:       assertEquals((-1), node0.getLineno());
339:       assertFalse(node0.isOr());
340:       assertFalse(node0.hasMoreThanOneChild());
341:       assertFalse(node0.isAssignAdd());
342:       assertFalse(node0.isWhile());
343:       assertFalse(node0.isAssign());
344:       assertFalse(node0.isDo());
345:       assertFalse(node0.isTypeOf());
346:       assertFalse(node0.isContinue());
347:       assertFalse(node0.isDec());
348:       assertFalse(node0.isBlock());
349:       assertFalse(node0.isLabel());
350:       assertFalse(node0.hasChildren());
351:       assertFalse(node0.isAdd());
352:       assertEquals(155, node0.getType());
353:       assertFalse(node0.isCall());
354:       assertFalse(node0.isExprResult());
355:       assertFalse(node0.isGetElem());
356:       assertFalse(node0.isNew());
357:       assertFalse(node0.isName());
358:       assertFalse(node0.isNull());
359:       assertEquals(0, node0.getChildCount());
360:       assertFalse(node0.isInstanceOf());
361:       assertFalse(node0.isCatch());
362:       assertFalse(node0.isRegExp());
363:       assertFalse(node0.isDefaultCase());
364:       assertFalse(node0.isWith());
365:       assertFalse(node0.isThis());
366:       assertFalse(node0.isVar());
367:       assertFalse(node0.isHook());
368:       assertFalse(node0.isTry());
369:       assertFalse(node0.isScript());
370:       assertFalse(node0.isArrayLit());
371:       assertFalse(node0.hasOneChild());
372:       assertFalse(node0.isGetterDef());
373:       assertFalse(node0.isLabelName());
374:       assertFalse(node0.isStringKey());
375:       assertFalse(node0.isNumber());
376:       assertFalse(node0.isSwitch());
377:       assertTrue(node0.isCast());
378:       assertFalse(node0.isParamList());
379:       assertEquals((-1), node0.getCharno());
380:       assertFalse(node0.isIn());
381:       assertFalse(node0.isCase());
382:       assertFalse(node0.isFor());
383:       assertFalse(node0.isInc());
384:       assertFalse(node0.isVoid());
385:       assertFalse(node0.isEmpty());
386:       assertFalse(node0.isDelProp());
387:       assertFalse(node0.isIf());
388:       assertFalse(node0.isTrue());
389:       assertFalse(node0.isNE());
390:       assertFalse(node0.isSetterDef());
391:       assertFalse(node0.isGetProp());
392:       assertFalse(node0.isBreak());
393:       assertFalse(node0.isFalse());
394:       assertFalse(node0.isComma());
395:       assertFalse(node0.isFunction());
396:       assertFalse(node0.isThrow());
397:       assertFalse(node0.isString());
398:       assertFalse(node0.isNot());
399:       assertFalse(node0.isAnd());
400:       assertFalse(node0.isObjectLit());
401:       assertEquals((-1), node0.getSourcePosition());
402:       assertFalse(node0.isDebugger());
403:       assertEquals(51, Node.STATIC_SOURCE_FILE);
404:       assertEquals(12, Node.COLUMN_BITS);
405:       assertEquals(32, Node.INCRDECR_PROP);
406:       assertEquals(46, Node.IS_NAMESPACE);
407:       assertEquals(30, Node.VAR_ARGS_NAME);
408:       assertEquals(56, Node.CHANGE_TIME);
409:       assertEquals(2, Node.POST_FLAG);
410:       assertEquals(49, Node.DIRECT_EVAL);
411:       assertEquals(37, Node.OPT_ARG_NAME);
412:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
413:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
414:       assertEquals(50, Node.FREE_CALL);
415:       assertEquals(54, Node.SLASH_V);
416:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
417:       assertEquals(1, Node.DECR_FLAG);
418:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
419:       assertEquals(55, Node.INFERRED_FUNCTION);
420:       assertEquals(4095, Node.COLUMN_MASK);
421:       assertEquals(43, Node.IS_CONSTANT_NAME);
422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
424:       assertEquals(48, Node.DIRECTIVES);
425:       assertEquals(40, Node.ORIGINALNAME_PROP);
426:       assertEquals(57, Node.REFLECTED_OBJECT);
427:       assertEquals(52, Node.LENGTH);
428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
429:       assertEquals(36, Node.QUOTED_PROP);
430:       assertEquals(47, Node.IS_DISPATCHER);
431:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
432:       assertEquals(8, Node.FLAG_NO_THROWS);
433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
434:       assertEquals(57, Node.LAST_PROP);
435:       assertEquals(53, Node.INPUT_ID);
436:       assertEquals(29, Node.JSDOC_INFO_PROP);
437:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
438:       assertEquals(39, Node.EMPTY_BLOCK);
439:       assertFalse(boolean2);
440:       assertTrue(boolean2 == boolean0);
441:       assertTrue(boolean2 == boolean1);
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertNotNull(iterable0);
445:       assertFalse(node0.isReturn());
446:       assertEquals((-1), node0.getLineno());
447:       assertFalse(node0.isOr());
448:       assertFalse(node0.hasMoreThanOneChild());
449:       assertFalse(node0.isAssignAdd());
450:       assertFalse(node0.isWhile());
451:       assertFalse(node0.isAssign());
452:       assertFalse(node0.isDo());
453:       assertFalse(node0.isTypeOf());
454:       assertFalse(node0.isContinue());
455:       assertFalse(node0.isDec());
456:       assertFalse(node0.isBlock());
457:       assertFalse(node0.isLabel());
458:       assertFalse(node0.hasChildren());
459:       assertFalse(node0.isAdd());
460:       assertEquals(155, node0.getType());
461:       assertFalse(node0.isCall());
462:       assertFalse(node0.isExprResult());
463:       assertFalse(node0.isGetElem());
464:       assertFalse(node0.isNew());
465:       assertFalse(node0.isName());
466:       assertFalse(node0.isNull());
467:       assertEquals(0, node0.getChildCount());
468:       assertFalse(node0.isInstanceOf());
469:       assertFalse(node0.isCatch());
470:       assertFalse(node0.isRegExp());
471:       assertFalse(node0.isDefaultCase());
472:       assertFalse(node0.isWith());
473:       assertFalse(node0.isThis());
474:       assertFalse(node0.isVar());
475:       assertFalse(node0.isHook());
476:       assertFalse(node0.isTry());
477:       assertFalse(node0.isScript());
478:       assertFalse(node0.isArrayLit());
479:       assertFalse(node0.hasOneChild());
480:       assertFalse(node0.isGetterDef());
481:       assertFalse(node0.isLabelName());
482:       assertFalse(node0.isStringKey());
483:       assertFalse(node0.isNumber());
484:       assertFalse(node0.isSwitch());
485:       assertTrue(node0.isCast());
486:       assertFalse(node0.isParamList());
487:       assertEquals((-1), node0.getCharno());
488:       assertFalse(node0.isIn());
489:       assertFalse(node0.isCase());
490:       assertFalse(node0.isFor());
491:       assertFalse(node0.isInc());
492:       assertFalse(node0.isVoid());
493:       assertFalse(node0.isEmpty());
494:       assertFalse(node0.isDelProp());
495:       assertFalse(node0.isIf());
496:       assertFalse(node0.isTrue());
497:       assertFalse(node0.isNE());
498:       assertFalse(node0.isSetterDef());
499:       assertFalse(node0.isGetProp());
500:       assertFalse(node0.isBreak());
501:       assertFalse(node0.isFalse());
502:       assertFalse(node0.isComma());
503:       assertFalse(node0.isFunction());
504:       assertFalse(node0.isThrow());
505:       assertFalse(node0.isString());
506:       assertFalse(node0.isNot());
507:       assertFalse(node0.isAnd());
508:       assertFalse(node0.isObjectLit());
509:       assertEquals((-1), node0.getSourcePosition());
510:       assertFalse(node0.isDebugger());
511:       assertEquals(51, Node.STATIC_SOURCE_FILE);
512:       assertEquals(12, Node.COLUMN_BITS);
513:       assertEquals(32, Node.INCRDECR_PROP);
514:       assertEquals(46, Node.IS_NAMESPACE);
515:       assertEquals(30, Node.VAR_ARGS_NAME);
516:       assertEquals(56, Node.CHANGE_TIME);
517:       assertEquals(2, Node.POST_FLAG);
518:       assertEquals(49, Node.DIRECT_EVAL);
519:       assertEquals(37, Node.OPT_ARG_NAME);
520:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
521:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
522:       assertEquals(50, Node.FREE_CALL);
523:       assertEquals(54, Node.SLASH_V);
524:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
525:       assertEquals(1, Node.DECR_FLAG);
526:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
527:       assertEquals(55, Node.INFERRED_FUNCTION);
528:       assertEquals(4095, Node.COLUMN_MASK);
529:       assertEquals(43, Node.IS_CONSTANT_NAME);
530:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
532:       assertEquals(48, Node.DIRECTIVES);
533:       assertEquals(40, Node.ORIGINALNAME_PROP);
534:       assertEquals(57, Node.REFLECTED_OBJECT);
535:       assertEquals(52, Node.LENGTH);
536:       assertEquals(15, Node.NO_SIDE_EFFECTS);
537:       assertEquals(36, Node.QUOTED_PROP);
538:       assertEquals(47, Node.IS_DISPATCHER);
539:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
540:       assertEquals(8, Node.FLAG_NO_THROWS);
541:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
542:       assertEquals(57, Node.LAST_PROP);
543:       assertEquals(53, Node.INPUT_ID);
544:       assertEquals(29, Node.JSDOC_INFO_PROP);
545:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
546:       assertEquals(39, Node.EMPTY_BLOCK);
547:       assertFalse(iterable0.contains(node0));
548:       
549:       node0.setQuotedString();
550:       assertFalse(node0.isReturn());
551:       assertEquals((-1), node0.getLineno());
552:       assertFalse(node0.isOr());
553:       assertFalse(node0.hasMoreThanOneChild());
554:       assertFalse(node0.isAssignAdd());
555:       assertFalse(node0.isWhile());
556:       assertFalse(node0.isAssign());
557:       assertFalse(node0.isDo());
558:       assertFalse(node0.isTypeOf());
559:       assertFalse(node0.isContinue());
560:       assertFalse(node0.isDec());
561:       assertFalse(node0.isBlock());
562:       assertFalse(node0.isLabel());
563:       assertFalse(node0.hasChildren());
564:       assertFalse(node0.isAdd());
565:       assertEquals(155, node0.getType());
566:       assertFalse(node0.isCall());
567:       assertFalse(node0.isExprResult());
568:       assertFalse(node0.isGetElem());
569:       assertFalse(node0.isNew());
570:       assertFalse(node0.isName());
571:       assertFalse(node0.isNull());
572:       assertEquals(0, node0.getChildCount());
573:       assertFalse(node0.isInstanceOf());
574:       assertFalse(node0.isCatch());
575:       assertFalse(node0.isRegExp());
576:       assertFalse(node0.isDefaultCase());
577:       assertFalse(node0.isWith());
578:       assertFalse(node0.isThis());
579:       assertFalse(node0.isVar());
580:       assertFalse(node0.isHook());
581:       assertFalse(node0.isTry());
582:       assertFalse(node0.isScript());
583:       assertFalse(node0.isArrayLit());
584:       assertFalse(node0.hasOneChild());
585:       assertFalse(node0.isGetterDef());
586:       assertFalse(node0.isLabelName());
587:       assertFalse(node0.isStringKey());
588:       assertFalse(node0.isNumber());
589:       assertFalse(node0.isSwitch());
590:       assertTrue(node0.isCast());
591:       assertFalse(node0.isParamList());
592:       assertEquals((-1), node0.getCharno());
593:       assertFalse(node0.isIn());
594:       assertFalse(node0.isCase());
595:       assertFalse(node0.isFor());
596:       assertFalse(node0.isInc());
597:       assertFalse(node0.isVoid());
598:       assertFalse(node0.isEmpty());
599:       assertFalse(node0.isDelProp());
600:       assertFalse(node0.isIf());
601:       assertFalse(node0.isTrue());
602:       assertFalse(node0.isNE());
603:       assertFalse(node0.isSetterDef());
604:       assertFalse(node0.isGetProp());
605:       assertFalse(node0.isBreak());
606:       assertFalse(node0.isFalse());
607:       assertFalse(node0.isComma());
608:       assertFalse(node0.isFunction());
609:       assertFalse(node0.isThrow());
610:       assertFalse(node0.isString());
611:       assertFalse(node0.isNot());
612:       assertFalse(node0.isAnd());
613:       assertFalse(node0.isObjectLit());
614:       assertEquals((-1), node0.getSourcePosition());
615:       assertFalse(node0.isDebugger());
616:       assertEquals(51, Node.STATIC_SOURCE_FILE);
617:       assertEquals(12, Node.COLUMN_BITS);
618:       assertEquals(32, Node.INCRDECR_PROP);
619:       assertEquals(46, Node.IS_NAMESPACE);
620:       assertEquals(30, Node.VAR_ARGS_NAME);
621:       assertEquals(56, Node.CHANGE_TIME);
622:       assertEquals(2, Node.POST_FLAG);
623:       assertEquals(49, Node.DIRECT_EVAL);
624:       assertEquals(37, Node.OPT_ARG_NAME);
625:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
626:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
627:       assertEquals(50, Node.FREE_CALL);
628:       assertEquals(54, Node.SLASH_V);
629:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
630:       assertEquals(1, Node.DECR_FLAG);
631:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
632:       assertEquals(55, Node.INFERRED_FUNCTION);
633:       assertEquals(4095, Node.COLUMN_MASK);
634:       assertEquals(43, Node.IS_CONSTANT_NAME);
635:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
636:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
637:       assertEquals(48, Node.DIRECTIVES);
638:       assertEquals(40, Node.ORIGINALNAME_PROP);
639:       assertEquals(57, Node.REFLECTED_OBJECT);
640:       assertEquals(52, Node.LENGTH);
641:       assertEquals(15, Node.NO_SIDE_EFFECTS);
642:       assertEquals(36, Node.QUOTED_PROP);
643:       assertEquals(47, Node.IS_DISPATCHER);
644:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
645:       assertEquals(8, Node.FLAG_NO_THROWS);
646:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
647:       assertEquals(57, Node.LAST_PROP);
648:       assertEquals(53, Node.INPUT_ID);
649:       assertEquals(29, Node.JSDOC_INFO_PROP);
650:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
651:       assertEquals(39, Node.EMPTY_BLOCK);
652:       
653:       Node node1 = Node.newString(78132, "", (-3203), 117);
654:       assertNotNull(node1);
655:       assertFalse(node1.isNew());
656:       assertFalse(node1.isAdd());
657:       assertFalse(node1.isBlock());
658:       assertFalse(node1.isWhile());
659:       assertFalse(node1.isDo());
660:       assertFalse(node1.isCall());
661:       assertFalse(node1.isContinue());
662:       assertFalse(node1.isVar());
663:       assertFalse(node1.hasMoreThanOneChild());
664:       assertFalse(node1.isParamList());
665:       assertFalse(node1.isReturn());
666:       assertFalse(node1.isLabelName());
667:       assertFalse(node1.isStringKey());
668:       assertEquals(78132, node1.getType());
669:       assertEquals((-1), node1.getSourcePosition());
670:       assertFalse(node1.isNumber());
671:       assertFalse(node1.isExprResult());
672:       assertFalse(node1.isVoid());
673:       assertFalse(node1.isTrue());
674:       assertFalse(node1.isDefaultCase());
675:       assertFalse(node1.isArrayLit());
676:       assertFalse(node1.isGetElem());
677:       assertFalse(node1.hasChildren());
678:       assertFalse(node1.isDec());
679:       assertEquals(0, node1.getChildCount());
680:       assertFalse(node1.isAssign());
681:       assertFalse(node1.isTypeOf());
682:       assertFalse(node1.isNull());
683:       assertFalse(node1.isLabel());
684:       assertFalse(node1.isBreak());
685:       assertFalse(node1.isDelProp());
686:       assertFalse(node1.isName());
687:       assertFalse(node1.isAssignAdd());
688:       assertFalse(node1.isEmpty());
689:       assertFalse(node1.isOr());
690:       assertEquals((-1), node1.getCharno());
691:       assertFalse(node1.isInc());
692:       assertFalse(node1.isSwitch());
693:       assertFalse(node1.isThrow());
694:       assertFalse(node1.isHook());
695:       assertFalse(node1.isFalse());
696:       assertFalse(node1.isComma());
697:       assertFalse(node1.isGetProp());
698:       assertFalse(node1.isThis());
699:       assertFalse(node1.isAnd());
700:       assertFalse(node1.isObjectLit());
701:       assertFalse(node1.isCase());
702:       assertFalse(node1.isString());
703:       assertFalse(node1.isGetterDef());
704:       assertFalse(node1.isNot());
705:       assertFalse(node1.isDebugger());
706:       assertFalse(node1.isScript());
707:       assertFalse(node1.hasOneChild());
708:       assertFalse(node1.isTry());
709:       assertFalse(node1.isCast());
710:       assertFalse(node1.isCatch());
711:       assertFalse(node1.isFor());
712:       assertFalse(node1.isInstanceOf());
713:       assertFalse(node1.isRegExp());
714:       assertFalse(node1.isWith());
715:       assertFalse(node1.isFunction());
716:       assertFalse(node1.isNE());
717:       assertFalse(node1.isSetterDef());
718:       assertFalse(node1.isIf());
719:       assertEquals((-1), node1.getLineno());
720:       assertFalse(node1.isIn());
721:       assertEquals(54, Node.SLASH_V);
722:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
723:       assertEquals(57, Node.REFLECTED_OBJECT);
724:       assertEquals(52, Node.LENGTH);
725:       assertEquals(49, Node.DIRECT_EVAL);
726:       assertEquals(50, Node.FREE_CALL);
727:       assertEquals(40, Node.ORIGINALNAME_PROP);
728:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
729:       assertEquals(39, Node.EMPTY_BLOCK);
730:       assertEquals(55, Node.INFERRED_FUNCTION);
731:       assertEquals(2, Node.POST_FLAG);
732:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
733:       assertEquals(8, Node.FLAG_NO_THROWS);
734:       assertEquals(29, Node.JSDOC_INFO_PROP);
735:       assertEquals(30, Node.VAR_ARGS_NAME);
736:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
737:       assertEquals(15, Node.NO_SIDE_EFFECTS);
738:       assertEquals(47, Node.IS_DISPATCHER);
739:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
740:       assertEquals(57, Node.LAST_PROP);
741:       assertEquals(53, Node.INPUT_ID);
742:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
743:       assertEquals(36, Node.QUOTED_PROP);
744:       assertEquals(43, Node.IS_CONSTANT_NAME);
745:       assertEquals(56, Node.CHANGE_TIME);
746:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
747:       assertEquals(48, Node.DIRECTIVES);
748:       assertEquals(37, Node.OPT_ARG_NAME);
749:       assertEquals(46, Node.IS_NAMESPACE);
750:       assertEquals(51, Node.STATIC_SOURCE_FILE);
751:       assertEquals(4095, Node.COLUMN_MASK);
752:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
753:       assertEquals(1, Node.DECR_FLAG);
754:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
755:       assertEquals(12, Node.COLUMN_BITS);
756:       assertEquals(32, Node.INCRDECR_PROP);
757:       assertFalse(node1.equals((Object)node0));
758:       assertNotSame(node1, node0);
759:       
760:       int int0 = node1.getChangeTime();
761:       assertFalse(node1.isNew());
762:       assertFalse(node1.isAdd());
763:       assertFalse(node1.isBlock());
764:       assertFalse(node1.isWhile());
765:       assertFalse(node1.isDo());
766:       assertFalse(node1.isCall());
767:       assertFalse(node1.isContinue());
768:       assertFalse(node1.isVar());
769:       assertFalse(node1.hasMoreThanOneChild());
770:       assertFalse(node1.isParamList());
771:       assertFalse(node1.isReturn());
772:       assertFalse(node1.isLabelName());
773:       assertFalse(node1.isStringKey());
774:       assertEquals(78132, node1.getType());
775:       assertEquals((-1), node1.getSourcePosition());
776:       assertFalse(node1.isNumber());
777:       assertFalse(node1.isExprResult());
778:       assertFalse(node1.isVoid());
779:       assertFalse(node1.isTrue());
780:       assertFalse(node1.isDefaultCase());
781:       assertFalse(node1.isArrayLit());
782:       assertFalse(node1.isGetElem());
783:       assertFalse(node1.hasChildren());
784:       assertFalse(node1.isDec());
785:       assertEquals(0, node1.getChildCount());
786:       assertFalse(node1.isAssign());
787:       assertFalse(node1.isTypeOf());
788:       assertFalse(node1.isNull());
789:       assertFalse(node1.isLabel());
790:       assertFalse(node1.isBreak());
791:       assertFalse(node1.isDelProp());
792:       assertFalse(node1.isName());
793:       assertFalse(node1.isAssignAdd());
794:       assertFalse(node1.isEmpty());
795:       assertFalse(node1.isOr());
796:       assertEquals((-1), node1.getCharno());
797:       assertFalse(node1.isInc());
798:       assertFalse(node1.isSwitch());
799:       assertFalse(node1.isThrow());
800:       assertFalse(node1.isHook());
801:       assertFalse(node1.isFalse());
802:       assertFalse(node1.isComma());
803:       assertFalse(node1.isGetProp());
804:       assertFalse(node1.isThis());
805:       assertFalse(node1.isAnd());
806:       assertFalse(node1.isObjectLit());
807:       assertFalse(node1.isCase());
808:       assertFalse(node1.isString());
809:       assertFalse(node1.isGetterDef());
810:       assertFalse(node1.isNot());
811:       assertFalse(node1.isDebugger());
812:       assertFalse(node1.isScript());
813:       assertFalse(node1.hasOneChild());
814:       assertFalse(node1.isTry());
815:       assertFalse(node1.isCast());
816:       assertFalse(node1.isCatch());
817:       assertFalse(node1.isFor());
818:       assertFalse(node1.isInstanceOf());
819:       assertFalse(node1.isRegExp());
820:       assertFalse(node1.isWith());
821:       assertFalse(node1.isFunction());
822:       assertFalse(node1.isNE());
823:       assertFalse(node1.isSetterDef());
824:       assertFalse(node1.isIf());
825:       assertEquals((-1), node1.getLineno());
826:       assertFalse(node1.isIn());
827:       assertEquals(54, Node.SLASH_V);
828:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
829:       assertEquals(57, Node.REFLECTED_OBJECT);
830:       assertEquals(52, Node.LENGTH);
831:       assertEquals(49, Node.DIRECT_EVAL);
832:       assertEquals(50, Node.FREE_CALL);
833:       assertEquals(40, Node.ORIGINALNAME_PROP);
834:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
835:       assertEquals(39, Node.EMPTY_BLOCK);
836:       assertEquals(55, Node.INFERRED_FUNCTION);
837:       assertEquals(2, Node.POST_FLAG);
838:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
839:       assertEquals(8, Node.FLAG_NO_THROWS);
840:       assertEquals(29, Node.JSDOC_INFO_PROP);
841:       assertEquals(30, Node.VAR_ARGS_NAME);
842:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
843:       assertEquals(15, Node.NO_SIDE_EFFECTS);
844:       assertEquals(47, Node.IS_DISPATCHER);
845:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
846:       assertEquals(57, Node.LAST_PROP);
847:       assertEquals(53, Node.INPUT_ID);
848:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
849:       assertEquals(36, Node.QUOTED_PROP);
850:       assertEquals(43, Node.IS_CONSTANT_NAME);
851:       assertEquals(56, Node.CHANGE_TIME);
852:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
853:       assertEquals(48, Node.DIRECTIVES);
854:       assertEquals(37, Node.OPT_ARG_NAME);
855:       assertEquals(46, Node.IS_NAMESPACE);
856:       assertEquals(51, Node.STATIC_SOURCE_FILE);
857:       assertEquals(4095, Node.COLUMN_MASK);
858:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
859:       assertEquals(1, Node.DECR_FLAG);
860:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
861:       assertEquals(12, Node.COLUMN_BITS);
862:       assertEquals(32, Node.INCRDECR_PROP);
863:       assertEquals(0, int0);
864:       assertFalse(node1.equals((Object)node0));
865:       assertNotSame(node1, node0);
866:       
867:       Node node2 = node1.srcref(node0);
868:       assertNotNull(node2);
869:       assertFalse(node0.isReturn());
870:       assertEquals((-1), node0.getLineno());
871:       assertFalse(node0.isOr());
872:       assertFalse(node0.hasMoreThanOneChild());
873:       assertFalse(node0.isAssignAdd());
874:       assertFalse(node0.isWhile());
875:       assertFalse(node0.isAssign());
876:       assertFalse(node0.isDo());
877:       assertFalse(node0.isTypeOf());
878:       assertFalse(node0.isContinue());
879:       assertFalse(node0.isDec());
880:       assertFalse(node0.isBlock());
881:       assertFalse(node0.isLabel());
882:       assertFalse(node0.hasChildren());
883:       assertFalse(node0.isAdd());
884:       assertEquals(155, node0.getType());
885:       assertFalse(node0.isCall());
886:       assertFalse(node0.isExprResult());
887:       assertFalse(node0.isGetElem());
888:       assertFalse(node0.isNew());
889:       assertFalse(node0.isName());
890:       assertFalse(node0.isNull());
891:       assertEquals(0, node0.getChildCount());
892:       assertFalse(node0.isInstanceOf());
893:       assertFalse(node0.isCatch());
894:       assertFalse(node0.isRegExp());
895:       assertFalse(node0.isDefaultCase());
896:       assertFalse(node0.isWith());
897:       assertFalse(node0.isThis());
898:       assertFalse(node0.isVar());
899:       assertFalse(node0.isHook());
900:       assertFalse(node0.isTry());
901:       assertFalse(node0.isScript());
902:       assertFalse(node0.isArrayLit());
903:       assertFalse(node0.hasOneChild());
904:       assertFalse(node0.isGetterDef());
905:       assertFalse(node0.isLabelName());
906:       assertFalse(node0.isStringKey());
907:       assertFalse(node0.isNumber());
908:       assertFalse(node0.isSwitch());
909:       assertTrue(node0.isCast());
910:       assertFalse(node0.isParamList());
911:       assertEquals((-1), node0.getCharno());
912:       assertFalse(node0.isIn());
913:       assertFalse(node0.isCase());
914:       assertFalse(node0.isFor());
915:       assertFalse(node0.isInc());
916:       assertFalse(node0.isVoid());
917:       assertFalse(node0.isEmpty());
918:       assertFalse(node0.isDelProp());
919:       assertFalse(node0.isIf());
920:       assertFalse(node0.isTrue());
921:       assertFalse(node0.isNE());
922:       assertFalse(node0.isSetterDef());
923:       assertFalse(node0.isGetProp());
924:       assertFalse(node0.isBreak());
925:       assertFalse(node0.isFalse());
926:       assertFalse(node0.isComma());
927:       assertFalse(node0.isFunction());
928:       assertFalse(node0.isThrow());
929:       assertFalse(node0.isString());
930:       assertFalse(node0.isNot());
931:       assertFalse(node0.isAnd());
932:       assertFalse(node0.isObjectLit());
933:       assertEquals((-1), node0.getSourcePosition());
934:       assertFalse(node0.isDebugger());
935:       assertFalse(node1.isNew());
936:       assertFalse(node1.isAdd());
937:       assertFalse(node1.isBlock());
938:       assertFalse(node1.isWhile());
939:       assertFalse(node1.isDo());
940:       assertFalse(node1.isCall());
941:       assertFalse(node1.isContinue());
942:       assertFalse(node1.isVar());
943:       assertFalse(node1.hasMoreThanOneChild());
944:       assertFalse(node1.isParamList());
945:       assertFalse(node1.isReturn());
946:       assertFalse(node1.isLabelName());
947:       assertFalse(node1.isStringKey());
948:       assertEquals(78132, node1.getType());
949:       assertEquals((-1), node1.getSourcePosition());
950:       assertFalse(node1.isNumber());
951:       assertFalse(node1.isExprResult());
952:       assertFalse(node1.isVoid());
953:       assertFalse(node1.isTrue());
954:       assertFalse(node1.isDefaultCase());
955:       assertFalse(node1.isArrayLit());
956:       assertFalse(node1.isGetElem());
957:       assertFalse(node1.hasChildren());
958:       assertFalse(node1.isDec());
959:       assertEquals(0, node1.getChildCount());
960:       assertFalse(node1.isAssign());
961:       assertFalse(node1.isTypeOf());
962:       assertFalse(node1.isNull());
963:       assertFalse(node1.isLabel());
964:       assertFalse(node1.isBreak());
965:       assertFalse(node1.isDelProp());
966:       assertFalse(node1.isName());
967:       assertFalse(node1.isAssignAdd());
968:       assertFalse(node1.isEmpty());
969:       assertFalse(node1.isOr());
970:       assertEquals((-1), node1.getCharno());
971:       assertFalse(node1.isInc());
972:       assertFalse(node1.isSwitch());
973:       assertFalse(node1.isThrow());
974:       assertFalse(node1.isHook());
975:       assertFalse(node1.isFalse());
976:       assertFalse(node1.isComma());
977:       assertFalse(node1.isGetProp());
978:       assertFalse(node1.isThis());
979:       assertFalse(node1.isAnd());
980:       assertFalse(node1.isObjectLit());
981:       assertFalse(node1.isCase());
982:       assertFalse(node1.isString());
983:       assertFalse(node1.isGetterDef());
984:       assertFalse(node1.isNot());
985:       assertFalse(node1.isDebugger());
986:       assertFalse(node1.isScript());
987:       assertFalse(node1.hasOneChild());
988:       assertFalse(node1.isTry());
989:       assertFalse(node1.isCast());
990:       assertFalse(node1.isCatch());
991:       assertFalse(node1.isFor());
992:       assertFalse(node1.isInstanceOf());
993:       assertFalse(node1.isRegExp());
994:       assertFalse(node1.isWith());
995:       assertFalse(node1.isFunction());
996:       assertFalse(node1.isNE());
997:       assertFalse(node1.isSetterDef());
998:       assertFalse(node1.isIf());
999:       assertEquals((-1), node1.getLineno());
1000:       assertFalse(node1.isIn());
1001:       assertFalse(node2.isParamList());
1002:       assertEquals(0, node2.getChildCount());
1003:       assertFalse(node2.isNull());
1004:       assertFalse(node2.isCall());
1005:       assertFalse(node2.isStringKey());
1006:       assertFalse(node2.isCatch());
1007:       assertFalse(node2.isName());
1008:       assertFalse(node2.isDebugger());
1009:       assertFalse(node2.isRegExp());
1010:       assertFalse(node2.isTry());
1011:       assertFalse(node2.isWhile());
1012:       assertFalse(node2.isBlock());
1013:       assertFalse(node2.isTypeOf());
1014:       assertFalse(node2.isOr());
1015:       assertFalse(node2.isAssignAdd());
1016:       assertFalse(node2.isNumber());
1017:       assertFalse(node2.isGetterDef());
1018:       assertFalse(node2.hasChildren());
1019:       assertFalse(node2.isDec());
1020:       assertFalse(node2.isLabel());
1021:       assertFalse(node2.isReturn());
1022:       assertFalse(node2.isAssign());
1023:       assertFalse(node2.isLabelName());
1024:       assertFalse(node2.isDelProp());
1025:       assertFalse(node2.isArrayLit());
1026:       assertFalse(node2.isGetElem());
1027:       assertFalse(node2.isVoid());
1028:       assertFalse(node2.isTrue());
1029:       assertFalse(node2.isNew());
1030:       assertFalse(node2.isDefaultCase());
1031:       assertFalse(node2.isVar());
1032:       assertFalse(node2.isDo());
1033:       assertFalse(node2.isEmpty());
1034:       assertFalse(node2.isAdd());
1035:       assertFalse(node2.isComma());
1036:       assertFalse(node2.isThis());
1037:       assertFalse(node2.isAnd());
1038:       assertFalse(node2.isFalse());
1039:       assertFalse(node2.isWith());
1040:       assertFalse(node2.isBreak());
1041:       assertFalse(node2.isInstanceOf());
1042:       assertEquals((-1), node2.getCharno());
1043:       assertFalse(node2.isExprResult());
1044:       assertFalse(node2.isSwitch());
1045:       assertFalse(node2.isHook());
1046:       assertFalse(node2.isObjectLit());
1047:       assertFalse(node2.isNot());
1048:       assertFalse(node2.isString());
1049:       assertFalse(node2.hasOneChild());
1050:       assertFalse(node2.isCase());
1051:       assertFalse(node2.isScript());
1052:       assertFalse(node2.isGetProp());
1053:       assertEquals(78132, node2.getType());
1054:       assertFalse(node2.isIf());
1055:       assertEquals((-1), node2.getSourcePosition());
1056:       assertFalse(node2.isFor());
1057:       assertFalse(node2.isNE());
1058:       assertFalse(node2.isContinue());
1059:       assertFalse(node2.isCast());
1060:       assertFalse(node2.hasMoreThanOneChild());
1061:       assertEquals((-1), node2.getLineno());
1062:       assertFalse(node2.isFunction());
1063:       assertFalse(node2.isThrow());
1064:       assertFalse(node2.isIn());
1065:       assertFalse(node2.isInc());
1066:       assertFalse(node2.isSetterDef());
1067:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1068:       assertEquals(12, Node.COLUMN_BITS);
1069:       assertEquals(32, Node.INCRDECR_PROP);
1070:       assertEquals(46, Node.IS_NAMESPACE);
1071:       assertEquals(30, Node.VAR_ARGS_NAME);
1072:       assertEquals(56, Node.CHANGE_TIME);
1073:       assertEquals(2, Node.POST_FLAG);
1074:       assertEquals(49, Node.DIRECT_EVAL);
1075:       assertEquals(37, Node.OPT_ARG_NAME);
1076:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1077:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1078:       assertEquals(50, Node.FREE_CALL);
1079:       assertEquals(54, Node.SLASH_V);
1080:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1081:       assertEquals(1, Node.DECR_FLAG);
1082:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1083:       assertEquals(55, Node.INFERRED_FUNCTION);
1084:       assertEquals(4095, Node.COLUMN_MASK);
1085:       assertEquals(43, Node.IS_CONSTANT_NAME);
1086:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1087:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1088:       assertEquals(48, Node.DIRECTIVES);
1089:       assertEquals(40, Node.ORIGINALNAME_PROP);
1090:       assertEquals(57, Node.REFLECTED_OBJECT);
1091:       assertEquals(52, Node.LENGTH);
1092:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1093:       assertEquals(36, Node.QUOTED_PROP);
1094:       assertEquals(47, Node.IS_DISPATCHER);
1095:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1096:       assertEquals(8, Node.FLAG_NO_THROWS);
1097:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1098:       assertEquals(57, Node.LAST_PROP);
1099:       assertEquals(53, Node.INPUT_ID);
1100:       assertEquals(29, Node.JSDOC_INFO_PROP);
1101:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1102:       assertEquals(39, Node.EMPTY_BLOCK);
1103:       assertEquals(54, Node.SLASH_V);
1104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1105:       assertEquals(57, Node.REFLECTED_OBJECT);
1106:       assertEquals(52, Node.LENGTH);
1107:       assertEquals(49, Node.DIRECT_EVAL);
1108:       assertEquals(50, Node.FREE_CALL);
1109:       assertEquals(40, Node.ORIGINALNAME_PROP);
1110:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1111:       assertEquals(39, Node.EMPTY_BLOCK);
1112:       assertEquals(55, Node.INFERRED_FUNCTION);
1113:       assertEquals(2, Node.POST_FLAG);
1114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1115:       assertEquals(8, Node.FLAG_NO_THROWS);
1116:       assertEquals(29, Node.JSDOC_INFO_PROP);
1117:       assertEquals(30, Node.VAR_ARGS_NAME);
1118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1120:       assertEquals(47, Node.IS_DISPATCHER);
1121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1122:       assertEquals(57, Node.LAST_PROP);
1123:       assertEquals(53, Node.INPUT_ID);
1124:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1125:       assertEquals(36, Node.QUOTED_PROP);
1126:       assertEquals(43, Node.IS_CONSTANT_NAME);
1127:       assertEquals(56, Node.CHANGE_TIME);
1128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1129:       assertEquals(48, Node.DIRECTIVES);
1130:       assertEquals(37, Node.OPT_ARG_NAME);
1131:       assertEquals(46, Node.IS_NAMESPACE);
1132:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1133:       assertEquals(4095, Node.COLUMN_MASK);
1134:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1135:       assertEquals(1, Node.DECR_FLAG);
1136:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1137:       assertEquals(12, Node.COLUMN_BITS);
1138:       assertEquals(32, Node.INCRDECR_PROP);
1139:       assertEquals(48, Node.DIRECTIVES);
1140:       assertEquals(8, Node.FLAG_NO_THROWS);
1141:       assertEquals(4095, Node.COLUMN_MASK);
1142:       assertEquals(55, Node.INFERRED_FUNCTION);
1143:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1145:       assertEquals(39, Node.EMPTY_BLOCK);
1146:       assertEquals(50, Node.FREE_CALL);
1147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1148:       assertEquals(43, Node.IS_CONSTANT_NAME);
1149:       assertEquals(36, Node.QUOTED_PROP);
1150:       assertEquals(57, Node.REFLECTED_OBJECT);
1151:       assertEquals(53, Node.INPUT_ID);
1152:       assertEquals(52, Node.LENGTH);
1153:       assertEquals(40, Node.ORIGINALNAME_PROP);
1154:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1155:       assertEquals(30, Node.VAR_ARGS_NAME);
1156:       assertEquals(57, Node.LAST_PROP);
1157:       assertEquals(2, Node.POST_FLAG);
1158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1159:       assertEquals(47, Node.IS_DISPATCHER);
1160:       assertEquals(32, Node.INCRDECR_PROP);
1161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1162:       assertEquals(37, Node.OPT_ARG_NAME);
1163:       assertEquals(29, Node.JSDOC_INFO_PROP);
1164:       assertEquals(49, Node.DIRECT_EVAL);
1165:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1166:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1167:       assertEquals(56, Node.CHANGE_TIME);
1168:       assertEquals(46, Node.IS_NAMESPACE);
1169:       assertEquals(54, Node.SLASH_V);
1170:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1171:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1172:       assertEquals(1, Node.DECR_FLAG);
1173:       assertEquals(12, Node.COLUMN_BITS);
1174:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1175:       assertFalse(node0.equals((Object)node1));
1176:       assertFalse(node1.equals((Object)node0));
1177:       assertFalse(node2.equals((Object)node0));
1178:       assertNotSame(node0, node2);
1179:       assertNotSame(node0, node1);
1180:       assertSame(node1, node2);
1181:       assertNotSame(node1, node0);
1182:       assertNotSame(node2, node0);
1183:       assertSame(node2, node1);
1184:       
1185:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
1186:       assertNotNull(node_FileLevelJsDocBuilder0);
1187:       assertFalse(node0.isReturn());
1188:       assertEquals((-1), node0.getLineno());
1189:       assertFalse(node0.isOr());
1190:       assertFalse(node0.hasMoreThanOneChild());
1191:       assertFalse(node0.isAssignAdd());
1192:       assertFalse(node0.isWhile());
1193:       assertFalse(node0.isAssign());
1194:       assertFalse(node0.isDo());
1195:       assertFalse(node0.isTypeOf());
1196:       assertFalse(node0.isContinue());
1197:       assertFalse(node0.isDec());
1198:       assertFalse(node0.isBlock());
1199:       assertFalse(node0.isLabel());
1200:       assertFalse(node0.hasChildren());
1201:       assertFalse(node0.isAdd());
1202:       assertEquals(155, node0.getType());
1203:       assertFalse(node0.isCall());
1204:       assertFalse(node0.isExprResult());
1205:       assertFalse(node0.isGetElem());
1206:       assertFalse(node0.isNew());
1207:       assertFalse(node0.isName());
1208:       assertFalse(node0.isNull());
1209:       assertEquals(0, node0.getChildCount());
1210:       assertFalse(node0.isInstanceOf());
1211:       assertFalse(node0.isCatch());
1212:       assertFalse(node0.isRegExp());
1213:       assertFalse(node0.isDefaultCase());
1214:       assertFalse(node0.isWith());
1215:       assertFalse(node0.isThis());
1216:       assertFalse(node0.isVar());
1217:       assertFalse(node0.isHook());
1218:       assertFalse(node0.isTry());
1219:       assertFalse(node0.isScript());
1220:       assertFalse(node0.isArrayLit());
1221:       assertFalse(node0.hasOneChild());
1222:       assertFalse(node0.isGetterDef());
1223:       assertFalse(node0.isLabelName());
1224:       assertFalse(node0.isStringKey());
1225:       assertFalse(node0.isNumber());
1226:       assertFalse(node0.isSwitch());
1227:       assertTrue(node0.isCast());
1228:       assertFalse(node0.isParamList());
1229:       assertEquals((-1), node0.getCharno());
1230:       assertFalse(node0.isIn());
1231:       assertFalse(node0.isCase());
1232:       assertFalse(node0.isFor());
1233:       assertFalse(node0.isInc());
1234:       assertFalse(node0.isVoid());
1235:       assertFalse(node0.isEmpty());
1236:       assertFalse(node0.isDelProp());
1237:       assertFalse(node0.isIf());
1238:       assertFalse(node0.isTrue());
1239:       assertFalse(node0.isNE());
1240:       assertFalse(node0.isSetterDef());
1241:       assertFalse(node0.isGetProp());
1242:       assertFalse(node0.isBreak());
1243:       assertFalse(node0.isFalse());
1244:       assertFalse(node0.isComma());
1245:       assertFalse(node0.isFunction());
1246:       assertFalse(node0.isThrow());
1247:       assertFalse(node0.isString());
1248:       assertFalse(node0.isNot());
1249:       assertFalse(node0.isAnd());
1250:       assertFalse(node0.isObjectLit());
1251:       assertEquals((-1), node0.getSourcePosition());
1252:       assertFalse(node0.isDebugger());
1253:       assertFalse(node1.isNew());
1254:       assertFalse(node1.isAdd());
1255:       assertFalse(node1.isBlock());
1256:       assertFalse(node1.isWhile());
1257:       assertFalse(node1.isDo());
1258:       assertFalse(node1.isCall());
1259:       assertFalse(node1.isContinue());
1260:       assertFalse(node1.isVar());
1261:       assertFalse(node1.hasMoreThanOneChild());
1262:       assertFalse(node1.isParamList());
1263:       assertFalse(node1.isReturn());
1264:       assertFalse(node1.isLabelName());
1265:       assertFalse(node1.isStringKey());
1266:       assertEquals(78132, node1.getType());
1267:       assertEquals((-1), node1.getSourcePosition());
1268:       assertFalse(node1.isNumber());
1269:       assertFalse(node1.isExprResult());
1270:       assertFalse(node1.isVoid());
1271:       assertFalse(node1.isTrue());
1272:       assertFalse(node1.isDefaultCase());
1273:       assertFalse(node1.isArrayLit());
1274:       assertFalse(node1.isGetElem());
1275:       assertFalse(node1.hasChildren());
1276:       assertFalse(node1.isDec());
1277:       assertEquals(0, node1.getChildCount());
1278:       assertFalse(node1.isAssign());
1279:       assertFalse(node1.isTypeOf());
1280:       assertFalse(node1.isNull());
1281:       assertFalse(node1.isLabel());
1282:       assertFalse(node1.isBreak());
1283:       assertFalse(node1.isDelProp());
1284:       assertFalse(node1.isName());
1285:       assertFalse(node1.isAssignAdd());
1286:       assertFalse(node1.isEmpty());
1287:       assertFalse(node1.isOr());
1288:       assertEquals((-1), node1.getCharno());
1289:       assertFalse(node1.isInc());
1290:       assertFalse(node1.isSwitch());
1291:       assertFalse(node1.isThrow());
1292:       assertFalse(node1.isHook());
1293:       assertFalse(node1.isFalse());
1294:       assertFalse(node1.isComma());
1295:       assertFalse(node1.isGetProp());
1296:       assertFalse(node1.isThis());
1297:       assertFalse(node1.isAnd());
1298:       assertFalse(node1.isObjectLit());
1299:       assertFalse(node1.isCase());
1300:       assertFalse(node1.isString());
1301:       assertFalse(node1.isGetterDef());
1302:       assertFalse(node1.isNot());
1303:       assertFalse(node1.isDebugger());
1304:       assertFalse(node1.isScript());
1305:       assertFalse(node1.hasOneChild());
1306:       assertFalse(node1.isTry());
1307:       assertFalse(node1.isCast());
1308:       assertFalse(node1.isCatch());
1309:       assertFalse(node1.isFor());
1310:       assertFalse(node1.isInstanceOf());
1311:       assertFalse(node1.isRegExp());
1312:       assertFalse(node1.isWith());
1313:       assertFalse(node1.isFunction());
1314:       assertFalse(node1.isNE());
1315:       assertFalse(node1.isSetterDef());
1316:       assertFalse(node1.isIf());
1317:       assertEquals((-1), node1.getLineno());
1318:       assertFalse(node1.isIn());
1319:       assertFalse(node2.isParamList());
1320:       assertEquals(0, node2.getChildCount());
1321:       assertFalse(node2.isNull());
1322:       assertFalse(node2.isCall());
1323:       assertFalse(node2.isStringKey());
1324:       assertFalse(node2.isCatch());
1325:       assertFalse(node2.isName());
1326:       assertFalse(node2.isDebugger());
1327:       assertFalse(node2.isRegExp());
1328:       assertFalse(node2.isTry());
1329:       assertFalse(node2.isWhile());
1330:       assertFalse(node2.isBlock());
1331:       assertFalse(node2.isTypeOf());
1332:       assertFalse(node2.isOr());
1333:       assertFalse(node2.isAssignAdd());
1334:       assertFalse(node2.isNumber());
1335:       assertFalse(node2.isGetterDef());
1336:       assertFalse(node2.hasChildren());
1337:       assertFalse(node2.isDec());
1338:       assertFalse(node2.isLabel());
1339:       assertFalse(node2.isReturn());
1340:       assertFalse(node2.isAssign());
1341:       assertFalse(node2.isLabelName());
1342:       assertFalse(node2.isDelProp());
1343:       assertFalse(node2.isArrayLit());
1344:       assertFalse(node2.isGetElem());
1345:       assertFalse(node2.isVoid());
1346:       assertFalse(node2.isTrue());
1347:       assertFalse(node2.isNew());
1348:       assertFalse(node2.isDefaultCase());
1349:       assertFalse(node2.isVar());
1350:       assertFalse(node2.isDo());
1351:       assertFalse(node2.isEmpty());
1352:       assertFalse(node2.isAdd());
1353:       assertFalse(node2.isComma());
1354:       assertFalse(node2.isThis());
1355:       assertFalse(node2.isAnd());
1356:       assertFalse(node2.isFalse());
1357:       assertFalse(node2.isWith());
1358:       assertFalse(node2.isBreak());
1359:       assertFalse(node2.isInstanceOf());
1360:       assertEquals((-1), node2.getCharno());
1361:       assertFalse(node2.isExprResult());
1362:       assertFalse(node2.isSwitch());
1363:       assertFalse(node2.isHook());
1364:       assertFalse(node2.isObjectLit());
1365:       assertFalse(node2.isNot());
1366:       assertFalse(node2.isString());
1367:       assertFalse(node2.hasOneChild());
1368:       assertFalse(node2.isCase());
1369:       assertFalse(node2.isScript());
1370:       assertFalse(node2.isGetProp());
1371:       assertEquals(78132, node2.getType());
1372:       assertFalse(node2.isIf());
1373:       assertEquals((-1), node2.getSourcePosition());
1374:       assertFalse(node2.isFor());
1375:       assertFalse(node2.isNE());
1376:       assertFalse(node2.isContinue());
1377:       assertFalse(node2.isCast());
1378:       assertFalse(node2.hasMoreThanOneChild());
1379:       assertEquals((-1), node2.getLineno());
1380:       assertFalse(node2.isFunction());
1381:       assertFalse(node2.isThrow());
1382:       assertFalse(node2.isIn());
1383:       assertFalse(node2.isInc());
1384:       assertFalse(node2.isSetterDef());
1385:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1386:       assertEquals(12, Node.COLUMN_BITS);
1387:       assertEquals(32, Node.INCRDECR_PROP);
1388:       assertEquals(46, Node.IS_NAMESPACE);
1389:       assertEquals(30, Node.VAR_ARGS_NAME);
1390:       assertEquals(56, Node.CHANGE_TIME);
1391:       assertEquals(2, Node.POST_FLAG);
1392:       assertEquals(49, Node.DIRECT_EVAL);
1393:       assertEquals(37, Node.OPT_ARG_NAME);
1394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1395:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1396:       assertEquals(50, Node.FREE_CALL);
1397:       assertEquals(54, Node.SLASH_V);
1398:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1399:       assertEquals(1, Node.DECR_FLAG);
1400:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1401:       assertEquals(55, Node.INFERRED_FUNCTION);
1402:       assertEquals(4095, Node.COLUMN_MASK);
1403:       assertEquals(43, Node.IS_CONSTANT_NAME);
1404:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1405:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1406:       assertEquals(48, Node.DIRECTIVES);
1407:       assertEquals(40, Node.ORIGINALNAME_PROP);
1408:       assertEquals(57, Node.REFLECTED_OBJECT);
1409:       assertEquals(52, Node.LENGTH);
1410:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1411:       assertEquals(36, Node.QUOTED_PROP);
1412:       assertEquals(47, Node.IS_DISPATCHER);
1413:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1414:       assertEquals(8, Node.FLAG_NO_THROWS);
1415:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1416:       assertEquals(57, Node.LAST_PROP);
1417:       assertEquals(53, Node.INPUT_ID);
1418:       assertEquals(29, Node.JSDOC_INFO_PROP);
1419:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1420:       assertEquals(39, Node.EMPTY_BLOCK);
1421:       assertEquals(54, Node.SLASH_V);
1422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1423:       assertEquals(57, Node.REFLECTED_OBJECT);
1424:       assertEquals(52, Node.LENGTH);
1425:       assertEquals(49, Node.DIRECT_EVAL);
1426:       assertEquals(50, Node.FREE_CALL);
1427:       assertEquals(40, Node.ORIGINALNAME_PROP);
1428:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1429:       assertEquals(39, Node.EMPTY_BLOCK);
1430:       assertEquals(55, Node.INFERRED_FUNCTION);
1431:       assertEquals(2, Node.POST_FLAG);
1432:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1433:       assertEquals(8, Node.FLAG_NO_THROWS);
1434:       assertEquals(29, Node.JSDOC_INFO_PROP);
1435:       assertEquals(30, Node.VAR_ARGS_NAME);
1436:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1437:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1438:       assertEquals(47, Node.IS_DISPATCHER);
1439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1440:       assertEquals(57, Node.LAST_PROP);
1441:       assertEquals(53, Node.INPUT_ID);
1442:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1443:       assertEquals(36, Node.QUOTED_PROP);
1444:       assertEquals(43, Node.IS_CONSTANT_NAME);
1445:       assertEquals(56, Node.CHANGE_TIME);
1446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1447:       assertEquals(48, Node.DIRECTIVES);
1448:       assertEquals(37, Node.OPT_ARG_NAME);
1449:       assertEquals(46, Node.IS_NAMESPACE);
1450:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1451:       assertEquals(4095, Node.COLUMN_MASK);
1452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1453:       assertEquals(1, Node.DECR_FLAG);
1454:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1455:       assertEquals(12, Node.COLUMN_BITS);
1456:       assertEquals(32, Node.INCRDECR_PROP);
1457:       assertEquals(48, Node.DIRECTIVES);
1458:       assertEquals(8, Node.FLAG_NO_THROWS);
1459:       assertEquals(4095, Node.COLUMN_MASK);
1460:       assertEquals(55, Node.INFERRED_FUNCTION);
1461:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1462:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1463:       assertEquals(39, Node.EMPTY_BLOCK);
1464:       assertEquals(50, Node.FREE_CALL);
1465:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1466:       assertEquals(43, Node.IS_CONSTANT_NAME);
1467:       assertEquals(36, Node.QUOTED_PROP);
1468:       assertEquals(57, Node.REFLECTED_OBJECT);
1469:       assertEquals(53, Node.INPUT_ID);
1470:       assertEquals(52, Node.LENGTH);
1471:       assertEquals(40, Node.ORIGINALNAME_PROP);
1472:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1473:       assertEquals(30, Node.VAR_ARGS_NAME);
1474:       assertEquals(57, Node.LAST_PROP);
1475:       assertEquals(2, Node.POST_FLAG);
1476:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1477:       assertEquals(47, Node.IS_DISPATCHER);
1478:       assertEquals(32, Node.INCRDECR_PROP);
1479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1480:       assertEquals(37, Node.OPT_ARG_NAME);
1481:       assertEquals(29, Node.JSDOC_INFO_PROP);
1482:       assertEquals(49, Node.DIRECT_EVAL);
1483:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1484:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1485:       assertEquals(56, Node.CHANGE_TIME);
1486:       assertEquals(46, Node.IS_NAMESPACE);
1487:       assertEquals(54, Node.SLASH_V);
1488:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1489:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1490:       assertEquals(1, Node.DECR_FLAG);
1491:       assertEquals(12, Node.COLUMN_BITS);
1492:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1493:       assertFalse(node0.equals((Object)node2));
1494:       assertFalse(node0.equals((Object)node1));
1495:       assertFalse(node1.equals((Object)node0));
1496:       assertFalse(node2.equals((Object)node0));
1497:       
1498:       node_FileLevelJsDocBuilder0.append("");
1499:       assertFalse(node0.isReturn());
1500:       assertEquals((-1), node0.getLineno());
1501:       assertFalse(node0.isOr());
1502:       assertFalse(node0.hasMoreThanOneChild());
1503:       assertFalse(node0.isAssignAdd());
1504:       assertFalse(node0.isWhile());
1505:       assertFalse(node0.isAssign());
1506:       assertFalse(node0.isDo());
1507:       assertFalse(node0.isTypeOf());
1508:       assertFalse(node0.isContinue());
1509:       assertFalse(node0.isDec());
1510:       assertFalse(node0.isBlock());
1511:       assertFalse(node0.isLabel());
1512:       assertFalse(node0.hasChildren());
1513:       assertFalse(node0.isAdd());
1514:       assertEquals(155, node0.getType());
1515:       assertFalse(node0.isCall());
1516:       assertFalse(node0.isExprResult());
1517:       assertFalse(node0.isGetElem());
1518:       assertFalse(node0.isNew());
1519:       assertFalse(node0.isName());
1520:       assertFalse(node0.isNull());
1521:       assertEquals(0, node0.getChildCount());
1522:       assertFalse(node0.isInstanceOf());
1523:       assertFalse(node0.isCatch());
1524:       assertFalse(node0.isRegExp());
1525:       assertFalse(node0.isDefaultCase());
1526:       assertFalse(node0.isWith());
1527:       assertFalse(node0.isThis());
1528:       assertFalse(node0.isVar());
1529:       assertFalse(node0.isHook());
1530:       assertFalse(node0.isTry());
1531:       assertFalse(node0.isScript());
1532:       assertFalse(node0.isArrayLit());
1533:       assertFalse(node0.hasOneChild());
1534:       assertFalse(node0.isGetterDef());
1535:       assertFalse(node0.isLabelName());
1536:       assertFalse(node0.isStringKey());
1537:       assertFalse(node0.isNumber());
1538:       assertFalse(node0.isSwitch());
1539:       assertTrue(node0.isCast());
1540:       assertFalse(node0.isParamList());
1541:       assertEquals((-1), node0.getCharno());
1542:       assertFalse(node0.isIn());
1543:       assertFalse(node0.isCase());
1544:       assertFalse(node0.isFor());
1545:       assertFalse(node0.isInc());
1546:       assertFalse(node0.isVoid());
1547:       assertFalse(node0.isEmpty());
1548:       assertFalse(node0.isDelProp());
1549:       assertFalse(node0.isIf());
1550:       assertFalse(node0.isTrue());
1551:       assertFalse(node0.isNE());
1552:       assertFalse(node0.isSetterDef());
1553:       assertFalse(node0.isGetProp());
1554:       assertFalse(node0.isBreak());
1555:       assertFalse(node0.isFalse());
1556:       assertFalse(node0.isComma());
1557:       assertFalse(node0.isFunction());
1558:       assertFalse(node0.isThrow());
1559:       assertFalse(node0.isString());
1560:       assertFalse(node0.isNot());
1561:       assertFalse(node0.isAnd());
1562:       assertFalse(node0.isObjectLit());
1563:       assertEquals((-1), node0.getSourcePosition());
1564:       assertFalse(node0.isDebugger());
1565:       assertFalse(node1.isNew());
1566:       assertFalse(node1.isAdd());
1567:       assertFalse(node1.isBlock());
1568:       assertFalse(node1.isWhile());
1569:       assertFalse(node1.isDo());
1570:       assertFalse(node1.isCall());
1571:       assertFalse(node1.isContinue());
1572:       assertFalse(node1.isVar());
1573:       assertFalse(node1.hasMoreThanOneChild());
1574:       assertFalse(node1.isParamList());
1575:       assertFalse(node1.isReturn());
1576:       assertFalse(node1.isLabelName());
1577:       assertFalse(node1.isStringKey());
1578:       assertEquals(78132, node1.getType());
1579:       assertEquals((-1), node1.getSourcePosition());
1580:       assertFalse(node1.isNumber());
1581:       assertFalse(node1.isExprResult());
1582:       assertFalse(node1.isVoid());
1583:       assertFalse(node1.isTrue());
1584:       assertFalse(node1.isDefaultCase());
1585:       assertFalse(node1.isArrayLit());
1586:       assertFalse(node1.isGetElem());
1587:       assertFalse(node1.hasChildren());
1588:       assertFalse(node1.isDec());
1589:       assertEquals(0, node1.getChildCount());
1590:       assertFalse(node1.isAssign());
1591:       assertFalse(node1.isTypeOf());
1592:       assertFalse(node1.isNull());
1593:       assertFalse(node1.isLabel());
1594:       assertFalse(node1.isBreak());
1595:       assertFalse(node1.isDelProp());
1596:       assertFalse(node1.isName());
1597:       assertFalse(node1.isAssignAdd());
1598:       assertFalse(node1.isEmpty());
1599:       assertFalse(node1.isOr());
1600:       assertEquals((-1), node1.getCharno());
1601:       assertFalse(node1.isInc());
1602:       assertFalse(node1.isSwitch());
1603:       assertFalse(node1.isThrow());
1604:       assertFalse(node1.isHook());
1605:       assertFalse(node1.isFalse());
1606:       assertFalse(node1.isComma());
1607:       assertFalse(node1.isGetProp());
1608:       assertFalse(node1.isThis());
1609:       assertFalse(node1.isAnd());
1610:       assertFalse(node1.isObjectLit());
1611:       assertFalse(node1.isCase());
1612:       assertFalse(node1.isString());
1613:       assertFalse(node1.isGetterDef());
1614:       assertFalse(node1.isNot());
1615:       assertFalse(node1.isDebugger());
1616:       assertFalse(node1.isScript());
1617:       assertFalse(node1.hasOneChild());
1618:       assertFalse(node1.isTry());
1619:       assertFalse(node1.isCast());
1620:       assertFalse(node1.isCatch());
1621:       assertFalse(node1.isFor());
1622:       assertFalse(node1.isInstanceOf());
1623:       assertFalse(node1.isRegExp());
1624:       assertFalse(node1.isWith());
1625:       assertFalse(node1.isFunction());
1626:       assertFalse(node1.isNE());
1627:       assertFalse(node1.isSetterDef());
1628:       assertFalse(node1.isIf());
1629:       assertEquals((-1), node1.getLineno());
1630:       assertFalse(node1.isIn());
1631:       assertFalse(node2.isParamList());
1632:       assertEquals(0, node2.getChildCount());
1633:       assertFalse(node2.isNull());
1634:       assertFalse(node2.isCall());
1635:       assertFalse(node2.isStringKey());
1636:       assertFalse(node2.isCatch());
1637:       assertFalse(node2.isName());
1638:       assertFalse(node2.isDebugger());
1639:       assertFalse(node2.isRegExp());
1640:       assertFalse(node2.isTry());
1641:       assertFalse(node2.isWhile());
1642:       assertFalse(node2.isBlock());
1643:       assertFalse(node2.isTypeOf());
1644:       assertFalse(node2.isOr());
1645:       assertFalse(node2.isAssignAdd());
1646:       assertFalse(node2.isNumber());
1647:       assertFalse(node2.isGetterDef());
1648:       assertFalse(node2.hasChildren());
1649:       assertFalse(node2.isDec());
1650:       assertFalse(node2.isLabel());
1651:       assertFalse(node2.isReturn());
1652:       assertFalse(node2.isAssign());
1653:       assertFalse(node2.isLabelName());
1654:       assertFalse(node2.isDelProp());
1655:       assertFalse(node2.isArrayLit());
1656:       assertFalse(node2.isGetElem());
1657:       assertFalse(node2.isVoid());
1658:       assertFalse(node2.isTrue());
1659:       assertFalse(node2.isNew());
1660:       assertFalse(node2.isDefaultCase());
1661:       assertFalse(node2.isVar());
1662:       assertFalse(node2.isDo());
1663:       assertFalse(node2.isEmpty());
1664:       assertFalse(node2.isAdd());
1665:       assertFalse(node2.isComma());
1666:       assertFalse(node2.isThis());
1667:       assertFalse(node2.isAnd());
1668:       assertFalse(node2.isFalse());
1669:       assertFalse(node2.isWith());
1670:       assertFalse(node2.isBreak());
1671:       assertFalse(node2.isInstanceOf());
1672:       assertEquals((-1), node2.getCharno());
1673:       assertFalse(node2.isExprResult());
1674:       assertFalse(node2.isSwitch());
1675:       assertFalse(node2.isHook());
1676:       assertFalse(node2.isObjectLit());
1677:       assertFalse(node2.isNot());
1678:       assertFalse(node2.isString());
1679:       assertFalse(node2.hasOneChild());
1680:       assertFalse(node2.isCase());
1681:       assertFalse(node2.isScript());
1682:       assertFalse(node2.isGetProp());
1683:       assertEquals(78132, node2.getType());
1684:       assertFalse(node2.isIf());
1685:       assertEquals((-1), node2.getSourcePosition());
1686:       assertFalse(node2.isFor());
1687:       assertFalse(node2.isNE());
1688:       assertFalse(node2.isContinue());
1689:       assertFalse(node2.isCast());
1690:       assertFalse(node2.hasMoreThanOneChild());
1691:       assertEquals((-1), node2.getLineno());
1692:       assertFalse(node2.isFunction());
1693:       assertFalse(node2.isThrow());
1694:       assertFalse(node2.isIn());
1695:       assertFalse(node2.isInc());
1696:       assertFalse(node2.isSetterDef());
1697:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1698:       assertEquals(12, Node.COLUMN_BITS);
1699:       assertEquals(32, Node.INCRDECR_PROP);
1700:       assertEquals(46, Node.IS_NAMESPACE);
1701:       assertEquals(30, Node.VAR_ARGS_NAME);
1702:       assertEquals(56, Node.CHANGE_TIME);
1703:       assertEquals(2, Node.POST_FLAG);
1704:       assertEquals(49, Node.DIRECT_EVAL);
1705:       assertEquals(37, Node.OPT_ARG_NAME);
1706:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1707:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1708:       assertEquals(50, Node.FREE_CALL);
1709:       assertEquals(54, Node.SLASH_V);
1710:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1711:       assertEquals(1, Node.DECR_FLAG);
1712:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1713:       assertEquals(55, Node.INFERRED_FUNCTION);
1714:       assertEquals(4095, Node.COLUMN_MASK);
1715:       assertEquals(43, Node.IS_CONSTANT_NAME);
1716:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1717:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1718:       assertEquals(48, Node.DIRECTIVES);
1719:       assertEquals(40, Node.ORIGINALNAME_PROP);
1720:       assertEquals(57, Node.REFLECTED_OBJECT);
1721:       assertEquals(52, Node.LENGTH);
1722:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1723:       assertEquals(36, Node.QUOTED_PROP);
1724:       assertEquals(47, Node.IS_DISPATCHER);
1725:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1726:       assertEquals(8, Node.FLAG_NO_THROWS);
1727:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1728:       assertEquals(57, Node.LAST_PROP);
1729:       assertEquals(53, Node.INPUT_ID);
1730:       assertEquals(29, Node.JSDOC_INFO_PROP);
1731:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1732:       assertEquals(39, Node.EMPTY_BLOCK);
1733:       assertEquals(54, Node.SLASH_V);
1734:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1735:       assertEquals(57, Node.REFLECTED_OBJECT);
1736:       assertEquals(52, Node.LENGTH);
1737:       assertEquals(49, Node.DIRECT_EVAL);
1738:       assertEquals(50, Node.FREE_CALL);
1739:       assertEquals(40, Node.ORIGINALNAME_PROP);
1740:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1741:       assertEquals(39, Node.EMPTY_BLOCK);
1742:       assertEquals(55, Node.INFERRED_FUNCTION);
1743:       assertEquals(2, Node.POST_FLAG);
1744:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1745:       assertEquals(8, Node.FLAG_NO_THROWS);
1746:       assertEquals(29, Node.JSDOC_INFO_PROP);
1747:       assertEquals(30, Node.VAR_ARGS_NAME);
1748:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1749:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1750:       assertEquals(47, Node.IS_DISPATCHER);
1751:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1752:       assertEquals(57, Node.LAST_PROP);
1753:       assertEquals(53, Node.INPUT_ID);
1754:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1755:       assertEquals(36, Node.QUOTED_PROP);
1756:       assertEquals(43, Node.IS_CONSTANT_NAME);
1757:       assertEquals(56, Node.CHANGE_TIME);
1758:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1759:       assertEquals(48, Node.DIRECTIVES);
1760:       assertEquals(37, Node.OPT_ARG_NAME);
1761:       assertEquals(46, Node.IS_NAMESPACE);
1762:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1763:       assertEquals(4095, Node.COLUMN_MASK);
1764:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1765:       assertEquals(1, Node.DECR_FLAG);
1766:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1767:       assertEquals(12, Node.COLUMN_BITS);
1768:       assertEquals(32, Node.INCRDECR_PROP);
1769:       assertEquals(48, Node.DIRECTIVES);
1770:       assertEquals(8, Node.FLAG_NO_THROWS);
1771:       assertEquals(4095, Node.COLUMN_MASK);
1772:       assertEquals(55, Node.INFERRED_FUNCTION);
1773:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1774:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1775:       assertEquals(39, Node.EMPTY_BLOCK);
1776:       assertEquals(50, Node.FREE_CALL);
1777:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1778:       assertEquals(43, Node.IS_CONSTANT_NAME);
1779:       assertEquals(36, Node.QUOTED_PROP);
1780:       assertEquals(57, Node.REFLECTED_OBJECT);
1781:       assertEquals(53, Node.INPUT_ID);
1782:       assertEquals(52, Node.LENGTH);
1783:       assertEquals(40, Node.ORIGINALNAME_PROP);
1784:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1785:       assertEquals(30, Node.VAR_ARGS_NAME);
1786:       assertEquals(57, Node.LAST_PROP);
1787:       assertEquals(2, Node.POST_FLAG);
1788:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1789:       assertEquals(47, Node.IS_DISPATCHER);
1790:       assertEquals(32, Node.INCRDECR_PROP);
1791:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1792:       assertEquals(37, Node.OPT_ARG_NAME);
1793:       assertEquals(29, Node.JSDOC_INFO_PROP);
1794:       assertEquals(49, Node.DIRECT_EVAL);
1795:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1796:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1797:       assertEquals(56, Node.CHANGE_TIME);
1798:       assertEquals(46, Node.IS_NAMESPACE);
1799:       assertEquals(54, Node.SLASH_V);
1800:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1801:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1802:       assertEquals(1, Node.DECR_FLAG);
1803:       assertEquals(12, Node.COLUMN_BITS);
1804:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1805:       assertFalse(node0.equals((Object)node2));
1806:       assertFalse(node0.equals((Object)node1));
1807:       assertFalse(node1.equals((Object)node0));
1808:       assertFalse(node2.equals((Object)node0));
1809:       assertNotSame(node0, node2);
1810:       assertNotSame(node0, node1);
1811:       assertSame(node1, node2);
1812:       assertNotSame(node1, node0);
1813:       assertNotSame(node2, node0);
1814:       assertSame(node2, node1);
1815:       
1816:       boolean boolean3 = node2.wasEmptyNode();
1817:       assertFalse(node0.isReturn());
1818:       assertEquals((-1), node0.getLineno());
1819:       assertFalse(node0.isOr());
1820:       assertFalse(node0.hasMoreThanOneChild());
1821:       assertFalse(node0.isAssignAdd());
1822:       assertFalse(node0.isWhile());
1823:       assertFalse(node0.isAssign());
1824:       assertFalse(node0.isDo());
1825:       assertFalse(node0.isTypeOf());
1826:       assertFalse(node0.isContinue());
1827:       assertFalse(node0.isDec());
1828:       assertFalse(node0.isBlock());
1829:       assertFalse(node0.isLabel());
1830:       assertFalse(node0.hasChildren());
1831:       assertFalse(node0.isAdd());
1832:       assertEquals(155, node0.getType());
1833:       assertFalse(node0.isCall());
1834:       assertFalse(node0.isExprResult());
1835:       assertFalse(node0.isGetElem());
1836:       assertFalse(node0.isNew());
1837:       assertFalse(node0.isName());
1838:       assertFalse(node0.isNull());
1839:       assertEquals(0, node0.getChildCount());
1840:       assertFalse(node0.isInstanceOf());
1841:       assertFalse(node0.isCatch());
1842:       assertFalse(node0.isRegExp());
1843:       assertFalse(node0.isDefaultCase());
1844:       assertFalse(node0.isWith());
1845:       assertFalse(node0.isThis());
1846:       assertFalse(node0.isVar());
1847:       assertFalse(node0.isHook());
1848:       assertFalse(node0.isTry());
1849:       assertFalse(node0.isScript());
1850:       assertFalse(node0.isArrayLit());
1851:       assertFalse(node0.hasOneChild());
1852:       assertFalse(node0.isGetterDef());
1853:       assertFalse(node0.isLabelName());
1854:       assertFalse(node0.isStringKey());
1855:       assertFalse(node0.isNumber());
1856:       assertFalse(node0.isSwitch());
1857:       assertTrue(node0.isCast());
1858:       assertFalse(node0.isParamList());
1859:       assertEquals((-1), node0.getCharno());
1860:       assertFalse(node0.isIn());
1861:       assertFalse(node0.isCase());
1862:       assertFalse(node0.isFor());
1863:       assertFalse(node0.isInc());
1864:       assertFalse(node0.isVoid());
1865:       assertFalse(node0.isEmpty());
1866:       assertFalse(node0.isDelProp());
1867:       assertFalse(node0.isIf());
1868:       assertFalse(node0.isTrue());
1869:       assertFalse(node0.isNE());
1870:       assertFalse(node0.isSetterDef());
1871:       assertFalse(node0.isGetProp());
1872:       assertFalse(node0.isBreak());
1873:       assertFalse(node0.isFalse());
1874:       assertFalse(node0.isComma());
1875:       assertFalse(node0.isFunction());
1876:       assertFalse(node0.isThrow());
1877:       assertFalse(node0.isString());
1878:       assertFalse(node0.isNot());
1879:       assertFalse(node0.isAnd());
1880:       assertFalse(node0.isObjectLit());
1881:       assertEquals((-1), node0.getSourcePosition());
1882:       assertFalse(node0.isDebugger());
1883:       assertFalse(node1.isNew());
1884:       assertFalse(node1.isAdd());
1885:       assertFalse(node1.isBlock());
1886:       assertFalse(node1.isWhile());
1887:       assertFalse(node1.isDo());
1888:       assertFalse(node1.isCall());
1889:       assertFalse(node1.isContinue());
1890:       assertFalse(node1.isVar());
1891:       assertFalse(node1.hasMoreThanOneChild());
1892:       assertFalse(node1.isParamList());
1893:       assertFalse(node1.isReturn());
1894:       assertFalse(node1.isLabelName());
1895:       assertFalse(node1.isStringKey());
1896:       assertEquals(78132, node1.getType());
1897:       assertEquals((-1), node1.getSourcePosition());
1898:       assertFalse(node1.isNumber());
1899:       assertFalse(node1.isExprResult());
1900:       assertFalse(node1.isVoid());
1901:       assertFalse(node1.isTrue());
1902:       assertFalse(node1.isDefaultCase());
1903:       assertFalse(node1.isArrayLit());
1904:       assertFalse(node1.isGetElem());
1905:       assertFalse(node1.hasChildren());
1906:       assertFalse(node1.isDec());
1907:       assertEquals(0, node1.getChildCount());
1908:       assertFalse(node1.isAssign());
1909:       assertFalse(node1.isTypeOf());
1910:       assertFalse(node1.isNull());
1911:       assertFalse(node1.isLabel());
1912:       assertFalse(node1.isBreak());
1913:       assertFalse(node1.isDelProp());
1914:       assertFalse(node1.isName());
1915:       assertFalse(node1.isAssignAdd());
1916:       assertFalse(node1.isEmpty());
1917:       assertFalse(node1.isOr());
1918:       assertEquals((-1), node1.getCharno());
1919:       assertFalse(node1.isInc());
1920:       assertFalse(node1.isSwitch());
1921:       assertFalse(node1.isThrow());
1922:       assertFalse(node1.isHook());
1923:       assertFalse(node1.isFalse());
1924:       assertFalse(node1.isComma());
1925:       assertFalse(node1.isGetProp());
1926:       assertFalse(node1.isThis());
1927:       assertFalse(node1.isAnd());
1928:       assertFalse(node1.isObjectLit());
1929:       assertFalse(node1.isCase());
1930:       assertFalse(node1.isString());
1931:       assertFalse(node1.isGetterDef());
1932:       assertFalse(node1.isNot());
1933:       assertFalse(node1.isDebugger());
1934:       assertFalse(node1.isScript());
1935:       assertFalse(node1.hasOneChild());
1936:       assertFalse(node1.isTry());
1937:       assertFalse(node1.isCast());
1938:       assertFalse(node1.isCatch());
1939:       assertFalse(node1.isFor());
1940:       assertFalse(node1.isInstanceOf());
1941:       assertFalse(node1.isRegExp());
1942:       assertFalse(node1.isWith());
1943:       assertFalse(node1.isFunction());
1944:       assertFalse(node1.isNE());
1945:       assertFalse(node1.isSetterDef());
1946:       assertFalse(node1.isIf());
1947:       assertEquals((-1), node1.getLineno());
1948:       assertFalse(node1.isIn());
1949:       assertFalse(node2.isParamList());
1950:       assertEquals(0, node2.getChildCount());
1951:       assertFalse(node2.isNull());
1952:       assertFalse(node2.isCall());
1953:       assertFalse(node2.isStringKey());
1954:       assertFalse(node2.isCatch());
1955:       assertFalse(node2.isName());
1956:       assertFalse(node2.isDebugger());
1957:       assertFalse(node2.isRegExp());
1958:       assertFalse(node2.isTry());
1959:       assertFalse(node2.isWhile());
1960:       assertFalse(node2.isBlock());
1961:       assertFalse(node2.isTypeOf());
1962:       assertFalse(node2.isOr());
1963:       assertFalse(node2.isAssignAdd());
1964:       assertFalse(node2.isNumber());
1965:       assertFalse(node2.isGetterDef());
1966:       assertFalse(node2.hasChildren());
1967:       assertFalse(node2.isDec());
1968:       assertFalse(node2.isLabel());
1969:       assertFalse(node2.isReturn());
1970:       assertFalse(node2.isAssign());
1971:       assertFalse(node2.isLabelName());
1972:       assertFalse(node2.isDelProp());
1973:       assertFalse(node2.isArrayLit());
1974:       assertFalse(node2.isGetElem());
1975:       assertFalse(node2.isVoid());
1976:       assertFalse(node2.isTrue());
1977:       assertFalse(node2.isNew());
1978:       assertFalse(node2.isDefaultCase());
1979:       assertFalse(node2.isVar());
1980:       assertFalse(node2.isDo());
1981:       assertFalse(node2.isEmpty());
1982:       assertFalse(node2.isAdd());
1983:       assertFalse(node2.isComma());
1984:       assertFalse(node2.isThis());
1985:       assertFalse(node2.isAnd());
1986:       assertFalse(node2.isFalse());
1987:       assertFalse(node2.isWith());
1988:       assertFalse(node2.isBreak());
1989:       assertFalse(node2.isInstanceOf());
1990:       assertEquals((-1), node2.getCharno());
1991:       assertFalse(node2.isExprResult());
1992:       assertFalse(node2.isSwitch());
1993:       assertFalse(node2.isHook());
1994:       assertFalse(node2.isObjectLit());
1995:       assertFalse(node2.isNot());
1996:       assertFalse(node2.isString());
1997:       assertFalse(node2.hasOneChild());
1998:       assertFalse(node2.isCase());
1999:       assertFalse(node2.isScript());
2000:       assertFalse(node2.isGetProp());
2001:       assertEquals(78132, node2.getType());
2002:       assertFalse(node2.isIf());
2003:       assertEquals((-1), node2.getSourcePosition());
2004:       assertFalse(node2.isFor());
2005:       assertFalse(node2.isNE());
2006:       assertFalse(node2.isContinue());
2007:       assertFalse(node2.isCast());
2008:       assertFalse(node2.hasMoreThanOneChild());
2009:       assertEquals((-1), node2.getLineno());
2010:       assertFalse(node2.isFunction());
2011:       assertFalse(node2.isThrow());
2012:       assertFalse(node2.isIn());
2013:       assertFalse(node2.isInc());
2014:       assertFalse(node2.isSetterDef());
2015:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2016:       assertEquals(12, Node.COLUMN_BITS);
2017:       assertEquals(32, Node.INCRDECR_PROP);
2018:       assertEquals(46, Node.IS_NAMESPACE);
2019:       assertEquals(30, Node.VAR_ARGS_NAME);
2020:       assertEquals(56, Node.CHANGE_TIME);
2021:       assertEquals(2, Node.POST_FLAG);
2022:       assertEquals(49, Node.DIRECT_EVAL);
2023:       assertEquals(37, Node.OPT_ARG_NAME);
2024:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2025:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2026:       assertEquals(50, Node.FREE_CALL);
2027:       assertEquals(54, Node.SLASH_V);
2028:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2029:       assertEquals(1, Node.DECR_FLAG);
2030:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2031:       assertEquals(55, Node.INFERRED_FUNCTION);
2032:       assertEquals(4095, Node.COLUMN_MASK);
2033:       assertEquals(43, Node.IS_CONSTANT_NAME);
2034:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2035:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2036:       assertEquals(48, Node.DIRECTIVES);
2037:       assertEquals(40, Node.ORIGINALNAME_PROP);
2038:       assertEquals(57, Node.REFLECTED_OBJECT);
2039:       assertEquals(52, Node.LENGTH);
2040:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2041:       assertEquals(36, Node.QUOTED_PROP);
2042:       assertEquals(47, Node.IS_DISPATCHER);
2043:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2044:       assertEquals(8, Node.FLAG_NO_THROWS);
2045:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2046:       assertEquals(57, Node.LAST_PROP);
2047:       assertEquals(53, Node.INPUT_ID);
2048:       assertEquals(29, Node.JSDOC_INFO_PROP);
2049:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2050:       assertEquals(39, Node.EMPTY_BLOCK);
2051:       assertEquals(54, Node.SLASH_V);
2052:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2053:       assertEquals(57, Node.REFLECTED_OBJECT);
2054:       assertEquals(52, Node.LENGTH);
2055:       assertEquals(49, Node.DIRECT_EVAL);
2056:       assertEquals(50, Node.FREE_CALL);
2057:       assertEquals(40, Node.ORIGINALNAME_PROP);
2058:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2059:       assertEquals(39, Node.EMPTY_BLOCK);
2060:       assertEquals(55, Node.INFERRED_FUNCTION);
2061:       assertEquals(2, Node.POST_FLAG);
2062:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2063:       assertEquals(8, Node.FLAG_NO_THROWS);
2064:       assertEquals(29, Node.JSDOC_INFO_PROP);
2065:       assertEquals(30, Node.VAR_ARGS_NAME);
2066:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2067:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2068:       assertEquals(47, Node.IS_DISPATCHER);
2069:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2070:       assertEquals(57, Node.LAST_PROP);
2071:       assertEquals(53, Node.INPUT_ID);
2072:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2073:       assertEquals(36, Node.QUOTED_PROP);
2074:       assertEquals(43, Node.IS_CONSTANT_NAME);
2075:       assertEquals(56, Node.CHANGE_TIME);
2076:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2077:       assertEquals(48, Node.DIRECTIVES);
2078:       assertEquals(37, Node.OPT_ARG_NAME);
2079:       assertEquals(46, Node.IS_NAMESPACE);
2080:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2081:       assertEquals(4095, Node.COLUMN_MASK);
2082:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2083:       assertEquals(1, Node.DECR_FLAG);
2084:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2085:       assertEquals(12, Node.COLUMN_BITS);
2086:       assertEquals(32, Node.INCRDECR_PROP);
2087:       assertEquals(48, Node.DIRECTIVES);
2088:       assertEquals(8, Node.FLAG_NO_THROWS);
2089:       assertEquals(4095, Node.COLUMN_MASK);
2090:       assertEquals(55, Node.INFERRED_FUNCTION);
2091:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2092:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2093:       assertEquals(39, Node.EMPTY_BLOCK);
2094:       assertEquals(50, Node.FREE_CALL);
2095:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2096:       assertEquals(43, Node.IS_CONSTANT_NAME);
2097:       assertEquals(36, Node.QUOTED_PROP);
2098:       assertEquals(57, Node.REFLECTED_OBJECT);
2099:       assertEquals(53, Node.INPUT_ID);
2100:       assertEquals(52, Node.LENGTH);
2101:       assertEquals(40, Node.ORIGINALNAME_PROP);
2102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2103:       assertEquals(30, Node.VAR_ARGS_NAME);
2104:       assertEquals(57, Node.LAST_PROP);
2105:       assertEquals(2, Node.POST_FLAG);
2106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2107:       assertEquals(47, Node.IS_DISPATCHER);
2108:       assertEquals(32, Node.INCRDECR_PROP);
2109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2110:       assertEquals(37, Node.OPT_ARG_NAME);
2111:       assertEquals(29, Node.JSDOC_INFO_PROP);
2112:       assertEquals(49, Node.DIRECT_EVAL);
2113:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2115:       assertEquals(56, Node.CHANGE_TIME);
2116:       assertEquals(46, Node.IS_NAMESPACE);
2117:       assertEquals(54, Node.SLASH_V);
2118:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2120:       assertEquals(1, Node.DECR_FLAG);
2121:       assertEquals(12, Node.COLUMN_BITS);
2122:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2123:       assertFalse(boolean3);
2124:       assertFalse(node0.equals((Object)node2));
2125:       assertFalse(node0.equals((Object)node1));
2126:       assertFalse(node1.equals((Object)node0));
2127:       assertFalse(node2.equals((Object)node0));
2128:       assertTrue(boolean3 == boolean0);
2129:       assertTrue(boolean3 == boolean1);
2130:       assertTrue(boolean3 == boolean2);
2131:       assertNotSame(node0, node2);
2132:       assertNotSame(node0, node1);
2133:       assertSame(node1, node2);
2134:       assertNotSame(node1, node0);
2135:       assertNotSame(node2, node0);
2136:       assertSame(node2, node1);
2137:   }
2138: }
RegularFileObject[/tmp/EvoSuite_59_1629223325049/com/google/javascript/rhino/Node_59_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:05 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_59_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_59_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_59_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.NamedType",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.Sets",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.InputId",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.Iterables",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.common.collect.Sets$ImprovedAbstractSet",
350:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
351:       "com.google.common.collect.Hashing",
352:       "com.google.javascript.rhino.jstype.TernaryValue",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 18:02:05.657 [logback-3] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(155, "");
assertNotNull(node0);
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAdd());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertTrue(node0.isCast());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean0 = node0.getBooleanProp(155);
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAdd());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertTrue(node0.isCast());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(boolean0);

boolean boolean1 = node0.isThrow();
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAdd());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertTrue(node0.isCast());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

boolean boolean2 = node0.isBreak();
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAdd());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertTrue(node0.isCast());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAdd());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertTrue(node0.isCast());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(iterable0.contains(node0));

node0.setQuotedString();
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAdd());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertTrue(node0.isCast());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);

Node node1 = Node.newString(78132, "", (-3203), 117);
assertNotNull(node1);
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertEquals(78132, node1.getType());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);

int int0 = node1.getChangeTime();
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertEquals(78132, node1.getType());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, int0);
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);

Node node2 = node1.srcref(node0);
assertNotNull(node2);
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAdd());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertTrue(node0.isCast());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertEquals(78132, node1.getType());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isCatch());
assertFalse(node2.isName());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertEquals(78132, node2.getType());
assertFalse(node2.isIf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertSame(node2, node1);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAdd());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertTrue(node0.isCast());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertEquals(78132, node1.getType());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isCatch());
assertFalse(node2.isName());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertEquals(78132, node2.getType());
assertFalse(node2.isIf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));

node_FileLevelJsDocBuilder0.append("");
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAdd());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertTrue(node0.isCast());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertEquals(78132, node1.getType());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isCatch());
assertFalse(node2.isName());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertEquals(78132, node2.getType());
assertFalse(node2.isIf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertSame(node2, node1);

boolean boolean3 = node2.wasEmptyNode();
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAdd());
assertEquals(155, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNumber());
assertFalse(node0.isSwitch());
assertTrue(node0.isCast());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertEquals(78132, node1.getType());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isOr());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isCatch());
assertFalse(node2.isName());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertEquals(78132, node2.getType());
assertFalse(node2.isIf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(boolean3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertSame(node2, node1);


[MASTER] 18:02:18.993 [logback-3] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_101_1629223338414/com/google/javascript/rhino/Node_101_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_101_1629223338414/com/google/javascript/rhino/Node_101_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:18.993 [logback-3] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:18.993 [logback-3] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:18.995 [logback-3] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 547
[MASTER] 18:02:19.005 [logback-3] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_101_1629223338414/com/google/javascript/rhino/Node_101_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:18 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_101_tmp__ESTest extends Node_101_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(155, "");
21:       assertNotNull(node0);
22:       assertFalse(node0.isExprResult());
23:       assertFalse(node0.isScript());
24:       assertFalse(node0.hasOneChild());
25:       assertFalse(node0.isAnd());
26:       assertFalse(node0.isObjectLit());
27:       assertFalse(node0.isNumber());
28:       assertFalse(node0.isNot());
29:       assertEquals((-1), node0.getSourcePosition());
30:       assertFalse(node0.isGetProp());
31:       assertFalse(node0.isThis());
32:       assertFalse(node0.isBreak());
33:       assertEquals((-1), node0.getLineno());
34:       assertFalse(node0.isGetElem());
35:       assertFalse(node0.hasMoreThanOneChild());
36:       assertFalse(node0.isWhile());
37:       assertFalse(node0.isInstanceOf());
38:       assertFalse(node0.hasChildren());
39:       assertFalse(node0.isReturn());
40:       assertFalse(node0.isWith());
41:       assertFalse(node0.isHook());
42:       assertFalse(node0.isAssign());
43:       assertFalse(node0.isTypeOf());
44:       assertFalse(node0.isComma());
45:       assertFalse(node0.isDec());
46:       assertFalse(node0.isInc());
47:       assertEquals(155, node0.getType());
48:       assertFalse(node0.isString());
49:       assertFalse(node0.isIn());
50:       assertFalse(node0.isSetterDef());
51:       assertFalse(node0.isThrow());
52:       assertFalse(node0.isContinue());
53:       assertFalse(node0.isFalse());
54:       assertFalse(node0.isDebugger());
55:       assertFalse(node0.isVoid());
56:       assertFalse(node0.isTrue());
57:       assertFalse(node0.isFunction());
58:       assertFalse(node0.isDefaultCase());
59:       assertFalse(node0.isArrayLit());
60:       assertFalse(node0.isTry());
61:       assertFalse(node0.isEmpty());
62:       assertFalse(node0.isGetterDef());
63:       assertFalse(node0.isNull());
64:       assertFalse(node0.isNE());
65:       assertFalse(node0.isDelProp());
66:       assertFalse(node0.isIf());
67:       assertFalse(node0.isCall());
68:       assertFalse(node0.isFor());
69:       assertFalse(node0.isCatch());
70:       assertFalse(node0.isRegExp());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.isSwitch());
73:       assertFalse(node0.isBlock());
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isDo());
76:       assertFalse(node0.isCase());
77:       assertFalse(node0.isNew());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isStringKey());
80:       assertFalse(node0.isOr());
81:       assertFalse(node0.isAssignAdd());
82:       assertFalse(node0.isParamList());
83:       assertTrue(node0.isCast());
84:       assertFalse(node0.isLabelName());
85:       assertFalse(node0.isVar());
86:       assertEquals(0, node0.getChildCount());
87:       assertFalse(node0.isLabel());
88:       assertEquals(53, Node.INPUT_ID);
89:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
90:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
91:       assertEquals(36, Node.QUOTED_PROP);
92:       assertEquals(29, Node.JSDOC_INFO_PROP);
93:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
94:       assertEquals(55, Node.INFERRED_FUNCTION);
95:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
96:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
97:       assertEquals(46, Node.IS_NAMESPACE);
98:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
99:       assertEquals(2, Node.POST_FLAG);
100:       assertEquals(47, Node.IS_DISPATCHER);
101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
102:       assertEquals(40, Node.ORIGINALNAME_PROP);
103:       assertEquals(43, Node.IS_CONSTANT_NAME);
104:       assertEquals(52, Node.LENGTH);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(54, Node.SLASH_V);
107:       assertEquals(57, Node.REFLECTED_OBJECT);
108:       assertEquals(30, Node.VAR_ARGS_NAME);
109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
110:       assertEquals(50, Node.FREE_CALL);
111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
112:       assertEquals(39, Node.EMPTY_BLOCK);
113:       assertEquals(57, Node.LAST_PROP);
114:       assertEquals(32, Node.INCRDECR_PROP);
115:       assertEquals(1, Node.DECR_FLAG);
116:       assertEquals(12, Node.COLUMN_BITS);
117:       assertEquals(4095, Node.COLUMN_MASK);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(49, Node.DIRECT_EVAL);
120:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
121:       assertEquals(56, Node.CHANGE_TIME);
122:       assertEquals(37, Node.OPT_ARG_NAME);
123:       assertEquals(48, Node.DIRECTIVES);
124:       
125:       boolean boolean0 = node0.getBooleanProp(155);
126:       assertFalse(node0.isExprResult());
127:       assertFalse(node0.isScript());
128:       assertFalse(node0.hasOneChild());
129:       assertFalse(node0.isAnd());
130:       assertFalse(node0.isObjectLit());
131:       assertFalse(node0.isNumber());
132:       assertFalse(node0.isNot());
133:       assertEquals((-1), node0.getSourcePosition());
134:       assertFalse(node0.isGetProp());
135:       assertFalse(node0.isThis());
136:       assertFalse(node0.isBreak());
137:       assertEquals((-1), node0.getLineno());
138:       assertFalse(node0.isGetElem());
139:       assertFalse(node0.hasMoreThanOneChild());
140:       assertFalse(node0.isWhile());
141:       assertFalse(node0.isInstanceOf());
142:       assertFalse(node0.hasChildren());
143:       assertFalse(node0.isReturn());
144:       assertFalse(node0.isWith());
145:       assertFalse(node0.isHook());
146:       assertFalse(node0.isAssign());
147:       assertFalse(node0.isTypeOf());
148:       assertFalse(node0.isComma());
149:       assertFalse(node0.isDec());
150:       assertFalse(node0.isInc());
151:       assertEquals(155, node0.getType());
152:       assertFalse(node0.isString());
153:       assertFalse(node0.isIn());
154:       assertFalse(node0.isSetterDef());
155:       assertFalse(node0.isThrow());
156:       assertFalse(node0.isContinue());
157:       assertFalse(node0.isFalse());
158:       assertFalse(node0.isDebugger());
159:       assertFalse(node0.isVoid());
160:       assertFalse(node0.isTrue());
161:       assertFalse(node0.isFunction());
162:       assertFalse(node0.isDefaultCase());
163:       assertFalse(node0.isArrayLit());
164:       assertFalse(node0.isTry());
165:       assertFalse(node0.isEmpty());
166:       assertFalse(node0.isGetterDef());
167:       assertFalse(node0.isNull());
168:       assertFalse(node0.isNE());
169:       assertFalse(node0.isDelProp());
170:       assertFalse(node0.isIf());
171:       assertFalse(node0.isCall());
172:       assertFalse(node0.isFor());
173:       assertFalse(node0.isCatch());
174:       assertFalse(node0.isRegExp());
175:       assertEquals((-1), node0.getCharno());
176:       assertFalse(node0.isSwitch());
177:       assertFalse(node0.isBlock());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isDo());
180:       assertFalse(node0.isCase());
181:       assertFalse(node0.isNew());
182:       assertFalse(node0.isName());
183:       assertFalse(node0.isStringKey());
184:       assertFalse(node0.isOr());
185:       assertFalse(node0.isAssignAdd());
186:       assertFalse(node0.isParamList());
187:       assertTrue(node0.isCast());
188:       assertFalse(node0.isLabelName());
189:       assertFalse(node0.isVar());
190:       assertEquals(0, node0.getChildCount());
191:       assertFalse(node0.isLabel());
192:       assertEquals(53, Node.INPUT_ID);
193:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
194:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
195:       assertEquals(36, Node.QUOTED_PROP);
196:       assertEquals(29, Node.JSDOC_INFO_PROP);
197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
198:       assertEquals(55, Node.INFERRED_FUNCTION);
199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
200:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
201:       assertEquals(46, Node.IS_NAMESPACE);
202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
203:       assertEquals(2, Node.POST_FLAG);
204:       assertEquals(47, Node.IS_DISPATCHER);
205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
206:       assertEquals(40, Node.ORIGINALNAME_PROP);
207:       assertEquals(43, Node.IS_CONSTANT_NAME);
208:       assertEquals(52, Node.LENGTH);
209:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
210:       assertEquals(54, Node.SLASH_V);
211:       assertEquals(57, Node.REFLECTED_OBJECT);
212:       assertEquals(30, Node.VAR_ARGS_NAME);
213:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
214:       assertEquals(50, Node.FREE_CALL);
215:       assertEquals(15, Node.NO_SIDE_EFFECTS);
216:       assertEquals(39, Node.EMPTY_BLOCK);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(32, Node.INCRDECR_PROP);
219:       assertEquals(1, Node.DECR_FLAG);
220:       assertEquals(12, Node.COLUMN_BITS);
221:       assertEquals(4095, Node.COLUMN_MASK);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(49, Node.DIRECT_EVAL);
224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
225:       assertEquals(56, Node.CHANGE_TIME);
226:       assertEquals(37, Node.OPT_ARG_NAME);
227:       assertEquals(48, Node.DIRECTIVES);
228:       assertFalse(boolean0);
229:       
230:       boolean boolean1 = node0.isThrow();
231:       assertFalse(node0.isExprResult());
232:       assertFalse(node0.isScript());
233:       assertFalse(node0.hasOneChild());
234:       assertFalse(node0.isAnd());
235:       assertFalse(node0.isObjectLit());
236:       assertFalse(node0.isNumber());
237:       assertFalse(node0.isNot());
238:       assertEquals((-1), node0.getSourcePosition());
239:       assertFalse(node0.isGetProp());
240:       assertFalse(node0.isThis());
241:       assertFalse(node0.isBreak());
242:       assertEquals((-1), node0.getLineno());
243:       assertFalse(node0.isGetElem());
244:       assertFalse(node0.hasMoreThanOneChild());
245:       assertFalse(node0.isWhile());
246:       assertFalse(node0.isInstanceOf());
247:       assertFalse(node0.hasChildren());
248:       assertFalse(node0.isReturn());
249:       assertFalse(node0.isWith());
250:       assertFalse(node0.isHook());
251:       assertFalse(node0.isAssign());
252:       assertFalse(node0.isTypeOf());
253:       assertFalse(node0.isComma());
254:       assertFalse(node0.isDec());
255:       assertFalse(node0.isInc());
256:       assertEquals(155, node0.getType());
257:       assertFalse(node0.isString());
258:       assertFalse(node0.isIn());
259:       assertFalse(node0.isSetterDef());
260:       assertFalse(node0.isThrow());
261:       assertFalse(node0.isContinue());
262:       assertFalse(node0.isFalse());
263:       assertFalse(node0.isDebugger());
264:       assertFalse(node0.isVoid());
265:       assertFalse(node0.isTrue());
266:       assertFalse(node0.isFunction());
267:       assertFalse(node0.isDefaultCase());
268:       assertFalse(node0.isArrayLit());
269:       assertFalse(node0.isTry());
270:       assertFalse(node0.isEmpty());
271:       assertFalse(node0.isGetterDef());
272:       assertFalse(node0.isNull());
273:       assertFalse(node0.isNE());
274:       assertFalse(node0.isDelProp());
275:       assertFalse(node0.isIf());
276:       assertFalse(node0.isCall());
277:       assertFalse(node0.isFor());
278:       assertFalse(node0.isCatch());
279:       assertFalse(node0.isRegExp());
280:       assertEquals((-1), node0.getCharno());
281:       assertFalse(node0.isSwitch());
282:       assertFalse(node0.isBlock());
283:       assertFalse(node0.isAdd());
284:       assertFalse(node0.isDo());
285:       assertFalse(node0.isCase());
286:       assertFalse(node0.isNew());
287:       assertFalse(node0.isName());
288:       assertFalse(node0.isStringKey());
289:       assertFalse(node0.isOr());
290:       assertFalse(node0.isAssignAdd());
291:       assertFalse(node0.isParamList());
292:       assertTrue(node0.isCast());
293:       assertFalse(node0.isLabelName());
294:       assertFalse(node0.isVar());
295:       assertEquals(0, node0.getChildCount());
296:       assertFalse(node0.isLabel());
297:       assertEquals(53, Node.INPUT_ID);
298:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
299:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
300:       assertEquals(36, Node.QUOTED_PROP);
301:       assertEquals(29, Node.JSDOC_INFO_PROP);
302:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
303:       assertEquals(55, Node.INFERRED_FUNCTION);
304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
305:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
306:       assertEquals(46, Node.IS_NAMESPACE);
307:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
308:       assertEquals(2, Node.POST_FLAG);
309:       assertEquals(47, Node.IS_DISPATCHER);
310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
311:       assertEquals(40, Node.ORIGINALNAME_PROP);
312:       assertEquals(43, Node.IS_CONSTANT_NAME);
313:       assertEquals(52, Node.LENGTH);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(54, Node.SLASH_V);
316:       assertEquals(57, Node.REFLECTED_OBJECT);
317:       assertEquals(30, Node.VAR_ARGS_NAME);
318:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
319:       assertEquals(50, Node.FREE_CALL);
320:       assertEquals(15, Node.NO_SIDE_EFFECTS);
321:       assertEquals(39, Node.EMPTY_BLOCK);
322:       assertEquals(57, Node.LAST_PROP);
323:       assertEquals(32, Node.INCRDECR_PROP);
324:       assertEquals(1, Node.DECR_FLAG);
325:       assertEquals(12, Node.COLUMN_BITS);
326:       assertEquals(4095, Node.COLUMN_MASK);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(49, Node.DIRECT_EVAL);
329:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
330:       assertEquals(56, Node.CHANGE_TIME);
331:       assertEquals(37, Node.OPT_ARG_NAME);
332:       assertEquals(48, Node.DIRECTIVES);
333:       assertFalse(boolean1);
334:       assertTrue(boolean1 == boolean0);
335:       
336:       boolean boolean2 = node0.isBreak();
337:       assertFalse(node0.isExprResult());
338:       assertFalse(node0.isScript());
339:       assertFalse(node0.hasOneChild());
340:       assertFalse(node0.isAnd());
341:       assertFalse(node0.isObjectLit());
342:       assertFalse(node0.isNumber());
343:       assertFalse(node0.isNot());
344:       assertEquals((-1), node0.getSourcePosition());
345:       assertFalse(node0.isGetProp());
346:       assertFalse(node0.isThis());
347:       assertFalse(node0.isBreak());
348:       assertEquals((-1), node0.getLineno());
349:       assertFalse(node0.isGetElem());
350:       assertFalse(node0.hasMoreThanOneChild());
351:       assertFalse(node0.isWhile());
352:       assertFalse(node0.isInstanceOf());
353:       assertFalse(node0.hasChildren());
354:       assertFalse(node0.isReturn());
355:       assertFalse(node0.isWith());
356:       assertFalse(node0.isHook());
357:       assertFalse(node0.isAssign());
358:       assertFalse(node0.isTypeOf());
359:       assertFalse(node0.isComma());
360:       assertFalse(node0.isDec());
361:       assertFalse(node0.isInc());
362:       assertEquals(155, node0.getType());
363:       assertFalse(node0.isString());
364:       assertFalse(node0.isIn());
365:       assertFalse(node0.isSetterDef());
366:       assertFalse(node0.isThrow());
367:       assertFalse(node0.isContinue());
368:       assertFalse(node0.isFalse());
369:       assertFalse(node0.isDebugger());
370:       assertFalse(node0.isVoid());
371:       assertFalse(node0.isTrue());
372:       assertFalse(node0.isFunction());
373:       assertFalse(node0.isDefaultCase());
374:       assertFalse(node0.isArrayLit());
375:       assertFalse(node0.isTry());
376:       assertFalse(node0.isEmpty());
377:       assertFalse(node0.isGetterDef());
378:       assertFalse(node0.isNull());
379:       assertFalse(node0.isNE());
380:       assertFalse(node0.isDelProp());
381:       assertFalse(node0.isIf());
382:       assertFalse(node0.isCall());
383:       assertFalse(node0.isFor());
384:       assertFalse(node0.isCatch());
385:       assertFalse(node0.isRegExp());
386:       assertEquals((-1), node0.getCharno());
387:       assertFalse(node0.isSwitch());
388:       assertFalse(node0.isBlock());
389:       assertFalse(node0.isAdd());
390:       assertFalse(node0.isDo());
391:       assertFalse(node0.isCase());
392:       assertFalse(node0.isNew());
393:       assertFalse(node0.isName());
394:       assertFalse(node0.isStringKey());
395:       assertFalse(node0.isOr());
396:       assertFalse(node0.isAssignAdd());
397:       assertFalse(node0.isParamList());
398:       assertTrue(node0.isCast());
399:       assertFalse(node0.isLabelName());
400:       assertFalse(node0.isVar());
401:       assertEquals(0, node0.getChildCount());
402:       assertFalse(node0.isLabel());
403:       assertEquals(53, Node.INPUT_ID);
404:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
405:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
406:       assertEquals(36, Node.QUOTED_PROP);
407:       assertEquals(29, Node.JSDOC_INFO_PROP);
408:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
409:       assertEquals(55, Node.INFERRED_FUNCTION);
410:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
411:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
412:       assertEquals(46, Node.IS_NAMESPACE);
413:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
414:       assertEquals(2, Node.POST_FLAG);
415:       assertEquals(47, Node.IS_DISPATCHER);
416:       assertEquals(51, Node.STATIC_SOURCE_FILE);
417:       assertEquals(40, Node.ORIGINALNAME_PROP);
418:       assertEquals(43, Node.IS_CONSTANT_NAME);
419:       assertEquals(52, Node.LENGTH);
420:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
421:       assertEquals(54, Node.SLASH_V);
422:       assertEquals(57, Node.REFLECTED_OBJECT);
423:       assertEquals(30, Node.VAR_ARGS_NAME);
424:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
425:       assertEquals(50, Node.FREE_CALL);
426:       assertEquals(15, Node.NO_SIDE_EFFECTS);
427:       assertEquals(39, Node.EMPTY_BLOCK);
428:       assertEquals(57, Node.LAST_PROP);
429:       assertEquals(32, Node.INCRDECR_PROP);
430:       assertEquals(1, Node.DECR_FLAG);
431:       assertEquals(12, Node.COLUMN_BITS);
432:       assertEquals(4095, Node.COLUMN_MASK);
433:       assertEquals(8, Node.FLAG_NO_THROWS);
434:       assertEquals(49, Node.DIRECT_EVAL);
435:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
436:       assertEquals(56, Node.CHANGE_TIME);
437:       assertEquals(37, Node.OPT_ARG_NAME);
438:       assertEquals(48, Node.DIRECTIVES);
439:       assertFalse(boolean2);
440:       assertTrue(boolean2 == boolean1);
441:       assertTrue(boolean2 == boolean0);
442:       
443:       Iterable<Node> iterable0 = node0.children();
444:       assertNotNull(iterable0);
445:       assertFalse(node0.isExprResult());
446:       assertFalse(node0.isScript());
447:       assertFalse(node0.hasOneChild());
448:       assertFalse(node0.isAnd());
449:       assertFalse(node0.isObjectLit());
450:       assertFalse(node0.isNumber());
451:       assertFalse(node0.isNot());
452:       assertEquals((-1), node0.getSourcePosition());
453:       assertFalse(node0.isGetProp());
454:       assertFalse(node0.isThis());
455:       assertFalse(node0.isBreak());
456:       assertEquals((-1), node0.getLineno());
457:       assertFalse(node0.isGetElem());
458:       assertFalse(node0.hasMoreThanOneChild());
459:       assertFalse(node0.isWhile());
460:       assertFalse(node0.isInstanceOf());
461:       assertFalse(node0.hasChildren());
462:       assertFalse(node0.isReturn());
463:       assertFalse(node0.isWith());
464:       assertFalse(node0.isHook());
465:       assertFalse(node0.isAssign());
466:       assertFalse(node0.isTypeOf());
467:       assertFalse(node0.isComma());
468:       assertFalse(node0.isDec());
469:       assertFalse(node0.isInc());
470:       assertEquals(155, node0.getType());
471:       assertFalse(node0.isString());
472:       assertFalse(node0.isIn());
473:       assertFalse(node0.isSetterDef());
474:       assertFalse(node0.isThrow());
475:       assertFalse(node0.isContinue());
476:       assertFalse(node0.isFalse());
477:       assertFalse(node0.isDebugger());
478:       assertFalse(node0.isVoid());
479:       assertFalse(node0.isTrue());
480:       assertFalse(node0.isFunction());
481:       assertFalse(node0.isDefaultCase());
482:       assertFalse(node0.isArrayLit());
483:       assertFalse(node0.isTry());
484:       assertFalse(node0.isEmpty());
485:       assertFalse(node0.isGetterDef());
486:       assertFalse(node0.isNull());
487:       assertFalse(node0.isNE());
488:       assertFalse(node0.isDelProp());
489:       assertFalse(node0.isIf());
490:       assertFalse(node0.isCall());
491:       assertFalse(node0.isFor());
492:       assertFalse(node0.isCatch());
493:       assertFalse(node0.isRegExp());
494:       assertEquals((-1), node0.getCharno());
495:       assertFalse(node0.isSwitch());
496:       assertFalse(node0.isBlock());
497:       assertFalse(node0.isAdd());
498:       assertFalse(node0.isDo());
499:       assertFalse(node0.isCase());
500:       assertFalse(node0.isNew());
501:       assertFalse(node0.isName());
502:       assertFalse(node0.isStringKey());
503:       assertFalse(node0.isOr());
504:       assertFalse(node0.isAssignAdd());
505:       assertFalse(node0.isParamList());
506:       assertTrue(node0.isCast());
507:       assertFalse(node0.isLabelName());
508:       assertFalse(node0.isVar());
509:       assertEquals(0, node0.getChildCount());
510:       assertFalse(node0.isLabel());
511:       assertEquals(53, Node.INPUT_ID);
512:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
514:       assertEquals(36, Node.QUOTED_PROP);
515:       assertEquals(29, Node.JSDOC_INFO_PROP);
516:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
517:       assertEquals(55, Node.INFERRED_FUNCTION);
518:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
519:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
520:       assertEquals(46, Node.IS_NAMESPACE);
521:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
522:       assertEquals(2, Node.POST_FLAG);
523:       assertEquals(47, Node.IS_DISPATCHER);
524:       assertEquals(51, Node.STATIC_SOURCE_FILE);
525:       assertEquals(40, Node.ORIGINALNAME_PROP);
526:       assertEquals(43, Node.IS_CONSTANT_NAME);
527:       assertEquals(52, Node.LENGTH);
528:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
529:       assertEquals(54, Node.SLASH_V);
530:       assertEquals(57, Node.REFLECTED_OBJECT);
531:       assertEquals(30, Node.VAR_ARGS_NAME);
532:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
533:       assertEquals(50, Node.FREE_CALL);
534:       assertEquals(15, Node.NO_SIDE_EFFECTS);
535:       assertEquals(39, Node.EMPTY_BLOCK);
536:       assertEquals(57, Node.LAST_PROP);
537:       assertEquals(32, Node.INCRDECR_PROP);
538:       assertEquals(1, Node.DECR_FLAG);
539:       assertEquals(12, Node.COLUMN_BITS);
540:       assertEquals(4095, Node.COLUMN_MASK);
541:       assertEquals(8, Node.FLAG_NO_THROWS);
542:       assertEquals(49, Node.DIRECT_EVAL);
543:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
544:       assertEquals(56, Node.CHANGE_TIME);
545:       assertEquals(37, Node.OPT_ARG_NAME);
546:       assertEquals(48, Node.DIRECTIVES);
547:       assertFalse(iterable0.contains(node0));
548:       
549:       node0.setQuotedString();
550:       assertFalse(node0.isExprResult());
551:       assertFalse(node0.isScript());
552:       assertFalse(node0.hasOneChild());
553:       assertFalse(node0.isAnd());
554:       assertFalse(node0.isObjectLit());
555:       assertFalse(node0.isNumber());
556:       assertFalse(node0.isNot());
557:       assertEquals((-1), node0.getSourcePosition());
558:       assertFalse(node0.isGetProp());
559:       assertFalse(node0.isThis());
560:       assertFalse(node0.isBreak());
561:       assertEquals((-1), node0.getLineno());
562:       assertFalse(node0.isGetElem());
563:       assertFalse(node0.hasMoreThanOneChild());
564:       assertFalse(node0.isWhile());
565:       assertFalse(node0.isInstanceOf());
566:       assertFalse(node0.hasChildren());
567:       assertFalse(node0.isReturn());
568:       assertFalse(node0.isWith());
569:       assertFalse(node0.isHook());
570:       assertFalse(node0.isAssign());
571:       assertFalse(node0.isTypeOf());
572:       assertFalse(node0.isComma());
573:       assertFalse(node0.isDec());
574:       assertFalse(node0.isInc());
575:       assertEquals(155, node0.getType());
576:       assertFalse(node0.isString());
577:       assertFalse(node0.isIn());
578:       assertFalse(node0.isSetterDef());
579:       assertFalse(node0.isThrow());
580:       assertFalse(node0.isContinue());
581:       assertFalse(node0.isFalse());
582:       assertFalse(node0.isDebugger());
583:       assertFalse(node0.isVoid());
584:       assertFalse(node0.isTrue());
585:       assertFalse(node0.isFunction());
586:       assertFalse(node0.isDefaultCase());
587:       assertFalse(node0.isArrayLit());
588:       assertFalse(node0.isTry());
589:       assertFalse(node0.isEmpty());
590:       assertFalse(node0.isGetterDef());
591:       assertFalse(node0.isNull());
592:       assertFalse(node0.isNE());
593:       assertFalse(node0.isDelProp());
594:       assertFalse(node0.isIf());
595:       assertFalse(node0.isCall());
596:       assertFalse(node0.isFor());
597:       assertFalse(node0.isCatch());
598:       assertFalse(node0.isRegExp());
599:       assertEquals((-1), node0.getCharno());
600:       assertFalse(node0.isSwitch());
601:       assertFalse(node0.isBlock());
602:       assertFalse(node0.isAdd());
603:       assertFalse(node0.isDo());
604:       assertFalse(node0.isCase());
605:       assertFalse(node0.isNew());
606:       assertFalse(node0.isName());
607:       assertFalse(node0.isStringKey());
608:       assertFalse(node0.isOr());
609:       assertFalse(node0.isAssignAdd());
610:       assertFalse(node0.isParamList());
611:       assertTrue(node0.isCast());
612:       assertFalse(node0.isLabelName());
613:       assertFalse(node0.isVar());
614:       assertEquals(0, node0.getChildCount());
615:       assertFalse(node0.isLabel());
616:       assertEquals(53, Node.INPUT_ID);
617:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
618:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
619:       assertEquals(36, Node.QUOTED_PROP);
620:       assertEquals(29, Node.JSDOC_INFO_PROP);
621:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
622:       assertEquals(55, Node.INFERRED_FUNCTION);
623:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
624:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
625:       assertEquals(46, Node.IS_NAMESPACE);
626:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
627:       assertEquals(2, Node.POST_FLAG);
628:       assertEquals(47, Node.IS_DISPATCHER);
629:       assertEquals(51, Node.STATIC_SOURCE_FILE);
630:       assertEquals(40, Node.ORIGINALNAME_PROP);
631:       assertEquals(43, Node.IS_CONSTANT_NAME);
632:       assertEquals(52, Node.LENGTH);
633:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
634:       assertEquals(54, Node.SLASH_V);
635:       assertEquals(57, Node.REFLECTED_OBJECT);
636:       assertEquals(30, Node.VAR_ARGS_NAME);
637:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
638:       assertEquals(50, Node.FREE_CALL);
639:       assertEquals(15, Node.NO_SIDE_EFFECTS);
640:       assertEquals(39, Node.EMPTY_BLOCK);
641:       assertEquals(57, Node.LAST_PROP);
642:       assertEquals(32, Node.INCRDECR_PROP);
643:       assertEquals(1, Node.DECR_FLAG);
644:       assertEquals(12, Node.COLUMN_BITS);
645:       assertEquals(4095, Node.COLUMN_MASK);
646:       assertEquals(8, Node.FLAG_NO_THROWS);
647:       assertEquals(49, Node.DIRECT_EVAL);
648:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
649:       assertEquals(56, Node.CHANGE_TIME);
650:       assertEquals(37, Node.OPT_ARG_NAME);
651:       assertEquals(48, Node.DIRECTIVES);
652:       
653:       Node node1 = Node.newString(78132, "", (-3203), 117);
654:       assertNotNull(node1);
655:       assertFalse(node1.isGetterDef());
656:       assertFalse(node1.isIf());
657:       assertFalse(node1.isFor());
658:       assertFalse(node1.isNE());
659:       assertFalse(node1.isDebugger());
660:       assertFalse(node1.isTry());
661:       assertFalse(node1.isIn());
662:       assertFalse(node1.isEmpty());
663:       assertFalse(node1.isDefaultCase());
664:       assertEquals(0, node1.getChildCount());
665:       assertFalse(node1.isParamList());
666:       assertFalse(node1.isSwitch());
667:       assertFalse(node1.isFunction());
668:       assertFalse(node1.isArrayLit());
669:       assertFalse(node1.isName());
670:       assertFalse(node1.isVar());
671:       assertFalse(node1.isNull());
672:       assertFalse(node1.isGetProp());
673:       assertFalse(node1.isNew());
674:       assertFalse(node1.isString());
675:       assertFalse(node1.isAdd());
676:       assertFalse(node1.isWhile());
677:       assertFalse(node1.isTrue());
678:       assertFalse(node1.isReturn());
679:       assertFalse(node1.isVoid());
680:       assertFalse(node1.isComma());
681:       assertFalse(node1.isTypeOf());
682:       assertFalse(node1.isBreak());
683:       assertFalse(node1.isDelProp());
684:       assertFalse(node1.isCall());
685:       assertFalse(node1.isGetElem());
686:       assertFalse(node1.isExprResult());
687:       assertEquals(78132, node1.getType());
688:       assertFalse(node1.isAssign());
689:       assertFalse(node1.isLabelName());
690:       assertFalse(node1.hasChildren());
691:       assertFalse(node1.isDec());
692:       assertEquals((-1), node1.getSourcePosition());
693:       assertFalse(node1.isOr());
694:       assertFalse(node1.isAssignAdd());
695:       assertFalse(node1.isNumber());
696:       assertFalse(node1.hasOneChild());
697:       assertFalse(node1.isScript());
698:       assertFalse(node1.isAnd());
699:       assertFalse(node1.isContinue());
700:       assertFalse(node1.isNot());
701:       assertFalse(node1.isDo());
702:       assertFalse(node1.isObjectLit());
703:       assertFalse(node1.isLabel());
704:       assertFalse(node1.isCast());
705:       assertFalse(node1.isThrow());
706:       assertFalse(node1.isStringKey());
707:       assertFalse(node1.isFalse());
708:       assertFalse(node1.isBlock());
709:       assertFalse(node1.isThis());
710:       assertFalse(node1.isHook());
711:       assertEquals((-1), node1.getCharno());
712:       assertFalse(node1.isInc());
713:       assertFalse(node1.isSetterDef());
714:       assertFalse(node1.isCase());
715:       assertFalse(node1.hasMoreThanOneChild());
716:       assertFalse(node1.isWith());
717:       assertFalse(node1.isRegExp());
718:       assertFalse(node1.isInstanceOf());
719:       assertEquals((-1), node1.getLineno());
720:       assertFalse(node1.isCatch());
721:       assertEquals(29, Node.JSDOC_INFO_PROP);
722:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
723:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
724:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
725:       assertEquals(37, Node.OPT_ARG_NAME);
726:       assertEquals(32, Node.INCRDECR_PROP);
727:       assertEquals(2, Node.POST_FLAG);
728:       assertEquals(12, Node.COLUMN_BITS);
729:       assertEquals(47, Node.IS_DISPATCHER);
730:       assertEquals(49, Node.DIRECT_EVAL);
731:       assertEquals(57, Node.LAST_PROP);
732:       assertEquals(4095, Node.COLUMN_MASK);
733:       assertEquals(55, Node.INFERRED_FUNCTION);
734:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
735:       assertEquals(15, Node.NO_SIDE_EFFECTS);
736:       assertEquals(53, Node.INPUT_ID);
737:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
738:       assertEquals(48, Node.DIRECTIVES);
739:       assertEquals(52, Node.LENGTH);
740:       assertEquals(8, Node.FLAG_NO_THROWS);
741:       assertEquals(56, Node.CHANGE_TIME);
742:       assertEquals(36, Node.QUOTED_PROP);
743:       assertEquals(57, Node.REFLECTED_OBJECT);
744:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
745:       assertEquals(50, Node.FREE_CALL);
746:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
747:       assertEquals(40, Node.ORIGINALNAME_PROP);
748:       assertEquals(39, Node.EMPTY_BLOCK);
749:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
750:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
751:       assertEquals(30, Node.VAR_ARGS_NAME);
752:       assertEquals(1, Node.DECR_FLAG);
753:       assertEquals(43, Node.IS_CONSTANT_NAME);
754:       assertEquals(51, Node.STATIC_SOURCE_FILE);
755:       assertEquals(46, Node.IS_NAMESPACE);
756:       assertEquals(54, Node.SLASH_V);
757:       assertFalse(node1.equals((Object)node0));
758:       assertNotSame(node1, node0);
759:       
760:       int int0 = node1.getChangeTime();
761:       assertFalse(node1.isGetterDef());
762:       assertFalse(node1.isIf());
763:       assertFalse(node1.isFor());
764:       assertFalse(node1.isNE());
765:       assertFalse(node1.isDebugger());
766:       assertFalse(node1.isTry());
767:       assertFalse(node1.isIn());
768:       assertFalse(node1.isEmpty());
769:       assertFalse(node1.isDefaultCase());
770:       assertEquals(0, node1.getChildCount());
771:       assertFalse(node1.isParamList());
772:       assertFalse(node1.isSwitch());
773:       assertFalse(node1.isFunction());
774:       assertFalse(node1.isArrayLit());
775:       assertFalse(node1.isName());
776:       assertFalse(node1.isVar());
777:       assertFalse(node1.isNull());
778:       assertFalse(node1.isGetProp());
779:       assertFalse(node1.isNew());
780:       assertFalse(node1.isString());
781:       assertFalse(node1.isAdd());
782:       assertFalse(node1.isWhile());
783:       assertFalse(node1.isTrue());
784:       assertFalse(node1.isReturn());
785:       assertFalse(node1.isVoid());
786:       assertFalse(node1.isComma());
787:       assertFalse(node1.isTypeOf());
788:       assertFalse(node1.isBreak());
789:       assertFalse(node1.isDelProp());
790:       assertFalse(node1.isCall());
791:       assertFalse(node1.isGetElem());
792:       assertFalse(node1.isExprResult());
793:       assertEquals(78132, node1.getType());
794:       assertFalse(node1.isAssign());
795:       assertFalse(node1.isLabelName());
796:       assertFalse(node1.hasChildren());
797:       assertFalse(node1.isDec());
798:       assertEquals((-1), node1.getSourcePosition());
799:       assertFalse(node1.isOr());
800:       assertFalse(node1.isAssignAdd());
801:       assertFalse(node1.isNumber());
802:       assertFalse(node1.hasOneChild());
803:       assertFalse(node1.isScript());
804:       assertFalse(node1.isAnd());
805:       assertFalse(node1.isContinue());
806:       assertFalse(node1.isNot());
807:       assertFalse(node1.isDo());
808:       assertFalse(node1.isObjectLit());
809:       assertFalse(node1.isLabel());
810:       assertFalse(node1.isCast());
811:       assertFalse(node1.isThrow());
812:       assertFalse(node1.isStringKey());
813:       assertFalse(node1.isFalse());
814:       assertFalse(node1.isBlock());
815:       assertFalse(node1.isThis());
816:       assertFalse(node1.isHook());
817:       assertEquals((-1), node1.getCharno());
818:       assertFalse(node1.isInc());
819:       assertFalse(node1.isSetterDef());
820:       assertFalse(node1.isCase());
821:       assertFalse(node1.hasMoreThanOneChild());
822:       assertFalse(node1.isWith());
823:       assertFalse(node1.isRegExp());
824:       assertFalse(node1.isInstanceOf());
825:       assertEquals((-1), node1.getLineno());
826:       assertFalse(node1.isCatch());
827:       assertEquals(29, Node.JSDOC_INFO_PROP);
828:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
829:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
830:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
831:       assertEquals(37, Node.OPT_ARG_NAME);
832:       assertEquals(32, Node.INCRDECR_PROP);
833:       assertEquals(2, Node.POST_FLAG);
834:       assertEquals(12, Node.COLUMN_BITS);
835:       assertEquals(47, Node.IS_DISPATCHER);
836:       assertEquals(49, Node.DIRECT_EVAL);
837:       assertEquals(57, Node.LAST_PROP);
838:       assertEquals(4095, Node.COLUMN_MASK);
839:       assertEquals(55, Node.INFERRED_FUNCTION);
840:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
841:       assertEquals(15, Node.NO_SIDE_EFFECTS);
842:       assertEquals(53, Node.INPUT_ID);
843:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
844:       assertEquals(48, Node.DIRECTIVES);
845:       assertEquals(52, Node.LENGTH);
846:       assertEquals(8, Node.FLAG_NO_THROWS);
847:       assertEquals(56, Node.CHANGE_TIME);
848:       assertEquals(36, Node.QUOTED_PROP);
849:       assertEquals(57, Node.REFLECTED_OBJECT);
850:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
851:       assertEquals(50, Node.FREE_CALL);
852:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
853:       assertEquals(40, Node.ORIGINALNAME_PROP);
854:       assertEquals(39, Node.EMPTY_BLOCK);
855:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
856:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
857:       assertEquals(30, Node.VAR_ARGS_NAME);
858:       assertEquals(1, Node.DECR_FLAG);
859:       assertEquals(43, Node.IS_CONSTANT_NAME);
860:       assertEquals(51, Node.STATIC_SOURCE_FILE);
861:       assertEquals(46, Node.IS_NAMESPACE);
862:       assertEquals(54, Node.SLASH_V);
863:       assertEquals(0, int0);
864:       assertFalse(node1.equals((Object)node0));
865:       assertNotSame(node1, node0);
866:       
867:       Node node2 = node1.srcref(node0);
868:       assertNotNull(node2);
869:       assertFalse(node0.isExprResult());
870:       assertFalse(node0.isScript());
871:       assertFalse(node0.hasOneChild());
872:       assertFalse(node0.isAnd());
873:       assertFalse(node0.isObjectLit());
874:       assertFalse(node0.isNumber());
875:       assertFalse(node0.isNot());
876:       assertEquals((-1), node0.getSourcePosition());
877:       assertFalse(node0.isGetProp());
878:       assertFalse(node0.isThis());
879:       assertFalse(node0.isBreak());
880:       assertEquals((-1), node0.getLineno());
881:       assertFalse(node0.isGetElem());
882:       assertFalse(node0.hasMoreThanOneChild());
883:       assertFalse(node0.isWhile());
884:       assertFalse(node0.isInstanceOf());
885:       assertFalse(node0.hasChildren());
886:       assertFalse(node0.isReturn());
887:       assertFalse(node0.isWith());
888:       assertFalse(node0.isHook());
889:       assertFalse(node0.isAssign());
890:       assertFalse(node0.isTypeOf());
891:       assertFalse(node0.isComma());
892:       assertFalse(node0.isDec());
893:       assertFalse(node0.isInc());
894:       assertEquals(155, node0.getType());
895:       assertFalse(node0.isString());
896:       assertFalse(node0.isIn());
897:       assertFalse(node0.isSetterDef());
898:       assertFalse(node0.isThrow());
899:       assertFalse(node0.isContinue());
900:       assertFalse(node0.isFalse());
901:       assertFalse(node0.isDebugger());
902:       assertFalse(node0.isVoid());
903:       assertFalse(node0.isTrue());
904:       assertFalse(node0.isFunction());
905:       assertFalse(node0.isDefaultCase());
906:       assertFalse(node0.isArrayLit());
907:       assertFalse(node0.isTry());
908:       assertFalse(node0.isEmpty());
909:       assertFalse(node0.isGetterDef());
910:       assertFalse(node0.isNull());
911:       assertFalse(node0.isNE());
912:       assertFalse(node0.isDelProp());
913:       assertFalse(node0.isIf());
914:       assertFalse(node0.isCall());
915:       assertFalse(node0.isFor());
916:       assertFalse(node0.isCatch());
917:       assertFalse(node0.isRegExp());
918:       assertEquals((-1), node0.getCharno());
919:       assertFalse(node0.isSwitch());
920:       assertFalse(node0.isBlock());
921:       assertFalse(node0.isAdd());
922:       assertFalse(node0.isDo());
923:       assertFalse(node0.isCase());
924:       assertFalse(node0.isNew());
925:       assertFalse(node0.isName());
926:       assertFalse(node0.isStringKey());
927:       assertFalse(node0.isOr());
928:       assertFalse(node0.isAssignAdd());
929:       assertFalse(node0.isParamList());
930:       assertTrue(node0.isCast());
931:       assertFalse(node0.isLabelName());
932:       assertFalse(node0.isVar());
933:       assertEquals(0, node0.getChildCount());
934:       assertFalse(node0.isLabel());
935:       assertFalse(node1.isGetterDef());
936:       assertFalse(node1.isIf());
937:       assertFalse(node1.isFor());
938:       assertFalse(node1.isNE());
939:       assertFalse(node1.isDebugger());
940:       assertFalse(node1.isTry());
941:       assertFalse(node1.isIn());
942:       assertFalse(node1.isEmpty());
943:       assertFalse(node1.isDefaultCase());
944:       assertEquals(0, node1.getChildCount());
945:       assertFalse(node1.isParamList());
946:       assertFalse(node1.isSwitch());
947:       assertFalse(node1.isFunction());
948:       assertFalse(node1.isArrayLit());
949:       assertFalse(node1.isName());
950:       assertFalse(node1.isVar());
951:       assertFalse(node1.isNull());
952:       assertFalse(node1.isGetProp());
953:       assertFalse(node1.isNew());
954:       assertFalse(node1.isString());
955:       assertFalse(node1.isAdd());
956:       assertFalse(node1.isWhile());
957:       assertFalse(node1.isTrue());
958:       assertFalse(node1.isReturn());
959:       assertFalse(node1.isVoid());
960:       assertFalse(node1.isComma());
961:       assertFalse(node1.isTypeOf());
962:       assertFalse(node1.isBreak());
963:       assertFalse(node1.isDelProp());
964:       assertFalse(node1.isCall());
965:       assertFalse(node1.isGetElem());
966:       assertFalse(node1.isExprResult());
967:       assertEquals(78132, node1.getType());
968:       assertFalse(node1.isAssign());
969:       assertFalse(node1.isLabelName());
970:       assertFalse(node1.hasChildren());
971:       assertFalse(node1.isDec());
972:       assertEquals((-1), node1.getSourcePosition());
973:       assertFalse(node1.isOr());
974:       assertFalse(node1.isAssignAdd());
975:       assertFalse(node1.isNumber());
976:       assertFalse(node1.hasOneChild());
977:       assertFalse(node1.isScript());
978:       assertFalse(node1.isAnd());
979:       assertFalse(node1.isContinue());
980:       assertFalse(node1.isNot());
981:       assertFalse(node1.isDo());
982:       assertFalse(node1.isObjectLit());
983:       assertFalse(node1.isLabel());
984:       assertFalse(node1.isCast());
985:       assertFalse(node1.isThrow());
986:       assertFalse(node1.isStringKey());
987:       assertFalse(node1.isFalse());
988:       assertFalse(node1.isBlock());
989:       assertFalse(node1.isThis());
990:       assertFalse(node1.isHook());
991:       assertEquals((-1), node1.getCharno());
992:       assertFalse(node1.isInc());
993:       assertFalse(node1.isSetterDef());
994:       assertFalse(node1.isCase());
995:       assertFalse(node1.hasMoreThanOneChild());
996:       assertFalse(node1.isWith());
997:       assertFalse(node1.isRegExp());
998:       assertFalse(node1.isInstanceOf());
999:       assertEquals((-1), node1.getLineno());
1000:       assertFalse(node1.isCatch());
1001:       assertFalse(node2.isParamList());
1002:       assertFalse(node2.isNull());
1003:       assertFalse(node2.isSetterDef());
1004:       assertFalse(node2.isName());
1005:       assertFalse(node2.isCall());
1006:       assertFalse(node2.isVar());
1007:       assertFalse(node2.isCatch());
1008:       assertEquals(0, node2.getChildCount());
1009:       assertFalse(node2.isRegExp());
1010:       assertFalse(node2.isDebugger());
1011:       assertFalse(node2.isBlock());
1012:       assertFalse(node2.isWhile());
1013:       assertFalse(node2.isTry());
1014:       assertFalse(node2.isStringKey());
1015:       assertFalse(node2.isGetterDef());
1016:       assertFalse(node2.isNE());
1017:       assertEquals((-1), node2.getSourcePosition());
1018:       assertEquals((-1), node2.getLineno());
1019:       assertFalse(node2.isIf());
1020:       assertFalse(node2.isContinue());
1021:       assertFalse(node2.isCast());
1022:       assertFalse(node2.isFor());
1023:       assertFalse(node2.hasMoreThanOneChild());
1024:       assertFalse(node2.isInc());
1025:       assertFalse(node2.isFunction());
1026:       assertFalse(node2.isIn());
1027:       assertFalse(node2.isComma());
1028:       assertFalse(node2.isGetProp());
1029:       assertFalse(node2.isBreak());
1030:       assertFalse(node2.isThis());
1031:       assertFalse(node2.isThrow());
1032:       assertFalse(node2.isHook());
1033:       assertFalse(node2.isInstanceOf());
1034:       assertFalse(node2.isFalse());
1035:       assertFalse(node2.isWith());
1036:       assertEquals((-1), node2.getCharno());
1037:       assertFalse(node2.isScript());
1038:       assertFalse(node2.hasOneChild());
1039:       assertFalse(node2.isSwitch());
1040:       assertFalse(node2.isAnd());
1041:       assertFalse(node2.isObjectLit());
1042:       assertFalse(node2.isCase());
1043:       assertEquals(78132, node2.getType());
1044:       assertFalse(node2.isString());
1045:       assertFalse(node2.isNot());
1046:       assertFalse(node2.isNumber());
1047:       assertFalse(node2.isLabel());
1048:       assertFalse(node2.isReturn());
1049:       assertFalse(node2.hasChildren());
1050:       assertFalse(node2.isDelProp());
1051:       assertFalse(node2.isLabelName());
1052:       assertFalse(node2.isAssignAdd());
1053:       assertFalse(node2.isArrayLit());
1054:       assertFalse(node2.isGetElem());
1055:       assertFalse(node2.isAssign());
1056:       assertFalse(node2.isDec());
1057:       assertFalse(node2.isTypeOf());
1058:       assertFalse(node2.isExprResult());
1059:       assertFalse(node2.isVoid());
1060:       assertFalse(node2.isTrue());
1061:       assertFalse(node2.isAdd());
1062:       assertFalse(node2.isNew());
1063:       assertFalse(node2.isDo());
1064:       assertFalse(node2.isDefaultCase());
1065:       assertFalse(node2.isEmpty());
1066:       assertFalse(node2.isOr());
1067:       assertEquals(53, Node.INPUT_ID);
1068:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1069:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1070:       assertEquals(36, Node.QUOTED_PROP);
1071:       assertEquals(29, Node.JSDOC_INFO_PROP);
1072:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1073:       assertEquals(55, Node.INFERRED_FUNCTION);
1074:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1075:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1076:       assertEquals(46, Node.IS_NAMESPACE);
1077:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1078:       assertEquals(2, Node.POST_FLAG);
1079:       assertEquals(47, Node.IS_DISPATCHER);
1080:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1081:       assertEquals(40, Node.ORIGINALNAME_PROP);
1082:       assertEquals(43, Node.IS_CONSTANT_NAME);
1083:       assertEquals(52, Node.LENGTH);
1084:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1085:       assertEquals(54, Node.SLASH_V);
1086:       assertEquals(57, Node.REFLECTED_OBJECT);
1087:       assertEquals(30, Node.VAR_ARGS_NAME);
1088:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1089:       assertEquals(50, Node.FREE_CALL);
1090:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1091:       assertEquals(39, Node.EMPTY_BLOCK);
1092:       assertEquals(57, Node.LAST_PROP);
1093:       assertEquals(32, Node.INCRDECR_PROP);
1094:       assertEquals(1, Node.DECR_FLAG);
1095:       assertEquals(12, Node.COLUMN_BITS);
1096:       assertEquals(4095, Node.COLUMN_MASK);
1097:       assertEquals(8, Node.FLAG_NO_THROWS);
1098:       assertEquals(49, Node.DIRECT_EVAL);
1099:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1100:       assertEquals(56, Node.CHANGE_TIME);
1101:       assertEquals(37, Node.OPT_ARG_NAME);
1102:       assertEquals(48, Node.DIRECTIVES);
1103:       assertEquals(29, Node.JSDOC_INFO_PROP);
1104:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1105:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1107:       assertEquals(37, Node.OPT_ARG_NAME);
1108:       assertEquals(32, Node.INCRDECR_PROP);
1109:       assertEquals(2, Node.POST_FLAG);
1110:       assertEquals(12, Node.COLUMN_BITS);
1111:       assertEquals(47, Node.IS_DISPATCHER);
1112:       assertEquals(49, Node.DIRECT_EVAL);
1113:       assertEquals(57, Node.LAST_PROP);
1114:       assertEquals(4095, Node.COLUMN_MASK);
1115:       assertEquals(55, Node.INFERRED_FUNCTION);
1116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1118:       assertEquals(53, Node.INPUT_ID);
1119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1120:       assertEquals(48, Node.DIRECTIVES);
1121:       assertEquals(52, Node.LENGTH);
1122:       assertEquals(8, Node.FLAG_NO_THROWS);
1123:       assertEquals(56, Node.CHANGE_TIME);
1124:       assertEquals(36, Node.QUOTED_PROP);
1125:       assertEquals(57, Node.REFLECTED_OBJECT);
1126:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1127:       assertEquals(50, Node.FREE_CALL);
1128:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1129:       assertEquals(40, Node.ORIGINALNAME_PROP);
1130:       assertEquals(39, Node.EMPTY_BLOCK);
1131:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1132:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1133:       assertEquals(30, Node.VAR_ARGS_NAME);
1134:       assertEquals(1, Node.DECR_FLAG);
1135:       assertEquals(43, Node.IS_CONSTANT_NAME);
1136:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1137:       assertEquals(46, Node.IS_NAMESPACE);
1138:       assertEquals(54, Node.SLASH_V);
1139:       assertEquals(48, Node.DIRECTIVES);
1140:       assertEquals(39, Node.EMPTY_BLOCK);
1141:       assertEquals(55, Node.INFERRED_FUNCTION);
1142:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1143:       assertEquals(8, Node.FLAG_NO_THROWS);
1144:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1145:       assertEquals(4095, Node.COLUMN_MASK);
1146:       assertEquals(50, Node.FREE_CALL);
1147:       assertEquals(40, Node.ORIGINALNAME_PROP);
1148:       assertEquals(43, Node.IS_CONSTANT_NAME);
1149:       assertEquals(57, Node.REFLECTED_OBJECT);
1150:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1151:       assertEquals(53, Node.INPUT_ID);
1152:       assertEquals(36, Node.QUOTED_PROP);
1153:       assertEquals(52, Node.LENGTH);
1154:       assertEquals(29, Node.JSDOC_INFO_PROP);
1155:       assertEquals(30, Node.VAR_ARGS_NAME);
1156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1158:       assertEquals(47, Node.IS_DISPATCHER);
1159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1160:       assertEquals(57, Node.LAST_PROP);
1161:       assertEquals(37, Node.OPT_ARG_NAME);
1162:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1163:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1164:       assertEquals(2, Node.POST_FLAG);
1165:       assertEquals(49, Node.DIRECT_EVAL);
1166:       assertEquals(56, Node.CHANGE_TIME);
1167:       assertEquals(46, Node.IS_NAMESPACE);
1168:       assertEquals(54, Node.SLASH_V);
1169:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1170:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1171:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1172:       assertEquals(1, Node.DECR_FLAG);
1173:       assertEquals(12, Node.COLUMN_BITS);
1174:       assertEquals(32, Node.INCRDECR_PROP);
1175:       assertFalse(node0.equals((Object)node1));
1176:       assertFalse(node1.equals((Object)node0));
1177:       assertFalse(node2.equals((Object)node0));
1178:       assertNotSame(node0, node1);
1179:       assertNotSame(node0, node2);
1180:       assertSame(node1, node2);
1181:       assertNotSame(node1, node0);
1182:       assertSame(node2, node1);
1183:       assertNotSame(node2, node0);
1184:       
1185:       boolean boolean3 = node1.isSyntheticBlock();
1186:       assertFalse(node1.isGetterDef());
1187:       assertFalse(node1.isIf());
1188:       assertFalse(node1.isFor());
1189:       assertFalse(node1.isNE());
1190:       assertFalse(node1.isDebugger());
1191:       assertFalse(node1.isTry());
1192:       assertFalse(node1.isIn());
1193:       assertFalse(node1.isEmpty());
1194:       assertFalse(node1.isDefaultCase());
1195:       assertEquals(0, node1.getChildCount());
1196:       assertFalse(node1.isParamList());
1197:       assertFalse(node1.isSwitch());
1198:       assertFalse(node1.isFunction());
1199:       assertFalse(node1.isArrayLit());
1200:       assertFalse(node1.isName());
1201:       assertFalse(node1.isVar());
1202:       assertFalse(node1.isNull());
1203:       assertFalse(node1.isGetProp());
1204:       assertFalse(node1.isNew());
1205:       assertFalse(node1.isString());
1206:       assertFalse(node1.isAdd());
1207:       assertFalse(node1.isWhile());
1208:       assertFalse(node1.isTrue());
1209:       assertFalse(node1.isReturn());
1210:       assertFalse(node1.isVoid());
1211:       assertFalse(node1.isComma());
1212:       assertFalse(node1.isTypeOf());
1213:       assertFalse(node1.isBreak());
1214:       assertFalse(node1.isDelProp());
1215:       assertFalse(node1.isCall());
1216:       assertFalse(node1.isGetElem());
1217:       assertFalse(node1.isExprResult());
1218:       assertEquals(78132, node1.getType());
1219:       assertFalse(node1.isAssign());
1220:       assertFalse(node1.isLabelName());
1221:       assertFalse(node1.hasChildren());
1222:       assertFalse(node1.isDec());
1223:       assertEquals((-1), node1.getSourcePosition());
1224:       assertFalse(node1.isOr());
1225:       assertFalse(node1.isAssignAdd());
1226:       assertFalse(node1.isNumber());
1227:       assertFalse(node1.hasOneChild());
1228:       assertFalse(node1.isScript());
1229:       assertFalse(node1.isAnd());
1230:       assertFalse(node1.isContinue());
1231:       assertFalse(node1.isNot());
1232:       assertFalse(node1.isDo());
1233:       assertFalse(node1.isObjectLit());
1234:       assertFalse(node1.isLabel());
1235:       assertFalse(node1.isCast());
1236:       assertFalse(node1.isThrow());
1237:       assertFalse(node1.isStringKey());
1238:       assertFalse(node1.isFalse());
1239:       assertFalse(node1.isBlock());
1240:       assertFalse(node1.isThis());
1241:       assertFalse(node1.isHook());
1242:       assertEquals((-1), node1.getCharno());
1243:       assertFalse(node1.isInc());
1244:       assertFalse(node1.isSetterDef());
1245:       assertFalse(node1.isCase());
1246:       assertFalse(node1.hasMoreThanOneChild());
1247:       assertFalse(node1.isWith());
1248:       assertFalse(node1.isRegExp());
1249:       assertFalse(node1.isInstanceOf());
1250:       assertEquals((-1), node1.getLineno());
1251:       assertFalse(node1.isCatch());
1252:       assertEquals(29, Node.JSDOC_INFO_PROP);
1253:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1254:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1255:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1256:       assertEquals(37, Node.OPT_ARG_NAME);
1257:       assertEquals(32, Node.INCRDECR_PROP);
1258:       assertEquals(2, Node.POST_FLAG);
1259:       assertEquals(12, Node.COLUMN_BITS);
1260:       assertEquals(47, Node.IS_DISPATCHER);
1261:       assertEquals(49, Node.DIRECT_EVAL);
1262:       assertEquals(57, Node.LAST_PROP);
1263:       assertEquals(4095, Node.COLUMN_MASK);
1264:       assertEquals(55, Node.INFERRED_FUNCTION);
1265:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1266:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1267:       assertEquals(53, Node.INPUT_ID);
1268:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1269:       assertEquals(48, Node.DIRECTIVES);
1270:       assertEquals(52, Node.LENGTH);
1271:       assertEquals(8, Node.FLAG_NO_THROWS);
1272:       assertEquals(56, Node.CHANGE_TIME);
1273:       assertEquals(36, Node.QUOTED_PROP);
1274:       assertEquals(57, Node.REFLECTED_OBJECT);
1275:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1276:       assertEquals(50, Node.FREE_CALL);
1277:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1278:       assertEquals(40, Node.ORIGINALNAME_PROP);
1279:       assertEquals(39, Node.EMPTY_BLOCK);
1280:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1281:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1282:       assertEquals(30, Node.VAR_ARGS_NAME);
1283:       assertEquals(1, Node.DECR_FLAG);
1284:       assertEquals(43, Node.IS_CONSTANT_NAME);
1285:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1286:       assertEquals(46, Node.IS_NAMESPACE);
1287:       assertEquals(54, Node.SLASH_V);
1288:       assertFalse(boolean3);
1289:       assertFalse(node1.equals((Object)node0));
1290:       assertTrue(boolean3 == boolean0);
1291:       assertTrue(boolean3 == boolean2);
1292:       assertTrue(boolean3 == boolean1);
1293:       assertSame(node1, node2);
1294:       assertNotSame(node1, node0);
1295:       
1296:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
1297:       assertNotNull(node_FileLevelJsDocBuilder0);
1298:       assertFalse(node0.isExprResult());
1299:       assertFalse(node0.isScript());
1300:       assertFalse(node0.hasOneChild());
1301:       assertFalse(node0.isAnd());
1302:       assertFalse(node0.isObjectLit());
1303:       assertFalse(node0.isNumber());
1304:       assertFalse(node0.isNot());
1305:       assertEquals((-1), node0.getSourcePosition());
1306:       assertFalse(node0.isGetProp());
1307:       assertFalse(node0.isThis());
1308:       assertFalse(node0.isBreak());
1309:       assertEquals((-1), node0.getLineno());
1310:       assertFalse(node0.isGetElem());
1311:       assertFalse(node0.hasMoreThanOneChild());
1312:       assertFalse(node0.isWhile());
1313:       assertFalse(node0.isInstanceOf());
1314:       assertFalse(node0.hasChildren());
1315:       assertFalse(node0.isReturn());
1316:       assertFalse(node0.isWith());
1317:       assertFalse(node0.isHook());
1318:       assertFalse(node0.isAssign());
1319:       assertFalse(node0.isTypeOf());
1320:       assertFalse(node0.isComma());
1321:       assertFalse(node0.isDec());
1322:       assertFalse(node0.isInc());
1323:       assertEquals(155, node0.getType());
1324:       assertFalse(node0.isString());
1325:       assertFalse(node0.isIn());
1326:       assertFalse(node0.isSetterDef());
1327:       assertFalse(node0.isThrow());
1328:       assertFalse(node0.isContinue());
1329:       assertFalse(node0.isFalse());
1330:       assertFalse(node0.isDebugger());
1331:       assertFalse(node0.isVoid());
1332:       assertFalse(node0.isTrue());
1333:       assertFalse(node0.isFunction());
1334:       assertFalse(node0.isDefaultCase());
1335:       assertFalse(node0.isArrayLit());
1336:       assertFalse(node0.isTry());
1337:       assertFalse(node0.isEmpty());
1338:       assertFalse(node0.isGetterDef());
1339:       assertFalse(node0.isNull());
1340:       assertFalse(node0.isNE());
1341:       assertFalse(node0.isDelProp());
1342:       assertFalse(node0.isIf());
1343:       assertFalse(node0.isCall());
1344:       assertFalse(node0.isFor());
1345:       assertFalse(node0.isCatch());
1346:       assertFalse(node0.isRegExp());
1347:       assertEquals((-1), node0.getCharno());
1348:       assertFalse(node0.isSwitch());
1349:       assertFalse(node0.isBlock());
1350:       assertFalse(node0.isAdd());
1351:       assertFalse(node0.isDo());
1352:       assertFalse(node0.isCase());
1353:       assertFalse(node0.isNew());
1354:       assertFalse(node0.isName());
1355:       assertFalse(node0.isStringKey());
1356:       assertFalse(node0.isOr());
1357:       assertFalse(node0.isAssignAdd());
1358:       assertFalse(node0.isParamList());
1359:       assertTrue(node0.isCast());
1360:       assertFalse(node0.isLabelName());
1361:       assertFalse(node0.isVar());
1362:       assertEquals(0, node0.getChildCount());
1363:       assertFalse(node0.isLabel());
1364:       assertFalse(node1.isGetterDef());
1365:       assertFalse(node1.isIf());
1366:       assertFalse(node1.isFor());
1367:       assertFalse(node1.isNE());
1368:       assertFalse(node1.isDebugger());
1369:       assertFalse(node1.isTry());
1370:       assertFalse(node1.isIn());
1371:       assertFalse(node1.isEmpty());
1372:       assertFalse(node1.isDefaultCase());
1373:       assertEquals(0, node1.getChildCount());
1374:       assertFalse(node1.isParamList());
1375:       assertFalse(node1.isSwitch());
1376:       assertFalse(node1.isFunction());
1377:       assertFalse(node1.isArrayLit());
1378:       assertFalse(node1.isName());
1379:       assertFalse(node1.isVar());
1380:       assertFalse(node1.isNull());
1381:       assertFalse(node1.isGetProp());
1382:       assertFalse(node1.isNew());
1383:       assertFalse(node1.isString());
1384:       assertFalse(node1.isAdd());
1385:       assertFalse(node1.isWhile());
1386:       assertFalse(node1.isTrue());
1387:       assertFalse(node1.isReturn());
1388:       assertFalse(node1.isVoid());
1389:       assertFalse(node1.isComma());
1390:       assertFalse(node1.isTypeOf());
1391:       assertFalse(node1.isBreak());
1392:       assertFalse(node1.isDelProp());
1393:       assertFalse(node1.isCall());
1394:       assertFalse(node1.isGetElem());
1395:       assertFalse(node1.isExprResult());
1396:       assertEquals(78132, node1.getType());
1397:       assertFalse(node1.isAssign());
1398:       assertFalse(node1.isLabelName());
1399:       assertFalse(node1.hasChildren());
1400:       assertFalse(node1.isDec());
1401:       assertEquals((-1), node1.getSourcePosition());
1402:       assertFalse(node1.isOr());
1403:       assertFalse(node1.isAssignAdd());
1404:       assertFalse(node1.isNumber());
1405:       assertFalse(node1.hasOneChild());
1406:       assertFalse(node1.isScript());
1407:       assertFalse(node1.isAnd());
1408:       assertFalse(node1.isContinue());
1409:       assertFalse(node1.isNot());
1410:       assertFalse(node1.isDo());
1411:       assertFalse(node1.isObjectLit());
1412:       assertFalse(node1.isLabel());
1413:       assertFalse(node1.isCast());
1414:       assertFalse(node1.isThrow());
1415:       assertFalse(node1.isStringKey());
1416:       assertFalse(node1.isFalse());
1417:       assertFalse(node1.isBlock());
1418:       assertFalse(node1.isThis());
1419:       assertFalse(node1.isHook());
1420:       assertEquals((-1), node1.getCharno());
1421:       assertFalse(node1.isInc());
1422:       assertFalse(node1.isSetterDef());
1423:       assertFalse(node1.isCase());
1424:       assertFalse(node1.hasMoreThanOneChild());
1425:       assertFalse(node1.isWith());
1426:       assertFalse(node1.isRegExp());
1427:       assertFalse(node1.isInstanceOf());
1428:       assertEquals((-1), node1.getLineno());
1429:       assertFalse(node1.isCatch());
1430:       assertFalse(node2.isParamList());
1431:       assertFalse(node2.isNull());
1432:       assertFalse(node2.isSetterDef());
1433:       assertFalse(node2.isName());
1434:       assertFalse(node2.isCall());
1435:       assertFalse(node2.isVar());
1436:       assertFalse(node2.isCatch());
1437:       assertEquals(0, node2.getChildCount());
1438:       assertFalse(node2.isRegExp());
1439:       assertFalse(node2.isDebugger());
1440:       assertFalse(node2.isBlock());
1441:       assertFalse(node2.isWhile());
1442:       assertFalse(node2.isTry());
1443:       assertFalse(node2.isStringKey());
1444:       assertFalse(node2.isGetterDef());
1445:       assertFalse(node2.isNE());
1446:       assertEquals((-1), node2.getSourcePosition());
1447:       assertEquals((-1), node2.getLineno());
1448:       assertFalse(node2.isIf());
1449:       assertFalse(node2.isContinue());
1450:       assertFalse(node2.isCast());
1451:       assertFalse(node2.isFor());
1452:       assertFalse(node2.hasMoreThanOneChild());
1453:       assertFalse(node2.isInc());
1454:       assertFalse(node2.isFunction());
1455:       assertFalse(node2.isIn());
1456:       assertFalse(node2.isComma());
1457:       assertFalse(node2.isGetProp());
1458:       assertFalse(node2.isBreak());
1459:       assertFalse(node2.isThis());
1460:       assertFalse(node2.isThrow());
1461:       assertFalse(node2.isHook());
1462:       assertFalse(node2.isInstanceOf());
1463:       assertFalse(node2.isFalse());
1464:       assertFalse(node2.isWith());
1465:       assertEquals((-1), node2.getCharno());
1466:       assertFalse(node2.isScript());
1467:       assertFalse(node2.hasOneChild());
1468:       assertFalse(node2.isSwitch());
1469:       assertFalse(node2.isAnd());
1470:       assertFalse(node2.isObjectLit());
1471:       assertFalse(node2.isCase());
1472:       assertEquals(78132, node2.getType());
1473:       assertFalse(node2.isString());
1474:       assertFalse(node2.isNot());
1475:       assertFalse(node2.isNumber());
1476:       assertFalse(node2.isLabel());
1477:       assertFalse(node2.isReturn());
1478:       assertFalse(node2.hasChildren());
1479:       assertFalse(node2.isDelProp());
1480:       assertFalse(node2.isLabelName());
1481:       assertFalse(node2.isAssignAdd());
1482:       assertFalse(node2.isArrayLit());
1483:       assertFalse(node2.isGetElem());
1484:       assertFalse(node2.isAssign());
1485:       assertFalse(node2.isDec());
1486:       assertFalse(node2.isTypeOf());
1487:       assertFalse(node2.isExprResult());
1488:       assertFalse(node2.isVoid());
1489:       assertFalse(node2.isTrue());
1490:       assertFalse(node2.isAdd());
1491:       assertFalse(node2.isNew());
1492:       assertFalse(node2.isDo());
1493:       assertFalse(node2.isDefaultCase());
1494:       assertFalse(node2.isEmpty());
1495:       assertFalse(node2.isOr());
1496:       assertEquals(53, Node.INPUT_ID);
1497:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1498:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1499:       assertEquals(36, Node.QUOTED_PROP);
1500:       assertEquals(29, Node.JSDOC_INFO_PROP);
1501:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1502:       assertEquals(55, Node.INFERRED_FUNCTION);
1503:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1504:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1505:       assertEquals(46, Node.IS_NAMESPACE);
1506:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1507:       assertEquals(2, Node.POST_FLAG);
1508:       assertEquals(47, Node.IS_DISPATCHER);
1509:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1510:       assertEquals(40, Node.ORIGINALNAME_PROP);
1511:       assertEquals(43, Node.IS_CONSTANT_NAME);
1512:       assertEquals(52, Node.LENGTH);
1513:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1514:       assertEquals(54, Node.SLASH_V);
1515:       assertEquals(57, Node.REFLECTED_OBJECT);
1516:       assertEquals(30, Node.VAR_ARGS_NAME);
1517:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1518:       assertEquals(50, Node.FREE_CALL);
1519:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1520:       assertEquals(39, Node.EMPTY_BLOCK);
1521:       assertEquals(57, Node.LAST_PROP);
1522:       assertEquals(32, Node.INCRDECR_PROP);
1523:       assertEquals(1, Node.DECR_FLAG);
1524:       assertEquals(12, Node.COLUMN_BITS);
1525:       assertEquals(4095, Node.COLUMN_MASK);
1526:       assertEquals(8, Node.FLAG_NO_THROWS);
1527:       assertEquals(49, Node.DIRECT_EVAL);
1528:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1529:       assertEquals(56, Node.CHANGE_TIME);
1530:       assertEquals(37, Node.OPT_ARG_NAME);
1531:       assertEquals(48, Node.DIRECTIVES);
1532:       assertEquals(29, Node.JSDOC_INFO_PROP);
1533:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1534:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1535:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1536:       assertEquals(37, Node.OPT_ARG_NAME);
1537:       assertEquals(32, Node.INCRDECR_PROP);
1538:       assertEquals(2, Node.POST_FLAG);
1539:       assertEquals(12, Node.COLUMN_BITS);
1540:       assertEquals(47, Node.IS_DISPATCHER);
1541:       assertEquals(49, Node.DIRECT_EVAL);
1542:       assertEquals(57, Node.LAST_PROP);
1543:       assertEquals(4095, Node.COLUMN_MASK);
1544:       assertEquals(55, Node.INFERRED_FUNCTION);
1545:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1546:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1547:       assertEquals(53, Node.INPUT_ID);
1548:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1549:       assertEquals(48, Node.DIRECTIVES);
1550:       assertEquals(52, Node.LENGTH);
1551:       assertEquals(8, Node.FLAG_NO_THROWS);
1552:       assertEquals(56, Node.CHANGE_TIME);
1553:       assertEquals(36, Node.QUOTED_PROP);
1554:       assertEquals(57, Node.REFLECTED_OBJECT);
1555:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1556:       assertEquals(50, Node.FREE_CALL);
1557:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1558:       assertEquals(40, Node.ORIGINALNAME_PROP);
1559:       assertEquals(39, Node.EMPTY_BLOCK);
1560:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1561:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1562:       assertEquals(30, Node.VAR_ARGS_NAME);
1563:       assertEquals(1, Node.DECR_FLAG);
1564:       assertEquals(43, Node.IS_CONSTANT_NAME);
1565:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1566:       assertEquals(46, Node.IS_NAMESPACE);
1567:       assertEquals(54, Node.SLASH_V);
1568:       assertEquals(48, Node.DIRECTIVES);
1569:       assertEquals(39, Node.EMPTY_BLOCK);
1570:       assertEquals(55, Node.INFERRED_FUNCTION);
1571:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1572:       assertEquals(8, Node.FLAG_NO_THROWS);
1573:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1574:       assertEquals(4095, Node.COLUMN_MASK);
1575:       assertEquals(50, Node.FREE_CALL);
1576:       assertEquals(40, Node.ORIGINALNAME_PROP);
1577:       assertEquals(43, Node.IS_CONSTANT_NAME);
1578:       assertEquals(57, Node.REFLECTED_OBJECT);
1579:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1580:       assertEquals(53, Node.INPUT_ID);
1581:       assertEquals(36, Node.QUOTED_PROP);
1582:       assertEquals(52, Node.LENGTH);
1583:       assertEquals(29, Node.JSDOC_INFO_PROP);
1584:       assertEquals(30, Node.VAR_ARGS_NAME);
1585:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1586:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1587:       assertEquals(47, Node.IS_DISPATCHER);
1588:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1589:       assertEquals(57, Node.LAST_PROP);
1590:       assertEquals(37, Node.OPT_ARG_NAME);
1591:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1592:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1593:       assertEquals(2, Node.POST_FLAG);
1594:       assertEquals(49, Node.DIRECT_EVAL);
1595:       assertEquals(56, Node.CHANGE_TIME);
1596:       assertEquals(46, Node.IS_NAMESPACE);
1597:       assertEquals(54, Node.SLASH_V);
1598:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1599:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1600:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1601:       assertEquals(1, Node.DECR_FLAG);
1602:       assertEquals(12, Node.COLUMN_BITS);
1603:       assertEquals(32, Node.INCRDECR_PROP);
1604:       assertFalse(node0.equals((Object)node1));
1605:       assertFalse(node0.equals((Object)node2));
1606:       assertFalse(node1.equals((Object)node0));
1607:       assertFalse(node2.equals((Object)node0));
1608:       
1609:       node_FileLevelJsDocBuilder0.append("");
1610:       assertFalse(node0.isExprResult());
1611:       assertFalse(node0.isScript());
1612:       assertFalse(node0.hasOneChild());
1613:       assertFalse(node0.isAnd());
1614:       assertFalse(node0.isObjectLit());
1615:       assertFalse(node0.isNumber());
1616:       assertFalse(node0.isNot());
1617:       assertEquals((-1), node0.getSourcePosition());
1618:       assertFalse(node0.isGetProp());
1619:       assertFalse(node0.isThis());
1620:       assertFalse(node0.isBreak());
1621:       assertEquals((-1), node0.getLineno());
1622:       assertFalse(node0.isGetElem());
1623:       assertFalse(node0.hasMoreThanOneChild());
1624:       assertFalse(node0.isWhile());
1625:       assertFalse(node0.isInstanceOf());
1626:       assertFalse(node0.hasChildren());
1627:       assertFalse(node0.isReturn());
1628:       assertFalse(node0.isWith());
1629:       assertFalse(node0.isHook());
1630:       assertFalse(node0.isAssign());
1631:       assertFalse(node0.isTypeOf());
1632:       assertFalse(node0.isComma());
1633:       assertFalse(node0.isDec());
1634:       assertFalse(node0.isInc());
1635:       assertEquals(155, node0.getType());
1636:       assertFalse(node0.isString());
1637:       assertFalse(node0.isIn());
1638:       assertFalse(node0.isSetterDef());
1639:       assertFalse(node0.isThrow());
1640:       assertFalse(node0.isContinue());
1641:       assertFalse(node0.isFalse());
1642:       assertFalse(node0.isDebugger());
1643:       assertFalse(node0.isVoid());
1644:       assertFalse(node0.isTrue());
1645:       assertFalse(node0.isFunction());
1646:       assertFalse(node0.isDefaultCase());
1647:       assertFalse(node0.isArrayLit());
1648:       assertFalse(node0.isTry());
1649:       assertFalse(node0.isEmpty());
1650:       assertFalse(node0.isGetterDef());
1651:       assertFalse(node0.isNull());
1652:       assertFalse(node0.isNE());
1653:       assertFalse(node0.isDelProp());
1654:       assertFalse(node0.isIf());
1655:       assertFalse(node0.isCall());
1656:       assertFalse(node0.isFor());
1657:       assertFalse(node0.isCatch());
1658:       assertFalse(node0.isRegExp());
1659:       assertEquals((-1), node0.getCharno());
1660:       assertFalse(node0.isSwitch());
1661:       assertFalse(node0.isBlock());
1662:       assertFalse(node0.isAdd());
1663:       assertFalse(node0.isDo());
1664:       assertFalse(node0.isCase());
1665:       assertFalse(node0.isNew());
1666:       assertFalse(node0.isName());
1667:       assertFalse(node0.isStringKey());
1668:       assertFalse(node0.isOr());
1669:       assertFalse(node0.isAssignAdd());
1670:       assertFalse(node0.isParamList());
1671:       assertTrue(node0.isCast());
1672:       assertFalse(node0.isLabelName());
1673:       assertFalse(node0.isVar());
1674:       assertEquals(0, node0.getChildCount());
1675:       assertFalse(node0.isLabel());
1676:       assertFalse(node1.isGetterDef());
1677:       assertFalse(node1.isIf());
1678:       assertFalse(node1.isFor());
1679:       assertFalse(node1.isNE());
1680:       assertFalse(node1.isDebugger());
1681:       assertFalse(node1.isTry());
1682:       assertFalse(node1.isIn());
1683:       assertFalse(node1.isEmpty());
1684:       assertFalse(node1.isDefaultCase());
1685:       assertEquals(0, node1.getChildCount());
1686:       assertFalse(node1.isParamList());
1687:       assertFalse(node1.isSwitch());
1688:       assertFalse(node1.isFunction());
1689:       assertFalse(node1.isArrayLit());
1690:       assertFalse(node1.isName());
1691:       assertFalse(node1.isVar());
1692:       assertFalse(node1.isNull());
1693:       assertFalse(node1.isGetProp());
1694:       assertFalse(node1.isNew());
1695:       assertFalse(node1.isString());
1696:       assertFalse(node1.isAdd());
1697:       assertFalse(node1.isWhile());
1698:       assertFalse(node1.isTrue());
1699:       assertFalse(node1.isReturn());
1700:       assertFalse(node1.isVoid());
1701:       assertFalse(node1.isComma());
1702:       assertFalse(node1.isTypeOf());
1703:       assertFalse(node1.isBreak());
1704:       assertFalse(node1.isDelProp());
1705:       assertFalse(node1.isCall());
1706:       assertFalse(node1.isGetElem());
1707:       assertFalse(node1.isExprResult());
1708:       assertEquals(78132, node1.getType());
1709:       assertFalse(node1.isAssign());
1710:       assertFalse(node1.isLabelName());
1711:       assertFalse(node1.hasChildren());
1712:       assertFalse(node1.isDec());
1713:       assertEquals((-1), node1.getSourcePosition());
1714:       assertFalse(node1.isOr());
1715:       assertFalse(node1.isAssignAdd());
1716:       assertFalse(node1.isNumber());
1717:       assertFalse(node1.hasOneChild());
1718:       assertFalse(node1.isScript());
1719:       assertFalse(node1.isAnd());
1720:       assertFalse(node1.isContinue());
1721:       assertFalse(node1.isNot());
1722:       assertFalse(node1.isDo());
1723:       assertFalse(node1.isObjectLit());
1724:       assertFalse(node1.isLabel());
1725:       assertFalse(node1.isCast());
1726:       assertFalse(node1.isThrow());
1727:       assertFalse(node1.isStringKey());
1728:       assertFalse(node1.isFalse());
1729:       assertFalse(node1.isBlock());
1730:       assertFalse(node1.isThis());
1731:       assertFalse(node1.isHook());
1732:       assertEquals((-1), node1.getCharno());
1733:       assertFalse(node1.isInc());
1734:       assertFalse(node1.isSetterDef());
1735:       assertFalse(node1.isCase());
1736:       assertFalse(node1.hasMoreThanOneChild());
1737:       assertFalse(node1.isWith());
1738:       assertFalse(node1.isRegExp());
1739:       assertFalse(node1.isInstanceOf());
1740:       assertEquals((-1), node1.getLineno());
1741:       assertFalse(node1.isCatch());
1742:       assertFalse(node2.isParamList());
1743:       assertFalse(node2.isNull());
1744:       assertFalse(node2.isSetterDef());
1745:       assertFalse(node2.isName());
1746:       assertFalse(node2.isCall());
1747:       assertFalse(node2.isVar());
1748:       assertFalse(node2.isCatch());
1749:       assertEquals(0, node2.getChildCount());
1750:       assertFalse(node2.isRegExp());
1751:       assertFalse(node2.isDebugger());
1752:       assertFalse(node2.isBlock());
1753:       assertFalse(node2.isWhile());
1754:       assertFalse(node2.isTry());
1755:       assertFalse(node2.isStringKey());
1756:       assertFalse(node2.isGetterDef());
1757:       assertFalse(node2.isNE());
1758:       assertEquals((-1), node2.getSourcePosition());
1759:       assertEquals((-1), node2.getLineno());
1760:       assertFalse(node2.isIf());
1761:       assertFalse(node2.isContinue());
1762:       assertFalse(node2.isCast());
1763:       assertFalse(node2.isFor());
1764:       assertFalse(node2.hasMoreThanOneChild());
1765:       assertFalse(node2.isInc());
1766:       assertFalse(node2.isFunction());
1767:       assertFalse(node2.isIn());
1768:       assertFalse(node2.isComma());
1769:       assertFalse(node2.isGetProp());
1770:       assertFalse(node2.isBreak());
1771:       assertFalse(node2.isThis());
1772:       assertFalse(node2.isThrow());
1773:       assertFalse(node2.isHook());
1774:       assertFalse(node2.isInstanceOf());
1775:       assertFalse(node2.isFalse());
1776:       assertFalse(node2.isWith());
1777:       assertEquals((-1), node2.getCharno());
1778:       assertFalse(node2.isScript());
1779:       assertFalse(node2.hasOneChild());
1780:       assertFalse(node2.isSwitch());
1781:       assertFalse(node2.isAnd());
1782:       assertFalse(node2.isObjectLit());
1783:       assertFalse(node2.isCase());
1784:       assertEquals(78132, node2.getType());
1785:       assertFalse(node2.isString());
1786:       assertFalse(node2.isNot());
1787:       assertFalse(node2.isNumber());
1788:       assertFalse(node2.isLabel());
1789:       assertFalse(node2.isReturn());
1790:       assertFalse(node2.hasChildren());
1791:       assertFalse(node2.isDelProp());
1792:       assertFalse(node2.isLabelName());
1793:       assertFalse(node2.isAssignAdd());
1794:       assertFalse(node2.isArrayLit());
1795:       assertFalse(node2.isGetElem());
1796:       assertFalse(node2.isAssign());
1797:       assertFalse(node2.isDec());
1798:       assertFalse(node2.isTypeOf());
1799:       assertFalse(node2.isExprResult());
1800:       assertFalse(node2.isVoid());
1801:       assertFalse(node2.isTrue());
1802:       assertFalse(node2.isAdd());
1803:       assertFalse(node2.isNew());
1804:       assertFalse(node2.isDo());
1805:       assertFalse(node2.isDefaultCase());
1806:       assertFalse(node2.isEmpty());
1807:       assertFalse(node2.isOr());
1808:       assertEquals(53, Node.INPUT_ID);
1809:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1810:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1811:       assertEquals(36, Node.QUOTED_PROP);
1812:       assertEquals(29, Node.JSDOC_INFO_PROP);
1813:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1814:       assertEquals(55, Node.INFERRED_FUNCTION);
1815:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1816:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1817:       assertEquals(46, Node.IS_NAMESPACE);
1818:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1819:       assertEquals(2, Node.POST_FLAG);
1820:       assertEquals(47, Node.IS_DISPATCHER);
1821:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1822:       assertEquals(40, Node.ORIGINALNAME_PROP);
1823:       assertEquals(43, Node.IS_CONSTANT_NAME);
1824:       assertEquals(52, Node.LENGTH);
1825:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1826:       assertEquals(54, Node.SLASH_V);
1827:       assertEquals(57, Node.REFLECTED_OBJECT);
1828:       assertEquals(30, Node.VAR_ARGS_NAME);
1829:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1830:       assertEquals(50, Node.FREE_CALL);
1831:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1832:       assertEquals(39, Node.EMPTY_BLOCK);
1833:       assertEquals(57, Node.LAST_PROP);
1834:       assertEquals(32, Node.INCRDECR_PROP);
1835:       assertEquals(1, Node.DECR_FLAG);
1836:       assertEquals(12, Node.COLUMN_BITS);
1837:       assertEquals(4095, Node.COLUMN_MASK);
1838:       assertEquals(8, Node.FLAG_NO_THROWS);
1839:       assertEquals(49, Node.DIRECT_EVAL);
1840:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1841:       assertEquals(56, Node.CHANGE_TIME);
1842:       assertEquals(37, Node.OPT_ARG_NAME);
1843:       assertEquals(48, Node.DIRECTIVES);
1844:       assertEquals(29, Node.JSDOC_INFO_PROP);
1845:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1846:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1847:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1848:       assertEquals(37, Node.OPT_ARG_NAME);
1849:       assertEquals(32, Node.INCRDECR_PROP);
1850:       assertEquals(2, Node.POST_FLAG);
1851:       assertEquals(12, Node.COLUMN_BITS);
1852:       assertEquals(47, Node.IS_DISPATCHER);
1853:       assertEquals(49, Node.DIRECT_EVAL);
1854:       assertEquals(57, Node.LAST_PROP);
1855:       assertEquals(4095, Node.COLUMN_MASK);
1856:       assertEquals(55, Node.INFERRED_FUNCTION);
1857:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1858:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1859:       assertEquals(53, Node.INPUT_ID);
1860:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1861:       assertEquals(48, Node.DIRECTIVES);
1862:       assertEquals(52, Node.LENGTH);
1863:       assertEquals(8, Node.FLAG_NO_THROWS);
1864:       assertEquals(56, Node.CHANGE_TIME);
1865:       assertEquals(36, Node.QUOTED_PROP);
1866:       assertEquals(57, Node.REFLECTED_OBJECT);
1867:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1868:       assertEquals(50, Node.FREE_CALL);
1869:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1870:       assertEquals(40, Node.ORIGINALNAME_PROP);
1871:       assertEquals(39, Node.EMPTY_BLOCK);
1872:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1873:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1874:       assertEquals(30, Node.VAR_ARGS_NAME);
1875:       assertEquals(1, Node.DECR_FLAG);
1876:       assertEquals(43, Node.IS_CONSTANT_NAME);
1877:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1878:       assertEquals(46, Node.IS_NAMESPACE);
1879:       assertEquals(54, Node.SLASH_V);
1880:       assertEquals(48, Node.DIRECTIVES);
1881:       assertEquals(39, Node.EMPTY_BLOCK);
1882:       assertEquals(55, Node.INFERRED_FUNCTION);
1883:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1884:       assertEquals(8, Node.FLAG_NO_THROWS);
1885:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1886:       assertEquals(4095, Node.COLUMN_MASK);
1887:       assertEquals(50, Node.FREE_CALL);
1888:       assertEquals(40, Node.ORIGINALNAME_PROP);
1889:       assertEquals(43, Node.IS_CONSTANT_NAME);
1890:       assertEquals(57, Node.REFLECTED_OBJECT);
1891:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1892:       assertEquals(53, Node.INPUT_ID);
1893:       assertEquals(36, Node.QUOTED_PROP);
1894:       assertEquals(52, Node.LENGTH);
1895:       assertEquals(29, Node.JSDOC_INFO_PROP);
1896:       assertEquals(30, Node.VAR_ARGS_NAME);
1897:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1898:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1899:       assertEquals(47, Node.IS_DISPATCHER);
1900:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1901:       assertEquals(57, Node.LAST_PROP);
1902:       assertEquals(37, Node.OPT_ARG_NAME);
1903:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1904:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1905:       assertEquals(2, Node.POST_FLAG);
1906:       assertEquals(49, Node.DIRECT_EVAL);
1907:       assertEquals(56, Node.CHANGE_TIME);
1908:       assertEquals(46, Node.IS_NAMESPACE);
1909:       assertEquals(54, Node.SLASH_V);
1910:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1911:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1912:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1913:       assertEquals(1, Node.DECR_FLAG);
1914:       assertEquals(12, Node.COLUMN_BITS);
1915:       assertEquals(32, Node.INCRDECR_PROP);
1916:       assertFalse(node0.equals((Object)node1));
1917:       assertFalse(node0.equals((Object)node2));
1918:       assertFalse(node1.equals((Object)node0));
1919:       assertFalse(node2.equals((Object)node0));
1920:       assertNotSame(node0, node1);
1921:       assertNotSame(node0, node2);
1922:       assertSame(node1, node2);
1923:       assertNotSame(node1, node0);
1924:       assertSame(node2, node1);
1925:       assertNotSame(node2, node0);
1926:       
1927:       boolean boolean4 = node2.wasEmptyNode();
1928:       assertFalse(node0.isExprResult());
1929:       assertFalse(node0.isScript());
1930:       assertFalse(node0.hasOneChild());
1931:       assertFalse(node0.isAnd());
1932:       assertFalse(node0.isObjectLit());
1933:       assertFalse(node0.isNumber());
1934:       assertFalse(node0.isNot());
1935:       assertEquals((-1), node0.getSourcePosition());
1936:       assertFalse(node0.isGetProp());
1937:       assertFalse(node0.isThis());
1938:       assertFalse(node0.isBreak());
1939:       assertEquals((-1), node0.getLineno());
1940:       assertFalse(node0.isGetElem());
1941:       assertFalse(node0.hasMoreThanOneChild());
1942:       assertFalse(node0.isWhile());
1943:       assertFalse(node0.isInstanceOf());
1944:       assertFalse(node0.hasChildren());
1945:       assertFalse(node0.isReturn());
1946:       assertFalse(node0.isWith());
1947:       assertFalse(node0.isHook());
1948:       assertFalse(node0.isAssign());
1949:       assertFalse(node0.isTypeOf());
1950:       assertFalse(node0.isComma());
1951:       assertFalse(node0.isDec());
1952:       assertFalse(node0.isInc());
1953:       assertEquals(155, node0.getType());
1954:       assertFalse(node0.isString());
1955:       assertFalse(node0.isIn());
1956:       assertFalse(node0.isSetterDef());
1957:       assertFalse(node0.isThrow());
1958:       assertFalse(node0.isContinue());
1959:       assertFalse(node0.isFalse());
1960:       assertFalse(node0.isDebugger());
1961:       assertFalse(node0.isVoid());
1962:       assertFalse(node0.isTrue());
1963:       assertFalse(node0.isFunction());
1964:       assertFalse(node0.isDefaultCase());
1965:       assertFalse(node0.isArrayLit());
1966:       assertFalse(node0.isTry());
1967:       assertFalse(node0.isEmpty());
1968:       assertFalse(node0.isGetterDef());
1969:       assertFalse(node0.isNull());
1970:       assertFalse(node0.isNE());
1971:       assertFalse(node0.isDelProp());
1972:       assertFalse(node0.isIf());
1973:       assertFalse(node0.isCall());
1974:       assertFalse(node0.isFor());
1975:       assertFalse(node0.isCatch());
1976:       assertFalse(node0.isRegExp());
1977:       assertEquals((-1), node0.getCharno());
1978:       assertFalse(node0.isSwitch());
1979:       assertFalse(node0.isBlock());
1980:       assertFalse(node0.isAdd());
1981:       assertFalse(node0.isDo());
1982:       assertFalse(node0.isCase());
1983:       assertFalse(node0.isNew());
1984:       assertFalse(node0.isName());
1985:       assertFalse(node0.isStringKey());
1986:       assertFalse(node0.isOr());
1987:       assertFalse(node0.isAssignAdd());
1988:       assertFalse(node0.isParamList());
1989:       assertTrue(node0.isCast());
1990:       assertFalse(node0.isLabelName());
1991:       assertFalse(node0.isVar());
1992:       assertEquals(0, node0.getChildCount());
1993:       assertFalse(node0.isLabel());
1994:       assertFalse(node1.isGetterDef());
1995:       assertFalse(node1.isIf());
1996:       assertFalse(node1.isFor());
1997:       assertFalse(node1.isNE());
1998:       assertFalse(node1.isDebugger());
1999:       assertFalse(node1.isTry());
2000:       assertFalse(node1.isIn());
2001:       assertFalse(node1.isEmpty());
2002:       assertFalse(node1.isDefaultCase());
2003:       assertEquals(0, node1.getChildCount());
2004:       assertFalse(node1.isParamList());
2005:       assertFalse(node1.isSwitch());
2006:       assertFalse(node1.isFunction());
2007:       assertFalse(node1.isArrayLit());
2008:       assertFalse(node1.isName());
2009:       assertFalse(node1.isVar());
2010:       assertFalse(node1.isNull());
2011:       assertFalse(node1.isGetProp());
2012:       assertFalse(node1.isNew());
2013:       assertFalse(node1.isString());
2014:       assertFalse(node1.isAdd());
2015:       assertFalse(node1.isWhile());
2016:       assertFalse(node1.isTrue());
2017:       assertFalse(node1.isReturn());
2018:       assertFalse(node1.isVoid());
2019:       assertFalse(node1.isComma());
2020:       assertFalse(node1.isTypeOf());
2021:       assertFalse(node1.isBreak());
2022:       assertFalse(node1.isDelProp());
2023:       assertFalse(node1.isCall());
2024:       assertFalse(node1.isGetElem());
2025:       assertFalse(node1.isExprResult());
2026:       assertEquals(78132, node1.getType());
2027:       assertFalse(node1.isAssign());
2028:       assertFalse(node1.isLabelName());
2029:       assertFalse(node1.hasChildren());
2030:       assertFalse(node1.isDec());
2031:       assertEquals((-1), node1.getSourcePosition());
2032:       assertFalse(node1.isOr());
2033:       assertFalse(node1.isAssignAdd());
2034:       assertFalse(node1.isNumber());
2035:       assertFalse(node1.hasOneChild());
2036:       assertFalse(node1.isScript());
2037:       assertFalse(node1.isAnd());
2038:       assertFalse(node1.isContinue());
2039:       assertFalse(node1.isNot());
2040:       assertFalse(node1.isDo());
2041:       assertFalse(node1.isObjectLit());
2042:       assertFalse(node1.isLabel());
2043:       assertFalse(node1.isCast());
2044:       assertFalse(node1.isThrow());
2045:       assertFalse(node1.isStringKey());
2046:       assertFalse(node1.isFalse());
2047:       assertFalse(node1.isBlock());
2048:       assertFalse(node1.isThis());
2049:       assertFalse(node1.isHook());
2050:       assertEquals((-1), node1.getCharno());
2051:       assertFalse(node1.isInc());
2052:       assertFalse(node1.isSetterDef());
2053:       assertFalse(node1.isCase());
2054:       assertFalse(node1.hasMoreThanOneChild());
2055:       assertFalse(node1.isWith());
2056:       assertFalse(node1.isRegExp());
2057:       assertFalse(node1.isInstanceOf());
2058:       assertEquals((-1), node1.getLineno());
2059:       assertFalse(node1.isCatch());
2060:       assertFalse(node2.isParamList());
2061:       assertFalse(node2.isNull());
2062:       assertFalse(node2.isSetterDef());
2063:       assertFalse(node2.isName());
2064:       assertFalse(node2.isCall());
2065:       assertFalse(node2.isVar());
2066:       assertFalse(node2.isCatch());
2067:       assertEquals(0, node2.getChildCount());
2068:       assertFalse(node2.isRegExp());
2069:       assertFalse(node2.isDebugger());
2070:       assertFalse(node2.isBlock());
2071:       assertFalse(node2.isWhile());
2072:       assertFalse(node2.isTry());
2073:       assertFalse(node2.isStringKey());
2074:       assertFalse(node2.isGetterDef());
2075:       assertFalse(node2.isNE());
2076:       assertEquals((-1), node2.getSourcePosition());
2077:       assertEquals((-1), node2.getLineno());
2078:       assertFalse(node2.isIf());
2079:       assertFalse(node2.isContinue());
2080:       assertFalse(node2.isCast());
2081:       assertFalse(node2.isFor());
2082:       assertFalse(node2.hasMoreThanOneChild());
2083:       assertFalse(node2.isInc());
2084:       assertFalse(node2.isFunction());
2085:       assertFalse(node2.isIn());
2086:       assertFalse(node2.isComma());
2087:       assertFalse(node2.isGetProp());
2088:       assertFalse(node2.isBreak());
2089:       assertFalse(node2.isThis());
2090:       assertFalse(node2.isThrow());
2091:       assertFalse(node2.isHook());
2092:       assertFalse(node2.isInstanceOf());
2093:       assertFalse(node2.isFalse());
2094:       assertFalse(node2.isWith());
2095:       assertEquals((-1), node2.getCharno());
2096:       assertFalse(node2.isScript());
2097:       assertFalse(node2.hasOneChild());
2098:       assertFalse(node2.isSwitch());
2099:       assertFalse(node2.isAnd());
2100:       assertFalse(node2.isObjectLit());
2101:       assertFalse(node2.isCase());
2102:       assertEquals(78132, node2.getType());
2103:       assertFalse(node2.isString());
2104:       assertFalse(node2.isNot());
2105:       assertFalse(node2.isNumber());
2106:       assertFalse(node2.isLabel());
2107:       assertFalse(node2.isReturn());
2108:       assertFalse(node2.hasChildren());
2109:       assertFalse(node2.isDelProp());
2110:       assertFalse(node2.isLabelName());
2111:       assertFalse(node2.isAssignAdd());
2112:       assertFalse(node2.isArrayLit());
2113:       assertFalse(node2.isGetElem());
2114:       assertFalse(node2.isAssign());
2115:       assertFalse(node2.isDec());
2116:       assertFalse(node2.isTypeOf());
2117:       assertFalse(node2.isExprResult());
2118:       assertFalse(node2.isVoid());
2119:       assertFalse(node2.isTrue());
2120:       assertFalse(node2.isAdd());
2121:       assertFalse(node2.isNew());
2122:       assertFalse(node2.isDo());
2123:       assertFalse(node2.isDefaultCase());
2124:       assertFalse(node2.isEmpty());
2125:       assertFalse(node2.isOr());
2126:       assertEquals(53, Node.INPUT_ID);
2127:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2128:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2129:       assertEquals(36, Node.QUOTED_PROP);
2130:       assertEquals(29, Node.JSDOC_INFO_PROP);
2131:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2132:       assertEquals(55, Node.INFERRED_FUNCTION);
2133:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2134:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2135:       assertEquals(46, Node.IS_NAMESPACE);
2136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2137:       assertEquals(2, Node.POST_FLAG);
2138:       assertEquals(47, Node.IS_DISPATCHER);
2139:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2140:       assertEquals(40, Node.ORIGINALNAME_PROP);
2141:       assertEquals(43, Node.IS_CONSTANT_NAME);
2142:       assertEquals(52, Node.LENGTH);
2143:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2144:       assertEquals(54, Node.SLASH_V);
2145:       assertEquals(57, Node.REFLECTED_OBJECT);
2146:       assertEquals(30, Node.VAR_ARGS_NAME);
2147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2148:       assertEquals(50, Node.FREE_CALL);
2149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2150:       assertEquals(39, Node.EMPTY_BLOCK);
2151:       assertEquals(57, Node.LAST_PROP);
2152:       assertEquals(32, Node.INCRDECR_PROP);
2153:       assertEquals(1, Node.DECR_FLAG);
2154:       assertEquals(12, Node.COLUMN_BITS);
2155:       assertEquals(4095, Node.COLUMN_MASK);
2156:       assertEquals(8, Node.FLAG_NO_THROWS);
2157:       assertEquals(49, Node.DIRECT_EVAL);
2158:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2159:       assertEquals(56, Node.CHANGE_TIME);
2160:       assertEquals(37, Node.OPT_ARG_NAME);
2161:       assertEquals(48, Node.DIRECTIVES);
2162:       assertEquals(29, Node.JSDOC_INFO_PROP);
2163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2164:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2165:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2166:       assertEquals(37, Node.OPT_ARG_NAME);
2167:       assertEquals(32, Node.INCRDECR_PROP);
2168:       assertEquals(2, Node.POST_FLAG);
2169:       assertEquals(12, Node.COLUMN_BITS);
2170:       assertEquals(47, Node.IS_DISPATCHER);
2171:       assertEquals(49, Node.DIRECT_EVAL);
2172:       assertEquals(57, Node.LAST_PROP);
2173:       assertEquals(4095, Node.COLUMN_MASK);
2174:       assertEquals(55, Node.INFERRED_FUNCTION);
2175:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2176:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2177:       assertEquals(53, Node.INPUT_ID);
2178:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2179:       assertEquals(48, Node.DIRECTIVES);
2180:       assertEquals(52, Node.LENGTH);
2181:       assertEquals(8, Node.FLAG_NO_THROWS);
2182:       assertEquals(56, Node.CHANGE_TIME);
2183:       assertEquals(36, Node.QUOTED_PROP);
2184:       assertEquals(57, Node.REFLECTED_OBJECT);
2185:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2186:       assertEquals(50, Node.FREE_CALL);
2187:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2188:       assertEquals(40, Node.ORIGINALNAME_PROP);
2189:       assertEquals(39, Node.EMPTY_BLOCK);
2190:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2191:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2192:       assertEquals(30, Node.VAR_ARGS_NAME);
2193:       assertEquals(1, Node.DECR_FLAG);
2194:       assertEquals(43, Node.IS_CONSTANT_NAME);
2195:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2196:       assertEquals(46, Node.IS_NAMESPACE);
2197:       assertEquals(54, Node.SLASH_V);
2198:       assertEquals(48, Node.DIRECTIVES);
2199:       assertEquals(39, Node.EMPTY_BLOCK);
2200:       assertEquals(55, Node.INFERRED_FUNCTION);
2201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2202:       assertEquals(8, Node.FLAG_NO_THROWS);
2203:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2204:       assertEquals(4095, Node.COLUMN_MASK);
2205:       assertEquals(50, Node.FREE_CALL);
2206:       assertEquals(40, Node.ORIGINALNAME_PROP);
2207:       assertEquals(43, Node.IS_CONSTANT_NAME);
2208:       assertEquals(57, Node.REFLECTED_OBJECT);
2209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2210:       assertEquals(53, Node.INPUT_ID);
2211:       assertEquals(36, Node.QUOTED_PROP);
2212:       assertEquals(52, Node.LENGTH);
2213:       assertEquals(29, Node.JSDOC_INFO_PROP);
2214:       assertEquals(30, Node.VAR_ARGS_NAME);
2215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2217:       assertEquals(47, Node.IS_DISPATCHER);
2218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2219:       assertEquals(57, Node.LAST_PROP);
2220:       assertEquals(37, Node.OPT_ARG_NAME);
2221:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2223:       assertEquals(2, Node.POST_FLAG);
2224:       assertEquals(49, Node.DIRECT_EVAL);
2225:       assertEquals(56, Node.CHANGE_TIME);
2226:       assertEquals(46, Node.IS_NAMESPACE);
2227:       assertEquals(54, Node.SLASH_V);
2228:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2229:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2231:       assertEquals(1, Node.DECR_FLAG);
2232:       assertEquals(12, Node.COLUMN_BITS);
2233:       assertEquals(32, Node.INCRDECR_PROP);
2234:       assertFalse(boolean4);
2235:       assertFalse(node0.equals((Object)node1));
2236:       assertFalse(node0.equals((Object)node2));
2237:       assertFalse(node1.equals((Object)node0));
2238:       assertFalse(node2.equals((Object)node0));
2239:       assertTrue(boolean4 == boolean0);
2240:       assertTrue(boolean4 == boolean2);
2241:       assertTrue(boolean4 == boolean3);
2242:       assertTrue(boolean4 == boolean1);
2243:       assertNotSame(node0, node1);
2244:       assertNotSame(node0, node2);
2245:       assertSame(node1, node2);
2246:       assertNotSame(node1, node0);
2247:       assertSame(node2, node1);
2248:       assertNotSame(node2, node0);
2249:       
2250:       boolean boolean5 = node0.isCatch();
2251:       assertFalse(node0.isExprResult());
2252:       assertFalse(node0.isScript());
2253:       assertFalse(node0.hasOneChild());
2254:       assertFalse(node0.isAnd());
2255:       assertFalse(node0.isObjectLit());
2256:       assertFalse(node0.isNumber());
2257:       assertFalse(node0.isNot());
2258:       assertEquals((-1), node0.getSourcePosition());
2259:       assertFalse(node0.isGetProp());
2260:       assertFalse(node0.isThis());
2261:       assertFalse(node0.isBreak());
2262:       assertEquals((-1), node0.getLineno());
2263:       assertFalse(node0.isGetElem());
2264:       assertFalse(node0.hasMoreThanOneChild());
2265:       assertFalse(node0.isWhile());
2266:       assertFalse(node0.isInstanceOf());
2267:       assertFalse(node0.hasChildren());
2268:       assertFalse(node0.isReturn());
2269:       assertFalse(node0.isWith());
2270:       assertFalse(node0.isHook());
2271:       assertFalse(node0.isAssign());
2272:       assertFalse(node0.isTypeOf());
2273:       assertFalse(node0.isComma());
2274:       assertFalse(node0.isDec());
2275:       assertFalse(node0.isInc());
2276:       assertEquals(155, node0.getType());
2277:       assertFalse(node0.isString());
2278:       assertFalse(node0.isIn());
2279:       assertFalse(node0.isSetterDef());
2280:       assertFalse(node0.isThrow());
2281:       assertFalse(node0.isContinue());
2282:       assertFalse(node0.isFalse());
2283:       assertFalse(node0.isDebugger());
2284:       assertFalse(node0.isVoid());
2285:       assertFalse(node0.isTrue());
2286:       assertFalse(node0.isFunction());
2287:       assertFalse(node0.isDefaultCase());
2288:       assertFalse(node0.isArrayLit());
2289:       assertFalse(node0.isTry());
2290:       assertFalse(node0.isEmpty());
2291:       assertFalse(node0.isGetterDef());
2292:       assertFalse(node0.isNull());
2293:       assertFalse(node0.isNE());
2294:       assertFalse(node0.isDelProp());
2295:       assertFalse(node0.isIf());
2296:       assertFalse(node0.isCall());
2297:       assertFalse(node0.isFor());
2298:       assertFalse(node0.isCatch());
2299:       assertFalse(node0.isRegExp());
2300:       assertEquals((-1), node0.getCharno());
2301:       assertFalse(node0.isSwitch());
2302:       assertFalse(node0.isBlock());
2303:       assertFalse(node0.isAdd());
2304:       assertFalse(node0.isDo());
2305:       assertFalse(node0.isCase());
2306:       assertFalse(node0.isNew());
2307:       assertFalse(node0.isName());
2308:       assertFalse(node0.isStringKey());
2309:       assertFalse(node0.isOr());
2310:       assertFalse(node0.isAssignAdd());
2311:       assertFalse(node0.isParamList());
2312:       assertTrue(node0.isCast());
2313:       assertFalse(node0.isLabelName());
2314:       assertFalse(node0.isVar());
2315:       assertEquals(0, node0.getChildCount());
2316:       assertFalse(node0.isLabel());
2317:       assertEquals(53, Node.INPUT_ID);
2318:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2320:       assertEquals(36, Node.QUOTED_PROP);
2321:       assertEquals(29, Node.JSDOC_INFO_PROP);
2322:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2323:       assertEquals(55, Node.INFERRED_FUNCTION);
2324:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2325:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2326:       assertEquals(46, Node.IS_NAMESPACE);
2327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2328:       assertEquals(2, Node.POST_FLAG);
2329:       assertEquals(47, Node.IS_DISPATCHER);
2330:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2331:       assertEquals(40, Node.ORIGINALNAME_PROP);
2332:       assertEquals(43, Node.IS_CONSTANT_NAME);
2333:       assertEquals(52, Node.LENGTH);
2334:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2335:       assertEquals(54, Node.SLASH_V);
2336:       assertEquals(57, Node.REFLECTED_OBJECT);
2337:       assertEquals(30, Node.VAR_ARGS_NAME);
2338:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2339:       assertEquals(50, Node.FREE_CALL);
2340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2341:       assertEquals(39, Node.EMPTY_BLOCK);
2342:       assertEquals(57, Node.LAST_PROP);
2343:       assertEquals(32, Node.INCRDECR_PROP);
2344:       assertEquals(1, Node.DECR_FLAG);
2345:       assertEquals(12, Node.COLUMN_BITS);
2346:       assertEquals(4095, Node.COLUMN_MASK);
2347:       assertEquals(8, Node.FLAG_NO_THROWS);
2348:       assertEquals(49, Node.DIRECT_EVAL);
2349:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2350:       assertEquals(56, Node.CHANGE_TIME);
2351:       assertEquals(37, Node.OPT_ARG_NAME);
2352:       assertEquals(48, Node.DIRECTIVES);
2353:       assertFalse(boolean5);
2354:       assertFalse(node0.equals((Object)node1));
2355:       assertFalse(node0.equals((Object)node2));
2356:       assertTrue(boolean5 == boolean2);
2357:       assertTrue(boolean5 == boolean0);
2358:       assertTrue(boolean5 == boolean1);
2359:       assertTrue(boolean5 == boolean4);
2360:       assertTrue(boolean5 == boolean3);
2361:       assertNotSame(node0, node1);
2362:       assertNotSame(node0, node2);
2363:   }
2364: }
RegularFileObject[/tmp/EvoSuite_101_1629223338414/com/google/javascript/rhino/Node_101_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:18 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_101_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_101_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_101_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.NamedType",
333:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
334:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
335:       "com.google.common.collect.Sets",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.InputId",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.Iterables",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
349:       "com.google.common.collect.Sets$ImprovedAbstractSet",
350:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
351:       "com.google.common.collect.Hashing",
352:       "com.google.javascript.rhino.jstype.TernaryValue",
353:       "com.google.common.collect.AbstractMultimap$Values",
354:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
355:       "com.google.common.collect.AbstractMapBasedMultimap$1",
356:       "com.google.common.collect.Multimaps$Entries",
357:       "com.google.common.collect.AbstractMultimap$Entries",
358:       "com.google.common.collect.AbstractMapBasedMultimap$2",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
362:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
364:       "com.google.javascript.rhino.JSTypeExpression",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
366:     );
367:   }
368: }

[MASTER] 18:02:19.202 [logback-3] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(155, "");
assertNotNull(node0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInc());
assertEquals(155, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCall());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertTrue(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

boolean boolean0 = node0.getBooleanProp(155);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInc());
assertEquals(155, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCall());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertTrue(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(boolean0);

boolean boolean1 = node0.isThrow();
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInc());
assertEquals(155, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCall());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertTrue(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

boolean boolean2 = node0.isBreak();
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInc());
assertEquals(155, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCall());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertTrue(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInc());
assertEquals(155, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCall());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertTrue(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(iterable0.contains(node0));

node0.setQuotedString();
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInc());
assertEquals(155, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCall());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertTrue(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

Node node1 = Node.newString(78132, "", (-3203), 117);
assertNotNull(node1);
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertEquals(78132, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isDo());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);

int int0 = node1.getChangeTime();
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertEquals(78132, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isDo());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, int0);
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node0);

Node node2 = node1.srcref(node0);
assertNotNull(node2);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInc());
assertEquals(155, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCall());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertTrue(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertEquals(78132, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isDo());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isTry());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertEquals((-1), node2.getSourcePosition());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCase());
assertEquals(78132, node2.getType());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertSame(node2, node1);
assertNotSame(node2, node0);

boolean boolean3 = node1.isSyntheticBlock();
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertEquals(78132, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isDo());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean3);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertSame(node1, node2);
assertNotSame(node1, node0);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInc());
assertEquals(155, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCall());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertTrue(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertEquals(78132, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isDo());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isTry());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertEquals((-1), node2.getSourcePosition());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCase());
assertEquals(78132, node2.getType());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));

node_FileLevelJsDocBuilder0.append("");
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInc());
assertEquals(155, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCall());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertTrue(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertEquals(78132, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isDo());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isTry());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertEquals((-1), node2.getSourcePosition());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCase());
assertEquals(78132, node2.getType());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertSame(node2, node1);
assertNotSame(node2, node0);

boolean boolean4 = node2.wasEmptyNode();
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInc());
assertEquals(155, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCall());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertTrue(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isGetProp());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertEquals(78132, node1.getType());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isDo());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabel());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isTry());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertEquals((-1), node2.getSourcePosition());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isFor());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCase());
assertEquals(78132, node2.getType());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(boolean4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertSame(node2, node1);
assertNotSame(node2, node0);

boolean boolean5 = node0.isCatch();
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInc());
assertEquals(155, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCall());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertTrue(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(boolean5);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertNotSame(node0, node1);
assertNotSame(node0, node2);


[MASTER] 18:02:35.806 [logback-3] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_281_1629223355806
[MASTER] 18:02:35.806 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 18:02:36.431 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:36.867 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:37.180 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:37.455 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:37.704 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:38.727 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:39.049 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:39.295 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:39.535 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:39.786 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:40.013 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:40.247 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:40.499 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:40.728 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:41.044 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:41.265 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:41.501 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:41.757 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:41.974 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:42.228 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:42.602 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:42.859 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:43.082 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:43.332 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:43.770 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:43.988 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:44.316 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:44.558 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:44.826 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:45.210 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:46.362 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:46.633 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:46.905 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:47.388 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:48.011 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:48.369 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:49.196 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:49.521 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:50.322 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/23
* Done!

* Computation finished
